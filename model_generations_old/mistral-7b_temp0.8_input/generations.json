{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,2,3])",
        "alternatingSubarray(nums = [1, 1, 2, 2])",
        "alternatingSubarray([1, 2, 4, 5])",
        "alternatingSubarray(nums = [1,2,1,2,1])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 6, 3])",
        "alternatingSubarray(nums = [1, 2, 1, 3, 1, 4, 1])",
        "alternatingSubarray(nums = [1, 4, 4, 3, 2])",
        "alternatingSubarray(nums = [3, 5, 2, 7, 6])"
    ],
    "sample_310": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[0], [1]])",
        "matrixSum(a = [[1], [2], [3]])",
        "matrixSum(a = [[0], [0]])",
        "matrixSum(a = [[0, 1], [0, 0]])",
        "matrixSum(a = [[2, 1], [3, 2]])",
        "matrixSum(a = [[2, 1], [2, 1]])",
        "matrixSum(a = [\n    [1, 1],\n    [1, 1],\n])",
        "matrixSum([[0, 1, 0], [1, 1, 0]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0,1,1],[1,1,0],[1,0,1]])",
        "findChampion([[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1],\n                            [0, 1, 1],\n                            [1, 1, 1]])",
        "findChampion(grid = [[0,1,1],[1,1,0],[0,0,1]])",
        "findChampion(grid = [[1, 0, 0],\n                            [1, 1, 1],\n                            [0, 0, 1]])",
        "findChampion([[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 0],\n                            [0, 0, 0, 1],\n                            [1, 0, 0, 0],\n                            [0, 1, 1, 1]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1], [1]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 1], [2, 2]])",
        "matrixSum(a = [[2, 1], [3, 1]])",
        "matrixSum(a = [[2, 2, 2], [2, 2, 2], [2, 2, 2]])",
        "matrixSum(a = [[2, 3], [1, 0]])",
        "matrixSum(a = [[2, 3, 1], [1, 1, 2]])",
        "matrixSum(a = [[3, 7, 1], [2, 5, 9]])",
        "matrixSum(a = [[4, 3, 1], [4, 3, 1], [4, 3, 1]])",
        "matrixSum(a = [[3, 1, 4], [1, 5, 9], [2, 6, 3]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [0, 1, 2, 3])",
        "alternatingSubarray(nums = [1, 2, -1, -2, 1, 2, -1, -2])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 2, 2, 1])",
        "alternatingSubarray(nums = [1,2,3,-2,4,-3,-4])",
        "alternatingSubarray(nums = [4, -3, -1, 2, 5])",
        "alternatingSubarray([1,2,3,2,3,1,2])",
        "alternatingSubarray([1, 2, 3, 4, 1, 1, 2, 4])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"b\")",
        "findWordsContaining(words = [\"orange\", \"banana\", \"apple\"], x = \"ban\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"pineapple\"], x = \"na\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"bird\", \"dog\"], x = \"dog\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"orange\"], x = \"l\")",
        "findWordsContaining(words = [\"bull\", \"cow\", \"goat\"], x = \"o\")",
        "findWordsContaining(words = [\"ba\", \"z\", \"banana\", \"x\"], x = \"a\")",
        "findWordsContaining(words = [\"b\", \"x\", \"ba\", \"ba\"], x = \"a\")",
        "findWordsContaining(words = [\"fatty\", \"fatty\", \"fatty\"], x = \"fatty\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"aabcc\", s2 = \"adcaa\")",
        "canBeEqual(s1 = \"aabcc\", s2 = \"adcaa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"a\", s2 = \"b\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcda\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bccd\")",
        "canBeEqual(s1 = \"abcdcba\", s2 = \"abcdca\")",
        "canBeEqual(s1 = \"bcd\", s2 = \"dac\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"abce\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [3,7,1,6], target = 10)",
        "lengthOfLongestSubsequence(nums = [1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1,2,3],target = 0)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4],target=1)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1,1], target = 2)",
        "lengthOfLongestSubsequence(nums = [0,0,1,2], target = 2)",
        "lengthOfLongestSubsequence(nums = [2,1,2,3],target = 2)",
        "lengthOfLongestSubsequence(nums = [1,2,3,1,4,5,2], target = 6)",
        "lengthOfLongestSubsequence(nums = [4, 5, 7, 6, 8, 10, 20, 25, 27], target = 15)",
        "lengthOfLongestSubsequence(nums = [9,3,6,7,9,6,9,8,4,5,9,8,3],target = 51)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"aaa\")",
        "canBeEqual(s1 = \"bb\", s2 = \"bb\")",
        "canBeEqual(s1 = \"aab\", s2 = \"ab\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 4, 8, 16])",
        "maxSubarrays(nums = [1,2,1,2,1])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8])",
        "maxSubarrays(nums = [2, 5, 1, 2, 3, 5])",
        "maxSubarrays(nums = [2, 1, 3, 4, 2, 6])",
        "maxSubarrays(nums = [5, 2, 10, 2, 6])",
        "maxSubarrays(nums = [2, 3, 2, 1, 4, 2, 4])",
        "maxSubarrays(nums = [5, 8, 4, 3, 2, 4])",
        "maxSubarrays(nums = [3, 5, 4, 6, 7, 9, 2])",
        "maxSubarrays(nums = [10, 3, 2, 10, 5, 2])"
    ],
    "sample_315": [
        "buyChoco(prices = [5, 10], money = 5)",
        "buyChoco(prices = [2, 5], money = 3)",
        "buyChoco(prices = [2, 1], money = 4)",
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [1, 5, 4], money = 2)",
        "buyChoco(prices = [2, 3, 4, 5, 6], money = 15)",
        "buyChoco(prices = [6, 10, 3], money = 5)",
        "buyChoco(prices = [100, 200, 500, 600], money = 1000)",
        "buyChoco(prices = [1, 3, 6, 2, 5], money = 5)",
        "buyChoco(prices = [1, 100, 10], money = 98)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1], l = 1, r = 1)",
        "countSubMultisets(nums = [1,1,1], l = 0, r = 2)",
        "countSubMultisets(nums = [1,1,1,2,2,2], l = 3, r = 5)",
        "countSubMultisets(nums = [1,2,1,3], l = 2, r = 3)",
        "countSubMultisets(nums = [2,2,2,2,2], l = 2, r = 5)",
        "countSubMultisets(nums = [0,0,0,0,0], l = 0, r = 0)",
        "countSubMultisets(nums = [2,2,2,2,2], l = 1, r = 5)",
        "countSubMultisets(nums = [0, 0, 1], l = 0, r = 3)",
        "countSubMultisets(nums = [2,3,4,5], l = 0, r = 3)",
        "countSubMultisets(nums = [1, 2, 1, 2, 3, 1, 2], l = 5, r = 8)"
    ],
    "sample_322": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 12)",
        "isFascinating(n = 100)",
        "isFascinating(n = 3)",
        "isFascinating(n = 1111)",
        "isFascinating(n = 135)",
        "isFascinating(n = 75)",
        "isFascinating(n = 140)",
        "isFascinating(n = 223)",
        "isFascinating(n = 6336)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"bbb\")",
        "canBeEqual(s1 = \"aabcc\", s2 = \"adcaa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"aab\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcc\", s2 = \"adca\")",
        "canBeEqual(s1 = \"aabc\", s2 = \"abca\")",
        "canBeEqual(s1 = \"cd\", s2 = \"cb\")",
        "canBeEqual(s1 = \"babab\", s2 = \"ababab\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [2, 3, 5])",
        "minimumCoins(prices = [1, 3, 10])",
        "minimumCoins([1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 2, 1, 1])",
        "minimumCoins(prices = [4, 1, 6])",
        "minimumCoins(prices = [5, 3, 1, 1, 1, 2])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 9)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 12)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 18)",
        "accountBalanceAfterPurchase(p = 42)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1,1])",
        "minOperations(nums = [1,1,1,1])",
        "minOperations(nums = [1, 2, 3, 6])",
        "minOperations(nums = [3,1,3])",
        "minOperations(nums = [1, 1, 2, 3, 1])",
        "minOperations(nums = [3,1,3,9])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1,2,2,2,3])",
        "alternatingSubarray(nums = [1,1,2,3,3,4,4])",
        "alternatingSubarray([1,1,1,1,1,1,1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 1])",
        "alternatingSubarray(nums = [1, 3, 1, 2, 1, 3, 1, 4])",
        "alternatingSubarray(nums = [2, 1, 3, 2, 2, 1, 4, 2])",
        "alternatingSubarray(nums = [1, 1, 1, 2, 3, 1, 2, 3, 1])",
        "alternatingSubarray(nums = [2,3,4,1,5,3,2])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 5, 5, 5, 5, 5])"
    ],
    "sample_460": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 12, limit = 3)",
        "distributeCandies(n = 1, limit = 2)"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"bcd\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"ab\", x = 2)",
        "minOperations(s1 = \"a\", s2 = \"b\", x = 3)",
        "minOperations(s1 = \"aa\", s2 = \"aaa\", x = 2)",
        "minOperations(s1 = \"aabb\", s2 = \"bbaa\", x = 1)",
        "minOperations(s1 = \"abcabc\", s2 = \"cde\", x = 1)",
        "minOperations(s1 = \"abcabc\", s2 = \"abccc\", x = 3)",
        "minOperations(s1 = \"xabx\", s2 = \"yabz\", x = 1)",
        "minOperations(s1 = \"babaa\", s2 = \"bba\", x = 1)",
        "minOperations(s1 = \"aaabbbcccdddd\", s2 = \"aabaacccd\", x = 3)"
    ],
    "sample_340": [
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 4, y = 3, z = 2)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 1, z = 2)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 4, y = 5, z = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 1, 1, 1, 1], k = 3)",
        "minOperations(nums = [4, 3, 1, 2], k = 3)",
        "minOperations(nums = [9, 3, 5], k = 2)",
        "minOperations(nums = [1, 3, 2], k = 2)",
        "minOperations(nums = [1, 1, 1, 2, 3], k = 3)",
        "minOperations(nums = [1, 3, 1, 2], k = 4)",
        "minOperations(nums = [5, 2, 3, 4, 1], k = 1)",
        "minOperations(nums = [1, 2, 3, 4, 6, 7, 8, 10], k = 3)",
        "minOperations(nums = [1, 3, 1, 1, 1, 1, 1], k = 1)",
        "minOperations(nums = [0, 0, 0, 0, 1, 1, 1, 2, 2, 2], k = 3)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaba\")",
        "longestSemiRepetitiveSubstring(s = \"aabaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbccaa\")",
        "longestSemiRepetitiveSubstring(s = \"acab\")",
        "longestSemiRepetitiveSubstring(\"abcdefa\")",
        "longestSemiRepetitiveSubstring(s = \"acbcc\")",
        "longestSemiRepetitiveSubstring(\"ac\")",
        "longestSemiRepetitiveSubstring(s = \"abbcddee\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 2, 3, 4])",
        "isGood(a = [1, 2, 3, 4])",
        "isGood(a = [1, 2, 2, 3, 4, 4])",
        "isGood(a = [1, 2, 3, 4, 5])",
        "isGood(a = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(a = [1, 1, 3, 5])",
        "isGood(a = [0, 1, 0, 2, 0, 3, 0])",
        "isGood(a = [1, 1, 1, 1, 1, 1, 1, 2, 2, 2])",
        "isGood(a = [4, 0, 0, 4, 2])",
        "isGood(a = [3, 2, 2, 3, 4, 4, 5, 6])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n = 8, m = 3)",
        "differenceOfSums(n = 30, m = 3)",
        "differenceOfSums(n = 25, m = 3)",
        "differenceOfSums(n = 14, m = 5)",
        "differenceOfSums(n = 24, m = 2)",
        "differenceOfSums(n = 22, m = 5)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2])",
        "minGroupsForValidAssignment(nums = [1,1,2])",
        "minGroupsForValidAssignment(nums = [1,2,4])",
        "minGroupsForValidAssignment(nums = [5, 1, 3, 4, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 3, 4])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [1,3,2,1,3,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 2, 3, 1, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 2, 4, 1, 4])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"1\", \"next\", \"2\", \"next\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"1\", \"prev\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"1\", \"2\", \"3\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"2\", \"next\", \"next\", \"prev\", \"3\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"3\", \"1\", \"prev\", \"4\", \"prev\", \"5\", \"1\"])",
        "lastVisitedIntegers([\"prev\", \"prev\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"ba\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"yx\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xyz\", \"wx\", \"yz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"ba\", \"ab\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"e\", \"abc\", \"c\", \"od\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"e\",\"b\",\"a\",\"x\",\"x\",\"y\",\"z\"])",
        "maximumNumberOfStringPairs(words = [\"abcc\", \"aacb\", \"baac\", \"bbcc\", \"bbcc\", \"abac\", \"bacb\"])",
        "maximumNumberOfStringPairs(words = [\"qwertyu\", \"yuiertwq\", \"poijlk\", \"weqrty\", \"ertwqyu\", \"ywerqty\", \"yuqwer\", \"yrewqty\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"111\", k = 1)",
        "shortestBeautifulSubstring(s = \"11111\", k = 3)",
        "shortestBeautifulSubstring(s = \"011011\", k = 3)",
        "shortestBeautifulSubstring(s = \"11\", k = 1)",
        "shortestBeautifulSubstring(s = '1111', k = 2)",
        "shortestBeautifulSubstring(s = \"101010\", k = 1)",
        "shortestBeautifulSubstring(s = \"1111010\", k = 3)",
        "shortestBeautifulSubstring(s = \"10111000\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 3, 2, 6, 4, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 2, 6, 4, 5, 7])",
        "minimumRightShifts(nums = [5, 2, 3, 4, 1])",
        "minimumRightShifts(nums = [5, 2, 3, 1, 4])",
        "minimumRightShifts(nums = [1, 1, 2, 3])",
        "minimumRightShifts([3,2,1])",
        "minimumRightShifts(nums = [2, 5, 4, 8, 4, 3, 1])"
    ],
    "sample_294": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"1110001\")",
        "minimumSteps(s = \"0111101\")",
        "minimumSteps(s = \"100010010\")",
        "minimumSteps(s
        "minimumSteps(s = \"0001101011\")",
        "minimumSteps(s
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"apple\", s2 = \"pear\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"ab\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cb\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaab\", s2 = \"aaba\", s3 = \"aaca\")",
        "findMinimumOperations(s1 = \"123\", s2 = \"234\", s3 = \"134\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"mango\", s3 = \"pineapple\")",
        "findMinimumOperations(s1 = \"acd\", s2 = \"cde\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"apple\", s2 = \"abpcplea\", s3 = \"abpcple\")",
        "findMinimumOperations(s1 = \"bbaab\", s2 = \"bbbaa\", s3 = \"babaaa\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"aba\")",
        "canMakeSubsequence(str1 = \"abd\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"baanana\")",
        "canMakeSubsequence(str1=\"abc\", str2=\"zab\")",
        "canMakeSubsequence(str1 = \"aca\", str2 = \"cac\")",
        "canMakeSubsequence(str1 = \"abacd\", str2 = \"abac\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"abcdefghijklmnopqrstuvwxyz\")"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood(nums=[1,2,3,4,5])",
        "isGood(nums = [1,3,5,7])",
        "isGood(nums = [3,4,5])",
        "isGood(nums = [1,3,4,5,6,7,8])",
        "isGood(nums = [5,3,1,4,2])",
        "isGood(nums = [2,5,4,6,3])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 3)",
        "countPairs(nums = [1,2,3,4,5], target = 3)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 11)",
        "countPairs(nums = [1, 1, 1, 2], target = 3)",
        "countPairs(nums = [3, 1, 4, 2], target = 6)",
        "countPairs(nums = [1, 3, 4, 6, 9], target = 10)",
        "countPairs(nums = [4, 3, 2, 1], target = 10)",
        "countPairs(nums = [2, 1, 3, 1, 4, 1], target = 2)",
        "countPairs(nums = [1, 4, 10, 1, 5, 1], target = 11)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 5, 8], moveTo = [5, 6, 9])",
        "relocateMarbles(nums = [1, 2, 3, 5, 6, 8, 9], moveFrom = [1, 5], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 5, 8, 9], moveFrom = [1, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9, 5], moveFrom = [3, 4, 5], moveTo = [5, 6, 7])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9, 10], moveFrom = [5, 6, 9], moveTo = [5, 10, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9, 10, 12, 13], moveFrom = [7, 9, 12], moveTo = [5, 8, 13])",
        "relocateMarbles(nums = [4, 5, 8, 9], moveFrom = [3, 6, 7, 8], moveTo = [3, 4, 5, 6])",
        "relocateMarbles(nums = [9, 5, 8, 6, 3, 2, 1, 0, 7], moveFrom = [0, 1, 2], moveTo = [3, 4, 5])",
        "relocateMarbles(nums = [3, 8, 4, 2, 5, 6, 7, 9, 1], moveFrom = [1, 8, 3, 4], moveTo = [2, 3, 5])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [3, 5, -4, 8, 11, 1, -1, 6], target = 10)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 4, 45, 6, 10, -8], target = 16)",
        "countPairs(nums = [1,2,3], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 11)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7], target = 7)",
        "countPairs(nums = [1, 2, 4], target = 5)",
        "countPairs(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8], target = 12)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [0, 1])",
        "minLengthAfterRemovals(nums = [1,2,2,3,4])",
        "minLengthAfterRemovals(nums = [1, 3, 1])",
        "minLengthAfterRemovals(nums = [2,2,1,1,2,2])",
        "minLengthAfterRemovals(nums = [3,3,5,2,2,4])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Patrick\", \"Patricia\", \"Maria\", \"John\", \"Mary\"])",
        "countSeniors(details = [\"Sara\", \"Mike\", \"John\", \"Mary\", \"Ari\"])",
        "countSeniors([\"Mr. Lee is 65 years old\", \"Ms. Johnston is 40 years old\"])",
        "countSeniors(details = [\"Mr. Andrews is 53 years old.\", \"Mr. Thompson is 68 years old.\", \"Mr. Johnson is 65 years old.\", \"Mr. Wilson is 72 years old.\"])",
        "countSeniors(details = [\"Mahadev: 28-06-1955\", \"Peter: 25-04-1990\"])",
        "countSeniors(details = [\"john 65\", \"kail 66\", \"aash 69\", \"marc 62\"])",
        "countSeniors(details = [\"Aryan\",\"Aaditya\", \"Amit\", \"Rohan\", \"Ashish\", \"Naveen\", \"Sarthak\"])",
        "countSeniors(details = [\"Name: Mr. John Stokes\", \"Age: 55\", \"Address: 1844 Wellington Ave.\"])",
        "countSeniors(details = [\"Mark\", \"Zuckerberg\", \"55\", \"12/12/2019\", \"Amit\", \"Aggarwal\", \"65\", \"10/10/1999\"])",
        "countSeniors(details = [\"Sunil\", \"05/06/1997\", \"Anna\", \"09/04/1989\", \"Michael\", \"07/01/2007\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaa\")",
        "longestSemiRepetitiveSubstring(s = \"abxabxy\")",
        "longestSemiRepetitiveSubstring(s = \"ababbaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbabbbba\")",
        "longestSemiRepetitiveSubstring(s = \"cccccccccccc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbcbcb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabbbbabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabbbbbbab\")",
        "longestSemiRepetitiveSubstring(\"bbbaccccdddeeeeffgggghhhhiiiiijjjjjkkkkllllllmnnnnnopppppqqqrrr\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abab\", s2 = \"abba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"aab\", s2 = \"ab\")",
        "canBeEqual(s1 = \"acca\", s2 = \"cacb\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"bb\", s3 = \"cc\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"bb\", s3 = \"cc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abxyz\")",
        "findMinimumOperations(s1 = \"abaa\", s2 = \"baba\", s3 = \"bbaa\")",
        "findMinimumOperations(s1 = \"aaabaaab\", s2 = \"aaaaaa\", s3 = \"aabbbbb\")",
        "findMinimumOperations(s1 = \"ababab\", s2 = \"aaabbb\", s3 = \"aaaaa\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 1)",
        "lengthOfLongestSubsequence(nums = [2,3,1,2,4,3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3],target = 7)",
        "lengthOfLongestSubsequence(nums = [3,4,1,2], target = 7)",
        "lengthOfLongestSubsequence(nums=[1, 3, 7, 1, 3], target=10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6],target = 23)",
        "lengthOfLongestSubsequence(nums = [5,3,4,2,1,6], target = 11)",
        "lengthOfLongestSubsequence(nums = [0,1,1,3,3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9], target = 8)",
        "lengthOfLongestSubsequence(nums=[3,3,7,5,2], target=6)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 1, 1, 1])",
        "minimumSum(nums = [1, 3, 1])",
        "minimumSum(nums = [3, 2, 1])",
        "minimumSum(nums = [3, 4, 5])",
        "minimumSum(nums = [1, 3, 2, 1])",
        "minimumSum(nums = [1, 3, 5, 2, 4, 6, 7])",
        "minimumSum(nums = [1, 3, 4])",
        "minimumSum(nums = [1, 1, 2, 3, 3, 4])",
        "minimumSum(nums = [10, 8, 3, 4, 3])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"de\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"xyz\", \"pqr\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"ba\", \"b\"])",
        "minimizeConcatenatedLength([\"banana\", \"apple\", \"kiwi\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"c\", \"c\", \"a\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\", \"aa\", \"bc\"])",
        "minimizeConcatenatedLength([\"abc\", \"asd\", \"asdd\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"0110\", k = 3)",
        "shortestBeautifulSubstring(s = \"11111\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110\", k = 4)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 5)",
        "shortestBeautifulSubstring(s = '01001', k = 2)",
        "shortestBeautifulSubstring(s = \"1000011111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1001011111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10010010101\", k = 2)",
        "shortestBeautifulSubstring(s=\"1110111101\", k=1)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"c\",\"d\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"ab\",\"abc\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"a\",\"b\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"a\",\"a\",\"b\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"banana\"])",
        "minimizeConcatenatedLength(words = [\"apple\",\"aardvark\"])",
        "minimizeConcatenatedLength(words = [\"foo\", \"bar\", \"geeksforgeeks\"])",
        "minimizeConcatenatedLength(words = [\"code\",\"learn\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bb\",\"ccc\",\"dd\"])",
        "minimizeConcatenatedLength(words = [\"co\",\"de\",\"da\",\"do\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 16, m = 3)",
        "differenceOfSums(n = 15, m = 4)",
        "differenceOfSums(n = 13, m = 5)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7])",
        "alternatingSubarray(nums = [1,2,2,3,4])",
        "alternatingSubarray(nums = [1,2,1,3])",
        "alternatingSubarray(nums = [1,2,3,4,5,5,4,3,2,1])",
        "alternatingSubarray(nums = [1,2,3,4,4,5,6,7])",
        "alternatingSubarray(nums = [1,2,1,2,3,1])",
        "alternatingSubarray(nums = [1,2,4,5,6,3])",
        "alternatingSubarray(nums = [4,1,2,3,5,6,7,8,9,10,11])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,1,1])",
        "findMaximumLength(nums = [2,1,4,3])",
        "findMaximumLength(nums = [0,1,1])",
        "findMaximumLength(nums = [0, 1, 0])",
        "findMaximumLength(nums = [1,2,3,4,1,2,3,4,5])",
        "findMaximumLength(nums = [1, 1, 2, 1, 3, 1])",
        "findMaximumLength(nums = [1,1,3,3,5,5,10,10])",
        "findMaximumLength(nums = [1,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,",
        "findMaximumLength(nums=[1, 3, 1, 3, 1, 2, 3, 3])",
        "findMaximumLength(nums = [1, 1, 2, 2, 3, 4, 3, 2, 1, 3])"
    ],
    "sample_302": [
        "countSeniors(details = [\"Mr. John Smith\", \"Mr. James Brown\"])",
        "countSeniors(details = [\"James26\", \"Mary61\"])",
        "countSeniors(details = [\"870123-1234567\", \"410123-1234567\"])",
        "countSeniors(details = [\"ajay19@gmail.com\", \"manju14@gmail.com\"])",
        "countSeniors(details = [\"Samiran 1999\", \"Maulik 2001\"])",
        "countSeniors(details = [\"kim\", \"bob\", \"elon\", \"boom\"])",
        "countSeniors(details = [\"31/08/1990\", \"12/12/1970\", \"21/11/1985\"])",
        "countSeniors(details = [\"Leyla 12\", \"Gerald 42\", \"Tammy 67\"])",
        "countSeniors(details = [\"Ana Silva, 63, Female\", \"Dario Costa, 21, Male\"])",
        "countSeniors(details = [\"Adrian 38 167 170\", \"Mohan 32 188 170\", \"Emma 45 156 144\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abba\", s2 = \"baab\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aaa\")",
        "canBeEqual(s1 = \"a\", s2 = \"b\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abda\")",
        "canBeEqual(s1 = \"abbb\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"aaba\", s2 = \"aaaa\")",
        "canBeEqual(s1 = \"bb\", s2 = \"bba\")",
        "canBeEqual(s1 = \"bba\", s2 = \"abab\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 1])",
        "minimumCoins(prices = [2])",
        "minimumCoins(prices = [2, 3, 4, 5])",
        "minimumCoins(prices = [1, 1, 2, 3])",
        "minimumCoins(prices = [1, 1, 1, 2])",
        "minimumCoins(prices = [1, 2, 100])",
        "minimumCoins(prices = [1, 5, 2, 1])",
        "minimumCoins(prices = [2, 5, 6, 8])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 1, 1])",
        "minimumSeconds(A = [1, 2, 1])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(A = [1, 2, 3, 2, 1])",
        "minimumSeconds(A = [1,3,3,1])",
        "minimumSeconds([1, 2, 2, 1])",
        "minimumSeconds(A = [1, 2, 3, 2, 2])",
        "minimumSeconds(A = [6, 2, 4, 4])",
        "minimumSeconds(A = [6, 2, 2, 4, 5])",
        "minimumSeconds(A = [3,2,3,4,4,1,3,3,2])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"acb\", \"bbc\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"ax\", \"xay\", \"ay\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"cbda\",\"dd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyx\", \"zyz\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"leetcode\", \"deleetcode\", \"substring\"])",
        "maximumNumberOfStringPairs([\"the\", \"and\", \"that\", \"t\", \"e\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"sherlock\", \"mirror\", \"nazca\", \"bayes\", \"coder\", \"evil\", \"dress\", \"main\", \"cats\", \"smile\", \"grass\", \"exam\", \"train\", \"bite\", \"cloth\", \"dress\", \"eat\", \"mint\", \"break\", \"crawl\", \"crack\", \"bite\", \"brush\", \"exam\", \"code\", \"train\", \"rice\", \"crawl\", \"cloth\", \"sleep\", \"sherlock\", \"nazca\", \"main\", \"cats\", \"nazca\", \"dress\", \"train\", \"code\", \"sleep\", \"crawl\", \"brush\", \"mirror\", \"sherlock\", \"rice\", \"sleep\", \"crawl\", \"coder\", \"nazca\", \"cats\", \"dress\", \"rice\", \"dress\", \"train\", \"bayes\", \"crawl\", \"code\", \"train\", \"brush\", \"sherlock\", \"crawl\", \"train\", \"bite\", \"cats\", \"rice\", \"break\", \"train\", \"sleep\", \"sleep\", \"main\", \"grass\", \"crawl\", \"code\", \"sleep\", \"bayes\", \"sleep\", \"cats\", \"sleep\", \"grass\", \"sherlock\", \"sherlock\", \"cats\", \"main\", \"dress\", \"brush\", \"sleep\", \"break\", \"cats\", \"brush\", \"main\", \"coder\", \"train\", \"break\", \"train\", \"grass\", \"bayes\", \"grass\", \"code\", \"sleep\", \"bite\", \"sleep\", \"main\", \"grass\", \"brush\", \"bite\", \"grass\", \"exam\", \"break\", \"dress\", \"brush\", \"crawl\", \"sleep\", \"sleep\", \"bite\", \"crawl\", \"brush\", \"grass\", \"sleep\", \"break\", \"crawl\", \"train\", \"train\", \"train\", \"cats\", \"crawl\", \"code\", \"brush\", \"break\", \"train\", \"brush\", \"code\", \"crawl\", \"brush\", \"coder\", \"dress\", \"bite\", \"bayes\", \"code\", \"sleep\", \"sleep\", \"train\", \"bayes\", \"sleep\", \"brush\", \"grass\", \""
    ],
    "sample_272": [
        "minSum(nums1 = [3, 1], nums2 = [1, 2])",
        "minSum(nums1 = [0, 4, 6], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 2, 5, 10], nums2 = [1, 3, 4])",
        "minSum(nums1 = [1, 3, 4], nums2 = [2, 3, 5, 7])",
        "minSum(nums1 = [5, 2, 0], nums2 = [1, 1, 1, 0])",
        "minSum(nums1 = [2, 4, 1], nums2 = [6, 1, 5])",
        "minSum(nums1 = [1,0,3], nums2 = [5,4,2])",
        "minSum(nums1 = [0, 3, 2, 0], nums2 = [1, 0, 4, 5])",
        "minSum(nums1 = [2,3,5], nums2 = [0,9,10])",
        "minSum(nums1 = [1, 2, 3, 0, 0, 0, 0], nums2 = [2, 4, 6, 3, 1, 2, 3])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"pple\")",
        "findWordsContaining(words = [\"car\", \"cat\", \"dog\"], x = \"ac\")",
        "findWordsContaining(words = [\"wo\",\"wow\"], x = \"w\")",
        "findWordsContaining(words = [\"great\", \"escape\"], x = \"g\")",
        "findWordsContaining(words = [\"bar\", \"barr\", \"barrr\", \"barrrr\"], x = \"barrrr\")",
        "findWordsContaining(words = [\"book\", \"banana\", \"brush\"], x = \"s\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"mouse\", \"penguin\", \"wolf\"], x = \"dog\")",
        "findWordsContaining(words = [\"coding\", \"design\"], x = \"ly\")",
        "findWordsContaining(words = [\"why\", \"not\", \"you\", \"you're\"], x = \"you\")",
        "findWordsContaining(words = [\"coding\", \"cake\", \"dog\", \"baby\"], x = \"cake\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [0, 0, 0], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 2, 1, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,1,2,3,1], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 3], m = 1, k = 3)",
        "maxSum(nums = [0,0,1,1,1,2,2,3,3,4,4,5,5], m = 2, k = 5)",
        "maxSum(nums = [1,2,3,3,2,1], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 2, 3, 3, 2, 2], m = 2, k = 5)",
        "maxSum(nums = [3, 3, 4, 1, 3, 2], m = 3, k = 2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [0], moveTo = [1])",
        "relocateMarbles(nums = [2], moveFrom = [1], moveTo = [0])",
        "relocateMarbles(nums = [1,2], moveFrom = [0], moveTo = [1])",
        "relocateMarbles(nums = [2, 1, 3, 4], moveFrom = [1, 2], moveTo = [2])",
        "relocateMarbles(nums = [2, 2, 3], moveFrom = [0, 2], moveTo = [0, 1])",
        "relocateMarbles(nums = [1,2,1,2], moveFrom = [0,1,0,1], moveTo = [1,0,1,0])",
        "relocateMarbles(nums = [1, 2, 3, 2, 1], moveFrom = [1, 1, 1], moveTo = [2, 2, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [2, 5, 6], moveTo = [2, 4])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts([1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [2,1,3,4])",
        "minimumRightShifts(nums = [7, 10, 4, 3, 20, 15])",
        "minimumRightShifts([2, 3, 1, 2, 4, 2])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [100, 100], money = 0)",
        "buyChoco(prices = [1, 3, 5, 6], money = 2)",
        "buyChoco(prices = [1000000000], money = 1)",
        "buyChoco(prices = [1, 2, 4, 5, 6], money = 3)",
        "buyChoco(prices = [50, 50, 20], money = 100)",
        "buyChoco(prices = [2, 3, 3, 2], money = 0)",
        "buyChoco(prices = [3, 6, 4, 5], money = 20)",
        "buyChoco(prices = [20, 100, 200], money = 110)",
        "buyChoco(prices = [50, 75, 15], money = 20)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 11, 15], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 1], target = 6)",
        "lengthOfLongestSubsequence(nums = [0,1,2,3,4], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,3,4], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 3, 1, 3, 1, 3], target = 1)",
        "lengthOfLongestSubsequence(nums = [5, 18, 4, 16, 8, 4, 10, 23], target = 8)",
        "lengthOfLongestSubsequence(nums = [4, 2, 2, 3, 0, 0, 1, 2], target = 1)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"ababca\")",
        "longestSemiRepetitiveSubstring(s = \"abbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabaabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"xyxy\")",
        "longestSemiRepetitiveSubstring(s = \"baabaabaa\")",
        "longestSemiRepetitiveSubstring(s = \"sagar\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"bbc\", \"cde\"], x = \"c\")",
        "findWordsContaining(words = [\"geeksforgeeks\", \"geek\"], x = \"eek\")",
        "findWordsContaining(words = [\"ba\", \"ban\", \"banana\", \"banana\"], x = \"na\")",
        "findWordsContaining(words = [\"bob\", \"adam\", \"paul\"], x = \"b\")",
        "findWordsContaining(words = [\"hello\", \"hey\", \"hello\", \"you\"], x = \"e\")",
        "findWordsContaining(words = [\"bcde\", \"bacd\", \"abcd\"], x = \"b\")",
        "findWordsContaining(words = [\"abcde\", \"fd\", \"cc\"], x = \"a\")",
        "findWordsContaining(words = [\"abcd\", \"abcd\", \"aa\", \"b\", \"cb\", \"cba\"], x = \"a\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"3\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"1\", \"2\", \"3\", \"4\", \"5\", \"next\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"aabcc\", s2 = \"adcaa\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aba\")",
        "canBeEqual(s1 = \"aab\", s2 = \"aaa\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [3,4,5,1,2])",
        "minimumSum(nums = [1,3,2])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [1, 4, 5])",
        "minimumSum(nums = [2,4,1,3,5])",
        "minimumSum([9,4,1,8])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 7, 1, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 7, 1, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 3)",
        "lengthOfLongestSubsequence(nums = [2, 3, 6, 7], target = 11)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5], target = 11)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 2, 4], target = 7)",
        "lengthOfLongestSubsequence(nums = [3,7,4,9], target = 12)",
        "lengthOfLongestSubsequence(nums = [1, 2, 2, 2], target = 3)"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'lymph')",
        "sortVowels(s = \"LyMph\")",
        "sortVowels(s = 'HelloWorld')",
        "sortVowels(s = 'HimLy')",
        "sortVowels(s = 'IplUmpH')",
        "sortVowels(s = 'hLlpyYmmph')",
        "sortVowels(s = \"pjLcMhY\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1], [1], [1]])",
        "matrixSum(nums = [[1,2], [3,4]])",
        "matrixSum(nums = [[1,2,3],[2,3,4],[3,4,5]])",
        "matrixSum(nums = [[4,3],[2,1]])",
        "matrixSum(nums = [[2,2],[3,4]])",
        "matrixSum(nums = [[1,1,1],[3,4,5],[6,7,8]])",
        "matrixSum(nums = [[3, 0, 5], [7, 1, 2]])",
        "matrixSum(nums = [[2,5],[8,1],[9,4]])",
        "matrixSum(nums = [[3,1,3,2],[1,2,3,3]])",
        "matrixSum([[1, 1, 1], [2, 3, 2], [2, 3, 1]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [-1, 0, 2])",
        "maximumTripletValue(nums = [3, 1, 4])",
        "maximumTripletValue([0, 1, 2, 3])",
        "maximumTripletValue(nums = [-1, 0, 3])",
        "maximumTripletValue(nums = [-1, 0, 2, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 5, 7])",
        "maximumTripletValue(nums = [2, 0, 1, 4, 3, 5])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2])",
        "alternatingSubarray(nums = [2, 4, 6, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 4, 2, 4])",
        "alternatingSubarray(nums = [2, 3, 4, 1, 5])",
        "alternatingSubarray(nums = [3, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 1, 1, 0, 1, 0])",
        "alternatingSubarray(nums = [3, 4, 4, 6, 5, 1, 2])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"apple\", k = 3)",
        "beautifulSubstrings(s = \"abacaba\", k = 6)",
        "beautifulSubstrings(s = \"baba\", k = 4)",
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 12)",
        "beautifulSubstrings(s = \"abcbab\", k = 3)",
        "beautifulSubstrings(s = \"mj\", k = 2)",
        "beautifulSubstrings(s = \"aeouaeou\", k = 5)"
    ],
    "sample_449": [
        "minChanges(s = \"aa\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"xx\")",
        "minChanges(s = \"abcc\")",
        "minChanges(s = \"AA\")",
        "minChanges(s = \"abbaba\")",
        "minChanges(s = \"gg\")",
        "minChanges(s=\"1232\")",
        "minChanges(s = \"easay\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"11\")",
        "minimumSteps(s = \"0010110\")",
        "minimumSteps(s = \"0000011\")",
        "minimumSteps(s = \"10010001001\")",
        "minimumSteps(s = \"1110111011101\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"A0155\", \"B0011\", \"C0039\"])",
        "countSeniors(details = [\"akshay 24 male\", \"shubham 25 male\", \"rajeev 68 male\"])",
        "countSeniors(details=[\"john134@gmail.com\", \"jane13@gmail.com\", \"rod134@gmail.com\"])",
        "countSeniors(details = [\"Michael 61 8\", \"Jacob 21 5\", \"Olivia 68 10\"])",
        "countSeniors(details = [\"Sarah 1990\", \"Greg 1975\", \"George 1978\", \"Mark 1988\"])",
        "countSeniors(details = [\"manoj11221999@gmail.com\", \"ankit@gmail.com\", \"11221999@gmail.com\"])",
        "countSeniors(details = [\"happy:a:22:female:d\", \"peter:o:19:male:m\"])",
        "countSeniors(details = [\"k@m123\", \"la@m123\", \"lk@m123\", \"jo@m123\", \"lj@m123\", \"eo@m123\"])",
        "countSeniors(details = ['Aaron,53,43198765','Chris,59,41965478'])",
        "countSeniors(details = [\"Joe 18 1995 10240.24\", \"Jen 70 1950 11534.32\", \"Mike 44 1980 10000.33\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minGroupsForValidAssignment(nums = [1,1,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,3,2,1])",
        "minGroupsForValidAssignment(nums = [2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,3,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,1])",
        "minGroupsForValidAssignment(nums = [2,1,1,2,3,2])",
        "minGroupsForValidAssignment(nums = [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,1",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 4])"
    ],
    "sample_415": [
        "countPairs(coordinates = [(0, 0), (1, 1), (2, 2)], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4]], k = 3)",
        "countPairs(coordinates = [[2, 2], [2, 1], [1, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 0]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 4]], k = 4)",
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 4], [2, 3], [2, 4], [3, 1], [3, 4], [4, 1], [4, 2], [4, 3]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 1], [3, 2], [4, 1], [4, 2]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 2], [2, 1], [2, 2], [2, 3], [2, 4]], k = 3)",
        "countPairs(coordinates = [[1,2],[2,2],[1,0],[1,0],[1,0],[2,2]], k = 2)",
        "countPairs(coordinates = [(1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), (3, 1), (3, 2), (3, 3), (3, 4), (4, 1), (4, 2), (4, 3), (4, 4)], k = 2)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 4)",
        "maxSum(nums = [1,1], m = 2, k = 2)",
        "maxSum(nums = [0,0,0,0], m = 3, k = 2)",
        "maxSum(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 3, 2, 1], m = 4, k = 2)",
        "maxSum(nums = [2,2,2,1,1], m = 3, k = 2)",
        "maxSum(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90], m = 4, k = 5)",
        "maxSum(nums = [1, 1, 2, 3, 5, 2, 3, 2, 5], m = 4, k = 2)"
    ],
    "sample_452": [
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"123456\")",
        "minChanges(s = \"BANANA\")",
        "minChanges(s = \"abababa\")",
        "minChanges(s = \"aaabccd\")",
        "minChanges(s = \"abacca\")",
        "minChanges(s = \"misam\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minOperations(nums1 = [1,3], nums2 = [2,4])",
        "minOperations(nums1 = [3, 1, 2], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 1, 2], nums2 = [1, 1, 1])",
        "minOperations(nums1 = [3, 1, 5, 4], nums2 = [2, 4, 6, 5])",
        "minOperations(nums1 = [1, 5, 3, 4], nums2 = [3, 1, 5, 4])",
        "minOperations(nums1 = [1,3,4,1], nums2 = [1,3,5,7])",
        "minOperations(nums1 = [1, 1, 2, 3, 4, 2, 1], nums2 = [1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"0101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110110\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010011\", k = 2)",
        "shortestBeautifulSubstring(s = '1101110', k = 2)",
        "shortestBeautifulSubstring(s = \"1010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"101011010\", k = 3)",
        "shortestBeautifulSubstring(s = \"1000111101\", k = 3)",
        "shortestBeautifulSubstring(s = '1010110101', k = 3)",
        "shortestBeautifulSubstring(s = \"110111011101\", k = 2)",
        "shortestBeautifulSubstring(s = '1100010111', k = 1)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3,4,5,6])",
        "maximumTripletValue(nums = [1,0,-1])",
        "maximumTripletValue([1, 4, 2, 3])",
        "maximumTripletValue([1,2,-2])",
        "maximumTripletValue(nums = [2, 4, 3, 5])",
        "maximumTripletValue(nums = [3,1,-2,-5,4,-1])",
        "maximumTripletValue(nums = [-2,-2,-1])",
        "maximumTripletValue(nums = [3, 3, 2, 2])",
        "maximumTripletValue(nums = [-1, 1, 4, 5, 1, 2])",
        "maximumTripletValue(nums = [2, 3, 100, 4, 1, -2, 5, -1])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 2, limit = 2)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 18, limit = 5)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,1,1,1])",
        "minGroupsForValidAssignment(nums = [2,2,3,2])",
        "minGroupsForValidAssignment(nums = [4, 2, 1, 3])",
        "minGroupsForValidAssignment(nums = [5,3,2,1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,4,5])",
        "minGroupsForValidAssignment([2, 1, 1, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [50, 100, 200, 1000, 1000])",
        "minGroupsForValidAssignment(nums = [1, 4, 6, 8, 3, 1])",
        "minGroupsForValidAssignment(nums = [12,4,12,6,16,16])",
        "minGroupsForValidAssignment(nums = [6,1,6,4,1,2,3,4,1,4,1,2,5,1,7,3,4,3])"
    ],
    "sample_269": [
        "minSum(nums1 = [0, 1, 1, 1], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [0, 1, 1, 1, 1], nums2 = [0, 1, 1, 1, 1, 1])",
        "minSum(nums1 = [0, 0, 0, 0, 0, 0, 0], nums2 = [0, 0, 1, 0, 0, 0, 0])",
        "minSum(nums1 = [0,1,2,0,0,0], nums2 = [1,0,0,0,0,0])",
        "minSum(nums1 = [1, 4, 10], nums2 = [3, 1, 5])",
        "minSum(nums1 = [2, 6, 3, 7, 0, 0], nums2 = [1, 2, 0, 1])",
        "minSum(nums1 = [1, 4, 5, 2, 7], nums2 = [3, 2, 1, 2, 5])",
        "minSum(nums1 = [3, 2, 2, 1, 0, 4, 0], nums2 = [0, 1, 0, 0, 2, 1])",
        "minSum(nums1 = [10, 2, 3, 6, 1], nums2 = [20, 15, 30, 25])",
        "minSum(nums1 = [3, 1, 5, 7, 0, 9, 2, 6], nums2 = [3, 0, 6, 0, 6, 9, 1, 7])"
    ],
    "sample_453": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"baab\")",
        "minChanges(s = \"baa\")",
        "minChanges(s = \"abccde\")",
        "minChanges(s = \"aac\")",
        "minChanges(s = \"acd\")",
        "minChanges(s = \"bcbbac\")",
        "minChanges(s = \"papabab\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aio\", k = 3)",
        "beautifulSubstrings(s = \"ab\", k = 1)",
        "beautifulSubstrings(s=\"\",k=1)",
        "beautifulSubstrings(s = \"io\", k = 5)",
        "beautifulSubstrings(s = \"abababa\", k = 6)",
        "beautifulSubstrings(s = \"ioj\", k = 3)",
        "beautifulSubstrings(s = \"bcde\", k = 1)",
        "beautifulSubstrings(s = \"aiueoaieou\", k = 5)",
        "beautifulSubstrings(s=\"aaaaaa\",k=1234)",
        "beautifulSubstrings(s = \"iwejkaiuiaueie\", k = 2)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = 'abcde', k = 2)",
        "beautifulSubstrings(s = 'abcd', k = 2)",
        "beautifulSubstrings(s = 'aeiouaeiou', k = 3)",
        "beautifulSubstrings(s = \"aabccdee\", k = 3)",
        "beautifulSubstrings(s = \"eeee\", k = 3)",
        "beautifulSubstrings(s = \"ababc\", k = 1)",
        "beautifulSubstrings(s = \"ababccb\", k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lmnop\")",
        "sortVowels(s = \"lyphon\")",
        "sortVowels(s = 'ympHlic')"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 1, 1, 1])",
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds(nums = [1, 3, 1, 2, 3])",
        "minimumSeconds(nums = [1, 4, 4, 4])",
        "minimumSeconds(nums = [1, 2, 2, 1, 1, 1])",
        "minimumSeconds(nums = [1, 4, 2, 2, 4])",
        "minimumSeconds(nums = [1,2,3,4,10,10,10,10])",
        "minimumSeconds(nums = [0,3,5,1,4,7,2])",
        "minimumSeconds(nums = [2, 1, 3, 1, 3, 1, 4, 1, 3])",
        "minimumSeconds([1,2,4,4,4,3,5,5,5,4])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum([1, 2, 3, 4])",
        "minimumSum(nums = [3, 1, 4, 5])",
        "minimumSum(nums = [7, 2, 5, 1, 8])",
        "minimumSum([4,3,1])",
        "minimumSum(nums = [12, 14, 15, 16, 18])",
        "minimumSum(nums = [9, 10, 8, 4, 5])"
    ],
    "sample_417": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 2, 3, 3, 4], k = 3)",
        "minOperations(nums = [5, 4, 3, 2, 1], k = 1)",
        "minOperations(nums = [1,1,2,3,4], k = 4)",
        "minOperations(nums = [4, 3, 4, 3, 4, 4], k = 2)",
        "minOperations(nums = [1,2,3,2], k = 1)",
        "minOperations(nums = [3, 4, 5, 1, 2, 4, 3], k = 4)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 1, 2, 3, 1, 2, 3], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 1, 4, 5, 2, 3, 6], m = 2, k = 3)",
        "maxSum(A = [0, 1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(A = [1, 3, 2, 6, 1, 4], m = 3, k = 2)",
        "maxSum(A = [1, 3, 5], m = 2, k = 2)",
        "maxSum(A = [1,2,3], m = 1, k = 1)",
        "maxSum(A = [0, 0, 0, 0], m = 3, k = 1)",
        "maxSum(A = [1, 0, 0, 1, 0, 0], m = 3, k = 3)",
        "maxSum(A = [1, 3, 3, 2, 4], m = 2, k = 3)",
        "maxSum(A = [1, 2, 1, 2, 1, 1, 1], m = 3, k = 2)"
    ],
    "sample_293": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"0001100\")",
        "minimumSteps(s = \"00000000\")",
        "minimumSteps(s = \"11000\")",
        "minimumSteps(s = \"011011\")",
        "minimumSteps(s = \"11000101000000001\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 1, 3])",
        "maxSubarrays(nums = [2, 3, 4, 5, 6, 7, 8])",
        "maxSubarrays(nums = [2, 2, 1, 1, 1])",
        "maxSubarrays(nums = [1, 3, 2, 2, 3, 3])",
        "maxSubarrays(nums = [0, 2, 3, 2, 1])",
        "maxSubarrays(nums = [2, 4, 3, 6, 2, 5, 1])",
        "maxSubarrays(nums = [3,1,4,7,6,8,5])",
        "maxSubarrays(nums = [4, 2, 6, 8, 1, 4, 6, 1, 4, 3])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [3, 1], money = 2)",
        "buyChoco(prices = [1, 2], money = 5)",
        "buyChoco(prices = [3, 4], money = 3)",
        "buyChoco(prices = [1, 100], money = 101)",
        "buyChoco(prices = [2, 5], money = 5)",
        "buyChoco(prices = [10, 1, 1], money = 10)",
        "buyChoco(prices = [2,4,6], money = 8)",
        "buyChoco(prices = [7,3,4], money = 10)",
        "buyChoco(prices = [300, 200, 200], money = 600)"
    ],
    "sample_290": [
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"01011100\")",
        "minimumSteps(s = \"10010001001\")",
        "minimumSteps(s = \"110000001111000\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,1,2,2])",
        "minLengthAfterRemovals(nums = [2,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "minLengthAfterRemovals(nums = [4,4,4])",
        "minLengthAfterRemovals(nums = [3, 1, 1, 1, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 4)",
        "minOperations(nums = [1,3,5,7,9], k = 2)",
        "minOperations(nums = [5, 3, 1, 2], k = 4)",
        "minOperations(nums = [3, 5, 2, 2], k = 3)",
        "minOperations(nums = [3, 2, 5, 2, 4], k = 3)",
        "minOperations(nums = [1, 2, 4, 2, 4], k = 3)",
        "minOperations(nums = [2, 10, 11], k = 3)",
        "minOperations(nums = [1,10,4,2,7,11,4], k = 3)",
        "minOperations(nums = [2, 2, 3, 5, 4, 2, 6, 8], k = 4)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,2,2,3])",
        "isGood(nums = [3, 3, 4])",
        "isGood([1, 2, 3, 3, 4])",
        "isGood(nums = [2, 3, 3, 4, 5, 5])",
        "isGood(nums = [2, 3, 2, 4, 3])",
        "isGood(nums = [2, 1, 1, 3, 2])",
        "isGood(nums = [2, 4, 2, 1, 2])",
        "isGood(nums = [1, 1, 1, 3, 3, 3, 4, 5])",
        "isGood(nums = [4, 4, 2, 3, 2, 2])"
    ],
    "sample_325": [
        "isFascinating(n = 10)",
        "isFascinating(n = 100)",
        "isFascinating(n = 100)",
        "isFascinating(n = 5)",
        "isFascinating(n = 18)",
        "isFascinating(n = 25)",
        "isFascinating(n = 23)",
        "isFascinating(n = 90)",
        "isFascinating(n = 1000000000)",
        "isFascinating(n = 1011)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1,2])",
        "isGood(nums = [1,2])",
        "isGood(nums = [1,2,2])",
        "isGood(nums = [1,2,4])",
        "isGood(nums = [1,2,2,3])",
        "isGood(nums = [1, 4, 3, 2])",
        "isGood(nums = [2,3,1,4,5])",
        "isGood(nums = [2, 1, 1, 2, 3, 3])",
        "isGood([1,3,2,1])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 1, 1, 1])",
        "minimumSeconds(nums = [1, 2, 3, 1, 2, 3])",
        "minimumSeconds([1,2,3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 4, 3, 2, 1])",
        "minimumSeconds(nums = [5, 1, 2, 3, 5])",
        "minimumSeconds(nums = [5, 3, 2, 4, 1])",
        "minimumSeconds(nums = [1, 2, 3, 3, 3, 3, 3, 3, 3])",
        "minimumSeconds(nums = [4, 10, 8, 15, 1, 20, 20, 25])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [0, 1, 2])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 2, 1])",
        "minimumRightShifts(nums = [2, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 2, 3, 1])",
        "minimumRightShifts(nums = [2, 5, 1, 3])",
        "minimumRightShifts(nums = [1, 3, 1, 2, 4, 2])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [2, 3, 1])",
        "isGood(nums = [2, 3, 5])",
        "isGood([1, 3, 2])",
        "isGood(nums = [5, 3, 4, 2, 1])",
        "isGood(nums = [5, 3, 4, 2, 1])",
        "isGood(nums = [3, 2, 1, 5])",
        "isGood([1, 5, 4, 2])",
        "isGood(nums = [9, 6, 1, 2, 3, 4, 5, 7, 8])",
        "isGood(nums = [9, 4, 6, 10, 2])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1,3,5,2], nums2 = [2,1,3,4])",
        "minOperations(nums1 = [2,1], nums2 = [2,1])",
        "minOperations(nums1 = [2, 1, 2], nums2 = [1, 2, 1])",
        "minOperations(nums1 = [2, 3], nums2 = [1, 5])",
        "minOperations(nums1 = [1, 3, 4, 2], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1,3,1], nums2 = [2,1,3])",
        "minOperations(nums1 = [2, 4, 1], nums2 = [5, 6, 8])",
        "minOperations(nums1 = [1,3,4,6,8], nums2 = [5,7,9])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"123\", k = 3)",
        "shortestBeautifulSubstring(s = \"12345678\", k = 4)",
        "shortestBeautifulSubstring(s = \"10203\", k = 3)",
        "shortestBeautifulSubstring(s = \"10011100\", k = 3)",
        "shortestBeautifulSubstring(s = \"10100000\", k = 11)",
        "shortestBeautifulSubstring(s = \"200000000000000000\", k = 1)",
        "shortestBeautifulSubstring(s = \"3232121\", k = 5)",
        "shortestBeautifulSubstring(s = \"00001111111000000\", k = 1)",
        "shortestBeautifulSubstring(s = \"1011101111010101\", k = 2)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 4, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 10])",
        "minGroupsForValidAssignment([1, 1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 4, 3, 6, 2])",
        "minGroupsForValidAssignment([6,2,2,6,5,5])",
        "minGroupsForValidAssignment(nums = [12,16,2,16,20,16,15])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"1111111\")",
        "minimumSteps(s = \"101010\")",
        "minimumSteps(s = \"10010101\")",
        "minimumSteps(s = \"10010101\")",
        "minimumSteps(s = \"10000000\")",
        "minimumSteps(s = \"110010000011001000\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 4, 7], target = 15)",
        "lengthOfLongestSubsequence(nums = [3, 1, 4, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [2, 1, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 2, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [4, 6, 7], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 4, 2, 3, 5, 6], target = 9)",
        "lengthOfLongestSubsequence(nums = [0, 3, 4, 6, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 1, 4, 3, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [5, 1, 4, 3, 1, 2], target = 5)"
    ],
    "sample_259": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 1, 1])",
        "minimumSum(nums = [1, 1, 1])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [3,4,1,1])",
        "minimumSum([2, 4, 3, 5, 1])",
        "minimumSum(nums = [5, 4, 7, 1, 9])",
        "minimumSum(nums = [5, 2, 3, 4, 2, 3, 4, 5, 1, 2])",
        "minimumSum([100,4,100,1,2,3,65,33])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 1], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 4)",
        "maxSum(nums = [0, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 3, -1, -3, 5], m = 3, k = 2)",
        "maxSum(nums = [10, 1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 3, 2, 1, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2], m = 2, k = 4)",
        "maxSum(nums = [1, 3, 2, 6, 7, 8, 1], m = 3, k = 3)",
        "maxSum(nums = [6, 3, 3, 2, 3, 5, 1, 6, 6], m = 3, k = 4)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"b\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"aba\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"bbc\", s3 = \"ccd\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aba\", s3 = \"cac\")",
        "findMinimumOperations(s1 = \"cod\", s2 = \"cad\", s3 = \"cab\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [1,1])",
        "minOperations(nums = [1, 3, 1])",
        "minOperations(nums = [2, 2, 3])",
        "minOperations(nums = [1, 2, 4, 8, 16, 32])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7])",
        "minimumCoins(prices = [10, 20, 30, 40])",
        "minimumCoins(prices = [1, 3, 2, 1, 2])",
        "minimumCoins(prices = [4, 5, 7])",
        "minimumCoins(prices = [2, 1, 5, 4, 2])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1,2,1])",
        "minimumSeconds(nums = [1,2,3,4,4])",
        "minimumSeconds(nums = [1,2,2])",
        "minimumSeconds(nums = [1, 3, 4, 2])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "minimumSeconds([1,3,1,3])",
        "minimumSeconds(nums = [6,10])",
        "minimumSeconds(nums = [0,2,1,4])",
        "minimumSeconds(nums=[3,2,1,4,1,2,2,3,2])"
    ],
    "sample_448": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abb\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"cat\")",
        "minChanges(s = \"aabbccde\")",
        "minChanges(s = \"azx\")",
        "minChanges(s = \"abbbaccc\")",
        "minChanges(s = \"0001100\")",
        "minChanges(s = \"0100110000\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [3, 5, 1, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9, 2, 4, 7], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 9, 3, 1, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [8, 6, 4, 5, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [10, 3, 8, 5, 9], limit = 100)",
        "lexicographicallySmallestArray(nums = [10, 9, 6, 5, 3, 1, 4], limit = 5)",
        "lexicographicallySmallestArray(nums = [9, 9, 11, 9, 9, 10], limit = 11)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,1,1])",
        "sumCounts(nums = [1,1,1])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1,2,3])",
        "sumCounts(nums=[1,2,3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [2,2])",
        "sumCounts(nums = [1, 2, 1, 3, 1])",
        "sumCounts(nums = [3, 3, 2, 2, 2])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 0, 0, 1])",
        "maximumTripletValue(nums = [5, 5])",
        "maximumTripletValue(nums = [1, 4, 2, 3, 6])",
        "maximumTripletValue(nums = [1, 4, 3, 5, 2])",
        "maximumTripletValue(nums = [3, 6, 4, 2])",
        "maximumTripletValue(nums = [-4, -1, -3])",
        "maximumTripletValue([-5, 1, 6])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aabb\", k = 4)",
        "beautifulSubstrings(s = \"geeksforgeeks\", k = 7)",
        "beautifulSubstrings(s = \"bababa\", k = 5)",
        "beautifulSubstrings(s = \"aaaabbb\", k = 4)",
        "beautifulSubstrings(s = \"abcde\", k = 1000000)",
        "beautifulSubstrings(s = \"meat\", k = 5)",
        "beautifulSubstrings(s = \"aabbcdeb\", k = 3)",
        "beautifulSubstrings(s = \"zxzyxz\", k = 7)",
        "beautifulSubstrings(s = \"acabbbbbb\", k = 4)",
        "beautifulSubstrings(s = \"bacee\", k = 1000000)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 3)",
        "countPairs(nums = [3,2,3], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 1)",
        "countPairs(nums = [2,3,4,5,6,7], target = 9)",
        "countPairs(nums = [1,3,4,5,6,8], target = 12)",
        "countPairs(nums = [1,1,3,3,5,5,7,7], target = 6)"
    ],
    "sample_462": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 20, limit = 10)",
        "distributeCandies(n = 15, limit = 5)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 100, limit = 50)",
        "distributeCandies(n = 30, limit = 3)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 4, 5, 6, 7])",
        "minOperations(nums1 = [0, 1, 2], nums2 = [3, 4, 5])",
        "minOperations(nums1 = [3,2,3], nums2 = [3,2,3])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 3, 5, 7, 9])",
        "minOperations(nums1 = [1, 10, 100], nums2 = [1, 5, 10])",
        "minOperations(nums1 = [2, 2, 1, 2, 1], nums2 = [1, 1, 2, 2, 1])",
        "minOperations(nums1 = [6, 1, 2, 3, 4, 5], nums2 = [6, 1, 2, 3, 4, 5])",
        "minOperations(nums1 = [4, 3, 4, 2, 4], nums2 = [2, 1, 3, 4, 2])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [3, 1, 4, 2])",
        "minOperations(nums = [1, 1])",
        "minOperations(nums = [1,2,3,4])",
        "minOperations(nums = [1, 2, 3, 1])",
        "minOperations(nums = [3, 2, 3])",
        "minOperations(nums = [4, 3, 2, 1])",
        "minOperations(nums = [1, 2, 2, 3, 1])",
        "minOperations([1, 1, 2, 1, 1])",
        "minOperations(nums = [1, 2, 2, 2, 2, 2, 2, 3, 3])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = '101101', k = 2)",
        "shortestBeautifulSubstring(s = \"100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011100\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011010\", k = 1)",
        "shortestBeautifulSubstring(s = \"110001\", k = 1)",
        "shortestBeautifulSubstring(s = \"1011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1110\", k = 3)",
        "shortestBeautifulSubstring(s = \"10111110\", k = 2)",
        "shortestBeautifulSubstring(s = \"010101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"11000110001\", k = 2)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [0])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [2, 1, 1])",
        "minimumSeconds(nums = [1,1,1,2,2,2])",
        "minimumSeconds(nums = [3, 3])",
        "minimumSeconds(nums = [2, 3, 3])",
        "minimumSeconds(nums = [1, 1, 2, 3, 3])",
        "minimumSeconds([1,2,2,3,3])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [3, 1, 3, 6, 5])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [4, 1, 2, 3])",
        "minOperations(nums = [2, 3, 3])",
        "minOperations(nums = [3, 1, 2, 3, 1])",
        "minOperations(nums = [1, 2, 2, 4, 5])",
        "minOperations(nums = [2, 2, 2, 2, 3, 3, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 5, 3, 2, 3])",
        "minOperations(nums = [4,3,5,6,2,1,4,4])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 1, 2, 2])",
        "alternatingSubarray(nums = [1, 1, 1, 1, 1, 1, 1])",
        "alternatingSubarray(nums = [1, -1, 1, -1, 1, -1])",
        "alternatingSubarray(nums = [-1, 2, -3, 4, -5, 6])",
        "alternatingSubarray(nums = [1, 3, 5, 2, 4, 6])",
        "alternatingSubarray(nums = [3, 2, 4, 5, 1])",
        "alternatingSubarray(nums = [1, 3, -2, -4, 2])",
        "alternatingSubarray(nums = [1, -1, 2, 0, -2, 1, 0])",
        "alternatingSubarray([5, 6, 1, 2, 3, 4, 7])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [0,0])",
        "minLengthAfterRemovals([1, 2, 1, 2])",
        "minLengthAfterRemovals([1,1,2,2])",
        "minLengthAfterRemovals(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minLengthAfterRemovals([1,2,3,1])",
        "minLengthAfterRemovals([1, 1, 1, 2, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,3,3,4,4,6,6,7,7])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"a\", \"aa\", \"aaa\", \"aaaa\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"ab\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ac\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abcd\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"aab\", \"abc\", \"baa\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"tan\", \"god\", \"dog\"])",
        "maximumNumberOfStringPairs(words = [\"aaaa\", \"bbaa\", \"abab\", \"baab\"])",
        "maximumNumberOfStringPairs(words = [\"dad\", \"bab\", \"dab\", \"dad\", \"bab\", \"bab\"])",
        "maximumNumberOfStringPairs(words = [\"ollee\", \"eelloo\", \"heolli\", \"illohe\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"ab\",\"abc\",\"b\",\"c\",\"cab\",\"ca\",\"cb\",\"dd\",\"ddd\",\"e\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cba\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"ana\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"bc\")",
        "canMakeSubsequence(str1 = \"bca\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"b\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"bac\", str2 = \"bat\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"nanaaa\")",
        "canMakeSubsequence(str1 = \"vscode\", str2 = \"veccode\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaba\")",
        "longestSemiRepetitiveSubstring(s = \"cccc\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabaa\")",
        "longestSemiRepetitiveSubstring(s = \"xaxa\")",
        "longestSemiRepetitiveSubstring(s = \"cacaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"babacdabacd\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,1,1], m = 2, k = 2)",
        "maxSum(nums = [2,3,4,1,5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7], m = 1, k = 3)",
        "maxSum(nums = [0,1,0,2], m = 2, k = 3)",
        "maxSum(nums = [0, 1, 2], m = 1, k = 1)",
        "maxSum(nums = [1,2,-1], m = 2, k = 4)",
        "maxSum(nums = [1,2,3,1,4,5,6,1], m = 4, k = 3)",
        "maxSum(nums = [0, 2, 1, 1], m = 2, k = 3)",
        "maxSum(nums = [4,5,6], m = 3, k = 2)",
        "maxSum(nums = [2,3,5,1,6,0,3,8], m = 3, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"apple\")",
        "findWordsContaining(words = [\"banana\", \"banana\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"baa\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"cow\", \"dog\"], x = \"at\")",
        "findWordsContaining(words = [\"coding\", \"dojo\"], x = \"do\")",
        "findWordsContaining(words = [\"test\", \"foo\"], x = \"t\")",
        "findWordsContaining(words = [\"python\", \"monkey\", \"lion\"], x = \"on\")",
        "findWordsContaining(words = [\"appl\", \"pear\", \"orange\", \"cherry\"], x = \"p\")",
        "findWordsContaining(words = [\"strawberry\", \"apple\", \"lemon\", \"pear\"], x = \"er\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [3,3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3,4,5,6], moveFrom = [2,4], moveTo = [1,5])",
        "relocateMarbles(nums = [1,2,1,2,3,3], moveFrom = [1,1], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [4,5,6], moveTo = [7,8,9])",
        "relocateMarbles(nums = [1,2,1,1,3,1,1], moveFrom = [1,2,3], moveTo = [1,3,2])",
        "relocateMarbles(nums = [1,2,1,2,1,2], moveFrom = [0,0,0,0,0,0], moveTo = [1,1,2,2,3,3])",
        "relocateMarbles(nums=[4,3,4,3,4],moveFrom=[2,3,2,3],moveTo=[1,2,1,2])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue([0, 0, 0])",
        "maximumTripletValue(nums = [-2, -1, 0, 1, 2])",
        "maximumTripletValue(nums = [-1, 0, -1])",
        "maximumTripletValue(nums = [4, 2, 3])",
        "maximumTripletValue(nums = [-1, 1, 0, -1])",
        "maximumTripletValue(nums = [3, 4, 1])",
        "maximumTripletValue(nums = [0, 3, 0, 0])",
        "maximumTripletValue([-1, 1, 0, 4])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aaaba\")",
        "longestSemiRepetitiveSubstring(s = \"ababcdab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdea\")",
        "longestSemiRepetitiveSubstring(\"aabab\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbaccc\")",
        "longestSemiRepetitiveSubstring(s = \"acxzxy\")",
        "longestSemiRepetitiveSubstring(s = \"zabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"acababbbaaa\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs([\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"xy\"])",
        "maximumNumberOfStringPairs(words = [\"red\", \"blue\", \"green\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"cde\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abc\", \"aab\"])",
        "maximumNumberOfStringPairs(words = [\"ww\",\"ww\"])",
        "maximumNumberOfStringPairs(words = [\"w\",\"z\",\"z\",\"w\"])",
        "maximumNumberOfStringPairs(words = [\"w\", \"y\", \"x\"])",
        "maximumNumberOfStringPairs(words = [\"bcd\", \"acd\", \"bce\", \"abd\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"bbba\", \"aabb\", \"xyz\", \"zyx\", \"abcd\", \"dcba\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 3], [2, 4]])",
        "matrixSum(nums = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "matrixSum(nums = [[1, 2, 3], [2, 3, 1]])",
        "matrixSum(nums = [[1], [3], [5]])",
        "matrixSum(nums = [[2, 2, 2], [1, 1, 1], [1, 1, 1]])",
        "matrixSum([[1, 1, 1],\n                  [1, 1, 1]])",
        "matrixSum(nums = [[9], [3]])",
        "matrixSum(nums = [[1, 1, 1, 0, 0], [0, 0, 0, 0, 0]])",
        "matrixSum(nums = [[2, 1, 0], [5, 6, 1]])",
        "matrixSum(nums = [[2, 3, 4, 5], [1, 1, 1, 1], [3, 3, 3, 3]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"b\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"cabbage\", s2 = \"cabbage\", s3 = \"cabbage\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"x\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bdac\", s3 = \"cdab\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"wvu\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"cat\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"nanaba\", s3 = \"baanan\")",
        "findMinimumOperations(s1 = \"zo\", s2 = \"ab\", s3 = \"x\")",
        "findMinimumOperations(s1 = \"abcbca\", s2 = \"bccbca\", s3 = \"bcbbca\")",
        "findMinimumOperations(s1 = \"sss\", s2 = \"ytyt\", s3 = \"ttt\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"aaaa\", s3 = \"aaaa\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"123\")",
        "findMinimumOperations(s1 = \"bana\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"abana\", s3 = \"bana\")",
        "findMinimumOperations(s1 = \"cba\", s2 = \"ccd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"azxxxy\", s2 = \"xyxzx\", s3 = \"xxyyzz\")"
    ],
    "sample_324": [
        "isFascinating(n = 12)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 4)",
        "isFascinating(n = 20)",
        "isFascinating(n = 1111)",
        "isFascinating(n = 32)",
        "isFascinating(n = 135)",
        "isFascinating(n = 3456789)",
        "isFascinating(n = 9126)",
        "isFascinating(n = 612375)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [2, 3, 5])",
        "minimumCoins(prices = [2,3,1])",
        "minimumCoins(prices = [1, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins([1, 2, 3])",
        "minimumCoins(prices = [2, 3, 1, 5])",
        "minimumCoins(prices = [3, 4, 2, 6])",
        "minimumCoins(prices = [7,5,5,6])",
        "minimumCoins(prices = [2, 3, 4, 2, 5, 4, 3])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1,2,3,4,5,6], target = 6)",
        "countPairs(nums = [1,1,1,1,1], target = 3)",
        "countPairs(nums = [1,1,2,2,3,3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 13)",
        "countPairs(nums = [1,2,3,5,6,7,9,10], target = 10)",
        "countPairs(nums = [1, 4, 1, 1, 4], target = 6)",
        "countPairs(nums = [1, 5, 11, 4, 3, 8, 9, 11], target = 16)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,2])",
        "minGroupsForValidAssignment([1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,2,2,1])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,2,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,3,4])",
        "minGroupsForValidAssignment(nums = [3,4,5,1])",
        "minGroupsForValidAssignment([6, 3, 2, 7, 2, 2, 3])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "countPairs(nums = [1,2,3], target = 4)",
        "countPairs(nums = [1, 2, 2, 1], target = 4)",
        "countPairs(nums = [1, 3, 7, 8], target = 10)",
        "countPairs(nums = [4, 1, 5, 6], target = 10)",
        "countPairs(nums = [0, 1, 3, 6, 9], target = 7)",
        "countPairs(nums = [1, 3, 5, 2, 11, 9], target = 13)",
        "countPairs(nums = [1, 10, 100, 3, 4, 5], target = 200)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [2, 3, 4], money = 6)",
        "buyChoco(prices = [1,2,5], money = 8)",
        "buyChoco(prices = [3,4,5,1,2], money = 7)",
        "buyChoco(prices = [3,2,1,4], money = 6)",
        "buyChoco(prices = [3, 2, 3, 2], money = 5)",
        "buyChoco(prices = [7, 4, 5, 2, 1], money = 10)",
        "buyChoco(prices = [1, 3, 2, 3], money = 11)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"qwe\"])",
        "maximumNumberOfStringPairs([\"bb\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"s\", \"se\"])",
        "maximumNumberOfStringPairs(words = [\"dog\", \"cat\", \"log\", \"tac\", \"log\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcde\")",
        "sortVowels(s = \"lEOTCedE\")",
        "sortVowels(s = \"leotedc\")",
        "sortVowels(s = \"lEOTcEdE\")",
        "sortVowels(s = \"lEOTcEdE\")",
        "sortVowels(s = \"leoCeDe\")",
        "sortVowels(s = \"todelce\")",
        "sortVowels(s = \"testaeiou\")",
        "sortVowels(s = \"lEOteDedc\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 1])",
        "sumCounts(nums = [1, 2, 1, 2, 3])",
        "sumCounts(nums = [1, 3, 4])",
        "sumCounts(nums = [1,2,3,4,5,5])",
        "sumCounts(nums = [2, 2, 3, 1])",
        "sumCounts(nums = [1, 2, 3, 4, 4, 5, 5, 6])",
        "sumCounts(nums = [1, 1, 3, 3, 4, 5, 5, 5])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [2, 4, 6])",
        "minimumCoins(prices = [4, 2, 3, 1])",
        "minimumCoins([1, 2, 3, 2])",
        "minimumCoins(prices = [3, 3, 3, 3])",
        "minimumCoins(prices = [2, 1, 5, 7, 3])",
        "minimumCoins(prices = [10, 100, 1, 1, 1])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n = 12, m = 5)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 16, m = 3)",
        "differenceOfSums(n = 11, m = 5)"
    ],
    "sample_307": [
        "countSeniors(details = [\"John\", \"Peter\", \"Sara\", \"Mary\"])",
        "countSeniors(details = [\"k07\", \"a19\", \"l02\"])",
        "countSeniors(details = [\"Mrs.Mary\", \"Mr.Johnson\"])",
        "countSeniors(details = [\"21122122\", \"21212121\"])",
        "countSeniors(details = [\"johnson 123-45-6789 111-22-3333 456-11-7890\"])",
        "countSeniors(details = [\"mr smith 30 mr johnson 56\", \"mrs williams 29 mr jones 47\"])",
        "countSeniors(details = [\"gobl\", \"norn\"])",
        "countSeniors(details = [\"zzzz54\", \"aa87\", \"bbb77\", \"xxxx78\", \"yyyy59\"])",
        "countSeniors(details = [\"928-51-4421\", \"927-87-5961\", \"859-65-2281\"])",
        "countSeniors([\"md-23\", \"wp-33\", \"dj-22\", \"gc-77\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 4)",
        "isFascinating(n = 6)",
        "isFascinating(n = 12)",
        "isFascinating(n = 13)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"ab\")",
        "minimumBeautifulSubstrings(s = \"ab\")",
        "minimumBeautifulSubstrings(s = \"abcab\")",
        "minimumBeautifulSubstrings(\"aabbbc\")",
        "minimumBeautifulSubstrings(s = \"abcaabcd\")",
        "minimumBeautifulSubstrings(s = \"0000011100001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumBeautifulSubstrings(s = \"11010010011101011101110101101010010110110100110010010010110011111\")",
        "minimumBeautifulSubstrings(s = \"0100000010011110000000001111111010000000100010111010000100000000010000000000000101000000001000001000000000110000001000000000000010000000110000000000000010000000101000000000000010000000100000001000000000000000111111110100000001000000000000000000000011111111000000001111111111111111000000001111111111111111000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 12, limit = 3)",
        "distributeCandies(n = 8, limit = 4)",
        "distributeCandies(n = 10, limit = 6)",
        "distributeCandies(n = 10, limit = 6)"
    ],
    "sample_419": [
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minOperations(nums = [2,3,4,6,7], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6], k = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 3)",
        "minOperations(nums = [5,2,3,4,1], k = 3)",
        "minOperations(nums = [1,1,2,3,4], k = 4)",
        "minOperations(nums = [2,2,3,3,4,5,6], k = 3)",
        "minOperations(nums = [1,1,1,4,4], k = 1)",
        "minOperations(nums=[5,6,7,8,9,10,1,2,3,4], k=3)",
        "minOperations(nums = [6, 2, 1], k = 4)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 1, 2, 2, 3])",
        "sumCounts(nums = [2, 3, 1])",
        "sumCounts(nums = [3, 5, 3])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"10\", \"10\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"next\", \"prev\", \"5\"])"
    ],
    "sample_421": [
        "minOperations(nums = [2,4,6,8,10], k = 3)",
        "minOperations(nums = [2, 2, 2, 2], k = 4)",
        "minOperations(nums = [1,3,2,2,5,25,3], k = 9)",
        "minOperations(nums = [1, 1, 2, 1, 2, 3, 1], k = 3)",
        "minOperations(nums = [2, 3, 6, 9, 7], k = 3)",
        "minOperations(nums = [1, 3, 2, 1, 1, 3, 2, 1], k = 5)",
        "minOperations(nums = [5, 1, 4, 1, 2, 3, 6], k = 4)",
        "minOperations(nums = [5, 1, 5, 5, 4, 2], k = 2)",
        "minOperations(nums = [2,2,3,4,1,4,5,6], k = 10)",
        "minOperations(nums = [2, 1, 2, 2, 3, 4, 5, 4, 6, 7, 2, 7, 7, 7, 3], k = 7)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcd\")",
        "longestSemiRepetitiveSubstring(s = \"aabcde\")",
        "longestSemiRepetitiveSubstring(s = \"bbabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abacdabcd\")",
        "longestSemiRepetitiveSubstring(\"abbababbb\")",
        "longestSemiRepetitiveSubstring(s = \"baabbaabbaaabbaa\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "sumCounts(nums = [2, 1, 3])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts([1, 2, 3, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 1, 1, 1])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 1, 2, 3, 5])",
        "sumCounts(nums = [2, 1, 3, 1, 4, 2, 3, 1])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"10110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"010110\", k = 2)",
        "shortestBeautifulSubstring(s = \"10100011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0100101\", k = 3)",
        "shortestBeautifulSubstring(s = \"100110011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010011001\", k = 4)",
        "shortestBeautifulSubstring(s = \"11100111010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0101110011010000\", k = 3)",
        "shortestBeautifulSubstring(s = \"10110001100001110101101\", k = 4)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"banana\")",
        "minimumBeautifulSubstrings(s = \"aaaa\")",
        "minimumBeautifulSubstrings(s = \"abba\")",
        "minimumBeautifulSubstrings(s = \"1010\")",
        "minimumBeautifulSubstrings(s = \"baanana\")",
        "minimumBeautifulSubstrings(s = \"1011111\")",
        "minimumBeautifulSubstrings(s = \"aaabbbc\")",
        "minimumBeautifulSubstrings(s = \"baaabbb\")",
        "minimumBeautifulSubstrings(s = \"xoxxx\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\")"
    ],
    "sample_341": [
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 4, y = 3, z = 2)",
        "longestString(x = 1, y = 2, z = 1)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 2, z = 4)",
        "longestString(x = 4, y = 2, z = 2)",
        "longestString(x = 4, y = 6, z = 3)",
        "longestString(x = 1, y = 1, z = 2)",
        "longestString(x = 2, y = 5, z = 4)",
        "longestString(x = 10, y = 8, z = 6)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[1,0,1],[0,-1,0],[1,0,1]])",
        "findChampion(grid = [[1,1,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[1,2,0], [3,0,0], [0,0,0]])",
        "findChampion(grid = [[1,0,0,0],[1,1,0,1],[1,0,0,0],[1,1,1,1]])",
        "findChampion(grid = [[0,0,0,0,0,0],[0,1,0,1,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,1,0,1,0,0],[0,0,0,0,0,0]])",
        "findChampion(grid = [[0, 0, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0], [1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"a\", k = 3)",
        "beautifulSubstrings(s = \"aaa\", k = 1)",
        "beautifulSubstrings(s = \"aa\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 1)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"leetcodeisacommunityforcoders\", k = 10)",
        "beautifulSubstrings(s = \"eeee\", k = 3)",
        "beautifulSubstrings(s = \"aaaaaaaaaa\", k = 1)",
        "beautifulSubstrings(s = \"aebcaebc\", k = 3)",
        "beautifulSubstrings(s = \"aeeiie\", k = 2)"
    ],
    "sample_304": [
        "countSeniors(details = [\"George 72\", \"Bob 56\"])",
        "countSeniors(details = [\"mike@email.com\", \"alice@email.com\", \"lewis@email.com\"])",
        "countSeniors(details = [\"Joe 40 4455551212\", \"John 19 1234567890\", \"Jill 62 2345678901\"])",
        "countSeniors(details = [\"Kathryn Nguyen\", \"Johnson Paul\", \"James Smith\", \"Michael Johnson\"])",
        "countSeniors(details = [\"Rohan65\",\"Dhruv40\",\"Ananya78\",\"Aditya15\"])",
        "countSeniors([\"James,03/21/1981,Male\",\"Patricia,05/23/1988,Female\"])",
        "countSeniors(details = [\"Chris Jensen, 85\", \"Robert Jones, 55\", \"John Lemon, 23\"])",
        "countSeniors(details = [\"[1100,M]\",\"[900,F]\",\"[560,M]\",\"[340,M]\",\"[600,F]\",\"[580,M]\",\"[900,M]\",\"[100,F]\"])",
        "countSeniors(details = [\"642519458161229245\", \"502519458161229245\"])",
        "countSeniors(details = [\"Mary 17 02/05/2004\", \"Margaret 61 12/09/1963\", \"Jack 16 01/12/2006\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [2, 1, 2, 1])",
        "maximumTripletValue(nums = [10, 20, 30])",
        "maximumTripletValue(nums = [-1, -1, -1, -1])",
        "maximumTripletValue(nums = [3, 1, 4, 6])",
        "maximumTripletValue(nums = [1, -1, 0, 1, 1])",
        "maximumTripletValue(nums = [10, 1, 100, 1000, 10000])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"1001\")",
        "minimumBeautifulSubstrings(s = \"aa\")",
        "minimumBeautifulSubstrings(s = \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumBeautifulSubstrings(s = \"11100\")",
        "minimumBeautifulSubstrings(s = \"1011111\")",
        "minimumBeautifulSubstrings(s = \"01001101\")",
        "minimumBeautifulSubstrings(s = \"2222\")",
        "minimumBeautifulSubstrings(s = \"00011100\")",
        "minimumBeautifulSubstrings(s = \"01100110110010101\")",
        "minimumBeautifulSubstrings(s = \"0001000010101010101\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 4])",
        "maxSubarrays(nums = [1, 2, 4])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4])",
        "maxSubarrays(nums = [2, 1, 1, 0, 3])",
        "maxSubarrays(nums = [2, 1, 3, 4, 5, 6, 7, 8])",
        "maxSubarrays(nums = [1,2,3,1,4,5,2,3,5])",
        "maxSubarrays(nums = [5, 1, 3, 10, 7, 2, 1, 6, 2, 8])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3, 4, 5], b = [4, 3, 2, 1, 5])",
        "minOperations(a = [2, 1, 3], b = [1, 2, 3])",
        "minOperations(a = [1, 3, 5, 7], b = [10, 9, 8, 6])",
        "minOperations(a = [3, 5, 1, 2, 4], b = [2, 4, 1, 5, 3])",
        "minOperations(a = [1, 3, 5, 1], b = [2, 4, 6, 2])",
        "minOperations(a = [1, 1], b = [5, 5])",
        "minOperations(a = [3, 1, 2], b = [3, 1, 4])",
        "minOperations(a = [3, 4, 5, 1, 2], b = [2, 1, 5, 4, 3])",
        "minOperations(a = [1, 4, 5, 2], b = [10, 3, 2, 7])",
        "minOperations(a = [1, 2, 1, 1, 1, 1], b = [2, 1, 3, 1, 4, 1])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"xyz\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"c\", \"d\", \"e\"])",
        "minimizeConcatenatedLength([\"ace\", \"bbb\", \"cc\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"ab\", \"v\"])",
        "minimizeConcatenatedLength(words = [\"o\", \"hhh\", \"hhh\", \"hhh\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = \"lamp\")",
        "sortVowels(s = 'lYMPH')",
        "sortVowels(s = 'lmph')",
        "sortVowels(s = \"Lmph\")",
        "sortVowels(s = \"Hi, how are you?\")",
        "sortVowels(\"abcdefghijklmnopqrstuvwxyz\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 1])",
        "sumCounts(nums = [2, 2, 2])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3])",
        "sumCounts(nums = [1, 3, 4])",
        "sumCounts(nums = [2, 1, 1, 2])",
        "sumCounts(nums = [1, 1, 3, 3, 5, 5])",
        "sumCounts(nums = [0, 1, 2, 0, 1])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 1])",
        "minimumSum(nums = [3, 4, 1, 1, 3])",
        "minimumSum(nums = [9, 3, 1])",
        "minimumSum(nums = [4,3,1,2,5])",
        "minimumSum(nums = [10, 3, 4])",
        "minimumSum(nums = [7, 7, 7, 8, 8])",
        "minimumSum(nums = [1, 4, 4, 4, 2, 5, 5, 2, 2, 3, 2, 2, 1, 2])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 1], [1, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1,0,0],[1,1,1],[1,1,0]])",
        "findChampion([[0,0,0],[0,1,0],[0,0,0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 1, 0, 0], [0, 0, 1, 1], [1, 1, 1, 0], [0, 1, 0, 1]])",
        "findChampion(grid = [[1, 1, 0, 0, 0, 0],\n                           [0, 1, 0, 0, 0, 1],\n                           [1, 0, 0, 0, 0, 1],\n                           [0, 0, 0, 0, 0, 0],\n                           [0, 0, 0, 0, 0, 1]])"
    ],
    "sample_372": [
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"test\")",
        "sortVowels(s = \"test\")",
        "sortVowels(s = \"L0tcede\")",
        "sortVowels(s = 'leOtcEdE')",
        "sortVowels(s = \"eotlcede\")",
        "sortVowels(s = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\")",
        "sortVowels(s = \"I love code\")",
        "sortVowels(s = \"hackerearth\")",
        "sortVowels(s = \"edocletE\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1110\")",
        "minimumSteps(s = \"10001\")",
        "minimumSteps(s = \"10001\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"110110\")",
        "minimumSteps(s = \"100010\")",
        "minimumSteps(s = \"010110101\")",
        "minimumSteps(s = \"1011010110001\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [5, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minimumRightShifts(nums = [5, 6, 7, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 1, 2, 3])",
        "minimumRightShifts([1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 5, 2])",
        "minimumRightShifts(nums = [5, 1, 3, 4, 2])",
        "minimumRightShifts([0, 1, 1, 1, 2])",
        "minimumRightShifts(nums = [3,2,1,2,1,2,3,4,5,6,7])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 4])",
        "minOperations(nums = [3, 1])",
        "minOperations(nums = [3, 1])",
        "minOperations(nums = [1, 1, 1, 2])",
        "minOperations(nums = [4, 3, 2])",
        "minOperations(nums = [3, 1, 3, 6, 2])",
        "minOperations(nums = [4, 6, 8])",
        "minOperations(nums = [1, 3, 2, 6, 1, 2])",
        "minOperations(nums = [1, 1, 1, 2, 1, 3, 3])",
        "minOperations(nums = [1, 3, 1, 5, 1, 3, 1, 2, 3, 2, 2, 2])"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'lymph')",
        "sortVowels(s = 'LyMPh')",
        "sortVowels(s = \"Hello, world!\")",
        "sortVowels(s = \"lmypH\")",
        "sortVowels(s = 'hello')",
        "sortVowels(s = \"YmboLHp\")"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[0,0,1],[0,1,1],[1,0,0]])",
        "findChampion(grid = [[1,0,0],[1,1,1],[1,1,1]])",
        "findChampion(grid = [[1,0,1],[1,1,1],[0,0,1]])",
        "findChampion(grid = [[0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1], [1, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1, 1, 1], [1, 0, 1, 1, 1], [0, 0, 1, 0, 1], [1, 0, 1, 0, 1], [1, 1, 0, 1, 1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [0], nums2 = [0])",
        "minSum(nums1 = [1], nums2 = [0])",
        "minSum(nums1 = [1], nums2 = [0])",
        "minSum(nums1 = [2], nums2 = [1])",
        "minSum(nums1 = [0, 1, 2], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 3], nums2 = [4, 2])",
        "minSum(nums1 = [1, 1, 1, 0], nums2 = [1, 1, 1, 0])",
        "minSum(nums1 = [3,1], nums2 = [2])",
        "minSum(nums1 = [1, 5, 1], nums2 = [2, 4, 3])"
    ],
    "sample_422": [
        "minOperations(nums = [1,1,1,1,1], k = 3)",
        "minOperations(nums = [9, 3, 5, 4, 2, 6, 8], k = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [5, 2, 1, 4], k = 3)",
        "minOperations(nums = [2, 2, 3, 3, 3, 4], k = 3)",
        "minOperations(nums = [1, 1, 1, 3], k = 1)",
        "minOperations(nums = [1,10,5,4], k = 3)",
        "minOperations(nums = [1, 5, 2, 1, 2, 1, 2, 1], k = 3)",
        "minOperations(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5], k = 10)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 4], moveTo = [2])",
        "relocateMarbles(nums = [2, 1, 2], moveFrom = [2, 1], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [1,2])",
        "relocateMarbles(nums = [2,3,1], moveFrom = [2], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [3, 4, 1], moveTo = [2, 4, 3])",
        "relocateMarbles(nums = [3, 3], moveFrom = [3, 1], moveTo = [3, 2])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 1, 4], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 3, k = 1)",
        "maxSum(nums = [1, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 3, 1], m = 3, k = 1)",
        "maxSum(nums = [1, 2, 3, 1, 4, 5, 2, 3, 6], m = 2, k = 5)",
        "maxSum(nums = [1,1,1,2,2,2,3,3,3], m = 3, k = 4)",
        "maxSum(nums = [1, 1, 2, 2, 2, 3, 3], m = 3, k = 2)",
        "maxSum(nums = [4, 1, 6, 2, 9, 3], m = 3, k = 1)",
        "maxSum(nums = [3, 2, 6, 1, 4, 5, 9, 2], m = 4, k = 3)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"aba\", s2 = \"aba\")",
        "canMakeSubsequence(s1 = \"z\", s2 = \"a\")",
        "canMakeSubsequence(s1 = \"za\", s2 = \"zab\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"abcda\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"a\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"baaa\")",
        "canMakeSubsequence(s1=\"zab\",s2=\"zaba\")",
        "canMakeSubsequence(s1 = \"axa\", s2 = \"bxbx\")",
        "canMakeSubsequence(s1=\"abccba\", s2=\"abab\")",
        "canMakeSubsequence(s1 = \"adab\", s2 = \"adbba\")"
    ],
    "sample_270": [
        "minSum(nums1 = [0, 1], nums2 = [1, 0])",
        "minSum(nums1 = [0, 1], nums2 = [1])",
        "minSum(nums1 = [0, 0, 0], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [0, 1], nums2 = [0, 1, 2, 3])",
        "minSum(nums1 = [0, 2], nums2 = [2, 1])",
        "minSum(nums1 = [0, 10], nums2 = [0, 10, 10])",
        "minSum(nums1 = [0, 1, 2], nums2 = [0, 3, 5, 7])",
        "minSum(nums1 = [0, 5, 3], nums2 = [3, 3, 0])",
        "minSum(nums1 = [5, 0, 1, 2, 4, 6], nums2 = [3, 0, 1, 2, 6, 6, 6, 6, 6])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"3\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [1, 3, 5, 7])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [2, 3, 4, 5, 6, 7])",
        "isGood(nums = [2, 1])",
        "isGood(nums = [2, 3, 1, 5, 0])",
        "isGood(nums = [2, 4, 1, 5, 3, 6])"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,3])",
        "minOperations(nums = [1,1])",
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [1,1,1,2,1,1])",
        "minOperations(nums = [3,1,3,4,1,1,2])",
        "minOperations(nums = [1,2,3,4,3,3])",
        "minOperations(nums = [1, 2, 3, 1, 1, 3])",
        "minOperations(nums = [4, 1, 4, 1, 1])",
        "minOperations(nums = [0, 2, 5, 2])",
        "minOperations(nums = [0,2,0,2,2,2])"
    ],
    "sample_451": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abca\")",
        "minChanges(s = \"acb\")",
        "minChanges(s = \"baaa\")",
        "minChanges(s = \"ppbb\")",
        "minChanges(s = \"zabz\")",
        "minChanges(s = \"Ram\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 12, limit = 4)",
        "distributeCandies(n = 13, limit = 5)",
        "distributeCandies(n = 25, limit = 5)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 100, limit = 50)",
        "distributeCandies(n = 100, limit = 5)",
        "distributeCandies(n = 35, limit = 3)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3], nums2 = [5, 6, 7])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,0,6])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6, 7], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minSum(nums1 = [0,0,0,1,0], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [0,4,6], nums2 = [3,5,7])",
        "minSum(nums1 = [0, 0, 0, 1, 1, 1, 1, 1], nums2 = [2, 2, 2, 2, 2, 2, 2, 2])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10,0,0,0,0,0])",
        "minSum(nums1 = [0,0,0,1,2,3], nums2 = [2,3,4,4,5,6])",
        "minSum(nums1 = [1,0,1,0,1,1,0], nums2 = [1,1,1,1,0])",
        "minSum(nums1 = [4,3,4,1,0], nums2 = [4,4,4,2,0])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 1, 1, 1])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [3, 2, 3])",
        "minimumRightShifts([0])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])",
        "minimumRightShifts(nums = [3, 4, 2, 6, 1, 7])"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4], t = 6)",
        "countPairs(nums = [1,2,3,4], t = 6)",
        "countPairs(nums = [1,2,3], t = 4)",
        "countPairs(nums = [1,2,3,4,5], t = 8)",
        "countPairs(nums=[1,2,3,4], t=4)",
        "countPairs(nums = [1,2,3,4,5,6,7], t = 12)",
        "countPairs(nums=[1, 2, 3, 4, 5], t=3)",
        "countPairs(nums = [2,1,3,5], t = 3)",
        "countPairs(nums = [1,3,3,4,5,6], t = 8)",
        "countPairs(nums = [1, 5, 7, 1], t = 7)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"pop\", \"a\", \"p\"])",
        "lastVisitedIntegers(words = ['pear', 'apple', 'orange'])",
        "lastVisitedIntegers(words = ['p', '1', '2', 'p', '2', '3'])",
        "lastVisitedIntegers(words = ['p', 'p', 'p', 'p', '1', 'p', 'p', '1'])",
        "lastVisitedIntegers(words = [\"p2\", \"p5\", \"p3\", \"p1\", \"p4\", \"p5\"])",
        "lastVisitedIntegers(words = [\"qwe\", \"pou\", \"asd\"])",
        "lastVisitedIntegers(words = [\"p123\", \"pa1000\", \"pa1001\", \"p100\"])",
        "lastVisitedIntegers(words = [\"px\", \"py\", \"qz\", \"pq\", \"pq\", \"qz\", \"pz\", \"py\", \"pz\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"zaz\", str2 = \"aba\")",
        "canMakeSubsequence(str1 = \"xz\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"qwer\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"z\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"cba\", str2 = \"abcz\")",
        "canMakeSubsequence(str1 = \"pizza\", str2 = \"piez\")",
        "canMakeSubsequence(str1 = \"azas\", str2 = \"az\")"
    ],
    "sample_268": [
        "minSum(nums1 = [0, 1, 2], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 1, 2, 3], nums2 = [0, 4, 5, 6, 7])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2])",
        "minSum(nums1 = [3, 0], nums2 = [2, 1])",
        "minSum(nums1 = [1,2,0,0], nums2 = [0,0,3,0])",
        "minSum(nums1 = [0, 0, 1, 0, 1, 1, 0], nums2 = [0, 0, 1, 1, 1, 0, 0])",
        "minSum(nums1 = [1, 5, 3], nums2 = [10, 10, 2])",
        "minSum(nums1 = [3,1,2,0], nums2 = [1,1])",
        "minSum(nums1 = [4, 5, 2], nums2 = [10, 8, 2, 2])",
        "minSum(nums1 = [1, 2, 3, 1, 2, 1], nums2 = [5, 4, 3, 2, 1])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 0], [2, 0]], k = 1)",
        "countPairs(coordinates = [[1,1], [2,2], [3,3]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], k = 2)",
        "countPairs(coordinates = [[1, 3], [2, 4], [5, 6], [3, 5]], k = 3)",
        "countPairs(coordinates = [[0, 0], [0, 1], [0, 2], [1, 1], [1, 2], [2, 2]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [4, 6]], k = 1)",
        "countPairs(coordinates = [[0,0], [1,0], [1,1], [2,0], [2,2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 2], [2, 0], [2, 2], [0, 4], [4, 0], [4, 4], [4, 6], [6, 4], [6, 6]], k = 3)",
        "countPairs(coordinates = [[1,2],[2,3],[4,5],[2,3],[3,4],[1,2],[1,2],[1,2],[2,3],[1,2]], k = 3)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bc\", \"cb\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"david\", \"david\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"bcd\",\"cde\",\"def\",\"fgh\",\"hi\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"racercar\", \"carcarer\"])",
        "maximumNumberOfStringPairs(words = [\"da\", \"xk\", \"kd\", \"ak\"])"
    ],
    "sample_321": [
        "maxStrength([-1, -2, -3, -4, 1, 2, 3, 4])",
        "maxStrength(nums = [-1, -1, 2, 3, -5])",
        "maxStrength(nums = [-10, 15, -20, 25])",
        "maxStrength(nums = [1, -1, -3, -4, 5, 6])",
        "maxStrength(nums = [-1, -4, 2, 5, 8])",
        "maxStrength(nums = [-1, -3, -2, -5, -4, -3, -3, -2])",
        "maxStrength(nums = [3, -3, 2, -6, 5])",
        "maxStrength(nums = [-5, 1, 2, 4, -3, 5, -2])",
        "maxStrength(nums = [-1, 1, -2, -5, -4, 2, 3, 3])",
        "maxStrength(nums = [-4, -2, 1, 3, 10, 8, -5, -7, -1, -6])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [2, 3, 5, 7, 11])",
        "minimumCoins(prices = [1, 5, 3])",
        "minimumCoins(prices = [1, 4, 3])",
        "minimumCoins(prices = [5, 2, 1, 3, 4])",
        "minimumCoins(prices = [2, 3, 2, 1])",
        "minimumCoins(prices = [3, 2, 1, 2, 3])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [4, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3])",
        "minLengthAfterRemovals(nums = [2, 4, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 4, 4])",
        "minLengthAfterRemovals([1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [4, 1, 5, 2, 3])"
    ],
    "sample_318": [
        "buyChoco(prices = [2, 3], money = 4)",
        "buyChoco(prices = [3, 2, 3], money = 10)",
        "buyChoco(prices = [5, 2, 4], money = 5)",
        "buyChoco(prices = [10,20,30,40], money = 100)",
        "buyChoco(prices = [2, 3, 6], money = 7)",
        "buyChoco(prices = [1, 1, 1], money = 100)",
        "buyChoco(prices = [1,2,3,5,4], money = 6)",
        "buyChoco(prices = [10, 3, 5, 6], money = 7)",
        "buyChoco(prices = [2, 1, 4, 3, 2], money = 13)",
        "buyChoco(prices = [100, 300, 20, 50], money = 100)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"10\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"100\", \"200\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"42\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\", \"1\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [2, 3, 4])",
        "sumCounts(nums = [1, 2, 1, 1, 2])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [8, 9, 5, 6], moveFrom = [8, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 5, 6, 8, 9], moveFrom = [1, 2, 3], moveTo = [4, 5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [0, 1, 2], moveTo = [2, 0, 1])",
        "relocateMarbles(nums = [8, 9, 6, 5], moveFrom = [1, 2], moveTo = [0, 3])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1, 3], moveTo = [0, 3, 2])",
        "relocateMarbles(nums = [1,2,3,4,5,6,8,9], moveFrom = [2,5], moveTo = [7,8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [3, 8], moveTo = [3, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9, 1, 2, 3, 4], moveFrom = [1, 5], moveTo = [0, 2])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [7, 0, 1], moveTo = [2, 4])",
        "relocateMarbles(nums = [4, 6, 7, 1, 8, 9, 5],\n                       moveFrom = [1, 0],\n                       moveTo = [2, 3])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"z\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"aba\")",
        "canMakeSubsequence(str1 = \"bca\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"za\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abba\", str2 = \"aaba\")",
        "canMakeSubsequence(str1 = \"aaaz\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"acb\", str2 = \"dbe\")",
        "canMakeSubsequence(str1 = \"codewars\", str2 = \"codebears\")",
        "canMakeSubsequence(str1 = \"z\", str2 = \"axbayz\")",
        "canMakeSubsequence(str1 = \"bca\", str2 = \"zbccd\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"apple pie\"], x = \"apple\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"mouse\"], x = \"og\")",
        "findWordsContaining(words = [\"ab\", \"bc\", \"ac\"], x = \"a\")",
        "findWordsContaining(words = [\"happy\", \"birthday\", \"happy\", \"birthday\"], x = \"day\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\", \"abcde\"], x = \"c\")",
        "findWordsContaining(words = [\"cat\", \"cate\", \"dog\"], x = \"at\")",
        "findWordsContaining(words = [\"bitcoin\", \"btc\", \"bitcoin\"], x = \"bit\")",
        "findWordsContaining(words = [\"my\", \"dream\", \"is\", \"to\", \"be\", \"a\", \"developer\"], x = \"dream\")",
        "findWordsContaining(words = [\"man\", \"money\", \"manuscript\"], x = \"an\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 1, 1], [1, 1, 1]])",
        "matrixSum(nums = [[1, 1, 0], [0, 1, 1], [1, 0, 1]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [2, 3, 1], [3, 1, 2]])",
        "matrixSum(nums = [[1, 2, 3], [3, 2, 1], [3, 1, 1]])",
        "matrixSum(nums = [[1, 3], [1, 2], [2, 1]])",
        "matrixSum([[0, 3], [2, 3]])",
        "matrixSum(nums = [[2, 3, 2], [2, 2, 2], [4, 4, 2]])",
        "matrixSum(nums = [[9,8,1], [1,4,2], [5,7,6]])",
        "matrixSum(nums = [[4, 3, 4, 4], [5, 3, 0, 1], [1, 1, 4, 4]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 1], money = 3)",
        "buyChoco(a = [2, 2], money = 3)",
        "buyChoco(a = [3, 1], money = 2)",
        "buyChoco(a = [5, 4], money = 10)",
        "buyChoco(a = [2,2], money = 2)",
        "buyChoco(a = [10, 5], money = 12)",
        "buyChoco(a = [4, 4], money = 11)",
        "buyChoco(a = [2, 5, 7], money = 6)",
        "buyChoco(a = [6, 10], money = 13)",
        "buyChoco(a = [10, 10, 20, 50], money = 100)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2, 1, 1, 3])",
        "minGroupsForValidAssignment(nums = [4, 1, 5, 3])",
        "minGroupsForValidAssignment(nums = [2, 4, 5, 8])",
        "minGroupsForValidAssignment(nums = [12, 12, 12, 12, 12, 12, 12, 12, 12, 12])",
        "minGroupsForValidAssignment([2, 1, 4, 1])",
        "minGroupsForValidAssignment(nums = [3, 4, 5, 4, 1, 2, 1])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 3, 4, 2, 2, 4])",
        "minGroupsForValidAssignment(nums = [10, 12, 3, 11, 2, 7, 16, 9, 1, 5])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [5, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [2, 4, 1, 5, 3])",
        "minimumRightShifts(nums = [4, 1, 6, 2])",
        "minimumRightShifts(nums = [0, 2, 1, 2])",
        "minimumRightShifts(nums = [1, 3, 1, 2, 5, 4])",
        "minimumRightShifts(nums = [1, 2, 4, 5, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength(nums = [2, 2, 2, 2, 2])",
        "maxStrength(nums = [10, 20, 30, 40, 50])",
        "maxStrength(nums = [3, 4, 2, 1])",
        "maxStrength(nums = [10, 5, 2, 6])",
        "maxStrength(nums = [1, 3, 4, 2, 6, 8])",
        "maxStrength(nums = [3, 1, 5, 2])",
        "maxStrength(nums = [1, 5, 2, 5, 4, 2])",
        "maxStrength(nums = [2, 1, 2, 3, 4, 4])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 5, limit = 4)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3])",
        "minLengthAfterRemovals([4, 4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 2, 1])",
        "minLengthAfterRemovals([4, 1, 1, 4, 2, 1, 3])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"na\")",
        "findWordsContaining(words = [\"x\", \"y\"], x = \"x\")",
        "findWordsContaining(words = [\"b\", \"a\", \"n\"], x = \"a\")",
        "findWordsContaining(words = [\"ba\", \"nan\", \"bana\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"elephant\"], x = \"c\")",
        "findWordsContaining(words = [\"java\", \"javascript\", \"javaScript\"], x = \"java\")",
        "findWordsContaining(words = [\"hello\", \"abc\"], x = \"lo\")",
        "findWordsContaining(words = [\"abc\", \"bca\", \"cbd\"], x = \"c\")",
        "findWordsContaining(words = [\"song\", \"flow\", \"flower\", \"food\"], x = \"o\")"
    ],
    "sample_278": [
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1], [0, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1,0,0],[0,0,1],[0,1,0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 2, 1], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1],\n                           [1, 1, 1],\n                           [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1, 0], [0, 0, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 1],\n                           [1, 1, 0, 0],\n                           [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0, 0], [0, 1, 1, 0, 0], [0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 1, 1])",
        "maxSubarrays(nums = [0, 0, 1, 0])",
        "maxSubarrays(nums = [1,0,1,0,1,1,0])",
        "maxSubarrays(nums = [3, 5, 1, 2])",
        "maxSubarrays(nums = [1, 2, 1, 0, 1, 0, 0, 1, 2])",
        "maxSubarrays(nums = [2, 3, 1, 5, 4, 3, 1, 2, 2])",
        "maxSubarrays(nums = [3, 2, 1, 6, 4, 5, 1, 6, 3])",
        "maxSubarrays(nums = [0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,1,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiouaeiou\", k = 3)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"aab\", k = 5)",
        "beautifulSubstrings(s = \"aibohphobia\", k = 3)",
        "beautifulSubstrings(s = \"aebcdef\", k = 3)",
        "beautifulSubstrings(s = \"aabbbacd\", k = 3)",
        "beautifulSubstrings(s = \"iieeeoo\", k = 3)",
        "beautifulSubstrings(s = \"uaeiiie\", k = 2)",
        "beautifulSubstrings(s = \"acdacaacac\", k = 6)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 1, 1, 1])",
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1, 2, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "minimumSeconds(nums = [1,2,2,2,3,3])",
        "minimumSeconds(nums = [3, 2, 1, 2, 1])",
        "minimumSeconds(nums = [1, 5, 11, 5])",
        "minimumSeconds(nums = [2, 5, 3, 7])",
        "minimumSeconds(nums = [2, 5, 5, 5, 1, 1])"
    ],
    "sample_327": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 20)",
        "isFascinating(n = 6)",
        "isFascinating(n = 4)",
        "isFascinating(n = 45)",
        "isFascinating(n = 54)",
        "isFascinating(n = 252)",
        "isFascinating(n = 616)",
        "isFascinating(n = 568)",
        "isFascinating(n = 12443)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 20)",
        "lengthOfLongestSubsequence(nums = [5, 1, 3, 4, 7], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,3,5,6,7], target = 8)",
        "lengthOfLongestSubsequence(nums = [9,4,2,10,7], target = 8)",
        "lengthOfLongestSubsequence(nums = [2, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [3, 7, 4], target = 2)",
        "lengthOfLongestSubsequence(nums = [3,4,1,3,4,2,3], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 4, 1, 2, 1, 2, 3, 4, 1, 2], target = 10)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[5], [5], [5]])",
        "matrixSum([[1], [2], [3], [4]])",
        "matrixSum(nums = [[2], [4], [3]])",
        "matrixSum(nums = [[4, 2], [5, 6]])",
        "matrixSum(nums = [[1, 3, 5], [1, 2, 1], [4, 2, 1]])",
        "matrixSum([[2, 1, 5], [2, 6], [3]])",
        "matrixSum([[3, 6, 1], [1, 2, 10], [9, 10, 3]])",
        "matrixSum(nums = [[3, 2, 4], [4, 1, 1], [5, 5, 1], [2, 2, 3]])"
    ],
    "sample_326": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 111)",
        "isFascinating(n = 123456)",
        "isFascinating(n = 4)",
        "isFascinating(n = 91)",
        "isFascinating(n = 91)",
        "isFascinating(n = 222)",
        "isFascinating(n = 10101)",
        "isFascinating(n = 9174428174)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 1], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 1], [1, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 1], [1, 0, 0]])",
        "findChampion([[1, 0, 1], [1, 1, 0], [0, 0, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum([1,2,3])",
        "minimumSum(nums = [5, 1, 2, 4, 3])",
        "minimumSum(nums = [3, 2, 7, 4])",
        "minimumSum(nums = [1, 1, 1, 2, 3, 4])",
        "minimumSum(nums = [5, 8, 1, 2])",
        "minimumSum(nums = [4, 1, 2, 3, 5, 2])",
        "minimumSum(nums = [1, 3, 2, 4, 5, 1, 3, 2, 4])",
        "minimumSum(nums = [3, 6, 4, 1, 8, 2, 9, 5, 7])",
        "minimumSum(nums = [2, 6, 3, 8, 7, 1, 2, 1, 7])"
    ],
    "sample_450": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"aaabbbbccc\")",
        "minChanges(s = \"baabb\")",
        "minChanges(s = \"aabbbaaa\")",
        "minChanges(s = \"aaabaaacaaa\")",
        "minChanges(s = \"ppm\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"00110\", s2 = \"00111\", x = 3)",
        "minOperations(s1 = \"11101\", s2 = \"10110\", x = 3)",
        "minOperations(s1 = \"110010\", s2 = \"100110\", x = 2)",
        "minOperations(s1 = \"11110000\", s2 = \"11000011\", x = 2)",
        "minOperations(s1 = \"a1b\", s2 = \"a1b\", x = 4)",
        "minOperations(s1 = \"1001101\", s2 = \"0111000\", x = 4)",
        "minOperations(s1 = \"100110\", s2 = \"100110\", x = 3)",
        "minOperations(s1 = \"10001011\", s2 = \"11000110\", x = 3)",
        "minOperations(s1 = \"000101111\", s2 = \"000101110\", x = 11)",
        "minOperations(s1 = \"1001\", s2 = \"0000\", x = 3)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 3, z = 1)",
        "longestString(x = 4, y = 5, z = 3)",
        "longestString(x = 1, y = 2, z = 2)",
        "longestString(x = 2, y = 1, z = 3)",
        "longestString(x = 2, y = 1, z = 2)",
        "longestString(x = 5, y = 6, z = 3)",
        "longestString(x = 1, y = 2, z = 4)",
        "longestString(x = 2, y = 2, z = 5)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1,2,3])",
        "maxSubarrays(nums = [1, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "maxSubarrays(nums = [1, 0, 1, 0, 0, 1, 0])",
        "maxSubarrays(nums = [2, 1, 3, 1, 5])",
        "maxSubarrays(nums = [0, 1, 1, 0, 0, 0, 0, 0, 0, 1])",
        "maxSubarrays(nums = [1,1,1,0,1,0,1,0,1,1])",
        "maxSubarrays(nums = [3, 1, 1, 2, 3, 3, 2])",
        "maxSubarrays(nums = [5, 3, 1, 4, 2, 1, 3, 5])"
    ],
    "sample_306": [
        "countSeniors(details = [\"Ashish\", \"Meet\", \"Vivek\"])",
        "countSeniors(details = [\"Raja\", \"Baba\", \"Krishna\"])",
        "countSeniors(details = [\"Joe 20\", \"Bob 61\", \"Eve 67\"])",
        "countSeniors(details = ['Maria 23', 'Olga 63', 'Matthew 23'])",
        "countSeniors(details = [\"ABC 123 1213\", \"BAC 123 1213\", \"CAC 123 1213\"])",
        "countSeniors(details = [\"11/12/1970\", \"11/2/1958\", \"11/9/1983\", \"11/20/1997\"])",
        "countSeniors(details = [\"alice jones 19 65\", \"bob smith 20 73\", \"chris johnson 18 59\", \"david brown 21 64\"])",
        "countSeniors(details = [\"Andrea 19\", \"Walter 57\", \"Kim 37\", \"Nick 28\", \"Mary 61\", \"Sally 70\"])",
        "countSeniors(details = [\"Malik 45 US\", \"Susan 65 US\", \"Kelly 29 US\", \"Alice 75 US\", \"Jenny 65 US\", \"Michael 50 US\"])",
        "countSeniors(details = [\"dirt_bikers\", \"13\", \"pickle_ball\", \"63\", \"basketball\", \"54\", \"dancing\", \"65\", \"swimming\", \"62\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 1, 1])",
        "maxSubarrays(nums = [2, 1, 2, 1])",
        "maxSubarrays(nums = [1, 2, 1, 2, 1, 1])",
        "maxSubarrays(nums = [0, 2, 1, 1, 0])",
        "maxSubarrays(nums = [2, 4, 3, 7])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [1, 5], moveTo = [3, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 0, 1, 1, 0], moveTo = [1, 0, 1, 0, 1])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 5, 9], moveTo = [8, 9, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9, 10], moveFrom = [5, 6, 7], moveTo = [9, 10, 11])",
        "relocateMarbles(nums = [5, 6, 8, 9, 3], moveFrom = [1, 2, 3, 4, 5], moveTo = [2, 3, 4, 5, 6])",
        "relocateMarbles(nums = [9, 8, 7, 6, 5], moveFrom = [6, 7], moveTo = [0, 1, 2])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9], moveFrom = [2, 8, 9], moveTo = [2, 3, 6])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"aaaa\", s3 = \"aaaa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cab\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ccc\", s2 = \"bbb\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"ban\", s2 = \"ban\", s3 = \"ban\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(s1 = \"baba\", s2 = \"abab\", s3 = \"baab\")",
        "findMinimumOperations(s1 = \"cba\", s2 = \"ab\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"aplo\", s2 = \"aplo\", s3 = \"aplo\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals([1,1,1])",
        "minLengthAfterRemovals(nums = [1,3,4,2])",
        "minLengthAfterRemovals(nums = [3, 1, 3])",
        "minLengthAfterRemovals([1, 3, 5])",
        "minLengthAfterRemovals(nums = [1,1,2,3,2,2])",
        "minLengthAfterRemovals(nums = [3, 2, 3, 5, 4])",
        "minLengthAfterRemovals([2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minLengthAfterRemovals(nums = [2,4,3,4,5,1,6,7,1,2,3,4,5,6,7,8])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 3, 3], [3, 4, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [3, 4, 5], [5, 6, 10]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 5], [1, 3, 4]])",
        "maximizeTheProfit(n = 2, offers = [(1, 2, 3), (1, 5, 7)])",
        "maximizeTheProfit(n = 4, offers = [(1, 2, 1), (3, 1, 1), (2, 4, 1), (3, 2, 1)])",
        "maximizeTheProfit(n = 3, offers = [(0, 5, 4), (1, 10, 2), (2, 20, 3)])",
        "maximizeTheProfit(n = 2, offers = [[1, 10, 1], [1, 3, 1], [2, 10, 2]])",
        "maximizeTheProfit(n = 5, offers = [(3, 7, 1), (1, 3, 2), (1, 2, 3)])",
        "maximizeTheProfit(n = 5, offers = [\n    [1, 2, 3],\n    [1, 3, 2],\n    [1, 4, 5],\n    [2, 3, 1],\n    [2, 5, 1]\n])",
        "maximizeTheProfit(n = 5, offers = [(3, 4, 2), (1, 5, 3), (3, 4, 5), (3, 1, 1), (3, 4, 3)])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4], m = 3)",
        "canSplitArray(nums = [1,2,3,4], m = 5)",
        "canSplitArray(nums = [1,1,1], m = 2)",
        "canSplitArray(nums = [1,2,2,1], m = 2)",
        "canSplitArray(nums = [2,2,2,2], m = 2)",
        "canSplitArray(nums = [1, 2, 4, 1], m = 3)",
        "canSplitArray(nums = [5,1,3,4,2], m = 1)",
        "canSplitArray(nums = [1, 4, 6, 7, 5], m = 4)",
        "canSplitArray(nums = [2,2,3,5,1,4,6], m = 5)",
        "canSplitArray(nums = [4,2,2,3,5,5,5,3,2,6,7,9,8,4], m = 12)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1], k = 3)",
        "checkArray(nums = [4, 3, 2], k = 2)",
        "checkArray(nums = [1, 0, -1, 0], k = 2)",
        "checkArray(nums = [1, -1, 2, -2], k = 2)",
        "checkArray(nums = [2, 3, 5, 1, 4], k = 3)",
        "checkArray(nums = [1, 2, 3, 1, 4, 2], k = 2)",
        "checkArray(nums = [0, 2, 0, 1, 0], k = 2)",
        "checkArray(nums = [2, -1, 5, -1], k = 2)",
        "checkArray(nums = [3, -4, 2, -6, -1], k = 2)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [10, 9, 2, 5, 3, 7], k = 1)",
        "maximumBeauty(nums = [2,3,5,1,4], k = 2)",
        "maximumBeauty(nums = [2,3,2,5], k = 1)",
        "maximumBeauty(nums = [3, 1, 1, 2, 4, 6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 2, 3, 4, 1, 5, 3], k = 2)",
        "maximumBeauty(nums = [6, 4, 9, 2, 3, 7], k = 3)",
        "maximumBeauty(nums = [10, 11, 13, 14, 15, 19, 20, 23], k = 2)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"banana\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a\", \"b\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"a\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"a\",\"b\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a_b_c\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"aaaa\", \"bbbb\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"aaa bb\", \"ccc\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"here\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"pink\"], separator = \"pink\")",
        "splitWordsBySeparator(words = [\"snow\", \"whites\"], separator = \" \")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 5])",
        "countWays([1, 2, 3])",
        "countWays(nums = [1, 3, 5, 6])",
        "countWays(nums = [1, 2, 5, 6])",
        "countWays(nums = [2, 1, 1])",
        "countWays(nums = [2, 1, 4])",
        "countWays([1,3,5])",
        "countWays([1, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,3,3,3])",
        "minimumIndex(nums = [1,2,2,1,2])",
        "minimumIndex([1,1,1,1,1])",
        "minimumIndex([1, 2, 1, 2, 1, 2])",
        "minimumIndex(nums = [1,1,1,2,2,3,3,4,4])",
        "minimumIndex(nums = [1,1,1,3,3,3,3])",
        "minimumIndex(nums = [1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3])",
        "minimumIndex([1,3,1,3,2])",
        "minimumIndex([3, 1, 2, 1, 3, 2])",
        "minimumIndex([2, 1, 3, 1, 2, 3, 4, 2, 1])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 3], [2, 7], [5, 9]])",
        "numberOfPoints(nums = [[2, 3], [4, 5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints([[1,100]])",
        "numberOfPoints(nums = [[1,5], [3,7], [5,8]])",
        "numberOfPoints(nums = [[1, 2], [3, 3], [2, 4]])",
        "numberOfPoints([[1, 5], [3, 4], [3, 6]])",
        "numberOfPoints(nums = [[1,3], [1,3], [1,3], [1,3], [1,3], [1,3], [1,3], [1,3], [1,3], [1,3]])",
        "numberOfPoints(nums = [[2,6],[6,12],[7,12]])",
        "numberOfPoints(nums = [[1,3], [3,1], [2,3], [3,2], [2,1]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 4, 3, 2, 5])",
        "semiOrderedPermutation(nums = [5,1,2])",
        "semiOrderedPermutation(nums = [2,1,4,3,7,6,5])",
        "semiOrderedPermutation(nums = [1,7,3,6,4,9,2])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 5, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 100, target = 1000)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 2])",
        "minimumIndex(nums = [1, 1, 0, 1, 1])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 2, 2])",
        "minimumIndex(nums = [5, 5, 5, 3, 3, 1, 1])",
        "minimumIndex([2, 3, 3, 4, 4, 4, 5, 5, 5, 5])",
        "minimumIndex(nums = [1, 3, 5, 2, 1, 3, 4, 1, 4, 5])",
        "minimumIndex([1, 3, 1, 3, 4, 4, 1, 1, 5, 3, 4])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 10, k = 5)",
        "minimumSum(n = 2, k = 2)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 5], [3, 5]])",
        "numberOfPoints(nums = [[3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,5], [2,4]])",
        "numberOfPoints(nums = [[1, 4], [3, 5], [2, 5]])",
        "numberOfPoints(nums = [[2, 6], [5, 9], [1, 7]])",
        "numberOfPoints(nums = [[2, 4], [5, 8], [1, 3]])",
        "numberOfPoints(nums = [[5, 9], [12, 16]])",
        "numberOfPoints(nums = [[2, 3], [1, 2], [2, 4], [4, 5], [4, 8]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], target = 0)",
        "maximumJumps(nums = [1,3,5,4,2], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [2, 1, 4, 2, 3, 5, 1], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 1, 2, 4], target = 3)",
        "maximumJumps(nums = [1, 3, 3, 1, 2], target = 3)",
        "maximumJumps(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 4)",
        "maximumJumps(nums = [2, 4, 1, 3, 10], target = 6)",
        "maximumJumps(nums = [1, 2, 3, 1, 1, 2, 3, 3], target = 1)"
    ],
    "sample_173": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 5, k = 7)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 7)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [3, 2, 3], m = 6)",
        "canSplitArray(nums = [1,2,3], m = 7)",
        "canSplitArray(nums = [2, 7, 11, 15], m = 20)",
        "canSplitArray(nums = [1,4,2], m = 6)",
        "canSplitArray(nums = [1, 4, 3, 3], m = 7)",
        "canSplitArray(nums = [1, 3, 6, 7], m = 9)",
        "canSplitArray(nums = [1,1,4,4], m = 6)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 5, 4], [3, 7, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [1, 3, 10], [2, 3, 15]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 6], [2, 3, 7], [4, 5, 8]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 10], [3, 4, 15], [4, 5, 50]])",
        "maximizeTheProfit(n = 11, offers = [[1, 3, 2], [2, 4, 3], [3, 5, 4], [4, 6, 1], [5, 7, 2], [6, 8, 3], [7, 9, 4], [8, 10, 1]])",
        "maximizeTheProfit(n = 6, offers = [[0, 2, 6], [1, 2, 10], [1, 3, 10], [2, 3, 7], [3, 4, 4], [4, 5, 3]])",
        "maximizeTheProfit(n = 6, offers = [[0, 2], [1, 2], [3, 2], [5, 1], [4, 4], [6, 2]])",
        "maximizeTheProfit(n = 5, offers = [[3, 2, 7], [2, 1, 1], [1, 2, 2], [3, 1, 3], [4, 1, 5]])",
        "maximizeTheProfit(n = 12, offers = [[1, 1, 3], [2, 4, 1], [5, 6, 1], [7, 9, 1], [10, 11, 1], [12, 13, 1]])",
        "maximizeTheProfit(n = 7, offers = [[4,10],[8,20],[7,15],[3,10],[6,15],[2,10],[1,20]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [3, 1, 5], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1], k = 5)",
        "checkArray(nums = [0,0,0], k = 1)",
        "checkArray(nums = [1, 2, 3, 2, 2], k = 2)",
        "checkArray(nums = [4, 3, 2, 2, 1], k = 2)",
        "checkArray(nums = [2, 3, 1, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [2, 5, 6, 3, 1], k = 3)",
        "checkArray(nums = [3, 1, 5, 1, 2, 3, 4, 3], k = 4)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [4, 2, 4, 5, 6], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 1, 2, 2, 2, 1, 2, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 4], k = 3)",
        "longestEqualSubarray(nums = [3,2,2,1,1], k = 2)",
        "longestEqualSubarray(nums = [3, 5, 4, 2], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,3,3,3,2,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,5,6,7,3,1,6], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3, 4, 5, 4, 5, 4, 5], k = 2)"
    ],
    "sample_8": [
        "colorTheArray(n = 2, queries = [[0, 0], [1, 0]])",
        "colorTheArray(n = 3, queries = [[1, 1]])",
        "colorTheArray(n = 4, queries = [[1, 0], [3, 1]])",
        "colorTheArray(n = 6, queries = [[0, 0], [1, 0], [2, 0], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [1, 0], [2, 0], [3, 1]])",
        "colorTheArray(n = 10, queries = [[1, 1], [1, 1]])",
        "colorTheArray(n = 4, queries = [[0, 0], [1, 1], [1, 0], [2, 1], [3, 1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 1], [1, 1], [1, 1]])",
        "colorTheArray(n = 10, queries = [[0, 0], [2, 0], [5, 1], [9, 1], [3, 1]])",
        "colorTheArray(n = 10, queries = [[1, 2], [2, 1], [0, 1], [5, 1], [8, 1]])"
    ],
    "sample_55": [
        "smallestString(s = \"kddsba\")",
        "smallestString(s = \"kddsbncde\")",
        "smallestString(s = \"kddsa\")",
        "smallestString(\"kddsbncc\")",
        "smallestString(s = \"kddsdc\")",
        "smallestString(s = \"qrstuvwxyz\")",
        "smallestString(s = \"kdxd\")",
        "smallestString(s = \"kdbbgncd\")",
        "smallestString(s = \"bddsdac\")",
        "smallestString(s = \"bccdea\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 5, 7], threshold = 2)",
        "longestAlternatingSubarray(nums = [4, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [4, 7, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [4,3,3,2,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [5, 8, 3, 12], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 1, 6, 7, 4, 2, 3, 5], threshold = 3)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [0, 1, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 3, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 6], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 10, 6, 4, 8, 12], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 10, 2, 1, 10, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 10, 4, 11, 2, 3, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [5, 4, 2, 7, 10], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 10, 11, 110, 111, 1101, 1101], threshold = 10)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [0, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [0, 1, 1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 2, 1])",
        "distinctDifferenceArray(nums = [3, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [3, 1, 1, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCCDC\")",
        "minLength(s = \"ABBCCCDD\")",
        "minLength(s = \"CCDABC\")",
        "minLength(s = \"CCABD\")",
        "minLength(s = \"ABCCDDDD\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abccba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababbb\")",
        "minimumCost(s = \"abcdabcd\")",
        "minimumCost(s = \"abcabcbb\")",
        "minimumCost(s = \"aabaabaa\")",
        "minimumCost(s = \"abcaa\")",
        "minimumCost(s = \"aaabbbaaccc\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 10)",
        "canSplitArray(nums = [2, 1, 3], m = 6)",
        "canSplitArray(nums = [1,2,3], m = 3)",
        "canSplitArray(nums = [2, 3, 3], m = 3)",
        "canSplitArray(nums = [4, 5, 6], m = 6)",
        "canSplitArray(nums = [1, 4, 2], m = 2)",
        "canSplitArray(nums = [2, 2, 3, 1, 1], m = 4)",
        "canSplitArray(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], m = 22)",
        "canSplitArray(nums = [10, 3, 5, 9], m = 19)",
        "canSplitArray(nums = [1, 5, 100, 100, 1], m = 105)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,2,3,4,5])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1])",
        "doesValidArrayExist(derived = [1,0,1,1,0])"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1,3,6,10,15], k = 2)",
        "checkArray(nums = [2, 1, 2], k = 2)",
        "checkArray(nums = [1,4,4,4], k = 3)",
        "checkArray(nums = [2, 2, 3, 4, 4, 5], k = 2)",
        "checkArray(nums = [2,3,5,1,2,4,7], k = 3)",
        "checkArray(nums = [1, 5, 6, 2, 3, 4], k = 1)",
        "checkArray(nums = [1,4,2,4,3,5], k = 4)",
        "checkArray(nums = [2, 5, 7, 4, 3, 2, 1, 4], k = 2)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 2, 2, 1])",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 4, 2, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 400, 500], target = 500)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 25, 7], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 20, 4, 8])",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 2, 10, 10, 10])",
        "numberOfEmployeesWhoMetTarget(hours = [10, 30, 15, 20, 25], target = 22)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 10, 3, 100], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 1, 3, 8, 5, 10, 3, 6])"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5], k = 2)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 6], k = 3)",
        "maximumBeauty(nums = [2, 3, 6, 8, 10], k = 3)",
        "maximumBeauty(nums = [4,2,1], k = 1)",
        "maximumBeauty(nums = [2, 3, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 2, 1, 3, 4], k = 1)",
        "maximumBeauty(nums = [3, 2, 2, 1, 2, 1], k = 3)",
        "maximumBeauty(nums = [10,10,5,5,4], k = 2)"
    ],
    "sample_205": [
        "minimumOperations(num = \"3\")",
        "minimumOperations(num = \"505\")",
        "minimumOperations(num = \"02579\")",
        "minimumOperations(num = \"034\")",
        "minimumOperations(num = \"3415\")",
        "minimumOperations(num = \"1988\")",
        "minimumOperations(num = \"252550\")",
        "minimumOperations(num = \"15573\")",
        "minimumOperations(num = \"298951\")",
        "minimumOperations(num = \"10001001001001000100100010010010010010010001001001001001\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"010\")",
        "minimumOperations(s = \"000000\")",
        "minimumOperations(s = \"10\")",
        "minimumOperations(s = \"0225\")",
        "minimumOperations(s = \"0012\")",
        "minimumOperations(s = \"0002\")",
        "minimumOperations(s = \"0101011\")",
        "minimumOperations(s = \"222222222222222222222222\")",
        "minimumOperations(s = \"00011010111000100110\")",
        "minimumOperations(s = \"230516240\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation([1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation([1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation([1, 4, 3, 5, 2])",
        "semiOrderedPermutation([6, 5, 1, 4])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"RLRLR\")",
        "furthestDistanceFromOrigin(moves = \"RLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRLRRR\")",
        "furthestDistanceFromOrigin(\"LRRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLRLRLRLRLRRRL\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"ab\", \"cd\"], s = \"ABCD\")",
        "isAcronym(words = [\"abc\", \"def\"], s = \"ABC\")",
        "isAcronym(words = [\"abc\", \"def\", \"ghi\"], s = \"ABCD\")",
        "isAcronym(words = [\"A\", \"B\", \"C\", \"D\"], s = \"ABCD\")",
        "isAcronym(words = [\"I\", \"Love\", \"Coding\"], s = \"ILC\")",
        "isAcronym(words = [\"abc\"], s = \"abc\")",
        "isAcronym(words = [\"cool\", \"python\"], s = \"CP\")",
        "isAcronym(words = [\"red\", \"brown\", \"blue\"], s = \"RBB\")",
        "isAcronym(words = [\"music\", \"band\", \"university\"], s = \"MBU\")",
        "isAcronym(words = [\"nam\", \"r\", \"o\", \"b\"], s = \"NROB\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 10, k = 1)",
        "countInterestingSubarrays(nums = [0, 1], modulo = 1000000007, k = 1)",
        "countInterestingSubarrays(nums = [1,0,0,0], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 4], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums = [1,2,1,2,1,2,1,2,1,2,1,2], modulo = 10, k = 1)",
        "countInterestingSubarrays(nums = [3, 3, 0, 3, 3, 3], modulo = 5, k = 3)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [3, 5, 7])",
        "countBeautifulPairs(nums = [19, 12, 3, 5])",
        "countBeautifulPairs(nums = [13, 27, 18, 26])",
        "countBeautifulPairs(nums = [5, 3, 2, 8, 1])",
        "countBeautifulPairs(nums = [12, 31, 4, 32])",
        "countBeautifulPairs(nums = [23, 45, 2, 34])",
        "countBeautifulPairs(nums = [33, 9, 17])",
        "countBeautifulPairs(nums = [23, 15, 22, 8, 5, 7])",
        "countBeautifulPairs(nums = [3, 11, 20, 43, 76, 83, 20, 12])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [3,2,1,0,4], target = 2)",
        "maximumJumps(nums = [3,2,1,0,4], target = 2)",
        "maximumJumps(nums = [1,3,5,8,9,2,6,7,3,1], target = 3)",
        "maximumJumps(nums = [1,3,5,4], target = 1)",
        "maximumJumps(nums = [1,3,2,2,3,1,1,2], target = 0)",
        "maximumJumps(nums = [1,1,3,1,4], target = 1)",
        "maximumJumps(nums = [1,5,3,4,5,3], target = 1)",
        "maximumJumps(nums = [1,3,2,4,1,0,3,2], target = 1)",
        "maximumJumps(nums = [2,5,-2,4,1,3,6,-4], target = -1)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [3, 7])",
        "countBeautifulPairs(nums = [1, 2, 2])",
        "countBeautifulPairs(nums = [1, 3, 2, 5])",
        "countBeautifulPairs(nums = [5, 11, 19, 23])",
        "countBeautifulPairs(nums = [17, 1, 9, 7])",
        "countBeautifulPairs(nums = [222, 112])",
        "countBeautifulPairs(nums = [3, 5, 2, 100, 4])",
        "countBeautifulPairs(nums = [15, 34, 23, 4, 7])",
        "countBeautifulPairs(nums = [15, 95, 44, 72, 69, 80, 80])"
    ],
    "sample_18": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDABC\")",
        "minLength(s = \"ABABCDCDAB\")",
        "minLength(s = \"ABBCCDD\")",
        "minLength(s = \"ABCABCDABAB\")",
        "minLength(s = \"ABBCCDDEEEE\")",
        "minLength(s = \"ABACDCBAC\")",
        "minLength(s = \"AABBCDCCDEEE\")",
        "minLength(s = \"AAAACDABAA\")"
    ],
    "sample_150": [
        "finalString(s = \"rtsng\")",
        "finalString(s = \"rtsngi\")",
        "finalString(s = \"rtsing\")",
        "finalString(s = \"tsngir\")",
        "finalString(s = \"retsng\")",
        "finalString(s = \"rtstng\")",
        "finalString(s = \"abcdefg\")",
        "finalString(s = \"strng\")",
        "finalString(s = \"rstingu\")",
        "finalString(s = 'snippet')"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [1, 2, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,1,1])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 1])",
        "findValueOfPartition(nums = [1, 1, 1])",
        "findValueOfPartition(nums = [5, 4, 3, 2, 1])",
        "findValueOfPartition(nums = [1,2,3,4,5,6])",
        "findValueOfPartition(nums = [5, 2, 4, 1])",
        "findValueOfPartition(nums = [1, 4, 2, 1])",
        "findValueOfPartition(nums = [2, 4, 4, 5, 8])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[1, 0]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 0], [3, 0], [4, 1]])",
        "colorTheArray(n = 3, queries = [[2, 0], [1, 0], [0, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[1, 0], [1, 1], [2, 0], [2, 1], [3, 0], [3, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [2, 1], [2, 2]])",
        "colorTheArray(n = 4, queries = [[2, 3], [2, 2], [1, 3], [0, 3]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [3, 1], [3, 2], [1, 2], [2, 2], [3, 3]])",
        "colorTheArray(n = 4, queries = [[1, 2], [3, 4], [1, 1], [4, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [3, 1], [2, 1], [2, 2], [3, 2], [0, 1]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n = 4, target = 20)",
        "minimumPossibleSum(n = 4, target = 14)",
        "minimumPossibleSum(n = 10000, target = 8)"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 10, k = 2)",
        "minimumSum(n = 10, k = 2)",
        "minimumSum(n = 4, k = 1)",
        "minimumSum(n = 7, k = 1)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5])",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 1",
        "numberOfEmployeesWhoMetTarget(hours = [2, 10])",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 8])",
        "numberOfEmployeesWhoMetTarget(hours = [3, 6, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 1, 6, 2])",
        "numberOfEmployeesWhoMetTarget(hours = [5, 3, 3, 4, 2])",
        "numberOfEmployeesWhoMetTarget(hours = [7, 3, 5, 4, 6])",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 1, 2, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "numberOfEmployeesWhoMetTarget(hours = [5, 13, 8, 2, 3, 9, 22])"
    ],
    "sample_152": [
        "canSplitArray(nums = [5, 4, 3, 2, 1], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 6, 7, 8], m = 10)",
        "canSplitArray(nums = [3, 2, 2, 2, 1], m = 3)",
        "canSplitArray(nums = [2, 3, 1, 4], m = 3)",
        "canSplitArray(nums = [5, 5, 2], m = 8)",
        "canSplitArray(nums = [1, 1, 2, 2, 1], m = 5)",
        "canSplitArray(nums = [1, 3, 3, 5, 7], m = 8)",
        "canSplitArray(nums = [1, 3, 2, 2, 3, 4, 3], m = 10)",
        "canSplitArray(nums = [1, 3, 2, 4, 7, 2], m = 6)",
        "canSplitArray(nums = [3, 2, 100, 100, 4], m = 7)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 10, k = 9)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [3,1,2,1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,1,0,0,0], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [3, 4, 5, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1, 0], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [0, 2, 4, 4], m = 4, k = 3)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], t = 4)",
        "longestAlternatingSubarray(nums = [2,1,2], t = 2)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9], t = 10)",
        "longestAlternatingSubarray(nums = [2,3,2,4,3], t = 3)",
        "longestAlternatingSubarray(nums = [5,2,1,3], t = 3)",
        "longestAlternatingSubarray(nums = [2,1,0,2,3], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,1,1,1,1,2], t = 3)",
        "longestAlternatingSubarray(nums = [4, 6, 10], t = 11)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits([0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = \"0123001\")",
        "removeTrailingZeros(num = '100001000')"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 1, b = 1)",
        "makeTheIntegerZero(a = 7, b = 2)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 13, b = 2)",
        "makeTheIntegerZero(a = 100, b = 1)",
        "makeTheIntegerZero(a = 1000, b = 1)",
        "makeTheIntegerZero(a = 16, b = 2)",
        "makeTheIntegerZero(a = 1234, b = 123)",
        "makeTheIntegerZero(a = 102, b = 5)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [2, 1, 3], m = 2)",
        "canSplitArray(nums = [1, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 20)",
        "canSplitArray(nums = [3, 2, 2, 2], m = 6)",
        "canSplitArray(nums = [2, 3, 7], m = 9)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8], m = 6)",
        "canSplitArray(nums = [10, 10, 10, 2], m = 10)",
        "canSplitArray(nums = [5, 3, 3, 6], m = 5)",
        "canSplitArray(nums = [2, 5, 6, 10], m = 16)"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 1])",
        "maxSum(nums = [2, 5, 1])",
        "maxSum([1, 1, 1])",
        "maxSum(nums = [2, 1, 4, 6])",
        "maxSum(nums = [1234, 1235, 1236, 1237, 1238])",
        "maxSum(nums = [10, 9, 2, 5, 3, 7, 101, 18])",
        "maxSum([4, 5, 4, 10, 5, 2])",
        "maxSum(nums = [-1, 9, -7, 13, 9])",
        "maxSum(nums = [1, 4, 3, 3, 7, 3, 2, 10, 5, 4])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 4, target = 2)",
        "minimumPossibleSum(n = 10, target = 24)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,3])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1,3,5,6])",
        "findValueOfPartition(nums = [2, 4, 6])",
        "findValueOfPartition([1, 2, 3, 5])",
        "findValueOfPartition(nums = [1, 5, 6, 7, 8, 10])",
        "findValueOfPartition(nums = [0,1,4,7])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 3], [3, 6]])",
        "numberOfPoints(nums = [[1, 5], [2, 6], [3, 7]])",
        "numberOfPoints(nums = [[1,2], [3,8]])",
        "numberOfPoints(nums = [[1, 10], [4, 10]])",
        "numberOfPoints(nums = [[1,4], [3,6], [5,7]])",
        "numberOfPoints(nums = [[1, 5], [2, 7], [3, 9]])",
        "numberOfPoints([[1, 3], [4, 6], [10, 20]])",
        "numberOfPoints(nums = [[1,5],[5,7],[4,5]])",
        "numberOfPoints(nums = [[4,7], [5,10], [6,8]])",
        "numberOfPoints(nums = [[1, 3], [5, 7], [10, 15], [20, 40]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 5], [3, 7]])",
        "numberOfPoints(nums = [[1, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[2, 6], [4, 6]])",
        "numberOfPoints([[1, 5], [1, 7]])",
        "numberOfPoints([[2, 3], [5, 6]])",
        "numberOfPoints(nums = [[1,3],[3,4],[1,5]])",
        "numberOfPoints(nums = [[0, 3], [1, 3], [2, 5]])",
        "numberOfPoints(nums = [[3, 5], [3, 6], [2, 8]])",
        "numberOfPoints(nums = [[2, 5], [1, 6], [4, 3], [8, 9]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one two three four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"one\", \"two three\", \"four\", \"five six\", \"seven\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ';')",
        "splitWordsBySeparator(words = [\"one\", \"two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['1', '2', '3', '4', '5', '6'], separator = \" \")"
    ],
    "sample_200": [
        "minOperations(nums = [2,3,10,6,4,8,1], target = 23)",
        "minOperations(nums = [1, 1, 4, 2, 3], target = 5)",
        "minOperations(nums = [3,2,2,4], target = 8)",
        "minOperations(nums = [1, 1, 4], target = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 9)",
        "minOperations(nums = [1, 2, 3, 4], target = 11)",
        "minOperations(nums = [1, 2, 3], target = 2)",
        "minOperations(nums = [2, 1], target = 3)",
        "minOperations(nums = [2, 2, 3, 3], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], target = 17)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 1], k = 2)",
        "checkArray(nums = [1,2,3,1,2,3], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 1)",
        "checkArray(nums = [1, 1, 2], k = 1)",
        "checkArray(nums = [1, 2, 2, 2], k = 3)",
        "checkArray(nums = [1, 2, 1, 3, 1, 4, 1, 5], k = 4)",
        "checkArray(nums = [1,2,1,3], k = 3)",
        "checkArray(nums = [1, 2, 3, 3, 3, 3, 3, 4, 5], k = 6)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1,1,0,1])",
        "doesValidArrayExist(derived = [1,1,0,0])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0])"
    ],
    "sample_159": [
        "maxSum(nums = [1,2])",
        "maxSum(nums = [-1,-2,-3])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [10,20,30,40,50])",
        "maxSum(nums = [-1,2,1])",
        "maxSum(nums = [10,9,8,7,6,5,4,3,2,1])",
        "maxSum(nums = [-1, -2, -3, 4])",
        "maxSum(nums = [2, 3, 10, 1, 4, 9])",
        "maxSum([-1, 2, 10, 9])",
        "maxSum(nums = [4, 1, 5, 4, 1, 3])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,1,2,1,2,1])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays([1, 2, 3, 4, 5, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 1, 2, 2, 3, 3])",
        "continuousSubarrays(A = [0,0,0,1,1,1,2,2,2,2])",
        "continuousSubarrays(A = [1, 2, 1, 3, 3, 2, 2, 2])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 1, 2, 3, 1, 2, 1])",
        "continuousSubarrays([2, 2, 2, 1, 1, 1, 2, 2, 2])",
        "continuousSubarrays([2, 3, 1, 2, 3, 2, 3])",
        "continuousSubarrays(A = [2, 3, 1, 2, 2, 3, 3, 1, 1])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray([1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [2, 1, 4, 3, 2])",
        "distinctDifferenceArray(nums = [2, 2, 2, 1, 2])",
        "distinctDifferenceArray(nums = [3, 4, 2, 1, 1])",
        "distinctDifferenceArray(nums = [0, 0, 1, 1, 1, 1, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [3,2,1,5,6,5])",
        "distinctDifferenceArray(nums = [0, 1, 0, 3, 2, 1, 2, 3, 2])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [5, 6, 7, 8])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 4, 2, 3])",
        "maxNonDecreasingLength(a = [3, 4, 5, 6], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 1, 2, 2], b = [1, 2, 1, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [6, 4, 5, 8])",
        "maxNonDecreasingLength(a = [4, 6, 7, 3, 5], b = [2, 3, 3, 9, 3])",
        "maxNonDecreasingLength(a = [1, 1, 3, 3, 4], b = [2, 3, 2, 3, 3])",
        "maxNonDecreasingLength(a = [10, 6, 7, 1, 9, 3, 2, 8], b = [10, 7, 9, 6, 4, 8, 3, 2])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 12, additionalTank = 1)",
        "distanceTraveled(mainTank = 30, additionalTank = 2)",
        "distanceTraveled(mainTank = 100, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 25, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 0)",
        "distanceTraveled(mainTank = 50, additionalTank = 4)"
    ],
    "sample_160": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [7,7,7,7,9,9,9,9])",
        "maxSum(nums = [5, 1, 6, 2, 7, 8, 3])",
        "maxSum([101, 12, 3, 2])",
        "maxSum(nums = [9, 13, 21, 11, 5])",
        "maxSum(nums = [34, 10, 15, 8])",
        "maxSum(nums = [143, 43, 24, 23, 2])",
        "maxSum(nums = [52, 25, 30, 18, 16])",
        "maxSum(nums = [34, 342, 4343, 1122, 112, 987])",
        "maxSum(nums = [734, 631, 587, 399, 473, 905, 963, 456, 423, 167, 817, 687, 404, 412, 857, 178, 725, 905, 397, 846, 751, 952, 466, 729, 450, 713, 807, 354, 698, 657, 189, 124, 673, 594, 777, 280, 327, 223, 251, 987, 584, 169, 219, 583, 543, 400, 791, 622, 174, 650, 416, 806, 430, 645, 739, 469, 173, 355, 100, 591, 125, 328, 291, 182, 570, 336, 786, 282, 409, 585, 658, 140, 286, 597, 703, 323, 776, 804, 749, 504, 419, 243, 183, 395, 788, 314, 805, 175, 975, 990, 286, 929, 558, 435, 155, 972, 486, 494, 948, 420, 946, 408, 1000, 617, 465, 341, 654, 128, 679, 191, 981, 848, 520,"
    ],
    "sample_52": [
        "smallestString(s = 'kddsba')",
        "smallestString(s = 'kddsba')",
        "smallestString(s = \"kddsbnca\")",
        "smallestString(s = \"kddsbnca\")",
        "smallestString(s = \"kddsba\")",
        "smallestString(s = \"kddsba\")",
        "smallestString(s = \"kcddsbncd\")",
        "smallestString(s = \"abcbc\")",
        "smallestString(s = \"afbcc\")",
        "smallestString(s = \"aaabbbccddeeffgghiiijkkllmmnnnooppqrrssssttuvvwwxxyyzzz\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [2, 1])",
        "findValueOfPartition(nums = [1, 1, 1, 1, 1])",
        "findValueOfPartition(nums = [10, 5, 3])",
        "findValueOfPartition(nums = [1, 1, 3, 3, 5])",
        "findValueOfPartition(nums = [4, 2, 7, 1])",
        "findValueOfPartition(nums = [1, 5, 3, 6, 4])",
        "findValueOfPartition([10, 11, 1])",
        "findValueOfPartition(nums = [-1, 5, 7, 9])",
        "findValueOfPartition(nums = [-100, 5, 10])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abca\")",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = \"abbba\")",
        "makeSmallestPalindrome(s = \"abaa\")",
        "makeSmallestPalindrome(s = \"cbba\")",
        "makeSmallestPalindrome(s = \"yxxxxxxxxyy\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 5)",
        "makeTheIntegerZero(num1 = 7, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 8)",
        "makeTheIntegerZero(num1 = 12, num2 = 15)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 21, num2 = 12)",
        "makeTheIntegerZero(num1 = 19, num2 = 16)",
        "makeTheIntegerZero(num1 = 11, num2 = 10)",
        "makeTheIntegerZero(num1 = 34, num2 = 20)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[2,5]])",
        "numberOfPoints(nums = [[1,3],[2,4],[4,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[4,5],[5,6],[6,7]])",
        "numberOfPoints([[1,4],[2,5],[3,7]])",
        "numberOfPoints([[1,3],[2,4],[6,7]])",
        "numberOfPoints(nums=[[1,5],[2,4],[5,9]])",
        "numberOfPoints(nums = [[1,2],[1,3],[2,4],[4,5],[3,5]])",
        "numberOfPoints(nums = [[2,3],[3,4],[1,4],[4,5]])",
        "numberOfPoints(nums = [[1,1],[2,4],[4,5],[6,6]])",
        "numberOfPoints(nums = [[3, 7],[7, 9],[5, 10],[10, 12]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 2, 2, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [4, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [4, 0, 0], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 0, 1, 1, 0, 1, 1, 0], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [0, 3, 3, 2, 0], m = 10, k = 5)",
        "countInterestingSubarrays(nums = [0, 3, 1, 6, 4, 1, 2, 5, 6, 6], m = 3, k = 1)"
    ],
    "sample_40": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"cdabcd\")",
        "minimumCost(s = \"ABC\")",
        "minimumCost(s = \"aabcbc\")",
        "minimumCost(s = \"xyxy\")",
        "minimumCost(s = \"yzy\")",
        "minimumCost(s = \"apbca\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0])",
        "doesValidArrayExist(derived = [1,0,1])",
        "doesValidArrayExist(derived = [0,0,0,1,0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 1, 1, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 2])",
        "distinctDifferenceArray(nums = [0, 1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [2, 4, 1, 3, 6])",
        "distinctDifferenceArray(nums = [3, 1, 5, 3, 6])",
        "distinctDifferenceArray(nums = [-1, -2, 0, 1, 2, 2])",
        "distinctDifferenceArray(nums = [3, 1, 2, 2, 1, 3, 4])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5])",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 9])",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 1, 3, 5])",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 3, 2])",
        "numberOfEmployeesWhoMetTarget(hours = [5, 4, 3, 2, 2])",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 20, 8])",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 4, 4, 6])",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 1, 7, 2], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 6, 10, 15, 5])",
        "numberOfEmployeesWhoMetTarget(hours = [15, 25, 27, 40, 30, 35])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"evne\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100000000000000000')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [1,2,1,2,3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 2, 4, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [0,0,0,0,0], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,2,3,3,4,4], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 0, 2, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2,2,1,2,2,2], m = 5, k = 2)",
        "countInterestingSubarrays(nums=[0,3,1,6], m=10, k=3)",
        "countInterestingSubarrays(nums = [1, 2, 1, 1, 2, 1, 1], m = 1, k = 1)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 11, additionalTank = 4)",
        "distanceTraveled(mainTank = 19, additionalTank = 0)",
        "distanceTraveled(mainTank = 9, additionalTank = 6)",
        "distanceTraveled(mainTank = 21, additionalTank = 4)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5], x = 3)",
        "minCost(A = [1, 3, 1], x = 2)",
        "minCost(A = [2, 4, 7], x = 2)",
        "minCost(A = [5, 6, 7, 8, 9], x = 3)",
        "minCost(A = [5, 2, 1])",
        "minCost(A = [1, 1, 1, 1, 1, 1, 1, 1, 1], x = 2)",
        "minCost(A = [1,2,1,2,1,2,1], x = 3)",
        "minCost(A = [10, 1, 1, 1, 2, 1, 1, 2, 2, 100], x = 3)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [0, 1, 2, 3, 4])",
        "maxIncreasingGroups(u = [2, 3, 4, 3, 5])",
        "maxIncreasingGroups(u = [3, 5, 6, 9])",
        "maxIncreasingGroups(u = [1, 4, 5, 7, 8, 9])",
        "maxIncreasingGroups(u = [2, 2, 3, 3, 1])",
        "maxIncreasingGroups(u = [1, 4, 2, 2, 5])",
        "maxIncreasingGroups(u = [4, 2, 2, 1, 4])",
        "maxIncreasingGroups(u = [1, 3, 4, 2, 5, 6, 7, 8])",
        "maxIncreasingGroups(u = [2, 3, 7, 10, 11, 12, 13, 14, 15])",
        "maxIncreasingGroups(u = [1, 4, 2, 1, 2, 5, 3, 3])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 3, 2], k = 2)",
        "checkArray(nums = [1, -1, 2, -2, 3, -3], k = 3)",
        "checkArray(nums = [3, 4, 7, 2], k = 3)",
        "checkArray(nums = [2, 4, 5, 3, 1], k = 1)",
        "checkArray(nums = [5, 1, 2, 3, 4, 6, 7, 8], k = 2)",
        "checkArray(nums = [3,1,5,2,4,6], k = 2)",
        "checkArray(nums = [2, 0, -1, 2, -5], k = 3)",
        "checkArray(nums = [4, 2, 3, 1, 3, 3, 2], k = 2)",
        "checkArray(nums = [1, 3, 3, 6, 2, 5, 6], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"CDABCD\")",
        "minLength(s = \"ABABABCDCDCDCD\")",
        "minLength(s = \"ABCABCDAB\")",
        "minLength(s = \"ABAABCDAB\")",
        "minLength(s = \"ABBCCDDDD\")",
        "minLength(s = \"ABBABCBA\")",
        "minLength(s = 'AABBCCD')",
        "minLength(s = \"CABAACDCD\")",
        "minLength(s = \"CDCCDCBABABABABABABABABABABABABAB\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,1,4], target = 6)",
        "minOperations(nums = [1,1,1], target = 3)",
        "minOperations(nums = [2,3,10], target = 11)",
        "minOperations(nums = [1,1,1,1], target = 4)",
        "minOperations(nums = [1,1,4],target = 6)",
        "minOperations(nums = [1,3,5],target = 8)",
        "minOperations(nums = [3,1,4], target = 1)",
        "minOperations(nums = [3, 1, 4], target = 17)",
        "minOperations(nums = [1,5,7,2], target = 6)",
        "minOperations(nums = [1, 2, 10, 12, 20, 3, 4, 5, 6, 7, 8, 9, 10, 11], target = 10)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"banana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a b\", \"c\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"1 2 3\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"abc\", \"def\", \"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"lorem ipsum\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"pizza\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"abc def\", \"a b c\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"a,b,c\"], separator = \", \")",
        "splitWordsBySeparator(words = [\"ab,bc,c\", \"d\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"banana\", \"pizza\", \"apple\", \"cake\"], separator = \"pizza\")"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbnca\")",
        "smallestString(s = \"kddsbnca\")",
        "smallestString(\"kddsba\")",
        "smallestString(s = \"kddsbncb\")",
        "smallestString(s = \"kddsbnda\")",
        "smallestString(s = 'kddsbnccd')",
        "smallestString(s = \"ddsbnca\")",
        "smallestString(s = \"aaabbaa\")",
        "smallestString(s = \"accccc\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LR_RRLR_\")",
        "furthestDistanceFromOrigin(moves = 'R_R_L_R_R_R_R')",
        "furthestDistanceFromOrigin(moves = \"R_R_L_R_R_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L__L_\")",
        "furthestDistanceFromOrigin(moves = 'R_R_L_L_RR_L')",
        "furthestDistanceFromOrigin(moves = 'RLLLRLLLL_L')",
        "furthestDistanceFromOrigin(moves = \"LR_LLRR_R_RRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRL_LRLR_RLRRL_LLRL_RLRRL_RLRL_RRRLRL\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 15, num2 = 10)",
        "makeTheIntegerZero(num1 = 24, num2 = 5)",
        "makeTheIntegerZero(num1 = 101, num2 = 3)",
        "makeTheIntegerZero(num1 = 111, num2 = 100)",
        "makeTheIntegerZero(num1 = 101, num2 = 16)"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbnca\")",
        "smallestString(s = \"kddsba\")",
        "smallestString(s = \"abcda\")",
        "smallestString(s = \"kddsbaa\")",
        "smallestString(s = 'cda')",
        "smallestString(s = \"abg\")",
        "smallestString(s = \"kdxbnd\")",
        "smallestString(s = 'kkkabacaa')",
        "smallestString(\"kkkddssbbnbk\")"
    ],
    "sample_146": [
        "finalString(s = \"ponter\")",
        "finalString(s = \"pont\")",
        "finalString(s = 'ponter')",
        "finalString(s = \"tonterop\")",
        "finalString(s = \"teronpo\")",
        "finalString(s = \"retpone\")",
        "finalString(s = 'potrer')",
        "finalString(s = 'topent')",
        "finalString(s = \"rontpe\")",
        "finalString(s = 'ternroP')"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 1, 1, 2, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,1,4,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [0,0,1,1,0,1], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [4, 1, 2, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,2,2,2,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 4, 3, 1, 4], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1, 1, 1], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 5], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5,6,7], m = 8)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 1)",
        "canSplitArray(nums = [2, 4, 3, 5], m = 10)",
        "canSplitArray(nums = [4,2,4], m = 6)",
        "canSplitArray(nums = [1, 3, 4, 3, 2], m = 5)",
        "canSplitArray(nums = [2, 5, 7, 1], m = 6)",
        "canSplitArray(nums = [10,3,4,2], m = 5)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = \"one two three four five six\", separator = \" \")",
        "splitWordsBySeparator(words = ['one two three four five six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one two three four five six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one two three four five six'], separator = ' ')",
        "splitWordsBySeparator(words = \"one two three four five six\".split(\" \"), separator = \" \")",
        "splitWordsBySeparator(words = \"one,two,three,four,five,six\".split(\",\"), separator = \",\")",
        "splitWordsBySeparator(words = [\"one;two;three;four;five;six\"], separator = \";\")",
        "splitWordsBySeparator(words = ['one;two;three;four;five;six'], separator = ';')",
        "splitWordsBySeparator(words = ['onetwothreefourfive', 'six'], separator = 'o')",
        "splitWordsBySeparator(words = \"onetwo threefour fivesix\".split(' '), separator = \" \")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 6, 7])",
        "numberOfEmployeesWhoMetTarget(hours = [1,3,4,2,5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6, 7, 8])",
        "numberOfEmployeesWhoMetTarget(hours = [5,2,3,4], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [12,10,11,8,23,11])"
    ],
    "sample_168": [
        "isAcronym(words = [\"i\", \"love\", \"coding\"], s = \"ilc\")",
        "isAcronym(words = ['a', 'b', 'c'], s = 'c')",
        "isAcronym(words = [\"Yale\", \"University\"], s = \"YU\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"test\"], s = \"tista\")",
        "isAcronym(words = [\"programming\", \"coding\"], s = \"pc\")",
        "isAcronym(words = [\"hello\", \"goodbye\", \"wow\"], s = \"hwg\")",
        "isAcronym(words = [\"face\", \"palace\", \"space\"], s = \"FPS\")",
        "isAcronym(words = [\"CS\", \"500\", \"climate\"], s = \"CS500CLI\")",
        "isAcronym(words = [\"el\", \"pa\", \"ro\", \"pt\"], s = \"elparo\")",
        "isAcronym(words = [\"NASA\", \"EDEN\", \"NCC1701\"], s = \"NED\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"abc\", \"def\"], s = \"abcdef\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ba\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"cba\")",
        "isAcronym(words = [\"banana\", \"banana\", \"banana\"], s = \"BANANA\")",
        "isAcronym(words = [\"dog\", \"cat\", \"bird\"], s = \"DCB\")",
        "isAcronym(words = [\"one\", \"two\"], s = \"o2\")",
        "isAcronym(words = [\"te\", \"ch\", \"en\"], s = \"tech\")",
        "isAcronym(words = [\"pr\", \"ob\", \"lema\"], s = \"POP\")",
        "isAcronym(words = [\"name\", \"is\", \"surname\"], s = \"NIS\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abccba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"codewars\")",
        "minimumCost(s = \"ababab\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"xyab\")",
        "minimumCost(s = \"baaabaaa\")",
        "minimumCost(s = \"sdfg\")",
        "minimumCost(s = \"gffhffgffg\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 2, 4])",
        "doesValidArrayExist(derived = [1,0,1,1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abbc\")",
        "makeSmallestPalindrome(s = \"abbc\")",
        "makeSmallestPalindrome(s = \"abbc\")",
        "makeSmallestPalindrome(s = \"abcb\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"abac\")",
        "makeSmallestPalindrome(s = \"abcc\")",
        "makeSmallestPalindrome(s = \"abbcba\")",
        "makeSmallestPalindrome(s = \"abbd\")",
        "makeSmallestPalindrome(s = \"aab\")"
    ],
    "sample_50": [
        "smallestString(s = \"aabaa\")",
        "smallestString(s = \"aabaa\")",
        "smallestString(s = 'abaab')",
        "smallestString(s = 'aabaa')",
        "smallestString(s = \"abaaba\")",
        "smallestString(s = \"abaabaa\")",
        "smallestString(s = 'ababba')",
        "smallestString(s = \"baaaa\")",
        "smallestString(\"abaa\")",
        "smallestString(s = \"aaaabaaab\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [4,2,2,6,9,2], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 10, 10, 10, 10, 10, 5], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCA\")",
        "minLength(s = \"ABBAAB\")",
        "minLength(s = \"CDABA\")",
        "minLength(s = \"ABCDEB\")",
        "minLength(s = \"ABABBCAB\")",
        "minLength(s = \"ABABBABABBA\")",
        "minLength(s = \"ABBCCDDABCC\")",
        "minLength(s = \"ACDADABACD\")",
        "minLength(s = \"AABAAADBCC\")"
    ],
    "sample_158": [
        "maxSum(nums = [-1, -2])",
        "maxSum(nums = [-1, -1, -1, -1])",
        "maxSum(nums = [-1, 2, 1])",
        "maxSum(nums = [1, 2, 3, 1])",
        "maxSum(nums = [2, 3, 10, 6, 4, 8, 1])",
        "maxSum(nums = [9, 2, 3, 1])",
        "maxSum(nums = [12, 19, 13, 12])",
        "maxSum([0, 10, 20, 50])",
        "maxSum(nums = [-2, 5, 4, 10, 2])",
        "maxSum([232, 45, 353, 55, 756, 66])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation([1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [1, 5, 3, 2, 4])",
        "semiOrderedPermutation(nums = [4, 2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 5, 4, 3, 2])",
        "semiOrderedPermutation(nums = [2, 5, 3, 6, 1])",
        "semiOrderedPermutation([1, 6, 2, 7, 3, 8, 4, 9, 5])"
    ],
    "sample_162": [
        "maxSum(nums = [88, 100])",
        "maxSum(nums = [22, 22, 33, 33])",
        "maxSum(nums = [99, 99, 10, 200])",
        "maxSum(nums = [12, 21, 32, 43, 41, 65])",
        "maxSum(nums = [12, 55, 78, 89, 22, 31])",
        "maxSum([12, 23, 95, 34, 23, 90, 34])",
        "maxSum(nums = [25, 87, 31, 2, 78, 38])",
        "maxSum(nums = [8, 11, 22, 9, 20, 9, 1, 9, 10])",
        "maxSum(nums = [1, 2, 55, 5, 100, 55, 8, 12, 55])",
        "maxSum(nums = [12, 13, 19, 21, 24, 30, 38, 42, 57, 69, 70, 80, 89, 90])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"0101\")",
        "maximumOddBinaryNumber(s = \"1000\")",
        "maximumOddBinaryNumber(s = \"01\")",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = \"00100\")",
        "maximumOddBinaryNumber(s = \"001001\")",
        "maximumOddBinaryNumber(s = '00011')",
        "maximumOddBinaryNumber(s = \"011100\")",
        "maximumOddBinaryNumber(s
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 25], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 6, 6, 12])",
        "numberOfEmployeesWhoMetTarget(hours = [4, 8, 9, 10, 6])",
        "numberOfEmployeesWhoMetTarget(hours = [7, 2, 10, 5, 6])",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15, 20, 30, 30], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 1, 5, 10, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [130, 120, 100, 150, 140])",
        "numberOfEmployeesWhoMetTarget(hours = [6, 5, 11, 10, 10, 8, 15, 13, 14, 8])"
    ],
    "sample_166": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"abc\", \"def\"], s = \"abcd\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hi\")",
        "isAcronym(words = [\"apple\", \"banana\", \"carrot\"], s = \"abc\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ab\")",
        "isAcronym(words = [\"not\", \"an\", \"acronym\"], s = \"NANA\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"baaa\")",
        "isAcronym(words = [\"i\", \"love\", \"coding\"], s = \"LC\")",
        "isAcronym(words = [\"W\", \"E\", \"A\", \"R\"], s = \"WEAR\")",
        "isAcronym(words = [\"Apple\", \"Mango\", \"Watermelon\"], s = \"W\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank=2, additionalTank=1)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank = 100, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 10)",
        "distanceTraveled(mainTank = 4, additionalTank = 4)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [3, 2, 1])",
        "maxIncreasingGroups(A = [2, 2, 1, 1, 1])",
        "maxIncreasingGroups(A = [2, 1, 4, 2])",
        "maxIncreasingGroups(A = [0,0,0,0])",
        "maxIncreasingGroups(A = [3, 3, 4, 1, 3, 3, 2, 1, 2, 1])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [0, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3])",
        "distinctDifferenceArray(nums = [3, 1, 2, 4, 3])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 1])",
        "distinctDifferenceArray(nums = [2, 2, 1, 1])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 11, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,4,4])",
        "countCompleteSubarrays(nums = [2, 2, 2, 2, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,5,5,5,5,5])",
        "countCompleteSubarrays(nums = [2, 3, 4, 5, 6, 7])",
        "countCompleteSubarrays(nums = [2,3,4,5,1,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [2, 4, 3, 5, 4, 2, 3])",
        "countCompleteSubarrays(nums = [2, 2, 3, 3, 3, 2, 3, 3])",
        "countCompleteSubarrays([0,0,1,0,1,1,0,0,1,0])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 13, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 7, 5, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [0b11, 0b010, 0b100, 0b0010], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"ba\")",
        "minimizedStringLength(s = \"xyz\")",
        "minimizedStringLength(s = \"hello\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"abacbc\")",
        "minimizedStringLength(s = \"abcdefghi\")",
        "minimizedStringLength(s = \"aaaabbbbcc\")",
        "minimizedStringLength(s = \"frodo\")",
        "minimizedStringLength(s = \"fhjfhjfjhj\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [3,3,3,1,4,4,1,2], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,1,4,2,7,1,2,1,2,1], k = 3)",
        "longestEqualSubarray(nums = [0, 1, 1, 1, 0, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [2, 1, 1, 2, 3, 3, 2, 3, 1, 1, 2, 2, 3], k = 2)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 2], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1, 3], [2, 2], [2, 1], [4, 1], [3, 3]])",
        "colorTheArray(n = 5, queries = [[1, 3], [2, 1], [4, 2], [3, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [3, 2], [1, 1], [3, 1]])",
        "colorTheArray(n = 5, queries = [[1,1], [1,2], [2,3], [2,3], [3,3]])",
        "colorTheArray(n = 5, queries = [[3, 2], [1, 1], [2, 0], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[2, 1], [2, 1], [3, 2], [1, 3], [5, 2]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9,10])",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4,3,5,3,4,4])",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 15, 12, 24, 35, 23, 0, 40])",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 5, 6, 7], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [150, 150, 100, 150, 200])",
        "numberOfEmployeesWhoMetTarget(hours = [1,1,3], target = 1000)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [11, 12, 13, 14, 15, 16, 17, 18])",
        "countBeautifulPairs(nums = [1, 1, 2, 2, 2])",
        "countBeautifulPairs(nums = [7, 5, 6, 4])",
        "countBeautifulPairs(nums = [12, 4, 16, 2, 10])",
        "countBeautifulPairs(nums = [20, 30, 45, 50, 60])",
        "countBeautifulPairs(nums = [12, 121, 1221, 1212, 12])",
        "countBeautifulPairs(nums = [21, 11, 23, 12, 56])",
        "countBeautifulPairs(nums = [110, 32, 4, 42])",
        "countBeautifulPairs(nums = [456, 123, 999, 786, 561])",
        "countBeautifulPairs(nums = [22, 101, 200, 55, 19])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [1, 3, 5, 6])",
        "countWays(nums = [5, 4, 3])",
        "countWays(nums = [1, 5, 7])",
        "countWays(nums = [1, 1, 3, 3, 5])",
        "countWays([3, 3, 4])",
        "countWays(nums = [1, 3, 2, 7, 5, 4])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = \"1001010\")",
        "maximumOddBinaryNumber(s = \"0000\")",
        "maximumOddBinaryNumber(s = \"00101010\")",
        "maximumOddBinaryNumber(s
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3], k = 0)",
        "maximumBeauty(nums = [1,2,3], k = 1)",
        "maximumBeauty(nums = [1,2,2,1], k = 0)",
        "maximumBeauty(nums = [1, 3, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [3, 2, 2, 5], k = 2)",
        "maximumBeauty(nums = [5, 2, 4, 1, 3], k = 2)",
        "maximumBeauty(nums = [2, 1, 4, 5, 3], k = 1)",
        "maximumBeauty(nums = [3, 4, 6, 9, 10], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 5, 10, 10], k = 3)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 0, 0, 0])",
        "maximumTripletValue(nums = [1, 1, 2])",
        "maximumTripletValue(nums = [2, 2, 2, 2])",
        "maximumTripletValue(nums = [-1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [-1,0,-1])",
        "maximumTripletValue(nums = [2, 1, 4, 5, 3])",
        "maximumTripletValue(nums = [-2, 4, -3, 1, 3])",
        "maximumTripletValue([-10, 1, -2, 2, 10])"
    ],
    "sample_98": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 1, 4], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 2)",
        "maximumJumps(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], target = 2)",
        "maximumJumps(nums = [10, 11, 12], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 5], target = 1)",
        "maximumJumps(nums = [1, 3, 0, 5, 3, 6, 1, 3], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 3, 4, 2, 3, 5], target = 3)",
        "maximumJumps(nums = [3, 2, 1, 5, 2], target = 3)",
        "maximumJumps(nums = [2, 4, 2, 2, 2, 1, 4, 2, 4, 2], target = 2)"
    ],
    "sample_149": [
        "finalString(s = \"rtisng\")",
        "finalString(s = \"rtsign\")",
        "finalString(s = \"trting\")",
        "finalString(s = 'rtsni')",
        "finalString(s = \"rsntg\")",
        "finalString(s = \"nitrots\")",
        "finalString(s = \"lcrtsng\")",
        "finalString(s = \"tnginirts\")",
        "finalString(s = \"tsetnitrops\")",
        "finalString(s = \"scish\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 1, 1, 2, 1])",
        "continuousSubarrays(A = [2, 4, 3, 1, 5])",
        "continuousSubarrays(A = [1, 2, 2, 3, 3, 3, 3, 4])",
        "continuousSubarrays(A = [0,1,0,1,0])",
        "continuousSubarrays(A = [0,1,0,1,1,0,1])",
        "continuousSubarrays(A = [1, 2, 3, 1, 4, 5, 4])",
        "continuousSubarrays([2, 2, 2, 3, 4, 4, 4, 4, 4])",
        "continuousSubarrays([3,1,3,4,5,3,1])",
        "continuousSubarrays([1,2,1,2,3,4,3,2,3])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 1, 1, 2, 2, 1, 1, 2, 3, 2])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,2,1,1])",
        "countCompleteSubarrays(nums = [1, 3, 4, 1, 3, 4, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1, 3, 2, 2, 2, 1, 4, 4, 2])",
        "countCompleteSubarrays(nums = [1, 3, 3, 2, 2, 4, 5, 1, 5, 2])"
    ],
    "sample_228": [
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays(nums = [2,4,6])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [1,3,5,4,2])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1,4,6])",
        "countWays(nums = [1,3,4,7])",
        "countWays(nums = [0, 2, 4, 4])",
        "countWays(nums = [0, 3, 4, 6, 7, 8])",
        "countWays(nums = [4,4,6,10,12])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [4, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 1, 3, 2, 5], k = 2)",
        "maximumBeauty(nums = [2, 1, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1,2,2,3,4,5,6,7,8,9], k = 2)",
        "maximumBeauty(nums = [7,4,2,1,5], k = 2)",
        "maximumBeauty(nums = [4, 5, 5, 8, 2, 1, 0], k = 2)",
        "maximumBeauty(nums = [1, 3, 10, 1, 7, 9, 7, 11], k = 5)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1,2,3,4,5])",
        "distinctDifferenceArray(a = [1, 1, 1, 1, 1])",
        "distinctDifferenceArray(a = [1, 1, 1, 2, 3])",
        "distinctDifferenceArray(a = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(a = [1,1,3,3,5,5])",
        "distinctDifferenceArray(a = [1, 2, 2, 2, 3])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 4, 4, 4, 5, 5])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1,2,2,2,1])",
        "continuousSubarrays([1,1,1,1,1])",
        "continuousSubarrays(a = [0, 1, 2, 3, 4])",
        "continuousSubarrays(a = [0, 0, 1, 1, 0, 1, 0])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9,10,11,12,13])",
        "continuousSubarrays(a = [0, 0, 1, 2, 2])",
        "continuousSubarrays(a = [1, 2, 1, 3, 1, 1, 4])",
        "continuousSubarrays(a = [4,5,2,7,8,1,3,4])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 1])",
        "continuousSubarrays(nums = [3, 1, 2, 4, 3])",
        "continuousSubarrays(nums = [2,3,1,2,4,3])",
        "continuousSubarrays(nums = [1,2,3,1,2,3,1])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "continuousSubarrays(nums = [1,2,3,4,5,3,2,1])",
        "continuousSubarrays([1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(nums = [2, 2, 3, 3, 3, 3, 4])",
        "continuousSubarrays(nums = [1, 1, 1, 3, 2, 1, 3, 1, 1, 1, 2, 1, 2, 1, 1])",
        "continuousSubarrays(nums = [2, 5, 2, 7, 4, 3, 1, 2, 5, 2, 7, 4, 3, 1])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [1,2,3])",
        "countBeautifulPairs(nums = [12, 13, 14])",
        "countBeautifulPairs(nums = [2,1,4,3])",
        "countBeautifulPairs(nums = [23, 5, 6])",
        "countBeautifulPairs(nums = [1, 1, 1, 1, 2, 2, 2, 3])",
        "countBeautifulPairs(nums = [17, 4, 3, 2])",
        "countBeautifulPairs(nums = [23, 12, 9, 87])",
        "countBeautifulPairs([12, 17, 23, 10])",
        "countBeautifulPairs(nums = [1, 4, 6, 9, 8, 6, 2, 1, 9])",
        "countBeautifulPairs([21, 13, 23, 3, 45, 17, 8])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation([1,2,3,4])",
        "semiOrderedPermutation(nums=[1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8])",
        "semiOrderedPermutation(nums = [2,4,1,3])",
        "semiOrderedPermutation(nums = [1,5,3,2,4])",
        "semiOrderedPermutation([1,3,5,2,4])",
        "semiOrderedPermutation([1,2,3,4,5,6])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3])",
        "semiOrderedPermutation(nums=[3,1,2])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4])",
        "semiOrderedPermutation(nums = [2, 3, 5, 1, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [5, 3, 7, 9, 2])",
        "semiOrderedPermutation(nums = [5, 4, 6, 3, 7, 8, 1, 2])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 2, 2, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 0, 1, 0, 0, 1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"0101\")",
        "maximumOddBinaryNumber(s = \"0010\")",
        "maximumOddBinaryNumber(s = \"010110\")",
        "maximumOddBinaryNumber(s = '00100')",
        "maximumOddBinaryNumber(s = '10011')",
        "maximumOddBinaryNumber(s = '001001')",
        "maximumOddBinaryNumber(s = \"100001\")",
        "maximumOddBinaryNumber(s = \"011011\")",
        "maximumOddBinaryNumber(s = \"101010010\")",
        "maximumOddBinaryNumber(s
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1,1,2,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2])",
        "countCompleteSubarrays(nums = [1,1,2,2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 4])",
        "countCompleteSubarrays(nums = [0,0,0,0,1,1,1])"
    ],
    "sample_23": [
        "minLength(s = \"ABABCDABAB\")",
        "minLength(s = \"ABABCDCDAB\")",
        "minLength(s = \"ABCABC\")",
        "minLength(s=\"ABABCD\")",
        "minLength(s = \"ABABABCDCD\")",
        "minLength(s = \"CDABABCD\")",
        "minLength(s = \"ABABC\")",
        "minLength(s = \"ABABCDCDABABCDAB\")",
        "minLength(s = \"CDCDCDABCD\")",
        "minLength(s=\"ABCDCDABCABCDABCABCD\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [2,2,1,1,1,2,2])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,1,2,3])",
        "countCompleteSubarrays(nums = [3, 3, 4, 3, 4, 3, 1, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 2, 3, 3, 1, 1, 2, 3])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 5)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 1, num2 = 3)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6], target = 2)",
        "maximumJumps(nums = [4, 2, 3, 5, 1], target = 1)",
        "maximumJumps(nums = [3, 4, 2, 1], target = 1)",
        "maximumJumps(nums = [0, 1, 2, 3, 4, 5, 6], target = 1)",
        "maximumJumps(nums = [2, 3, 0, 1, 4], target = 1)",
        "maximumJumps(nums = [10, 1, 2, 7, 1, 3], target = 5)",
        "maximumJumps(nums = [3, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [5, 3, 3, 1, 2, 4], target = 1)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 6, 7])",
        "maxIncreasingGroups(x = [2, 1, 1, 2])",
        "maxIncreasingGroups(x = [5, 3, 1, 4, 2])",
        "maxIncreasingGroups(x = [4, 2, 5, 1, 3, 8])",
        "maxIncreasingGroups(x = [2, 5, 1, 2, 6, 5, 6])",
        "maxIncreasingGroups(x = [2,10,4,8,12])",
        "maxIncreasingGroups(x = [2, 4, 7, 8, 10, 12, 16, 19])",
        "maxIncreasingGroups([1,2,4,3,5,6,8])",
        "maxIncreasingGroups(x = [5, 4, 1, 5, 2, 1, 6])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLLRRRRR_\")",
        "furthestDistanceFromOrigin(moves = \"LRLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"R_LLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLR_R_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"L_LL_LL__\")",
        "furthestDistanceFromOrigin(moves = \"L____RRRR__\")",
        "furthestDistanceFromOrigin(moves = 'LRLRLRLRRLLLLL')",
        "furthestDistanceFromOrigin(moves = \"L_R_RRL_LRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRLRLRLR_RLRLR_L_R_\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"10110\")",
        "maximumOddBinaryNumber(s = \"10001\")",
        "maximumOddBinaryNumber(s = \"001001\")",
        "maximumOddBinaryNumber(s = \"011001\")",
        "maximumOddBinaryNumber(s = \"111000\")",
        "maximumOddBinaryNumber(s = \"1001001\")",
        "maximumOddBinaryNumber(s = \"010101010101010101\")",
        "maximumOddBinaryNumber(s = \"10010100101010\")"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0, 0], [0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1],[1, 0]])",
        "colorTheArray(n = 5, queries = [[1,1],[3,0]])",
        "colorTheArray(n = 10, queries = [[2, 0], [3, 1]])",
        "colorTheArray(n = 5, queries = [[0,0],[0,1],[1,0],[1,1],[1,0]])",
        "colorTheArray(n = 5, queries = [[3,1],[0,0],[4,1]])",
        "colorTheArray(n = 5, queries = [\n    [0,1],\n    [1,1],\n    [1,0],\n    [3,0],\n    [3,1]\n])",
        "colorTheArray(n=5, queries=[[0, 0], [1, 0], [3, 1], [1, 0], [4, 0]])",
        "colorTheArray(n = 6, queries = [[3, 2], [1, 1], [0, 2], [4, 1]])",
        "colorTheArray(n = 6, queries = [[0, 0], [3, 1], [1, 1], [5, 0], [1, 0], [4, 1], [4, 0], [3, 1]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1])",
        "findValueOfPartition(nums = [1])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [0, 1])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 2, 2, 1])",
        "findValueOfPartition(nums = [1, 2, 4, 8])",
        "findValueOfPartition(nums = [1, 4, 4])",
        "findValueOfPartition(nums = [4, 4, 5])",
        "findValueOfPartition(nums = [4, 2, 6])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1])",
        "numberOfGoodSubarraySplits([0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,1,0])",
        "numberOfGoodSubarraySplits([0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,1,1,0,1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1,2,2,2,3])",
        "minimumIndex(nums = [1,2,2,1,1])",
        "minimumIndex(nums = [2,2,3,2])",
        "minimumIndex(nums = [1,2,1,3,4])",
        "minimumIndex(nums = [1, 3, 2, 2, 3])",
        "minimumIndex(nums = [1,2,2,3,3,4,5])",
        "minimumIndex([1,2,2,2,3,4,5])",
        "minimumIndex(nums = [2,2,1,4,2,2])",
        "minimumIndex([2,2,4,4,5,5])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 5, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 6, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 1, 9, 100], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 0, 3, 4, 5, 12], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 3, 5], [3, 4, 2]])",
        "maximizeTheProfit(n = 3, offers = [(1, 2, 3), (2, 3, 2), (3, 4, 5)])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 4], [5, 6, 10], [7, 8, 1]])",
        "maximizeTheProfit(n = 3, offers = [[2,3,1],[4,5,1],[6,7,1]])",
        "maximizeTheProfit(n = 2, offers = [[1, 3, 2], [5, 7, 6]])",
        "maximizeTheProfit(n = 2, offers = [(2, 4, 1), (3, 4, 2)])",
        "maximizeTheProfit(n = 3, offers = [(1, 2, 1), (10, 20, 3), (30, 40, 4)])",
        "maximizeTheProfit(n = 10, offers = [[2, 3, 5], [8, 9, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 4], [1, 3, 4], [2, 3, 5], [4, 5, 6], [5, 7, 6]])",
        "maximizeTheProfit(n = 5, offers = [[3, 7, 1], [4, 10, 5], [10, 12, 6], [2, 5, 3], [2, 7, 4]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"001\")",
        "minimumOperations(num = \"10\")",
        "minimumOperations(num = \"110\")",
        "minimumOperations(num = \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"12300\")",
        "minimumOperations(num = \"0001000\")",
        "minimumOperations(num = \"123003\")",
        "minimumOperations(num = \"21210\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"00002\")",
        "minimumOperations(num = \"0500\")",
        "minimumOperations(num = \"262\")",
        "minimumOperations(num = \"7450\")",
        "minimumOperations(num = \"20055\")",
        "minimumOperations(num = '21005')",
        "minimumOperations(num = \"220150\")",
        "minimumOperations(num = \"012500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"2520252025202520\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 3, offers = [[1,1,3],[2,1,2],[3,1,3]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,5],[3,4,10]])",
        "maximizeTheProfit(n = 3, offers = [[2,3,5],[1,2,10],[3,1,2]])",
        "maximizeTheProfit(n=4,offers=[[2,1,1],[2,1,2],[3,1,2]])",
        "maximizeTheProfit(n = 5, offers = [[2,5,10],[1,3,10],[2,3,6]])",
        "maximizeTheProfit(n = 3, offers = [[2,5,3], [1,2,1], [3,4,2]])",
        "maximizeTheProfit(n=5,offers = [[1, 2, 10],[2, 2, 9],[3, 3, 8]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [3, 4, 2], [2, 3, 1], [3, 4, 3], [5, 6, 1]])",
        "maximizeTheProfit(n=5, offers=[[4,2,20],[2,4,15],[3,3,10],[1,4,10],[5,2,5]])",
        "maximizeTheProfit(n = 6, offers = [[1,5,60],[2,5,100],[3,5,200],[4,5,400],[5,5,500],[6,5,500]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 3, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 4, 3, 2], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 1, 3, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 8, 10, 12, 14], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 4, 6, 9, 2, 5, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [4, 5, 2, 7, 10, 5, 8], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 6, 8, 9, 10, 2, 3, 4], threshold = 6)"
    ],
    "sample_203": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"00000\")",
        "minimumOperations(num = \"000000\")",
        "minimumOperations(num = \"000000\")",
        "minimumOperations(num = \"007\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = '0025')",
        "minimumOperations(num = \"12300\")",
        "minimumOperations(num = '1')"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [3, 1], [4, 0], [5, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 0], [3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[2, 1], [1, 2], [2, 2], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 1], [1, 0], [1, 0], [2, 1]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 1], [1, 2], [3, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 2], [1, 1], [2, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 1], [5, 1], [1, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[2, 0], [3, 1], [5, 1], [4, 0], [3, 0]])",
        "colorTheArray(n = 5, queries = [\n    [1, 2], [1, 1], [2, 2], [1, 0], [3, 1], [2, 0]\n])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 2, 1])",
        "minimumIndex(nums = [1, 2, 2, 3, 1])",
        "minimumIndex(nums = [1,2,1,2,1,2])",
        "minimumIndex(nums = [1, 2, 1, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 1, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 1, 2, 2, 1, 2])",
        "minimumIndex(nums = [5, 5, 5, 5, 4])",
        "minimumIndex(nums = [1, 2, 3, 1, 4, 1, 1])",
        "minimumIndex(nums = [5,5,5,4,3,2,1,2,2,2,3,3,5])"
    ],
    "sample_102": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 1, 1], target = 1)",
        "maximumJumps(nums = [0,1,2,3,4,5,6,7], target = 3)",
        "maximumJumps(nums = [0, 1, 3, 5, 6], target = 2)",
        "maximumJumps(nums = [3, 3, 3, 2, 2, 1, 1], target = 1)",
        "maximumJumps(nums = [-1, 4, 5, 3], target = 3)",
        "maximumJumps(nums = [1,3,0,0,0,1], target = 1)",
        "maximumJumps(nums = [5, -2, 2, -3], target = 2)",
        "maximumJumps(nums = [1, 2, 4, 5, 3, 7, 9, 8], target = 1)",
        "maximumJumps(nums = [-1000, -500, -50, -51, -52, -53], target = 5)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = \"012301\")"
    ],
    "sample_57": [
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 10, b = 1)",
        "distanceTraveled(a = 6, b = 1)",
        "distanceTraveled(a = 3, b = 3)",
        "distanceTraveled(a = 7, b = 2)",
        "distanceTraveled(a = 1, b = 3)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5, 6])",
        "findValueOfPartition(a = [0, 1])",
        "findValueOfPartition(a = [1, 2, 4, 3])",
        "findValueOfPartition([1, 0, 1])",
        "findValueOfPartition(a = [1, 1, 3, 5, 6])",
        "findValueOfPartition(a = [1, 5, 3, 6, 2, 7])",
        "findValueOfPartition(a = [5, 9, 1, 7, 13, 2])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [2, 3, 1, 5, 6])",
        "distinctDifferenceArray(nums = [2, 1, 1, 4, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 1, 4, 2])",
        "distinctDifferenceArray([1,2,1,3,1,2])",
        "distinctDifferenceArray(nums = [0, 1, 2, 2, 1, 2, 0, 3])",
        "distinctDifferenceArray(nums = [2, 1, 5, 1, 3, 3, 4])"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 1, 1, 2, 2, 3])",
        "minimumIndex(nums = [1, 1, 1, 2])",
        "minimumIndex(nums = [1, 2, 1, 3, 2])",
        "minimumIndex(nums = [2, 3, 2, 1])",
        "minimumIndex(nums = [4, 4, 2, 2, 2])",
        "minimumIndex(nums = [1,2,2,2,2,2])",
        "minimumIndex(nums = [3, 1, 4, 4, 2])",
        "minimumIndex([1, 2, 2, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [4, 6, 5, 6, 4, 1, 5])",
        "minimumIndex([1, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 5, 6, 7, 7, 7])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLR\")",
        "furthestDistanceFromOrigin(\"RLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLRLLRRLR\")",
        "furthestDistanceFromOrigin(\"LRLRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLLRLLLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLLRRRRRR\")",
        "furthestDistanceFromOrigin(moves=\"LRRRLLLLRRRL\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abcd\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abba\")",
        "minimizedStringLength(s = \"abcb\")",
        "minimizedStringLength(s = \"abccd\")",
        "minimizedStringLength(s = \"aabccde\")",
        "minimizedStringLength(\"aaabbbcccc\")",
        "minimizedStringLength(s = \"bbbaaabbb\")",
        "minimizedStringLength(s = \"dogcatdogcatcat\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 4)",
        "checkArray(nums = [3, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 5)",
        "checkArray(nums = [2, 3, 4, 6], k = 2)",
        "checkArray(nums = [2, 3, 5, 7], k = 2)",
        "checkArray(nums = [1, 2, 3, 3, 2], k = 3)",
        "checkArray(nums = [5, 2, 4, 7, 10, 3, 1], k = 3)",
        "checkArray(nums = [3, 4, 3, 2, 1, 1, 2, 1, 3, 3, 1], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups([1, 1, 2, 3])",
        "maxIncreasingGroups(count = [10, 11, 12, 13, 14, 15])",
        "maxIncreasingGroups(usageLimits = [4, 3, 3, 5])",
        "maxIncreasingGroups(usageLimits = [6, 10, 3])",
        "maxIncreasingGroups(count = [2, 4, 2, 2, 5])",
        "maxIncreasingGroups(count = [5,4,10,2])",
        "maxIncreasingGroups(count = [1, 4, 1, 3, 1, 6])",
        "maxIncreasingGroups([40, 30, 30, 30])",
        "maxIncreasingGroups(count = [120, 100, 70, 90, 100])"
    ],
    "sample_206": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = '00255075')",
        "minimumOperations(num = \"02500\")",
        "minimumOperations(\"00255075\")",
        "minimumOperations(num = '00025')",
        "minimumOperations(num = \"25050\")",
        "minimumOperations(num = \"01234567\")",
        "minimumOperations(num = \"0250007575\")",
        "minimumOperations(num = \"200005000\")",
        "minimumOperations(num = \"577525\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7])"
    ],
    "sample_38": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abccba\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"aaabb\")",
        "minimumCost(s = \"a\")",
        "minimumCost(s = \"bbaabbb\")",
        "minimumCost(s = \"abcddcba\")",
        "minimumCost(s = \"papaya\")",
        "minimumCost(s = \"bbaxxxyy\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 3, 4])",
        "maxIncreasingGroups(usageLimits = [4, 5, 6])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 6, 7])",
        "maxIncreasingGroups(usageLimits = [3, 1, 5])",
        "maxIncreasingGroups([3, 4, 2, 1])",
        "maxIncreasingGroups([2, 3, 4, 6, 7])",
        "maxIncreasingGroups(usageLimits = [3, 5, 2, 6])",
        "maxIncreasingGroups([3, 6, 5])"
    ],
    "sample_53": [
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = 'baabc')",
        "smallestString(s = \"ababc\")",
        "smallestString(s = \"aaabc\")",
        "smallestString(s = \"badc\")",
        "smallestString(s = \"baabb\")",
        "smallestString(s = \"aabcc\")",
        "smallestString(s = \"bbaaa\")",
        "smallestString(s = \"aabaabc\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4], x = 3)",
        "minAbsoluteDifference(nums = [5, 1, 3], x = 2)",
        "minAbsoluteDifference(nums = [1, 2, 3], x = 2)",
        "minAbsoluteDifference(nums = [5,1,-5], x = 2)",
        "minAbsoluteDifference(nums = [3,5,6,7], x = 2)",
        "minAbsoluteDifference(nums = [2,1,2,2,3], x = 2)",
        "minAbsoluteDifference(nums = [2,2,2,4], x = 2)",
        "minAbsoluteDifference(nums = [6, 5, 2, 1], x = 2)",
        "minAbsoluteDifference(nums = [0, 2, 5, 3, 4, 6, 1, 7, 8], x = 5)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[0, 1, 1], [1, 2, 2], [2, 3, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 2], [2, 3, 3], [3, 4, 4]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 3], [3, 4, 5], [5, 6, 7]])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 1], [1, 1, 2], [2, 2, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 2, 2], [2, 1, 3]])",
        "maximizeTheProfit(N = 2, offers = [[1, 1, 10], [2, 2, 5]])",
        "maximizeTheProfit(N = 3, offers = [[1, 5, 2], [2, 2, 1], [2, 1, 2]])",
        "maximizeTheProfit(N = 2, offers = [[0, 0, 2], [1, 1, 1], [1, 1, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 4], [2, 3, 3], [3, 5, 5], [4, 7, 2], [5, 8, 2]])",
        "maximizeTheProfit(N = 3, offers = [\n    [1, 2, 1],\n    [2, 3, 4],\n    [3, 4, 5],\n    [3, 4, 7],\n    [1, 2, 9],\n])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"abc\", \"def\"], b = \"c\")",
        "splitWordsBySeparator(a = [\"abc\", \"def\", \"ghi\", \"jkl\"], b = \"c\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\", \"orange\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"ba\", \"nana\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"aa\", \"bb\", \"cc\", \"dd\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"hello world\", \"hello there\"], b = \" \")",
        "splitWordsBySeparator(a = [\"aa aa\", \"bb bb\"], b = \" \")",
        "splitWordsBySeparator(a = [\"this\", \"is\", \"an\", \"example\"], b = \" \")",
        "splitWordsBySeparator(a = [\"pepper\", \"pepperoni\", \"pizza\"], b = \"p\")",
        "splitWordsBySeparator(a = [\"c a\",\"b a\",\"a b\",\"\"], b = \" \")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = \"5123010\")",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = \"5123010\")",
        "removeTrailingZeros(a = '51230101')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a = '5123010000000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'nevem')",
        "makeSmallestPalindrome(s = \"nevven\")",
        "makeSmallestPalindrome(s = \"ever\")",
        "makeSmallestPalindrome(s = \"nneve\")",
        "makeSmallestPalindrome(s = \"eveemn\")",
        "makeSmallestPalindrome(s = \"aa\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [2,3,1,2,4,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 5, 6, 7, 8, 9, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 2, 3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 5, 6, 4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 4, 1, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 1, 1, 3, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,2,1,4,3], k = 1)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [2, 3, 1, 5, 4], k = 1)",
        "maximumBeauty(nums = [1, 3, 4, 2, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 1, 1, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6, 7, 8], k = 3)",
        "maximumBeauty(nums = [2, 3, 2, 3], k = 0)",
        "maximumBeauty(nums = [4,3,2,1,5], k = 3)",
        "maximumBeauty(nums = [3,2,3], k = 3)",
        "maximumBeauty(nums = [2, 5, 3, 1, 4, 2], k = 2)",
        "maximumBeauty(nums = [7, 4, 5, 3, 4, 6], k = 1)",
        "maximumBeauty(nums = [5, 2, 2, 3, 2, 5, 2, 2, 2, 2], k = 2)"
    ],
    "sample_163": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [-1, 2])",
        "maxSum(nums = [123, 456])",
        "maxSum(nums = [10, 20, 30, 40])",
        "maxSum(nums = [200, 100])",
        "maxSum([1,3,1])",
        "maxSum(nums = [321, 341])",
        "maxSum(nums = [3, 3, 3, 2, 2, 2, 1, 1, 1, 1])",
        "maxSum(nums = [-1, 2, -3, 4, 3, -5])",
        "maxSum(nums = [12, 10, 4, 1, 7, 14, 3])"
    ],
    "sample_151": [
        "finalString(s = \"rtisng\")",
        "finalString(s = \"rtsni\")",
        "finalString(s = \"trings\")",
        "finalString(s = \"hello\")",
        "finalString(s = \"ngirts\")",
        "finalString(s = \"trstng\")",
        "finalString(s = 'tgnirtssi')",
        "finalString(s = \"tipsing\")",
        "finalString(s = \"tng is i\")",
        "finalString(s = 'teegnir')"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"11000000\")"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = \"0010\")",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = \"01010\")",
        "maximumOddBinaryNumber(s = \"101010\")",
        "maximumOddBinaryNumber(s = '0111')",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"0001111\")",
        "maximumOddBinaryNumber(s = \"10111010\")",
        "maximumOddBinaryNumber(s = \"001000011\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = \"easy problem\", separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easyproblem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easyproblem\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easyproblem'], separator = 'p')",
        "splitWordsBySeparator(words = ['easyproblem'], separator = 'p')",
        "splitWordsBySeparator(words = ['easy problem'], separator = ' ')",
        "splitWordsBySeparator(words = \"easy_problem\", separator = \"_\")",
        "splitWordsBySeparator(words = [\"easyproblem\", \" \"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easyproblem\", \"is\", \"good\"], separator = \" \")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,4,5], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4], K = 1)",
        "longestEqualSubarray(A = [1, 2, 2, 2, 1], K = 1)",
        "longestEqualSubarray(A = [1,1,1,1,2,2,2,2], K = 2)",
        "longestEqualSubarray(A = [1, 2, 2, 3, 1, 4, 2, 3, 2], K = 3)",
        "longestEqualSubarray(A = [3,3,3,3,5], K = 2)",
        "longestEqualSubarray(A = [1,2,1,2,4,2,1,4,2,1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,3,4,3,4,3,4,4], K = 2)",
        "longestEqualSubarray(A = [2, 1, 3, 3, 1, 4, 2, 5], K = 2)",
        "longestEqualSubarray(A = [1,1,2,1,2,2,2,1,1,1,1,1], K = 4)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2])",
        "countWays(nums = [5, 4, 3, 2, 1])",
        "countWays(nums = [3, 5, 2])",
        "countWays(nums = [2, 1, 2, 3])",
        "countWays(nums = [2, 3, 1, 2])",
        "countWays(nums = [2, 4, 8])",
        "countWays(nums = [5, 2, 3, 1])",
        "countWays(nums = [3, 1, 1, 1, 0])",
        "countWays(nums = [2, 3, 7, 8, 11])",
        "countWays([6, 1, 2, 7, 8])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,2,1], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [7, 3, 4, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 1, 2, 2], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 3, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 1, 8, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 1, 2, 5, 3, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 10, 4, 11, 5, 6, 3, 7], k = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"Python\", \"Programming\", \"Language\"], s = \"PPL\")",
        "isAcronym(words = [\"ab\"], s = \"ba\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bird\"], s = \"cb\")",
        "isAcronym(words = [\"Apple\", \"Orange\"], s = \"PO\")",
        "isAcronym(words = [\"Northern\", \"Arizona\", \"University\"], s = \"NAU\")",
        "isAcronym(words = [\"Python\", \"List\", \"Function\"], s = \"PLF\")",
        "isAcronym(words = [\"gree\", \"national\", \"board\", \"for\", \"higher\", \"education\"], s = \"gnbhe\")",
        "isAcronym(words = [\"girl\", \"boy\", \"friend\"], s = \"girls\")",
        "isAcronym(words = [\"I\", \"am\", \"so\", \"cool\"], s = \"1amsc\")",
        "isAcronym(words = [\"Jam\", \"a\"], s = \"J\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,1,1,2,2,2])",
        "countCompleteSubarrays(nums = [1,1,2,3,4])",
        "countCompleteSubarrays(nums = [2, 2, 4, 2])",
        "countCompleteSubarrays(nums = [3, 4, 3, 4, 2])",
        "countCompleteSubarrays(nums = [1,1,2,2,1,1,3])",
        "countCompleteSubarrays(nums = [2,2,1,5,6,2,4])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 5, target = 6)",
        "minimumPossibleSum(n = 10, target = 1)",
        "minimumPossibleSum(n = 7, target = 9)",
        "minimumPossibleSum(n = 12, target = 20)"
    ],
    "sample_147": [
        "finalString(s = \"rtsnig\")",
        "finalString(s = \"rtsn\")",
        "finalString(s = \"olleh\")",
        "finalString(s = \"ngitsr\")",
        "finalString(s = \"tintin\")",
        "finalString(s = \"potsgnirt\")",
        "finalString(s = \"inst\")",
        "finalString(s = \"reting\")",
        "finalString(s = \"tininsg\")",
        "finalString(s = \"eggnoggin\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"evnen\")",
        "makeSmallestPalindrome(s = \"vene\")",
        "makeSmallestPalindrome(s = \"aveen\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 3, 3], [3, 4, 3], [4, 5, 1], [5, 6, 2]])",
        "maximizeTheProfit(n = 5, offers = [[3, 1, 5], [2, 2, 10], [1, 3, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[3,4,10],[4,5,5],[5,6,6]])",
        "maximizeTheProfit(n = 3, offers = [[2, 3, 1], [3, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,5], [2,3,7], [3,4,6]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 2], [2, 3, 1], [4, 4, 1], [5, 6, 2]])",
        "maximizeTheProfit(n = 5, offers = [[4, 1, 2], [5, 1, 5], [3, 3, 1]])",
        "maximizeTheProfit(n = 5, offers = [[4, 5, 3], [5, 6, 8], [2, 3, 5], [1, 4, 6], [3, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 10], [4, 3, 7], [5, 10, 1], [10, 10, 0]])",
        "maximizeTheProfit(n = 4, offers = [[3, 1, 9], [4, 3, 6], [5, 4, 11], [3, 3, 12]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 1)",
        "maximumJumps(nums = [2, 1, 2], target = 2)",
        "maximumJumps(nums = [0,1,2], target = 2)",
        "maximumJumps(nums = [0, 1, 3, 4, 5, 6], target = 1)",
        "maximumJumps(nums = [3,0,1,2,1,3], target = 3)",
        "maximumJumps(nums = [3, 1, 0, 2, 3, 1], target = 2)",
        "maximumJumps(nums = [10, 12, 9, 9, 9, 9, 11, 15], target = 1)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,2])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = \"0100\")",
        "maximumOddBinaryNumber(s = '1000')",
        "maximumOddBinaryNumber(s = \"010110\")",
        "maximumOddBinaryNumber(s = \"000110\")",
        "maximumOddBinaryNumber(s = '1001111')"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 6, k = 2)",
        "minimumSum(n = 2, k = 10)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 7, k = 2)",
        "minimumSum(n = 10, k = 13)",
        "minimumSum(n = 2, k = 20)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 4)",
        "makeTheIntegerZero(num1 = 16, num2 = 3)",
        "makeTheIntegerZero(num1 = 16, num2 = 4)",
        "makeTheIntegerZero(num1 = 17, num2 = 10)",
        "makeTheIntegerZero(num1 = 25, num2 = 7)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 3, target = 9)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 1], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 1, 0], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 0], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,1,1,0], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 0, 3, 4], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums = [3, 4, 1, 5, 3], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 2, 5, 0, 6, 4, 9], modulo = 10, k = 3)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 2, 3, 3], k = 1)",
        "maximumBeauty(nums = [2, 3, 5, 1], k = 2)",
        "maximumBeauty(nums = [2, 2, 3, 3], k = 1)",
        "maximumBeauty(nums = [1,2,2,3,3], k = 0)",
        "maximumBeauty(nums = [3, 1, 5], k = 3)",
        "maximumBeauty(nums = [1, 5, 3, 1, 1], k = 2)",
        "maximumBeauty(nums = [1,3,7], k = 4)",
        "maximumBeauty(nums = [4, 2, 1, 8, 4, 3], k = 2)"
    ],
    "sample_148": [
        "finalString(s = \"terpont\")",
        "finalString(s = \"terpont\")",
        "finalString(s = \"ponter\")",
        "finalString(s = \"potner\")",
        "finalString(s = 'onetwothree')",
        "finalString(s = \"hello world\")",
        "finalString(s = \"proter\")",
        "finalString(s = \"openterrpo\")",
        "finalString(s = \"xerto\")",
        "finalString(s = \"healers\")"
    ],
    "sample_231": [
        "countWays(nums = [0, 2, 3])",
        "countWays(nums = [1, 3, 5, 6])",
        "countWays(nums = [0, 2, 4])",
        "countWays(nums = [0, 3, 4, 5])",
        "countWays(nums = [1, 1, 2, 2])",
        "countWays([0, 2, 3, 4])",
        "countWays(nums = [0, 4, 1, 2, 3])",
        "countWays(nums = [1, 3, 0, 5])",
        "countWays(nums = [1, 4, 6, 9])",
        "countWays(nums = [0, 3, 5, 7, 9, 11, 13, 17, 19, 23])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [1,2,3])",
        "countBeautifulPairs(nums = [1,2,3])",
        "countBeautifulPairs(nums = [12, 28, 46, 32])",
        "countBeautifulPairs(nums = [2,5,3,7])",
        "countBeautifulPairs(nums=[2,1,2,3])",
        "countBeautifulPairs(nums = [1, 12, 10])",
        "countBeautifulPairs(nums = [10, 3, 2, 7, 4])",
        "countBeautifulPairs(nums = [1,17,5,15])",
        "countBeautifulPairs(nums = [342,23,12,4,3])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 4)",
        "makeTheIntegerZero(num1 = 17, num2 = 5)",
        "makeTheIntegerZero(num1 = 18, num2 = 2)",
        "makeTheIntegerZero(num1 = 48, num2 = 2)",
        "makeTheIntegerZero(num1 = 20, num2 = 11)",
        "makeTheIntegerZero(num1 = 12, num2 = 14)",
        "makeTheIntegerZero(num1 = 61, num2 = 4)",
        "makeTheIntegerZero(num1 = 73, num2 = 20)",
        "makeTheIntegerZero(num1 = 1893, num2 = 129)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"Neven\")",
        "makeSmallestPalindrome(s = \"evan\")",
        "makeSmallestPalindrome(s = \"nene\")",
        "makeSmallestPalindrome(s = \"eveNe\")",
        "makeSmallestPalindrome(s = \"enen\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"ABC\")",
        "isAcronym(words = [\"ab\", \"cd\"], s = \"abcd\")",
        "isAcronym(words = [\"happy\", \"birthday\", \"to\", \"you\"], s = \"HBDTY\")",
        "isAcronym(words = [\"I\", \"Love\", \"CS\"], s = \"ILCS\")",
        "isAcronym(words = [\"google\", \"yahoo\", \"wikipedia\"], s = \"GYW\")",
        "isAcronym(words = [\"I\", \"will\", \"be\", \"your\", \"teacher\"], s = \"IWBYT\")",
        "isAcronym(words = [\"J.K\", \"Rolling\", \"Stones\"], s = \"JKRS\")",
        "isAcronym(words = ['us', 'united', 'states'], s = 'uus')",
        "isAcronym(words = [\"h\", \"a\", \"s\", \"p\", \"o\", \"n\"], s = \"haspon\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 1, 1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [7, 11, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 8, 15, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 10, 20, 1, 100], k = 3)"
    ],
    "sample_174": [
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 10, k = 4)",
        "minimumSum(n = 6, k = 4)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 2)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [0, 2, 5, 10])",
        "countWays(nums = [0, 2, 3, 5, 6, 7])",
        "countWays(nums = [1, 3, 5, 7, 9, -100, 100])",
        "countWays(nums = [4, 4, 4, 4, 2, 2, 1, 1])",
        "countWays(nums = [-1, -2, -3, -1, -2, -3, 3, 2, 1])",
        "countWays(nums = [2, 3, -2, 0, 1, -1, 5])",
        "countWays(nums = [-1, 2, 3, 5, 9, 10, 10, 20, 25, 30])",
        "countWays(nums = [0, 2, 3, 5, 6, 7, 10, 10, 10, 10, 11])",
        "countWays(nums = [-10, -1, -3, -4, -5, 5, 6, 10, 12, 19])"
    ],
    "sample_39": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abccba\")",
        "minimumCost(s = \"abcabc\")",
        "minimumCost(s = \"abcbc\")",
        "minimumCost(s = \"bb\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"bbac\")",
        "minimumCost(s = \"dabdab\")",
        "minimumCost(s = \"adxzdb\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = '___RL')",
        "furthestDistanceFromOrigin(moves = \"_R_RRL\")",
        "furthestDistanceFromOrigin(moves = 'LRRRLRLR')",
        "furthestDistanceFromOrigin(moves = \"____L__R__R\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLLRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"_LLRRRR_RRR\")",
        "furthestDistanceFromOrigin(moves = '___________L_L_L_L_LLLL_LLLLLLL_LLLLLL_LLLLLLLLLLLLLLLLL')"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 1)",
        "distanceTraveled(mainTank = 20, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 12, additionalTank = 1)",
        "distanceTraveled(mainTank = 19, additionalTank = 0)",
        "distanceTraveled(mainTank = 50, additionalTank = 5)",
        "distanceTraveled(mainTank = 30, additionalTank = 10)",
        "distanceTraveled(mainTank = 80, additionalTank = 5)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 3, 4, 2])",
        "countCompleteSubarrays(nums = [0, 1, 0, 0, 1, 0, 0, 0])",
        "countCompleteSubarrays(nums = [2, 1, 2, 4, 3, 2, 3, 2, 1])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,4,3], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 6, 4, 1], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 5, 3, 2, 1, 3, 6, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,3,5,5,8,1,0,1,2,2,0,1,1,1,0,1,2,2,0,0], threshold = 10)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 5], [10, 20], [1, 6], [16, 19], [5, 11]])",
        "numberOfPoints(nums = [[1, 3], [2, 6]])",
        "numberOfPoints(nums = [[1, 2], [4, 5]])",
        "numberOfPoints(nums = [[2, 5], [4, 7]])",
        "numberOfPoints(nums = [[1, 5], [2, 4], [6, 8]])",
        "numberOfPoints(nums = [[2, 3], [3, 5], [5, 7]])",
        "numberOfPoints(nums = [[2, 5], [2, 5], [3, 5], [5, 6]])",
        "numberOfPoints(nums = [[3, 9], [3, 9], [3, 9], [1, 7], [1, 7], [1, 7]])",
        "numberOfPoints(nums = [[2, 6], [6, 8], [2, 7], [5, 9]])",
        "numberOfPoints(nums = [[3, 10], [2, 8], [1, 9], [3, 10], [4, 5], [1, 9], [1, 2]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [11, 12, 13, 14])",
        "countBeautifulPairs(nums = [12, 28, 46, 32])",
        "countBeautifulPairs(nums = [10, 100, 1000])",
        "countBeautifulPairs([40, 20, 15, 30])",
        "countBeautifulPairs(nums = [9, 2, 3, 2, 7])",
        "countBeautifulPairs([1, 11, 5, 5])",
        "countBeautifulPairs([10, 12, 5, 99])",
        "countBeautifulPairs(nums = [13, 25, 24, 38])",
        "countBeautifulPairs(nums = [21, 4, 15, 10, 11, 3, 14])",
        "countBeautifulPairs(nums = [9, 1, 5, 8, 9, 5, 1, 5, 9, 8])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 3)",
        "longestAlternatingSubarray(nums=[1,2,3,4,5], t=3)",
        "longestAlternatingSubarray(nums = [1, 2, 3], t = 2)",
        "longestAlternatingSubarray(nums = [1,3,2,4,1], t = 2)",
        "longestAlternatingSubarray(nums = [2,3,4,1], t = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 3], t = 4)",
        "longestAlternatingSubarray(nums = [3,2,5,7,1,4], t = 4)",
        "longestAlternatingSubarray(nums = [1,1,2,3,4,5,5,6,7], t = 5)",
        "longestAlternatingSubarray(nums = [5,3,1,2,8,4], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,1,2,3,4,1,2,3,4,4], t = 4)"
    ],
    "sample_36": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"aaaabbbb\")",
        "minimumCost(s = \"xyz\")",
        "minimumCost(s = \"babac\")",
        "minimumCost(s = \"232323332322\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDEFGH\")",
        "minLength(s = \"ABABABABCD\")",
        "minLength(s = \"ABCDABABABCD\")",
        "minLength(s = \"BACDCDAB\")",
        "minLength(s = \"ABAABBCDD\")",
        "minLength(s = \"ABCDCDCDCDCDCDCDCDCDCDCD\")",
        "minLength(s = \"ABCABABABA\")",
        "minLength(s = \"CCBDCBA\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3], modulo = 10, k = 1)",
        "countInterestingSubarrays(nums = [1,2,1,2,1,2,1,2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,4], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums=[2,3,1], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [1, 3, 5, 7], modulo = 7, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 10, k=7)",
        "countInterestingSubarrays(nums = [2, 1, 3, 4, 1, 2], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1,3,5,7,1], modulo = 8, k = 4)"
    ],
    "sample_9": [
        "colorTheArray(n = 3, queries = [[0, 0], [1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 0], [2, 1]])",
        "colorTheArray(n = 2, queries = [[1, 0], [2, 1]])",
        "colorTheArray(n = 2, queries = [[1, 0], [2, 1]])",
        "colorTheArray(n = 5, queries = [[1, 0], [3, 1]])",
        "colorTheArray(n = 10, queries = [[2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [1, 1]])",
        "colorTheArray(n = 10, queries = [[5, 1], [5, 0]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 0], [0, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 0], [2, 0], [3, 0], [3, 0], [2, 0], [4, 0], [3, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [1, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "maxNonDecreasingLength(nums1 = [1, 2], nums2 = [1, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [2, 3, 1], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 5], nums2 = [3, 2, 1, 5])",
        "maxNonDecreasingLength(nums1 = [1, 4, 3, 1], nums2 = [1, 4, 3, 1])",
        "maxNonDecreasingLength(nums1 = [2, 4, 1, 3, 5], nums2 = [2, 3, 1, 3, 5])",
        "maxNonDecreasingLength(nums1 = [4, 3, 4, 1, 4], nums2 = [3, 2, 3, 4, 2])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 5, target = 1)",
        "minimumPossibleSum(n = 10, target = 20)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 1, 1])",
        "findValueOfPartition(nums = [1,1,1,1,1])",
        "findValueOfPartition(nums = [1, 1, 2])",
        "findValueOfPartition(nums = [1, 3, 6, 10, 15])",
        "findValueOfPartition(nums = [1, 2, 10])",
        "findValueOfPartition(nums = [2, 3, 6, 7])",
        "findValueOfPartition(nums = [5, 2, 4, 1])",
        "findValueOfPartition(nums = [10, 1, 1, 2, 2, 2, 3, 4, 5, 10])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = 'RLRLRLRLRL')",
        "furthestDistanceFromOrigin(moves = \"RRL_RLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"RRLR_LRL\")",
        "furthestDistanceFromOrigin(\"L_RL_RR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLLL_LL_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"RRRLR_L_R_RL\")",
        "furthestDistanceFromOrigin(moves = \"LRRRL_R_L_R_RRL\")",
        "furthestDistanceFromOrigin(\"LLLRR_LLRRLRRR\")",
        "furthestDistanceFromOrigin(\"R_L_R_R_LR_LL_R\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [1,2,2,2,1])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5])",
        "minimumIndex(nums = [3, 3, 3, 4, 5, 5])",
        "minimumIndex(nums = [1, 3, 5, 2, 2, 2, 3, 5])",
        "minimumIndex(nums = [2, 4, 6, 8, 2])",
        "minimumIndex([1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3])",
        "minimumIndex(nums = [1, 2, 1, 4, 2, 5])",
        "minimumIndex(nums = [1, 2, 2, 2, 2, 2, 2, 2, 3, 2])",
        "minimumIndex(nums = [1, 4, 2, 4, 4, 3, 2, 1])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [1, 5, 2, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [1, 2, 5, 6, 3, 4])",
        "semiOrderedPermutation(nums = [1, 7, 4, 2, 5, 6, 3])"
    ],
    "sample_172": [
        "minimumSum(n = 6, k = 2)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n=5, k=3)",
        "minimumSum(n=5, k=3)",
        "minimumSum(n = 10, k = 4)",
        "minimumSum(n=6, k=2)",
        "minimumSum(n = 15, k = 2)"
    ]
}