{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 8, 9])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1,0,1],[0,1,0],[1,0,1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 1], [1, 1, 1]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])"
    ],
    "sample_347": [
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 3, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"hello world\", \"foo bar\", \"spam eggs\"], \"o\")",
        "findWordsContaining(words = [\"hello world\", \"foo bar\", \"spam eggs\"], \"w\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(\"hello\", \"world\")",
        "canBeEqual(s1 = \"hello\", s2 = \"world\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abba\", s2 = \"baab\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence([1,2,3,4,5], 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9],10)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9,10],15)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 9)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9,10], 15)",
        "lengthOfLongestSubsequence([1,3,1,5,2,2,3,4,3,4])",
        "lengthOfLongestSubsequence(nums = [-1,-2,-3,4,5,-6,7,8], target = 3)",
        "lengthOfLongestSubsequence([1,2,3,1,2,3,4,5,6,7,8,9,10],9)",
        "lengthOfLongestSubsequence([1,2,3,1,2,3,4,5,1,2,3,4,5,6,7,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], 5)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abba\", s2 = \"baab\")",
        "canBeEqual(s1 = \"abba\", s2 = \"baab\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"bacde\")",
        "canBeEqual(s1 = \"abba\", s2 = \"baab\")",
        "canBeEqual(s1 = \"bana\", s2 = \"na\")",
        "canBeEqual(s1 = \"abacabadabacaba\", s2 = \"cddc\")"
    ],
    "sample_433": [
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(my_list = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays([1, 2, 3, 4, 5, 6])"
    ],
    "sample_315": [
        "buyChoco([10, 20, 30], 50)",
        "buyChoco(prices = [10, 20, 30, 40, 50], money = 100)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 5], money = 5)",
        "buyChoco(prices = [1, 2, 5], money = 5)",
        "buyChoco(prices = [1, 2, 5], money = 3)",
        "buyChoco(prices = [20, 30, 50], money = 100)",
        "buyChoco(my_list = [1, 2, 5], money = 4)",
        "buyChoco(prices = [20, 50, 100, 80], money = 150)",
        "buyChoco(prices = [2, 4, 1, 1, 7], money = 8)"
    ],
    "sample_441": [
        "countSubMultisets(my_list = [1, 2, 2, 3, 3, 3], l = 0, r = 4)",
        "countSubMultisets(my_list = [1, 2, 2, 3, 3, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 2)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 2, r = 4)",
        "countSubMultisets(nums = [2, 3, 4], l = 1, r = 2)",
        "countSubMultisets(nums = [1, 2, 2], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 1], l = 1, r = 2)",
        "countSubMultisets(nums = [1,2,2,3,3,3], l = 1, r = 4)",
        "countSubMultisets(nums = [1,2,3], l = 0, r = 1)",
        "countSubMultisets(my_list = [2, 1, 3], l = 1, r = 2)"
    ],
    "sample_322": [
        "isFascinating(n = 5)",
        "isFascinating(n = 3)",
        "isFascinating(n = 2)",
        "isFascinating(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isFascinating(n = 7)",
        "isFascinating(my_int = 5)",
        "isFascinating(123456789)",
        "isFascinating(n = 4)",
        "isFascinating(my_int = 1234)",
        "isFascinating(my_int = 39)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"na\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(\"abcdefg\", \"abdcgef\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins([1, 2, 4, 8, 16])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 5, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 5, 10])",
        "minimumCoins(prices = [2, 4, 1, 2, 7, 8])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 1234)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(p = 75)",
        "accountBalanceAfterPurchase(my_purchase = 25)",
        "accountBalanceAfterPurchase(my_purchase = 75)"
    ],
    "sample_423": [
        "minOperations([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minOperations([1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_350": [
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray([1, 2, 2, 1])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray([1,2,1,2,1,2,1,2,1,2])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1,3,2,2,5,4,5,6])",
        "alternatingSubarray([1,2,2,3,4,4,5,5,5,5,6,6])",
        "alternatingSubarray(nums = [1, 2, 1, 3, 4, 5, 5, 5, 6])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 1, limit = 5)"
    ],
    "sample_247": [
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"def\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"def\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"def\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"def\", x = 1)",
        "minOperations(\"abcde\", \"bcdea\", 1)",
        "minOperations(\"abc\", \"def\", 1)",
        "minOperations(s1 = \"abcd\", s2 = \"bcda\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"bcde\", x = 2)"
    ],
    "sample_340": [
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(s1 = \"hello\", s2 = \"world\", s3 = \"hi\")",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(s1 = \"hello\", s2 = \"world\", s3 = \"python\")",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(3, 2, 1)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5, 6], 3)",
        "minOperations(nums = [4, 3, 1, 2], k = 2)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"abcbda\")",
        "longestSemiRepetitiveSubstring(\"aabbbbcccdd\")",
        "longestSemiRepetitiveSubstring(\"abcbdeffed\")",
        "longestSemiRepetitiveSubstring(\"abcbdbdbbdcdabd\")",
        "longestSemiRepetitiveSubstring(\"abcbcb\")"
    ],
    "sample_361": [
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3])",
        "isGood(my_list = [1, 2, 3])",
        "isGood(my_list = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_244": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment([1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment([1, 2, 2, 3, 3, 3, 4, 4, 5])",
        "minGroupsForValidAssignment([1, 2, 2, 3, 3, 3])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"mq\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"4\", \"5\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"mq\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"mq\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"next\", \"curr\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"re\", \"fa\", \"qr\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"nx\", \"mv\", \"mq\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bac\", \"fed\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bca\", \"fed\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bac\", \"fed\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"bac\", \"fed\", \"edf\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"ghi\", \"bca\", \"fed\", \"ihg\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(\"101010101\", 3)",
        "shortestBeautifulSubstring(\"101010101\", 3)",
        "shortestBeautifulSubstring(s = \"101010101010\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101010\", k = 2)",
        "shortestBeautifulSubstring(\"1010111011101111\", 3)",
        "shortestBeautifulSubstring(s = \"101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010\n000111010001110011010101101110101001101010111100010100011010001111100001111000011110000010101010101010101010101010101010101010101'\n>>> make_count_algorithm_patterns('10101010101010101010')\n'101010101010101010101010'\n\n>>> make_count_algorithm_patterns('10101010101010101010')\n'10101010101010101010101'"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts([3,4,5,1,2])",
        "minimumRightShifts([3,4,5,1,2])",
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8])",
        "minimumRightShifts([1,3,4,5,2])"
    ],
    "sample_294": [
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s1 = \"1010\", s2 = \"1011\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghij\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")"
    ],
    "sample_388": [
        "canMakeSubsequence('abc', 'def')",
        "canMakeSubsequence('abcde', 'ace')",
        "canMakeSubsequence(\"abcde\", \"ace\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"def\")",
        "canMakeSubsequence(my_str1 = \"abc\", my_str2 = \"def\")",
        "canMakeSubsequence('ab', 'bc')",
        "canMakeSubsequence(\"ba\", \"nana\")",
        "canMakeSubsequence('abcde', 'fghij')",
        "canMakeSubsequence('abcde', 'xyz')"
    ],
    "sample_364": [
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3])",
        "isGood([1,2,4,5])",
        "isGood(my_list = [1, 2, 3, 4, 5])",
        "isGood([1,2,4,5,7])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs([1, 2, 3, 4, 5], 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs([1, 2, 3, 4, 5], 5)",
        "countPairs(my_list = [1, 2, 3, 4, 5], target = 7)",
        "countPairs([1, 2, 3, 4], 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [4, 5, 6], moveTo = [1, 2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [4, 5], moveTo = [6, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])",
        "relocateMarbles(my_list = [1, 3, 5, 7], moveFrom = [2, 4, 6], moveTo = [8, 9, 10])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [2,4], moveTo = [1,3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [3, 4, 5, 6], moveTo = [1, 5, 3, 4])",
        "relocateMarbles(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 6, 8], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 5, 8], moveTo = [0, 3, 6])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 4, 5], moveTo = [3, 6, 7])"
    ],
    "sample_384": [
        "countPairs([1, 2, 3, 4, 5], 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs([1, 2, 3, 4, 5], 6)",
        "countPairs(my_list = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(my_list = [1, 2, 3, 4, 5], target = 5)",
        "countPairs([1, 2, 3, 4], 5)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals([1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals([1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])"
    ],
    "sample_303": [
        "countSeniors(details = [\"John (25)\", \"Jane (60)\", \"Bob (45)\"])",
        "countSeniors(details = [\"John Smith 35\", \"Jane Doe 55\"])",
        "countSeniors(details = [\"John Smith (50-59)\", \"Jane Doe (60-69)\", \"Bob Johnson (70-79)\"])",
        "countSeniors(details = [\"John 60 years old\", \"Jane 72 years old\", \"Bob 58 years old\"])",
        "countSeniors(details = [\"John's 30th anniversary\", \"Jane's 40th anniversary\"])",
        "countSeniors(details = [\"John (25)\", \"Mary (60)\", \"Bob (40)\"])",
        "countSeniors(details = [\"John Smith (58)\", \"Jane Doe (72)\"])",
        "countSeniors(details = [\"John Smith (50-65)\", \"Jane Doe (20-29)\", \"Bob Johnson (90-95)\"])",
        "countSeniors(details = [\"John Smith (59)\", \"Jane Doe (60)\", \"Bob Johnson (65)\"])",
        "countSeniors(details = [\"John's age is 37\", \"Mary's age is 72\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"abcbda\")",
        "longestSemiRepetitiveSubstring(\"abcbdbdbbdabd\")",
        "longestSemiRepetitiveSubstring(\"abcbdbdbbdcdabdabd\")",
        "longestSemiRepetitiveSubstring(\"abcba\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nn\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"bana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nn\")",
        "canBeEqual(s1 = \"ba1\", s2 = \"n1a\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"bana\", s2 = \"bnna\")",
        "canBeEqual(s1 = \"barfoo\", s2 = \"barbar\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nan\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nan\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(\"abc\", \"bcd\", \"cde\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"a\", s3 = \"a\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 7)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 7)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9,10], target=5)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9], 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 15)",
        "lengthOfLongestSubsequence([1,2,3,1,2,3,4,5,6,7,8,9,10])",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9], 10)",
        "lengthOfLongestSubsequence([1,2,3,4,5,6,7,8,9],10)"
    ],
    "sample_257": [
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 1, 4, 2])",
        "minimumSum(nums = [1, 3, 2, 4, 1])",
        "minimumSum(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nn\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"ab\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nn\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bca\", \"cab\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bac\", \"bca\", \"cab\", \"cba\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nn\", \"baa\", \"nnn\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring('101010101', 3)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring('101010101', 2)",
        "shortestBeautifulSubstring(\"1010101\", 3)",
        "shortestBeautifulSubstring(\"101010101\", 2)",
        "shortestBeautifulSubstring('10101010101', 3)",
        "shortestBeautifulSubstring('101010101', 4)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring('101101101', 2)",
        "shortestBeautifulSubstring('1011010111', 4)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghij\"])",
        "minimizeConcatenatedLength(words = [\"abcde\", \"defgh\", \"ghijk\"])",
        "minimizeConcatenatedLength(words = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"ab\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"abcde\", \"abfde\", \"abcde\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghij\", \"klmno\", \"pqrst\", \"uvwxy\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n=5, m=3)",
        "differenceOfSums(n = 5, m = 2)"
    ],
    "sample_349": [
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7])",
        "alternatingSubarray([1,2,3,5,6,8])",
        "alternatingSubarray(my_list = [1, 2, 3, 5, 6, 8, 9])",
        "alternatingSubarray([1, 2, 3, 5, 6, 7, 9, 10])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 3, 6])",
        "alternatingSubarray([1, 3, 2, 4, 6, 5, 8, 9, 7])"
    ],
    "sample_478": [
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength([1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength([1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength(my_list = [1,2,3,4,5])",
        "findMaximumLength([1,2,4,8,16])",
        "findMaximumLength(nums = [-2,-1,0,3,4])",
        "findMaximumLength([1,2,3,4,5])"
    ],
    "sample_302": [
        "countSeniors(details = [\"John Smith 1234 5678\", \"Jane Doe 9012 3456\"])",
        "countSeniors(details = [\"1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-27-28-29-30-31-32-33-34-35-36-37-38-39-40-41-42-43-44-45-46-47-48-49-50-51-52-53-54-55-56-57-58-59-60-61-62-63-64-65-66-67-68-69-70-71-72-73-74-75-76-77-78-79-80-81-82-83-84-85-86-87-88-89-90-91-92-93-94-95-96-97-98-99-100-101-102-103-104-105-106-107-108-109-110-111-112-113-114-115-116-117-118-119-120-121-122\"])",
        "countSeniors(details = [\"123 Main St, Anytown USA 12345\", \"555-1234, Anytown USA 67890\"])",
        "countSeniors(details = [\"123 Main St, Apt 4A, New York, NY 10001\", \"456 Oak Ave, Apt 4A, New York, NY 10002\"])",
        "countSeniors(details = [\"70\", \"60-69\", \"80-79\", \"60-59\", \"20-29\", \"70-79\", \"60-69\", \"80-79\", \"60-59\", \"20-29\"])",
        "countSeniors(details = [\"Mount Baker - 62\", \"New York City - 68\", \"Chicago - 59\"])",
        "countSeniors(details = [\"Mrs. Smith went home with 123 Main St.\", \"Tom Hanks went to the store with $10.50\"])",
        "countSeniors(details = [\"10:00-11:00, 45, 65, 80\", \"13:00-14:00, 50, 70, 90\", \"15:00-16:00, 55, 75, 95\"])",
        "countSeniors(details = [\"John has 3 floors and 2 seats\", \"Mary has 1 seat and 4 seats\", \"Peter has 2 rows and 3 seats\"])",
        "countSeniors(details = [\"brunch time: 30\", \"finishing grade: 70\", \"extra time: 45\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"hello\", s2 = \"world\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins(prices = [7, 1, 5, 3, 6, 4])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins(prices = [7, 1, 5, 3, 6, 4])",
        "minimumCoins([2, 3, 4, 5, 6])",
        "minimumCoins([1, 2, 4, 8, 16])",
        "minimumCoins([2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins([2, 4, 1, 5, 3])"
    ],
    "sample_378": [
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([5, 2, 1, 2, 5, 1, 2, 1])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"car\", \"care\", \"acre\", \"arc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"care\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"bb\", \"bc\", \"cb\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"baba\", \"bbaa\", \"aabb\"])",
        "maximumNumberOfStringPairs([\"racecar\", \"car\", \"care\", \"acre\", \"race\", \"car\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cb\", \"ca\", \"ab\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [-1, 2, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 1, 2])",
        "minSum(nums1 = [1, 2, 0, 3], nums2 = [1, 1, 2, 3])",
        "minSum(my_list = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum([0, 1, 2], [0, 0, 0])",
        "minSum(nums1 = [1, 2, 0, 3], nums2 = [1, 1, 0, 1])",
        "minSum(nums1 = [1, 0, 2], nums2 = [1, 2, 1])",
        "minSum(nums1 = [1, 2, 0, 1], nums2 = [0, 1, 1, 1])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum([1, 2, 3, 4, 5], 2, 3)",
        "maxSum([1, 2, 3, 4, 5], 2, 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(my_list = [1, 2, 3], moveFrom = [2, 3, 4], moveTo = [1, 4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [0, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [3, 4], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [2, 4], moveTo = [1, 5])",
        "relocateMarbles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])",
        "relocateMarbles([1,2,3,4,5], [2,3], [4,5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3], moveTo = [3, 4, 5])"
    ],
    "sample_407": [
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(my_list = [1, 3, 5, 7])",
        "minimumRightShifts(my_list = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1,3,4,5,6,7])",
        "minimumRightShifts(nums = [1,3,4,2])",
        "minimumRightShifts(nums = [4, 5, 6, 0, 1, 2])",
        "minimumRightShifts(nums = [1, 3, 4, 5, 2])",
        "minimumRightShifts(nums = [1, 3, 4, 5, 6, 7])",
        "minimumRightShifts(my_list = [1, 3, 5, 7, 9, 2, 4, 6, 8])"
    ],
    "sample_314": [
        "buyChoco([10, 20, 30], 50)",
        "buyChoco(prices = [10, 20, 30, 40, 50], money = 100)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco([10, 20, 30], 50)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [10, 20, 30, 40], money = 50)",
        "buyChoco(prices = [2, 5, 10, 20], money = 8)",
        "buyChoco(my_list = [2, 3, 4], money = 7)",
        "buyChoco(my_list = [10, 20, 30, 40], money = 50)",
        "buyChoco(prices = [2, 4, 6], money = 10)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 9)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 3, 5, 7], 10)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcba\")",
        "longestSemiRepetitiveSubstring(\"abacabadabacaba\")",
        "longestSemiRepetitiveSubstring(\"abccba\")",
        "longestSemiRepetitiveSubstring(\"abcba\")",
        "longestSemiRepetitiveSubstring(\"abcbdeffed\")",
        "longestSemiRepetitiveSubstring(\"abccccdd\")",
        "longestSemiRepetitiveSubstring(s1 = \"banana\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"foo\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"foo\"], x = \"o\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev1\", \"prev2\", \"prev3\", \"prev4\", \"prev5\", \"prev6\", \"prev7\", \"prev8\", \"prev9\", \"prev10\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"previous\", \"next\", \"current\", \"previous\", \"previous\", \"next\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"pre\", \"next\", \"pre\", \"curr\", \"next\", \"prev\", \"pre\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba1\", s2 = \"na2\")",
        "canBeEqual(s1 = \"ba1\", s2 = \"na2\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"eid\", s2 = \"eid\")",
        "canBeEqual(s1 = \"ace\", s2 = \"aez\")",
        "canBeEqual(s1 = \"fqpz\", s2 = \"zpxq\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,3,5,7])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 8)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 9)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 9)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 10)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 1], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 1], target = 4)"
    ],
    "sample_368": [
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s = \"aeiou\")",
        "sortVowels('aeiou')",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s1 = \"banana\")",
        "sortVowels('hello world')",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"Hello World\")"
    ],
    "sample_312": [
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_243": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3])"
    ],
    "sample_346": [
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 7, 6, 8])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 7, 6])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 1])",
        "alternatingSubarray(my_list = [1, 2, 3, 4, 5])",
        "alternatingSubarray(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray([1, 2, 1, 2, 1, 2])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"abab\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 10)",
        "beautifulSubstrings(\"hello world\", 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 24)",
        "beautifulSubstrings(s = \"ab\", k = 10)",
        "beautifulSubstrings(s = \"baa\", k = 4)",
        "beautifulSubstrings(s = \"ba\", k = 10)",
        "beautifulSubstrings(s = \"beautiful\", k = 12)",
        "beautifulSubstrings(s = \"ababab\", k = 5)",
        "beautifulSubstrings(\"hello world\", 2)"
    ],
    "sample_449": [
        "minChanges(\"hello\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"ba\", s2 = \"nn\")",
        "minChanges(s1 = \"aabbcc\")",
        "minChanges(s1 = \"baa\", s2 = \"aaa\")",
        "minChanges(s1 = \"hello world\")",
        "minChanges(s1 = \"baa\", s2 = \"nana\")",
        "minChanges(s1 = \"hello\")",
        "minChanges(s1 = \"101010\", s2 = \"010101\")",
        "minChanges(s1 = \"abbc\", s2 = \"aabbcc\")"
    ],
    "sample_291": [
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")",
        "minimumSteps(s1 = \"101010\", s2 = \"010101\")",
        "minimumSteps(s1 = \"101101\", s2 = \"010101\")",
        "minimumSteps(s = \"11010101\")",
        "minimumSteps(s = \"1101010\")",
        "minimumSteps(s1 = \"11010\", s2 = \"11111\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"John Smith 23\", \"Jane Doe 60\", \"Bob Johnson 90\"])",
        "countSeniors(details = [\"Alice 60\", \"Bob 55\", \"Charlie 50\", \"David 45\"])",
        "countSeniors(details = [\"Room A: 40-50 minutes\", \"Room B: 60-70 minutes\", \"Room C: 80-90 minutes\"])",
        "countSeniors(details = [\"New York: 80-85\", \"San Francisco: 30-35\", \"Los Angeles: 70-75\"])",
        "countSeniors(details = [\"John sent 89 degrees\", \"Mary sent 72 degrees\", \"Bob sent 54 degrees\"])",
        "countSeniors(details = [\"123 Main St, Anytown, USA 12345\", \"1, Main St, Anytown, USA 67890\", \"23 Main St, Anytown, USA 34567\"])",
        "countSeniors(details = [\"65+mq\", \"120+px\", \"80+zy\"])",
        "countSeniors(details = [\"John has 3 feet and 5 inches\", \"Jane has 6 feet and 10 inches\", \"Bob has 9 feet and 15 inches\"])",
        "countSeniors(details = [\"MR 75\", \"79P 60\", \"83C 45\"])",
        "countSeniors(s1 = \"Mount St. Helens, CA 9513\", s2 = \"Mint St. Helens, NY 5115\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(my_list = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(my_list = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment([1,2,3,4,5])"
    ],
    "sample_415": [
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]], k = 5)",
        "countPairs([[0, 0], [1, 1], [2, 2]], 3)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4]], k = 2)",
        "countPairs([[0, 0], [1, 1], [2, 2]], 5)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 4)",
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]], 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]], k = 10)",
        "countPairs([[1, 2], [3, 4], [5, 6]], 2)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)"
    ],
    "sample_452": [
        "minChanges(s1 = \"baaab\", s2 = \"baba\")",
        "minChanges(\"aabbcc\")",
        "minChanges(s1 = \"baaab\", s2 = \"baba\")",
        "minChanges(s1 = \"baaab\", s2 = \"baba\")",
        "minChanges(s1 = \"banana\")",
        "minChanges(s1 = \"ab\", s2 = \"a\")",
        "minChanges(s1 = \"hello\")",
        "minChanges(s1 = \"baaab\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"aabcccd\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [1, 3, 2, 4], nums2 = [2, 1, 3, 4])",
        "minOperations([1, 2, 3], [4, 5, 6])",
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "minOperations([1, 3, 5, 7], [2, 4, 6, 8])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s1 = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s1 = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 4)",
        "shortestBeautifulSubstring(s = \"110101011\", k = 3)"
    ],
    "sample_242": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1,2,3,4,5])",
        "maximumTripletValue([1,2,3,4,5])",
        "maximumTripletValue([1,2,3,4,5])",
        "maximumTripletValue([1, 2, 3, 4, 5, 6])",
        "maximumTripletValue([-1, 0, 1, 2, -1, -4])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n=5, limit=2)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(my_list = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment([1,2,3,4,5,6])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([2,2,1,1,1,1,1,1,1,1])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 0, 3], nums2 = [3, 2, 1, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [-1, 4, 5])",
        "minSum(nums1 = [0, 1, 0], nums2 = [1, 0, 1])",
        "minSum([0, 2, 3], [1, 1, 4])",
        "minSum(nums1 = [1, 2, 0, 4], nums2 = [5, 1, 1, 9])"
    ],
    "sample_453": [
        "minChanges(s1 = \"abccba\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s1 = \"aabbcc\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s1 = \"aba\", s2 = \"bab\")",
        "minChanges(s1 = \"aaaaa\", s2 = \"aaab\")",
        "minChanges(s1 = \"aaabccc\")",
        "minChanges(s1 = \"aab\")",
        "minChanges(s1 = \"baa\", s2 = \"b\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(\"banana\", 2)",
        "beautifulSubstrings(\"abacabadabacaba\", 3)",
        "beautifulSubstrings(\"abacabadabacaba\", 4)",
        "beautifulSubstrings(\"ababab\", 5)",
        "beautifulSubstrings(s = \"aeeeioouu\", k = 2)",
        "beautifulSubstrings(s = \"baaeeiouu\", k = 3)",
        "beautifulSubstrings(\"abcde\", 2)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"ab\", k = 5)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s1 = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"ababa\", k = 4)"
    ],
    "sample_369": [
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s = \"aeiou\")",
        "sortVowels(\"hello\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"hello world\")",
        "sortVowels('Hello World')",
        "sortVowels('hello world')",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s = \"hello world\")"
    ],
    "sample_375": [
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 2, 3, 3, 3])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [4, 4, 4, 4])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(my_list = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 1, 4, 2])",
        "minimumSum(nums = [3, 4, 5, 6, 2])",
        "minimumSum([3, 2, 5, 10])"
    ],
    "sample_417": [
        "minOperations([1,2,3,4,5], 3)",
        "minOperations([1,2,3,4,5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations([1,2,3,4,5], 3)",
        "minOperations([1,2,3,4,5], 3)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 3)",
        "minOperations([2, 3, 1, 4, 5], 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(my_list = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_293": [
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")",
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(\"101\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"1010\", s2 = \"0101\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101010\")",
        "minimumSteps(s1 = \"101010\", s2 = \"001010\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"11010101\")"
    ],
    "sample_430": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [-2, -3, 4, -1, -2, 1, 5, -3])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(my_list = [10, 20, 30], money = 50)",
        "buyChoco(my_list = [1, 2, 5], money = 10)",
        "buyChoco(prices = [1, 2, 5], money = 4)",
        "buyChoco(prices = [1, 2, 5], money = 10)",
        "buyChoco(my_list = [1, 2, 3], money = 10)",
        "buyChoco(prices = [1, 5, 10, 20, 50], money = 30)",
        "buyChoco(my_list = [10, 20, 30, 40], money = 50)"
    ],
    "sample_290": [
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"10100\")",
        "minimumSteps(s = \"00110110\")",
        "minimumSteps(s1 = \"101101\", s2 = \"010101\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s1 = \"10101\", s2 = \"11100\")",
        "minimumSteps(s1 = \"101010\", s2 = \"100111\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"1110101\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6])"
    ],
    "sample_420": [
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 3)",
        "minOperations([1,2,3,4,5], 2)"
    ],
    "sample_363": [
        "isGood([1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 2, 3, 3, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood([1, 2, 3])",
        "isGood(my_list = [1, 2, 2, 3, 3, 3])",
        "isGood(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood([1, 1, 1, 1, 1])",
        "isGood(nums = [1, 2, 2, 3, 3, 4, 4, 4, 5, 5])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 5, 6, 6, 6])"
    ],
    "sample_325": [
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(7)",
        "isFascinating(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isFascinating(n = 2)"
    ],
    "sample_365": [
        "isGood([1,2,3])",
        "isGood([1,2,3])",
        "isGood([1,2,3])",
        "isGood([1,2,3])",
        "isGood([1,2,3,4,5])",
        "isGood([1,2,3])",
        "isGood(my_list = [1, 2, 3])",
        "isGood(my_list = [1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood(nums = [1,2,3])"
    ],
    "sample_374": [
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([2, 3, 4, 1, 5])",
        "minimumSeconds([1, 2, 2, 3, 4, 5, 5, 6, 6])",
        "minimumSeconds(nums = [5, 2, 5, 4, 1])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 3, 5, 4])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts([4, 3, 1, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 4, 2])",
        "minimumRightShifts([4, 3, 2, 1])",
        "minimumRightShifts([1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [1,3,2,4,5])",
        "minimumRightShifts(nums = [1,3,2,4,5])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4])"
    ],
    "sample_362": [
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3])",
        "isGood([1,2,3])",
        "isGood([1, 2, 3, 4])",
        "isGood(my_list = [1,2,3])",
        "isGood([3, 2, 1])",
        "isGood(nums = [1, 2, 3, 4])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minOperations(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minOperations([1,2,3], [2,3,4])",
        "minOperations([1,2,3,4,5], [3,4,5,6,7])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations([2,7,9], [3,6,9])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(\"ababab\", 2)",
        "shortestBeautifulSubstring(s = \"ba\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"baaab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abcbca\", k = 3)",
        "shortestBeautifulSubstring(s1 = \"baaab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abcbdb\", k = 3)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 3)",
        "shortestBeautifulSubstring(s = \"ababcbacadefegdehijhklij\", k = 7)",
        "shortestBeautifulSubstring(s = \"abacabadabacaba\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"baa\", k = 1)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment([1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_289": [
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"101\", s2 = \"111\")",
        "minimumSteps(s1 = \"101\", s2 = \"001\")",
        "minimumSteps(s1 = \"11010\", s2 = \"01010\")",
        "minimumSteps(s1 = \"10101\", s2 = \"11010\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 1, 2, 3, 4, 5])",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 9)",
        "lengthOfLongestSubsequence([1, 2, 3, 1, 2, 3, 1, 2, 3], 4)",
        "lengthOfLongestSubsequence([1, 2, 3, 1, 2, 3, 4, 5])",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 20)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)"
    ],
    "sample_259": [
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,3,1,5,2])",
        "minimumSum([1,3,1,5,2])",
        "minimumSum([2,3,4,5,1])",
        "minimumSum([1,2,3,4,5])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum([1,2,3,4,5], 3, 2)",
        "maxSum([1,2,3,4,5,6,7,8,9], 3, 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghij\")",
        "findMinimumOperations(\"abc\", \"ab\", \"abc\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"ace\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"ab\", s3 = \"e\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abdc\", s3 = \"abdc\")"
    ],
    "sample_427": [
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5])",
        "minOperations([1,2,3,4,5,6,7,8,9,10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations([1,2,3,4,5])",
        "minOperations([1,2,3,4,5])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(my_list = [3, 1, 2, 1, 1, 3])"
    ],
    "sample_474": [
        "minimumCoins(prices = [7, 1, 5, 3, 6, 4])",
        "minimumCoins(prices = [7, 1, 5, 3, 6, 4])",
        "minimumCoins([2, 3, 1, 1, 5])",
        "minimumCoins([2, 3, 1, 1, 5])",
        "minimumCoins([2, 3, 1, 1, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [2, 3, 1, 1, 2])",
        "minimumCoins(prices = [7, 1, 5, 3, 6, 4])",
        "minimumCoins(my_list = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [2, 3, 1, 2, 5, 7, 2, 5])"
    ],
    "sample_377": [
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(my_list = [\"mq\", \"px\", \"zy\"])",
        "minimumSeconds(nums = [\"ba\", \"na\", \"aa\"])",
        "minimumSeconds(nums = [\"ba\", \"na\", \"aa\", \"na\", \"ba\", \"na\"])",
        "minimumSeconds(nums = [\"ba\", \"nana\", \"cd\", \"ba\", \"cd\", \"na\", \"nana\", \"ba\"])"
    ],
    "sample_448": [
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"aba\", s2 = \"bab\")",
        "minChanges(s1 = \"aab\", s2 = \"aba\")",
        "minChanges(s1 = \"aab\", s2 = \"bbb\")",
        "minChanges(s1 = \"abcd\", s2 = \"abdc\")",
        "minChanges(\"aabbcc\")",
        "minChanges(s1 = \"01010\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray([1, 3, 5, 8, 9], 2)",
        "lexicographicallySmallestArray([1, 3, 5, 8, 9], 2)",
        "lexicographicallySmallestArray([1, 2, 3], 4)",
        "lexicographicallySmallestArray([1, 5, 9], 3)",
        "lexicographicallySmallestArray([1, 5, 9], 3)",
        "lexicographicallySmallestArray([5, 3, 1], 1)",
        "lexicographicallySmallestArray(nums = [3, 6, 1, 8], limit = 5)",
        "lexicographicallySmallestArray(nums = [5, 6, 7], limit = 1)",
        "lexicographicallySmallestArray([3, 8, 4, 5], 1)",
        "lexicographicallySmallestArray([5, 3, 8, 6, 7])"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts([1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(my_list = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(my_list = [1, 2, 3, 4])"
    ],
    "sample_241": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 5)",
        "beautifulSubstrings(s = \"a\", k = 5)",
        "beautifulSubstrings(\"banana\", 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"ab\", k = 3)",
        "beautifulSubstrings(\"banana\", 5)",
        "beautifulSubstrings(\"abae\", 5)",
        "beautifulSubstrings(s1 = \"beautiful\", k = 5)"
    ],
    "sample_385": [
        "countPairs([1, 2, 3, 4, 5], 7)",
        "countPairs([1, 2, 3, 4, 5], 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(my_list = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(my_list = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_462": [
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 20, limit = 5)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations([1, 2, 3], [3, 2, 1])",
        "minOperations([1, 2, 3], [4, 5, 6])",
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations([1, 3, 5], [2, 4, 6])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])"
    ],
    "sample_426": [
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(\"1010101\", 3)",
        "shortestBeautifulSubstring(s = \"101010101\", k = 3)",
        "shortestBeautifulSubstring(s1 = \"101001\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101010101\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(\"101010101010101010101010101010101010101010101010101010101010\", 10)",
        "shortestBeautifulSubstring(s = \"101001011110001111010101101111010101111010101011011110101010110111100000010101110110101011011010101101101010110110101011011010101101101010110110101010\")"
    ],
    "sample_376": [
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds([1, 2, 2, 3, 3, 3])",
        "minimumSeconds([1,2,2,3,3,3])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1,2,3,4,5])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 4, 4, 5, 5])",
        "minOperations(my_list = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5])",
        "minOperations(nums = [1, 1, 1, 2, 1, 1, 3, 3, 3])"
    ],
    "sample_351": [
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray([1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 7, 6, 8])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 7, 6, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray([1, 3, 2, 4, 5])",
        "alternatingSubarray([1, 3, 2, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 7, 6, 9, 8])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"fed\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"hello\", \"world\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"bat\", \"tab\"])",
        "maximumNumberOfStringPairs([\"racecar\", \"car\", \"level\", \"deified\", \"pop\", \"noon\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bb\", \"ca\", \"cb\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"car\", \"level\", \"hello\", \"world\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"hello\", \"world\", \"level\", \"python\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abcd\", \"bcde\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"def\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"def\")",
        "canMakeSubsequence(\"abc\", \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"ba\", s2 = \"nana\")",
        "canMakeSubsequence(my_str1 = \"banana\", my_str2 = \"nanaba\")",
        "canMakeSubsequence(\"abcd\", \"bcda\")",
        "canMakeSubsequence(my_str1 = \"abcd\", my_str2 = \"acbd\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"abcbda\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"abccba\")",
        "longestSemiRepetitiveSubstring(\"abcbcd\")",
        "longestSemiRepetitiveSubstring(\"aabbbcccc\")",
        "longestSemiRepetitiveSubstring(\"abcbdbdbbdcdabd\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(\"abbbccddddeeeee\")",
        "longestSemiRepetitiveSubstring(s = \"abccde\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,1,3,2,5], m = 3, k = 2)",
        "maxSum(nums = [1,2,1,3,2,5,3], m = 3, k = 2)",
        "maxSum(nums = [1,2,1,3,2,5,3], m = 3, k = 2)",
        "maxSum(nums = [1,3,-1,-3,5,3,6,7], m = 3, k = 2)",
        "maxSum(nums = [1,2,1,3,2,5,3], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,1,1], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,1,2], m = 2, k = 2)",
        "maxSum(nums = [1,2,1,2,3,4,3,2,1], m = 2, k = 3)",
        "maxSum(nums = [1,7,5,4], m = 3, k = 2)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"hello world\", \"foo bar\", \"python\"], x = \"o\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,3,5,7,9], moveTo = [2,4,6,8,10])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [0,1,2,3,4], moveTo = [4,3,2,1,0])",
        "relocateMarbles(my_list = [1, 2, 2, 3, 3, 3], moveFrom = [2, 3], moveTo = [1, 4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [3,4], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], moveFrom = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], moveTo = [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2])",
        "relocateMarbles(my_list = [1,2,3,2,1], moveFrom = [2,1,3], moveTo = [3,2,1])",
        "relocateMarbles(my_list = [1, 2, 3, 2, 1], moveFrom = [2, 1], moveTo = [3, 4])",
        "relocateMarbles(nums = [1,2,3,4,5,6], moveFrom = [2,4], moveTo = [6,3])",
        "relocateMarbles([1,2,2,3,3,3,4,4,4,4], [2,3,4,1], [3,4,1,2])",
        "relocateMarbles(nums = [1,2,2,3,3,3,4,4,4,4], moveFrom = [1,1,2,2,3,3,4,4,4,4], moveTo = [2,3,4,4,4,4,4,4,3,1])"
    ],
    "sample_239": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([-1, 0, 1, 2, -1, -4])",
        "maximumTripletValue(nums = [-1, -2, -3, -4, -5])",
        "maximumTripletValue(nums = [-1, -2, -3, -4, -5])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(\"abcbca\")",
        "longestSemiRepetitiveSubstring(\"abcba\")",
        "longestSemiRepetitiveSubstring(\"abccba\")",
        "longestSemiRepetitiveSubstring(\"abcabcbb\")",
        "longestSemiRepetitiveSubstring(\"aabbc\")",
        "longestSemiRepetitiveSubstring(\"aabbcc\")",
        "longestSemiRepetitiveSubstring(\"abcbdb\")",
        "longestSemiRepetitiveSubstring(\"aabbcdaa\")",
        "longestSemiRepetitiveSubstring(s1 = \"ababab\", s2 = \"ababab\")",
        "longestSemiRepetitiveSubstring(\"abcde\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs([\"racecar\", \"car\", \"race\", \"level\"])",
        "maximumNumberOfStringPairs([\"race\", \"car\", \"level\", \"deified\", \"pop\", \"noon\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"ghij\", \"klmno\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"car\", \"level\", \"deified\", \"radar\", \"rotor\", \"marathon\"])"
    ],
    "sample_308": [
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum(matrix = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(matrix = [[1,2],[3,4]])",
        "matrixSum(matrix = [[1, 2], [3, 4]])",
        "matrixSum(matrix = [[1,2,3],[4,5,6],[7,8,9]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"\", s2 = \"\", s3 = \"\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(\"abcde\", \"bcdea\", \"cdeab\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"nana\", s3 = \"nan\")",
        "findMinimumOperations(\"abcde\", \"bcdea\", \"bcdeabc\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abcd\", s3 = \"abed\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")",
        "findMinimumOperations(\"abc\", \"ab\", \"c\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcda\", s3 = \"dabc\")"
    ],
    "sample_324": [
        "isFascinating(123456789)",
        "isFascinating(1234)",
        "isFascinating(1234)",
        "isFascinating(my_int = 42)",
        "isFascinating(my_int = 42)",
        "isFascinating(n = 7)",
        "isFascinating(n = 123)",
        "isFascinating(n = 12)",
        "isFascinating(my_int = 72)",
        "isFascinating(my_int = 13)"
    ],
    "sample_476": [
        "minimumCoins(prices = [2,3,1,8,4])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins([1,2,3,4,5])",
        "minimumCoins([1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [2,3,1,8,4])",
        "minimumCoins(prices = [2,3,1,4,6,1])",
        "minimumCoins([1,3,1,5,9])",
        "minimumCoins([2,3,1,1,7,5])"
    ],
    "sample_380": [
        "countPairs([1,2,3,4,5], 7)",
        "countPairs([1,2,3,4,5], 7)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs([1,2,3,4,5], 6)",
        "countPairs([1,2,3,4,5], 6)",
        "countPairs([1,2,3,4,5], 8)",
        "countPairs(my_list = [1, 2, 3, 4], target = 5)",
        "countPairs(my_list = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(my_list = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 10)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(my_list = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minGroupsForValidAssignment([1,2,2,4,5,5,5,7,8,8,8,8])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs([1, 2, 3, 4, 5], 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(my_list = [1, 2, 3, 4], target = 5)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 5], money = 7)",
        "buyChoco(my_list = [1, 2, 3], money = 4)",
        "buyChoco(prices = [2, 3, 1, 5, 4], money = 10)",
        "buyChoco(prices = [2, 4, 6, 8], money = 20)",
        "buyChoco(prices = [5, 10, 2, 7, 1, 12], money = 20)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"olleh\", \"dlrow\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"olleh\", \"dlrow\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ba\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"racecar\", \"hello\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"car\", \"level\", \"deified\", \"pop\", \"noon\"])",
        "maximumNumberOfStringPairs([\"race\", \"car\", \"racecar\", \"hello\", \"world\"])"
    ],
    "sample_370": [
        "sortVowels(\"banana\")",
        "sortVowels(\"banana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"banana\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(my_list = [1, 2, 3, 4, 5])",
        "sumCounts(my_list = [1, 2, 3, 4])"
    ],
    "sample_477": [
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 5, 10])",
        "minimumCoins(prices = [2, 7, 9, 3, 1])",
        "minimumCoins([2, 3, 1, 1, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins([2, 3, 4, 5, 6])"
    ],
    "sample_245": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_307": [
        "countSeniors(details = [\"John Smith 60\", \"Jane Doe 55\", \"Bob Johnson 65\"])",
        "countSeniors(details = [\"John has 10 siblings\", \"Mary has 20 siblings\", \"Peter has 30 siblings\"])",
        "countSeniors(details = [\"John Smith - 25\", \"Jane Doe - 30\", \"Bob Johnson - 45\"])",
        "countSeniors(details = [\"John Smith 35\", \"Jane Doe 60-79\"])",
        "countSeniors(details = [\"abc-45-def-60-ghi\", \"jkl-90-mno-120-pqr\"])",
        "countSeniors(details = [\"John has 30 siblings\", \"Mary is 72 years old\", \"Bob has 42 siblings\"])",
        "countSeniors(details = [\"John's child is 60 years old\", \"Mary has 7 siblings\"])",
        "countSeniors(details = [\"workout position 1: 40\", \"workout position 2: 50\"])",
        "countSeniors(details = [\"John has 30 siblings\", \"He is 50 years old\", \"The cat ate 5.\"])",
        "countSeniors(details = [\"69m90s\", \"120s\", \"75s\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 10)",
        "isFascinating(n = 0)",
        "isFascinating(my_int = 123)",
        "isFascinating(0)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(s1 = \"baa\", s2 = \"aa\")",
        "minimumBeautifulSubstrings(s1 = \"baa\", s2 = \"naaa\")",
        "minimumBeautifulSubstrings(s1 = \"10101010101010\", s2 = \"10101010101010\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 6, limit = 2)"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations([1,2,3,4,5], 3)",
        "minOperations([1,2,3,4,5], 3)",
        "minOperations([1,2,3,4,5], 3)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(my_list = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(my_list = [3,4,5,1,2], k = 3)",
        "minOperations([1,1,1,1,1], 5)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(my_list = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3, 4])",
        "sumCounts([1, 2, 3, 4])"
    ],
    "sample_437": [
        "lastVisitedIntegers(my_list = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"1\", \"2\", \"prev\", \"3\", \"prev\", \"4\", \"prev\", \"5\", \"prev\", \"6\", \"prev\", \"7\", \"prev\", \"8\", \"prev\", \"9\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"curr\", \"curr\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"curr\", \"next\", \"prev\", \"prev\", \"next\", \"curr\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"current\", \"previous\", \"next\", \"last\", \"current\", \"next\"])"
    ],
    "sample_421": [
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations([1, 2, 3, 4, 5], 2)",
        "minOperations([1, 2, 3, 4, 5], 5)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(my_list = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"abcabcbb\")",
        "longestSemiRepetitiveSubstring(\"abcbda\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"abcbcba\")",
        "longestSemiRepetitiveSubstring(\"abcabcbb\")",
        "longestSemiRepetitiveSubstring(\"abcbdbbd\")",
        "longestSemiRepetitiveSubstring(\"banana\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(my_list = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(\"101010101\", 3)",
        "shortestBeautifulSubstring(\"101010101\", 3)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(\"1010101\", 2)",
        "shortestBeautifulSubstring(\"1010101\", 3)",
        "shortestBeautifulSubstring(\"1010101010\", 3)",
        "shortestBeautifulSubstring(\"101010101\", 3)",
        "shortestBeautifulSubstring(\"10101010101010\", 3)",
        "shortestBeautifulSubstring(\"1010011\", 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"ba\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(\"ababab\")",
        "minimumBeautifulSubstrings(\"ababab\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(\"abcbc\")",
        "minimumBeautifulSubstrings(s = \"abacaba\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 5, y = 10, z = 15)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 1)"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1, 2], [3, 4, 5], [6, 7, 8]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion([[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion([[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 1], [0, 1, 1]])",
        "def findRepeatedPattern(s : str) -> int:\n    n = len(s)\n    for i in range(1, n//2 + 1):\n        if n % i"
    ],
    "sample_296": [
        "beautifulSubstrings(\"banana\", 5)",
        "beautifulSubstrings(\"banana\", 5)",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "beautifulSubstrings(\"banana\", 4)",
        "beautifulSubstrings(s = \"baaab\", k = 2)",
        "beautifulSubstrings(\"abaeiou\", 5)",
        "beautifulSubstrings(\"banana\", 4)",
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(\"abacabadabacaba\", 3)"
    ],
    "sample_304": [
        "countSeniors(details = [\"John Smith, 35, Male, New York, NY\", \"Jane Doe, 42, Female, Los Angeles, CA\"])",
        "countSeniors(details = [\"John Smith 43\", \"Jane Doe 59\", \"Bob Johnson 81\"])",
        "countSeniors(details = [\"John sent 45 messages to Jane\", \"Jane sent 60 messages to John\"])",
        "countSeniors(details = [\"John sent 50 40 70\", \"Mary sent 60 50 80\"])",
        "countSeniors(details = [\"John Smith (60 years old)\", \"Jane Doe (50 years old)\", \"Bob Johnson (70 years old)\", \"Alice Williams (50 years old)\"])",
        "countSeniors(details = [\"Master of Python: Advanced Techniques\", \"1. Write Pythonic code\"])",
        "countSeniors(details = [\"John has 5 siblings\", \"Mary is a dog\", \"Bob has 3 pets\"])",
        "countSeniors(details = [\"1:0.9,1.1:0.8,1.2:0.7,1.3:0.6,1.4:0.5,1.5:0.4,1.6:0.3,1.7:0.2,1.8:0.1,1.9:0.0\", \"2:0.9,2.1:0.8,2.2:0.7,2.3:0.6,2.4:0.5,2.5:0.4,2.6:0.3,2.7:0.2,2.8:0.1,2.9:0.0\", \"3:0.9,3.1:0.8,3.2:0.7,3.3:0.6,3.4:0.5,3.5:0.4,3.6:0.3,3.7:0.2,3.8:0.1,3.9:0.0\"])",
        "countSeniors(details = [\"222-11-1111\", \"123-45-6789\", \"555-55-5555\", \"111-11-1112\"])",
        "countSeniors(details = [\"VIOLET-1:30-31/VIOLET-2:45-47\", \"SOLAR-1:90-92/SOLAR-2:110-112\"])"
    ],
    "sample_240": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s1 = \"ba\", s2 = \"nana\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(\"abcde\")",
        "minimumBeautifulSubstrings(s = \"abcb\")",
        "minimumBeautifulSubstrings(s = \"abcb\")",
        "minimumBeautifulSubstrings(s = \"abcbde\")",
        "minimumBeautifulSubstrings(\"ababcb\")"
    ],
    "sample_429": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])",
        "maxSubarrays(nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20])",
        "maxSubarrays([1, 3, 12, 24, 48])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations([1, 2, 3], [4, 5, 6])",
        "minOperations([1, 2, 3], [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(my_list = [\"mq\", \"px\", \"zy\"])",
        "minOperations([1, 2, 3], [4, 5, 6])",
        "minOperations(my_list = [\"mq\", \"px\", \"zy\"], output = 3)",
        "minOperations(my_list = [\"mq\", \"px\", \"zy\"], output = \"banana\")"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nn\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"nan\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nn\", \"aa\", \"na\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"a\", \"aa\", \"aaa\", \"aaaa\", \"abab\", \"ababa\", \"ababab\", \"abababab\"])"
    ],
    "sample_371": [
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"banana\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"Hello World\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts([1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])"
    ],
    "sample_256": [
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum(nums = [3, 2, 4, 1, 5])",
        "minimumSum(nums = [3, 4, 2, 3])",
        "minimumSum(nums = [1, 2, -1, -4, -20])",
        "minimumSum([1, 3, 1, 5, 1])",
        "minimumSum([1, 3, 2, 4, 5])",
        "minimumSum([4, 3, 2, 4, 5, 1, 2, 5])",
        "minimumSum([1,2,3,4,5])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1,0,1],[0,1,0],[1,0,1]])",
        "findChampion(grid = [[1,0,1],[0,1,0],[1,0,1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 2], [3, 4]])",
        "findChampion([[1,0,1],[0,1,0],[1,0,1]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[1,0,1],[0,1,1],[1,0,1]])"
    ],
    "sample_372": [
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(s = \"hello world\")",
        "sortVowels(my_str = \"hello world\")",
        "sortVowels(my_str = \"hello world\")",
        "sortVowels(s1 = \"banana\")",
        "sortVowels('hello world')",
        "sortVowels(\"Hello World\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s = \"Hello, World!\")"
    ],
    "sample_292": [
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"101\", s2 = \"001\")",
        "minimumSteps(s1 = \"101\", s2 = \"001\")",
        "minimumSteps(s1 = \"101\", s2 = \"010\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"1110111\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"10101010\")",
        "minimumSteps(s = \"1010101\")",
        "minimumSteps(s1 = \"1010101\", s2 = \"11011101\")",
        "minimumSteps(s1 = \"101101\", s2 = \"111111\")"
    ],
    "sample_403": [
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([1, 3, 2, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 5])",
        "minimumRightShifts([1, 3, 2, 4])",
        "minimumRightShifts(nums = [1, 3, 4, 5, 7, 9, 10])",
        "minimumRightShifts(my_list = [3, 4, 5])",
        "minimumRightShifts([3,4,1,2])",
        "minimumRightShifts(nums = [1, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_425": [
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations([1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5])"
    ],
    "sample_367": [
        "sortVowels(\"hello world\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s1 = \"ba\", s2 = \"nana\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s = \"hello world\")",
        "sortVowels(s = \"hello world\")",
        "sortVowels(\"banana\")",
        "sortVowels(s1 = \"banana\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s = \"hello world\")"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion([[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1,0,1],[0,1,0],[1,0,1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [1, 1, 1]])",
        "findChampion([[0, 0, 0], [1, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations([1, 2, 3, 4, 5], 3)",
        "minOperations([1, 2, 3, 4, 5], 2)",
        "minOperations([1, 2, 3, 4, 5], 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(my_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [2, 3, 4, 5], k = 3)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [1, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [4, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 3, 2, 4], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 3, 5], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [0, 2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [0, 2, 3], moveTo = [1, 3])",
        "relocateMarbles([1, 3, 5], [2, 4], [0, 1])",
        "relocateMarbles(nums = [1, 3, 2, 4, 5], moveFrom = [2, 4], moveTo = [3, 1])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum([1,2,3,4,5], 3, 2)",
        "maxSum([1,2,3,4,5], 3, 2)",
        "maxSum([1, 2, 3, 4, 5], 3, 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum([1, 2, 2, 3, 3, 3], 2, 3)",
        "maxSum([1,2,3,4,5,6,7,8,9,10], 2, 5)"
    ],
    "sample_390": [
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence(\"abcz\", \"abc\")",
        "canMakeSubsequence(\"abcd\", \"bcda\")",
        "canMakeSubsequence(\"abcd\", \"bcda\")",
        "canMakeSubsequence(\"abcz\", \"abdc\")",
        "canMakeSubsequence(\"abcz\", \"abdc\")",
        "canMakeSubsequence(\"abcd\", \"ace\")",
        "canMakeSubsequence(my_list = [\"abc\", \"def\", \"ghi\"])",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"abdc\")",
        "canMakeSubsequence(\"abac\", \"cab\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 0, 3], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum([0, 1, 2], [1, 2, 3])",
        "minSum(nums1 = [1, 2, 0, 3], nums2 = [3, 4, 5, 2])",
        "minSum(nums1 = [0, 1, 2, 0], nums2 = [1, 2, 1, 2])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"curr\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"first\", \"second\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"prev\", \"d\", \"e\", \"prev\", \"f\", \"g\"])",
        "lastVisitedIntegers(words = [\"prev\", \"curr\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"4\", \"5\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"4\", \"5\", \"prev\", \"6\", \"7\", \"8\", \"prev\", \"9\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"prev\", \"curr\", \"curr\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"curr\", \"next\", \"prevm\", \"prevprev\", \"prevnext\", \"curr\", \"nextnext\", \"nextprevm\", \"prevmnext\"])"
    ],
    "sample_366": [
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood([1, 2, 3])",
        "isGood(my_list = [1, 2, 3])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood(my_list = [1, 2, 3, 4])"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations([1,2,2,3,3,3])",
        "minOperations([1,2,2,3,3,3])",
        "minOperations([1,2,2,3,3,3,4,4,4,4])",
        "minOperations([1,1,2,2,3,3])",
        "minOperations([1,2,2,3,3,3,4,4,4,4])",
        "minOperations([1,2,2,3,3,3])",
        "minOperations([1,2,3,4,5])",
        "minOperations([1,2,2,3,3,3,4,4,4,4])",
        "minOperations([1,1,2,2,3,3])"
    ],
    "sample_451": [
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(\"aabbc\")",
        "minChanges(\"aabbc\")",
        "minChanges(s1 = \"abba\", s2 = \"abb\")",
        "minChanges(s1 = \"aba\", s2 = \"ab\")",
        "minChanges(s1 = \"aba\", s2 = \"aab\")",
        "minChanges(s1 = \"aaabbbccc\")",
        "minChanges(\"baaaabbbb\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 8, limit = 3)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,0,1], nums2 = [0,1,1])",
        "minSum(nums1 = [1,0,1], nums2 = [0,1,1])",
        "minSum(nums1 = [1,0,1], nums2 = [0,1,1])",
        "minSum(nums1 = [1,0,1], nums2 = [0,1,1])",
        "minSum(nums1 = [1,0,1], nums2 = [1,1,0])",
        "minSum(nums1 = [1,0,0], nums2 = [0,1,0])",
        "minSum(nums1 = [1,2,3], nums2 = [-1,-2,-3])",
        "minSum(nums1 = [1,0,1], nums2 = [0,1,1])",
        "minSum(nums1 = [1,0,1,0], nums2 = [1,0,1,1])",
        "minSum([0,0,0], [1,1,1])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1,3,4,2])",
        "minimumRightShifts([4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts([4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 4, 5])",
        "minimumRightShifts(nums = [1,3,4,5])",
        "minimumRightShifts([3,4,5,1,2])",
        "minimumRightShifts([1, 3, 2, 4, 5])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([3,4,5,1,2])",
        "minimumRightShifts(my_list = [1, 3, 4, 7, 5, 2, 6, 8])"
    ],
    "sample_381": [
        "countPairs([1,2,3,4,5], 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(my_list = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1,2,3,4], t = 5)",
        "countPairs([1,2,3,4,5], 8)",
        "countPairs(my_list = [1, 2, 3, 4, 5], t = 8)",
        "countPairs([1, 2, 3, 4, 5], 8)",
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs([1, 2, 3, 4, 5], 10)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"pq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"pq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"hello\", \"world\", \"python\"])",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"pencil\", \"book\", \"backpack\"])",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"book\", \"pencil\"])",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"book\", \"pencil\", \"eraser\", \"rabbit\"])",
        "lastVisitedIntegers(words = [\"apple\", \"pen\", \"post\", \"pencil\", \"book\", \"pen\"])",
        "lastVisitedIntegers(words = [\"p--p--\", \"p----\", \"p----\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"p\", \"r\", \"p\", \"q\", \"p\", \"r\", \"p\", \"q\", \"p\", \"r\", \"p\", \"q\", \"p\", \"r\", \"p\", \"q\", \"p\", \"r\", \"p\", \"q\", \"p\", \"r\", \"p\", \"q\", \"p\", \"r\", \"p\", \"q\", \"p\", \"r\", \"p\", \"q\", \"p\", \"r\", \"p\", \"q\", \"p\", \"r\", \"p\", \"q\", \"p\", \"r\", \"p\", \"q\", \"p\", \"r\"])",
        "lastVisitedIntegers(words = [\"pa\", \"p\", \"p\", \"pp\", \"a\", \"p\", \"p\", \"p\"])"
    ],
    "sample_386": [
        "canMakeSubsequence('az', 'za')",
        "canMakeSubsequence('az', 'zaaaz')",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence('abc', 'abdc')",
        "canMakeSubsequence('az', 'abc')",
        "canMakeSubsequence(\"ab\", \"ba\")",
        "canMakeSubsequence(\"abcz\", \"xyzw\")",
        "canMakeSubsequence(\"abcz\", \"abda\")",
        "canMakeSubsequence(\"ab\", \"ba\")",
        "canMakeSubsequence(s1 = \"zaa\", s2 = \"bbb\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(my_list = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])"
    ],
    "sample_416": [
        "countPairs([[0, 0], [0, 1], [1, 0], [1, 1]], 2)",
        "countPairs([[1, 2], [2, 3], [3, 4]], 2)",
        "countPairs([[0, 0], [1, 1], [2, 2]], 1)",
        "countPairs([[0,0], [1,1], [2,2]], 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0,0], [0,1], [1,0], [1,1], [2,2]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [3, 4]], k = 1)",
        "countPairs([[0, 0], [1, 1], [2, 2]], 1)",
        "countPairs(coordinates = [[0,0], [1,1], [2,2], [3,3]], k = 1)",
        "countPairs([[1, 2], [2, 1], [3, 4], [4, 3]], 2)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"na\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"olleh\", \"dlrow\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"gh\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ba\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bac\", \"cab\", \"def\", \"fed\", \"fed\"])"
    ],
    "sample_321": [
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength([1, 2, 3, 4])",
        "maxStrength(nums = [-1, 2, -3, 4])",
        "maxStrength(my_list = [-1, 2, -3, 4, -5])",
        "maxStrength([-1, -2, -3, -4, -5])",
        "maxStrength(my_list = [1, -2, 3, -4, 5])",
        "maxStrength([-1, -2, -3, 4, 5])",
        "maxStrength([1, -2, 3, 4, -5])",
        "maxStrength(my_list = [-2, 3, -1, 4, -5, 6])"
    ],
    "sample_475": [
        "minimumCoins([2, 3, 1, 1, 4])",
        "minimumCoins([2, 3, 1, 1, 4])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins([2, 7, 9, 3, 1])",
        "minimumCoins([2, 4, 1, 2, 5])",
        "minimumCoins(prices = [1, 5, 10])",
        "minimumCoins(prices = [2, 3, 1, 5, 8])",
        "minimumCoins([5, 2, 3, 1, 4])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals([1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 4, 4, 4])",
        "minLengthAfterRemovals([1, 2, 2, 3, 3, 3, 4, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 8, 9])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [2, 3, 1, 5], money = 10)",
        "buyChoco(prices = [1, 2, 5, 10], money = 8)",
        "buyChoco(prices = [1, 2, 3], money = 7)",
        "buyChoco([10, 20, 30], 50)",
        "buyChoco(prices = [1, 2, 3], money = 4)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev1\", \"prev2\", \"prev3\", \"prev4\", \"prev5\", \"prev6\", \"prev7\", \"prev8\", \"prev9\", \"prev10\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"mq\", \"px\", \"zy\", \"prev\", \"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"curr\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev1\", \"prev2\", \"prev3\", \"prev4\", \"prev5\", \"prev6\", \"prev7\", \"prev8\", \"prev9\", \"prev10\", \"prev11\", \"prev12\", \"prev13\", \"prev14\", \"prev15\", \"prev16\", \"prev17\", \"prev18\", \"prev19\", \"prev20\", \"prev21\", \"prev22\", \"prev23\", \"prev24\", \"prev25\", \"prev26\", \"prev27\", \"prev28\", \"prev29\", \"prev30\", \"prev31\", \"prev32\", \"prev33\", \"prev34\", \"prev35\", \"prev36\", \"prev37\", \"prev38\", \"prev39\", \"prev40\", \"prev41\", \"prev42\", \"prev43\", \"prev44\", \"prev45\", \"prev46\", \"prev47\", \"prev48\", \"prev49\", \"prev50\", \"prev51\", \"prev52\", \"prev53\", \"prev54\", \"prev55\", \"prev56\", \"prev57\", \"prev58\", \"prev59\", \"prev60\", \"prev61\", \"prev62\", \"prev63\", \"prev64\", \"prev65\", \"prev66\", \"prev67\", \"prev68\", \"prev69\", \"prev70\", \"prev71\", \"prev72\", \"prev73\", \"prev74\", \"prev75\", \"prev76\", \"prev77\", \"prev78\", \"prev79\", \"prev80\", \"prev81\", \"prev82\", \"prev83\", \"prev84\", \"prev85\", \"prev86\", \"prev87\", \"prev88\", \"prev89\", \"prev90\", \"prev91\", \"prev92\", \"prev93\", \"prev94\", \"prev95\", \"prev96\", \"prev97\", \"prev98\", \"prev99\", \"prev100\"])",
        "lastVisitedIntegers(words = [\"a1\", \"b2\", \"c3\", \"d4\", \"e5\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"4\", \"prev\", \"5\", \"prev\", \"6\", \"prev\", \"7\", \"prev\", \"8\", \"prev\", \"9\", \"prev\", \"10\", \"prev\", \"11\", \"prev\", \"12\", \"prev\", \"13\", \"prev\", \"14\", \"prev\", \"15\", \"prev\", \"16\", \"prev\", \"17\", \"prev\", \"18\", \"prev\", \"19\", \"prev\", \"20\"])",
        "lastVisitedIntegers(words = [\"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"prev\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"previous\", \"next\", \"first\", \"second\", \"previous\", \"next\", \"third\", \"previous\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"curr\", \"curr\", \"next\", \"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"mq\", \"px\", \"zy\", \"prev\", \"mq\", \"mq\", \"prev\", \"zy\", \"zy\", \"prev\", \"zy\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "sumCounts(my_list = [1, 2, 3, 4, 5])",
        "sumCounts(my_list = [1, 2, 3])",
        "sumCounts([1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3, 4, 4, 5])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 3], moveTo = [4, 5])",
        "relocateMarbles([1, 2, 3, 4, 5], [2, 3], [4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 5])",
        "relocateMarbles(my_list = [1, 2, 3], moveFrom = [2, 4], moveTo = [5, 6])",
        "relocateMarbles([1, 2, 3, 4, 5], [3, 4], [2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [3, 4, 5], moveTo = [6, 7, 8])",
        "relocateMarbles(my_list = [5, 6, 8, 9], moveFrom = [2, 3], moveTo = [8, 9])"
    ],
    "sample_387": [
        "canMakeSubsequence('abcde', 'ace')",
        "canMakeSubsequence('abcde', 'ace')",
        "canMakeSubsequence('abc', 'def')",
        "canMakeSubsequence('abc', 'def')",
        "canMakeSubsequence(\"abcde\", \"ace\")",
        "canMakeSubsequence(\"abc\", \"def\")",
        "canMakeSubsequence('hello', 'world')",
        "canMakeSubsequence('abc', 'abb')",
        "canMakeSubsequence(\"ab\", \"bc\")",
        "canMakeSubsequence(\"abcd\", \"bcda\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")"
    ],
    "sample_311": [
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum(matrix = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(my_list = [[1, 2], [3, 4]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 5], money = 10)",
        "buyChoco([10, 20, 30], 50)",
        "buyChoco(a = [1, 2, 5], money = 10)",
        "buyChoco(a = [1, 2, 5], money = 6)",
        "buyChoco(a = [1, 2, 5], money = 5)",
        "buyChoco(a = [1, 2, 5], money = 5)",
        "buyChoco([1, 2, 3], 5)",
        "buyChoco(my_list = [1, 2, 5], money = 7)",
        "buyChoco(my_list = [1, 5, 10], money = 7)",
        "buyChoco([1, 5, 10], 15)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 5])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts([4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(my_list = [4, 5, 6, 7, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 4, 5, 6])",
        "minimumRightShifts([1, 3, 5, 7, 9, 2, 4, 6, 8, 10])",
        "minimumRightShifts([1, 3, 5, 7, 9])",
        "minimumRightShifts(my_list = [4, 5, 6, 7, 0, 1, 2])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, -2, 4])",
        "maxStrength(my_list = [2, 3, 4, 5])",
        "maxStrength(my_list = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5, 6])",
        "maxStrength(nums = [2, 3, 4, 5, 6])",
        "maxStrength(my_list = [2, 3, 4])"
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n=6, limit=3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 9, limit = 4)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(my_list = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals([1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(my_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 9, 9])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1,0,1],[0,1,0],[1,0,1]])",
        "findChampion(grid = [[1, 2], [3, 4]])",
        "findChampion([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion([[1,0,1],[0,1,0],[1,0,1]])",
        "findChampion(grid = [[1,0,1],[0,1,0],[1,0,1]])",
        "findChampion([[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1,0],[0,1]])",
        "findChampion([[1, 0], [0, 1]])"
    ],
    "sample_432": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays([1, 3, 2, 4, 5, 7, 6, 8])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 3)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababa\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 5)",
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 3)",
        "beautifulSubstrings(s = \"ababab\", k = 3)"
    ],
    "sample_379": [
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9])",
        "minimumSeconds([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumSeconds([1,1,1,1,1,2,2,3,3,3,3])"
    ],
    "sample_327": [
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(123456789)",
        "isFascinating(n = 12)",
        "isFascinating(9)",
        "isFascinating(n=5)",
        "isFascinating(10)",
        "isFascinating(n = 8)",
        "isFascinating(123045)",
        "isFascinating(my_int = 4567)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence([1, 2, 3, 4, 5], 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 12)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10)"
    ],
    "sample_309": [
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum(matrix = [[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum(m = [[1, 2], [3, 4]])",
        "matrixSum(my_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1, 2], [3, 4]])"
    ],
    "sample_326": [
        "isFascinating(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isFascinating(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isFascinating(n = 1234)",
        "isFascinating(n = 5)",
        "isFascinating(n = 1)",
        "isFascinating(my_list = [1, 2, 3])",
        "isFascinating(n = 42)",
        "isFascinating(n = 3)",
        "isFascinating(my_int = 10)",
        "isFascinating(n = 4567)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [1, 0, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 2, 4, 1, 5])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum([1, 3, 2, 4, 5])"
    ],
    "sample_450": [
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(s1 = \"abccba\")",
        "minChanges(s1 = \"aabbc\")",
        "minChanges(s1 = \"aaa\", s2 = \"aa\")",
        "minChanges(s1 = \"aaabbbcc\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s1 = \"aaaaa\")",
        "minChanges(s1 = \"baab\", s2 = \"nana\")",
        "minChanges(s1 = \"baaabccc\", s2 = \"aaabccca\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"101\", s2 = \"010\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"110\", x = 0)",
        "minOperations(s1 = \"101\", s2 = \"010\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"110\", x = 3)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 3)",
        "minOperations(\"10101\", \"11001\", 1)",
        "minOperations(s1 = \"1010\", s2 = \"1111\", x = 2)",
        "minOperations(\"1010101\", \"1101010\", 2)",
        "minOperations(\"101\", \"011\", 3)",
        "minOperations(\"1010\", \"110011\", 3)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(3, 3, 3)",
        "longestString(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "longestString(x = 5, y = 7, z = 3)",
        "longestString(x = 5, y = 7, z = 3)",
        "longestString(x = 5, y = 7, z = 9)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = \"hello\", y = \"world\", z = \"hi\")"
    ],
    "sample_434": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(my_list = [1, 2, 3, 4, 5])",
        "maxSubarrays([1, 3, 2, 4, 5, 7, 6, 8])",
        "maxSubarrays([1, 3, 2, 5, 4, 7, 6, 8])",
        "maxSubarrays([1, 3, 2, 4, 5, 2, 1])",
        "maxSubarrays([1, 2, -2, 4])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John Smith is 35 years old\", \"Jane Doe is 65 years old\"])",
        "countSeniors(details = [\"John (31)\", \"Jane (45)\", \"Bob (60)\"])",
        "countSeniors(details = [\"John Smith 25 years old\", \"Jane Doe 60 years old\"])",
        "countSeniors(details = [\"John Smith (35)\", \"Jane Doe (50)\", \"Bob Johnson (25)\"])",
        "countSeniors(details = [\"John Smith (42)\", \"Jane Doe (65)\", \"Bob Johnson (90)\"])",
        "countSeniors(details = [\"John (30) - Mary (45)\", \"Bob (25) - Jane (60)\"])",
        "countSeniors(details = [\"John (10) - Male\", \"Jane (20) - Female\", \"Bob (50) - Male\"])",
        "countSeniors(details = [\"Name: John, Age: 65, Gender: Male, Seniors: 2\", \"Name: Jane, Age: 40, Gender: Female, Seniors: 1\"])",
        "countSeniors(details = [\"John 52\", \"Jane 58\", \"Bob 58\", \"Alice 53\"])",
        "countSeniors(details = [\"john 26\", \"jane 35\", \"jill 42\", \"bob 37\"])"
    ],
    "sample_431": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [-1, 0, 1, 2, -1, -4])",
        "maxSubarrays([1, 2, 3, 4, 5])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [5, 7, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [1, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [0, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [0, 1])",
        "relocateMarbles(my_list = [1, 2, 3, 4, 5], moveFrom = [3, 4], moveTo = [1, 2])",
        "relocateMarbles([1, 2, 3, 4], [2, 3], [5, 6])",
        "relocateMarbles([1, 2, 3, 4], [1, 3], [2, 4])",
        "relocateMarbles(my_list = [1, 2, 3, 4], moveFrom = [2, 3], moveTo = [5, 6])",
        "relocateMarbles(my_nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [0, 3])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(\"abc\", \"def\", \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"abc\")",
        "findMinimumOperations(\"abc\", \"bcd\", \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(\"abc\", \"aba\", \"abc\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals([1,2,2,3,3,3])",
        "minLengthAfterRemovals([1,2,2,3,3,3])",
        "minLengthAfterRemovals([1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(my_list = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals([1,2,2,3,4,4,4,5,5])",
        "minLengthAfterRemovals(my_list = [1,2,2,3,4,4,4,5,5])",
        "minLengthAfterRemovals([1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [2,3,1,4,2,5,7,2])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 1], [1, 2, 1], [2, 3, 1], [0, 3, 1], [1, 4, 1]])",
        "maximizeTheProfit(my_list = [(0, 1, 10), (1, 2, 20), (2, 3, 30), (3, 4, 40), (4, 5, 50), (5, 6, 60), (6, 7, 70), (7, 8, 80), (8, 9, 90), (9, 10, 100)])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [2, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 1], [2, 3, 1], [3, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3], [1, 5, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 3, 1], [3, 1, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [0, 3, 1], [1, 4, 2], [2, 3, 4]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 2], [1, 2, 3], [0, 2, 1], [1, 3, 1], [2, 3, 1]])",
        "maximizeTheProfit(my_list = [[1, 2, 5], [2, 3, 4], [1, 3, 6]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 4, 10], [2, 3, 6], [3, 5, 7]])"
    ],
    "sample_153": [
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 3)",
        "canSplitArray([1,2,3,4,5], 2)",
        "canSplitArray([1,2,3,4,5], 2)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray([1,2,3,4,5], 5)",
        "canSplitArray([1,2,3,4,5],3)",
        "canSplitArray([1,2,3,4,5,6,7,8,9], 3)"
    ],
    "sample_106": [
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty([1, 3, 2, 4, 5], 1)",
        "maximumBeauty(nums = [5, 10, 15], k = 10)",
        "maximumBeauty([1, 2, 3, 4, 5], 1)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = \"banana, apple, orange\", separator = \",\")",
        "splitWordsBySeparator(words = [\"hello world\"], separator = \" \")",
        "splitWordsBySeparator(words = \"banana,apple,orange\", separator = \",\")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"n\")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"banana\", \"split\", \"words\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"c\"], separator = \"n\")"
    ],
    "sample_226": [
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays(my_list = [1, 2, 3])",
        "countWays([1,2,3])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4])",
        "countWays([1, 2, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays([1, 2, 3])",
        "countWays([1, 1, 1, 1])"
    ],
    "sample_122": [
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1,2,3,2,1])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minimumIndex(nums = [1,2,2,3,4,4,4,5,5])",
        "minimumIndex(my_list = [1, 2, 2, 3, 3, 3])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5, 5, 6, 6])",
        "minimumIndex([1,2,2,1])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100]])",
        "numberOfPoints([[1,2],[2,3],[4,5]])",
        "numberOfPoints([[1,2],[3,4],[5,6],[7,8],[9,10]])",
        "numberOfPoints([[1,2], [5,6], [3,4]])",
        "numberOfPoints([[1,5], [10,15], [20,25]])",
        "numberOfPoints([[1, 5], [5, 10], [10, 15], [15, 20]])",
        "numberOfPoints([[1, 5], [5, 8], [10, 12]])",
        "numberOfPoints(nums = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100]])",
        "numberOfPoints([[0,1],[1,2],[2,3],[0,2],[1,3],[3,4]])",
        "numberOfPoints(nums = [[0,2],[1,3],[2,4],[5,7],[6,8],[8,10],[9,11],[10,12],[12,14],[15,17],[17,19],[20,22],[22,24],[25,26],[27,29],[30,32],[32,34],[35,35],[37,38],[38,40],[40,42],[42,44],[45,45],[48,50],[50,52],[52,54],[55,55],[57,58],[58,60],[60,62],[64,66],[66,68],[68,70],[70,72],[72,74],[75,77],[78,80],[80,82],[82,84],[85,87],[87,90],[90,92],[92,94],[94,96],[96,98],[98,100],[100,102],[102,104],[104,108],[108,110],[110,112],[112,114],[114,116],[116,118],[118,120],[120,122],[122,124],[124,126],[126,128],[128,130],[130,132],[132,134],[134,136],[136,138],[138,140],[140,142],[142,144],[144,146],[146,148],[148,150],[150,152],[152,154],[154,156],[156,160],[160,162],[162,164],[164,166],[166,168],[168,170],[170,172],[172,174],[174,176],[176,178],[178,180],[180,182],[182,184],[184,186],[186,188],[188,190],[190,192],[192,194],[194,196],[196,198],[198,200],[200,202],[202,204],[204,206],[206,208],[208,210],[210,212],[212,214],[214,216],[216,218],[218,220],[220,222],[222,224],[224,226],[226,228],[228,230],[230,232],[232,234],[234,236],[236,238],[238,240],[240,242],[242,244],[244,246],[246,248],[248,250],[250,252],[252,254],[254,256],[256,258],[258,260],[260,262],[262,264],[264,266],[266,268],[268,270],[270,272],[272,274],[274,276],[276,278],[278,280],[280,282],[282,284],[284,286],[286,288],[288,290],[290,292],[292,294],[294,296],[296,298],[298,300],[300,302],[302,304],[304,306],[306,308],[308,310],[310,312],[312,314],[314,316],[316,318],[318,320],[320,322],[322,324],["
    ],
    "sample_45": [
        "semiOrderedPermutation(my_list = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(my_list = [3,1,2])",
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(my_list = [2,3,1,4,5])",
        "semiOrderedPermutation(my_list = [2,3,4,1])",
        "semiOrderedPermutation(my_list = [2,3,4,1])",
        "semiOrderedPermutation(my_list = [3,1,4,2])",
        "semiOrderedPermutation(nums = [3,2,1,4])",
        "semiOrderedPermutation([1,2,3,4])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 2, 1])",
        "minimumIndex([1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5])",
        "minimumIndex(nums = [1, 2, 2, 1, 1, 1, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1])",
        "minimumIndex([1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8])",
        "minimumIndex([3, 1, 2, 3, 3, 1, 2, 3])"
    ],
    "sample_176": [
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 5, k = 6)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 5, k = 7)"
    ],
    "sample_218": [
        "numberOfPoints([[1, 3], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 5], [2, 3], [4, 6]])",
        "numberOfPoints(nums = [[0,1],[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1, 5], [3, 7], [4, 6]])",
        "numberOfPoints(nums = [[1, 5], [3, 4], [2, 6]])",
        "numberOfPoints(my_list = [[1, 5], [3, 7], [4, 6]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 5], [5, 6], [6, 7], [2, 8], [8, 9]])",
        "numberOfPoints(nums = [[0, 2], [2, 4], [4, 6], [6, 8], [8, 10], [10, 12], [12, 14], [14, 16], [16, 18], [18, 20], [20, 22], [22, 24], [24, 26], [26, 28], [28, 30], [30, 32], [32, 34], [34, 36], [36, 38], [38, 40], [40, 42], [42, 44], [44, 46], [46, 48], [48, 50], [50, 52], [52, 54], [54, 56], [56, 58], [58, 60], [60, 62], [62, 64], [64, 66], [66, 68], [68, 70], [70, 72], [72, 74], [74, 76], [76, 78], [78, 80], [80, 82], [82, 84], [84, 86], [86, 88], [88, 90], [90, 92], [92, 94], [94, 96], [96, 98], [98, 100], [100, 102], [102, 104], [104, 106], [106, 108], [108, 110], [110, 112], [112, 114], [114, 116], [116, 118], [118, 120], [120, 122], [122, 124], [124, 126], [126, 128], [128, 130], [130, 132], [132, 134], [134, 136], [136, 138], [138, 140], [140, 142], [142, 144], [144, 146], [146, 148], [148, 150], [150, 152], [152, 154], [154, 156], [156, 160], [160, 162], [162, 164], [164, 166], [166, 168], [168, 170], [170, 172], [172, 174], [174, 176], [176, 178], [178, 180], [180, 182], [182, 184], [184, 186], [186, 188], [188, 190], [190, 192], [192, 194], [194, 196], [196, 198], [198, 200], [200, 202], [202, 204], [204, 206], [206, 208], [208, 210], [210, 212], [212, 214], [214, 216], [216, 218], [218, 220], [220, 222], [222, 224], [224, 226], [226, 228], [228, 230], [230, 232], [232, 234], [234, 236], [236, 238], [238, 240], [240, 242], [242, 244], [244, 246], [246, 248], [248, 250], [250, 252], [252, 254], [254,"
    ],
    "sample_101": [
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps([1, 3, 1, 4, 2], 2)",
        "maximumJumps([2,3,1,1,4], 2)",
        "maximumJumps([1, 3, 1, 1, 5], 2)",
        "maximumJumps([1,2,3,4,5], 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 5)",
        "maximumJumps([3, 4, 5, 10, 11, 12], 3)"
    ],
    "sample_173": [
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n=5, k=2)"
    ],
    "sample_154": [
        "canSplitArray([1,2,3,4,5], 5)",
        "canSplitArray([1,2,3,4,5], 8)",
        "canSplitArray([1,2,3,4,5], 8)",
        "canSplitArray([1,2,3,4], 5)",
        "canSplitArray([1,2,3,4,5], 5)",
        "canSplitArray([1, 2, 3, 4], 5)",
        "canSplitArray([1,2,3,4,5], 8)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray([2, 7, 9, 3, 1], 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 7)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 50], [2, 3, 20], [3, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 10], [3, 2, 5], [4, 3, 8]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 50], [1, 2, 30], [3, 4, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 10], [2, 3, 6], [4, 8, 2], [5, 9, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 5, 1], [5, 3, 2], [3, 4, 5], [4, 1, 2]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 1], [3, 4, 2], [4, 5, 3], [5, 6, 4], [6, 7, 5], [7, 8, 6], [8, 9, 7], [9, 10, 8], [10, 11, 9]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 1], [3, 4, 2], [4, 2, 1], [1, 3, 3], [5, 2, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,4], [2,5,6], [5,5,10]])",
        "maximizeTheProfit(n = 6, offers = [[2, 1, 2], [3, 1, 3], [4, 1, 4], [5, 2, 3], [6, 2, 4], [7, 3, 5]])"
    ],
    "sample_108": [
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 1)",
        "longestEqualSubarray([1,2,3,4,5], 1)",
        "longestEqualSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)",
        "longestEqualSubarray(nums = [1,2,3,2,3,4,3,2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5, 4, 5, 6], k = 3)"
    ],
    "sample_8": [
        "colorTheArray(n = 5, queries = [[2, 1], [4, 2], [1, 3]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 3]])",
        "colorTheArray(5, [[2, 2], [1, 3], [2, 2]])",
        "colorTheArray(n = 7, queries = [[2, 1], [4, 2], [5, 3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 2], [2, 2]])",
        "colorTheArray(n = 5, queries = [[2, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[2, 3], [1, 4], [2, 2], [1, 3]])",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 4], [2, 3], [4, 2]])"
    ],
    "sample_55": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(\"abcde\")",
        "smallestString(\"abcde\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(\"hello world\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5], 2)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5])",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5])",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray([1, 3, 2, 4, 6, 5, 7, 9], 4)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 1], threshold = 2)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5])"
    ],
    "sample_89": [
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6], 8)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 6, 5, 7, 9, 8], threshold = 4)"
    ],
    "sample_5": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 2, 3, 4, 5, 5])",
        "distinctDifferenceArray([1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4, 5])"
    ],
    "sample_22": [
        "minLength(\"abc\")",
        "minLength(\"abc\")",
        "minLength(\"hello\")",
        "minLength(\"abcde\")",
        "minLength(\"hello\")",
        "minLength(\"hello\")",
        "minLength(\"hello world\")",
        "minLength(\"hello world\")",
        "minLength(\"abcde\")",
        "minLength(\"abcbcadef\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abcba\")",
        "minimumCost(s1 = \"abc\", s2 = \"def\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"banana\")",
        "minimumCost(s = \"banana\")",
        "minimumCost(s = \"abcbcba\")",
        "minimumCost(s1 = \"abc\", s2 = \"def\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(\"abcda\")"
    ],
    "sample_156": [
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4], 5)",
        "canSplitArray([1, 2, 3, 4], 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)"
    ],
    "sample_12": [
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([0, 1, 0])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([1,2,3,4,5])",
        "doesValidArrayExist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist([0, 1, 0])"
    ],
    "sample_109": [
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([1,2,3,4,5], 3)",
        "checkArray([1,2,3,4,5], 3)",
        "checkArray([1,2,3,4,5], 3)",
        "checkArray([3,1,4,1,5,9,2,6,5,3,5], 4)",
        "checkArray([1,2,3,4,5], 2)",
        "checkArray([3,4,4,5,5], 2)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11, 12, 13], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 9, 9, 9], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 9, 9, 9], target = 9)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits(my_list = [5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [0b1010, 0b0101, 0b1100], k = 1)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 4, 5, 9], k = 6)",
        "maximumBeauty(nums = [1, 5, 2, 19, 18, 25], k = 10)"
    ],
    "sample_205": [
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"99\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"99\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"120345\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(\"12\")",
        "minimumOperations(\"12345\")",
        "minimumOperations(num = \"123045\")"
    ],
    "sample_204": [
        "minimumOperations(s1 = \"00\", s2 = \"25\")",
        "minimumOperations(s1 = \"00\", s2 = \"25\")",
        "minimumOperations(s = \"00\")",
        "minimumOperations(s = \"0011001\")",
        "minimumOperations(s = \"0011001\")",
        "minimumOperations(s1 = \"00\", s2 = \"11\")",
        "minimumOperations(s1 = \"00\", s2 = \"25\")",
        "minimumOperations(s1 = \"01101\", s2 = \"00111\")",
        "minimumOperations(s1 = \"1100110\", s2 = \"1010101\")",
        "minimumOperations(\"00\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(my_list = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(my_list = [3, 2, 1, 4])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRLR\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cherry\"], s = \"ABC\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"USA\"], s = \"USA\")",
        "isAcronym(words = [\"Mr.\", \"Mrs.\", \"Dr.\"], s = \"Mister\")",
        "isAcronym(words = [\"Alpha\", \"Bravo\"], s = \"AlphaBravo\")",
        "isAcronym(words = [\"NASA\", \"USA\", \"PIN\"], s = \"PIN\")",
        "isAcronym(words = [\"P\", \"A\", \"N\"], s = \"PANNAN\")",
        "isAcronym(words = [\"Artificial\", \"Intelligence\"], s = \"ANIbTECN\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 10, k = 5)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 7, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 6, k = 2)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65])",
        "countBeautifulPairs(nums = [12, 24, 36, 48])",
        "countBeautifulPairs([12, 15, 18, 20])",
        "countBeautifulPairs(nums = [10, 7, 5, 15])",
        "countBeautifulPairs(nums = [22, 28, 38])",
        "countBeautifulPairs(nums = [12, 21, 33, 43, 56])",
        "countBeautifulPairs([12, 21, 35, 42, 56, 63])",
        "countBeautifulPairs(nums = [22, 101, 202])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps([1,2,3,4,5], 7)",
        "maximumJumps([1,2,3,4,5], 7)",
        "maximumJumps(nums = [1,3,1,4,2], target = 3)",
        "maximumJumps([1,2,3,4,5], 3)",
        "maximumJumps([1,2,3,4,5], 5)",
        "maximumJumps([1,2,3,4,5], 5)",
        "maximumJumps(nums = [1,3,5,8,10], target = 5)",
        "maximumJumps([1,3,5,6,7], 2)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs([10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs([10, 20, 30, 40, 50])",
        "countBeautifulPairs([1, 2, 3, 4])",
        "countBeautifulPairs(nums = [10, 11, 12, 13, 14, 15])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [1, 3, 5, 7])",
        "countBeautifulPairs(nums = [1, 7, 4, 3, 9, 2, 10])"
    ],
    "sample_18": [
        "minLength(\"abcABC\")",
        "minLength(\"abcde\")",
        "minLength(\"hello world\")",
        "minLength(s1 = \"abc\", s2 = \"def\")",
        "minLength(\"abc\")",
        "minLength(\"abcABCabc\")",
        "minLength(my_string = \"abcde\")",
        "minLength(s1 = \"abcd\")",
        "minLength(\"ABACD\")",
        "minLength(\"hello AB, world CD\")"
    ],
    "sample_150": [
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(\"hi\")",
        "finalString(s1 = \"hello\")",
        "finalString(my_string = \"hello\")",
        "finalString(s1 = \"hello\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"hi\")",
        "finalString(s1 = \"banana\")"
    ],
    "sample_15": [
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist(my_list = [1, 2, 3])",
        "doesValidArrayExist(my_list = [2, 3, 4])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(my_list = [1, 5, 3, 4, 2])",
        "findValueOfPartition([1, 5, 3, 4, 2])",
        "findValueOfPartition(my_list = [1, 5, 3, 4])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [5, 3, 1, 4, 2])",
        "findValueOfPartition(my_list = [5, 3, 1, 4, 2])",
        "findValueOfPartition([1, 3, 5])",
        "findValueOfPartition(nums = [5, 3, 1, 2, 4])",
        "findValueOfPartition(nums = [4, 2, 3, 1, 5])"
    ],
    "sample_7": [
        "colorTheArray(n = 5, queries = [[2,1],[3,2]])",
        "colorTheArray(n = 5, queries = [[2,1],[4,1]])",
        "colorTheArray(n = 5, queries = [[2,1],[3,2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 5], [3, 4]])",
        "colorTheArray(n = 5, queries = [[2,1],[4,3]])",
        "colorTheArray(n = 5, queries = [[2,1],[3,1],[1,2],[3,3]])",
        "colorTheArray(n = 5, queries = [[0,1],[2,2],[0,3],[3,4]])",
        "colorTheArray(n = 5, queries = [[2,2],[3,3],[1,1],[4,4],[0,0]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,2],[3,4],[4,2],[1,1]])",
        "colorTheArray(n = 10, queries = [[0,1],[1,0],[3,2],[4,5],[8,7],[10,10]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 2, target = 7)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 4, target = 10)"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 10, k = 5)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 10, k = 7)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11, 12, 13, 14, 15], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17], target = 10)"
    ],
    "sample_152": [
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 6)",
        "canSplitArray([1, 2, 3, 4, 5], 3)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 7, k = 3)",
        "countInterestingSubarrays([1, 2, 3, 4, 5], 3, 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays([1, 2, 3, 4, 5], 3, 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 1, 4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 7, k = 3)",
        "countInterestingSubarrays(nums = [1,1,2,2,2,3,3,4,4,4,4], m = 2, k = 2)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 3)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9,10], 5)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9,10], 5)",
        "longestAlternatingSubarray([1,7,3,4,9,2,5])",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 3)",
        "longestAlternatingSubarray([1,7,3,4,9,2,5,8,10,11], 8)",
        "longestAlternatingSubarray([1,3,5,7,9], 5)",
        "longestAlternatingSubarray([1,2,3,4,5], 2)",
        "longestAlternatingSubarray([1,7,3,4,9,2,5,8,10,6], 7)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(my_list = [1, 0, 1, 1])",
        "numberOfGoodSubarraySplits([1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(my_list = [\"101\", \"111\", \"000\"])",
        "numberOfGoodSubarraySplits(my_list = [\"1010\", \"0101\", \"1010\", \"0000\"])"
    ],
    "sample_33": [
        "removeTrailingZeros(\"0000\")",
        "removeTrailingZeros(\"0000\")",
        "removeTrailingZeros(\"0\")",
        "removeTrailingZeros(num = \"0\")",
        "removeTrailingZeros(num = \"0512301\")",
        "removeTrailingZeros(num = \"00000\")",
        "removeTrailingZeros(my_num = \"0512301\")",
        "removeTrailingZeros(num = \"1000\")",
        "removeTrailingZeros(num = \"12030\")",
        "removeTrailingZeros(my_list = ['123001', '0000', '123000'])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 2, b = 3)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(my_list = [\"mq\", \"px\", \"zy\"])",
        "makeTheIntegerZero(my_list = [\"mq\", \"px\", \"zy\"])",
        "makeTheIntegerZero(my_list = [1, 2, 3, 4, 5])",
        "makeTheIntegerZero(a = 2, b = 3)",
        "makeTheIntegerZero(a = 0b101, b = 0b110)",
        "makeTheIntegerZero(10, 3)"
    ],
    "sample_157": [
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4, 5], 8)",
        "canSplitArray([1, 2, 3, 4], 5)",
        "canSplitArray([1, 2, 3, 4, 5], 3)",
        "canSplitArray([1, 2, 3, 4, 5], 6)",
        "canSplitArray([1, 2, 3, 4], 5)"
    ],
    "sample_161": [
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum([10, 2])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum(nums = [0, 0, 0, 0, 0])",
        "maxSum([-1, -2, -3])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n=3, target=5)",
        "minimumPossibleSum(3, 5)",
        "minimumPossibleSum(n=3, target=7)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 3)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1,3,5,7])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition([3, 1, 4, 2])",
        "findValueOfPartition(nums = [1,3,2])",
        "findValueOfPartition([3,1,4])",
        "findValueOfPartition([5,2,1,3,4])",
        "findValueOfPartition(nums = [5, 7, 1, 3, 2])",
        "findValueOfPartition(nums = [5,6,9,1,2])",
        "findValueOfPartition([3,4,5])"
    ],
    "sample_214": [
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[3,4]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,2], [3,4], [5,6]])",
        "numberOfPoints([[1,3], [2,4], [5,7], [6,8]])",
        "numberOfPoints(nums = [[1,3],[4,6],[7,9],[10,12]])",
        "numberOfPoints([[1, 2], [2, 3], [4, 5], [5, 6]])"
    ],
    "sample_219": [
        "numberOfPoints([[1, 3], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints([[1,2], [2,3], [3,4]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 3], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints(my_list = [[1, 3], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints([[1, 2], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1,2], [2,3], [3,4], [4,5], [5,6], [6,7], [7,8], [8,9], [9,10]])",
        "numberOfPoints([[1, 5], [2, 3], [4, 7], [8, 9]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 6], [7, 8], [9, 10]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"x\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"python\"], separator = \" \")",
        "splitWordsBySeparator(words = \"hello world\", separator = \" \")",
        "splitWordsBySeparator(words = [\"hello,world\", \"how,are,you?\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello, world\", \"how are you\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"ba\", \"na\", \"nn\", \"aa\", \"nn\"], separator = \"\")"
    ],
    "sample_200": [
        "minOperations([1, 2, 3, 4, 5], 7)",
        "minOperations([1, 2, 3, 4, 5], 7)",
        "minOperations([1, 2, 3], 6)",
        "minOperations(nums = [1, 2, 3], target = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 8)",
        "minOperations(my_list = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 9)",
        "minOperations([1,2,3,4,5], 5)",
        "minOperations(nums=[1, 2, 4, 8], target=7)",
        "minOperations([1, 2, 3], 6)"
    ],
    "sample_107": [
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1,2,3,4,5], 3)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)",
        "checkArray(my_list = [1, 2, 3, 4, 5], k = 3)",
        "checkArray([1, 2, 3, 2, 1], 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)"
    ],
    "sample_16": [
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist(my_list = [1, 0, 1, 1])",
        "doesValidArrayExist([1,0,1,0])",
        "doesValidArrayExist([1,0,1,0])",
        "doesValidArrayExist([1,0,1,0,1])",
        "doesValidArrayExist([1, 0, 1, 1, 0])",
        "doesValidArrayExist(my_list = [1, 0, 1, 1])",
        "doesValidArrayExist([0, 1, 0, 0, 1])",
        "doesValidArrayExist(my_list = [0, 1, 0, 0, 1, 1])"
    ],
    "sample_159": [
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [10, 20, 30])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [-1, 2, -3, 4, -5])",
        "maxSum([-1, 2, -3, 4, -5])"
    ],
    "sample_96": [
        "continuousSubarrays([1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1])",
        "continuousSubarrays([1, 2, 2, 3, 3, 3])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "continuousSubarrays([1, 2, 2, 3, 3, 3])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1,2,3,4,5])",
        "continuousSubarrays([1,2,2,3,3,3,4,4,5])"
    ],
    "sample_4": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1,2,3,4,5,6,7,8,9,10])",
        "distinctDifferenceArray([1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 4])",
        "distinctDifferenceArray(nums = [1,2,2,3,3,3,4,5,5])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3], b = [3, 2, 1])",
        "maxNonDecreasingLength([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3], b = [2, 3, 4])",
        "maxNonDecreasingLength([1, 2, 3], [3, 2, 1])",
        "maxNonDecreasingLength([1, 2, 3], [3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3], b = [1, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength([1, 2, 3, 4], [5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(my_tank = 3, add_tank = 2)",
        "distanceTraveled(main_tank = 10, additional_tank = 5)",
        "distanceTraveled(my_tank = 10, add_tank = 2)",
        "distanceTraveled(main_tank = 3, additional_tank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 3)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(main_tank = 10, add_tank = 7)"
    ],
    "sample_160": [
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum([1,2,3,4,5])",
        "maxSum([1,2,3,4,5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100])",
        "maxSum([10, 20, 30, 40])"
    ],
    "sample_52": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s = \"abcde\")",
        "smallestString(s = \"hello\")",
        "smallestString(s1 = \"abcde\", s2 = \"abxyz\")",
        "smallestString(s1 = \"ba\")",
        "smallestString(my_string = \"banana\")",
        "smallestString(s1 = \"aaa\", s2 = \"aab\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition(nums = [4, 3, 2, 1])",
        "findValueOfPartition([1, 5, 9, 15])",
        "findValueOfPartition(nums = [1, 3, 5])",
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition(nums = [5, 2, 8, 6])",
        "findValueOfPartition(nums = [5, 7, 1, 2, 3])",
        "findValueOfPartition([1, 5, 2, 7, 3])",
        "findValueOfPartition(nums = [5, 7, 10, 9])",
        "findValueOfPartition(nums = [5, 7, 9, 10, 0, 1, 2, 3, 4, 6])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"race\")",
        "makeSmallestPalindrome(\"racecar\")",
        "makeSmallestPalindrome(my_str = \"racecar\")",
        "makeSmallestPalindrome(my_string = \"racecar\")",
        "makeSmallestPalindrome(s1 = \"race\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"abc\", s2 = \"def\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"level\")",
        "makeSmallestPalindrome(s = \"racecar\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = -1, num2 = -2)",
        "makeTheIntegerZero(num1 = 10, num2 = 7)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 123, num2 = 456)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 10, num2 = 7)",
        "makeTheIntegerZero(num1 = 42, num2 = 13)",
        "makeTheIntegerZero(my_num1 = -1, my_num2 = -2)",
        "makeTheIntegerZero(0, 0)",
        "makeTheIntegerZero(num1 = 42, num2 = 23)"
    ],
    "sample_217": [
        "numberOfPoints([[1,5],[10,15],[20,25]])",
        "numberOfPoints([[1,2],[2,3],[1,2]])",
        "numberOfPoints([[1,2],[2,3],[1,2]])",
        "numberOfPoints(nums = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints(nums = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100]])",
        "numberOfPoints([[1,5], [2,3], [4,6], [7,9]])",
        "numberOfPoints([[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]])",
        "numberOfPoints([[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[\"0_0\", \"0_1\", \"1_1\", \"1_2\"], [\"2_2\", \"2_3\", \"3_3\", \"3_4\"]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 1)"
    ],
    "sample_40": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(\"abc\")",
        "minimumCost(\"abcde\")",
        "minimumCost(s1 = \"abcde\")",
        "minimumCost(s = \"aabccc\")"
    ],
    "sample_13": [
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([1, 0, 1, 0])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([0, 0, 1, 1])",
        "doesValidArrayExist(my_list = [0, 1, 0, 1])",
        "doesValidArrayExist([True, False, True, False])",
        "doesValidArrayExist([False, False, True, False])"
    ],
    "sample_3": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4])",
        "distinctDifferenceArray([1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray([1, 2, 2, 3])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 5, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11, 12, 13], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5], target = 5)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s1 = \"race\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"ab\", s2 = \"ba\")",
        "makeSmallestPalindrome(s1 = \"race\")",
        "makeSmallestPalindrome(\"race\")",
        "makeSmallestPalindrome(s1 = \"banana\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"banana\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_30": [
        "removeTrailingZeros(my_num = \"0512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(\"512301\")",
        "removeTrailingZeros('123456789')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros('0')",
        "removeTrailingZeros(my_num = \"123\")",
        "removeTrailingZeros(num = '0b101010')",
        "removeTrailingZeros(my_list = [\"103\", \"120\", \"0\"])",
        "removeTrailingZeros(my_str = \"0ab000c000d000e\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays([1, 2, 3, 4, 5], 3, 2)",
        "countInterestingSubarrays(nums = [1,1,2,2,3,3,4,4], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(my_list = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(my_list = [2, 3, 1, 2, 2], m = 2, k = 2)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(my_tank = 5, add_tank = 3)",
        "distanceTraveled(my_tank = 5, add_tank = 3)",
        "distanceTraveled(main_tank = 5, additional_tank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 15)",
        "distanceTraveled(main_tank = 1, additional_tank = 2)",
        "distanceTraveled(main_tank = 1, additional_tank = 3)",
        "distanceTraveled(my_tank = 10, o_tank = 10)"
    ],
    "sample_56": [
        "minCost(A = [1, 3, 1], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(my_list = [1, 2, 3, 4, 5])",
        "minCost(A = [1, 2, 3, 4, 5, 6], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 3)",
        "minCost(A = [2, 3, 4, 5, 6], x = 2)"
    ],
    "sample_129": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5, 7, 6])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5, 7, 6, 8])",
        "maxIncreasingGroups(my_list = [3, 2, 4, 1, 5])",
        "maxIncreasingGroups(my_list = [3, 2, 5, 7, 6, 4, 11])"
    ],
    "sample_110": [
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([2, 1, -1, 4, -4], 2)"
    ],
    "sample_19": [
        "minLength(\"hello world\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABCabc\")",
        "minLength(\"abcABCabc\")",
        "minLength(my_string = \"abcde\")",
        "minLength(s = \"ABACDCDC\")",
        "minLength(\"abcABCD\")",
        "minLength(\"abcAaBbcCdDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")",
        "minLength(\"abcABAbcdeABC\")",
        "minLength(s1 = \"ABACADABACD\")"
    ],
    "sample_201": [
        "minOperations([1,2,4,8], 15)",
        "minOperations(nums = [1,2,3,4,5], target = 6)",
        "minOperations([1,2,4,8], 16)",
        "minOperations(nums = [1,2,3,4,5], target = 5)",
        "minOperations([1,2,4,8,16,32], 63)",
        "minOperations([1,2,4,8,16,32], 63)",
        "minOperations([1,2,3,4,5], 6)",
        "minOperations([1,2,3,4,5,6,7,8,9,10], 5)",
        "minOperations([1,2,4,8,16,32,64,128,256,512], 10)",
        "minOperations([1,2,4,8,16], 16)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\"], separator = \" \")",
        "splitWordsBySeparator(words = \"banana, apple, orange\", separator = \",\")",
        "splitWordsBySeparator(words = \"hello world\", separator = \" \")",
        "splitWordsBySeparator(words = \"hello world\", separator = \" \")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"z\")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"mq\")",
        "splitWordsBySeparator(words = \"hello world, how are you?\", separator = \" \")",
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"p\")",
        "splitWordsBySeparator(words = [\"ba,ma\", \"naa,aaa\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"sa\"], separator = \"a\")"
    ],
    "sample_54": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s = \"ba\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(my_string = \"banana\")",
        "smallestString(s1 = \"hello\", s2 = \"world\")",
        "smallestString(\"a\")",
        "smallestString(my_list = [\"mq\", \"px\", \"zy\"])",
        "smallestString(\"kddbna\")",
        "smallestString(\"abc\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"RLUD_\")",
        "furthestDistanceFromOrigin(moves = \"L_R__R\")",
        "furthestDistanceFromOrigin(moves = \"_L_R__\")",
        "furthestDistanceFromOrigin(moves = \"LLR___RRL\")",
        "furthestDistanceFromOrigin(\"__L___R___\")",
        "furthestDistanceFromOrigin(moves = \"LRLR_R_\")",
        "furthestDistanceFromOrigin(\"LLRR_L_\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = -1, num2 = 2)",
        "makeTheIntegerZero(num1 = 42, num2 = -7)",
        "makeTheIntegerZero(num1 = 42, num2 = 13)",
        "makeTheIntegerZero(num1 = 42, num2 = 35)"
    ],
    "sample_51": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"abcde\")",
        "smallestString(\"hello\")",
        "smallestString(s1 = \"ba\")",
        "smallestString('a')",
        "smallestString(my_string = \"abc\")",
        "smallestString(\"hello\")",
        "smallestString(s1 = \"ab\", s2 = \"bc\")",
        "smallestString('abacabadabacaba')",
        "smallestString(my_string = \"hello world\")"
    ],
    "sample_146": [
        "finalString(\"hello\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"banana\")",
        "finalString(\"hello world\")",
        "finalString(my_str = \"niqponter\")",
        "finalString(s1 = \"ni\")",
        "finalString(\"banana\")",
        "finalString(\"ni\")",
        "finalString(my_list = [\"ba\", \"na\", \"na\"])",
        "finalString(s1 = \"Iloia\")"
    ],
    "sample_187": [
        "longestEqualSubarray([1, 2, 3, 4, 5], 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 5)",
        "longestEqualSubarray([1,2,3,4,5], 5)",
        "longestEqualSubarray([1,2,3,4,5], 2)",
        "longestEqualSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)",
        "longestEqualSubarray(nums = [\"aaa\", \"aa\", \"a\"], k = 1)",
        "longestEqualSubarray(nums = [\"aaa\", \"aa\", \"a\"], k = 1)",
        "longestEqualSubarray(nums = [\"1\", \"2\", \"3\", \"2\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"], k = 3)"
    ],
    "sample_155": [
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray([1,2,3,4,5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 7)",
        "canSplitArray([1, 2, 3, 4, 5], 10)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits([1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([1, 2, 0, 3, 0, 4, 5, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits([1, 2, 0, 1, 2])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits([1, 3, 4, 0, 2])",
        "numberOfGoodSubarraySplits(my_list = [0, 1, 0, 0, 1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"grape,kiwi,pineapple\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"red,green,blue\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"dog,cat,bird\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"a\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"tea\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"peanut\"], separator = \"n\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 5, 4, 3, 2, 1], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11, 12, 13], target = 8)"
    ],
    "sample_168": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cat\"], s = \"ABC\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cat\"], s = \"ABC\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], \"NASA\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cat\"], s = \"ABC\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"aple\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym([\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], \"NASA\")",
        "isAcronym(words = [\"artificial\", \"intelligence\"], s = \"Intelligence\")",
        "isAcronym([\"National\", \"Aeronautics\", \"Space\", \"Administration\"], \"NASA\")",
        "isAcronym(words = [\"LOL\", \"BRB\", \"AAA\"], s = \"LLAA\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"aabbc\")",
        "minimumCost(s = \"aabbc\")",
        "minimumCost(\"abc\")",
        "minimumCost(\"aab\")",
        "minimumCost(s1 = \"abcde\")",
        "minimumCost(s = \"abcbcadef\")",
        "minimumCost(s = \"aabbcc\")",
        "minimumCost(s = \"abab\")"
    ],
    "sample_14": [
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([0, 1, 0])",
        "doesValidArrayExist([0, 1, 0])",
        "doesValidArrayExist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([0, 1, 0, 1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ab\", s2 = \"ba\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s1 = \"ab\", s2 = \"ba\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s1 = \"b\", s2 = \"a\")",
        "makeSmallestPalindrome(s1 = \"racecar\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_50": [
        "smallestString(s = \"ba\")",
        "smallestString(s = \"abcde\")",
        "smallestString(s = \"a\")",
        "smallestString(s = \"ab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s1 = \"a\", s2 = \"aa\")",
        "smallestString(s = \"aaaaa\")",
        "smallestString(s1 = \"baa\")",
        "smallestString(\"a\")",
        "smallestString(s1 = \"aab\", s2 = \"cbc\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits([1, 2, 3, 4], 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [0b101, 0b110, 0b111, 0b1001], k = 2)",
        "sumIndicesWithKSetBits(nums = [0b1010, 0b1111, 0b0000], k = 2)",
        "sumIndicesWithKSetBits(my_list = [3, 7, 4, 8], k = 2)"
    ],
    "sample_20": [
        "minLength(s1 = \"ba\", s2 = \"nana\")",
        "minLength(\"abcde\")",
        "minLength(\"hello\")",
        "minLength(\"hello\")",
        "minLength(\"hello world\")",
        "minLength(\"ABACDCDC\")",
        "minLength(s1 = \"hello\", s2 = \"world\")",
        "minLength(my_str = \"ababab\")",
        "minLength(s1 = \"banana\", s2 = \"car\")",
        "minLength(\"ABACDABACDAB\")"
    ],
    "sample_158": [
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 2])"
    ],
    "sample_46": [
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [3, 2, 1])",
        "semiOrderedPermutation(my_list = [3, 2, 1])",
        "semiOrderedPermutation(my_list = [2, 1, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [1, 3, 2])",
        "semiOrderedPermutation(my_list = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation([3, 2, 1, 4])"
    ],
    "sample_162": [
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(my_list = [1, 2, 3, 4, 5])",
        "maxSum(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100])",
        "maxSum(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100])",
        "maxSum(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100])",
        "maxSum(nums = [1, 10, 3, 5, 2])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s1 = '1010')",
        "maximumOddBinaryNumber(s1 = '1010', s2 = '1111')",
        "maximumOddBinaryNumber(s = \"11010101\")",
        "maximumOddBinaryNumber(s1 = \"1010\", s2 = \"1010\")",
        "maximumOddBinaryNumber(s = \"1011010\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(my_list = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(my_list = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(my_list = [8, 9, 10], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11, 12], target = 12)",
        "numberOfEmployeesWhoMetTarget(my_list = [8, 7, 6], target = 8)"
    ],
    "sample_166": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cat\"], s = \"ABC\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cherry\"], s = \"ABC\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"ABC\")",
        "isAcronym(words = [\"Alpha\", \"Beta\", \"Gamma\"], s = \"ABC\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"ABC\")",
        "isAcronym(words = [\"International\", \"American\", \"National\"], s = \"NAAN\")",
        "isAcronym(words = [\"TICK\", \"POW\", \"FOOD\"], s = \"TITLE\")"
    ],
    "sample_62": [
        "distanceTraveled(main_tank = 5, additional_tank = 3)",
        "distanceTraveled(main_tank=3, additional_tank=2)",
        "distanceTraveled(main_tank=5, add_tank=3)",
        "distanceTraveled(main_tank = 10, additional_tank = 3)",
        "distanceTraveled(main_tank=5, additional_tank=2)",
        "distanceTraveled(main_tank = 5, add_tank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(main_tank=20, additional_tank=15)",
        "distanceTraveled(mainTank=2, additionalTank=3)",
        "distanceTraveled(my_list = [1, 5, 10], add_list = [2, 3, 1])"
    ],
    "sample_130": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])"
    ],
    "sample_2": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 1, 3, 2, 5])",
        "distinctDifferenceArray([1, 2, 1, 3, 4, 5, 5])",
        "distinctDifferenceArray([1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray([1, 2, 2, 3, 4, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])"
    ],
    "sample_59": [
        "distanceTraveled(my_tank = 5, add_tank = 2)",
        "distanceTraveled(main_tank = 10, additional_tank = 2)",
        "distanceTraveled(main_tank = 10, additional_tank = 1)",
        "distanceTraveled(main_tank = 10, additional_tank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(my_tank = 10, add_tank = 3)",
        "distanceTraveled(my_tank = 3, add_tank = 2)",
        "distanceTraveled(mainTank = 8, additionalTank = 2)",
        "distanceTraveled(main_tank = 20, additional_tank = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays([1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays([1, 2, 3, 4])",
        "countCompleteSubarrays(my_list = [1,2,1,2])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits([0, 1, 2, 3, 4], 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(my_list = [2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits([1, 2, 3], 1)"
    ],
    "sample_43": [
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s1 = \"abc\", s2 = \"def\")",
        "minimizedStringLength(\"abc\")",
        "minimizedStringLength(\"abab\")",
        "minimizedStringLength(my_string = \"hello world\")",
        "minimizedStringLength(s = \"aabcc\")",
        "minimizedStringLength(s = \"hello world\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 2)",
        "longestEqualSubarray([1,2,2,3,3,3,4,4,4,4])",
        "longestEqualSubarray([1,2,3,2,1])",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "longestEqualSubarray([1,2,3,4,5], 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,4,5,6,5,5], k = 3)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[2, 1], [4, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 4], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[0,2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3], [0, 3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3], [0, 4]])",
        "colorTheArray(n = 6, queries = [[0,1],[1,2],[2,3],[3,4],[4,5]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3], [1, 4]])",
        "colorTheArray(n = 5, queries = [[2,1],[4,1]])",
        "colorTheArray(n = 6, queries = [[0,1],[1,1],[2,2],[3,3],[4,4]])",
        "colorTheArray(n = 7, queries = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 7, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11], target = 7)",
        "numberOfEmployeesWhoMetTarget(my_list = [8, 7, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8,7,9,6,8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [7,8,9], target = 7)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs([10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs([1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [5, 7, 10, 11])"
    ],
    "sample_229": [
        "countWays(my_list = [1, 2, 3])",
        "countWays(my_list = [1, 2, 3])",
        "countWays(my_list = [1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3])",
        "countWays([1, 2, 3, 4, 5, 6])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [2,3,1,4,6])",
        "countWays([1, 3, 1])",
        "countWays([1, 2, 3])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"110\")",
        "maximumOddBinaryNumber(s1 = \"1101\", s2 = \"1011\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"111\")",
        "maximumOddBinaryNumber(s1 = \"1101\", s2 = \"1010\")",
        "maximumOddBinaryNumber(s1 = '1010101', s2 = '1111')",
        "maximumOddBinaryNumber(s1 = '10101', s2 = '11111')",
        "maximumOddBinaryNumber(s1 = '101010', s2 = '101111')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty([1, 2, 3, 4, 5], 2)"
    ],
    "sample_238": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue([-3, -2, 1, 4, -1, 2, 1, -5, 4])"
    ],
    "sample_98": [
        "maximumJumps([1,2,3,4,5], 2)",
        "maximumJumps([1,3,1,4,2], 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps([1, 2, 3, 4, 5], 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps([1,2,3,4,5], 1)",
        "maximumJumps([1,2,3,4,5,6,7,8,9], 2)",
        "maximumJumps([1,2,3,4,5], 2)"
    ],
    "sample_149": [
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(\"hello world\")",
        "finalString(\"racecar\")",
        "finalString(my_string = \"hello world\")",
        "finalString(my_list = [\"mq\", \"px\", \"zy\"])",
        "finalString(my_list = [\"mq\", \"px\", \"zy\"])",
        "finalString(s1 = \"racecar\", s2 = \"hello\")",
        "finalString(s1 = \"bni\")",
        "finalString(my_string = \"hi\")"
    ],
    "sample_93": [
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 2, 1])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 2, 1])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1,2,2,1,1])",
        "continuousSubarrays(A = [1, 2, 1, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays([1, 2, 2, 3, 4, 4, 4, 5])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "countCompleteSubarrays([1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays([1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,3,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_228": [
        "countWays([1,2,3,4,5])",
        "countWays(nums = [1, 0, 2])",
        "countWays([1,2,3,4])",
        "countWays([1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1,2,2,3])",
        "countWays([2,3,0,2])",
        "countWays([1,0,1,2])",
        "countWays([0, 1, 2, 3])",
        "countWays([1,2,0,3,0])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty([1, 2, 3, 4, 5], 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(my_list = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 1, 1, 1, 1])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(my_list = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 1, 3, 3, 4])"
    ],
    "sample_94": [
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays([1,2,3,2,1])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 2, 1])",
        "continuousSubarrays([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a = [1, 2, 3, 1, 2, 1, 2, 3])",
        "continuousSubarrays([1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2])"
    ],
    "sample_95": [
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 2, 3, 4, 5])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1,2,3,4,5])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays([1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(my_list = [10, 20, 30])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])",
        "countBeautifulPairs(nums = [\"1\", \"2\", \"3\", \"4\", \"5\"])",
        "countBeautifulPairs(nums = [35, 44, 17, 21, 27, 30, 39, 42, 50, 60, 65])"
    ],
    "sample_49": [
        "semiOrderedPermutation([1,2,3,4])",
        "semiOrderedPermutation([3, 1, 2])",
        "semiOrderedPermutation([1, 3, 2, 4])",
        "semiOrderedPermutation([1,2,3,4,5])",
        "semiOrderedPermutation([2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation([1,2,3,4])",
        "semiOrderedPermutation(my_list = [2, 1, 3])",
        "semiOrderedPermutation([3, 2, 1, 4, 5])",
        "semiOrderedPermutation([1,3,2,5,4])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation(my_list = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits([0, 1, 1, 0, 1, 0, 1, 1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"110\")",
        "maximumOddBinaryNumber(s = \"101010\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"101010101\")",
        "maximumOddBinaryNumber(s = \"11010101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s1 = \"10101010\", s2 = \"11111111\")",
        "maximumOddBinaryNumber(s1 = \"110\", s2 = \"101\")",
        "maximumOddBinaryNumber(s = \"110101\")",
        "maximumOddBinaryNumber(s1 = '1010', s2 = '1110')"
    ],
    "sample_141": [
        "countCompleteSubarrays([1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays([1, 2, 3, 2, 1])",
        "countCompleteSubarrays([1,2,3,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2])",
        "countCompleteSubarrays(my_list = [1, 2, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays([1,2,1,3,2,5,3,4])",
        "countCompleteSubarrays([1, 2, 3, 2, 1, 2, 3, 2, 1])"
    ],
    "sample_23": [
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(\"hello world\")",
        "minLength(\"abc\")",
        "minLength(\"ABACD\")",
        "minLength(\"abcdabcd\")",
        "minLength(s1 = \"abcde\", s2 = \"bcde\")",
        "minLength(s = \"ABCD\")",
        "minLength(\"abcA\")",
        "minLength(s1 = \"abcde\", s2 = \"abxyzde\")"
    ],
    "sample_143": [
        "countCompleteSubarrays([1,2,3,1])",
        "countCompleteSubarrays([1,2,3,1])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays([1,2,3,2,1])",
        "countCompleteSubarrays([1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,2,1,2,1,2])",
        "countCompleteSubarrays(nums = [1,2,1,2,3,4,1,2,1,2])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,4,5,4])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "makeTheIntegerZero(num1 = 12, num2 = 6)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 123, num2 = 56)"
    ],
    "sample_100": [
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps(nums = [1, 3, 5, 7], target = 2)",
        "maximumJumps([1, 3, 5, 9], 2)",
        "maximumJumps(nums = [1, 3, 5, 9], target = 3)",
        "maximumJumps(nums = [3, 4, 5, 6, 7], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 9, 2, 6, 8, 4, 7], target = 3)",
        "maximumJumps([1, 3, 5, 6, 8], 2)",
        "maximumJumps(nums = [5, 6, 3, 8, 9], target = 2)",
        "maximumJumps(my_list = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 3, 5, 4, 9, 8], target = 2)"
    ],
    "sample_131": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 2, 4, 5, 6])",
        "maxIncreasingGroups([1, 3, 2, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups([1, 3, 2, 4])",
        "maxIncreasingGroups(my_list = [1, 3, 2, 4, 5, 7, 6, 8])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLRR_\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LL_UR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_L___R_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_LR\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_RR_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LRLRRUUDD\")",
        "furthestDistanceFromOrigin(my_list = [\"U_\", \"D_\", \"L_\", \"R_\", \"_\", \"_\", \"D_\", \"U_\"])",
        "furthestDistanceFromOrigin(my_list = [\"U\", \"D\", \"F\", \"R\", \"L\", \"U\", \"D\", \"F\", \"R\", \"L\", \"U\", \"D\", \"F\", \"R\", \"L\"])"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s1 = \"1010101010\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s1 = \"1010101010\")",
        "maximumOddBinaryNumber(s = \"1101010101\")",
        "maximumOddBinaryNumber(s1 = \"1101010101\")",
        "maximumOddBinaryNumber(s1 = \"11010101\", s2 = \"1101010\")"
    ],
    "sample_6": [
        "colorTheArray(n = 5, queries = [[0,1],[1,1],[0,2],[3,3]])",
        "colorTheArray(5, [[0,1],[1,2],[2,3],[0,4]])",
        "colorTheArray(n = 5, queries = [[2,1],[3,2],[4,5]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,1],[4,3],[1,2]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[1,2],[3,3],[2,3],[1,4]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,1],[2,2],[3,3],[4,0]])",
        "colorTheArray(n = 7, queries = [[0,1],[1,2],[2,1],[3,3]])",
        "colorTheArray(5, [[0,1],[1,2],[2,3],[0,2],[3,4]])",
        "colorTheArray(n = 7, queries = [[0,1],[1,2],[2,3],[0,2],[3,4],[4,5],[0,3],[2,5]])",
        "colorTheArray(n = 7, queries = [[0,1],[1,2],[2,3],[2,4],[1,5],[2,5],[3,4]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition([1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition([1, 5, 3, 4, 2])",
        "findValueOfPartition([1, 3, 2, 4])",
        "findValueOfPartition([1, 3, 5, 7])",
        "findValueOfPartition(my_list = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 5, 3, 4, 2])",
        "findValueOfPartition(nums = [4, 3, 2, 1])",
        "findValueOfPartition(nums = [5, 10, 15, 20])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits([1,0,0])",
        "numberOfGoodSubarraySplits([1,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,1])",
        "numberOfGoodSubarraySplits([1,0,0])",
        "numberOfGoodSubarraySplits([1,0,0,1,0,1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits([0,0,1,0,0,1,1,0,1,1,0])",
        "numberOfGoodSubarraySplits([1,1,1,0,1,1,0,1,1,1])"
    ],
    "sample_121": [
        "minimumIndex([1,2,3,4,5])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1,2,3,2,1])",
        "minimumIndex([1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(my_list = [1,2,3,4,5])",
        "minimumIndex(my_list = [1,2,3,2,1])",
        "minimumIndex(nums = [\"mq\", \"px\", \"zy\"])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits([1, 2, 3], 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4], 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(my_list = [3, 4, 5], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 4, offers = [[1,2,5],[2,3,10],[3,4,15]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 10], [2, 3, 1], [3, 4, 2], [4, 2, 3], [5, 1, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1,5,2],[2,3,1],[3,4,2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 1], [2, 2, 2], [3, 1, 3], [4, 4, 1], [5, 5, 1]])",
        "maximizeTheProfit(my_list = [(10, 1), (20, 2), (30, 3)])",
        "maximizeTheProfit(n = 4, offers = [[1, 5, 1], [2, 3, 1], [3, 2, 1], [4, 1, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 10], [1, 3, 7], [2, 6, 9], [3, 4, 11], [1, 5, 8]])",
        "maximizeTheProfit(n = 4, offers = [[2, 10, 1], [3, 6, 2], [4, 8, 3], [5, 10, 4]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 10], [1, 3, 4], [5, 2, 1], [3, 4, 2], [5, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 5], [2, 3, 10], [5, 2, 15], [3, 4, 20]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"0011\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"0123\")",
        "minimumOperations(num = \"0123\")",
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"0123\")",
        "minimumOperations(my_list = [\"00\", \"01\", \"11\"])",
        "minimumOperations(my_list = [\"00\", \"00\", \"00\", \"25\", \"50\", \"75\", \"75\", \"75\", \"75\"])"
    ],
    "sample_207": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"0011\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"1400\")",
        "minimumOperations('12')",
        "minimumOperations(s1 = \"248\", s2 = \"348\")"
    ],
    "sample_181": [
        "maximizeTheProfit(my_list = [\"mq\", \"px\", \"zy\"])",
        "maximizeTheProfit(my_list = [\"mq\", \"px\", \"zy\"])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,1,4]])",
        "maximizeTheProfit(my_list = [10, 20, 30, 40, 50])",
        "maximizeTheProfit(my_list = [1, 2, 3, 4, 5])",
        "maximizeTheProfit(n = 5, offers = [[3,2,1],[2,3,1],[4,2,1]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[2,3,10],[3,4,15]])",
        "maximizeTheProfit(n=5, offers=[[2,1,5],[1,2,3],[3,4,10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 3, 4], [1, 3, 2], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[2,1,5],[3,2,1],[1,3,2],[5,4,1],[3,5,1]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 5, 7, 6, 8], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 3, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 2, 4, 6, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,3,2,4,5,6,7], threshold = 4)",
        "longestAlternatingSubarray([1,3,2,4,5,7,6,8,9], 5)"
    ],
    "sample_203": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"0011\")",
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"012345\")",
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"19\")",
        "minimumOperations(num = \"02\")",
        "minimumOperations('100')",
        "minimumOperations(num = \"0110111\")"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[2, 2], [4, 4]])",
        "colorTheArray(n = 5, queries = [[2, 1], [4, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [5, 5]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [0, 3]])",
        "colorTheArray(n = 6, queries = [[1, 2], [1, 5], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 3]])",
        "colorTheArray(n = 5, queries = [[2, 1], [3, 1], [4, 2], [1, 3], [1, 4]])",
        "colorTheArray(n = 5, queries = [[2,2],[3,4],[1,5]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,3],[3,4],[2,2]])",
        "colorTheArray(n = 6, queries = [[2,1],[1,2],[3,4]])"
    ],
    "sample_119": [
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 5, 6, 6])",
        "minimumIndex(nums = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_102": [
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 10], target = 2)",
        "maximumJumps([1, 3, 5, 8], 2)",
        "maximumJumps([1, 3, 1, 5, 4], 2)",
        "maximumJumps([1, 3, 1, 2, 1, 1, 7, 7], 2)",
        "maximumJumps(nums = [3, 4, 9, 1, 3, 4, 9, 5], target = 1)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"0000\")",
        "removeTrailingZeros(num = \"00000\")",
        "removeTrailingZeros(my_string = \"0000\")",
        "removeTrailingZeros(my_num = \"0512301\")",
        "removeTrailingZeros(my_str = \"512301\")",
        "removeTrailingZeros(num = \"1010\")",
        "removeTrailingZeros(my_str = \"1230001\")",
        "removeTrailingZeros(my_list = ['000', '000', '123'])",
        "removeTrailingZeros(num = \"051230\")",
        "removeTrailingZeros(my_num = \"101\")"
    ],
    "sample_57": [
        "distanceTraveled(a = 2, b = 3)",
        "distanceTraveled(my_list = [3, 2, 1])",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 3, b = 7)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(my_list = [2, 3, 4])",
        "distanceTraveled(my_list = [2, 3, 4, 5])",
        "distanceTraveled(my_list = [1, 2, 5])",
        "distanceTraveled(my_list = [3, 2, 5])"
    ],
    "sample_65": [
        "findValueOfPartition(my_list = [3, 1, 4, 2])",
        "findValueOfPartition([1, 3, 5, 7])",
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition(a = [1, 3, 5, 7])",
        "findValueOfPartition([1, 5, 10, 15])",
        "findValueOfPartition([1, 5, 9, 12])",
        "findValueOfPartition([1, 5, 9, 12])",
        "findValueOfPartition(my_list = [1, 5, 3, 9, 8])",
        "findValueOfPartition(my_list = [3, 2, 5, 4, 1])"
    ],
    "sample_1": [
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 1, 1, 1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3, 4])",
        "distinctDifferenceArray([1, 1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4, 2])",
        "distinctDifferenceArray([1, 2, 3, 4, 5, 5, 5, 6, 6, 7])"
    ],
    "sample_120": [
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [3, 4, 1, 1, 5, 2, 6, 5, 3, 5])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRDD\")",
        "furthestDistanceFromOrigin(moves = \"LLRRDD\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLR\")",
        "furthestDistanceFromOrigin(my_list = [\"L\", \"L\", \"R\", \"R\", \"L\"])",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRU\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLL\")",
        "furthestDistanceFromOrigin(my_list = [\"U\", \"D\", \"L\", \"R\", \"U\", \"D\", \"L\", \"R\", \"U\", \"D\", \"L\", \"R\", \"U\", \"D\", \"L\", \"R\", \"U\", \"D\", \"L\", \"R\", \"U\", \"D\", \"L\", \"R\", \"U\", \"D\", \"L\", \"R\", \"U\", \"D\", \"L\", \"R\"])"
    ],
    "sample_42": [
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(s1 = \"abc\", s2 = \"def\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s1 = \"aabbc\")",
        "minimizedStringLength(s = \"aabbc\")",
        "minimizedStringLength(s = \"abacabadabacaba\")",
        "minimizedStringLength(s1 = \"hello\", s2 = \"world\")",
        "minimizedStringLength(s = \"abca\")",
        "minimizedStringLength(s = \"abcda\")",
        "minimizedStringLength(s1 = \"baa\", s2 = \"bbb\")"
    ],
    "sample_105": [
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray([1, 2, 3, 4, 5], 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray([1, 2, 3], 2)",
        "checkArray(my_list = [1, 2, 3, 4, 5], k = 3)",
        "checkArray([2, 5, 1, 7, 3], 4)"
    ],
    "sample_132": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups(my_list = [3, 2, 4, 1, 5])",
        "maxIncreasingGroups(my_list = [5, 4, 3, 2, 1])",
        "maxIncreasingGroups([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(my_list = [5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups([3, 1, 4, 2, 2, 1, 5, 6, 3, 4])"
    ],
    "sample_206": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(my_list = [\"00\", \"25\", \"50\", \"75\"])",
        "minimumOperations(my_list = [\"00\", \"25\", \"50\", \"75\"])",
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"05\")",
        "minimumOperations('10101')"
    ],
    "sample_17": [
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([0, 1, 0])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 2, 3, 4])",
        "doesValidArrayExist([1, 0, 1])",
        "doesValidArrayExist([1, 2, 3, 4, 5])",
        "doesValidArrayExist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_38": [
        "minimumCost(s1 = \"abc\", s2 = \"def\")",
        "minimumCost(\"abc\")",
        "minimumCost(\"abccba\")",
        "minimumCost(s1 = \"abcba\", s2 = \"bcda\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s1 = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s1 = \"abcde\", s2 = \"abedce\")",
        "minimumCost(\"abc\")",
        "minimumCost(\"abcde\")"
    ],
    "sample_133": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 3, 5, 7, 9])",
        "maxIncreasingGroups([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(my_list = [1, 2, 3])"
    ],
    "sample_53": [
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString(\"hello\")",
        "smallestString(s1 = \"banana\")",
        "smallestString('hello')",
        "smallestString(s1 = \"hello\", s2 = \"world\")",
        "smallestString(s1 = \"ba\", s2 = \"nana\")",
        "smallestString('abcde')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,3,1,5,4], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,3,5,7], x = 2)",
        "minAbsoluteDifference(nums = [1,3,1,5,9], x = 2)",
        "minAbsoluteDifference(nums = [1,3,1,5,9], x = 2)",
        "minAbsoluteDifference([1,3,5,7,9], 2)",
        "minAbsoluteDifference(nums = [1,7,5,10], x = 2)"
    ],
    "sample_182": [
        "maximizeTheProfit(my_list = [\"mq\", \"px\", \"zy\"])",
        "maximizeTheProfit(my_list = [1, 2, 3])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [1, 5, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [1, 5, 2]])",
        "maximizeTheProfit(my_list = [[1, 2, 5], [2, 3, 10], [3, 4, 15]])",
        "maximizeTheProfit(my_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 1], [4, 5, 1], [5, 1, 2]])",
        "maximizeTheProfit(my_list = [10, 20, 30], offers = [[0, 1, 50], [1, 2, 30], [0, 2, 20]])",
        "maximizeTheProfit(my_list = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [5, 6, 50], [6, 7, 60], [7, 8, 70], [8, 9, 80], [9, 10, 90], [10, 11, 100]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 1], [3, 4, 2], [0, 2, 1], [1, 3, 4]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(my_list = [\"hello world\", \"how are you\"], \" \")",
        "splitWordsBySeparator(a = [\"hello world\", \"how are you\", \"goodbye\"], b = \" \")",
        "splitWordsBySeparator([\"hello world\", \"how are you?\"], \" \")",
        "splitWordsBySeparator([\"hello world\", \"how are you?\"], \" \")",
        "splitWordsBySeparator(my_list = [\"apple,banana,orange\", \"dog,cat\"], \",\")",
        "splitWordsBySeparator(my_list = [\"apple,banana,orange\"], b = \",\")",
        "splitWordsBySeparator([\"hello world\", \"goodbye\"], \" \")",
        "splitWordsBySeparator(my_list = [\"mq\", \"px\", \"zy\"], b = \"p\")",
        "splitWordsBySeparator(my_list = [\"banana\", \"apple,orange\", \"pear\"], b = \",\")",
        "splitWordsBySeparator(my_list = [\"apple,banana,orange\", \"grape,kiwi,pear\"], \",\")"
    ],
    "sample_34": [
        "removeTrailingZeros(my_str = \"000123\")",
        "removeTrailingZeros(my_string = \"12301\")",
        "removeTrailingZeros(my_string = \"0000hello world\")",
        "removeTrailingZeros('50000')",
        "removeTrailingZeros(my_str = \"000hello world\")",
        "removeTrailingZeros(my_list = ['0000', '123', '5', '1'])",
        "removeTrailingZeros(my_str = \"00512301\")",
        "removeTrailingZeros(a = \"1230001\")",
        "removeTrailingZeros(my_string = \"012300045\")",
        "removeTrailingZeros(my_list = ['000', '123', '0000', '1', '000'])"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"race\")",
        "makeSmallestPalindrome(s1 = \"race\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\")",
        "makeSmallestPalindrome(s1 = \"abccba\")",
        "makeSmallestPalindrome(s1 = \"mq\", s2 = \"px\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(s1 = \"banana\", s2 = \"nana\")",
        "makeSmallestPalindrome(s = \"bab\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray([1, 2, 3, 4, 5], 2)",
        "longestEqualSubarray([1, 2, 3, 4, 5], 1)",
        "longestEqualSubarray([1, 2, 3, 4, 5], 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 0)",
        "longestEqualSubarray(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "longestEqualSubarray([1, 2, 3, 4, 5, 5, 5, 6, 6, 7], 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 1)",
        "longestEqualSubarray(nums = [4, 4, 2, 4, 4, 4, 2, 2], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty([1,2,3,4,5], 1)",
        "maximumBeauty([1,2,3,4,5], 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 0)",
        "maximumBeauty(nums = [1,3,4,1,5], k = 2)"
    ],
    "sample_163": [
        "maxSum([1, 2, 3, 4, 5])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 20, 30, 40])",
        "maxSum([1, 2, 3])",
        "maxSum(nums = [-1, 2, -3, 4, -5, 6])",
        "maxSum(nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10])"
    ],
    "sample_151": [
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString('hello')",
        "finalString('hello')",
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString(s1 = \"hello\")",
        "finalString(my_str = \"hello\")",
        "finalString(s = \"banana\")",
        "finalString(my_str = \"Hello, world!\")"
    ],
    "sample_31": [
        "removeTrailingZeros('512301')",
        "removeTrailingZeros('512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros('1000000')",
        "removeTrailingZeros(num = \"0b101101\")",
        "removeTrailingZeros(num = \"5120\")",
        "removeTrailingZeros(num = \"555\")",
        "removeTrailingZeros(my_list = [\"mq\", \"px\", \"zy\", \"10\"])",
        "removeTrailingZeros(my_list = ['0000', '123', '456', '789', '10'])",
        "removeTrailingZeros(my_list = [\"0512301\", \"0105123\", \"0501053\"])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"111\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"110\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s1 = \"101\", s2 = \"010\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(my_string = \"101010101\")",
        "maximumOddBinaryNumber(s1 = \"1010101\", s2 = \"1111111\")",
        "maximumOddBinaryNumber(s = \"11010101\")",
        "maximumOddBinaryNumber(s1 = \"101010101\", s2 = \"101110101\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"mq\", \"px\", \"zy\"], separator = \"p\")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"hard, difficult\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\", \"another,easy\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"another easy problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"this, that\"], separator = \",\")",
        "splitWordsBySeparator(words = \"easy,problem,is,awesome\", separator = \",\")",
        "splitWordsBySeparator(words = \"hello world, how are you?\", separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\", \"hardest,challenge\"], separator = \",\")",
        "splitWordsBySeparator(words = \"ba, nana, ds\", separator = \",\")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"in easy mode\"], separator = \",\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,2,1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,2,1], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3], K = 1)",
        "longestEqualSubarray(A = [1,2,3,2,1], K = 1)",
        "longestEqualSubarray([1,2,3,4,5,6,7,8,9], 3)",
        "longestEqualSubarray(my_list = [1,2,3,4,5,6,7,8,9,10])",
        "longestEqualSubarray([1, 2, 3, 1, 2, 3, 4, 5], 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 1, 4, 3, 5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 1, 2, 3], K = 1)"
    ],
    "sample_230": [
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3])",
        "countWays([1, 2, 3, 4])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays([1, 2, 3])",
        "countWays([1, 2, 3, 4, 5])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 3)",
        "sumIndicesWithKSetBits(my_list = [0b101, 0b110, 0b111], k = 2)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [0b101, 0b110, 0b111, 0b1000], k = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(my_number = \"512301\")",
        "removeTrailingZeros(my_string = \"512301\")",
        "removeTrailingZeros(my_str = \"123001\")",
        "removeTrailingZeros(my_number = \"000000\")",
        "removeTrailingZeros(num = \"10200\")",
        "removeTrailingZeros(my_num = \"0010011\")",
        "removeTrailingZeros(my_str = \"1230123\")",
        "removeTrailingZeros(num = '5678901234')",
        "removeTrailingZeros(my_list = [\"0\", \"0\", \"0\", \"1\", \"2\", \"0\", \"3\", \"4\", \"0\", \"5\"])",
        "removeTrailingZeros(my_list = [\"0512301\", \"001\", \"1234501\"])"
    ],
    "sample_167": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym([\"World\", \"Health\", \"Organization\"], \"WHO\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cat\"], s = \"ABA\")",
        "isAcronym(words = [\"NASA\", \"USA\", \"NATO\"], s = \"NASA\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"aPpleNanaCherry\")",
        "isAcronym(words = [\"I\", \"am\", \"the\", \"A\", \"tonic\", \"of\", \"the\", \"Japanese\", \"lingua\"], s = \"JATONIC\")"
    ],
    "sample_142": [
        "countCompleteSubarrays([1,2,1])",
        "countCompleteSubarrays([1, 2, 3, 1])",
        "countCompleteSubarrays([1,2,3,2,1])",
        "countCompleteSubarrays([1,2,3,2,1])",
        "countCompleteSubarrays([1,2,3,1])",
        "countCompleteSubarrays([1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays([1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,2,1,2,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 1, 2, 3, 1])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n=3, target=3)",
        "minimumPossibleSum(3, 5)"
    ],
    "sample_147": [
        "finalString(\"hello\")",
        "finalString(\"hello\")",
        "finalString('hello')",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(\"hi\")",
        "finalString(s = \"racecar\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(\"banana\")",
        "finalString(s1 = \"banana\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"race\")",
        "makeSmallestPalindrome(\"race\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ba\")",
        "makeSmallestPalindrome(s1 = \"banana\", s2 = \"racecar\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"hello\")",
        "makeSmallestPalindrome(\"racecar\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"race\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 10], [3, 4, 15], [4, 5, 20], [5, 6, 25]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [1, 5, 50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 50], [2, 3, 30], [5, 3, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [5, 1, 50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 1], [2, 3, 1], [3, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7], [4, 5, 8], [5, 6, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 1], [2, 3, 2], [3, 2, 3], [4, 1, 4], [5, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [2, 3, 1], [3, 4, 2], [4, 5, 1], [5, 6, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 2], [2, 3, 1], [5, 3, 2], [3, 2, 1], [1, 2, 5]])",
        "maximizeTheProfit(my_list = [1, 2, 3, 4, 5], offers = [[1, 1, 2], [2, 2, 1], [1, 3, 4], [2, 5, 1], [3, 1, 1]])"
    ],
    "sample_99": [
        "maximumJumps([1, 2, 3, 4, 5], 2)",
        "maximumJumps([1, 2, 3, 4, 5], 3)",
        "maximumJumps([1, 2, 3, 4, 5], 3)",
        "maximumJumps([1, 2, 3, 4, 5], 3)",
        "maximumJumps([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)",
        "maximumJumps([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps([1, 3, 1, 1, 5], 2)",
        "maximumJumps(nums = [1, 3, 1, 2, 2], target = 2)",
        "maximumJumps([3, 2, 5, 1, 2, 6, 7, 8], 3)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1])",
        "numberOfGoodSubarraySplits([1,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits([1,0,0,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(my_string = \"101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s1 = \"1010\", s2 = \"1101\")",
        "maximumOddBinaryNumber(s1 = \"1010101\")",
        "maximumOddBinaryNumber(s1 = \"1010\")",
        "maximumOddBinaryNumber(s1 = \"10101010\")",
        "maximumOddBinaryNumber(s1 = \"1010101\", s2 = \"1110110\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 5, k = 8)",
        "minimumSum(n = 10, k = 20)",
        "minimumSum(n = 10, k = 10)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = -1, num2 = 2)",
        "makeTheIntegerZero(num1 = -1, num2 = -2)",
        "makeTheIntegerZero(num1 = 1, num2 = -1)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(my_list = [1, -2, 3, -4, 5])",
        "makeTheIntegerZero(my_list = [-1, -2, -3])",
        "makeTheIntegerZero(0b101, 0b011)",
        "makeTheIntegerZero(num1 = -7, num2 = 2)",
        "makeTheIntegerZero(0b101, 0b110)",
        "makeTheIntegerZero(3, 4)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 7)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 7, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 7, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(my_list = [1, 2, 3, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], modulo = 10, k = 5)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(my_list = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(my_list = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(my_list = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 1, 5, 9, 2, 6, 5, 3, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 2, 4, 5, 3, 6, 7], k = 3)"
    ],
    "sample_148": [
        "finalString(\"hello\")",
        "finalString(my_string = \"banana\")",
        "finalString(s1 = \"banana\")",
        "finalString(\"banana\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = \"banana\")",
        "finalString(s1 = \"hi\")",
        "finalString(s1 = \"ponter\")",
        "finalString(my_string = \"pony\")",
        "finalString(s1 = \"poi\")"
    ],
    "sample_231": [
        "countWays([0, 1, 2])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays([0, 1, 2, 3])",
        "countWays([0, 1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3])",
        "countWays([0, 1, 2, 4, 5])",
        "countWays([2, 3, 4])",
        "countWays([0, 2, 1, 3, 2])",
        "countWays([1, 2, 3])",
        "countWays([1, 2, 3])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs([1, 2, 3, 4, 5])",
        "countBeautifulPairs([12, 21, 35, 55])",
        "countBeautifulPairs([12, 21, 33, 42])",
        "countBeautifulPairs(nums = [10, 7, 5, 15, 20, 25, 30, 35, 40, 45, 50])",
        "countBeautifulPairs(nums = [\"happy\", \"birthday\", \"lunch\", \"kitchen\", \"noon\"])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(my_list = [2, 3, 5])",
        "makeTheIntegerZero(num1 = 3, num2 = -5)",
        "makeTheIntegerZero(-2, 3)",
        "makeTheIntegerZero(my_list = [-5, 3])",
        "makeTheIntegerZero(num1 = 1, num2 = -3)",
        "makeTheIntegerZero(my_list = [-2, 5])"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(s1 = \"racecar\", s2 = \"car\")",
        "makeSmallestPalindrome(\"racecar\")",
        "makeSmallestPalindrome(s1 = \"ba\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")",
        "makeSmallestPalindrome(s1 = \"ab\", s2 = \"cba\")",
        "makeSmallestPalindrome(s1 = \"b\", s2 = \"n\")",
        "makeSmallestPalindrome(s1 = \"abc\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"nana\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"and\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cat\"], s = \"ABC\")",
        "isAcronym(words = [\"NASA\", \"FBI\"], s = \"USA\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"USA\"], s = \"USA\")",
        "isAcronym(words = [\"NASA\", \"FBI\", \"NATO\"], s = \"FBI\")",
        "isAcronym(words = [\"T\", \"A\", \"T\"], s = \"THAT\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cherry\"], s = \"ABAC\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits([1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,0,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,1,1,1,0,1,0])",
        "numberOfGoodSubarraySplits([1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(my_list = [1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,0,1,0,1,1])",
        "numberOfGoodSubarraySplits([1,0,0,0,0,0,1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits([1, 2, 3], 2)",
        "sumIndicesWithKSetBits([1, 2, 3, 4, 5], 2)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(my_list = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 3)"
    ],
    "sample_227": [
        "countWays([-3, 0, 3])",
        "countWays([-1, 0, 1])",
        "countWays([-3, 0, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(my_list = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays([-1, 0, 1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [-3, 0, 2])",
        "countWays([-0x3f3f3f3f, 0x3f3f3f3f, -0x3f3f3f3f, 0x3f3f3f3f, -0x3f3f3f3f, 0x3f3f3f3f])"
    ],
    "sample_39": [
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s1 = \"abcde\")",
        "minimumCost(\"abcde\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"_L__R__\")",
        "furthestDistanceFromOrigin(moves = \"LL_LRRR\")",
        "furthestDistanceFromOrigin(moves = \"L_L_R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"L__R_\")",
        "furthestDistanceFromOrigin(moves = \"LRL_RLR_\")",
        "furthestDistanceFromOrigin(my_moves = \"L_L_R_R\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(my_tank = 5, additional_tank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 7)",
        "distanceTraveled(mainTank = 0, additionalTank = 10)",
        "distanceTraveled(main_tank = 10, additional_tank = 5)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays([1, 2, 1])",
        "countCompleteSubarrays([1, 2, 3, 4, 5])",
        "countCompleteSubarrays([1,2,3,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "countCompleteSubarrays([1, 2, 1])"
    ],
    "sample_88": [
        "longestAlternatingSubarray([1, 2, 3, 4, 5], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5], 3)",
        "longestAlternatingSubarray([1, 3, 2, 4, 5, 7, 6, 8])",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 3)",
        "longestAlternatingSubarray([1, 3, 2, 4, 3, 5, 4, 6])",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 6, 5, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray([1, 3, 2, 4, 3, 5], 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5])",
        "longestAlternatingSubarray([1, 3, 2, 4, 7, 5, 8, 6, 9], 7)"
    ],
    "sample_216": [
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 5], [3, 7], [4, 6]])",
        "numberOfPoints(nums = [[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 7], [4, 6]])",
        "numberOfPoints(nums = [[1, 5], [3, 8], [4, 6]])",
        "numberOfPoints(my_list = [[1, 5], [2, 3], [4, 7], [6, 8]])",
        "numberOfPoints([[1, 5], [3, 4], [4, 6], [7, 8]])",
        "numberOfPoints(nums = [ [1, 5], [2, 6], [3, 7], [4, 8] ])",
        "numberOfPoints(points = [[1, 5], [3, 7], [4, 8], [10, 12]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(my_list = [1, 2, 3, 4, 5])",
        "countBeautifulPairs([10, 20, 30, 40])",
        "countBeautifulPairs(nums = [5, 3, 1, 4, 2])"
    ],
    "sample_87": [
        "longestAlternatingSubarray([1,2,3,4,5], 3)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 5)",
        "longestAlternatingSubarray([1,3,2,4,5,7,6,8], 4)",
        "longestAlternatingSubarray([1,3,2,4,5,7,6,8], 6)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 5)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 3)",
        "longestAlternatingSubarray([1,2,3,4,5,6,7,8,9], 6)",
        "longestAlternatingSubarray([1,3,2,4,5], 2)",
        "longestAlternatingSubarray(nums = [2,3,4,6,7], t = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,7,9,10], t=8)"
    ],
    "sample_36": [
        "minimumCost(s1 = \"abc\", s2 = \"def\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s1 = \"abc\", s2 = \"def\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s1 = \"abcde\")",
        "minimumCost(\"abc\")",
        "minimumCost(s1 = \"abcde\", s2 = \"ace\")",
        "minimumCost(s1 = \"abcde\", s2 = \"abde\")",
        "minimumCost(\"aabbcc\")"
    ],
    "sample_21": [
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(\"abcde\")",
        "minLength(\"abcABC\")",
        "minLength(\"abcABCabc\")",
        "minLength(\"hello world\")",
        "minLength(\"abcABcd\")",
        "minLength(s1 = \"ABACDCDC\", s2 = \"CD\")",
        "minLength(s1 = \"abcd\", s2 = \"acbd\")",
        "minLength(\"abcA\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 5, k = 2)",
        "countInterestingSubarrays([1,2,3,4,5], 5, 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 1)",
        "countInterestingSubarrays([1,2,3,4,5,6,7,8,9], 10, 5)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 10, k = 3)",
        "countInterestingSubarrays(my_list = [1,2,3,4], modulo=5, k=1)",
        "countInterestingSubarrays(nums = [1,7,5,4,2], modulo=100, k=5)"
    ],
    "sample_9": [
        "colorTheArray(5, [[0,1],[1,2],[2,3],[0,4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 5], [3, 4]])",
        "colorTheArray(5, [[0,1],[1,2],[2,3],[0,4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 4], [0, 1], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3], [4, 5]])",
        "colorTheArray(n = 7, queries = [[0, 1], [2, 3], [6, 4]])",
        "colorTheArray(n = 5, queries = [[2, 3], [4, 3], [1, 4]])",
        "colorTheArray(n = 7, queries = [[2, 2], [2, 5], [1, 7], [5, 7]])",
        "colorTheArray(n = 7, queries = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[0,2],[1,5],[2,6]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 4], nums2 = [2, 3, 1, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 3, 2, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [2, 4, 1, 5, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength([1, 2, 3], [4, 5, 6])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 4], nums2 = [4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 4], nums2 = [3, 2, 1, 4])",
        "maxNonDecreasingLength(nums1 = [2, 3, 4, 5, 1], nums2 = [1, 2, 3, 4, 5])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 6, target = 5)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 7, target = 5)"
    ],
    "sample_67": [
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition(my_list = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition([1,3,2,4,5])",
        "findValueOfPartition([3,1,4,2])",
        "findValueOfPartition(nums = [1,3,2,4,5])",
        "findValueOfPartition(nums = [1,3,2,4,5])",
        "findValueOfPartition(nums = [1, 5, 10])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findValueOfPartition([1, 5, 9, 12])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"L_L_R_R_\")",
        "furthestDistanceFromOrigin(moves = \"LR_L_\")",
        "furthestDistanceFromOrigin(moves = \"L_L_R_R__\")",
        "furthestDistanceFromOrigin(moves = \"LL_L___R_R_\")",
        "furthestDistanceFromOrigin(moves = \"LRL_RR_R_\")"
    ],
    "sample_117": [
        "minimumIndex([1, 2, 3, 4, 5])",
        "minimumIndex([1, 2, 3, 2, 1])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5])",
        "minimumIndex([1, 2, 2, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5])",
        "minimumIndex([1, 2, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 4, 4, 4])",
        "minimumIndex(my_list = [1, 1, 2, 2, 1])",
        "minimumIndex(my_list = [1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 8, 8, 9, 9, 9])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 6, 7, 7, 7, 8, 8, 8])"
    ],
    "sample_47": [
        "semiOrderedPermutation(my_list = [1, 2, 3, 4])",
        "semiOrderedPermutation(my_list = [1, 2, 3])",
        "semiOrderedPermutation([1, 2, 3, 4])",
        "semiOrderedPermutation([3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation([2, 1, 3])",
        "semiOrderedPermutation(my_list = [3, 2, 1])",
        "semiOrderedPermutation(my_list = [3, 2, 1])",
        "semiOrderedPermutation(my_list = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [4, 5, 2, 1, 3])"
    ],
    "sample_172": [
        "minimumSum(n=5, k=3)",
        "minimumSum(n=5, k=3)",
        "minimumSum(n=5, k=5)",
        "minimumSum(n=5, k=10)",
        "minimumSum(n=5, k=7)",
        "minimumSum(n=5, k=6)",
        "minimumSum(n=4, k=6)",
        "minimumSum(n=5, k=2)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n=4, k=10)"
    ]
}