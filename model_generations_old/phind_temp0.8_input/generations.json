{
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 20], [3, 5, 30]])",
        "maximizeTheProfit(n = 7, offers = [[1, 3, 2], [2, 4, 3], [3, 5, 4], [4, 6, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 2], [2, 4, 3], [3, 4, 4], [1, 2, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 4], [2, 3, 3], [1, 2, 2]])",
        "maximizeTheProfit(n=5, offers=[[1, 2, 5], [2, 4, 3], [3, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [2, 4, 5], [1, 3, 4]])",
        "maximizeTheProfit(n = 6, offers = [[1, 6, 6], [3, 6, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 7], [3, 4, 5], [4, 5, 6], [2, 3, 1]])",
        "maximizeTheProfit(n=7, offers=[[1, 6, 10], [2, 5, 8], [3, 4, 5]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [2, 2, 1, 1], m = 1)",
        "canSplitArray(nums = [2, 2, 1, 1], m = 2)",
        "canSplitArray(nums=[1, 2, 3, 4, 5], m=3)",
        "canSplitArray(nums=[1, 2, 3, 4, 5], m=5)",
        "canSplitArray(nums = [7,2,5,8,1,3,1], m = 10)",
        "canSplitArray(nums = [2, 3, 2, 4, 3], m = 3)",
        "canSplitArray(nums = [7,2,5,8,1,3,1], m = 2)",
        "canSplitArray(nums=[2, 1, 2, 2, 1, 2], m=3)",
        "canSplitArray(nums=[10, 15, 20, 25, 30], m=15)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [3, 2, 1], k = 2)",
        "checkArray(nums = [3, 2, 1], k = 2)",
        "checkArray(nums = [2, 1, 3, 2], k = 2)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 1, 2, 3], k = 3)",
        "checkArray(nums = [3, 1], k = 1)",
        "checkArray(nums = [2, 3, 4, 5, 2], k = 2)",
        "checkArray(nums = [4, 3, 2, 2, 1, 2], k = 3)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 8, 10], k = 3)",
        "maximumBeauty(nums = [1, 5, 8, 10, 11, 14], k = 3)",
        "maximumBeauty(nums = [1, 5, 7, 9, 12], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 8, 10, 12, 14], k = 4)",
        "maximumBeauty(nums = [1, 3, 6, 12, 21], k = 4)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,b,c\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one,two,three\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a*b*c\", \"d*e*f\"], separator = \"*\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"@\")",
        "splitWordsBySeparator(words = [\"cat,dog\", \"bird,fish\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"I,love,python\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"I,love,coding\", \"Python,\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"test,,case\", \"another,one\"], separator = \",\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums=[1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 2, 4])",
        "countWays(nums = [1, 3, 3, 4])",
        "countWays(nums = [2, 1, 3, 5, 4])",
        "countWays(nums = [1, 2, 3, 3, 4, 4, 5, 6, 7, 8, 9, 9])"
    ],
    "sample_122": [
        "minimumIndex(nums = [3, 3, 1, 1, 2, 2])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 3])",
        "minimumIndex(nums = [1,0,1,1,1])",
        "minimumIndex(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minimumIndex(nums = [3, 2, 1, 2, 2, 1])",
        "minimumIndex(nums = [1,2,1,1,3])",
        "minimumIndex(nums = [4, 1, 3, 3, 2])",
        "minimumIndex(nums = [1, 1, 1, 3, 3, 3, 2, 2])",
        "minimumIndex(nums = [1, 0, 2, 1, 0, 0, 1, 0, 2, 1])",
        "minimumIndex(nums = [4,2,2,4,4,4,4,4,4,4,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [3, 5], [6, 7]])",
        "numberOfPoints(nums = [[1, 5], [2, 6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [1, 5]])",
        "numberOfPoints(nums = [[1,3], [3,6], [4,7]])",
        "numberOfPoints(nums = [[1,5],[2,3],[4,6]])",
        "numberOfPoints(nums = [[1,5], [2,6], [3,6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [2,1,4,3,5])",
        "semiOrderedPermutation(nums = [2,3,1,6,5,4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 5, 4])",
        "semiOrderedPermutation(nums = [1, 5, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1,3,5,2,4])",
        "semiOrderedPermutation(nums = [2, 4, 1, 5, 3, 6])",
        "semiOrderedPermutation(nums = [1,3,2,6,4,5])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 10, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 10, target = 5)",
        "minimumPossibleSum(n = 4, target = 2)",
        "minimumPossibleSum(n = 1000, target = 10)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 0, 1, 1, 0, 1])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 1, 1, 1])",
        "minimumIndex(nums = [3, 3, 1, 3, 3, 2])",
        "minimumIndex(nums = [4, 4, 2, 2, 2, 1])",
        "minimumIndex(nums = [0, 1, 2, 0, 0])",
        "minimumIndex(nums = [2, 1, 2, 3, 2, 2, 4])",
        "minimumIndex(nums = [3, 4, 2, 1, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [4, 5, 5, 5, 3, 3, 2])"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 6)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [3, 5], [4, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 5]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [7, 9]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 6]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 3, 2], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 4)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 10], target = 2)",
        "maximumJumps(nums = [1, 3, 1, 2, 1], target = 2)"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 2, k = 10)",
        "minimumSum(n = 2, k = 10)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [2, 3, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 4)",
        "canSplitArray(nums = [2, 3, 4, 7], m = 5)",
        "canSplitArray(nums = [5, 1, 3, 2], m = 5)",
        "canSplitArray(nums = [5, 7, 1], m = 10)",
        "canSplitArray(nums = [3, 3, 3, 1, 1], m = 5)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [3, 4, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 6], [2, 3, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [2, 3, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 15]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 4], [2, 3, 5], [3, 4, 6]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 20]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [2, 4, 4], [3, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 4, 2], [3, 4, 1]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 5], [1, 2, 3]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [15, -2, 2, -8, 1, 7], k = 3)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [5, 4, 3, 2, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 2], k = 3)",
        "checkArray(nums = [10, -2, -3, 4, -5], k = 3)",
        "checkArray(nums = [2, 1, 4, 2], k = 2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,3,1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,2,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,3,4,5,6], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,2,1,1,1,2,2,2,1,1,1], k = 2)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 1]])"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kdeebncd')",
        "smallestString(s = 'kdeebnce')",
        "smallestString(s = 'kdeebnce')",
        "smallestString(s = 'kdeezncd')",
        "smallestString(s = 'kddsbndd')",
        "smallestString(s = \"kdebsnce\")",
        "smallestString(s = 'kdeeoqbncd')"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 5, 3, 4, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 0, 1, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 3, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 3], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 3, 1, 2], threshold = 4)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 2, 4, 6], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 100)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 1, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 5, 3, 6, 8], threshold = 7)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 2, 1, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [5, 3, 7, 4, 6, 8, 2, 1], threshold = 5)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 5])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACB\")",
        "minLength(s = \"ACBD\")",
        "minLength(s = \"ACBDE\")",
        "minLength(s = \"CDA\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"abca\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 9], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 9], m = 5)",
        "canSplitArray(nums = [1, 5, 11, 5], m = 10)",
        "canSplitArray(nums = [2, 1, 2, 1, 2], m = 4)",
        "canSplitArray(nums = [1, 5, 11, 5], m = 12)",
        "canSplitArray(nums = [7, 2, 1], m = 9)",
        "canSplitArray(nums = [1, 1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [2, 2, 3, 3, 1], m = 5)",
        "canSplitArray(nums = [7, 3, 2, 1, 5], m = 5)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 0])"
    ],
    "sample_109": [
        "checkArray(nums = [2, 3, 1, 2, 4, 3], k = 2)",
        "checkArray(nums = [2, 3, 1, 2, 4, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 1, 2], k = 1)",
        "checkArray(nums = [3, 2, 1, 4], k = 2)",
        "checkArray(nums=[1, 2, 3, 4, 5], k=2)",
        "checkArray(nums = [5, 2, 3, 1, 4], k = 2)",
        "checkArray(nums = [100, 200, 300, 400, 500], k = 1)",
        "checkArray(nums = [3, 2, 5, 2, 3, 7], k = 2)",
        "checkArray(nums = [5, 3, 2, 1, 6, 7, 8], k = 2)",
        "checkArray(nums = [1, 3, 2, 5, 2, 4, 2], k = 1)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 35], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 20, 60], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [24, 18, 32, 12, 22], target = 30)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1], k = 0)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 0, 1], k = 1)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "maximumBeauty(nums = [1, 5, 11, 5, 6, 8], k = 3)",
        "maximumBeauty(nums=[1, 3, 5, 7, 9, 11, 13, 15], k=3)"
    ],
    "sample_205": [
        "minimumOperations(num = \"250025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"10100\")",
        "minimumOperations(num = \"752500\")",
        "minimumOperations(num = \"502575\")",
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"00257500\")",
        "minimumOperations(num = \"055025\")",
        "minimumOperations(num = \"7752500\")",
        "minimumOperations(num = \"01000111\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"002575\")",
        "minimumOperations(s = \"002575\")",
        "minimumOperations(s = \"002575\")",
        "minimumOperations(s = \"0075\")",
        "minimumOperations(s = \"0000\")",
        "minimumOperations(s = \"00250075\")",
        "minimumOperations(s = \"0120112\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5, 6])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5, 6])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation(nums = [3,2,4,1])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4, 6, 8, 7])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LRa\")",
        "furthestDistanceFromOrigin(moves = \"LRa\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLA\")",
        "furthestDistanceFromOrigin(moves = \"LRRALA\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLRA\")",
        "furthestDistanceFromOrigin(moves = \"LRaLRa\")",
        "furthestDistanceFromOrigin(moves = 'LLRA')",
        "furthestDistanceFromOrigin(moves = 'LLARL')",
        "furthestDistanceFromOrigin(moves = \"RLLALAL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLRLLL\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"bee\", \"cat\"], s = \"abc\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"apple\", \"berry\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"ab\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cherry\"], s = \"ABC\")",
        "isAcronym(words = [\"apple\", \"burst\", \"cherry\"], s = \"abc\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 2, 1], modulo=3, k=0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,1,2], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 2, 4, 2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 3, 3, 2, 2, 2, 1, 1, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[3, 1, 4, 2, 3, 5, 2], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [0, 0, 1, 1, 1], modulo = 3, k = 2)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [123, 45])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [123, 345])",
        "countBeautifulPairs(nums = [123, 456, 789])",
        "countBeautifulPairs(nums = [12, 23, 45])",
        "countBeautifulPairs(nums = [123, 234, 456])",
        "countBeautifulPairs(nums=[12, 23, 31, 24])",
        "countBeautifulPairs(nums = [22, 43, 45, 23, 35])",
        "countBeautifulPairs(nums = [123, 235, 45, 1024])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums=[1, 1, 1, 1, 1], target=3)",
        "maximumJumps(nums = [3, 1, 2, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 0, 0], target = 2)",
        "maximumJumps(nums = [3,2,1], target = 1)",
        "maximumJumps(nums=[93, -95, -2, -98, -99, -54], target=100)",
        "maximumJumps(nums=[5, 1, 4, 2, 7, 8, 9, 10, 4, 1, 5], target = 3)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [123, 234, 345, 456])",
        "countBeautifulPairs(nums = [123, 234, 345])",
        "countBeautifulPairs(nums = [123, 456, 789, 321])",
        "countBeautifulPairs(nums=[123, 234])",
        "countBeautifulPairs(nums = [123, 45, 76])",
        "countBeautifulPairs(nums = [123, 321, 245, 542])",
        "countBeautifulPairs(nums = [12, 35, 23, 56, 78])",
        "countBeautifulPairs(nums = [25, 45, 35, 65])",
        "countBeautifulPairs(nums = [23, 34, 27, 29, 46, 63])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDABCDABCD\")"
    ],
    "sample_150": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"singiit\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [0, 1, 2])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 2])",
        "doesValidArrayExist(derived = [1, 2, 3, 5, 6])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 4, 7])",
        "findValueOfPartition(nums = [0, 1, 2, 3])",
        "findValueOfPartition(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "findValueOfPartition(nums = [0, 2, 3, 5, 8, 10])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 8, 10])",
        "findValueOfPartition(nums = [3, 5, 8, 10, 12])",
        "findValueOfPartition(nums = [1, 3, 1, 2, 4, 1, 5])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 2], [3, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n=3, queries=[[1, 2], [2, 2], [3, 1]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 5)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 25], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 45, 60], target = 70)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 24, 18], target = 22)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 25], target=25)",
        "numberOfEmployeesWhoMetTarget(hours = [25, 20, 27], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 8, 4, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 25, 15], target = 30)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [3, 2, 1], m = 5)",
        "canSplitArray(nums = [2, 3, 1, 1, 2], m = 5)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [2, 1, 1], m = 3)",
        "canSplitArray(nums = [2, 1, 2, 1], m = 4)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 1], m = 1)",
        "canSplitArray(nums = [1, 1, 2, 3, 4, 7], m = 5)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], m=3, k=1)",
        "countInterestingSubarrays(nums = [2, 5, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 5, 7], m = 3, k = 1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], t = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], t = 5)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 3, 5], t = 5)",
        "longestAlternatingSubarray(nums = [0, 1, 3, 2], t = 3)",
        "longestAlternatingSubarray(nums=[2, 3, 4, 5, 6], t=10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], t = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 1, 2, 1], t = 5)",
        "longestAlternatingSubarray(nums=[2, 3, 5, 7, 9], t=10)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 0, 1, 1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = \"51230100000\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 12, b = 3)",
        "makeTheIntegerZero(a = 15, b = 3)",
        "makeTheIntegerZero(a = 15, b = 2)",
        "makeTheIntegerZero(a = 20, b = 3)",
        "makeTheIntegerZero(a = 17, b = 5)",
        "makeTheIntegerZero(a = 17, b = 4)",
        "makeTheIntegerZero(a = 17, b = 3)",
        "makeTheIntegerZero(a = 35, b = 4)",
        "makeTheIntegerZero(a = 17, b = 1)",
        "makeTheIntegerZero(a = 37, b = 7)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 5, 11, 5], m = 10)",
        "canSplitArray(nums = [2, 1, 5, 7], m = 4)",
        "canSplitArray(nums = [2, 3, 1], m = 5)",
        "canSplitArray(nums = [2, 3, 2], m = 5)",
        "canSplitArray(nums = [2, 3, 1, 1], m = 3)",
        "canSplitArray(nums = [5, 1, 3, 2], m = 4)",
        "canSplitArray(nums = [5, 3, 2, 4, 1], m = 8)",
        "canSplitArray(nums = [5, 1, 2, 4, 8], m = 4)",
        "canSplitArray(nums = [2, 3, 2, 3, 2], m = 5)"
    ],
    "sample_161": [
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n=2, target=6)",
        "minimumPossibleSum(n=2, target=6)",
        "minimumPossibleSum(n = 2, target = 3)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [3, 5, 6, 8])",
        "findValueOfPartition(nums = [1, 2, 3, 5])",
        "findValueOfPartition(nums = [3, 5, 6, 8, 10])",
        "findValueOfPartition(nums = [2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 4, 7, 9])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 7, 8])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 7, 8])",
        "findValueOfPartition(nums = [1, 2, 4, 7, 8, 9])",
        "findValueOfPartition(nums = [2, 3, 5, 6, 9])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[1, 5], [2, 6], [3, 7]])",
        "numberOfPoints(nums = [[1,5], [2,6], [3,7]])",
        "numberOfPoints(nums = [[1, 5], [6, 10]])",
        "numberOfPoints(nums = [[1,3], [3,6]])",
        "numberOfPoints(nums = [[1,3], [3,5], [7,9]])",
        "numberOfPoints(nums = [[1,3], [3,6], [4,7]])",
        "numberOfPoints(nums = [[1, 3], [4, 7], [10, 12]])",
        "numberOfPoints(nums = [[2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1,4], [7,8], [11,12]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[2, 4], [1, 3], [4, 6]])",
        "numberOfPoints(nums = [[2, 4], [3, 5], [6, 8]])",
        "numberOfPoints(nums = [[0, 2], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 5], [6, 9], [2, 8]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two,three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"@\")",
        "splitWordsBySeparator(words = [\"one two\", \"three\", \"four five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"\", \"three\", \"four\", \"five\", \"\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words=['one,two', 'three;four,five', 'six'], separator=',')"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 9)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 11)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 13)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 2, 3, 4], target = 5)",
        "minOperations(nums = [1, 2], target = 4)",
        "minOperations(nums = [3, 2, 1], target = 1)",
        "minOperations(nums = [1, 5, 9, 13], target = 7)",
        "minOperations(nums = [10, 10], target = 5)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 2], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 10], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 0, 0, 0])"
    ],
    "sample_159": [
        "maxSum(nums = [])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 1])",
        "maxSum(nums = [0,0,0])",
        "maxSum(nums = [0, 1, 2, 3])",
        "maxSum(nums = [123, 321])",
        "maxSum(nums = [0,1,2,3])",
        "maxSum(nums=[1,2,3,4,5])",
        "maxSum(nums = [123, 234, 345])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [2, 1, 2, 1, 2, 3])",
        "continuousSubarrays(A = [4, 2, 2, 8, 3, 3, 1])",
        "continuousSubarrays(A = [2, 2, 3, 1, 2, 2])",
        "continuousSubarrays(A = [2, 2, 1, 2, 1, 2])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 4, 5, 6, 7])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 3, 2])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 4, 2, 3, 2, 1])",
        "continuousSubarrays(A = [3, 2, 1, 4, 5, 2, 3, 1, 2])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 3, 1, 2, 2])",
        "distinctDifferenceArray(nums = [2, 2, 1, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4])",
        "distinctDifferenceArray(nums = [2, 3, 1, 2, 1])",
        "distinctDifferenceArray(nums = [2, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [3, 1, 5, 2, 4, 1, 3, 2, 5, 4])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 1])",
        "maxNonDecreasingLength(a = [1, 5, 7, 8, 9], b = [2, 4, 6, 8, 10])",
        "maxNonDecreasingLength(a = [3, 2, 6, 4, 5, 1], b = [3, 2, 7, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 3, 2, 4, 6])",
        "maxNonDecreasingLength(a = [1, 5, 7, 9, 10], b = [2, 4, 8, 10, 12])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [0, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 3, 5, 2, 4], b = [2, 4, 6, 3, 5])",
        "maxNonDecreasingLength(a = [2, 1, 5, 7, 8], b = [2, 4, 5, 6, 8])",
        "maxNonDecreasingLength(a = [3, 4, 9, 6, 5], b = [2, 5, 1, 7, 6])",
        "maxNonDecreasingLength(a = [1, 5, 2, 7, 8, 3], b = [2, 4, 7, 10])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 7, additionalTank = 3)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 15, additionalTank = 0)",
        "distanceTraveled(mainTank = 15, additionalTank = 0)"
    ],
    "sample_160": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [0, 2, 3, 4, 5])",
        "maxSum(nums = [9,8,7,6,5,4,3,2,1,0])",
        "maxSum(nums = [3, 30, 3, 9])",
        "maxSum(nums = [23, 12, 34, 21])",
        "maxSum(nums = [100, 100, -2, -2])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kdebsncd')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kddsbcncd')",
        "smallestString(s = \"kddsbecd\")",
        "smallestString(s = 'kdeecncd')"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [2, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 2, 4, 6, 7])",
        "findValueOfPartition(nums = [0, 1, 5, 6])",
        "findValueOfPartition(nums = [2, 1, 3, 1])",
        "findValueOfPartition(nums = [0, 1, 2, 4])",
        "findValueOfPartition(nums = [2, 5, 9])",
        "findValueOfPartition(nums = [2, 3, 4, 5, 7, 8])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"baa\")",
        "makeSmallestPalindrome(s = \"acbd\")",
        "makeSmallestPalindrome(s = \"abac\")",
        "makeSmallestPalindrome(s = \"adcf\")",
        "makeSmallestPalindrome(s = 'acb')",
        "makeSmallestPalindrome(s = \"adbc\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 45, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 30, num2 = 6)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 5], [2, 6], [3, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [3, 4]])",
        "numberOfPoints(nums = [[1, 5], [2, 6], [3, 4]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,4]])",
        "numberOfPoints(nums = [[1,3], [2,5], [3,7]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5, 6], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5, 6], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 5, 1, 2], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 1, 2, 2, 3, 1, 1, 2], m = 2, k = 0)"
    ],
    "sample_40": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aabac\")",
        "minimumCost(s = \"aabac\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"aabba\")",
        "minimumCost(s = \"aabc\")",
        "minimumCost(s = \"BCAB\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 1, 1, 1])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 1, 1, 2])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 22, 24], target = 24)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 7, 8, 2, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 7, 8, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 50, 30, 60, 20], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 25, 30, 5, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 80, 60, 70, 80], target = 70)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 45, 50, 30, 60], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [35, 45, 60, 75, 15], target = 40)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"nveen\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = 'evenn')",
        "makeSmallestPalindrome(s = \"oneven\")",
        "makeSmallestPalindrome(s = \"enev\")",
        "makeSmallestPalindrome(s = \"event\")",
        "makeSmallestPalindrome(s = \"nevts\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"5123010000\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3, 1, 2, 3], m=3, k=0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3, 1, 2, 3], m=3, k=1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3, 3], m=3, k=0)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], m=3, k=0)",
        "countInterestingSubarrays(nums=[2, 2, 2, 1, 2, 2, 1], m=2, k=0)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 2, 1, 2, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1], m=3, k=0)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [5, 3, 2], x = 2)",
        "minCost(A = [3, 1, 2], x = 2)",
        "minCost(A = [4, 3, 2, 1], x = 2)",
        "minCost(A = [2, 3, 4, 5], x = 2)",
        "minCost(A = [4, 2, 7, 5, 3], x = 3)",
        "minCost(A = [4, 3, 5, 2, 5, 1], x = 3)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 3, 2, 5, 4])",
        "maxIncreasingGroups(u = [1, 1, 2])",
        "maxIncreasingGroups(u = [2, 1, 2, 1, 2])",
        "maxIncreasingGroups(u = [2, 1, 2, 1, 2, 1, 2, 1])",
        "maxIncreasingGroups(u = [3, 2, 1, 5, 1])",
        "maxIncreasingGroups(u = [2, 3, 1, 5, 3, 4])",
        "maxIncreasingGroups(u = [2, 4, 3, 5, 6, 1])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [2, 1, 1, 2], k = 2)",
        "checkArray(nums = [1, 2, 3, 1], k = 2)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [2, 3, 4, 7], k = 2)",
        "checkArray(nums = [2, 2, 2, 2, 2], k = 1)",
        "checkArray(nums = [5, 4, 3, 1], k = 2)",
        "checkArray(nums = [0, 2, 1, 0], k = 1)",
        "checkArray(nums = [0, 2, 4, 7, 11, 14], k = 2)",
        "checkArray(nums = [3, 4, 8, -10, -2], k = 2)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCDAB\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums=[1, 1, 1], target=3)",
        "minOperations(nums = [1,1,1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 12)",
        "minOperations(nums = [1, 2, 3], target = 7)",
        "minOperations(nums=[1, 2, 3], target=5)",
        "minOperations(nums=[2, 3, 4, 5, 1], target=9)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"@\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"@\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple||orange||banana\"], separator = \"||\")",
        "splitWordsBySeparator(words = [\"apple||orange\", \"banana\"], separator = \"||\")",
        "splitWordsBySeparator(words = [\"apple||orange\", \"banana||grape\"], separator = \"||\")",
        "splitWordsBySeparator(words = [\"Apple||Banana||Orange\"], separator = \"||\")"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsbndd\")",
        "smallestString(s = \"kddsbndd\")",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kdeebncd\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kdeebnce\")",
        "smallestString(s = \"kddsbncdz\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LLRR__\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRR__\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRR__\")",
        "furthestDistanceFromOrigin(moves = \"LL_R\")",
        "furthestDistanceFromOrigin(moves = \"L_RR__\")",
        "furthestDistanceFromOrigin(moves = \"R_L_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRRR_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"RR_RR_R\")",
        "furthestDistanceFromOrigin(moves = \"R_L_RR_RR_\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 8, num2 = 1)",
        "makeTheIntegerZero(num1 = 8, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 8, num2 = 4)",
        "makeTheIntegerZero(num1 = 27, num2 = 5)"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kdebsncd')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kdebncd')",
        "smallestString(s = 'kdebncd')",
        "smallestString(s = \"kdeebsnd\")",
        "smallestString(s = \"kdedsncd\")"
    ],
    "sample_146": [
        "finalString(s = 'nopiter')",
        "finalString(s = 'roti')",
        "finalString(s = 'toop')",
        "finalString(s = 'tpinre')",
        "finalString(s = 'nietorp')",
        "finalString(s = \"rotipoon\")",
        "finalString(s = 'tspoonter')",
        "finalString(s = \"tponni\")",
        "finalString(s = 'tniopnopiretni')",
        "finalString(s = \"!ponretni\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,3,4,5,6,7,8,9,0], k = 3)",
        "longestEqualSubarray(nums = [2, 2, 2, 3, 3, 3], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,4,2,5,6,7], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 3, 2], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 2, 3, 3, 3, 3, 1, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 3, 1, 2, 2, 2, 1], k = 1)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3)",
        "canSplitArray(nums = [3, 3, 1], m = 3)",
        "canSplitArray(nums=[1, 1, 1, 1], m=2)",
        "canSplitArray(nums=[2, 2, 1, 1], m=3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 18)",
        "canSplitArray(nums = [1,2,3,1,2,3,1,2,3], m = 5)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one-two', 'three-four-five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one/two\", \"three/four\", \"five/six\"], separator = \"/\")",
        "splitWordsBySeparator(words = ['one_two', 'three_four_five', 'six'], separator = '_')",
        "splitWordsBySeparator(words = ['one|two|three', 'four|five|six'], separator = '|')",
        "splitWordsBySeparator(words = [\"one*two\", \"three*four*five\", \"six\"], separator = \"*\")",
        "splitWordsBySeparator(words=[\"one/two\", \"three/four\", \"five/six\"], separator=\"/\")",
        "splitWordsBySeparator(words = [\"one:two::three:four:::five:six\"], separator = \":\")",
        "splitWordsBySeparator(words = ['one/two', 'three:four', 'five.six'], separator = '/')",
        "splitWordsBySeparator(words = ['one|two', 'three:four;five-six'], separator = '|')",
        "splitWordsBySeparator(words = ['o,ne', 't,w,o', 'th,ree', 'fo,ur', 'f,ive,', 's,i,x'], separator = ',')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 30], target=40)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 30], target=30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 35, 40], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 25], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 6, 5], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours=[50,60,70,80], target=80)",
        "numberOfEmployeesWhoMetTarget(hours = [25, 22, 29], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours=[50, 55, 40, 45, 60], target=55)"
    ],
    "sample_168": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"HW\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwe\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwe\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hW\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbfx\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"Python\", \"is\", \"fun\"], s = \"Pif\")",
        "isAcronym(words = [\"co\", \"de\", \"m\"], s = \"COM\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"Python\", \"is\", \"awesome\"], s = \"PIA\")",
        "isAcronym(words = [\"Python\", \"is\", \"fun\"], s = \"PIF\")",
        "isAcronym(words = [\"Python\", \"is\", \"fun\"], s = \"PIF\")",
        "isAcronym(words = [\"Python\", \"Is\", \"Great\"], s = \"PIG\")",
        "isAcronym(words = [\"example\", \"words\"], s = \"EW\")",
        "isAcronym(words = [\"Python\", \"Programming\"], s = \"PHP\")",
        "isAcronym(words = [\"master\", \"of\", \"disaster\"], s = \"mod\")",
        "isAcronym(words = [\"motor\", \"car\", \"bicycle\"], s = \"MACB\")",
        "isAcronym(words = [\"Meaningful\", \"Analysis\", \"For\", \"Python\"], s = \"MAFP\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abacadaeaf\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = \"abac\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = \"acb\")",
        "makeSmallestPalindrome(s = \"acbd\")",
        "makeSmallestPalindrome(s = \"acba\")"
    ],
    "sample_50": [
        "smallestString(s = \"aaab\")",
        "smallestString(s = 'abac')",
        "smallestString(s = 'abac')",
        "smallestString(s = 'aaab')",
        "smallestString(s = 'abab')",
        "smallestString(s = 'aabab')",
        "smallestString(s = 'aabab')",
        "smallestString(s = \"abbaa\")",
        "smallestString(s = \"abbaa\")",
        "smallestString(s = \"ababz\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 4, 8, 16, 32], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 4, 7, 11], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABACD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDEFGH\")",
        "minLength(s = \"ACBAD\")"
    ],
    "sample_158": [
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [123, 321])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [0, 1, 2])",
        "maxSum(nums = [11, 22, 33])",
        "maxSum(nums = [9, 99, 999])",
        "maxSum(nums = [12, 345, 67, 89])",
        "maxSum(nums = [3, 5, 2])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4, 6, 7])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3, 5])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 1, 3, 6, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 6, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 6, 5])"
    ],
    "sample_162": [
        "maxSum(nums = [9, 81, 8, 88])",
        "maxSum(nums = [22, 8, 68, 36])",
        "maxSum(nums = [19, 88, 75, 24, 43, 89])",
        "maxSum(nums = [9, 88, 7, 99, 1, 5, 9])",
        "maxSum(nums = [88, 81, 56, 100, 20])",
        "maxSum(nums = [55, 81, 94])",
        "maxSum(nums = [88, 50, 20, 3])",
        "maxSum(nums = [23, 2, 7, 23, 45, 7, 43, 4, 6])",
        "maxSum(nums = [12, 24, 8, 36, 18, 28, 5, 32, 6, 7, 44, 54, 65])",
        "maxSum(nums = [8, 2, 9, 22, 28, 11, 29, 72, 11, 15])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"1011\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 35, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15, 20, 25], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 5, 10], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 35, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 25, 35, 40], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 24, 28, 30, 10], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [120, 100, 150, 90, 180], target = 100)"
    ],
    "sample_166": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hweolrllod\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hworld\")",
        "isAcronym(words = [\"Made\", \"Up\", \"Words\"], s = \"MUW\")",
        "isAcronym(words = [\"multi\", \"word\", \"string\"], s = \"mws\")",
        "isAcronym(words = [\"bat\", \"man\", \"says\", \"hi\"], s = \"bamsh\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank=2, additionalTank=0)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=1)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups(A = [0, 1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1, 1])",
        "maxIncreasingGroups(A = [1, 1, 1, 1, 1, 1])",
        "maxIncreasingGroups(A = [1, 1, 1, 1, 1, 1])",
        "maxIncreasingGroups(A = [1, 1, 2, 3, 3])",
        "maxIncreasingGroups(A = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5, 5, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5, 5, 6, 6, 7])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [2, 3, 4, 5, 2, 3, 4, 5, 2, 3])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 8, 1, 2, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 7, 10, 15, 20], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"aaabbb\")",
        "minimizedStringLength(s = \"aabcc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aaabb\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "longestEqualSubarray(nums=[1,2,3,1,2,3,1,2,3], k=1)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3,1,2,3], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,2,1,2,3], k = 2)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1], [3, 0], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 1], [4, 2], [5, 2]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [2, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [2, 1], [4, 2]])",
        "colorTheArray(n=5, queries=[[1, 1], [2, 1], [3, 1], [2, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 1], [4, 2], [4, 3]])",
        "colorTheArray(n=3, queries=[[0, 1], [1, 1], [2, 1], [0, 0], [2, 2]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 45, 60], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 25], target=30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 25, 35, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 15, 18, 20], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 7, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 14, 15, 16], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 14, 8, 15], target = 16)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [123, 234, 345, 456, 567])",
        "countBeautifulPairs(nums = [123, 456, 789, 111, 222])",
        "countBeautifulPairs(nums=[12, 34, 23, 56, 78])",
        "countBeautifulPairs(nums = [12, 25, 30, 45, 60])",
        "countBeautifulPairs(nums = [22, 45, 33, 77, 51])",
        "countBeautifulPairs(nums = [12, 35, 98, 46, 77])",
        "countBeautifulPairs(nums = [22, 60, 75, 45, 32])",
        "countBeautifulPairs(nums = [25, 27, 33, 45, 55])",
        "countBeautifulPairs(nums = [215, 15, 51, 59, 21])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums = [1, 3, 4])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [0, 2, 4, 6, 1, 3, 5, 7])",
        "countWays(nums = [1, 3, 5, 10, 15])",
        "countWays(nums = [0, 1, 2, 3, 5, 6, 7, 8])",
        "countWays(nums = [2, 2, 3, 5, 6, 7])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '1101')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 8, 10, 12, 15], k = 2)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [0, 1, 2])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [3, 3, 0])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 3)",
        "maximumJumps(nums = [1, 3, 2, 1, 4], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [4, 3, 2, 1, 4], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7], target = 2)",
        "maximumJumps(nums = [1, 3, 1, 2, 4, 2, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 3, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [3,2,5,1,1,2], target = 2)",
        "maximumJumps(nums = [1, 4, 2, 3, 1, 2, 3, 4, 1, 2], target = 2)"
    ],
    "sample_149": [
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'sing')",
        "finalString(s = 'singer')",
        "finalString(s = \"singing\")",
        "finalString(s = 'silent')"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [2, 2, 2, 1, 2, 2])",
        "continuousSubarrays(A = [2, 2, 2, 1, 2, 2])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 3])",
        "continuousSubarrays(A = [1,2,3,4,5])",
        "continuousSubarrays(A = [2, 3, 1, 2, 3, 4])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 4, 2, 3, 1, 3])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 3])"
    ],
    "sample_228": [
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [0, 2, 3, 4])",
        "countWays(nums = [0, 1, 2, 4])",
        "countWays(nums = [1,2,4,7])",
        "countWays(nums = [0, 1, 2, 4, 6, 7])",
        "countWays(nums = [0, 0, 1])",
        "countWays(nums = [0, 2, 2, 4])",
        "countWays(nums=[2,3,4,6,7])",
        "countWays(nums=[0, 1, 3, 4, 5, 6, 7])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13], k = 2)",
        "maximumBeauty(nums = [1, 5, 11, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 3, 4, 6, 8, 9], k = 2)",
        "maximumBeauty(nums = [2, 1, 3, 5, 3, 3], k = 1)",
        "maximumBeauty(nums = [2, 1, 3, 5, 4, 6, 7, 8], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [10, 20, 30, 40, 50])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 3, 2, 1])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7])",
        "distinctDifferenceArray(a = [1, 2, 2, 4, 5, 5, 5, 6, 7, 8, 9])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [2, 3, 1, 4, 2])",
        "continuousSubarrays(a = [2, 3, 4, 2, 3, 4, 2])",
        "continuousSubarrays(a = [2, -3, 1, 2, -3, 1, 2, -3, 1])",
        "continuousSubarrays(a = [2, 1, 4, 7, 5, 3, 8, 6, 9])",
        "continuousSubarrays(a = [2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2])",
        "continuousSubarrays(a = [2, 4, 6, 3, 6, 8, 10])",
        "continuousSubarrays(a = [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1])",
        "continuousSubarrays(a = [1, 3, 2, 5, 4, 3, 2, 5, 3, 1])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 1, 6])",
        "continuousSubarrays(nums = [2, 3, 1, 2, 4, 3])",
        "continuousSubarrays(nums = [2, 1, 3, 1, 2, 2, 3, 3])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [2, 3, 4, 1, 5])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 7, 8, 9, 1, 3, 4])",
        "continuousSubarrays(nums = [2, 1, 3, 2, 5, 2, 7])",
        "continuousSubarrays(nums = [4, 2, 2, 8, 3, 3, 1, 9, 5, 5])",
        "continuousSubarrays(nums = [4, 2, 2, 5, 1, 4, 5, 6, 6, 8])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [123, 456, 789])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [123, 321, 234, 432])",
        "countBeautifulPairs(nums = [182, 281, 123])",
        "countBeautifulPairs(nums = [23, 34, 2, 5])",
        "countBeautifulPairs(nums = [4321, 1234, 1243])",
        "countBeautifulPairs(nums = [123456, 765432])",
        "countBeautifulPairs(nums = [135, 24, 112])",
        "countBeautifulPairs(nums = [30, 12, 34, 21])",
        "countBeautifulPairs(nums = [123, 45, 67, 89, 102, 14, 15, 16, 17, 18, 19, 20])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4, 6, 7])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4, 6, 7])",
        "semiOrderedPermutation(nums = [1, 5, 3, 4, 2])",
        "semiOrderedPermutation(nums = [3,2,4,1,5,6,7])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4, 6])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 0, 1, 1, 0])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = '10110')"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABACD\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"CDABCDABCDABCDABCD\")",
        "minLength(s = \"AABBCDCDD\")",
        "minLength(s = \"AABCDAB\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 2, 3, 4, 5, 1])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4, 1])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 3, 1, 2, 1])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 123, num2 = 45)",
        "makeTheIntegerZero(num1 = 4, num2 = 1)",
        "makeTheIntegerZero(num1 = 40, num2 = 7)",
        "makeTheIntegerZero(num1 = 97, num2 = 4)",
        "makeTheIntegerZero(num1 = 567, num2 = 2)",
        "makeTheIntegerZero(num1 = 123456, num2 = 12345)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 1, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 1, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 1, 2], target = 1)",
        "maximumJumps(nums = [1, 3, 5, 8, 10, 12], target = 2)",
        "maximumJumps(nums = [3, 1, 3, 2, 4, 2], target = 1)",
        "maximumJumps(nums = [1, 3, 5, 1, 1, 1, 5, 1, 3, 4, 1], target = 2)",
        "maximumJumps(nums = [1, 2, 1, 4, 3, 1, 1, 2], target = 2)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 6, 7])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 6, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 7, 8, 10])",
        "maxIncreasingGroups(x = [1, 2, 4, 5, 6, 8])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"L_R_R_R_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"R__R_L\")",
        "furthestDistanceFromOrigin(moves = \"L_RR__R_\")",
        "furthestDistanceFromOrigin(moves = \"R_R__R_\")",
        "furthestDistanceFromOrigin(moves = \"__RR__LL_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R_L_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"RR_RR_L\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R_L__L\")",
        "furthestDistanceFromOrigin(moves = \"LL_R_\")",
        "furthestDistanceFromOrigin(moves = \"RRRR_LL_R_\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = '001100')"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n=1, queries=[[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 3, queries = [[0, 1]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n = 2, queries = [[0,1]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [3, 5, 6, 8, 10])",
        "findValueOfPartition(nums = [3, 1, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7])",
        "findValueOfPartition(nums = [0, 1, 2, 3, 4, 5, 6])",
        "findValueOfPartition(nums = [3, 4, 7, 10, 15])",
        "findValueOfPartition(nums = [2, 5, 8, 10, 13])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums=[0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[0, 1, 1, 1, 1, 1, 0])"
    ],
    "sample_121": [
        "minimumIndex(nums = [7, 1, 5, 3, 6, 4])",
        "minimumIndex(nums = [3,1,2,3,2,4,5,6])",
        "minimumIndex(nums = [3, 2, 1, 3, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 1])",
        "minimumIndex(nums = [3, 1, 3, 3, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 3])",
        "minimumIndex(nums = [3,1,3,2,1,3])",
        "minimumIndex(nums = [4, 4, 1, 1, 1, 3, 3, 2, 2, 2])",
        "minimumIndex(nums = [3,2,2,1,4,1,2])",
        "minimumIndex(nums = [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 1, 2, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 5, 3], [3, 6, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 4, 3], [3, 5, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 6], [3, 4, 7], [5, 6, 8]])",
        "maximizeTheProfit(n = 3, offers = [[1, 5, 2], [2, 6, 3], [3, 7, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 4], [2, 5, 1], [3, 6, 6]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 5], [2, 3, 6], [3, 5, 6]])",
        "maximizeTheProfit(n = 1, offers = [[1, 2, 8]])",
        "maximizeTheProfit(n = 3, offers = [[1, 5, 6], [2, 4, 4], [3, 6, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 2], [3, 5, 3], [2, 4, 2], [4, 6, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 6], [2, 3, 7], [3, 5, 4], [3, 6, 1], [4, 7, 10]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"25750\")",
        "minimumOperations(num = \"5075\")",
        "minimumOperations(num = \"75025\")",
        "minimumOperations(num = \"250050\")",
        "minimumOperations(num = \"750025\")",
        "minimumOperations(num = \"55525\")",
        "minimumOperations(num = \"550055\")",
        "minimumOperations(num = \"111000\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"01203\")",
        "minimumOperations(num = \"10010\")",
        "minimumOperations(num = \"1203\")",
        "minimumOperations(num = \"4005\")",
        "minimumOperations(num = \"123450\")",
        "minimumOperations(num = \"2050\")",
        "minimumOperations(num = \"355\")",
        "minimumOperations(num = \"377\")",
        "minimumOperations(num = \"251716\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [2, 3, 3]])",
        "maximizeTheProfit(n=5, offers=[])",
        "maximizeTheProfit(n=5, offers=[])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10]])",
        "maximizeTheProfit(n=4, offers=[[1, 2, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 4], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [4, 5, 30]])",
        "maximizeTheProfit(n = 5, offers = [[3, 2, 1], [1, 2, 2]])",
        "maximizeTheProfit(n=5, offers=[[2, 1, 1], [1, 3, 2], [3, 4, 2]])",
        "maximizeTheProfit(n=5, offers=[[4, 1, 2], [5, 3, 3], [6, 2, 4]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 2, 4, 6], threshold = 7)",
        "longestAlternatingSubarray(nums = [2, 3, 1, 2, 4, 7], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 7, 11, 9, 13, 15], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 3, 5, 6, 7, 8], threshold = 5)",
        "longestAlternatingSubarray(nums=[1, 1, 1, 2, 2, 2, 3, 3, 3], threshold=5)",
        "longestAlternatingSubarray(nums = [2, 3, 3, 2, 5, 5, 5, 2, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,1,3,5], threshold = 7)"
    ],
    "sample_203": [
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"00025\")",
        "minimumOperations(num = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"225\")",
        "minimumOperations(num = \"0001\")",
        "minimumOperations(num = \"12340\")",
        "minimumOperations(num = \"275\")",
        "minimumOperations(num = \"43\")",
        "minimumOperations(num = \"01011\")"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [1, 2], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [2, 0], [5, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1], [1, 2], [3, 2], [2, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 2], [1, 0], [3, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [4, 1], [2, 2], [3, 2]])",
        "colorTheArray(n=5, queries=[[1, 1], [3, 2], [4, 1], [2, 2], [5, 3]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [1, 0], [2, 2], [4, 2]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [3, 3, 1, 3, 2, 3])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [3,3,2,1,2])",
        "minimumIndex(nums = [1, 1, 0, 0, 1, 1])",
        "minimumIndex(nums = [1,2,2,3,1])",
        "minimumIndex(nums = [3, 2, 1, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 2, 1])",
        "minimumIndex(nums = [3, 2, 1, 4, 2])",
        "minimumIndex(nums = [0, 1, 2, 1, 2, 0, 2])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [1, 2, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 1, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 1], target = 0)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [3, 1, 1, 4, 2, 1, 2], target = 2)",
        "maximumJumps(nums = [5, 1, 3, 5, 2, 5, 3, 2, 1, 4], target = 3)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100000')"
    ],
    "sample_57": [
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 7, b = 1)",
        "distanceTraveled(a = 4, b = 2)",
        "distanceTraveled(a = 7, b = 2)",
        "distanceTraveled(a = 6, b = 0)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [3, 2, 1, 5, 4])",
        "findValueOfPartition(a = [3, 1, 2])",
        "findValueOfPartition(a = [2, 3, 1, 5, 4])",
        "findValueOfPartition(a = [1, 2, 3, 5, 8])",
        "findValueOfPartition(a = [2, 3, 5, 7, 9])",
        "findValueOfPartition(a = [1, 3, 5, 7, 9])",
        "findValueOfPartition(a = [2, 4, 6, 8])",
        "findValueOfPartition(a = [1, 2, 3, 10, 5])",
        "findValueOfPartition(a = [1, 2, 3, 5, 7, 8, 9])",
        "findValueOfPartition(a = [5, 2, 1, 4, 3])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 3, 3, 5, 5, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2, 3, 4, 5, 4, 5, 6])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 2, 1, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [4, 5, 2, 5, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 3, 4, 5, 4, 3, 5, 6, 7, 8, 7, 6, 8, 9, 10, 9])",
        "distinctDifferenceArray(nums = [2, 1, 5, 1, 6, 7, 2, 8, 3])"
    ],
    "sample_120": [
        "minimumIndex(nums = [3, 3, 2, 1, 2, 2])",
        "minimumIndex(nums = [1, 0, 1, 1, 0, 1, 1])",
        "minimumIndex(nums = [2, 2, 2, 1, 1, 1])",
        "minimumIndex(nums = [3, 2, 1, 2, 3, 1, 2])",
        "minimumIndex(nums = [2, 2, 1, 1, 3])",
        "minimumIndex(nums = [1, 2, 1, 2, 1, 2])",
        "minimumIndex(nums = [2, 1, 2, 1, 3])",
        "minimumIndex(nums = [2, 2, 1, 2, 3, 2, 2, 2])",
        "minimumIndex(nums = [3, 1, 2, 1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [2, 4, 1, 2, 3, 2, 4])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"RLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves=\"LRL\")",
        "furthestDistanceFromOrigin(moves=\"RLL\")",
        "furthestDistanceFromOrigin(moves=\"RLLR\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"apple\")",
        "minimizedStringLength(s = \"abbc\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [5, 4, 3, 2, 1], k = 3)",
        "checkArray(nums = [3, 2, 1], k = 2)",
        "checkArray(nums = [2, 1, 6, 5], k = 3)",
        "checkArray(nums = [2, 1, 4], k = 3)",
        "checkArray(nums = [10, 2, 3, 2, 1], k = 3)",
        "checkArray(nums = [4, 2, 5, 1], k = 2)",
        "checkArray(nums = [15, 1, 2, 11, 8], k = 2)",
        "checkArray(nums = [4, 8, 1, 1, 2, 5, 3], k = 3)",
        "checkArray(nums = [12, -5, 7, 8, -15, 2, 1, 10], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [2, 2, 2])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 4])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 4])",
        "maxIncreasingGroups(usageLimits = [5, 3, 2, 1, 4])",
        "maxIncreasingGroups(usageLimits = [500, 300, 200])",
        "maxIncreasingGroups(usageLimits = [2, 3, 1, 3, 1, 2])",
        "maxIncreasingGroups(usageLimits = [15, 10, 10, 5, 15])"
    ],
    "sample_206": [
        "minimumOperations(num = \"275\")",
        "minimumOperations(num = \"555\")",
        "minimumOperations(num = \"50\")",
        "minimumOperations(num = \"10011\")",
        "minimumOperations(num = \"0012575\")",
        "minimumOperations(num = \"001122\")",
        "minimumOperations(num = \"000100\")",
        "minimumOperations(num = \"405025\")",
        "minimumOperations(num = \"000101101110\")",
        "minimumOperations(num = \"450053\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0, 1, 0])"
    ],
    "sample_38": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"BABA\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"AABAAB\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 1])",
        "maxIncreasingGroups(usageLimits = [5, 4, 3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [2, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [3, 4, 1])",
        "maxIncreasingGroups(usageLimits = [10, 5, 8, 12])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 5, 6, 7])",
        "maxIncreasingGroups(usageLimits = [1, 1, 1, 3, 3, 3, 7])"
    ],
    "sample_53": [
        "smallestString(s = \"baazc\")",
        "smallestString(s = \"baazc\")",
        "smallestString(s = 'baabd')",
        "smallestString(s = \"baabd\")",
        "smallestString(s = \"baacd\")",
        "smallestString(s = \"baacd\")",
        "smallestString(s = \"baacd\")",
        "smallestString(s = \"baaab\")",
        "smallestString(s = 'baadc')",
        "smallestString(s = \"bacd\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [3, 2, 1, 5, 4], x = 2)",
        "minAbsoluteDifference(nums = [1,3,6,7,9], x = 2)",
        "minAbsoluteDifference(nums = [3, 7, 2, 9, 4, 8, 1, 5], x = 3)",
        "minAbsoluteDifference(nums = [1,5,2,19,6], x = 2)",
        "minAbsoluteDifference(nums = [1,5,8,13], x = 2)",
        "minAbsoluteDifference(nums=[1,6,7,12,15,18], x=2)",
        "minAbsoluteDifference(nums = [1, 5, 3, 2, 2, 5, 1], x = 3)",
        "minAbsoluteDifference(nums = [1,3,17,19,21,42], x = 2)",
        "minAbsoluteDifference(nums = [1,3,17,11,13,6,17,3,15], x = 2)",
        "minAbsoluteDifference(nums = [1,5,2,19,3,11,17,7], x = 2)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 4, offers = [[1, 3, 2], [2, 4, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 2], [2, 4, 3], [3, 5, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 20], [2, 3, 30]])",
        "maximizeTheProfit(N = 3, offers = [(1, 3, 2), (2, 3, 1)])",
        "maximizeTheProfit(N=5, offers=[[1, 3, 1], [2, 4, 2], [3, 5, 3]])",
        "maximizeTheProfit(N=3, offers=[[1, 2, 2], [2, 3, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 3, offers = [(1, 2, 2), (2, 3, 1), (1, 3, 3)])",
        "maximizeTheProfit(N = 4, offers = [[1, 3, 10], [2, 4, 20], [3, 4, 30]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 50], [2, 3, 100], [1, 3, 20]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"\"], b = \"\")",
        "splitWordsBySeparator(a = [\"\"], b = \".\")",
        "splitWordsBySeparator(a = [\"apple,orange,banana\"], b = \",\")",
        "splitWordsBySeparator(a = [\"a,b,c\", \"\", \"d,e,f\"], b = \",\")",
        "splitWordsBySeparator(a = [\"1,2,3\", \"4,5,6\"], b = \",\")",
        "splitWordsBySeparator(a = [\"Hello,World\", \"Python,Programming\"], b = \",\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"d\")",
        "splitWordsBySeparator(a = [\"\", \"ba,na,na\"], b = \",\")",
        "splitWordsBySeparator(a = [\":::\"], b = \"::\")",
        "splitWordsBySeparator(a = [\"apple|orange\", \"grape|strawberry\"], b = \"|\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123000')",
        "removeTrailingZeros(a = \"512301000\")",
        "removeTrailingZeros(a = '51230100000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"vneven\")",
        "makeSmallestPalindrome(s = \"nevvvvv\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 5, 2, 1, 4, 1, 3], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 2], k = 1)",
        "longestEqualSubarray(nums = [1,6,3,4,2,7,11,5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 2, 2, 1, 3, 3, 4, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,3,3,2,1,2], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 4, 3, 2, 1, 2, 2], k = 1)",
        "longestEqualSubarray(nums = [1, 5, 2, 1, 4, 1, 1, 1, 5, 2, 1, 3, 1], k = 1)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 9, 12], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 9, 12], k = 2)",
        "maximumBeauty(nums = [1, 3, 4, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 10)",
        "maximumBeauty(nums = [1, 3, 5, 8, 10, 11], k = 2)",
        "maximumBeauty(nums = [2, 3, 5, 8, 10, 11, 14], k = 3)"
    ],
    "sample_163": [
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [0, 0, 0, 0])",
        "maxSum(nums = [9, 99, 999])",
        "maxSum(nums = [0,1,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [99, 99])",
        "maxSum(nums = [0, 1, 2, 3, 4])",
        "maxSum(nums = [0, 9, 8, 1])",
        "maxSum(nums = [123, 444, 999])",
        "maxSum(nums = [3, 1, 4])"
    ],
    "sample_151": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = 'sing')",
        "finalString(s = 'singer')"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy.problem\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"easy.problem\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['easy.problem'], separator = '.')",
        "splitWordsBySeparator(words = ['easy.problem'], separator = '.')",
        "splitWordsBySeparator(words = [\"easy:problem\"], separator = \":\")",
        "splitWordsBySeparator(words = [\"easy/problem\"], separator = \"/\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = ['easy_problem'], separator = '_')"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,5,6], K = 1)",
        "longestEqualSubarray(A = [1, 3, 2, 2, 1, 3, 3, 1, 2], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3,4], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 1, 3, 2, 3], K = 1)",
        "longestEqualSubarray(A = [1,2,3,2,4,2,3,2,5,2], K = 3)",
        "longestEqualSubarray(A = [1, 3, 2, 2, 4, 5, 6], K = 2)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [2, 3, 4, 5])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [3, 2, 1, 0])",
        "countWays(nums=[1, 3, 5])",
        "countWays(nums = [4, 2, 2])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512300000')",
        "removeTrailingZeros(num = '5123000000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"Python\", \"is\", \"awesome\"], s = \"PIA\")",
        "isAcronym(words = [\"Python\", \"is\", \"awesome\"], s = \"PIA\")",
        "isAcronym(words = [\"apple\", \"bee\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbtfx\")",
        "isAcronym(words = [\"motor\", \"vehicle\"], s = \"MOVE\")",
        "isAcronym(words = [\"Mark\", \"Phillips\", \"Zuckerberg\"], s = \"MPZ\")",
        "isAcronym(words = [\"Moscow\", \"International\", \"Airport\"], s = \"Mai\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)"
    ],
    "sample_147": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = 'singer')",
        "finalString(s = 'singt')"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"oneven\")",
        "makeSmallestPalindrome(s = \"oneven\")",
        "makeSmallestPalindrome(s = \"nenev\")",
        "makeSmallestPalindrome(s = \"nveen\")",
        "makeSmallestPalindrome(s = \"venn\")",
        "makeSmallestPalindrome(s = 'nevde')"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [3, 5, 7]])",
        "maximizeTheProfit(n = 3, offers = [(1, 2, 5), (3, 4, 6)])",
        "maximizeTheProfit(n=3, offers=[(1, 2, 4), (2, 3, 5), (3, 4, 6)])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 1], [3, 5, 3]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 4], [2, 4, 2], [3, 5, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [2, 4, 3], [3, 4, 8]])",
        "maximizeTheProfit(n=10, offers=[ [1, 2, 3], [4, 5, 6], [7, 8, 9] ])",
        "maximizeTheProfit(n=3, offers=[[1, 2, 5], [2, 3, 5], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 5], [2, 5, 4], [3, 1, 6]])",
        "maximizeTheProfit(n=10, offers=[[1, 5, 6], [2, 4, 7], [3, 7, 8]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [2, 1, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "maximumJumps(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "maximumJumps(nums = [1, 3, 5, 10, 15], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [3, 1, 2, 4, 1], target = 2)",
        "maximumJumps(nums = [4, 6, 2, 1, 1], target = 3)",
        "maximumJumps(nums = [3, 4, 2, 1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [4, 2, 1, 7, 3], target = 2)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 3, 1])",
        "numberOfGoodSubarraySplits(nums=[0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,0,1,0,0,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = '0100')",
        "maximumOddBinaryNumber(s = '10010')"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 9)",
        "minimumSum(n = 2, k = 15)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 25, num2 = 5)",
        "makeTheIntegerZero(num1 = 13, num2 = 1)",
        "makeTheIntegerZero(num1 = 34, num2 = 10)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 2, 4, 1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 2, 4, 1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 3, 3, 1, 2, 1, 2], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 2, 3, 2, 4, 1], modulo = 3, k = 1)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "maximumBeauty(nums = [2, 3, 1, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "maximumBeauty(nums=[1, 3, 2, 4, 5], k=1)",
        "maximumBeauty(nums = [1, 1, 3, 3, 5, 5], k = 1)",
        "maximumBeauty(nums = [3, 2, 4, 1, 2, 3, 4], k = 1)"
    ],
    "sample_148": [
        "finalString(s = 'popiitner')",
        "finalString(s = 'pointer')",
        "finalString(s = 'pintor')",
        "finalString(s = 'pintor')",
        "finalString(s = 'tinrop')",
        "finalString(s = 'nopiter')",
        "finalString(s = 'topper')",
        "finalString(s = 'tienrop')",
        "finalString(s = 'pitonter')",
        "finalString(s = 'tpnor')"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [1, 2, 4, 6])",
        "countWays(nums = [1, 3, 3])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 23, 45, 67])",
        "countBeautifulPairs(nums = [123, 45, 78])",
        "countBeautifulPairs(nums=[123, 321])",
        "countBeautifulPairs(nums=[12, 23, 34])",
        "countBeautifulPairs(nums = [231, 123])",
        "countBeautifulPairs(nums = [123, 456, 789, 345])",
        "countBeautifulPairs(nums = [23, 45, 81, 67])",
        "countBeautifulPairs(nums = [23, 30, 24, 56, 70])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 20, num2 = 3)",
        "makeTheIntegerZero(num1 = 45, num2 = 3)",
        "makeTheIntegerZero(num1 = 14, num2 = 5)",
        "makeTheIntegerZero(num1 = 4, num2 = 1)",
        "makeTheIntegerZero(num1 = 14, num2 = 3)",
        "makeTheIntegerZero(num1 = 27, num2 = 6)",
        "makeTheIntegerZero(num1 = 3, num2 = 4)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"venn\")",
        "makeSmallestPalindrome(s = \"venn\")",
        "makeSmallestPalindrome(s = \"nenev\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"Monday\", \"Tuesday\", \"Wednesday\"], s = \"MTW\")",
        "isAcronym(words = [\"A\", \"Best\", \"Example\"], s = \"ABE\")",
        "isAcronym(words = [\"Microsoft\", \"Azure\", \"Notation\"], s = \"M.A.N.\")",
        "isAcronym(words = [\"Python\", \"Power\", \"Code\"], s = \"PPC\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 6)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 4, 7])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 3, 5])",
        "countWays(nums = [0, 2, 1, 3])",
        "countWays(nums = [1, 5, 2])",
        "countWays(nums = [1, 3, 6, 5, 4])"
    ],
    "sample_39": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aabac\")",
        "minimumCost(s = \"aabac\")",
        "minimumCost(s = \"abaacc\")",
        "minimumCost(s = \"abba\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"L_R_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"R__R_L\")",
        "furthestDistanceFromOrigin(moves = \"L__R\")",
        "furthestDistanceFromOrigin(moves = \"R__L_R_\")",
        "furthestDistanceFromOrigin(moves = \"L__R__\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R_L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"_____L__R_\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 8, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 3, 4, 4, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 2, 1, 3, 2])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 1, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 7, 1], threshold = 8)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 1], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 1, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 3, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 1, 4], threshold = 4)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 4], [3, 6], [7, 9]])",
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[1,4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1,3], [2,4], [3,5], [4,6]])",
        "numberOfPoints(nums = [[1,3],[1,4],[2,3],[2,4]])",
        "numberOfPoints(nums = [[1, 5], [2, 6], [3, 8], [4, 10]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [123, 321, 456, 654])",
        "countBeautifulPairs(nums=[12, 23, 34, 45])",
        "countBeautifulPairs(nums = [123, 231, 124, 241])",
        "countBeautifulPairs(nums=[12, 21, 13, 32])",
        "countBeautifulPairs(nums = [22, 45, 89, 36])",
        "countBeautifulPairs(nums = [123, 45, 1001, 1002])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 9)",
        "longestAlternatingSubarray(nums=[1, 3, 5, 2, 4], t=5)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 7, 9], t = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 1, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums=[1, 3, 5, 2, 7, 9], t=10)",
        "longestAlternatingSubarray(nums = [2, 5, 3], t = 3)",
        "longestAlternatingSubarray(nums = [5, 2, 3, 1, 6], t = 6)"
    ],
    "sample_36": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aabac\")",
        "minimumCost(s = \"aabba\")",
        "minimumCost(s = \"abc\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABACD\")",
        "minLength(s = \"CDABABCD\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums=[1,2,3,4,5,6], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], modulo=3, k=0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5, 6, 7, 8], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [2, 5, 6, 7], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums=[1, 1, 1, 1, 1, 1, 1], modulo=100, k=0)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1]])",
        "colorTheArray(n=1, queries=[[0, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [0, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [0, 2], [1, 2]])",
        "colorTheArray(n=5, queries=[[1, 1], [3, 2]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2], nums2 = [2, 1, 3])",
        "maxNonDecreasingLength(nums1 = [2, 3, 4], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [4, 5, 1], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2], nums2 = [2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [4, 5, 2, 1, 3], nums2 = [2, 3, 1, 4, 5])",
        "maxNonDecreasingLength(nums1 = [3, 4, 2, 1, 5], nums2 = [2, 3, 3, 4, 1])",
        "maxNonDecreasingLength(nums1 = [10, 9, 2, 5, 3, 7, 101, 18], nums2 = [0, 1, 2, 5, 6, 7, 100, 101])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 10, target = 5)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"L__RR__\")",
        "furthestDistanceFromOrigin(moves = \"L__RR__\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_R__\")",
        "furthestDistanceFromOrigin(moves = \"L__R_R\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRR__\")",
        "furthestDistanceFromOrigin(moves = \"R__L_RR_\")",
        "furthestDistanceFromOrigin(moves = \"L_____RR_____\")",
        "furthestDistanceFromOrigin(moves = \"RR__R_L__\")",
        "furthestDistanceFromOrigin(moves = \"L_R_R_L_L_L_R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"RR_RR__R_RR_\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [3, 3, 1, 3, 2, 3])",
        "minimumIndex(nums = [7, 1, 5, 3, 6, 1])",
        "minimumIndex(nums = [3, 3, 2, 1, 2, 2, 2])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 1])",
        "minimumIndex(nums = [0, 1, 0, 1, 0])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6])",
        "minimumIndex(nums = [1, 1, 2, 1])",
        "minimumIndex(nums = [0, 1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3, 4, 5])",
        "minimumIndex(nums = [4, 3, 5, 2, 4, 2, 3])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [0, 1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 4, 1, 5, 3])",
        "semiOrderedPermutation(nums = [4, 1, 5, 3, 2])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 6, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 5, 6, 4, 3])"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 1, k = 1)"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 3, 2, 4])",
        "alternatingSubarray(nums = [2, 1, 4, 3, 6, 5, 8, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 4, 7, 11])",
        "alternatingSubarray(nums = [2, 1, 3, 5, 6, 4, 7, 9])"
    ],
    "sample_310": [
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[1, 0], [0, 1]])",
        "matrixSum(a = [[0], [1]])",
        "matrixSum(a = [[0,1],[2,3]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[0, 1, 2], [3, 4, 5]])",
        "matrixSum(a = [[0,1,1],[1,1,0],[1,0,1]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 2, 3], [0, 1, 2], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 1], [0, 1, 0, 1], [1, 0, 1, 0], [1, 0, 1, 0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[0, 1]])",
        "matrixSum(a = [[0, 1]])",
        "matrixSum(a = [[0, 1]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0], [1]])",
        "matrixSum(a = [[0, 1, 2]])",
        "matrixSum(a = [[0,1,2]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, -1, 4, -2, 3])",
        "alternatingSubarray(nums = [1, 2, -1, 4, -2, 3, -3, 4])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\", \"mango\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\", \"pineapple\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\", \"abcdef\", \"ghixyz\"], x = \"abc\")",
        "findWordsContaining(words = [\"Python\", \"Java\", \"Ruby\", \"Kotlin\"], x = \"a\")",
        "findWordsContaining(words = [\"home\", \"alone\", \"hamlet\"], x = \"a\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4], target=5)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 7, 11, 15], target = 9)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5], target=10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 8)",
        "lengthOfLongestSubsequence(nums=[2, 3, 4], target=10)",
        "lengthOfLongestSubsequence(nums=[100,100,1,1,1,100,3,3,3,200,200], target=200)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abcda\", s2 = \"acdba\")",
        "canBeEqual(s1 = \"1234\", s2 = \"2314\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 2, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 1, 4, 5, 6, 1])",
        "maxSubarrays(nums = [1, 2, 3, 1, 4, 5, 1, 6])",
        "maxSubarrays(nums = [1, 2, 3, 1, 3, 3, 2, 1])",
        "maxSubarrays(nums = [1, 3, 3, 7, 1, 3, 1, 7])",
        "maxSubarrays(nums = [5, 3, 7, 3, 5])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [3, 5, 7], money = 5)",
        "buyChoco(prices = [10, 20, 5], money = 30)",
        "buyChoco(prices = [5, 5, 4], money = 10)",
        "buyChoco(prices = [5, 4, 3], money = 7)",
        "buyChoco(prices = [100, 200, 300], money = 200)",
        "buyChoco(prices = [1, 2, 5], money = 8)",
        "buyChoco(prices = [500, 300, 100], money = 1000)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3], l = 2, r = 4)",
        "countSubMultisets(nums = [1, 2, 3], l = 3, r = 5)",
        "countSubMultisets(nums = [1, 1], l = 1, r = 2)",
        "countSubMultisets(nums = [1, 2, 2], l = 2, r = 3)",
        "countSubMultisets(nums = [1, 2, 3, 4], l = 2, r = 5)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 5)",
        "countSubMultisets(nums = [2], l = 0, r = 2)",
        "countSubMultisets(nums = [1,1,2], l = 2, r = 4)",
        "countSubMultisets(nums = [2, 2, 2], l = 3, r = 4)"
    ],
    "sample_322": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 26)",
        "isFascinating(n = 762)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"dba\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 3, 1, 1, 1, 1])",
        "minimumCoins(prices = [2, 3, 1, 4, 1, 1])",
        "minimumCoins(prices = [2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 25)",
        "accountBalanceAfterPurchase(p = 25)",
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 65)",
        "accountBalanceAfterPurchase(p = 150)",
        "accountBalanceAfterPurchase(p = 170)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2])",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
        "minOperations(nums = [1, 1, 1, 3, 3, 3, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minOperations(nums = [2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 0, 0, 0])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 1, 1])",
        "alternatingSubarray(nums = [1, 2, 2, 1, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 4, 4, 10])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 4, 4, 4, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 3, 2, 1, 1, 1, 1])",
        "alternatingSubarray(nums = [5, 4, 3, 4, 5, 6, 7, 5, 6])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n=3, limit=1)",
        "distributeCandies(n = 1, limit = 3)"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"bca\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"bcd\", x = 2)",
        "minOperations(s1 = \"abab\", s2 = \"cdcd\", x = 1)"
    ],
    "sample_340": [
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 4, y = 3, z = 2)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 2, y = 4, z = 1)",
        "longestString(x = 2, y = 2, z = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 3, 4, 4, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 3, 4, 4, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 4], k = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [2, 1, 2, 1, 2, 1, 2], k = 2)",
        "minOperations(nums = [2, 1, 5, 4, 3, 2, 1], k = 3)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcabca\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"aabacb\")",
        "longestSemiRepetitiveSubstring(s = \"aabacb\")"
    ],
    "sample_361": [
        "isGood(a = [0, 1, 2, 3, 4, 4])",
        "isGood(a = [0, 1, 1, 2, 3])",
        "isGood(a = [0, 1, 2, 1])",
        "isGood(a = [0, 1, 2, 0, 1])",
        "isGood(a = [0, 1, 2, 3, 4, 1])",
        "isGood(a = [1, 2, 3, 2, 3])",
        "isGood(a = [0, 1, 2, 1, 3, 2, 4])",
        "isGood(a = [0, 1, 2, 3, 0, 2])",
        "isGood(a = [2, 3, 3, 1])",
        "isGood(a = [1, 0, 2, 1, 3, 0, 3, 2])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [3, 1, 3, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 1, 1, 2])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 1, 1, 1, 1, 3, 3, 3, 3])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"1\", \"prev\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"bca\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"an\", \"anb\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '10111', k = 2)",
        "shortestBeautifulSubstring(s = '01101', k = 2)",
        "shortestBeautifulSubstring(s = \"01100110\", k = 2)",
        "shortestBeautifulSubstring(s = '10110110', k = 3)",
        "shortestBeautifulSubstring(s = '11101111', k = 2)",
        "shortestBeautifulSubstring(s = \"01101101101\", k = 2)",
        "shortestBeautifulSubstring(s = '101110101', k = 2)",
        "shortestBeautifulSubstring(s = \"01111001101\", k = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [5, 1, 4, 3, 2])",
        "minimumRightShifts(nums = [5, 1, 4, 3, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [1, 0, 0])",
        "minimumRightShifts(nums = [6, 8, 10, 1])",
        "minimumRightShifts(nums = [6, 7, 1, 3, 4, 0, 2])"
    ],
    "sample_294": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"01111\")",
        "minimumSteps(s = \"11110000\")",
        "minimumSteps(s = \"1110101\")",
        "minimumSteps(s = \"001101101\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"abc\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"bananb\", s3 = \"bananc\")",
        "findMinimumOperations(s1 = \"hello\", s2 = \"hello\", s3 = \"helloworld\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ayz\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abd\", str2 = \"abca\")"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [1,2,3,4,5])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 3, 2, 5], target = 6)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [7, 4])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [7])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9, 4, 5, 6, 7, 8, 9], moveFrom = [4, 5, 6, 7], moveTo = [8, 9, 10, 11])",
        "relocateMarbles(nums = [1, 2, 3, 5, 6, 7, 8, 9], moveFrom = [3, 7], moveTo = [4, 8])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9, 10], moveFrom = [7, 10], moveTo = [5, 8])",
        "relocateMarbles(nums = [3,4,5,6,7,8,9], moveFrom = [3,4,7], moveTo = [5,6,9])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=6)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=6)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 0, 1, 1, 0, 0])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4, 4, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10"
    ],
    "sample_303": [
        "countSeniors(details = [\"Alice25F\", \"Bob35M\", \"Charlie65M\", \"David45F\"])",
        "countSeniors(details = ['name1,age25', 'name2,age65', 'name3,age35'])",
        "countSeniors(details = [\"Alice,45\", \"Bob,50\", \"Chris,65\"])",
        "countSeniors(details = [\"John,45\", \"Anna,65\", \"Peter,35\", \"Linda,70\"])",
        "countSeniors(details = [\"John_25\", \"Sam_65\", \"Tim_35\"])",
        "countSeniors(details = [\"John_30\", \"Alice_55\", \"Bob_45\", \"Mike_65\"])",
        "countSeniors(details = [\"John_Doe_35\", \"Jane_Doe_55\", \"Bill_Smith_18\"])",
        "countSeniors(details = [\"John1990\", \"Mike2000\", \"Anna1965\", \"Peter1978\"])",
        "countSeniors(details = [\"John1980\", \"Anna1990\", \"Bob2000\", \"Cathy2010\", \"David1965\", \"Eva1975\"])",
        "countSeniors(details = ['John,65,Developer','Tom,55,Architect','Jane,30,Manager','Mike,70,Salesman'])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abaaba\")",
        "longestSemiRepetitiveSubstring(s = \"abacbabc\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abd\")",
        "canBeEqual(s1 = \"xyxz\", s2 = \"xzxy\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"acb\", s3 = \"bac\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"xyx\", s2 = \"abc\", s3 = \"pqr\")",
        "findMinimumOperations(s1 = \"hello\", s2 = \"world\", s3 = \"heaven\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5], target=6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums=[10,9,2,5,3,7,101,18], target=1)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4], target=5)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 1)",
        "lengthOfLongestSubsequence(nums = [3, 2, 5, 7, 8, 9], target = 6)",
        "lengthOfLongestSubsequence(nums = [3, 2, 5, 1, 2, 4, 7], target = 9)",
        "lengthOfLongestSubsequence(nums=[4, 1, 1, 5, 3, 2, 1, 1, 1], target=1)",
        "lengthOfLongestSubsequence(nums=[10, 2, 3, 10, 2, 1, 12, 3, 1, 2, 3], target=15)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [5, 4, 3, 2, 1])",
        "minimumSum(nums = [2, 4, 2])",
        "minimumSum(nums = [2, 4, 7])",
        "minimumSum(nums = [2,4,2])",
        "minimumSum(nums = [2, 4, 6])",
        "minimumSum(nums = [3, 4, 5, 1, 1, 1])",
        "minimumSum(nums = [5, 3, 1, 2])",
        "minimumSum(nums = [2, 4, 8, 3, 1, 5, 7])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"bb\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\", \"ac\", \"ca\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '10110110', k = 3)",
        "shortestBeautifulSubstring(s = '01100110', k = 2)",
        "shortestBeautifulSubstring(s = '1101010', k = 3)",
        "shortestBeautifulSubstring(s = \"01110111\", k = 3)",
        "shortestBeautifulSubstring(s = '011100', k = 3)",
        "shortestBeautifulSubstring(s = \"0001101\", k = 3)",
        "shortestBeautifulSubstring(s = '1101100', k = 3)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 5)",
        "shortestBeautifulSubstring(s = \"10101010101\", k = 4)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"ab\",\"bc\",\"cd\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"bc\",\"cd\",\"de\",\"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"bc\",\"cd\",\"de\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"bc\", \"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"q\",\"u\",\"i\",\"t\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 5, m = 2)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [1, 3, 2, 5, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 3])",
        "alternatingSubarray(nums = [10, 9, 8])",
        "alternatingSubarray(nums=[1, 2, 3, 4, 5])",
        "alternatingSubarray(nums=[1, 2, 3, 1, 2])",
        "alternatingSubarray(nums=[1, 2, 3, 2, 4, 5])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1])",
        "findMaximumLength(nums = [1])",
        "findMaximumLength(nums = [1])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 1])",
        "findMaximumLength(nums = [1, 2, 3, 4])",
        "findMaximumLength(nums = [1, 0, 1, 0, 1])",
        "findMaximumLength(nums = [1, 1, 1, 1])",
        "findMaximumLength(nums = [1,1,1,1,1])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_302": [
        "countSeniors(details = [\"001122334455\", \"011223344556\", \"021223344557\"])",
        "countSeniors(details = [\"John,30,Engineer\", \"Alex,65,Doctor\", \"Emma,25,Teacher\"])",
        "countSeniors(details = [\"Alice,35,1234\", \"Bob,45,5678\", \"Charlie,65,9012\"])",
        "countSeniors(details = [\"12345678901219\", \"23456788901222\", \"34567878901233\"])",
        "countSeniors(details = [\"1998-05-12\", \"2002-12-30\"])",
        "countSeniors(details = [\"John Doe,32\", \"Jane Doe,65\", \"Bob Smith,19\"])",
        "countSeniors(details = [\"John1990\", \"Mike65\", \"Sara22\"])",
        "countSeniors(details = [\"John_22_1000\", \"Alice_55_2000\", \"Bob_70_3000\"])",
        "countSeniors(details = [\"John Doe 01/05/1955\", \"Jane Doe 25/08/1970\", \"Alice 12/04/1990\"])",
        "countSeniors(details = [\"John_22_2500\", \"Sam_35_4500\", \"Peter_65_2400\", \"Anna_29_3500\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abcc\", s2 = \"cdba\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 1])",
        "minimumCoins(prices = [1, 2, 1])",
        "minimumCoins(prices = [1, 2, 1, 1])",
        "minimumCoins(prices=[1, 2, 1])",
        "minimumCoins(prices = [2, 3, 1, 5, 4, 7])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4])",
        "minimumSeconds(A = [0, 1, 2])",
        "minimumSeconds(A = [1, 2, 3])",
        "minimumSeconds(A = [1, 0, 1, 0, 1, 0])",
        "minimumSeconds(A = [0, 0, 1, 1])",
        "minimumSeconds(A = [1, 0, 1, 0])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [0, 1, 2, 4, 6])",
        "minimumSeconds(A = [0, 1, 1, 0, 0, 1, 1, 1])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyx\", \"xxy\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcabc\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ab\", \"aa\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ab\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"bacd\", \"bad\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [0, 1, 2], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 0, 2, 0], nums2 = [0, 0, 3, 1])",
        "minSum(nums1 = [1, 2, 0, 0, 3], nums2 = [4, 5, 6, 0, 0])",
        "minSum(nums1 = [3, 2, 1], nums2 = [4, 1, 3])",
        "minSum(nums1 = [0, 0, 0, 0, 3, 3, 3, 3], nums2 = [0, 0, 0, 0, 2, 2, 2, 2])",
        "minSum(nums1=[3, 5, 8], nums2=[1, 4, 7])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"z\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"xyz\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"jkl\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], m=3, k=4)",
        "maxSum(nums = [2, 1, 5, 7, 1], m = 1, k = 3)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [5, 7])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3, 4], moveTo = [6, 7, 8])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [2, 1, 4, 3])",
        "minimumRightShifts(nums = [3, 5, 1, 2, 4])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [3, 5, 7], money = 5)",
        "buyChoco(prices = [5, 7, 10], money = 12)",
        "buyChoco(prices = [3, 2, 5], money = 5)",
        "buyChoco(prices = [10, 20, 50], money = 30)",
        "buyChoco(prices = [100, 150, 200], money = 350)",
        "buyChoco(prices = [30, 50, 60], money = 80)",
        "buyChoco(prices = [20, 25, 30], money = 55)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [10, 15, 20, 25], target = 35)",
        "lengthOfLongestSubsequence(nums = [3,2,2,4,3], target = 6)",
        "lengthOfLongestSubsequence(nums = [10, 5, 4, 3, 8, 7, 6, 2, 1], target = 15)",
        "lengthOfLongestSubsequence(nums = [3,2,2,3,4,3,2,2,1,2], target = 7)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"abccdeff\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"watermelon\"], x = \"na\")",
        "findWordsContaining(words=[\"cat\", \"dog\", \"bat\", \"ant\"], x = \"at\")",
        "findWordsContaining(words = [\"qwe\", \"asd\", \"asdfg\", \"hjkl\"], x = \"asd\")",
        "findWordsContaining(words = [\"qwerty\", \"asdf\", \"qwertyqwerty\"], x = \"qwerty\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"aab\", s2 = \"abc\")",
        "canBeEqual(s1 = \"xyxz\", s2 = \"xzxy\")",
        "canBeEqual(s1 = \"xyyx\", s2 = \"xyxy\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [5, 3, 2, 1])",
        "minimumSum(nums = [2,3,4,1])",
        "minimumSum(nums = [3,1,2])",
        "minimumSum(nums = [10, 5, 3, 1, 8])",
        "minimumSum(nums = [4,5,1,2,6,7,8,3])",
        "minimumSum(nums = [2, 6, 1, 9, 5, 8, 3, 4])",
        "minimumSum(nums=[5,3,2,6,7])",
        "minimumSum(nums = [3,2,5,1,7,9,4,6])",
        "minimumSum(nums=[6,10,7,12,8,15,4,3,1])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5], target=100)",
        "lengthOfLongestSubsequence(nums = [3, 2, 5, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7, 9], target = 12)"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = \"Hylmp\")",
        "sortVowels(s = \"Hylmp\")",
        "sortVowels(s = 'HylmP')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"pYlmH\")",
        "sortVowels(s = \"Hlyma\")",
        "sortVowels(s = \"Hey look a vowel Y\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "matrixSum(nums = [[[0, 1], [2, 3]]])",
        "matrixSum(nums = [[1, 0, 1], [1, 1, 0], [0, 1, 1]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [2, 1, 3])",
        "maximumTripletValue(nums = [5, 3, 2])",
        "maximumTripletValue(nums = [4, 5, 1])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2])",
        "alternatingSubarray(nums = [1, 2])",
        "alternatingSubarray(nums = [0, 1, 1, 0])",
        "alternatingSubarray(nums = [0, 1, 1, 0])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [0, 1, 0])",
        "alternatingSubarray(nums = [1, 2, 2, 1])",
        "alternatingSubarray(nums = [0, 1, 0, 1, 1, 0])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"hello\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"abcda\", k = 3)",
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"aabbcc\", k = 2)",
        "beautifulSubstrings(s = \"beautifulSubstrings\", k = 5)",
        "beautifulSubstrings(s = \"aiu\", k = 1)"
    ],
    "sample_449": [
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabbaabbaabb\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"000000\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"00000000\")",
        "minimumSteps(s = \"0000000\")",
        "minimumSteps(s
        "minimumSteps(s = \"010111\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"1990-01-01\"])",
        "countSeniors(details = [\"John,25,Developer\", \"Alan,62,Manager\"])",
        "countSeniors(details=[\"Smith,John,32\"])",
        "countSeniors(details = [\"John,25,Engineer\",\"Emma,65,Teacher\",\"Tom,35,Doctor\"])",
        "countSeniors(details = [\"Alice,25,3000\", \"Bob,50,5000\", \"Charlie,40,4000\"])",
        "countSeniors(details = [\"001,John,25\", \"002,Anna,61\", \"003,Mike,30\"])",
        "countSeniors(details = [\"Name:John,Age:20\", \"Name:Lisa,Age:65\", \"Name:Smith,Age:55\"])",
        "countSeniors(details = [\"2000-01-01_John_Doe\", \"1967-04-13_Jane_Doe\"])",
        "countSeniors(details = [\"2000-01-01:John:70\", \"2005-05-05:Bob:65\", \"2010-10-10:Alice:30\"])",
        "countSeniors(details = [\"100120001\", \"101220202\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 1, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,4,4,4,5,5,5,5])",
        "minGroupsForValidAssignment(nums = [3,3,1,1,2,2,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,1,1,1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1,2,1,2,3,1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_415": [
        "countPairs(coordinates = [(1, 1), (2, 2), (3, 3)], k = 2)",
        "countPairs(coordinates = [(1, 1), (2, 2), (1, 2), (2, 1)], k = 2)",
        "countPairs(coordinates = [(1, 1), (2, 2), (1, 2), (2, 1)], k = 2)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 4), (4, 1)], k = 3)",
        "countPairs(coordinates = [(1, 2), (2, 3), (1, 3), (3, 1), (2, 1)], k = 2)",
        "countPairs(coordinates = [(0, 0), (1, 1), (1, 2), (2, 1)], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [1, 2], [2, 3], [3, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7]], k = 3)",
        "countPairs(coordinates = [(3, 1), (1, 2), (2, 3), (2, 0), (1, 2)], k = 3)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 1, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 3)",
        "maxSum(nums = [1, -2, 3, 10, -4, 7, 2, -5], m = 3, k = 3)",
        "maxSum(nums = [0, 0, 0, 0, 0, 0], m = 2, k = 3)",
        "maxSum(nums = [1, 0, 0, 0, 1, 0, 0, 0, 1], m = 2, k = 3)",
        "maxSum(nums=[-2, 0, 4, 2, 3], m=2, k=3)"
    ],
    "sample_452": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abacadaeaf\")",
        "minChanges(s = \"ababa\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 1, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 3, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [2, 3, 1, 4, 5])",
        "minOperations(nums1 = [1, 5, 3], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 5, 4], nums2 = [3, 2, 6])",
        "minOperations(nums1 = [2, 1, 5, 3, 7], nums2 = [2, 5, 3, 1, 7])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '1011', k = 2)",
        "shortestBeautifulSubstring(s = '1101101', k = 2)",
        "shortestBeautifulSubstring(s = \"011100\", k = 2)",
        "shortestBeautifulSubstring(s = \"11001\", k = 2)",
        "shortestBeautifulSubstring(s = '11001111', k = 2)",
        "shortestBeautifulSubstring(s = '11101111', k = 2)",
        "shortestBeautifulSubstring(s = \"101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"110110011\", k = 3)",
        "shortestBeautifulSubstring(s = '0110111111', k = 2)",
        "shortestBeautifulSubstring(s = \"1110011101101011001\", k = 3)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums=[0, 1, 2, 3])",
        "maximumTripletValue(nums=[0, 1, 2])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n=3, limit=1)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 1, limit = 2)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums=[1, 1, 1, 2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [10, 20, 30, 10, 20, 30])",
        "minGroupsForValidAssignment(nums = [4,2,2,5,1,5,5,5])",
        "minGroupsForValidAssignment(nums = [4, 8, 7, 1, 6, 3, 5, 2, 9])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5])",
        "minSum(nums1=[1, 2, 3, 0], nums2=[4, 5, 6])",
        "minSum(nums1 = [0, 0, 1], nums2 = [1, 0, 0])",
        "minSum(nums1 = [0, 2, 0], nums2 = [0, 0, 3])",
        "minSum(nums1 = [1, 3, 5, 7, 9], nums2 = [0, 2, 4, 6, 8])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 1])",
        "minSum(nums1 = [1, 2, 0], nums2 = [6, 0, 1])",
        "minSum(nums1 = [1, 2, 0, 6], nums2 = [4, 5])",
        "minSum(nums1=[3,0,0,1], nums2=[1,1,0,2])"
    ],
    "sample_453": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"abca\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aabbcc\", k = 3)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"aibohphobia\", k = 3)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abcdae\", k = 3)",
        "beautifulSubstrings(s = \"abcdae\", k = 3)",
        "beautifulSubstrings(s = \"abcda\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abcdefg\", k = 3)",
        "beautifulSubstrings(s = \"abcba\", k = 2)",
        "beautifulSubstrings(s = \"aabacc\", k = 2)",
        "beautifulSubstrings(s = \"aabbbccaac\", k = 3)"
    ],
    "sample_369": [
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lHymp\")",
        "sortVowels(s = 'Hymlp')",
        "sortVowels(s = 'Hlymp')",
        "sortVowels(s = 'HlypM')",
        "sortVowels(s = \"lHmYp\")",
        "sortVowels(s = \"Hlymp\")",
        "sortVowels(s = \"Hlyma\")",
        "sortVowels(s = 'pYmHl')"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0, 1, 2])",
        "minimumSeconds(nums = [1, 1, 2, 2, 3, 3])",
        "minimumSeconds(nums = [0, 1, 1])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 2])",
        "minimumSeconds(nums = [0, 0, 1, 1])",
        "minimumSeconds(nums = [0, 1, 1, 2, 3])",
        "minimumSeconds(nums = [2, 3, 5, 2, 3, 5, 1, 2, 3, 5])",
        "minimumSeconds(nums = [0, 2, 1, 1, 3, 1])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [2, 1, 5, 8, 4])",
        "minimumSum(nums = [3, 1, 4, 2])",
        "minimumSum(nums = [5, 3, 2, 4, 1])",
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [1, 2, 5, 4, 3])",
        "minimumSum(nums = [1, 4, 7, 2, 5, 8])",
        "minimumSum(nums = [1, 4, 7, 1])",
        "minimumSum(nums = [1, 5, 7, 2, 4])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 1, 2, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [5, 1, 4, 2, 3], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [3, 1, 3, 3, 2, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 1)",
        "minOperations(nums = [1, 1, 3, 4, 5, 5, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 4, 5, 2, 7, 6, 3], k = 3)",
        "minOperations(nums = [4, 4, 4, 4], k = 2)",
        "minOperations(nums = [2, 3, 8, 7, 10, 4, 1, 14, 12, 11], k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 4)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 1, k = 3)",
        "maxSum(A = [1, 2, 3, 2, 1], m = 2, k = 3)",
        "maxSum(A = [1, 1, 1, 1, 1, 1, 1, 1], m = 1, k = 8)"
    ],
    "sample_293": [
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"0001\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"010010\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"011001\")",
        "minimumSteps(s = \"00001111\")",
        "minimumSteps(s = \"0001011101\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [3, 3, 2, 2, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 3, 0, 5, 6, 0, 2, 7])",
        "maxSubarrays(nums = [2, 3, 1, 5, 4, 7])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [2, 3], money = 5)",
        "buyChoco(prices = [5, 5], money = 10)",
        "buyChoco(prices = [2, 3, 5], money = 10)",
        "buyChoco(prices = [3, 5], money = 8)",
        "buyChoco(prices = [3, 5, 7], money = 5)",
        "buyChoco(prices = [3, 4], money = 5)",
        "buyChoco(prices = [5, 7, 2], money = 12)",
        "buyChoco(prices = [40, 20, 60], money = 60)"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"011010\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 3, 3])",
        "minLengthAfterRemovals(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3, 4, 4, 5, 6, 6])"
    ],
    "sample_420": [
        "minOperations(nums = [5, 1, 4, 3, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [4, 3, 2, 1, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [4, 3, 2, 5, 1], k = 2)",
        "minOperations(nums = [1, 3, 2, 1], k = 2)",
        "minOperations(nums = [2, 7, 5, 9, 1, 8, 4, 3, 5, 2], k = 2)",
        "minOperations(nums = [3, 1, 4, 2, 5, 1, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 4, 5, 12], k = 2)",
        "minOperations(nums = [2, 7, 5, 3, 4, 5, 3, 4, 2], k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 4])",
        "isGood(nums = [1, 2, 3, 4, 4, 5])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 4)",
        "isFascinating(n = 4)",
        "isFascinating(n = 4)",
        "isFascinating(n = 2)",
        "isFascinating(n = 9)",
        "isFascinating(n = 27)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 3, 3])",
        "isGood(nums = [1, 3, 2, 4])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [2, 1, 2])",
        "isGood(nums = [2, 3, 1, 4, 6])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 1, 2, 2, 3, 3])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [0, 0, 0])",
        "minimumSeconds(nums = [0, 1, 3, 4, 6])",
        "minimumSeconds(nums = [0, 2, 1, 3, 2, 5, 1])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 1, 3, 3, 1, 2])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 2, 5])",
        "isGood(nums = [1, 3, 4])",
        "isGood(nums = [1, 3, 4])",
        "isGood(nums = [2, 3, 5, 6])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minOperations(nums1 = [1, 1, 1], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [1, 1, 1], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 1, 2], nums2 = [2, 2, 1])",
        "minOperations(nums1=[1, 3], nums2=[2, 1])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"0110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 3)",
        "shortestBeautifulSubstring(s = '1101101', k = 3)",
        "shortestBeautifulSubstring(s = '10101', k = 3)",
        "shortestBeautifulSubstring(s = \"11101\", k = 3)",
        "shortestBeautifulSubstring(s = \"01101100\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101010\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101010\", k = 3)",
        "shortestBeautifulSubstring(s = '1101010', k = 3)",
        "shortestBeautifulSubstring(s = \"1011\", k = 2)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 3, 1, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [3, 3, 1, 1, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 2, 1])",
        "minGroupsForValidAssignment(nums = [2, 3, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5])",
        "minGroupsForValidAssignment(nums = [2, 3, 2, 4, 2, 5])",
        "minGroupsForValidAssignment(nums = [5, 6, 1, 2, 1, 6, 1])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"11101\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"011111\")",
        "minimumSteps(s = \"001001\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4], target=5)",
        "lengthOfLongestSubsequence(nums=[2, 3, 1, 2, 4, 3], target=5)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3,2,1,2,4,2])",
        "minimumSum(nums = [3, 1, 2, 4])",
        "minimumSum(nums = [4,3,2,1,2])",
        "minimumSum(nums = [3,2,1,2,4,1])",
        "minimumSum(nums = [3, 3, 3, 3])",
        "minimumSum(nums = [2,3,1,4])",
        "minimumSum(nums = [5, 2, 1, 8, 4])",
        "minimumSum(nums = [2, 5, 1, 1, 5])",
        "minimumSum(nums = [2,4,7,5,1,3])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 2)",
        "maxSum(nums = [1, 2, 3, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [2, 2, 2, 2, 2, 2], m = 2, k = 3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1=\"a\", s2=\"b\", s3=\"c\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"abc\", s3 = \"abcd\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 3])",
        "minOperations(nums = [2, 1, 1, 2])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 2, 3, 1, 3])",
        "minOperations(nums = [4, 4, 4, 4, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 1, 2, 1, 2])",
        "minimumCoins(prices = [2, 1, 3, 2])",
        "minimumCoins(prices = [1, 3, 2, 5, 4])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 1, 1, 1])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [2, 3, 4])",
        "minimumSeconds(nums = [0, 1, 0, 1, 0, 1])",
        "minimumSeconds(nums = [1, 0, 1, 1, 0, 0, 1])",
        "minimumSeconds(nums = [0, 1, 1, 3, 3, 5, 5])",
        "minimumSeconds(nums = [4, 1, 4, 2, 1, 1, 3, 3, 1])"
    ],
    "sample_448": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"0101\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 5)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 3, 1], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 3, 1], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 7)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 3)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 4)",
        "lexicographicallySmallestArray(nums = [10, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 1, 8, 3, 9], limit = 10)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts(nums=[1, 2, 1])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [2, 1, 3])",
        "maximumTripletValue(nums = [-1,-2,-3])",
        "maximumTripletValue(nums = [3, 1, -1, 2])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"abcdefgh\", k = 1)",
        "beautifulSubstrings(s = \"abcdefgh\", k = 3)",
        "beautifulSubstrings(s = \"abcdef\", k = 2)",
        "beautifulSubstrings(s = \"abcdae\", k = 1)",
        "beautifulSubstrings(s = \"aaabbb\", k = 1)",
        "beautifulSubstrings(s = \"bcda\", k = 1)",
        "beautifulSubstrings(s = \"bcad\", k = 2)"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 3, 5, 2, 4], target = 6)",
        "countPairs(nums = [2, 3, 1, 4], target = 5)",
        "countPairs(nums = [1, 3, 4, 1, 6, 2], target = 6)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 4)",
        "distributeCandies(n=20, limit=3)",
        "distributeCandies(n = 15, limit = 4)",
        "distributeCandies(n = 7, limit = 5)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 1, 4], nums2 = [2, 2, 3])",
        "minOperations(nums1 = [1, 2], nums2 = [2, 1])",
        "minOperations(nums1 = [1, 2], nums2 = [2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [2, 3, 4, 5, 6])",
        "minOperations(nums1 = [1, 1, 2], nums2 = [2, 2, 1])",
        "minOperations(nums1=[1, 3, 2], nums2=[1, 2, 4])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 3, 3, 3])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 3, 3, 3, 3])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = '1011', k = 2)",
        "shortestBeautifulSubstring(s = '1011', k = 2)",
        "shortestBeautifulSubstring(s = '11011', k = 2)",
        "shortestBeautifulSubstring(s = \"1101100\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101\", k = 2)",
        "shortestBeautifulSubstring(s = '10101', k = 2)",
        "shortestBeautifulSubstring(s = \"11101111101\", k = 3)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 1, 2, 2, 3, 3])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums=[0, 1, 2, 3, 4])",
        "minimumSeconds(nums = [0, 1, 0, 1, 0, 1])",
        "minimumSeconds(nums = [1, 1, 2, 2, 1, 1])",
        "minimumSeconds(nums = [2, 1, 2, 1, 2, 1, 2])",
        "minimumSeconds(nums=[0,1,2,3,4,5,6,7])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1])",
        "minOperations(nums = [3, 3, 3, 2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 3, 1, 1, 1])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 7, 6, 5])",
        "alternatingSubarray(nums = [5, 3, 2, 4, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 7, 6, 8])",
        "alternatingSubarray(nums = [1, 3, 5, 4, 7])",
        "alternatingSubarray(nums = [1, 3, 3, 1, 2, 3, 3])",
        "alternatingSubarray(nums = [5, 3, 2, 9, 8, 4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [0, 0, 0])",
        "minLengthAfterRemovals(nums = [1, 1, 0, 1, 0, 1, 1])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"bab\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"bab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcabc\"])",
        "maximumNumberOfStringPairs(words = [\"aab\", \"aba\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcabc\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"bob\", \"bobby\", \"bobby\", \"bob\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bce\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ade\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"abac\")",
        "longestSemiRepetitiveSubstring(s = \"1231234\")",
        "longestSemiRepetitiveSubstring(s = \"baaabac\")",
        "longestSemiRepetitiveSubstring(s = \"abccd\")",
        "longestSemiRepetitiveSubstring(s = \"qwxqw\")"
    ],
    "sample_399": [
        "maxSum(nums = [1, 0, 1, 0, 1], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 2, 1], m = 3, k = 2)",
        "maxSum(nums = [1, -1, 1, -1, 3], m = 3, k = 2)",
        "maxSum(nums = [2, 3, 4, 2, 3, 1, 2], m = 3, k = 3)",
        "maxSum(nums = [1, -2, 3, -4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [0, 1, 2, 3, 4], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 5, 7, 3, 2], m = 2, k = 4)",
        "maxSum(nums = [1,2,3,2,3,1,2,3,2,3], m = 3, k = 3)",
        "maxSum(nums = [3, 2, 1, 3, 0, 4, 2, 3, 2, 6], m = 4, k = 7)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bird\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bird\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"butterfly\"], x = \"a\")",
        "findWordsContaining(words = [\"baby\", \"dance\"], x = \"a\")",
        "findWordsContaining(words = [\"app\", \"xap\", \"yxap\", \"zxyap\"], x = \"x\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1, 2, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [2,3], moveTo = [3,2])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [2], moveTo = [3])",
        "relocateMarbles(nums = [1,2,2,3], moveFrom = [2,3], moveTo = [1,2])",
        "relocateMarbles(nums = [2, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2,1,2,2,1], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 1], moveTo = [3, 3])",
        "relocateMarbles(nums=[1,1,2,3,3,3,4], moveFrom=[2,3], moveTo=[3,4])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"baaabac\")",
        "longestSemiRepetitiveSubstring(s = \"ababaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"baabac\")",
        "longestSemiRepetitiveSubstring(s = \"baabbaa\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"bab\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"tac\"])",
        "maximumNumberOfStringPairs(words = [\"tacocat\", \"cat\", \"dog\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bac\", \"cba\", \"acb\", \"bca\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"dlrow\", \"olleh\", \"goodbye\", \"world\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [1, 0]])",
        "matrixSum(nums = [[0, 1], [0, 0]])",
        "matrixSum(nums = [[0, 1], [0, 0]])",
        "matrixSum(nums = [[0, 1], [2, 0]])",
        "matrixSum(nums = [[0, 1], [2, 0]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghij\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"abc\", s3 = \"def\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"apple\", s2 = \"aple\", s3 = \"app\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aab\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"aba\", s3 = \"abc\")"
    ],
    "sample_324": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 0)",
        "isFascinating(n = 0)",
        "isFascinating(n = 3)",
        "isFascinating(n = 228)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices=[1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 2, 1])",
        "minimumCoins(prices=[1, 5, 11, 5])",
        "minimumCoins(prices = [1,5,7,10])",
        "minimumCoins(prices = [1, 5, 8, 10, 11])",
        "minimumCoins(prices=[1,2,3,2])",
        "minimumCoins(prices = [1,5,8,7,12])"
    ],
    "sample_380": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 3)",
        "countPairs(nums=[1, 3, 5, 7, 9], target=10)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 6)",
        "countPairs(nums=[1,2,3,4,5], target=7)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,2,2,1,1,1])",
        "minGroupsForValidAssignment(nums = [2, 3, 1])",
        "minGroupsForValidAssignment(nums = [3,3,3,1])",
        "minGroupsForValidAssignment(nums = [30, 30, 30, 20, 20, 20, 10, 10, 10])",
        "minGroupsForValidAssignment(nums = [4, 2, 3])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [5,5,5,2,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [12, 2, 4, 6, 8, 10])",
        "minGroupsForValidAssignment(nums = [11, 5, 6, 8, 10, 4, 11])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 3, 5, 7, 9], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 6)",
        "countPairs(nums = [1, 3, 6, 7, 9], target = 12)"
    ],
    "sample_317": [
        "buyChoco(prices = [2, 3, 4], money = 5)",
        "buyChoco(prices = [5, 3, 7], money = 10)",
        "buyChoco(prices = [2, 3, 5], money = 5)",
        "buyChoco(prices = [4, 3, 2, 1], money = 4)",
        "buyChoco(prices = [3, 5, 7], money = 10)",
        "buyChoco(prices = [3, 4, 5], money = 8)",
        "buyChoco(prices = [5, 6, 2], money = 10)",
        "buyChoco(prices = [10, 20, 5], money = 30)",
        "buyChoco(prices = [5, 3, 2, 4], money = 5)",
        "buyChoco(prices = [5, 6, 2, 4, 3], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"olleh\", \"dlrow\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"c\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"a\", \"c\", \"b\"])"
    ],
    "sample_370": [
        "sortVowels(s = 'tEOcedel')",
        "sortVowels(s = \"lEdtocEde\")",
        "sortVowels(s = \"eLeoTcEdE\")",
        "sortVowels(s = \"eLtcOdte\")",
        "sortVowels(s = 'detcElo')",
        "sortVowels(s = \"edcletOE\")",
        "sortVowels(s = \"tEdlOeCtde\")",
        "sortVowels(s = \"let's consider examples\")",
        "sortVowels(s = 'dtcEdloe')",
        "sortVowels(s = \"deooteeLc\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 2])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 3, 5, 7])",
        "minimumCoins(prices = [1, 2, 5, 7])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 6, m = 4)",
        "differenceOfSums(n = 6, m = 5)"
    ],
    "sample_307": [
        "countSeniors(details = [\"John_70\", \"Paul_65\", \"George_22\", \"Ringo_68\"])",
        "countSeniors(details = [\"Alice_1975\", \"Bob_1985\", \"Charlie_1967\"])",
        "countSeniors(details = [\"John, 1980\", \"Anna, 1970\", \"Peter, 1960\", \"Linda, 1965\"])",
        "countSeniors(details = [\"1987python\", \"1972java\", \"2002csharp\"])",
        "countSeniors(details = [\"John1990\", \"Anna2005\", \"Mike1968\", \"Sophia2000\"])",
        "countSeniors(details = [\"John1991\", \"Alice2000\", \"Bob1960\", \"Charlie1998\"])",
        "countSeniors(details = [\"1985-09-15\", \"1967-04-23\", \"2000-11-11\"])",
        "countSeniors(details = [\"Adam,35,65\", \"Bob,40,65\", \"Charlie,18,85\"])",
        "countSeniors(details = [\"John1982\", \"Anna1981\", \"Jack2002\", \"Mike1992\"])",
        "countSeniors(details = [\"101 61 97\", \"105 65 90\", \"103 59 98\", \"106 70 88\"])"
    ],
    "sample_323": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 0)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"0123456789abcdef\")",
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"abcd\")",
        "minimumBeautifulSubstrings(s = \"ba\")",
        "minimumBeautifulSubstrings(s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "minimumBeautifulSubstrings(s = \"110111001011101100\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 8, limit = 4)",
        "distributeCandies(n = 8, limit = 4)",
        "distributeCandies(n = 15, limit = 5)",
        "distributeCandies(n = 15, limit = 3)"
    ],
    "sample_419": [
        "minOperations(nums = [5,4,3,2,1], k = 2)",
        "minOperations(nums = [5,1,4,2,3,3,2,1,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [2, 3, 4, 1, 5], k = 3)",
        "minOperations(nums = [3,1,2,4,3], k = 3)",
        "minOperations(nums = [3,2,3,1,2], k = 2)",
        "minOperations(nums=[7,5,3,2,1], k=3)",
        "minOperations(nums = [2, 5, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5], k = 3)",
        "minOperations(nums = [10, 12, 7, 9, 11], k = 3)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [0, 1, 2])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = ['2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"4\", \"prev\", \"1\", \"prev\", \"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1,1,2,2,3,3,3,4,4,4,4], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1,1,2,2,3,3,3,4,4,4,4,5,5,5,5], k = 3)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"baab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"baabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"bbaab\")",
        "longestSemiRepetitiveSubstring(s = \"1121132\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [2, 1, 2])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '11101', k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = '1100', k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = '1111', k = 2)",
        "shortestBeautifulSubstring(s = '011100', k = 2)",
        "shortestBeautifulSubstring(s = '1100110', k = 2)",
        "shortestBeautifulSubstring(s = '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"01111\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"01234\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"11001\")",
        "minimumBeautifulSubstrings(s = \"aabacb\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1101011\")",
        "minimumBeautifulSubstrings(s = \"aababbab\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmno\")",
        "minimumBeautifulSubstrings(s = \"1101020\")"
    ],
    "sample_341": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 5, y = 7, z = 2)",
        "longestString(x = 5, y = 7, z = 2)",
        "longestString(x = 5, y = 6, z = 3)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 7, y = 5, z = 2)",
        "longestString(x = 7, y = 5, z = 2)",
        "longestString(x = 5, y = 8, z = 1)",
        "longestString(x = 4, y = 5, z = 2)",
        "longestString(x = 3, y = 2, z = 5)"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1], [1, -1]])",
        "findChampion(grid = [[1, -1, 1], [1, 1, -1], [1, -1, 1]])",
        "findChampion(grid = [[1, -1, 0], [0, 0, 1], [1, -1, 1]])",
        "findChampion(grid = [[0, 2, 3], [4, 0, 6], [7, 8, 0]])",
        "findChampion(grid = [[1, -1, 1], [0, 1, -1], [-1, 1, 1]])",
        "findChampion(grid = [[1, -1, 0], [0, 2, 1], [0, -1, 2]])",
        "findChampion(grid = [[0, 2, 3], [0, 1, 0], [0, 0, 1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 3)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"Hello\", k = 2)"
    ],
    "sample_304": [
        "countSeniors(details = [\"name,age\", \"Alice,35\", \"Bob,65\", \"Charlie,19\"])",
        "countSeniors(details = [\"John, 25\", \"Mike, 65\", \"Anna, 35\"])",
        "countSeniors(details = [\"Alice_30\", \"Bob_45\", \"Charlie_67\", \"David_19\"])",
        "countSeniors(details = [\"19901122\", \"19801230\"])",
        "countSeniors(details = [\"John_25_Sophomore\", \"Anna_55_Senior\", \"Mike_70_Senior\"])",
        "countSeniors(details = [\"002/03/1955\", \"001/01/1990\"])",
        "countSeniors(details = [\"000214John\", \"00032Doe\", \"00045Jane\"])",
        "countSeniors(details = [\"2001-12-30\", \"1956-02-14\", \"1978-09-28\"])",
        "countSeniors(details = [\"2000-01-01\", \"1967-11-12\", \"1945-07-23\"])",
        "countSeniors(details = [\"30012000\", \"30022010\", \"20052030\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, -3])",
        "maximumTripletValue(nums = [5, 3, 2])",
        "maximumTripletValue(nums = [5, 4, 3])",
        "maximumTripletValue(nums = [3, 2, -1])",
        "maximumTripletValue(nums = [-10, -5, 0])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"01234\")",
        "minimumBeautifulSubstrings(s = \"11101\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1101101\")",
        "minimumBeautifulSubstrings(s = \"42\")",
        "minimumBeautifulSubstrings(s = \"52013\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 0, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 0, 3, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 2, 0, 3, 1, 0, 4])",
        "maxSubarrays(nums = [1, 1, 0, 1, 0, 1, 0])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3, 4], b = [2, 3, 4, 1])",
        "minOperations(a = [1, 2, 3, 4], b = [2, 1, 4, 3])",
        "minOperations(a = [1, 2, 3, 4], b = [2, 1, 4, 3])",
        "minOperations(a = [1, 1], b = [2, 2])",
        "minOperations(a = [0, 1, 2], b = [2, 1, 0])",
        "minOperations(a = [5, 3, 4, 2, 6, 7, 1], b = [1, 5, 7, 3, 2, 4, 6])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\", \"gh\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\", \"gh\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\", \"de\"])",
        "minimizeConcatenatedLength(words = [\"hel\", \"lo\", \"wo\", \"rld\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"bc\", \"d\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"x\", \"x\", \"x\", \"x\"])"
    ],
    "sample_371": [
        "sortVowels(s = 'Hmly')",
        "sortVowels(s = \"HylmP\")",
        "sortVowels(s = \"Hylmp\")",
        "sortVowels(s = 'Hlymp')",
        "sortVowels(s = \"HlypM\")",
        "sortVowels(s = 'HmlpY')",
        "sortVowels(s = 'HmLyp')",
        "sortVowels(s = 'mHlyp')",
        "sortVowels(s = 'lHpyM')",
        "sortVowels(s = 'HlmepA')"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [0, 1, 2])"
    ],
    "sample_256": [
        "minimumSum(nums = [3, 4, 1, 2])",
        "minimumSum(nums = [1, 5, 2, 1, 4])",
        "minimumSum(nums = [2, 5, 1, 7])",
        "minimumSum(nums = [4, 1, 7])",
        "minimumSum(nums = [2, 4, 6, 8, 10, 12, 14])",
        "minimumSum(nums = [2, 4, 7, 6, 8, 5])",
        "minimumSum(nums = [2, 2, 1, 2, 0, 2])",
        "minimumSum(nums = [1, 4, 1, 8, 1])",
        "minimumSum(nums = [1, 5, 1, 1, 1, 1, 5])",
        "minimumSum(nums = [4, 3, 7, 1, 2, 5, 8, 9])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 2, 0], [3, 4, 5], [6, 7, 8]])",
        "findChampion(grid = [[1, 2, 3], [0, 4, 5], [6, 7, 8]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [0, 1, 1]])",
        "findChampion(grid = [[0, 2, 1], [1, 1, 0], [0, 1, 2]])"
    ],
    "sample_372": [
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = 'tEOlcede')",
        "sortVowels(s = 'lEOtcde')",
        "sortVowels(s = 'lEOtcde')",
        "sortVowels(s = 'LeoTcede')",
        "sortVowels(s = 'lEOtcdea')",
        "sortVowels(s = 'LteoCdee')",
        "sortVowels(s = 'teOcedeL')",
        "sortVowels(s = 'tEOeciLed')"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"01101\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 1, 2, 3])",
        "minOperations(nums = [3, 3, 3, 3, 2, 2, 2, 2, 2])"
    ],
    "sample_367": [
        "sortVowels(s = 'lHmyp')",
        "sortVowels(s = 'lHmyp')",
        "sortVowels(s = 'HlymP')",
        "sortVowels(s = 'Hlymu')",
        "sortVowels(s = 'Hlyma')",
        "sortVowels(s = 'Hlypm')",
        "sortVowels(s = \"Hmly\")",
        "sortVowels(s = 'HyLmp')",
        "sortVowels(s = \"Hymlp\")",
        "sortVowels(s = 'pHyfmL')"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [0, 0]])",
        "findChampion(grid = [[0, 1, 2], [0, 3, 4], [0, 5, 6]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[0,1],[1,0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [0, 0], nums2 = [1, 1])",
        "minSum(nums1 = [1, 2], nums2 = [0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 2, 2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 1, 0])",
        "minSum(nums1 = [2, 3], nums2 = [1, 4])",
        "minSum(nums1 = [2, 2, 2, 2], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [2, 1, 3], nums2 = [5, 0, 4])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 1, 2, 2], k = 2)",
        "minOperations(nums = [1, 1, 2, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [2, 1, 4, 3, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 4)",
        "minOperations(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k = 3)",
        "minOperations(nums = [2, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [3, 2, 3, 1, 2, 2], k = 2)",
        "minOperations(nums = [2, 3, 2, 1, 3, 4, 3, 5, 1, 2], k = 3)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums=[2], moveFrom=[1], moveTo=[1])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 3, k = 4)",
        "maxSum(nums = [0, 1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [0, 1, 0, 0, 0, 1, 1, 1, 0, 0], m = 2, k = 3)",
        "maxSum(nums=[-1, -2, -3, 4, 5, -5], m=1, k=3)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abd\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"azc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"ade\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bz\")",
        "canMakeSubsequence(s1 = \"azb\", s2 = \"aabz\")",
        "canMakeSubsequence(s1 = \"cabz\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"axz\", s2 = \"xza\")",
        "canMakeSubsequence(s1 = \"aaz\", s2 = \"azbz\")",
        "canMakeSubsequence(s1 = \"abcdef\", s2 = \"bcae\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 1], nums2 = [2, 2])",
        "minSum(nums1 = [1, 2], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 0])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 0, 1], nums2 = [1, 1, 0])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"prev\", \"3\"])"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 3, 4])",
        "isGood(nums = [1, 2, 3, 5, 6])",
        "isGood(nums = [0, 2, 3, 1])"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [3,3,3,3,2,2,2,1,1,1])",
        "minOperations(nums = [3,3,3,3,2,2,2,1,1,1])",
        "minOperations(nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3",
        "minOperations(nums = [1, 2, 3, 3, 4, 4, 4])",
        "minOperations(nums = [3,3,3,3,1,1,1])",
        "minOperations(nums = [1,2,3,1,2,3])",
        "minOperations(nums = [1,1,1,2,2,3,3])",
        "minOperations(nums = [1,2,3,3,4,4,4,4])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_451": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abacadaeaf\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"ababa\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n=10, limit=3)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1=[1, 2, 3], nums2=[0, 0, 6])",
        "minSum(nums1 = [1,2,3,0], nums2 = [4,5,6,7])",
        "minSum(nums1 = [1,1,1,1], nums2 = [0,0,0,0,0,0])",
        "minSum(nums1 = [1,0], nums2 = [2,2])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [0, 0, 0, 0, 0])",
        "minSum(nums1 = [1, 4, 2], nums2 = [3, 5, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 1, 2])",
        "minSum(nums1=[0, 0, 1, 2], nums2=[0, 0, 2, 2])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 1, 2, 2, 3, 3])",
        "minimumRightShifts(nums = [1, 1, 2, 2, 3, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 1, 2, 2])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 1, 2, 3, 3])",
        "minimumRightShifts(nums = [3, 3, 3, 3, 6, 6, 6, 6, 8, 8, 8, 8, 9, 9, 9, 9])"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 10)",
        "countPairs(nums=[1, 2, 3, 4, 5], t=6)",
        "countPairs(nums=[1, 2, 3, 4], t=6)",
        "countPairs(nums=[1, 5, 7, 1], t=9)",
        "countPairs(nums=[1, 2, 3, 4], t=7)",
        "countPairs(nums = [1, 7, 3, 2, 4, 9], t = 8)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"2\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"2\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = ['p', '1', 'p', '2', 'p'])",
        "lastVisitedIntegers(words = [\"1\", \"p\", \"2\", \"p\", \"3\", \"p\"])",
        "lastVisitedIntegers(words = ['p', '2', '1', 'p'])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"p\", \"p\", \"3\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"3\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"2\", \"1\", \"p\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"bza\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bce\")",
        "canMakeSubsequence(str1 = \"bz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"zzz\", str2 = \"zaa\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ayb\")",
        "canMakeSubsequence(str1 = \"xbcdef\", str2 = \"bcd\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 0, 1, 0, 1], nums2 = [1, 0, 1, 0, 1])",
        "minSum(nums1 = [0, 1, 2], nums2 = [0, 1, 2])",
        "minSum(nums1 = [2, 7, 9], nums2 = [1, 8, 9])",
        "minSum(nums1 = [0, 0, 0, 0, 0, 0, 1, 2], nums2 = [0, 0, 0, 0, 0, 0, 1, 2])",
        "minSum(nums1 = [0, 0, 1, 0, 0, 2], nums2 = [0, 0, 0, 0, 0, 3])",
        "minSum(nums1 = [1, 2, 0, 5, 6], nums2 = [1, 2, 3, 4])"
    ],
    "sample_416": [
        "countPairs(coordinates = [(0, 0), (1, 1), (1, 2), (2, 1)], k = 1)",
        "countPairs(coordinates = [(0, 0), (1, 1), (2, 2), (3, 3)], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [(0, 0), (1, 1), (2, 2)], k = 1)",
        "countPairs(coordinates = [(1, 1), (2, 2), (3, 3)], k = 2)",
        "countPairs(coordinates = [[0, 1], [1, 0], [1, 2], [2, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [0, 2], [2, 0]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [0, 2], [2, 0], [1, 0], [2, 1], [0, 1], [1, 2], [1, 1]], k = 2)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 4), (4, 1)], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [2, 3], [3, 2], [3, 3]], k = 3)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, -2, 3, -4, 5, -6])",
        "maxStrength(nums = [2, 3, -4, -5, -6])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [4, 2, 3, 5])",
        "maxStrength(nums = [2, 3, -4, -5, 7])",
        "maxStrength(nums = [5, -3, 2, -1, 7])",
        "maxStrength(nums = [5, -2, -4, 3])",
        "maxStrength(nums = [4, 2, -3, 5, -1, 8, 3])",
        "maxStrength(nums = [5, -3, 2, -4, 8, -6, 10])",
        "maxStrength(nums = [5, -3, 2, -4, 1, 3, -2, 1])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 3, 4, 2, 2])",
        "minimumCoins(prices = [1, 3, 4, 2, 2, 1])",
        "minimumCoins(prices = [2, 5, 3, 4])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4, 5])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [5, 7, 2], money = 12)",
        "buyChoco(prices = [0, 1], money = 1)",
        "buyChoco(prices = [1, 3, 5, 8, 9], money = 15)",
        "buyChoco(prices = [1, 3, 2], money = 4)",
        "buyChoco(prices=[10, 15, 20], money=45)",
        "buyChoco(prices = [10, 14, 18, 20, 40], money = 50)",
        "buyChoco(prices = [5, 8, 3, 4, 7], money = 5)",
        "buyChoco(prices = [2, 1, 3, 5, 2], money = 5)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"3\", \"prev\", \"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [1, 2])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [1])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [1, 2])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 9], moveTo = [1, 2])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [3, 5])",
        "relocateMarbles(nums = [4, 5, 6, 8, 9], moveFrom = [4, 8], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 5, 7, 8, 9], moveFrom = [1, 7], moveTo = [2, 3])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"yza\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"axz\", str2 = \"az\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\", \"ant\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\", \"klm\", \"nop\"], x = \"i\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 0]])",
        "matrixSum(nums = [[1, 0], [0, 0]])",
        "matrixSum(nums = [[1, 0], [0, 0]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[0, 0], [0, 1]])",
        "matrixSum(nums = [[1], [2]])",
        "matrixSum(nums = [[0, 0, 1], [0, 0, 0], [1, 1, 1]])",
        "matrixSum(nums = [[0, 0, 1], [0, 0, 0], [1, 1, 1]])",
        "matrixSum(nums = [[1, 0, 3], [4, 2, 0]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [1, 2], money = 4)",
        "buyChoco(a = [3, 5], money = 8)",
        "buyChoco(a = [1, 1, 2], money = 2)",
        "buyChoco(a = [1, 2, 3, 4], money = 3)",
        "buyChoco(a = [1, 1, 5], money = 3)",
        "buyChoco(a = [2, 3, 10], money = 5)",
        "buyChoco(a = [2, 1, 4], money = 4)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2])",
        "minGroupsForValidAssignment(nums = [10, 20, 30, 40])",
        "minGroupsForValidAssignment(nums = [10, 20, 30])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3])",
        "minGroupsForValidAssignment(nums = [2, 4, 6, 8, 10, 12])",
        "minGroupsForValidAssignment(nums = [3, 2, 2, 4, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 1, 2, 1, 2])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [2, 1, 4, 3, 5])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 7])",
        "minimumRightShifts(nums = [2, 4, 3, 5, 1])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [1, 2, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [4, 2, 5, 8])",
        "maxStrength(nums = [2, 3, 5])",
        "maxStrength(nums = [2, 3, 5, 1])",
        "maxStrength(nums = [5, 4, 3, 2, 1])",
        "maxStrength(nums = [4, 2, 5, 10])",
        "maxStrength(nums = [4, 2, 3, 5, 7, 2, 1, 1, 3, 5, 7])"
    ],
    "sample_464": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 3, limit = 4)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3, 3, 3, 3])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"pineapple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"pear\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"xerox\", \"box\"], x = \"x\")",
        "findWordsContaining(words = [\"bana\", \"naan\"], x = \"an\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 1, -1, -1, -1])",
        "maxSubarrays(nums = [2, 2, 1, 3, 4, 5])",
        "maxSubarrays(nums = [1, 0, 0, 1, 0, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"abcdae\", k = 2)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 2)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"abcda\", k = 3)",
        "beautifulSubstrings(s = \"aeiobeiaou\", k = 3)",
        "beautifulSubstrings(s = \"xyaayx\", k = 3)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [0, 1, 0, 1, 1])",
        "minimumSeconds(nums = [1, 2, 3, 1, 2, 3])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1, 1, 1, 1])",
        "minimumSeconds(nums = [2, 5, 1, 4, 3])",
        "minimumSeconds(nums = [1, 1, 2, 2, 2, 2, 2])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 405)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=9)",
        "lengthOfLongestSubsequence(nums = [3, 3, 3, 3, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [3,3,3,3,3,3,3], target = 3)",
        "lengthOfLongestSubsequence(nums = [5, 1, 1, 3, 3], target = 4)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[1, 2], [3, 0]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1, 2], [3, 4, 5]])"
    ],
    "sample_326": [
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 0, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 0], [0, 1, 1, 1], [1, 1, 1, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 4, 2])",
        "minimumSum(nums = [2, 3, 1, 5, 4])",
        "minimumSum(nums = [2, 7, 1, 8, 2])",
        "minimumSum(nums = [5, 3, 2, 1, 7])",
        "minimumSum(nums = [3, 5, 1, 2])",
        "minimumSum(nums = [4, 2, 9, 1, 7])",
        "minimumSum(nums = [4, 5, 6, 7])",
        "minimumSum(nums = [2, 5, 7])",
        "minimumSum(nums = [1, 3, 7, 2])",
        "minimumSum(nums = [3, 4, 5, 9, 2])"
    ],
    "sample_450": [
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabbbb\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"aabbccdd\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 1)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 2)",
        "minOperations(s1 = \"0101\", s2 = \"1010\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 3)",
        "minOperations(s1 = \"11001\", s2 = \"00110\", x = 3)",
        "minOperations(s1 = \"1111\", s2 = \"1111\", x = 2)",
        "minOperations(s1 = \"11001\", s2 = \"10011\", x = 1)",
        "minOperations(s1 = \"11001\", s2 = \"10100\", x = 2)",
        "minOperations(s1 = \"11100\", s2 = \"10111\", x = 2)"
    ],
    "sample_342": [
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 3, y = 3, z = 0)",
        "longestString(x = 1, y = 2, z = 0)",
        "longestString(x = 2, y = 2, z = 0)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 1, y = 1, z = 4)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9])",
        "maxSubarrays(nums = [1, 2, 3, 0, 4, 5, 6])",
        "maxSubarrays(nums = [2, 1, 3, 10, 4])",
        "maxSubarrays(nums = [1, 2, 3, 0])",
        "maxSubarrays(nums = [19, 18, 1])"
    ],
    "sample_306": [
        "countSeniors(details = [\"Alice,35,Female\", \"Bob,45,Male\", \"Charlie,70,Male\"])",
        "countSeniors(details = [\"Name: John, Age: 65\", \"Name: Jane, Age: 23\"])",
        "countSeniors(details = [\"Alice,35,Female\", \"Bob,62,Male\", \"Carol,22,Female\"])",
        "countSeniors(details = [\"Mike,35,Doctor\", \"John,62,Engineer\", \"Anna,25,Teacher\"])",
        "countSeniors(details = [\"name:John,age:34\", \"name:Anna,age:62\", \"name:Mike,age:23\"])",
        "countSeniors(details = [\"John Smith, 35\", \"Jane Doe, 50\", \"Helen Johnson, 65\", \"Mark White, 42\"])",
        "countSeniors(details = [\"John_25_Engineer\", \"Mike_63_Doctor\", \"Anna_35_Teacher\", \"Peter_72_Artist\"])",
        "countSeniors(details = [\"Smith, John, 35\", \"Brown, Mary, 65\", \"Green, Sara, 19\"])",
        "countSeniors(details = [\"Mr. John Doe 32\", \"Mrs. Jane Doe 54\", \"Mr. Bob Smith 67\", \"Ms. Alice Johnson 29\"])",
        "countSeniors(details = [\"John,25,Developer\",\"Anna,65,Manager\",\"Michael,32,Analyst\",\"Sara,80,Consultant\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1, 1, 1])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3, 4], moveTo = [5, 6, 7, 8])",
        "relocateMarbles(nums = [4, 5, 6, 7], moveFrom = [4, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [1, 2])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [1, 2])",
        "relocateMarbles(nums=[5, 6, 7, 8, 9], moveFrom=[7, 9], moveTo=[6, 8])",
        "relocateMarbles(nums = [4, 5, 6, 7], moveFrom = [4, 7], moveTo = [1, 2])",
        "relocateMarbles(nums = [4, 6, 8, 9], moveFrom = [4, 8], moveTo = [5, 7])",
        "relocateMarbles(nums = [3, 4, 5, 6, 7, 8, 9], moveFrom = [3, 7], moveTo = [5, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 3], moveTo = [1, 2])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"axc\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 1, 1, 1])"
    ]
}