{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 4])",
        "alternatingSubarray(nums = [0, 2, 1, 2])",
        "alternatingSubarray(nums = [2, 3, 3, 2, 2, 2, 1, 1, 1])"
    ],
    "sample_310": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[0, 1], [1, 0]])",
        "matrixSum(a = [[1, 0], [0, 1]])",
        "matrixSum(a = [[1, 0], [0, 1]])",
        "matrixSum(a = [[1, 2], [3, 1]])",
        "matrixSum(a = [[0, 0], [0, 1]])",
        "matrixSum([[1, 2, 3], [4, 5, 6]])",
        "matrixSum([[1], [2], [3]])",
        "matrixSum(a = [[0,1], [0,1]])",
        "matrixSum(a = [[1, 0, 0], [0, 1, 1], [0, 1, 1]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0,1,1], [1,0,1], [1,1,0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1,1,0],[0,1,0],[0,1,1]])",
        "findChampion([[1, 1, 1], [0, 1, 0], [1, 0, 1]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2], [3, 1]])",
        "matrixSum(a = [[1], [0]])",
        "matrixSum(a = [[2, 1], [1, 2]])",
        "matrixSum(a = [[1,2,3],[4,5,6]])",
        "matrixSum(a = [[1,2],[3,4]])",
        "matrixSum(a = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(a = [[1, 2], [1, 2]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum(a = [[2, 2, 1], [2, 1, 2]])",
        "matrixSum(a = [[1, 1, 1], [0, 0, 1], [1, 0, 1]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 7, 8, 9])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9, 11, 13])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [2, 3, 5, 7, 11, 13, 17])",
        "alternatingSubarray([1, 2, 3, 4, 5, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 4, 5, 7, 7])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10, 20, 22, 24, 26])",
        "alternatingSubarray(nums = [2, 3, 5, 10, 7, 6, 4, 8, 9])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"banana\"], x = \"ban\")",
        "findWordsContaining(words = [\"apple\", \"mango\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"mango\", \"grape\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"cde\", \"xyz\"], x = \"c\")",
        "findWordsContaining(words=[\"dog\", \"light\", \"cat\", \"tree\"], x=\"t\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"a\", s2 = \"b\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bab\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"cbaed\")",
        "canBeEqual(s1 = \"hello\", s2 = \"world\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4], target=6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 36)",
        "lengthOfLongestSubsequence(nums = [1,1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1,1,1,1,1,1,1,1], target = 12)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bdca\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edcba\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edbac\")",
        "canBeEqual(s1 = \"baab\", s2 = \"abba\")",
        "canBeEqual(s1 = \"acbd\", s2 = \"bdca\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays([1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 1, 2, 1, 2])",
        "maxSubarrays([2, 3, 1, 2, 4, 3])",
        "maxSubarrays([1, 1, 2, 1, 2, 1])",
        "maxSubarrays(nums = [1, 2, 3, 1, 4, 1, 2, 3, 1, 4])",
        "maxSubarrays(nums=[2, 4, 8, 16, 32, 64, 128, 256])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices = [1,2,2], money = 3)",
        "buyChoco(prices = [1,2,2,1], money = 3)",
        "buyChoco(prices = [1, 1, 1, 1, 1, 1, 1], money = 2)",
        "buyChoco(prices=[1,2,3,4,5], money=20)",
        "buyChoco(prices = [10, 2, 3, 20, 15, 5], money = 30)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3], l = 1, r = 6)",
        "countSubMultisets(nums = [1,2,3], l = 4, r = 8)",
        "countSubMultisets(nums = [0,1,2], l = 1, r = 3)",
        "countSubMultisets(nums = [2,3,4,6], l = 2, r = 6)",
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 8)",
        "countSubMultisets(nums = [1,2,3,4,5,6], l = 6, r = 12)",
        "countSubMultisets(nums = [0, 1, 2], l = 1, r = 1)",
        "countSubMultisets(nums = [3, 1, 2], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,2,3,3,3,4,4], l = 2, r = 10)",
        "countSubMultisets(nums = [1,1,1,1,2,2,3,3], l = 3, r = 8)"
    ],
    "sample_322": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"dce\")",
        "canBeEqual(s1 = \"abab\", s2 = \"abba\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins([1, 1, 1, 1])",
        "minimumCoins([1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 2, 1])",
        "minimumCoins(prices=[1, 1, 1, 1])",
        "minimumCoins(prices = [2, 5, 3, 1])",
        "minimumCoins([1, 2, 1, 3])",
        "minimumCoins(prices = [2, 5, 1, 1, 2, 2])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(95)",
        "accountBalanceAfterPurchase(p = 99)",
        "accountBalanceAfterPurchase(p = 190)",
        "accountBalanceAfterPurchase(p=95)"
    ],
    "sample_423": [
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations([1,2,3,4,5])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3])",
        "minOperations([1, 1, 1, 1, 1, 1])",
        "minOperations([1,2,3,4])",
        "minOperations(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 2, 2, 1, 1, 1, 1])",
        "minOperations([4,2,6,2,4,6,4])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1,2,3,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,3,4,5,5,6])",
        "alternatingSubarray(nums = [2,3,4,5,6])",
        "alternatingSubarray(nums = [3,4,5,3,2,6,2,3,4])",
        "alternatingSubarray([1,2,3,4,5,6,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,3,5,7,9,11,13,11,9,7,5,3,1])",
        "alternatingSubarray(nums = [1,3,2,2,5,2,4,1,6,7])",
        "alternatingSubarray(nums = [3,4,5,5,6,7,8,8,9,9])",
        "alternatingSubarray(nums = [1,2,3,4,2,4,5,6,1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 6, limit = 4)"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"bcd\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"def\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"aba\", x = 2)",
        "minOperations(s1 = \"bbb\", s2 = \"aaa\", x = 1)",
        "minOperations(s1 = \"abcde\", s2 = \"bcdea\", x = 2)",
        "minOperations(s1 = \"bcd\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"010\", s2 = \"001\", x = 1)",
        "minOperations(s1 = \"11101\", s2 = \"10111\", x = 2)",
        "minOperations(s1 = \"abcde\", s2 = \"axcye\", x = 2)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 3, z = 2)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 4)",
        "minOperations(nums = [1, 2, 1, 2], k = 2)",
        "minOperations(nums=[5, 1, 6, 2, 3, 4], k=2)",
        "minOperations(nums=[3, 2, 1, 6, 2, 5, 6, 9], k=2)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbcde\")",
        "longestSemiRepetitiveSubstring(s=\"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccdddd\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 2, 3, 3])",
        "isGood(a = [1, 2, 2, 3, 4])",
        "isGood([1, 2, 2, 3, 3])",
        "isGood([1, 2, 3, 2, 1])",
        "isGood(a = [1, 1, 2, 2, 3])",
        "isGood(a = [1, 2, 3, 2, 4])",
        "isGood(a = [3, 2, 2, 1])",
        "isGood([2, 3, 1, 3, 1, 2])",
        "isGood([2,1,3,4,5,2,6])",
        "isGood([1, 2, 1, 4, 3, 5, 5])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 7, m = 2)",
        "differenceOfSums(n = 7, m = 2)",
        "differenceOfSums(n = 15, m = 3)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1,1,2,3,3,4])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [3,3,3,1,1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,4,4,4,4,4,4,4,4,4])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"2\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers([\"prev\",\"3\",\"prev\",\"2\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"3\", \"prev\", \"prev\", \"prev\", \"prev\", \"1\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs([\"aa\", \"bb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bb\",\"ab\",\"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bb\",\"cc\",\"dd\",\"ee\"])",
        "maximumNumberOfStringPairs(words = [\"ac\", \"bb\", \"ca\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"111111\", k = 2)",
        "shortestBeautifulSubstring(s = '1111', k = 2)",
        "shortestBeautifulSubstring(s = '111011', k = 2)",
        "shortestBeautifulSubstring(s = \"1110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"111001111\", k = 2)",
        "shortestBeautifulSubstring(s = \"111111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1100111011\", k = 2)",
        "shortestBeautifulSubstring(s = '0111101110', k = 3)",
        "shortestBeautifulSubstring(s='0111110', k=2)",
        "shortestBeautifulSubstring(s='11011011011011011', k=3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [4,5,6,7,0,1,2])",
        "minimumRightShifts([5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [2, 3, 4, 1])",
        "minimumRightShifts([0, 1, 2, 3, 4, 5, 6, 7])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"00111\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcd\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"table\", s2 = \"tbres\", s3 = \"tbr\")",
        "findMinimumOperations(s1 = \"geek\", s2 = \"gesek\", s3 = \"gee\")",
        "findMinimumOperations(s1 = \"123\", s2 = \"124\", s3 = \"125\")",
        "findMinimumOperations(s1 = \"xax\", s2 = \"bab\", s3 = \"cac\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abce\", s3 = \"abe\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axz\")",
        "canMakeSubsequence(str1 = \"axc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"aaz\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azcde\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"af\")",
        "canMakeSubsequence(str1 = \"z\", str2 = \"y\")",
        "canMakeSubsequence(str1 = \"azcbobobegghakl\", str2 = \"abcdef\")"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [2,1,3,4])",
        "isGood(nums=[1,2,3,4,5])",
        "isGood(nums = [1, 2, 4, 3])",
        "isGood(nums = [3,1,4,2,5])",
        "isGood([2,1,3,4])",
        "isGood(nums = [1, 2, 3, 5, 4])",
        "isGood([2,3,1,4,5])",
        "isGood(nums = [2, 3, 4, 1])",
        "isGood(nums=[3,1,2,4])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 1, 2, 2], target = 3)",
        "countPairs(nums = [1,2,3,4,5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 8)",
        "countPairs(nums=[1,2,3,4,5,6], target=10)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [1,2,3,4], moveTo = [5,6,7,8])",
        "relocateMarbles(nums = [8, 5, 9, 6], moveFrom = [8, 5], moveTo = [9, 6])",
        "relocateMarbles(nums = [5, 6, 6, 8, 8, 9], moveFrom = [6, 8], moveTo = [6, 9])",
        "relocateMarbles(nums=[1,2,3,4,5,6,7,8,9], moveFrom=[1,2], moveTo=[5,6])",
        "relocateMarbles(nums = [8, 5, 6, 9], moveFrom = [8, 5, 6], moveTo = [9, 5, 6])",
        "relocateMarbles(nums = [5, 6, 6, 8, 9], moveFrom = [6, 9], moveTo = [10, 11])",
        "relocateMarbles(nums = [8, 9, 5, 6], moveFrom = [6, 8], moveTo = [5, 9])",
        "relocateMarbles(nums = [4, 5, 6, 6, 8, 8, 9, 9], moveFrom = [6, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5,5,6,8,6,9,9], moveFrom = [5,6], moveTo = [7,8])",
        "relocateMarbles(nums = [5, 6, 8, 9, 6], moveFrom = [6, 5, 6], moveTo = [5, 6, 6])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 5, 3, 2, 4], target = 6)",
        "countPairs(nums=[1, 2, 3, 4], target=6)",
        "countPairs(nums=[1,2,3,4,5,6], target=7)",
        "countPairs(nums=[1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5], target=5)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,5,5])",
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3,3,4])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,1])",
        "minLengthAfterRemovals(nums = [2,3,1,3,2])",
        "minLengthAfterRemovals(nums = [1,1,2,3,3,3,4,4,4,4,4])"
    ],
    "sample_303": [
        "countSeniors(details = [\"78681901234\",\"90010012345\",\"93001001234\"])",
        "countSeniors(details = [\"78681901234\",\"9001015555\",\"56789012345\"])",
        "countSeniors(details = [\"78681901234\",\"9001012345\",\"9307051234\",\"9200101234\"])",
        "countSeniors(details = [\"John Doe 23\", \"Jane Doe 67\", \"Sam Smith 61\"])",
        "countSeniors(details = [\"7868190123\",\"8100145623\",\"9210158123\",\"1815121181\"])",
        "countSeniors(details=[\"5678 90\", \"1234 56\", \"9876 54\"])",
        "countSeniors(details = [\"John Doe 50\", \"Jane Doe 62\", \"Jane Smith 55\", \"John Smith 65\"])",
        "countSeniors(details = [\"John 40\", \"Mike 25\", \"Sam 65\", \"Lisa 70\"])",
        "countSeniors([\"John 53\", \"Alice 22\", \"Bob 63\", \"Jane 67\"])",
        "countSeniors(details = [\"John18\", \"Martin65\", \"Alex90\", \"Dan45\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"abbab\")",
        "longestSemiRepetitiveSubstring(s = \"abccb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbc\")",
        "longestSemiRepetitiveSubstring(s = \"abacbb\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"abba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abca\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"0123\", s2 = \"2310\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apple\", s3 = \"orange\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5], target=10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 1)",
        "lengthOfLongestSubsequence(nums = [5, 1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7], target = 0)",
        "lengthOfLongestSubsequence(nums = [5, 1, 2, 3, 4], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 3, 5, 8, 13, 21], target = 5)",
        "lengthOfLongestSubsequence(nums = [5,6,7,1,2,3], target = 5)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [2, 1, 3, 1, 2])",
        "minimumSum(nums = [10, 20, 30, 40, 50])",
        "minimumSum(nums = [2, 3, 1, 4, 6])",
        "minimumSum(nums = [5, 1, 2, 1, 5])",
        "minimumSum(nums = [2, 1, 1, 4, 5, 3])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"ba\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"ba\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"ba\",\"cd\"])",
        "minimizeConcatenatedLength(words=[\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"ca\", \"ab\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 1)",
        "shortestBeautifulSubstring(s = '0110110', k = 2)",
        "shortestBeautifulSubstring(s = '010', k = 1)",
        "shortestBeautifulSubstring(s = \"111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101110\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110110\", k = 2)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abc\",\"def\",\"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"de\", \"f\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"ba\",\"cd\",\"dc\"])",
        "minimizeConcatenatedLength(words=[\"abc\", \"bc\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bc\",\"ac\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bc\",\"ac\"])",
        "minimizeConcatenatedLength(words=[\"apple\", \"pen\"])",
        "minimizeConcatenatedLength(words = [\"ca\",\"bc\",\"da\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bca\", \"cba\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bc\",\"ab\",\"adc\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n = 7, m = 2)",
        "differenceOfSums(n=6, m=2)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,3,4])",
        "alternatingSubarray(nums = [1,2,2,3,4,4,5])",
        "alternatingSubarray(nums = [1,2,2,3,4,4])",
        "alternatingSubarray(nums = [3,2,1,2,3,4])",
        "alternatingSubarray(nums = [3,2,3,2,1])",
        "alternatingSubarray([1,2,3,4,5,4,3,2,1])",
        "alternatingSubarray([1, 2, 3, 4, 5, 2])",
        "alternatingSubarray([1,2,2,3,4,5,5,5,6,7,8,8,8,9,10])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1, 2, 3])",
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength([1,2,3])",
        "findMaximumLength([1,2,3])",
        "findMaximumLength([1,2,3,4])",
        "findMaximumLength(nums=[1,2,3,4,5])",
        "findMaximumLength(nums = [1,3,4,5,6,7,8,9])"
    ],
    "sample_302": [
        "countSeniors(details = [\"123456789012\",\"123456789012\"])",
        "countSeniors(details = [\"9303034444\", \"8707075555\", \"9901015555\", \"9205055555\"])",
        "countSeniors([\"John Doe\", \"20 years old\", \"Jane Doe\", \"61 years old\", \"Sam Smith\", \"59 years old\"])",
        "countSeniors(details = [\"John Smith 35\", \"John Doe 55\", \"Mary Jane 65\"])",
        "countSeniors(details = [\"John Doe 30\",\"Jack Smith 40\",\"Jane Doe 60\",\"John Doe 70\"])",
        "countSeniors(details = [\"John, 23\", \"Jane, 65\", \"Jason, 67\"])",
        "countSeniors([\"Paul 16 123\", \"John 42 999\", \"George 51 856\"])",
        "countSeniors(details = [\"John Doe 21\",\"Mike Smith 60\",\"Ashley Johnson 65\"])",
        "countSeniors(details = [\"John Doe\", \"Jane Smith\", \"1985-12-01\", \"1990-10-20\", \"Samuel Johnson\", \"1970-05-12\"])",
        "countSeniors([\"1980-01-01_M_40\", \"1995-01-01_F_55\", \"1975-01-01_F_65\", \"2000-01-01_M_60\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dbca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"ABCD\", s2 = \"DCBA\")",
        "canBeEqual(s1 = \"1A2B\", s2 = \"2A1B\")",
        "canBeEqual(s1 = \"adc\", s2 = \"cbd\")",
        "canBeEqual(s1 = \"bcac\", s2 = \"abcd\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 1])",
        "minimumCoins(prices = [1, 1, 1])",
        "minimumCoins(prices = [1, 1, 1])",
        "minimumCoins(prices = [1, 1, 1])",
        "minimumCoins(prices = [1, 1, 1])",
        "minimumCoins(prices = [1,1])",
        "minimumCoins([1, 2])",
        "minimumCoins(prices = [1,1,1])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds(A = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1])",
        "minimumSeconds(A = [0,1,2,3,4,5])",
        "minimumSeconds(A = [0,2,4])",
        "minimumSeconds(A = [2,3,1])",
        "minimumSeconds(A=[1,3,2,0])",
        "minimumSeconds(A = [1, 5, 6, 10])",
        "minimumSeconds([0, 2, 6, 8, 10, 12])",
        "minimumSeconds([1, 3, 3, 2, 2, 2, 1, 1])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"lc\", \"cl\", \"gg\"])",
        "maximumNumberOfStringPairs(words = [\"lc\", \"cl\", \"gg\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bb\",\"cc\",\"dd\",\"ee\",\"ff\",\"gg\",\"hh\",\"ii\",\"jj\",\"kk\",\"ll\",\"mm\",\"nn\",\"oo\",\"pp\",\"qq\",\"rr\",\"ss\",\"tt\",\"uu\",\"vv\",\"ww\",\"xx\",\"yy\",\"zz\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs([\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\"])",
        "maximumNumberOfStringPairs([\"ab\", \"cd\", \"ba\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"aa\", \"bb\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs(words=['ab', 'ba', 'aa', 'bb', 'cc', 'dd'])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aba\", \"aaa\", \"bbb\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"tab\", \"dd\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [5, 5, 5], nums2 = [5, 5, 5])",
        "minSum(nums1 = [1,2,3], nums2 = [0,0,4])",
        "minSum(nums1 = [1, 1, 1, 0, 1], nums2 = [2, 2, 2, 2, 2])",
        "minSum(nums1 = [1, 2, 0, 3, 4], nums2 = [5, 6, 7, 8, 9])",
        "minSum(nums1 = [2, 5, 2], nums2 = [3, 2, 3])",
        "minSum(nums1 = [1, 2, 4, 5], nums2 = [4, 2, 1])",
        "minSum(nums1 = [0, 3, 2, 0], nums2 = [1, 3, 2, 1])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"na\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"na\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"na\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"ana\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"orange\"], x=\"na\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\", \"pear\"], x = \"or\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1,2,3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 3)",
        "maxSum(nums = [1,2,3], m = 1, k = 2)",
        "maxSum(nums = [2, 1, 5, 6, 0, 9, 5, 0, 3, 8], m = 4, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 1, k = 3)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [3, 2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 3], moveTo = [3, 2])",
        "relocateMarbles(nums = [1, 2, 2], moveFrom = [2, 1], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 1, 2, 3], moveFrom = [1, 2], moveTo = [3, 2])",
        "relocateMarbles(nums = [1,2,2,3], moveFrom = [2,2], moveTo = [3,1])",
        "relocateMarbles(nums=[1,1,1,2,3], moveFrom=[1,1], moveTo=[2,2])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts([1,2,3,4,5])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts([3, 2, 4, 1])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [10, 20, 30], money = 50)",
        "buyChoco(prices = [10, 20, 30, 40], money = 50)",
        "buyChoco(prices = [10, 10, 10, 10], money = 50)",
        "buyChoco(prices = [2, 5, 1, 4, 3], money = 10)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 2)",
        "lengthOfLongestSubsequence(nums = [3, 2, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [5, 6, 7, 8, 9], target = 12)",
        "lengthOfLongestSubsequence(nums = [1, 3, 7, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 2, 1, 5, 6], target = 9)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdab\")",
        "longestSemiRepetitiveSubstring(s = \"abcbba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"acbcb\")",
        "longestSemiRepetitiveSubstring(s = \"abacada\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\", \"dog\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grapes\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hell\"], x = \"ll\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"mango\", \"orange\"], x=\"a\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"grapes\"], x=\"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\", \"strawberry\", \"pear\"], x = \"a\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"prev\",\"prev\",\"2\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"1\", \"prev\", \"next\", \"2\", \"prev\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"cabb\", s2 = \"abcb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"adcb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbda\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"cbaed\")",
        "canBeEqual(s1 = \"abcx\", s2 = \"adcy\")",
        "canBeEqual(s1 = \"abcda\", s2 = \"bdacc\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1,1,1,1,1,1])",
        "minimumSum(nums = [1,3,4,5,7])",
        "minimumSum(nums = [3, 6, 2, 8, 7])",
        "minimumSum(nums = [1,1,1,3,4])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 8, 10], target = 15)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7], target = 10)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3], target=3)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 6], target = 7)",
        "lengthOfLongestSubsequence(nums = [5, 2, 1], target = 2)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5, 6], target=5)",
        "lengthOfLongestSubsequence(nums = [3, 2, 5, 1, 7], target = 10)"
    ],
    "sample_368": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'Ymphl')",
        "sortVowels('lYmpH')",
        "sortVowels(s = \"mPhYl\")",
        "sortVowels('mYpHl')",
        "sortVowels('PymHl')",
        "sortVowels('yMplH')",
        "sortVowels('pYmPhl')"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,0],[0,1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2], [2, 1]])",
        "matrixSum(nums=[[1,2],[3,4]])",
        "matrixSum(nums = [[0, 1], [0, 0]])",
        "matrixSum(nums = [[2,3],[1,0]])",
        "matrixSum(nums = [[2,5,1],[3,4,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [2, 2, 3]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 0])",
        "maximumTripletValue(nums = [0, 1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [3, 2, 1, 6])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 5])",
        "alternatingSubarray(nums = [4, 3, 2, 1])",
        "alternatingSubarray(nums = [3, 3, 3])",
        "alternatingSubarray(nums = [2, 5, 6])",
        "alternatingSubarray(nums = [5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [5,6,2,3,2,2,5])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 10)",
        "beautifulSubstrings(s = \"aeiou\", k = 10)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aaa\", k = 3)",
        "beautifulSubstrings(s = \"aei\", k = 3)",
        "beautifulSubstrings(s = \"aea\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 10)",
        "beautifulSubstrings(s = \"aeio\", k = 10)",
        "beautifulSubstrings(s = \"azcbobobegghakl\", k = 2)",
        "beautifulSubstrings(s = \"aeioou\", k = 2)"
    ],
    "sample_449": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aa\")",
        "minChanges(\"abababab\")",
        "minChanges(\"banana\")",
        "minChanges(s = \"aba\")",
        "minChanges(s=\"ababab\")",
        "minChanges(s = \"bbbab\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"00000\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details=['7868190130M7522', '5303914400F9211', '9273338290F4010'])",
        "countSeniors(details = [\"123456-7890\", \"123456-6090\", \"123456-5090\"])",
        "countSeniors(details = [\"7868190123456\",\"8409123456789\"])",
        "countSeniors(details = [\"John Doe 25\",\"Jane Doe 62\",\"Jim Doe 70\"])",
        "countSeniors(details = [\"23121987\", \"23121960\"])",
        "countSeniors([\"John Doe 44\", \"Jane Doe 60\", \"Johnny Doe 61\"])",
        "countSeniors(details = [\"55555555556666\", \"66666666667777\"])",
        "countSeniors(details = [\"John Doe 22\", \"Jane Smith 62\", \"Alice Johnson 40\", \"Bob Brown 70\"])",
        "countSeniors(details = [\"John001185\", \"Bob001175\", \"Alice001165\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [2,1,3,1,2,2])",
        "minGroupsForValidAssignment([1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,3,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,3,4,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,3,2,1,1])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 2], [2, 1], [3, 4], [4, 3]], k = 2)",
        "countPairs(coordinates = [[0,0],[0,1],[1,0],[1,1]], k = 1)",
        "countPairs(coordinates = [[0,0],[1,1],[2,2],[3,3],[4,4]], k = 1)",
        "countPairs(coordinates = [(1, 2), (3, 4), (5, 6)], k = 3)",
        "countPairs(coordinates = [[1,1], [2,2], [3,3], [4,4]], k = 2)",
        "countPairs(coordinates = [[1,2],[3,4],[5,6],[7,8],[9,10]], k = 3)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6]], k = 1)",
        "countPairs(coordinates = [(0,0), (0,1), (1,0), (1,1)], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [2, 2], [3, 3], [4, 4]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 2], [1, 1], [2, 2]], k = 2)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 1, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 1, 2, 1, 2], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,4,5], m = 3, k = 2)",
        "maxSum(nums = [1, 1, 1, 7, 2, 3], m = 4, k = 3)"
    ],
    "sample_452": [
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"abcab\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"123456\")",
        "minChanges(s = \"abbc\")",
        "minChanges(s = \"1221\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1=[1, 2, 3, 4, 5], nums2=[1, 2, 3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 1, 1])",
        "minOperations(nums1=[1, 2, 3, 4, 5], nums2=[6, 7, 8, 9, 10])",
        "minOperations(nums1 = [1,10,4,11,5], nums2 = [1,2,3,7,1])",
        "minOperations(nums1 = [3,4,3,2,2,2], nums2 = [1,2,2,1,1,2])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '111111', k = 2)",
        "shortestBeautifulSubstring(s = \"1111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111011\", k = 2)",
        "shortestBeautifulSubstring(s = '010111', k = 2)",
        "shortestBeautifulSubstring(s = '1101110111', k = 3)",
        "shortestBeautifulSubstring(s = '011101101', k = 2)",
        "shortestBeautifulSubstring(s='111011111011', k=2)",
        "shortestBeautifulSubstring(s = '1111110111111', k = 2)",
        "shortestBeautifulSubstring(s = '110011001111111', k = 5)",
        "shortestBeautifulSubstring(s = \"00101110111101\", k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1,2,3,0])",
        "maximumTripletValue(nums = [5,4,3,2,1])",
        "maximumTripletValue(nums = [1,3,5,7,9])",
        "maximumTripletValue(nums = [4, 2, 1, 3, 5])",
        "maximumTripletValue(nums = [5, 9, 2, 6])",
        "maximumTripletValue([1,5,6,7,2,3])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 4)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,1,3,3])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [4, 5, 6], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [5, 6, 7])",
        "minSum(nums1 = [5, 3, 2], nums2 = [2, 2, 3])",
        "minSum(nums1 = [5, 3, 2], nums2 = [1, 4, 7])",
        "minSum(nums1 = [2, 5], nums2 = [3, 4])",
        "minSum(nums1 = [3, 5, 2, 1], nums2 = [0, 4, 5, 3])",
        "minSum(nums1 = [5, 6, 0, 3, 1], nums2 = [1, 2, 0, 5, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])"
    ],
    "sample_453": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"1010\")",
        "minChanges(s = \"0100\")",
        "minChanges(s = \"0101\")",
        "minChanges(s = \"1011\")",
        "minChanges(s = \"110101\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aiueo\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"aaaa\", k = 2)",
        "beautifulSubstrings(s = \"aaa\", k = 1)",
        "beautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\", k = 1)",
        "beautifulSubstrings(s=\"aiueo\", k=1)",
        "beautifulSubstrings(s = \"aieou\", k = 2)",
        "beautifulSubstrings(s = \"bacac\", k = 3)",
        "beautifulSubstrings(s = \"kawe\", k = 3)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiouaeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiou\", k = 3)",
        "beautifulSubstrings(s=\"aeiou\", k=1)",
        "beautifulSubstrings(s=\"aeioub\", k=2)"
    ],
    "sample_369": [
        "sortVowels(s = \"MyPhl\")",
        "sortVowels(s = \"MyPh\")",
        "sortVowels(s = \"PhYmL\")",
        "sortVowels(s = \"PhymL\")",
        "sortVowels(s = 'YmphL')",
        "sortVowels(s = \"HympL\")",
        "sortVowels(s='YmpHl')",
        "sortVowels(s = 'MpHy')",
        "sortVowels(s = 'PhyML')",
        "sortVowels(s = \"aPhYml\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0, 2, 3])",
        "minimumSeconds([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds([4, 2, 1, 3])",
        "minimumSeconds([0, 2, 3])",
        "minimumSeconds([1, 2, 2, 1])",
        "minimumSeconds(nums = [2,2,3,3])",
        "minimumSeconds(nums=[1, 2, 3, 3, 2, 1])",
        "minimumSeconds(nums=[1, 3, 5, 7, 9, 11])",
        "minimumSeconds(nums = [2,2,3,1,1,1,1])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 6])",
        "minimumSum(nums = [3, 7, 2, 5, 1])",
        "minimumSum(nums = [1, 2, 4, 10])",
        "minimumSum(nums = [3,2,1,5,6,4])",
        "minimumSum(nums = [1, 4, 2, 5, 6])",
        "minimumSum(nums = [1, 3, 7, 2, 4])",
        "minimumSum(nums = [9, 2, 7, 3, 6])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "minOperations(nums = [1,2,3,4,5,6,7,8], k = 3)",
        "minOperations(nums = [2,4,1,3,5], k = 3)",
        "minOperations(nums = [5,2,1,0,5,1,2,5], k = 3)",
        "minOperations(nums = [2,4,8,6,4,1], k = 3)",
        "minOperations(nums = [2, 3, 1, 5, 1, 5, 2, 3, 2, 3, 2, 5, 5, 1, 2, 3, 4], k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(A = [2, 1, 5, 1, 3, 2], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 3)",
        "maxSum(A = [1, 2, 3], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6], m = 4, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6], m = 1, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 3)",
        "maxSum(A = [1, 1, 1, 7, 7, 7, 7, 2, 2, 2], m = 2, k = 3)",
        "maxSum(A = [5, 10, 15, 20, 25], m = 2, k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"0101\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays([1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [2, 1, 0, 3, 2])",
        "maxSubarrays([8, 1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [0b10, 0b11, 0b10])",
        "maxSubarrays(nums = [2,2,3,3,3])",
        "maxSubarrays(nums = [0x1, 0x1, 0x1, 0x1])",
        "maxSubarrays(nums=[2, 3, 4, 1, 2])",
        "maxSubarrays(nums = [4, 3, 2, 1, 7, 3, 1])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices = [2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [2, 3, 1], money = 7)",
        "buyChoco(prices = [10, 20], money = 50)",
        "buyChoco(prices = [1, 1, 1], money = 2)",
        "buyChoco(prices = [10, 5, 20], money = 30)"
    ],
    "sample_290": [
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(\"00000\")",
        "minimumSteps(s = \"001010\")",
        "minimumSteps(s = \"001001\")",
        "minimumSteps(s = \"01100\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,3,3,3,4])",
        "minLengthAfterRemovals(nums = [2,2,1,3,3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,2,3,4,5,6,7,7,7,8,8])"
    ],
    "sample_420": [
        "minOperations(nums = [4,2,3,5,1], k = 4)",
        "minOperations(nums=[1, 2, 3, 4, 5], k=2)",
        "minOperations(nums=[1, 2, 3, 4, 5], k=4)",
        "minOperations(nums = [2, 4, 6, 8, 10], k = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [2, 4, 1, 3, 2], k = 3)",
        "minOperations(nums = [4, 4, 4, 4, 4], k = 5)",
        "minOperations(nums = [2, 3, 1, 5, 2, 3, 1, 5, 2, 3, 1, 5, 2, 3, 1, 5, 2, 3, 1, 5], k = 5)",
        "minOperations(nums=[1, 2, 2, 4, 5, 7], k=2)",
        "minOperations(nums=[5, 1, 6, 8, 9, 2], k=5)"
    ],
    "sample_363": [
        "isGood(nums = [1, 3, 2, 4, 5, 2])",
        "isGood(nums = [1, 2, 3, 4, 2, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [2, 3, 1, 3, 2])",
        "isGood(nums = [1, 3, 2, 4, 2, 3])",
        "isGood(nums = [1,3,5,2,4])",
        "isGood([3, 1, 3, 2])",
        "isGood(nums = [2, 1, 3, 3, 2, 1])",
        "isGood([2,1,3,4,5])",
        "isGood(nums = [1, 3, 2, 2, 4, 5])"
    ],
    "sample_325": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 2, 3])",
        "isGood(nums = [1, 2, 2, 3])",
        "isGood(nums = [1,2,2,3])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,2,2])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood(nums=[1,1,2,3])",
        "isGood(nums=[1, 2, 3, 3, 5])",
        "isGood([5,2,6,3,4,1])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0, 1])",
        "minimumSeconds(nums = [4,2,1,3])",
        "minimumSeconds([0,1,2])",
        "minimumSeconds([0,1,2,3,4,5,6,7,8,9])",
        "minimumSeconds([1, 0])",
        "minimumSeconds(nums = [2, 1, 4, 3, 6])",
        "minimumSeconds(nums = [3, 4, 5, 2, 1])",
        "minimumSeconds(nums = [2,3,4,7,10,11])",
        "minimumSeconds(nums = [1,3,1,4,5,2,7])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [5, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [2,1,3,4,5])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood([1, 2, 3, 5, 4])",
        "isGood(nums = [2, 3, 1])",
        "isGood(nums = [1,2,3,4,6,5])",
        "isGood(nums = [2, 1, 4, 3, 5])",
        "isGood(nums = [4, 2, 3, 1])",
        "isGood(nums = [3, 1, 2, 4, 5])",
        "isGood(nums = [1, 3, 4, 2])",
        "isGood(nums = [3, 1, 2, 4, 0, 5])"
    ],
    "sample_280": [
        "minOperations(nums1=[1,2,3,4,5], nums2=[1,2,3,4,5])",
        "minOperations(nums1 = [2,1,2,1], nums2 = [1,2,1,2])",
        "minOperations(nums1 = [2, 4, 6], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [2,1,2,1,2,1], nums2 = [2,1,2,1,2,1])",
        "minOperations(nums1 = [1,2,5,9], nums2 = [1,2,3,4])",
        "minOperations(nums1=[5,3,1,4,2], nums2=[4,3,1,5,2])",
        "minOperations(nums1 = [2,1,2,1,1], nums2 = [3,1,3,1,1])",
        "minOperations(nums1 = [5,3,4,2], nums2 = [4,3,5,2])",
        "minOperations(nums1=[2,1,1,1], nums2=[4,1,4,4])",
        "minOperations(nums1=[1,1,2,1,2,1], nums2=[1,2,2,2,1,2])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = '11', k = 2)",
        "shortestBeautifulSubstring(s = '11', k = 2)",
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = '1111', k = 4)",
        "shortestBeautifulSubstring(s = \"112\", k = 3)",
        "shortestBeautifulSubstring(s = '1123456789', k = 10)",
        "shortestBeautifulSubstring(s = \"12345678\", k = 10)",
        "shortestBeautifulSubstring(s = \"123456789012\", k = 2)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment([1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1, 3, 2, 5, 2, 2, 1, 6])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 1, 1, 1, 2, 2])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,1,2,1,2,1,1])",
        "minGroupsForValidAssignment(nums = [1, 3, 2, 5, 2, 2, 5, 5, 5, 5])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,2,2,2,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,3,3,3,4,4,5,5,5,5])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,2,1,1,2,3,2])"
    ],
    "sample_289": [
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s
        "minimumSteps(s = \"11111111\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s
        "minimumSteps(\"0010\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 7)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5], target=10)",
        "lengthOfLongestSubsequence(nums = [5, 1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [5, 1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums=[5, 2, 1, 1, 1], target=6)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [3,1,2,5,4,6])",
        "minimumSum(nums = [1,1,1,1])",
        "minimumSum(nums = [1,1,1])",
        "minimumSum([1,2,3,4])",
        "minimumSum(nums = [1,5,4,10,7,6])",
        "minimumSum(nums = [3,1,1,2])",
        "minimumSum(nums = [2,1,3,5,2,4,6])",
        "minimumSum(nums = [1,5,4,2,3])",
        "minimumSum(nums = [1,5,2,3,4])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 4, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 1, k = 3)",
        "maxSum(nums = [5, 1, 1, 5, 1, 1, 5, 1, 1, 5], m = 3, k = 2)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abcabc\")",
        "findMinimumOperations(s1 = \"abcabc\", s2 = \"abcabc\", s3 = \"abcabc\")",
        "findMinimumOperations(s1 = \"leet\", s2 = \"code\", s3 = \"leetcode\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcde\", s3 = \"abce\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"acd\", s3 = \"acd\")",
        "findMinimumOperations(s1 = \"baba\", s2 = \"abab\", s3 = \"babab\")",
        "findMinimumOperations(s1 = \"xzxz\", s2 = \"xzxz\", s3 = \"xzxz\")",
        "findMinimumOperations(s1 = \"bba\", s2 = \"aba\", s3 = \"bab\")"
    ],
    "sample_427": [
        "minOperations([1, 2, 3, 4, 5, 6])",
        "minOperations([1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [2,2,2,3,3])",
        "minOperations(nums = [1,2,2,2,3,4,4,4])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8])",
        "minOperations(nums = [2, 3, 2, 3, 2, 2])",
        "minOperations(nums = [1,2,2,2,2,2,3,4])",
        "minOperations(nums = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5])",
        "minOperations([2,1,3,2,2,2,2,1,1])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [2, 1, 2, 1])",
        "minimumCoins(prices=[1,2,5])",
        "minimumCoins(prices = [3, 1, 1, 2])",
        "minimumCoins(prices=[1, 2, 4])",
        "minimumCoins(prices = [1, 3, 1, 4])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1, 2, 2, 1])",
        "minimumSeconds(nums = [1, 1, 1, 1])",
        "minimumSeconds(nums = [1,2,2,3,3,3])",
        "minimumSeconds(nums = [1,2,1,3,1])",
        "minimumSeconds(nums = [2,3,3,4])",
        "minimumSeconds(nums = [1, 0, 2, 1, 1, 0])",
        "minimumSeconds([1, 2, 2, 2, 2, 3, 3, 4, 5, 6])"
    ],
    "sample_448": [
        "minChanges(s = \"ab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"1010\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"baabba\")",
        "minChanges(s = \"ybyb\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 1, 5, 3, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [4, 1, 5, 8, 3, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 5, 8, 3, 9], limit = 2)",
        "lexicographicallySmallestArray(nums=[1, 3, 5, 8, 9], limit=2)",
        "lexicographicallySmallestArray(nums=[8, 1, 5, 3, 9], limit=2)",
        "lexicographicallySmallestArray(nums=[8, 1, 9, 3, 5], limit=3)",
        "lexicographicallySmallestArray(nums = [1, 3, 8, 5, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [5, 8, 9, 1, 3], limit = 1)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1,2,3])",
        "sumCounts([1,2,3])",
        "sumCounts(nums = [1,2,1,3])",
        "sumCounts(nums = [1,2,1,2,3])",
        "sumCounts(nums=[1,2,1,3,2])",
        "sumCounts([1, 1, 2, 2])",
        "sumCounts(nums = [1, 2, 3, 2, 1, 2, 1])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue([1,2,3,4,5,6])",
        "maximumTripletValue(nums = [0, 0, 0, 0])",
        "maximumTripletValue(nums = [2, -1, -2, 4])",
        "maximumTripletValue(nums = [2, 3, -1])",
        "maximumTripletValue(nums = [4, 5, 6])",
        "maximumTripletValue(nums = [2, 4, 1, 3])",
        "maximumTripletValue([1, 2, 3, 0, 4, 5, 6])",
        "maximumTripletValue(nums = [4, 5, 1, 2, 6, 3])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"ab\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiou\", k = 3)",
        "beautifulSubstrings(s = \"aa\", k = 2)",
        "beautifulSubstrings(s = \"bcbcc\", k = 2)",
        "beautifulSubstrings(s = \"s\", k = 5)"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1,2,3,4,5,6], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n=5, limit=2)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [1,2,4,3], nums2 = [1,3,2,3])",
        "minOperations(nums1 = [1,1,1,1,1,1], nums2 = [1,1,1,1,1,1])",
        "minOperations(nums1 = [2,3,4,5,6], nums2 = [1,2,3,4,7])",
        "minOperations(nums1 = [3,4,5], nums2 = [2,3,4])",
        "minOperations(nums1 = [5, 3, 2, 4], nums2 = [2, 2, 2, 2])"
    ],
    "sample_426": [
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations([1, 2, 3, 4, 5, 6])",
        "minOperations([1, 2, 3, 4, 5])",
        "minOperations(nums = [1,2,3])",
        "minOperations(nums = [1,1,1,1,1,1])",
        "minOperations([1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums=[1,2,2,3,3,3,4,4,4,4])",
        "minOperations([1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3])",
        "minOperations([1,2,2,2,2,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9])",
        "minOperations(nums = [1,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = '11011011', k = 2)",
        "shortestBeautifulSubstring(s = '11111', k = 2)",
        "shortestBeautifulSubstring(s = '111100', k = 2)",
        "shortestBeautifulSubstring(s = '101101', k = 2)",
        "shortestBeautifulSubstring(s = '11001101', k = 2)",
        "shortestBeautifulSubstring(s = '0110111110', k = 2)",
        "shortestBeautifulSubstring(s = '001011101', k = 2)",
        "shortestBeautifulSubstring(s = '111001110111', k = 2)",
        "shortestBeautifulSubstring(s = \"1011010101\", k = 2)",
        "shortestBeautifulSubstring(s='111101110101001', k=3)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0,1,2,3,4,5])",
        "minimumSeconds(nums = [0, 1, 2, 3])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8])",
        "minimumSeconds(nums = [0, 3, 2, 1])",
        "minimumSeconds([1,2,3])",
        "minimumSeconds(nums = [1,3,5,7])",
        "minimumSeconds(nums=[0, 2])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1,2,2,2,2])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,2,2,2,3,3,4])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums=[1, 2, 3, 4, 5, 6])",
        "minOperations([1, 1, 1, 1, 1, 1, 2, 2, 2])",
        "minOperations(nums=[1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 7, 8, 10])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 7, 8, 9, 10, 11])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 5, 6, 7, 7, 8])",
        "alternatingSubarray(nums = [1,2,3,5,7,8,9,11,13])",
        "alternatingSubarray(nums = [2, 5, 1, 3, 6, 4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals([1, 2, 3, 3, 2, 1])",
        "minLengthAfterRemovals([1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 3])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs([\"ab\",\"ba\",\"cd\",\"dc\",\"ef\",\"fe\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ba\", \"aba\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dc\", \"ee\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abc\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"aa\",\"bb\",\"cc\",\"dd\",\"ee\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bab\", \"bcd\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ade\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adf\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"adf\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adx\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabbc\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 1)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 5)",
        "maxSum(nums = [1,2,3,4], m = 1, k = 2)",
        "maxSum(nums = [1,1,1,1,1], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,2,1], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,3,4,5,6], m = 3, k = 3)",
        "maxSum(nums = [2,1,4,1,2], m = 2, k = 3)",
        "maxSum(nums=[2,1,1,2], m=2, k=2)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"apricot\", \"banana\"], x = \"ap\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"peach\", \"mango\"], x = \"ap\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hi\", \"python\"], x = \"o\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,2,3], moveFrom = [2,3], moveTo = [1,2])",
        "relocateMarbles(nums = [1,1,2], moveFrom = [1,1], moveTo = [2,2])",
        "relocateMarbles(nums = [2,2,1], moveFrom = [2,1], moveTo = [1,2])",
        "relocateMarbles(nums = [1,1,1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums=[1,2,2,3], moveFrom=[1,2], moveTo=[2,1])",
        "relocateMarbles(nums = [2,2,3], moveFrom = [2,3], moveTo = [3,2])",
        "relocateMarbles(nums = [1,2,2,3], moveFrom = [1,2], moveTo = [2,2])",
        "relocateMarbles(nums=[1,2,2,3], moveFrom=[2,3], moveTo=[2,3])",
        "relocateMarbles(nums=[2,1,1], moveFrom=[1,2], moveTo=[2,1])",
        "relocateMarbles(nums=[1,2,1,2],moveFrom=[1,1],moveTo=[2,2])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue([1, 2, 3, 4])",
        "maximumTripletValue(nums = [2, 1, 3])",
        "maximumTripletValue([1, 1, 2])",
        "maximumTripletValue(nums = [4, -3, 1, 0])",
        "maximumTripletValue(nums = [4, -2, 3, 5, 1])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abcaa\")",
        "longestSemiRepetitiveSubstring(s = \"babba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbcccc\")",
        "longestSemiRepetitiveSubstring(s = \"bcb\")",
        "longestSemiRepetitiveSubstring(s = \"baaabba\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs([\"aa\", \"bb\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bb\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"def\"])",
        "maximumNumberOfStringPairs([\"ab\",\"cd\",\"ef\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"mnop\", \"edcba\"])",
        "maximumNumberOfStringPairs(words = [\"bb\", \"bb\", \"ab\", \"ba\", \"aa\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[2, 1], [1, 2]])",
        "matrixSum(nums = [[1, 2], [3, 0]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum(nums = [[0, 1, 2], [3, 4, 5]])",
        "matrixSum(nums = [[5,2],[3,1]])",
        "matrixSum([[1,2,3],[2,3,4],[3,4,5]])",
        "matrixSum(nums=[[3, 2, 1], [3, 2, 1], [3, 2, 1]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apple\", s3 = \"mango\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"ghijkl\", s3 = \"mnopqr\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aab\", s3 = \"aab\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"aabd\", s2 = \"abcd\", s3 = \"aacd\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apple\", s3 = \"cat\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"aa\", s3 = \"bb\")"
    ],
    "sample_324": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1,2])",
        "minimumCoins(prices = [1,2,1])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices=[1,2])",
        "minimumCoins(prices = [2,1,1,0,1])",
        "minimumCoins([1,1,1,1,1,1])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1,1,2,3,3,5,8,9,10])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5,6], target = 10)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9,10], target = 15)",
        "countPairs(nums = [1,2,3,4,5,6,7,8], target = 10)",
        "countPairs(nums=[1, 2, 3, 4, 5, 6], target=7)",
        "countPairs(nums = [1, 1, 2, 2, 3, 4], target = 5)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,3,3,4])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 1, 1, 1, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,2,3,4,4,4,5,5,6,7,7,7,7,7,8,8,8,8,8,9,9,10,10,10,10,10,10])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [2, 5, 6, 7, 8], target = 15)"
    ],
    "sample_317": [
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices = [3, 2, 4], money = 6)",
        "buyChoco(prices = [3,2,3], money = 3)",
        "buyChoco(prices=[3,2,3], money=3)",
        "buyChoco(prices = [3, 2, 1], money = 4)",
        "buyChoco(prices = [3, 2, 4], money = 10)",
        "buyChoco(prices=[2,2,1,9], money=7)",
        "buyChoco(prices=[2, 1, 5], money=3)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"cba\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"ba\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"xyz\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"bc\", \"cb\", \"cd\"])",
        "maximumNumberOfStringPairs([\"mm\", \"oo\", \"oo\"])"
    ],
    "sample_370": [
        "sortVowels('HelloWorld')",
        "sortVowels(s = 'Letced')",
        "sortVowels(s = 'Letcede')",
        "sortVowels(s = 'Letcede')",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"HelloWorld\")",
        "sortVowels(s = 'LetCode')",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(\"Let's code\")",
        "sortVowels(s = \"LetcOded\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts([1,2,3])",
        "sumCounts([1,2,3])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts([1, 1, 2, 2])",
        "sumCounts(nums = [1, 1, 2, 1, 3])",
        "sumCounts(nums = [1,2,1,3,3])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins([1, 2, 3, 4])",
        "minimumCoins(prices = [1, 3, 2])",
        "minimumCoins(prices = [1, 1, 1, 4])",
        "minimumCoins(prices=[2,1,2,1,2])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 3)"
    ],
    "sample_307": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868\",\"8479\"])",
        "countSeniors(details = [\"7868\",\"8479\"])",
        "countSeniors(details=[\"78681901234\", \"90010012345\", \"90010012346\"])",
        "countSeniors(details = [\"7868190123\", \"9019025555\", \"5058601378\"])",
        "countSeniors(details = [\"7868190123\", \"7868199123\", \"7868190567\"])",
        "countSeniors(details = [\"7868190123456\",\"9001000123456\",\"8934235098765\"])",
        "countSeniors([\"John Doe 27\", \"Jane Doe 35\", \"Jack Doe 62\", \"Jill Doe 48\"])",
        "countSeniors(details = [\"7868190123\", \"9001008890\", \"9373948290\", \"8469875432\"])",
        "countSeniors([\"85y4Ta60\", \"65Lk7x58\"])"
    ],
    "sample_323": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(789)",
        "isFascinating(39)",
        "isFascinating(123)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"01010101\")",
        "minimumBeautifulSubstrings(\"0101\")",
        "minimumBeautifulSubstrings(s = \"01001\")",
        "minimumBeautifulSubstrings(s = \"1011001\")",
        "minimumBeautifulSubstrings(s = \"010001\")",
        "minimumBeautifulSubstrings(s = \"11011101110111011101110\")",
        "minimumBeautifulSubstrings(s = \"0110111100\")",
        "minimumBeautifulSubstrings(\"10010001100100001010101110\")",
        "minimumBeautifulSubstrings(s = \"1011111011101010001011001101011010100111101110110010110101110000101011101101101010010101110110100101110110000001100101101000101010010011010101110001110010110110111001000101000011010011011100011001101100010011011001001000101000010100110011100101010101000110001111101000110110100001011110111010011010001110101100001010111010110110111111100011010011101000100011000111100001011011110101011111000010001111001000010000101010011011000111000101101011010110110100010001100111001100101001001101011010110001100000001"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n=8, limit=4)",
        "distributeCandies(n = 11, limit = 3)"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [3,2,4,1,2], k = 5)",
        "minOperations(nums = [3,1,3,4,3], k = 6)",
        "minOperations(nums = [5,2,3,1,1], k = 5)",
        "minOperations(nums = [2,1,4,3,5], k = 3)",
        "minOperations(nums = [2,3,4,5,6,7,8], k = 4)",
        "minOperations(nums = [3, 1, 2, 3], k = 2)",
        "minOperations(nums = [4,2,3,1], k = 1)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 2, 1, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1,2,2,1,3])",
        "sumCounts(nums = [1,2,3,1,2])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = ['2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', 'prev', '2'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', 'prev', '2', 'prev', '1'])",
        "lastVisitedIntegers(words = ['prev', '3', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', 'prev', '1', '2', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev'])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 1)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 10)",
        "minOperations(nums = [5, 6, 4, 2, 1, 3], k = 2)",
        "minOperations(nums = [2, 3, 4, 1, 2, 3, 4], k = 3)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abbbc\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccdd\")",
        "longestSemiRepetitiveSubstring(s=\"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcab\")",
        "longestSemiRepetitiveSubstring(s=\"aabcdcb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdefghijklmnop\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 3, 2, 1])",
        "sumCounts([1, 2, 1])",
        "sumCounts([1, 2, 2])",
        "sumCounts(nums = [1, 2, 3, 1, 2])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '01101110', k = 2)",
        "shortestBeautifulSubstring(s = \"111111\", k = 2)",
        "shortestBeautifulSubstring(s = '111011', k = 2)",
        "shortestBeautifulSubstring(s = \"1110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011011\", k = 2)",
        "shortestBeautifulSubstring(s = '01111011', k = 2)",
        "shortestBeautifulSubstring(s = '1011111', k = 2)",
        "shortestBeautifulSubstring(s = \"11110111011\", k = 2)",
        "shortestBeautifulSubstring(s = '111110000110', k = 2)",
        "shortestBeautifulSubstring(s = '1011101101111', k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"01101110\")",
        "minimumBeautifulSubstrings(s = \"01101110\")",
        "minimumBeautifulSubstrings(s = \"10110111\")",
        "minimumBeautifulSubstrings(s = \"11110\")",
        "minimumBeautifulSubstrings(\"01101110\")"
    ],
    "sample_341": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(1, 2, 3)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(2, 3, 4)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(3, 2, 1)",
        "longestString(x = 2, y = 4, z = 6)",
        "longestString(x = 1, y = 5, z = 3)"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0,1],[1,0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0,0],[1,0]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"abcd\", k = 4)",
        "beautifulSubstrings(s = \"bba\", k = 2)",
        "beautifulSubstrings(s = \"qwertyuiop\", k = 2)"
    ],
    "sample_304": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"John Smith 25\", \"Alice Johnson 62\"])",
        "countSeniors([\"John Doe, 35\", \"John Smith, 62\", \"Jane Doe, 66\"])",
        "countSeniors(details = [\"John Doe 1984\", \"Jane Smith 2002\", \"Alice Johnson 1960\", \"Bob Brown 1965\"])",
        "countSeniors([\"John Smith 43\",\"Samantha Johnson 67\"])",
        "countSeniors(details = ['John Doe 1993', 'Jane Doe 1963', 'Joe Smith 1967'])",
        "countSeniors(details = [\"John 12 30\", \"Mike 22 20\", \"Alice 18 60\"])",
        "countSeniors(details = [\"786819012010\",\"843971535897\",\"99018477619\",\"52187989461\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [3, 1, 5, 8])",
        "maximumTripletValue(nums = [3, 2, 1, 4, 5])",
        "maximumTripletValue(nums = [4, 2, 3])",
        "maximumTripletValue([7, 1, 5, 3, 6, 4])",
        "maximumTripletValue(nums = [5, 10, 20])",
        "maximumTripletValue(nums = [1, 3, 5, 2, 7])",
        "maximumTripletValue(nums = [1, 5, 1, 5])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(\"101\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(\"1011\")",
        "minimumBeautifulSubstrings(s = \"110101\")",
        "minimumBeautifulSubstrings(s=\"010101\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [2, 1, 0, 1, 2])",
        "maxSubarrays([3, 1, 2, 4, 3])",
        "maxSubarrays([1, 2, 3, 0, 1, 2, 3, 0, 1])",
        "maxSubarrays(nums = [2, 2, 1, 1, 3, 3])",
        "maxSubarrays(nums = [2, 1, 0, 2, 1, 1])",
        "maxSubarrays([2, 4, 6, 0, 8, 10, 12, 14, 16])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 4, 3], b = [1, 6, 5, 3])",
        "minOperations(a = [3,2,4,1], b = [2,4,1,3])",
        "minOperations(a = [4, 2, 3], b = [1, 2, 3])",
        "minOperations(a = [3,2,1], b = [1,2,3])",
        "minOperations(a = [2, 3, 2], b = [1, 2, 3])",
        "minOperations(a = [1,2,5], b = [2,4,5])",
        "minOperations(a = [4,3,2,1], b = [3,4,1,2])",
        "minOperations(a = [5, 2, 1, 4], b = [1, 2, 3, 4])",
        "minOperations(a = [1, 2, 5, 3], b = [3, 1, 4, 2])",
        "minOperations(a = [2, 1, 5, 4], b = [3, 1, 6, 3])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"bc\"])",
        "minimizeConcatenatedLength(words = [\"bc\", \"ca\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ca\"])",
        "minimizeConcatenatedLength([\"ab\",\"cd\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bca\", \"abc\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"HYmpl\")",
        "sortVowels(s = 'Python')",
        "sortVowels(s = 'PhYmL')",
        "sortVowels(s = \"YmpHl\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"HYmpL\")",
        "sortVowels(s = \"mPhYL\")",
        "sortVowels(s = \"MyPhL\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"pYmHl\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts([1, 2, 3])",
        "sumCounts([1, 2, 1])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1,2,2,1,3])",
        "sumCounts(nums = [1,2,1,3,2])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3,1,2,4,5])",
        "minimumSum(nums = [5, 3, 2, 4, 1])",
        "minimumSum(nums = [1,3,2,2,5,2,3,7])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [3,2,1,2,3])",
        "minimumSum(nums = [2, 1, 3, 2, 1])",
        "minimumSum(nums = [2, 5, 3, 1, 4, 3])",
        "minimumSum(nums = [3, 2, 1, 4, 5, 2])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid=[[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [0, 1, 1]])",
        "findChampion(grid = [[0,1,0],[0,0,0],[0,0,0]])"
    ],
    "sample_372": [
        "sortVowels(s = 'Letced')",
        "sortVowels('Letced')",
        "sortVowels('Letced')",
        "sortVowels('HelloWorld')",
        "sortVowels(s = \"Let's code\")",
        "sortVowels('Lettuce')",
        "sortVowels('Lettuce')",
        "sortVowels(s = 'elected')",
        "sortVowels(s = 'eLetced')",
        "sortVowels(s = \"Let's code\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = '101')",
        "minimumSteps(s = \"01011\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"100101\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [2,1,3,4])",
        "minimumRightShifts(nums = [2,1,3,4])",
        "minimumRightShifts(nums = [4,3,2,1])",
        "minimumRightShifts(nums = [2, 3, 1, 4])",
        "minimumRightShifts(nums=[3, 2, 1])",
        "minimumRightShifts(nums = [3,2,1,4])",
        "minimumRightShifts(nums = [2, 1, 3, 4, 4])",
        "minimumRightShifts(nums=[2, 3, 1, 4, 0])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations([1, 1, 1, 2, 2, 3])",
        "minOperations([1, 1, 1, 2, 3])",
        "minOperations(nums = [1,1,1,1,1,2,2,2,2,3,3,3,3])"
    ],
    "sample_367": [
        "sortVowels(s = \"MyPh\")",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s = \"YmpHl\")",
        "sortVowels(s = \"HYmpl\")",
        "sortVowels(s = \"MPhil\")",
        "sortVowels(s = \"YmPhL\")",
        "sortVowels(s = 'mPhlY')",
        "sortVowels(\"PhYlm\")",
        "sortVowels(s = \"HimYlp\")"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 1, 1], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion([[0, 1, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0,0,0], [1,1,1], [0,0,0]])",
        "findChampion(grid = [[0,1,0], [1,0,0], [0,0,0]])",
        "findChampion(grid = [[0, 1, 1], [1, 1, 0], [1, 0, 0]])",
        "findChampion([[0, 1, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0,1,1],[0,1,1],[0,0,1]])",
        "findChampion(grid = [[1,1,1], [0,1,0], [0,0,0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 4, 5])",
        "minSum(nums1 = [1, 2], nums2 = [0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 2, 3])",
        "minSum(nums1 = [1, -2, 3], nums2 = [4, -5, 6])",
        "minSum(nums1 = [5, 2, 0], nums2 = [3, 1, 0])",
        "minSum(nums1 = [0, 3, 2], nums2 = [1, 1, 3])",
        "minSum(nums1 = [2, 5, 7], nums2 = [0, 5, 3])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1,2,3,4], k = 3)",
        "minOperations(nums = [5,19,8,1], k = 3)",
        "minOperations(nums = [5,6,1,2,3,4], k = 3)",
        "minOperations(nums = [2, 2, 2, 1], k = 3)",
        "minOperations(nums=[1,1,1,1], k=1)",
        "minOperations(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], k = 4)",
        "minOperations(nums = [5, 1, 3, 3, 1], k = 3)",
        "minOperations(nums = [2, 1, 3, 2, 2, 1, 5], k = 3)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2,3], moveTo = [2,3,1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [2,3], moveTo = [1,2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2,3], moveTo = [2,1,3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 2, 3], moveFrom = [2, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 2, 3], moveFrom = [2, 1], moveTo = [1, 2])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,2], moveTo = [2,3])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 4)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7], m=1, k=3)",
        "maxSum(nums = [1, 2, 1, 1, 1, 2, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [4,5,6,7], m = 2, k = 3)",
        "maxSum(nums = [1,2,2,2,2,3], m = 3, k = 2)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"az\", s2 = \"ba\")",
        "canMakeSubsequence(s1 = \"azbc\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"adc\")",
        "canMakeSubsequence(s1 = \"azx\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"abcdefghijklmnopqrstuvwxyz\", s2 = \"abcdefghijklmnopqrstuvwxyz\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"bnn\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"bznn\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"bznaa\")",
        "canMakeSubsequence(s1 = \"azc\", s2 = \"abcd\")",
        "canMakeSubsequence(s1=\"az\", s2=\"abzz\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 0])",
        "minSum(nums1 = [0, 1], nums2 = [0, 2])",
        "minSum(nums1 = [1,1,1], nums2 = [0,0,0])",
        "minSum(nums1 = [1, 1, 0], nums2 = [0, 1, 1])",
        "minSum(nums1 = [2, 1], nums2 = [0])",
        "minSum(nums1 = [1, 0, 2], nums2 = [1, 3, 5])",
        "minSum(nums1 = [0, 1, 0, 1], nums2 = [0, 1, 1, 0])",
        "minSum(nums1 = [2,0,2,2], nums2 = [2,2,0,2])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = ['prev', '2', 'prev', 'prev', '1'])",
        "lastVisitedIntegers(words = ['prev', 'prev', '2', '1', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '2', 'prev', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'prev', 'prev', '2', 'prev', '1'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2', 'prev', '3'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', 'prev', '2', 'prev', '1'])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"prev\", \"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', 'prev', '1', 'prev', 'prev', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [2, 1, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [1,2,2,2,2])",
        "minOperations(nums = [1,2,2,2,3,3,3])",
        "minOperations([1,2,2,2,2])",
        "minOperations([1,2,2,3,3,3,4,4,4,4])",
        "minOperations(nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5])",
        "minOperations(nums = [1,2,2,2,2,2,3,3,3])",
        "minOperations(nums = [1,1,1,1,3,3,3,3,5,5,5])",
        "minOperations(nums=[1, 2, 2, 4, 4, 3, 3])"
    ],
    "sample_451": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"111000\")",
        "minChanges(s = \"110010\")",
        "minChanges(s = \"01101\")",
        "minChanges(s = \"110000\")",
        "minChanges(s = \"000111000\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n=5, limit=2)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3,4], nums2 = [5,6,7,8])",
        "minSum(nums1 = [2, 4, 6], nums2 = [1, 3, 5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [6,7,8,9])",
        "minSum(nums1 = [1,1], nums2 = [0,1])",
        "minSum(nums1 = [5,4,3,2,1], nums2 = [5,4,3,2,1])",
        "minSum(nums1 = [4, 3, 2, 1, 0], nums2 = [2, 3, 4, 5, 6])",
        "minSum(nums1 = [0,3,1], nums2 = [0,2,4])",
        "minSum(nums1 = [5,2,1], nums2 = [3,5])",
        "minSum(nums1 = [3,2,1,2,7], nums2 = [4,1,1,1])",
        "minSum(nums1 = [4,5,6,1], nums2 = [0,1,0,0])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [2,1,3,4,5])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])",
        "minimumRightShifts([4,3,2,1])"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1,1,2,2], t = 3)",
        "countPairs(nums = [1,1,2,2], t = 3)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "countPairs(nums=[1, 1, 2, 45, 46, 46], t=47)",
        "countPairs(nums = [3,2,1,5,7,10], t = 8)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"push\", \"push\", \"pop\", \"push\", \"push\"])",
        "lastVisitedIntegers(words = ['push', 'push', 'pop', 'push', 'push'])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"push\", \"pop\", \"push\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = ['push', '1', 'push', '2', 'push', '3', 'pop', 'push', '4', 'pop'])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"push\", \"p\", \"pop\"])",
        "lastVisitedIntegers(words = ['push', '1', 'push', '2', 'pop', 'push', '3', 'push', 'pop', 'push', 'pop', 'pop'])",
        "lastVisitedIntegers(words = [\"push\",\"1\",\"push\",\"2\",\"push\",\"3\",\"pop\",\"push\",\"4\",\"pop\",\"pop\"])",
        "lastVisitedIntegers(words = ['push', '2', 'pop', 'push', '1', 'push', 'push'])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\", \"push\", \"3\", \"push\", \"4\", \"pop\", \"pop\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"aceg\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ade\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aa\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"zbaz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"mqpxzy\", str2 = \"qpzx\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6, 0])",
        "minSum(nums1 = [1,1,1,1,1,1], nums2 = [1,1,1,1,1,1])",
        "minSum(nums1 = [1,1,1,1,0], nums2 = [1,1,1,1,0])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6, 7], nums2 = [1, 2, 3, 4, 5, 6, 7])",
        "minSum(nums1 = [5, 4, 1], nums2 = [3, 2, 0])",
        "minSum(nums1 = [5,1,7,10,0], nums2 = [0,3,0,6,4])",
        "minSum(nums1 = [4, 1, 3, 2, 0, 0], nums2 = [3, 3, 3, 4, 0, 0])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6]], k = 3)",
        "countPairs(coordinates = [(0, 0), (1, 1), (2, 2)], k = 1)",
        "countPairs(coordinates=[[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]], k=2)",
        "countPairs(coordinates=[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], k=2)",
        "countPairs(coordinates = [(0, 0), (1, 1), (0, 1)], k = 1)",
        "countPairs(coordinates = [(2, 2), (1, 1), (3, 3)], k = 2)",
        "countPairs(coordinates = [(1, 2), (2, 3), (4, 5), (5, 6), (7, 8)], k = 3)",
        "countPairs(coordinates = [[1, 2], [3, 4], [1, 3], [2, 4], [1, 1], [2, 2], [3, 3], [4, 4], [4, 1], [3, 2]], k = 1)",
        "countPairs(coordinates = [(1, 2), (2, 3), (1, 2), (3, 4), (2, 3), (3, 4)], k = 2)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs([\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"ad\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bcd\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, -4, -5, 6, 7, 8, 9, 10])",
        "maxStrength([4, -2, -3, 4])",
        "maxStrength(nums = [5, -1, -2, 3, 0, -4, 2])",
        "maxStrength(nums = [4, -2, -1, 2])",
        "maxStrength(nums = [2, 3, 4, -1, -2, -3, -4, 10])",
        "maxStrength(nums = [5, -2, 4, 2, -1, 10])",
        "maxStrength([2, 3, 4, -1, -10, -15])",
        "maxStrength([1, 2, 3, -2, 5, -1, 20])",
        "maxStrength(nums = [2, -5, -10, 2, -2])",
        "maxStrength(nums = [5, -1, -2, 3, 4, -1, 2, -1, -1, -1, 2])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins([1, 2, 3, 4])",
        "minimumCoins(prices = [3, 2, 4, 1])",
        "minimumCoins(prices = [2, 1, 1])",
        "minimumCoins(prices = [2, 2, 1, 1])",
        "minimumCoins(prices = [1, 2, 1, 2])",
        "minimumCoins(prices = [2,1,1,4])",
        "minimumCoins(prices = [1, 3, 2, 2, 5])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums=[1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,2,2,2,2,3,4])",
        "minLengthAfterRemovals(nums = [1,2,3,2,1,2,3,4,4,4,4,5,5,5,5])"
    ],
    "sample_318": [
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [3,2,3], money = 3)",
        "buyChoco(prices = [1,2,2], money = 3)",
        "buyChoco(prices = [1,2,3,4,5,6], money = 10)",
        "buyChoco(prices = [10, 5, 20], money = 100)",
        "buyChoco(prices = [1, 100], money = 99)",
        "buyChoco(prices = [5, 2, 10, 4], money = 10)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"prev\",\"prev\",\"3\",\"prev\",\"2\",\"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [2, 2, 2])",
        "sumCounts([1, 2, 3, 1])",
        "sumCounts([1,2,3,4,5])",
        "sumCounts([1, 1, 1, 1])",
        "sumCounts([1,2,1,3,1,2,1])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [6, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [6, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 6], moveTo = [8, 7])",
        "relocateMarbles(nums = [6, 5, 9, 8], moveFrom = [6, 9], moveTo = [5, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 5], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 3, 4], moveTo = [6, 8, 9])",
        "relocateMarbles(nums=[5, 6, 8, 9], moveFrom=[5, 6, 8], moveTo=[8, 6, 5])",
        "relocateMarbles(nums = [8, 9, 6, 5], moveFrom = [8, 6], moveTo = [5, 9])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [8, 7])",
        "relocateMarbles(nums = [8, 5, 9, 6, 5, 6], moveFrom = [5, 6], moveTo = [5, 6])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ade\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ade\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xz\")",
        "canMakeSubsequence(str1 = \"adg\", str2 = \"acbdz\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\"], x = \"a\")",
        "findWordsContaining(words=[\"banana\", \"apple\", \"mango\"], x=\"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"cherry\"], x = \"ana\")",
        "findWordsContaining(words=[\"apple\", \"orange\", \"cherry\"], x=\"or\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"durian\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\", \"date\", \"eggplant\"], x = \"a\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1], [2]])",
        "matrixSum([[1,2,3],[4,5,6]])",
        "matrixSum(nums = [[1, 2, 3], [2, 3, 4]])",
        "matrixSum(nums = [[1,2],[3,1]])",
        "matrixSum([[1, 0, 1], [0, 1, 0]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 2], money = 3)",
        "buyChoco(a = [1, 2, 2], money = 3)",
        "buyChoco(a = [1, 2, 2], money = 3)",
        "buyChoco(a = [1, 2, 2], money = 3)",
        "buyChoco(a = [1,2,2], money = 3)",
        "buyChoco(a = [2, 5], money = 10)",
        "buyChoco(a = [3, 2, 3], money = 7)",
        "buyChoco(a = [2, 3, 1], money = 6)",
        "buyChoco(a = [10, 1, 2, 5], money = 10)",
        "buyChoco(a = [2,3,3], money = 5)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,4])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,1,1,1,1,2,2,2])",
        "minGroupsForValidAssignment([3, 3, 3, 1, 1, 1])",
        "minGroupsForValidAssignment([2,2,2,2,2,2,2,2,2,2,2])",
        "minGroupsForValidAssignment([1,1,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,8,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,13,14,14,14,15,15,15,15,16,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,25,26,26,26,26,26,27,27,27,27,27,28,28,28,28,28,28,29,29,29,29,29,29,30,30,30,30,30,30,30,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,3"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [3,4,5,2,1])",
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [3, 2, 4, 1])",
        "minimumRightShifts([3,4,5,1,2])",
        "minimumRightShifts([1,2,3,4,5])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 5, 4])",
        "maxStrength(nums = [2, 3, 5, 4])",
        "maxStrength([2, 3, 4, 5])",
        "maxStrength([2, 3, 4, 5])",
        "maxStrength([2, 3, 4, 5])",
        "maxStrength([2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4])",
        "maxStrength(nums = [5, -3, 4])",
        "maxStrength(nums = [5, -3, 5])",
        "maxStrength(nums=[2, 3, 4])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n=4, limit=2)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [3,2,3,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,2,2,2])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2,2,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,4,4,5,6,6,6])",
        "minLengthAfterRemovals(nums = [1,2,2,2,3,4,4,4,4,4,4,4,4,4])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"mango\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"durian\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"mango\"], x = \"a\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[0,1],[0,0]])",
        "findChampion([[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0], [0, 0]])",
        "findChampion(grid = [[1, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid=[[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0,0,1], [1,0,0], [0,0,1]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays([1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays(nums = [2, 4, 8])",
        "maxSubarrays([2, 3, 5])",
        "maxSubarrays(nums = [5, 2, 1])",
        "maxSubarrays([1, 1, 1, 0])",
        "maxSubarrays([3, 1, 5, 6])",
        "maxSubarrays(nums=[2, 4, 16, 32])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooaauu\", k = 3)",
        "beautifulSubstrings(s=\"aeiou\", k=2)",
        "beautifulSubstrings(s = \"aeiaaiooii\", k = 4)",
        "beautifulSubstrings(s = \"aea\", k = 3)",
        "beautifulSubstrings(s = \"aeiouuoi\", k = 2)",
        "beautifulSubstrings(s = \"aeiouza\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [2,1,3,5,6,4])",
        "minimumSeconds([1, 2, 3, 1])",
        "minimumSeconds(nums = [2,2,2,2])",
        "minimumSeconds(nums = [1,5,3,2,4])",
        "minimumSeconds([0, 2, 4, 6, 8])",
        "minimumSeconds(nums = [1, 0, 0, 1, 0])",
        "minimumSeconds([1, 5, 4, 2, 6])",
        "minimumSeconds(nums = [1, 100, 1000, 2000])"
    ],
    "sample_327": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 5, 10], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 9)",
        "lengthOfLongestSubsequence(nums = [4, 2, 5, 1], target = 5)",
        "lengthOfLongestSubsequence(nums = [2,3,4,5,6,7,8,9,10], target = 10)",
        "lengthOfLongestSubsequence(nums=[2, 5, 7, 10], target=14)",
        "lengthOfLongestSubsequence(nums = [2, 1, 3, 5, 6, 7, 8, 9, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,1,7,11], target = 15)",
        "lengthOfLongestSubsequence(nums = [3, 1, 7, 2, 8, 4, 6, 5], target = 10)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum([[1], [2], [3]])",
        "matrixSum(nums = [[1], [1], [1]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1],[2]])",
        "matrixSum([[0], [0]])",
        "matrixSum([[1, 0, 0], [1, 1, 1], [0, 0, 1]])"
    ],
    "sample_326": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[0,1,1],[1,0,1],[1,1,0]])",
        "findChampion(grid=[[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[1,1,0],[1,0,1],[0,1,1]])",
        "findChampion(grid=[[1,1,0],[0,1,1],[1,0,1]])",
        "findChampion(grid = [[0,1,1,0],[1,0,0,0],[1,0,0,1],[0,0,1,0]])",
        "findChampion(grid = [[0,1,0,1],[1,0,0,1],[0,0,0,0],[1,1,0,0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSum(nums = [1, 5, 2, 3, 7])",
        "minimumSum(nums = [5, 1, 4, 2, 3])",
        "minimumSum(nums = [2, 5, 3, 1, 8, 7])",
        "minimumSum(nums=[5, 3, 2, 4, 1])",
        "minimumSum(nums = [4,3,2,6,7,8])",
        "minimumSum(nums=[5, 2, 3, 1, 7, 4])",
        "minimumSum(nums=[5, 2, 3, 9, 4, 6, 1])"
    ],
    "sample_450": [
        "minChanges(s = \"abbbc\")",
        "minChanges(s = \"abc\")",
        "minChanges(\"abcd\")",
        "minChanges(s = \"abaab\")",
        "minChanges(s = \"baaaab\")",
        "minChanges(s = \"10111\")",
        "minChanges(s = \"aabbabb\")",
        "minChanges(s = \"aaabbaaa\")",
        "minChanges(s = \"001101\")",
        "minChanges(s = \"baaabbcc\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"101\", s2 = \"010\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 2)",
        "minOperations(s1 = \"110\", s2 = \"011\", x = 2)",
        "minOperations(s1 = \"110\", s2 = \"011\", x = 2)",
        "minOperations(s1 = \"1011\", s2 = \"1101\", x = 2)",
        "minOperations(s1 = \"1011\", s2 = \"1110\", x = 2)",
        "minOperations(s1 = \"010\", s2 = \"011\", x = 1)",
        "minOperations(s1 = \"110\", s2 = \"011\", x = 1)",
        "minOperations(s1 = \"1011\", s2 = \"1011\", x = 4)",
        "minOperations(s1 = \"111000\", s2 = \"101010\", x = 5)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(3, 3, 3)",
        "longestString(x = 4, y = 4, z = 2)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 3, z = 4)",
        "longestString(x = 2, y = 4, z = 3)",
        "longestString(2, 2, 3)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays(nums = [1, 1, 1, 1])",
        "maxSubarrays(nums = [2, 3, 2, 3])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [0b1111, 0b0101, 0b1001, 0b1111, 0b0101])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John Doe 20\", \"Jane Doe 65\", \"Bob Smith 61\"])",
        "countSeniors(details = [\"686-18-1234\", \"827312-23\", \"900100-00\"])",
        "countSeniors(details = [\"John Doe 45\",\"Jane Doe 61\",\"Sam Smith 58\"])",
        "countSeniors(details = [\"John Doe 24\",\"Jack Johnson 48\",\"Jane Doe 61\",\"Jill Johnson 55\"])",
        "countSeniors(details = [\"John Smith 25\", \"Bob Johnson 65\", \"Ann McKinney 63\"])",
        "countSeniors(details = [\"51#Johnny#19#90100\", \"52#Alice#20#80100\", \"53#Bob#21#70100\", \"54#Charlie#22#60100\"])",
        "countSeniors(details=[\"Samuel Johnson 21\", \"John Smith 61\", \"Alexander Johnson 63\"])",
        "countSeniors(details = [\"930#John#Smith#1993\", \"200#Jill#Doe#1990\", \"880#Jane#Doe#1960\"])",
        "countSeniors(details = [\"930903456781975\", \"050200486952187\"])",
        "countSeniors(details = [\"930#John Smith#87\", \"89#Jane Doe#65\", \"901#Jennifer Smith#67\", \"123#John Doe#70\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays([1, 2, 3, 4])",
        "maxSubarrays(nums = [2, 1, 3])",
        "maxSubarrays(nums = [1, 0, 1, 0])",
        "maxSubarrays(nums = [0, 3, 2, 1])",
        "maxSubarrays(nums = [2, 3, 5, 6, 7])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [6, 7], moveTo = [7, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [5, 6])",
        "relocateMarbles(nums=[5, 6, 8, 9], moveFrom=[6, 8], moveTo=[7, 10])",
        "relocateMarbles(nums = [5, 6, 6, 8, 9], moveFrom = [6, 6], moveTo = [7, 7])",
        "relocateMarbles(nums=[5, 6, 8, 9], moveFrom=[5, 8], moveTo=[6, 8])",
        "relocateMarbles(nums = [1, 2, 5, 6, 8, 9], moveFrom = [2, 5], moveTo = [3, 4])",
        "relocateMarbles(nums = [6, 5, 8, 9], moveFrom = [6, 8], moveTo = [7, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 5], moveTo = [5, 8])",
        "relocateMarbles(nums = [8, 5, 9, 6], moveFrom = [5, 9], moveTo = [6, 8])",
        "relocateMarbles(nums = [6, 5, 8, 9], moveFrom = [8, 6], moveTo = [7, 8])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"aabc\", s2 = \"aabc\", s3 = \"aabc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aca\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"baba\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aac\", s3 = \"bba\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [3,2,3,2,2])",
        "minLengthAfterRemovals(nums = [3,3,3,3,3])",
        "minLengthAfterRemovals(nums=[3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [2,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,3,3,4,4])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [0, 2, 4], [1, 3, 6], [2, 4, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 7], [1, 2, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [1, 2, 3], [3, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [0, 3, 4], [0, 1, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1,1,5], [0,2,3], [2,4,3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [1, 3, 3], [1, 4, 1], [2, 4, 4], [3, 5, 2]])",
        "maximizeTheProfit(5, [[1, 2, 5], [3, 4, 4], [2, 3, 3], [1, 3, 2], [4, 5, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 1, 1], [2, 3, 2], [1, 3, 3], [2, 3, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[1,3,2],[2,4,3],[3,5,4],[4,6,5],[5,6,6],[1,5,10]])",
        "maximizeTheProfit(n = 10, offers = [[2,5,6],[1,4,4],[4,8,8],[1,7,9],[3,6,7],[5,8,10],[6,9,12],[4,7,8],[7,9,11]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums=[7,2,5,10,8], m=2)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 10)",
        "canSplitArray(nums = [1,1,1,1], m = 3)",
        "canSplitArray(nums = [1,1,1,1,1,1,1,1,1,1], m = 5)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [4, 2, 5, 1, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 1)",
        "checkArray(nums = [1, 5, 2, 6, 3, 7], k = 3)",
        "checkArray(nums = [2, 3, 1, 1, 0, 0], k = 3)",
        "checkArray(nums = [4,2,3,1,7], k = 2)",
        "checkArray(nums = [3, 0, 2, 1, 2], k = 2)",
        "checkArray(nums = [3, 2, 1, 1, 0], k = 2)",
        "checkArray(nums = [1,1,1,0,1], k = 2)",
        "checkArray(nums = [1, 5, 0, 2, 3], k = 2)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 2], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 5, 3, 2, 4], k = 1)",
        "maximumBeauty(nums = [1, 5, 2, 4, 1], k = 1)",
        "maximumBeauty(nums = [1, 5, 4, 3, 2], k = 1)",
        "maximumBeauty(nums = [1, 5, 4, 3], k = 2)",
        "maximumBeauty(nums=[1, 5, 2, 4, 1], k=1)",
        "maximumBeauty(nums = [1, 5, 4, 2, 8], k = 2)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"a\", \"b\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"Hello\", \"World!\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"cat\", \"dog\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"apple_orange\", \"banana\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"hello_world\", \"python_is_great\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"ab-cd\", \"ef-gh\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"mama\", \"gogo\", \"papa\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"\", \"b\", \"a\", \"n\", \"a\", \"n\", \"a\", \"\", \"m\", \"e\", \"\", \"e\", \"\", \"t\", \"e\", \"\", \"h\", \"e\", \"\", \"r\", \"e\", \"\"], separator = \"\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays([1, 2, 3])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1,2,3,4,5,6])",
        "countWays(nums = [1,2,3,4,5,6])",
        "countWays([2, 1, 3])",
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays(nums = [3,1,2])",
        "countWays(nums = [3,1,2,4,5])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,2,3,2,1])",
        "minimumIndex(nums = [3,2,3])",
        "minimumIndex(nums = [2,1,2,1,2])",
        "minimumIndex([1,2,2,3,2,4,2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6])",
        "minimumIndex([2,3,1,1,1])",
        "minimumIndex([1,2,3,3,2,2])",
        "minimumIndex(nums = [2,1,2,1,3])",
        "minimumIndex(nums = [1,2,2,3,2,1,1,2,3,3,1])",
        "minimumIndex([2,2,2,3,3,3,2,2,2,2])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,3],[2,4],[5,7]])",
        "numberOfPoints(nums = [[1,3],[2,4],[4,6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [4, 5], [7, 7]])",
        "numberOfPoints(nums = [[2, 5], [1, 3], [6, 8]])",
        "numberOfPoints([[2, 4], [3, 5], [1, 7]])",
        "numberOfPoints(nums = [[1,4],[2,5],[3,6],[7,9]])",
        "numberOfPoints(nums = [[1, 5], [10, 12], [1, 6]])",
        "numberOfPoints(nums = [[2, 3], [4, 6], [1, 1], [7, 7]])",
        "numberOfPoints([[3, 4], [7, 9], [1, 2], [4, 6], [5, 8]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2,3,1,4,5])",
        "semiOrderedPermutation(nums = [2,3,1,4,5])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2,3,1,5,4])",
        "semiOrderedPermutation([2,3,1,4])",
        "semiOrderedPermutation(nums = [2, 1, 3])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n=1, target=1)"
    ],
    "sample_118": [
        "minimumIndex(nums = [2,2,1,1,1,2,2])",
        "minimumIndex(nums = [2,2,1,1,1,2,2])",
        "minimumIndex(nums = [1,2,3,2,2])",
        "minimumIndex([1, 2, 2, 3, 2, 2, 2])",
        "minimumIndex(nums = [2,1,2,1,2])",
        "minimumIndex(nums = [1, 2, 2, 3, 2, 1, 1, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 2, 2, 2, 2, 1, 1])",
        "minimumIndex([2, 1, 2, 5, 2, 3, 2])",
        "minimumIndex(nums = [2, 3, 1, 2, 2, 2])",
        "minimumIndex(nums = [1,2,3,4,5,2,1,2])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n=3, k=5)",
        "minimumSum(n = 2, k = 3)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,7]])",
        "numberOfPoints(nums=[[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints([[1,3],[2,5],[3,6]])",
        "numberOfPoints(nums = [[2, 4], [5, 6], [8, 9]])",
        "numberOfPoints(nums=[[2, 3], [4, 5], [3, 5]])",
        "numberOfPoints([[1,3],[5,7],[1,3],[5,7]])",
        "numberOfPoints(nums = [[0,2],[0,4],[1,4],[3,5],[2,5]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 1)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 16], target = 3)",
        "maximumJumps(nums = [1, 1, 1], target = 1)",
        "maximumJumps(nums=[10, 20, 30, 40, 20], target=30)",
        "maximumJumps(nums = [1, 5, 2, 7, 3], target = 2)",
        "maximumJumps(nums = [10,30,50,20,40,60], target = 20)"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n=3, k=5)",
        "minimumSum(n=3, k=4)",
        "minimumSum(n=3, k=4)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 20)",
        "canSplitArray(nums = [1,1,2,2], m = 3)",
        "canSplitArray(nums=[3,2,1], m=4)",
        "canSplitArray(nums = [5,4,7], m = 8)",
        "canSplitArray(nums = [5,5,5,5,5,5,5], m = 10)",
        "canSplitArray(nums = [1,4,3,2,5], m = 7)",
        "canSplitArray(nums = [1, 10, 100], m = 110)",
        "canSplitArray(nums = [2,1,5,5,5,5], m = 10)",
        "canSplitArray(nums = [2, 5, 8, 11], m = 5)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7], [4, 5, 8]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 7]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 3], [2, 5, 2], [5, 7, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 5], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [2, 4, 5], [3, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 3, 5], [2, 3, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3], [4,5,6], [1,3,4]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 10], [2, 5, 7], [3, 7, 8]])",
        "maximizeTheProfit(n = 10, offers = [[1,3,1],[2,5,10],[3,10,5]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1, 2, 3, 0, 0, 0], k = 3)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 1], k = 2)",
        "checkArray(nums = [3, 4, 1, 1], k = 2)",
        "checkArray(nums = [4,2,3,5,1], k = 3)",
        "checkArray(nums = [1, 3, 1, 1, 1], k = 3)",
        "checkArray(nums = [0, 1, 2, 0, 0], k = 2)",
        "checkArray(nums = [2, 3, 5, 6, 3, 2], k = 2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 1, 2, 3, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2",
        "longestEqualSubarray(nums=[1,2,3,1,2,1,1,2,3], k=2)",
        "longestEqualSubarray(nums = [1, 2, 1, 1, 3, 3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 1, 1, 1, 1, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 2, 3, 4], k = 2)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [0, 1]])",
        "colorTheArray(n=3, queries=[[0,1], [1,2], [2,1]])"
    ],
    "sample_55": [
        "smallestString(s = 'kddscncd')",
        "smallestString(s = 'kddsbnaa')",
        "smallestString(s = 'kddsbnae')",
        "smallestString(s = \"kddsbnd\")",
        "smallestString(s = 'jddqbncj')",
        "smallestString('kddsbncg')",
        "smallestString(s = 'kdcvjncd')",
        "smallestString(s = 'kdusmbncd')",
        "smallestString(s = 'jfjfjfjf')",
        "smallestString(s = 'kkkdddsssbbbcccddda')"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10], threshold = 12)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6], threshold = 7)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 7, 11], threshold = 7)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 5, 4, 6], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,3,5,7,11,13,17,19], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,3,3,2,2,2,3,3,3,3], threshold = 1)",
        "longestAlternatingSubarray(nums=[2, 4, 5, 7, 8, 2], threshold = 10)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums=[2, 3, 4, 5, 6, 7], threshold=7)",
        "longestAlternatingSubarray(nums = [2, 3, 2, 4, 2, 6], threshold = 2)",
        "longestAlternatingSubarray(nums=[2, 3, 4, 5, 6, 7, 8], threshold=5)",
        "longestAlternatingSubarray(nums = [2, 3, 2, 3, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 5, 3, 6, 7, 4, 8], threshold = 7)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 2])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [5, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [3, 4, 5, 3, 4])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ACBD\")",
        "minLength(\"ACBDAB\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"abbac\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [2, 2, 1, 2], m = 5)",
        "canSplitArray(nums = [1, 1, 2], m = 3)",
        "canSplitArray(nums = [1, 5, 9], m = 10)",
        "canSplitArray(nums = [3, 3, 4, 2], m = 6)",
        "canSplitArray(nums = [2, 5, 9], m = 8)",
        "canSplitArray(nums = [10, 5, 2, 7, 8], m = 13)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist([0,1,2,3,4,5])",
        "doesValidArrayExist(derived = [1,1,0,1,0,0,1,1,1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 1, 0, 1, 1])"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 1)",
        "checkArray(nums = [1, 5, 2, 4, 3], k = 2)",
        "checkArray(nums = [4, 2, 3, 5], k = 1)",
        "checkArray(nums = [1,2,4,5], k = 3)",
        "checkArray(nums = [10, 5, 15, 10, 20], k = 3)",
        "checkArray(nums = [4, 3, 2, 1, 2], k = 1)",
        "checkArray(nums = [0, 3, 2], k = 2)",
        "checkArray(nums = [1,2,2,1,0,3], k = 2)",
        "checkArray(nums = [3,2,1,4,1], k = 2)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 60, 70], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 15, 11], target = 13)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 1)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5], k=2)",
        "sumIndicesWithKSetBits(nums = [0,1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 1, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 1, 1, 1], k = 2)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 1)",
        "maximumBeauty(nums = [1, 3, 1, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 6], k = 1)",
        "maximumBeauty(nums = [2,4,6,8,10], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 2, 6], k = 1)",
        "maximumBeauty(nums = [1, 3, 6, 8, 10], k = 2)",
        "maximumBeauty(nums = [2,4,5,7,8], k = 2)",
        "maximumBeauty(nums = [1, 3, 4, 5, 6, 7, 9, 10], k = 2)",
        "maximumBeauty(nums = [1,5,3,7,6], k = 2)"
    ],
    "sample_205": [
        "minimumOperations(\"0125\")",
        "minimumOperations(\"2025\")",
        "minimumOperations(\"00\")",
        "minimumOperations(\"00\")",
        "minimumOperations(num = \"0123\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(\"225\")",
        "minimumOperations(num = \"012\")",
        "minimumOperations(num = \"1010\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"0125\")",
        "minimumOperations(s = \"12\")",
        "minimumOperations(s = \"12\")",
        "minimumOperations(s = \"01\")",
        "minimumOperations(\"0125\")",
        "minimumOperations(s = \"002550\")",
        "minimumOperations(s = \"0025075\")",
        "minimumOperations(s = \"050250\")",
        "minimumOperations(\"250075\")",
        "minimumOperations(s = \"0102575\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,3,1])",
        "semiOrderedPermutation(nums = [2,1,4,3,6,5])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LLAR\")",
        "furthestDistanceFromOrigin(moves = \"LRAR\")",
        "furthestDistanceFromOrigin(moves = \"LARL\")",
        "furthestDistanceFromOrigin(moves = \"LRARL\")",
        "furthestDistanceFromOrigin(moves = \"LARA\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRARA\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLLRR\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"This\", \"Is\", \"A\", \"Test\"], s = \"TIT\")",
        "isAcronym(words = [\"best\", \"friend\"], s = \"bf\")",
        "isAcronym(words = [\"Bat\", \"Man\"], s = \"B.M\")",
        "isAcronym(words = [\"Born\", \"In\", \"The\", \"U.S.A.\"], s = \"BIATUSA\")",
        "isAcronym(words = [\"mango\", \"pineapple\", \"apple\"], s = \"map\")",
        "isAcronym(words = ['banana'], s = 'B')",
        "isAcronym(words = [\"make\", \"any\", \"words\"], s = \"mow\")",
        "isAcronym(words = [\"mark\", \"quiz\"], s = \"mq\")",
        "isAcronym(words = [\"More\", \"Job\", \"Soon\"], s = \"MJS\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], modulo = 7, k = 1)",
        "countInterestingSubarrays(nums = [3,2,1,4,5], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [3,1,2,7], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [3,2,1,4,1,2,3], modulo = 4, k = 2)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 51, 23])",
        "countBeautifulPairs(nums = [12, 51, 23])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 51, 23, 40])",
        "countBeautifulPairs(nums = [12, 21, 23, 45])",
        "countBeautifulPairs(nums = [2,5,12,15])",
        "countBeautifulPairs(nums = [123,234,345])",
        "countBeautifulPairs(nums = [12, 21, 23, 32, 123])",
        "countBeautifulPairs(nums = [26, 51, 58])",
        "countBeautifulPairs(nums = [29, 40, 18, 36, 47])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 1)",
        "maximumJumps(nums=[1,2,3,4,5], target=2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [4,1,5,20,3], target = 3)",
        "maximumJumps(nums = [1,2,3,10], target = 3)",
        "maximumJumps(nums = [2,5,3,1,4], target = 3)",
        "maximumJumps(nums = [1, 10, 100, 1000], target = 100)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [21, 22, 23])",
        "countBeautifulPairs(nums = [21, 22, 23, 24, 25])",
        "countBeautifulPairs(nums = [12, 51, 23, 40])",
        "countBeautifulPairs(nums = [25, 26, 35, 36])",
        "countBeautifulPairs(nums=[12, 21, 22])",
        "countBeautifulPairs(nums=[1, 2, 3])",
        "countBeautifulPairs(nums = [42, 24, 12, 5])",
        "countBeautifulPairs([25, 35, 45, 55])",
        "countBeautifulPairs([12, 21, 25, 52])",
        "countBeautifulPairs(nums = [21, 22, 10, 100])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDEF\")"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0,1,1,0])",
        "doesValidArrayExist(derived = [1,0,1,0])",
        "doesValidArrayExist(derived = [0, 1, 2])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived=[1,2,3])",
        "doesValidArrayExist([1, 2, 3, 5, 7])",
        "doesValidArrayExist(derived = [2,4,5,2,4,5,1,1,1,2,4,5])",
        "doesValidArrayExist([1,1,1])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [3, 9, 7, 1])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [7, 9, 5, 8, 1, 3])",
        "findValueOfPartition(nums = [1,2,3])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 6, 3, 2, 5])",
        "findValueOfPartition(nums = [1, 8, 3])",
        "findValueOfPartition(nums = [1, 6, 3, 8, 7])",
        "findValueOfPartition(nums = [1, 6, 3, 8, 7, 2])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 1, queries = [[0, 1], [0, 2]])",
        "colorTheArray(n = 1, queries = [[0,1], [0,1]])",
        "colorTheArray(n = 5, queries = [[2, 1], [3, 2], [4, 1], [1, 3]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n=3, target=5)",
        "minimumPossibleSum(n = 2, target = 5)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 50, 60, 70], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 8, 4, 5], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 45, 55], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 4, 8], target = 7)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [2, 3, 3, 2, 3], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [10, 20, 30, 40], m = 50)",
        "canSplitArray(nums = [2, 4, 8], m = 10)",
        "canSplitArray(nums=[10, 20, 30], m=50)",
        "canSplitArray(nums = [2, 5, 7], m = 9)",
        "canSplitArray(nums = [1, 5, 7, 3], m = 12)",
        "canSplitArray(nums = [5, 7, 10, 3], m = 20)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], m=5, k=2)",
        "countInterestingSubarrays(nums = [2, 3, 3, 1, 1, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [5,2,1,2,3,5,1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,4,5,6,7,8,9,10,11,12], m = 12, k = 3)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 6)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], t = 8)",
        "longestAlternatingSubarray(nums = [10, 22, 9, 33, 49, 50, 31, 60], t = 60)",
        "longestAlternatingSubarray(nums=[2,4,6,8,10], t=10)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 6, 7, 8, 9], t = 10)",
        "longestAlternatingSubarray(nums = [2,5,1,2,3,4,5,6], t = 10)",
        "longestAlternatingSubarray(nums = [5, 1, 2, 1, 6, 7], t = 5)",
        "longestAlternatingSubarray(nums = [5, 2, 3, 10, 12, 14, 5, 7, 8, 2], t = 14)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits([0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits([0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits([0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0,0,1,0,1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num='512301000')"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a=5, b=2)",
        "makeTheIntegerZero(a=10, b=2)",
        "makeTheIntegerZero(a = 8, b = 2)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [3, 3, 3], m = 6)",
        "canSplitArray(nums = [2, 3, 5, 7], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 8)"
    ],
    "sample_161": [
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [55, 33, 22])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum(nums = [55, 3, 5, 2])",
        "maxSum(nums = [15, 12, 16, 18])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n=3, target=5)",
        "minimumPossibleSum(n = 3, target = 6)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [3,9,7])",
        "findValueOfPartition(nums = [3,9,7])",
        "findValueOfPartition(nums = [3,9,7])",
        "findValueOfPartition(nums = [3,9,7])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [7,3,5])",
        "findValueOfPartition(nums = [1,3,6,8])",
        "findValueOfPartition(nums = [7,3,5,10])",
        "findValueOfPartition([1,3,5,7,9])",
        "findValueOfPartition(nums = [3,7,2,3,1])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,3],[2,4],[5,7]])",
        "numberOfPoints(nums = [[1,3],[2,5],[4,6]])",
        "numberOfPoints(nums = [[1,3],[2,3],[3,3]])",
        "numberOfPoints(nums = [[1,4],[2,5],[3,6]])",
        "numberOfPoints([[1,5],[3,7],[6,10]])",
        "numberOfPoints(nums = [[1,5], [3,10], [7,9]])",
        "numberOfPoints(nums = [[0,3],[3,6],[5,9]])",
        "numberOfPoints(nums = [[2, 5], [3, 4], [6, 6]])",
        "numberOfPoints([[3,5], [4,6], [7,10]])",
        "numberOfPoints(nums = [[3,6], [4,9], [10,12]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [3, 5], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums=[[1, 3], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [2, 4]])",
        "numberOfPoints([[2, 3], [4, 5], [5, 6]])",
        "numberOfPoints(nums = [[2, 3], [1, 4], [2, 5]])",
        "numberOfPoints(nums=[[1, 5], [3, 7]])",
        "numberOfPoints(nums = [[2,4],[1,2],[3,3],[2,3],[1,3],[4,4]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\", \"\", \"four\", \"five\", \"\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"\", \"three\", \"four\", \"\", \"five\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"\", \"three\", \"four\", \"\", \"five\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = ['one', '', 'two', '', 'three', 'four', '', 'five', 'six'], separator = '')",
        "splitWordsBySeparator(words = ['one', '', 'two', '', 'three', 'four', '', 'five', 'six'], separator = '')",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\", \"four\", \"\", \"five\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words=[\"one\", \"\", \"two\", \"three\", \"\", \"four\", \"five\", \"six\"], separator=\"\")",
        "splitWordsBySeparator(words = ['one', '', 'two', '', 'three', '', 'four', '', 'five', '', 'six', ''], separator = '')",
        "splitWordsBySeparator(words = [\"one.\", \"two.\", \"three.\", \"four.\", \"five.\", \"six.\"], separator = \".\")",
        "splitWordsBySeparator(words = ['one', '', 'two', '', 'three', 'four', 'five', 'six'], separator = '')"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3], target = 5)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 100)",
        "minOperations(nums = [1, 2, 3, 4], target = 8)",
        "minOperations(nums = [1, 2, 3, 5], target = 5)",
        "minOperations(nums = [1,2,3,4], target = 20)",
        "minOperations(nums = [2,4,8,16], target = 25)",
        "minOperations(nums = [8, 10, 14, 12, 11, 15, 10, 10], target = 30)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1,1,2,2,3,3], k = 3)",
        "checkArray(nums = [1,2,2,3,4], k = 3)",
        "checkArray(nums = [1, 2, 2, 2], k = 3)",
        "checkArray(nums = [2,3,4,5,6,7,8], k = 3)",
        "checkArray(nums = [3, 2, 5, 1, 2], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,1,1,0])",
        "doesValidArrayExist([0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,0,1])",
        "doesValidArrayExist(derived = [0,0,0,0,0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 0])"
    ],
    "sample_159": [
        "maxSum(nums = [55,9])",
        "maxSum(nums = [55,9])",
        "maxSum(nums = [10,2])",
        "maxSum(nums = [55,9,77])",
        "maxSum(nums = [55,33,88])",
        "maxSum(nums = [10, 20, 30, 40, 50, 60])",
        "maxSum(nums = [10, 2, 21, 3])",
        "maxSum(nums = [55,32,45,67,78])",
        "maxSum(nums = [12,23,45,19,78])",
        "maxSum(nums = [55, 33, 99, 66, 12])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 3])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 3])",
        "continuousSubarrays(A=[1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 2, 1, 3, 2])",
        "continuousSubarrays(A=[1, 2, 2, 1, 3, 1])",
        "continuousSubarrays([1, 2, 3, 3, 4, 5])",
        "continuousSubarrays([1,2,2,3,4,4])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray([5, 1, 3, 3, 5])",
        "distinctDifferenceArray(nums = [5, 2, 1, 4, 3])",
        "distinctDifferenceArray(nums = [5, 2, 3, 5, 2])",
        "distinctDifferenceArray(nums = [5, 2, 1, 3, 1])",
        "distinctDifferenceArray([5,2,3,3,2])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1,2,3,4], b = [2,3,4,5])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "maxNonDecreasingLength(a = [1, 2, 5, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1,2,3,4], b = [1,2,3,5])",
        "maxNonDecreasingLength(a=[1, 2, 3, 4], b=[0, 2, 3, 4])",
        "maxNonDecreasingLength(a = [2, 3, 1, 5], b = [1, 2, 5, 4])",
        "maxNonDecreasingLength(a=[3, 2, 1, 2], b=[2, 1, 3, 2])",
        "maxNonDecreasingLength(a=[1, 4, 5, 6], b=[4, 5, 6, 7])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)"
    ],
    "sample_160": [
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [54,23,11,99])",
        "maxSum(nums = [50, 2])",
        "maxSum([55, 56, 57])",
        "maxSum(nums = [100, 200, 300, 400, 500])",
        "maxSum(nums = [12, 45, 46, 57, 68, 79])",
        "maxSum([10, 21, 22, 31, 32, 41, 42, 51, 52, 61, 62])",
        "maxSum([2,12,22,3,45,6])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbnaa')",
        "smallestString(s = 'kddscnd')",
        "smallestString(s = 'kddaabncd')",
        "smallestString(s = 'kddaabncd')",
        "smallestString(s = 'kddsaabcd')",
        "smallestString(s = 'kddsbndb')",
        "smallestString(s = 'kdddsa')"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 3])",
        "findValueOfPartition(nums = [1, 3])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [1, 1])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'aba')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = 'aaab')",
        "makeSmallestPalindrome(s = \"aaab\")",
        "makeSmallestPalindrome(s='abc')",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s = \"abbc\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 5)",
        "makeTheIntegerZero(num1 = 16, num2 = 4)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[2,4],[3,5]])",
        "numberOfPoints(nums = [[1,3],[2,5],[4,6]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,6]])",
        "numberOfPoints(nums = [[1,3],[2,4],[6,8]])",
        "numberOfPoints(nums = [[1,3],[3,6],[5,7]])",
        "numberOfPoints(nums = [[2,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,6],[4,7],[5,8],[6,9],[7,10]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,5],[4,7],[6,8],[7,9],[9,10]])",
        "numberOfPoints(nums = [[1,3],[2,4],[1,2],[2,3],[1,4],[2,5],[3,5]])",
        "numberOfPoints([[2,4],[3,7],[5,7],[6,8],[1,3],[2,5]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,3,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,3,2,3,1,3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,3,2,3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,3,2,2,2,3,3,1,1,2,2,2,1], m = 3, k = 2)"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"0110\")",
        "minimumCost(s = \"010110\")",
        "minimumCost(s = \"abbac\")",
        "minimumCost(s = \"b\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1,1])",
        "doesValidArrayExist([0, 0, 1])",
        "doesValidArrayExist(derived = [1,1,1,0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 1, 1, 0])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [2, 4, 6, 8, 10])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [4, 2, 3, 5, 1])",
        "distinctDifferenceArray(nums = [5, 3, 7, 3, 2])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 25, 30], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 25], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 25, 30], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 15, 18, 20], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 15, 18, 25], target = 18)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 12, 10, 3], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 7, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 15, 30, 10, 20], target = 20)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = 'nice')",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"nitin\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"51230100\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [2,3,1,3,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [3,1,4,1,5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 1, k = 1)",
        "countInterestingSubarrays(nums = [0,1,2,3,4,5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [2,3,1,2,1,1,2,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [0,1,1,2,3,4,0], m = 2, k = 3)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 6, additionalTank = 4)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 1)",
        "minCost(A = [1,2,3,4], x = 2)",
        "minCost(A = [2, 3, 4], x = 2)",
        "minCost(A=[1, 3, 2], x=2)",
        "minCost(A = [4,2,3,1], x = 2)",
        "minCost(A = [1, 4, 2], x = 3)",
        "minCost(A=[1, 3, 2, 5, 4], x=2)",
        "minCost(A = [3, 3, 2, 5], x = 2)",
        "minCost(A=[2,5,7,10], x=3)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2])",
        "maxIncreasingGroups(u = [1, 2])",
        "maxIncreasingGroups([1, 2])",
        "maxIncreasingGroups(u = [1, 1, 2])",
        "maxIncreasingGroups(u = [1, 2, 2])",
        "maxIncreasingGroups(u=[1, 2])",
        "maxIncreasingGroups(u = [1, 2, 3, 4])",
        "maxIncreasingGroups(u=[1, 1, 1])",
        "maxIncreasingGroups([1, 2, 5])",
        "maxIncreasingGroups(u = [1, 2, 1, 1, 2, 1])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [0, 2, 1, 3], k = 2)",
        "checkArray(nums = [5, 4, 2, 3, 1], k = 2)",
        "checkArray(nums = [5, 2, 3, 4, 1], k = 2)",
        "checkArray(nums = [0,0,0,0,0], k = 3)",
        "checkArray(nums = [0, 1, 0, 0, 0], k = 2)",
        "checkArray(nums = [1, 0, 0, 2], k = 3)",
        "checkArray(nums = [0, 2, 0, 0, 1], k = 2)",
        "checkArray(nums = [4, 2, 3, 5, 1, 6], k = 2)",
        "checkArray(nums = [2, 4, 2, 1], k = 2)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ACABBC\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,2,3], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 4)",
        "minOperations(nums = [1,2,3], target = 5)",
        "minOperations(nums = [2,3,5], target = 10)",
        "minOperations(nums = [1,1,1,1], target = 4)",
        "minOperations(nums=[1,2,3,4,5], target=10)",
        "minOperations(nums=[1,5,2,4,1], target=7)",
        "minOperations(nums = [8, 1, 5, 2, 6], target = 14)",
        "minOperations(nums = [8, 3, 5, 2], target = 15)",
        "minOperations(nums=[3,2,5], target=5)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"banana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a.b.c\", \"d.e.f\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"word1\", \"word2\", \"word3\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"apple#orange#\", \"banana\"], separator = \"#\")",
        "splitWordsBySeparator(words = [\"1,2,3\"], separator = \",\")",
        "splitWordsBySeparator(words=[\"hi,there\",\"how,are,you\"], separator=\",\")"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbnaa')",
        "smallestString(s = 'kddsbnca')",
        "smallestString(s = 'jddsbncd')",
        "smallestString(s = 'jddsbncd')",
        "smallestString(s = 'kddscncd')",
        "smallestString(s = 'kddsbncz')",
        "smallestString(s = \"kddsbndd\")",
        "smallestString(s = 'zbbbnbb')"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"L_RR\")",
        "furthestDistanceFromOrigin(moves = \"LLR__R\")",
        "furthestDistanceFromOrigin(moves = \"LRRR_LR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRR_L__\")",
        "furthestDistanceFromOrigin(moves = \"LR__LRL_\")",
        "furthestDistanceFromOrigin(moves = \"LR_LRL_RRL\")",
        "furthestDistanceFromOrigin(moves = \"LL_R_RRL_\")",
        "furthestDistanceFromOrigin(moves = \"L_LLRR_LLRR\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R_L_L_R_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"LR_RRRR_RLLLLLL_\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 13, num2 = 5)"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString('kddsbncd')",
        "smallestString(s = 'mddsbncd')",
        "smallestString(s = \"zddsbncd\")",
        "smallestString('zddsbncd')",
        "smallestString(s = 'kddsaaab')",
        "smallestString(s = 'bcdfghij')",
        "smallestString(s = \"jklmnopqrstuvwxyz\")",
        "smallestString(s = 'fjbjabhba')"
    ],
    "sample_146": [
        "finalString(s = 'inter')",
        "finalString(s = 'inter')",
        "finalString(s = 'inter')",
        "finalString(s = 'iponter')",
        "finalString(s = 'pointer')",
        "finalString(s = 'nterip')",
        "finalString(s = 'poteinr')",
        "finalString(s = \"itner\")",
        "finalString(s = 'pointerni')",
        "finalString(s = \"intention\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,3,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 2, 2, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 1, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,3,3,4], k = 1)",
        "longestEqualSubarray(nums=[1,2,3,2,1,3,3,3], k=2)",
        "longestEqualSubarray(nums = [1,2,1,3,2,2,2,1,3,1], k = 1)"
    ],
    "sample_155": [
        "canSplitArray(nums = [2, 2, 1], m = 4)",
        "canSplitArray(nums = [2, 2, 1], m = 4)",
        "canSplitArray(nums = [2,2,1], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [2, 2, 1, 2], m = 5)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 28)",
        "canSplitArray(nums = [3,3,3], m = 6)",
        "canSplitArray(nums=[1, 2, 3, 4], m=3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 2)",
        "canSplitArray(nums = [2, 3, 2, 3, 2, 3, 2, 3], m = 10)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits([1,0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,1,1])",
        "numberOfGoodSubarraySplits([1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,0,1,0,1,0,0,1,1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one-two\", \"three-four\", \"five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three-four\", \"five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one-two-three\", \"four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one-two', 'three-four', 'five-six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one-two\", \"three-\", \"four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one.two\", \"three.four.five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three_four\", \"five six\"], separator = \"-_\")",
        "splitWordsBySeparator(words = ['one,two', 'three,', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one-two\", \"three four-five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [10,20,30,40,50], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [5,6,7,8,9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 30, 15], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [2,4,6,8,10], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [0,0,0,0,0,0], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 11, 9, 12, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [35, 50, 75], target = 70)"
    ],
    "sample_168": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"this\", \"is\", \"an\", \"example\"], s = \"tiane\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"apb\")",
        "isAcronym(words = [\"sky\", \"is\", \"blue\"], s = \"sib\")",
        "isAcronym(words=[\"banana\", \"apple\", \"orange\"], s=\"bapo\")",
        "isAcronym(words = [\"this\", \"is\", \"an\", \"acronym\"], s = \"tis\")",
        "isAcronym(words = [\"matrix\", \"representation\"], s = \"mar\")",
        "isAcronym(words = [\"making\", \"a\", \"new\", \"start\"], s = \"MANS\")",
        "isAcronym(words = [\"map\", \"let\", \"low\"], s = \"ml\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"for\", \"all\", \"people\"], s = \"FAP\")",
        "isAcronym(words = [\"Banana\", \"Orange\"], s = \"BO\")",
        "isAcronym(words = [\"to\", \"be\", \"or\", \"not\", \"to\", \"be\"], s = \"TBONTB\")",
        "isAcronym(words = [\"he\", \"llo\"], s = \"hl\")",
        "isAcronym(words = [\"banana\", \"acronym\"], s = \"bac\")",
        "isAcronym(words = [\"Python\", \"is\", \"great\"], s = \"PI\")",
        "isAcronym(words = [\"dog\", \"house\"], s = \"dh\")",
        "isAcronym(words = [\"apple\", \"book\"], s = \"apb\")",
        "isAcronym(words = [\"word\", \"inner\"], s = \"wii\")",
        "isAcronym(words=[\"be\", \"yourself\"], s=\"boy\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"baaa\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0,1,0,1,0,1])",
        "doesValidArrayExist(derived = [0,1,0,1,0,1])",
        "doesValidArrayExist([0, 0, 0, 0])",
        "doesValidArrayExist([0, 0, 0])",
        "doesValidArrayExist(derived = [1,0,1,1,1,0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0,0,1,0,1])",
        "doesValidArrayExist([0, 0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1,0,0,0,1,0,1,1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = 'abcb')",
        "makeSmallestPalindrome(s = 'abccba')",
        "makeSmallestPalindrome(s='ab')"
    ],
    "sample_50": [
        "smallestString(s = \"baaaa\")",
        "smallestString(s = \"aabaab\")",
        "smallestString(s = \"aaabz\")",
        "smallestString(s = \"aaaaab\")",
        "smallestString(s=\"aaaaa\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"bbaaab\")",
        "smallestString(s = \"abcabc\")",
        "smallestString(\"aaaaa\")",
        "smallestString(\"aabaab\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 7, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5,6,7,8,9,10], k=2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [4,5,7,7,1,3,8], k = 3)",
        "sumIndicesWithKSetBits(nums = [4,5,7,6,3,2,1], k = 3)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ACBAD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ACBDAB\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABAB\")",
        "minLength(s = \"ABCABC\")",
        "minLength(s = \"AABABBCD\")"
    ],
    "sample_158": [
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 33, 22])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [55, 33, 44, 22])",
        "maxSum([123, 456, 789, 101112])",
        "maxSum([55, 10, 200, 2])",
        "maxSum(nums = [55, 105, 200, 25, 50])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation([2, 3, 1, 4, 5])"
    ],
    "sample_162": [
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums=[51, 32, 43])",
        "maxSum(nums = [12,34,56,78])",
        "maxSum([15, 24, 30])",
        "maxSum([81, 90, 10])",
        "maxSum(nums = [8, 7, 9, 88, 1])",
        "maxSum(nums = [51,95,97,99,101,103,105,107,109,111])",
        "maxSum(nums = [12, 32, 43, 21, 56, 23])",
        "maxSum(nums = [43, 21, 32, 18, 9, 46])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber(s = '11')",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = '0100')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber('1111')",
        "maximumOddBinaryNumber(s = \"111000\")",
        "maximumOddBinaryNumber(s = \"111111\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8, 9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 30, 45, 60, 75], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11, 12, 13], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 8, 7, 6, 5, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 16, 20, 22, 25], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 15, 20, 12, 22], target = 12)"
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"test\"], s = \"tiat\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"This\", \"Is\", \"A\", \"Test\"], s = \"TIT\")",
        "isAcronym(words = [\"the\", \"quick\", \"brown\", \"fox\"], s = \"tqbf\")",
        "isAcronym(words = [\"happy\", \"birthday\"] , s = \"hbd\")",
        "isAcronym(words = [\"something\", \"else\"], s = \"sem\")",
        "isAcronym(words=[\"mq\", \"px\", \"zy\"], s = \"mpxz\")",
        "isAcronym(words=[\"butter\", \"fly\", \"cheese\"], s = \"bfc\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank=1, additionalTank=1)",
        "distanceTraveled(mainTank=3, additionalTank=1)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 5])",
        "maxIncreasingGroups(A = [1, 2, 5])",
        "maxIncreasingGroups(A = [1, 2, 5])",
        "maxIncreasingGroups([1])",
        "maxIncreasingGroups([1])",
        "maxIncreasingGroups(A = [1,2,3,4,5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [5, 3, 1, 4, 2])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray([3, 4, 4, 5, 6])",
        "distinctDifferenceArray(nums = [5, 2, 4, 3, 1])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank=1, additionalTank=1)",
        "distanceTraveled(mainTank=3, additionalTank=0)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 2, 3, 1, 4, 1, 2])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 3, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [4,2,1,3], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 3, 5, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 3, 5, 6, 7], k = 3)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abbcccddd\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums=[1,2,3,1,2,3], k=2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1, 2], k = 1)",
        "longestEqualSubarray(nums=[1, 2, 3, 1, 2, 3, 1, 2, 3], k=2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,1,2,3], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,1,1,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 2, 3, 4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,2,3,4,1,1,1,1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 4, 2, 1, 2, 3, 4], k = 2)",
        "longestEqualSubarray(nums=[1,2,3,4,2,1,2,3,4,1,1,2,3,4], k=2)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [2,1], [3,3], [4,2]])",
        "colorTheArray(n = 5, queries = [[0,1], [2,1], [3,1], [1,2], [4,1]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[1,3],[2,2],[3,1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [3, 1], [2, 3], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 1], [3, 1], [4, 2], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [1,1], [2,3], [3,2]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 40, 50], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 20, 10], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours=[10,15,20,25,30], target=35)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [45, 35, 25, 15], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours=[10,11,12,13], target=14)",
        "numberOfEmployeesWhoMetTarget(hours=[100, 75, 50], target=150)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [11, 22, 33, 44, 55])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [25, 50, 75, 100])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 50])",
        "countBeautifulPairs(nums = [12, 25, 34, 43, 56, 65, 74, 83, 92])",
        "countBeautifulPairs(nums = [25, 12, 45, 13, 27, 18])",
        "countBeautifulPairs(nums = [22, 100, 33, 123, 456])",
        "countBeautifulPairs(nums = [29, 45, 31, 71, 23, 91])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [3, 1, 2])",
        "countWays([1, 0, 3, 2])",
        "countWays(nums=[2, 0, 1])",
        "countWays([1, 2, 0, 4])",
        "countWays(nums=[0,1,2,3,4,5])",
        "countWays(nums = [1,2,0,2])",
        "countWays(nums = [1, 1, 1, 0, 0, 0])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s='001')",
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s='011')",
        "maximumOddBinaryNumber(s = '0010')",
        "maximumOddBinaryNumber(s = '0111')",
        "maximumOddBinaryNumber(s = '00110')",
        "maximumOddBinaryNumber(s = \"01001\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 5, 4, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 5, 3, 2], k = 2)",
        "maximumBeauty(nums = [1, 5, 3, 4, 2], k = 1)",
        "maximumBeauty(nums = [2, 1, 4, 3, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 5, 3, 2, 1, 4, 2, 5, 1, 2, 4, 1], k = 1)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums=[1, 2, 3, 4, 5])",
        "maximumTripletValue([1,2,3])",
        "maximumTripletValue(nums = [5, 1, 3])",
        "maximumTripletValue(nums = [5,4,3])",
        "maximumTripletValue(nums = [3, 2, 1, 4, 7])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 1)",
        "maximumJumps(nums = [10, 20, 30, 40], target = 15)",
        "maximumJumps(nums = [1, 5, 2, 4, 3], target = 2)",
        "maximumJumps(nums = [10, 15, 20], target = 5)",
        "maximumJumps(nums = [10,30,20,40,50], target = 20)",
        "maximumJumps(nums = [2, 3, 1, 5, 4], target = 2)",
        "maximumJumps(nums = [1,5,3,7,4,8,2], target = 3)",
        "maximumJumps(nums = [2,5,3,7,8,9], target = 3)"
    ],
    "sample_149": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"stringi\")",
        "finalString(s=\"string\")",
        "finalString(s = 'sngrit')",
        "finalString(s = \"rtsng\")",
        "finalString(s = 'rtsnig')"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1,2,2,3,3,3])",
        "continuousSubarrays(A = [1,2,2,3,3,3])",
        "continuousSubarrays([1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 2, 3, 1, 2])",
        "continuousSubarrays(A = [1, 2, 3, 3, 4, 5])",
        "continuousSubarrays(A = [1,2,2,3,1,1])",
        "continuousSubarrays([1, 2, 3, 2, 3, 1])",
        "continuousSubarrays(A = [1,2,2,1,3,1,2])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,4,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,4,1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 3, 1, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,2,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,4,5,1,2,3])"
    ],
    "sample_228": [
        "countWays([0, 1, 2, 3, 4])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1, 2, 3, 0])",
        "countWays([1,2,3,0])",
        "countWays(nums = [1,2,3,0,4])",
        "countWays(nums = [0, 3, 2, 1])",
        "countWays(nums = [3, 0, 2, 1])",
        "countWays(nums = [1,2,2,3,4,5])",
        "countWays([1,0,2,3,4,0])",
        "countWays([0, 1, 3, 5, 2, 4])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 5], k = 1)",
        "maximumBeauty(nums = [2, 4, 5, 7], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7], k = 1)",
        "maximumBeauty(nums = [2, 4, 6, 8, 10, 12, 14], k = 2)",
        "maximumBeauty(nums = [1, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [2, 2, 1, 4, 3, 2, 5, 6], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [5, 4, 3, 2, 1])",
        "distinctDifferenceArray(a = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(a = [1,2,3,4,5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [2, 3, 4, 5, 6])",
        "distinctDifferenceArray(a = [5, 1, 3, 2, 4])",
        "distinctDifferenceArray(a = [1, 1, 1, 2, 3])",
        "distinctDifferenceArray(a = [1, 1, 2, 3, 3, 3, 4, 4])",
        "distinctDifferenceArray(a = [1,2,2,1,2])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1,2,3,4,5])",
        "continuousSubarrays(a = [1,2,3,4,5])",
        "continuousSubarrays(a = [0, 1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(a=[1, 2, 3, 4, 5])",
        "continuousSubarrays(a=[1,1,1,1,1,1,1,1,1,1])",
        "continuousSubarrays(a = [2, 3, 3, 5, 5, 5, 6, 7])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1,2,3,4,5])",
        "continuousSubarrays(nums = [1,2,3,4,5])",
        "continuousSubarrays(nums = [1,2,3,4,5])",
        "continuousSubarrays(nums = [1,2,3,4])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1,2,3,2,3,4,1])",
        "continuousSubarrays(nums = [1, 3, 2, 1, 2, 3])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(nums = [12, 23, 34, 45])",
        "countBeautifulPairs(nums = [42, 11, 1, 97])",
        "countBeautifulPairs(nums = [12, 23, 34, 56])",
        "countBeautifulPairs(nums = [12, 24, 16, 18])",
        "countBeautifulPairs(nums = [12, 56, 78, 91])",
        "countBeautifulPairs(nums = [15, 55, 155, 555])",
        "countBeautifulPairs(nums = [2,5,10,20,30])",
        "countBeautifulPairs([15, 55, 25, 75])",
        "countBeautifulPairs(nums = [12, 21, 23, 15, 17, 22, 33, 37])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2,3,1,4,5])",
        "semiOrderedPermutation(nums = [2,3,1,4,5])",
        "semiOrderedPermutation(nums = [2,3,1,4,5])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation([2, 3, 1])",
        "semiOrderedPermutation(nums=[2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums=[2,3,1,4])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,0,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0,1,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s='010')",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s='100')",
        "maximumOddBinaryNumber('00')",
        "maximumOddBinaryNumber('00')",
        "maximumOddBinaryNumber(s = '101')"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,1,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1,2,1,3,4,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,3,4])"
    ],
    "sample_23": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ACBDAB\")",
        "minLength(s = \"ACBAD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s=\"ABCDECDAB\")",
        "minLength(s = \"ABCDBAC\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [1,2,2,3,1,1])",
        "countCompleteSubarrays(nums = [2,1,3,1,2,3,3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,4,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,4,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,1,3,1,2,3])",
        "countCompleteSubarrays([1,2,3,1,2,3,2,3])",
        "countCompleteSubarrays(nums = [1,1,2,2,2,3,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 1, 2, 1, 1])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 27, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)"
    ],
    "sample_100": [
        "maximumJumps(nums = [10, 20, 30, 40, 20, 30], target = 30)",
        "maximumJumps(nums = [10, 20, 30, 40, 50], target = 5)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7], target = 2)",
        "maximumJumps(nums = [10,20,30,40,50], target = 5)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 1)",
        "maximumJumps(nums = [10, 20, 30, 40, 50, 60], target = 10)",
        "maximumJumps(nums = [10, 20, 30, 40, 50, 60], target = 5)",
        "maximumJumps(nums = [10,20,30,40,50,60,70,80,90,100], target = 20)",
        "maximumJumps(nums = [10, 20, 30, 25, 40, 50], target = 10)",
        "maximumJumps(nums = [10,2,3,4,7,2], target = 5)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4])",
        "maxIncreasingGroups(x = [1, 2, 4, 8])",
        "maxIncreasingGroups([1, 1, 1, 2, 3])",
        "maxIncreasingGroups(x = [2, 3, 5, 9])",
        "maxIncreasingGroups(x = [1, 3, 6, 7, 10])",
        "maxIncreasingGroups(x = [1, 3, 3, 5, 5, 7])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLRRR__\")",
        "furthestDistanceFromOrigin(moves = \"LRRR_LRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_RLLL\")",
        "furthestDistanceFromOrigin(moves = \"L_RRR__\")",
        "furthestDistanceFromOrigin(moves = \"LRRR_RRRL\")",
        "furthestDistanceFromOrigin(moves = \"LR_LRR_RRL\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRR__RLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRR__RRR\")",
        "furthestDistanceFromOrigin(moves = \"LRRR_LL_RRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRR_RRL__LRR\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber('000')",
        "maximumOddBinaryNumber('001')",
        "maximumOddBinaryNumber(s = '10')",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber('10')"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,1],[2,1],[3,1],[4,1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,1],[2,1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 0], [2, 1], [3, 0], [4, 1]])",
        "colorTheArray(n = 3, queries = [[0,1], [1,2], [2,1]])",
        "colorTheArray(n = 3, queries = [[1,1],[1,2],[2,2]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [3, 9, 7, 1])",
        "findValueOfPartition(nums = [3, 9, 7, 1])",
        "findValueOfPartition(nums = [3, 9, 7, 1])",
        "findValueOfPartition(nums = [1, 3])",
        "findValueOfPartition(nums = [3, 7, 1, 6])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [1, 3, 5, 6])",
        "findValueOfPartition(nums = [3, 7, 5, 9, 1])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits([1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,0])",
        "numberOfGoodSubarraySplits([0,0,0,1,0,0,0])",
        "numberOfGoodSubarraySplits([0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums=[0,1,0,0,1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0])"
    ],
    "sample_121": [
        "minimumIndex(nums = [2, 1, 3, 1, 2, 2])",
        "minimumIndex(nums = [2,3,1,3,2,4,3])",
        "minimumIndex(nums = [2, 1, 3, 1, 1, 1, 7, 1, 2, 1])",
        "minimumIndex(nums = [0,1,0,3,12])",
        "minimumIndex(nums = [2,1,3,1,1,2,2,2])",
        "minimumIndex(nums = [2, 1, 3, 5, 2, 2])",
        "minimumIndex([1, 2, 2, 3, 1, 3])",
        "minimumIndex(nums = [2, 3, 4, 5, 6, 2, 2])",
        "minimumIndex(nums = [2,2,2,2,2,3])",
        "minimumIndex([2, 1, 3, 1, 4, 2, 3, 5, 1, 2, 2])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 3, 5], k = 3)",
        "sumIndicesWithKSetBits(nums=[4, 2, 1, 1, 2, 6, 2, 1], k=2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,2,1,6,5,4,7,8,9,10], k = 2)",
        "sumIndicesWithKSetBits(nums=[3, 1, 1, 4, 2, 5, 2, 6, 3, 3, 2, 4, 6], k=2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[1,3,3],[2,5,4],[3,7,5]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,5], [2,3,6], [1,3,10]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 6], [2, 4, 7], [3, 5, 8], [4, 6, 9]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 3, 4], [3, 4, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 3, 4], [2, 4, 6]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,3],[2,3,4],[1,3,5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 2], [3, 5, 4]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 3], [2, 3, 2], [3, 4, 3], [4, 5, 2]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 5], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 10], [9, 10, 11], [10, 11, 12]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,5], [2,4,5], [3,5,6], [4,7,10]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"2500\")",
        "minimumOperations(\"02575\")",
        "minimumOperations(\"02575\")",
        "minimumOperations(num = \"0250\")",
        "minimumOperations(num = \"0075\")",
        "minimumOperations(\"1250\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(\"2550\")",
        "minimumOperations(num = \"2050\")",
        "minimumOperations(num = \"27025\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = '025')",
        "minimumOperations(num = \"2050\")",
        "minimumOperations(num = \"2050\")",
        "minimumOperations('100')",
        "minimumOperations(num = \"25025\")",
        "minimumOperations(num = \"27\")",
        "minimumOperations(\"525\")",
        "minimumOperations(num = \"305\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [3, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1,1,1],[2,2,1],[3,3,1]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 1], [1, 2, 2], [2, 3, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,1],[3,4,2],[0,3,3]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 1], [1, 2, 2], [3, 4, 3]])",
        "maximizeTheProfit(n = 5, offers = [[2,2,2],[1,3,1],[3,5,1]])",
        "maximizeTheProfit(n = 5, offers = [[0,3,1],[2,4,2],[1,2,3]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,2],[0,2,1],[2,4,3]])",
        "maximizeTheProfit(n = 4, offers = [[0,1,2],[0,2,3],[0,3,5]])",
        "maximizeTheProfit(n=5, offers=[[2,1,3],[1,1,2],[1,2,2],[3,1,1],[4,2,3]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9,10], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,2,3,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [2,7,1,8,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,12,14,16,18,20], threshold = 20)",
        "longestAlternatingSubarray(nums=[2, 3, 4, 5, 6, 7], threshold=6)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9,10,11,12,13,14], threshold = 14)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], threshold = 50)",
        "longestAlternatingSubarray(nums = [2,7,3,5,10,3,5,2], threshold = 5)",
        "longestAlternatingSubarray(nums=[2,3,4,6,7,8,9], threshold=10)"
    ],
    "sample_203": [
        "minimumOperations('25')",
        "minimumOperations(num = \"05\")",
        "minimumOperations('24')",
        "minimumOperations(num = \"10\")",
        "minimumOperations('0025')",
        "minimumOperations(num = \"00125\")",
        "minimumOperations(num = \"76\")",
        "minimumOperations(num = \"70\")",
        "minimumOperations(num = \"2055\")",
        "minimumOperations(num='75')"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,2], [3,1], [4,2], [5,1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[4,4],[5,5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,1],[3,2],[4,2],[5,1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [3, 1], [2, 2], [4, 2], [5, 1]])",
        "colorTheArray(5, [[2, 1], [2, 2], [4, 1], [3, 2], [5, 1]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [2, 1, 3, 1, 2, 2])",
        "minimumIndex(nums = [2, 2, 2, 1, 1, 1])",
        "minimumIndex(nums = [1,2,2,3,2,1])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 4])",
        "minimumIndex(nums = [2, 2, 2, 2, 1, 1, 1])",
        "minimumIndex([1, 2, 2, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 2, 2, 2, 5, 1])",
        "minimumIndex(nums = [1, 1, 1, 2, 2, 2, 2])",
        "minimumIndex([3, 3, 4, 4, 4, 5, 5, 6, 6, 6])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [2, 5, 3, 7, 8], target = 2)",
        "maximumJumps(nums = [1, 5, 3, 4, 2, 6, 7, 8, 9], target = 2)",
        "maximumJumps(nums = [10,20,30,40,50,60,70,80], target = 5)",
        "maximumJumps(nums = [1,3,2,3,1,2], target = 1)",
        "maximumJumps(nums = [10, 3, 6, 7, 8, 5], target = 2)",
        "maximumJumps(nums = [4, 10, 11, 7, 9], target = 3)",
        "maximumJumps(nums = [1, 3, 2, 3, 4, 6, 7], target = 2)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100')"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a=1, b=0)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [3, 9, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [3, 1, 2, 4])",
        "findValueOfPartition(a = [3, 1, 4, 2])",
        "findValueOfPartition(a = [3, 7, 1, 6])",
        "findValueOfPartition(a = [1,2,3])",
        "findValueOfPartition(a=[3, 9, 1])",
        "findValueOfPartition(a = [1, 100])",
        "findValueOfPartition([2, 3, 1, 4])",
        "findValueOfPartition(a = [2, 8, 10, 5, 9])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [5, 1, 3, 5, 3])",
        "distinctDifferenceArray(nums = [5, 1, 3, 5, 3])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [5,1,3,3,7])",
        "distinctDifferenceArray(nums = [3, 1, 2, 2, 3])"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 2, 2, 3, 1])",
        "minimumIndex(nums = [1,2,3,2,1])",
        "minimumIndex(nums = [2, 2, 2, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 3])",
        "minimumIndex(nums = [3, 2, 1, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 1])",
        "minimumIndex(nums = [2,3,1,1,1,4])",
        "minimumIndex(nums = [2,2,2,1,1,1,3,3,3])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 1, 1])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3, 1, 1, 1, 1])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves=\"LLL\")",
        "furthestDistanceFromOrigin(moves=\"LRRLLL\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"abcd\")",
        "minimizedStringLength(s = \"abcabcbb\")",
        "minimizedStringLength(s = \"abcdabcd\")",
        "minimizedStringLength(s = \"mangosteen\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6], k = 3)",
        "checkArray(nums = [5,4,3,2,1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [10, 20, 30, 40, 50], k = 2)",
        "checkArray(nums = [5, 1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [2, 1, 1], k = 2)",
        "checkArray(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "checkArray(nums = [4, 5, 1, 2, 3], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [2, 3, 1])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [5, 4, 3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 0])",
        "maxIncreasingGroups(usageLimits=[1, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [2, 1, 2, 2])",
        "maxIncreasingGroups(usageLimits = [1, 3, 1, 2])",
        "maxIncreasingGroups(usageLimits = [4, 3, 2, 2, 1])"
    ],
    "sample_206": [
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(num = \"0011\")",
        "minimumOperations(\"2025\")",
        "minimumOperations(\"205\")",
        "minimumOperations(\"001\")",
        "minimumOperations(num = \"02500\")",
        "minimumOperations(num = '22575')",
        "minimumOperations(\"1111\")",
        "minimumOperations('12550')"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist([0, 1, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 1])",
        "doesValidArrayExist([0,1,2,3])",
        "doesValidArrayExist(derived = [1,0,2])"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"0011\")",
        "minimumCost(s = \"010101\")",
        "minimumCost(s = \"abca\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5])",
        "maxIncreasingGroups(usageLimits = [1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [1,2,3,4])",
        "maxIncreasingGroups([2, 2, 2])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3])",
        "maxIncreasingGroups(usageLimits = [2, 3, 5, 9])",
        "maxIncreasingGroups([5, 2, 7])"
    ],
    "sample_53": [
        "smallestString(s = 'baabc')",
        "smallestString(s = 'baabc')",
        "smallestString(s = 'baabc')",
        "smallestString(s = 'baabd')",
        "smallestString(s = 'baazc')",
        "smallestString(s = 'bzzc')",
        "smallestString(s = 'babc')",
        "smallestString(s = 'baaaz')",
        "smallestString('baabd')",
        "smallestString('baaac')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,3,5,7,9], x = 3)",
        "minAbsoluteDifference(nums = [4,2,1,7,8,1,2,8,1,0], x = 3)",
        "minAbsoluteDifference(nums = [2,5,7,10,12], x = 2)",
        "minAbsoluteDifference(nums = [3,5,7,11,13], x = 2)",
        "minAbsoluteDifference(nums = [1, 5, 2, 6, 3, 7, 4], x = 3)",
        "minAbsoluteDifference(nums = [4, 5, 1, 2, 7, 8], x = 3)",
        "minAbsoluteDifference(nums=[2,3,5,1,7], x=3)",
        "minAbsoluteDifference(nums = [4,5,2,8,7,6], x = 3)",
        "minAbsoluteDifference(nums = [1,5,8,2,3,4,9], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1,2,1],[2,3,2]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 2], [2, 3, 2]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 3, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1,3,2],[2,4,3],[3,5,4]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [1, 2, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 3], [2, 3, 1], [1, 4, 2]])",
        "maximizeTheProfit(N=3, offers=[[1,2,2],[2,3,2],[0,1,1]])",
        "maximizeTheProfit(N = 6, offers = [[1, 3, 1], [2, 5, 1], [3, 6, 1], [5, 6, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 2], [3, 5, 3], [1, 4, 1], [2, 5, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [1, 3, 1], [1, 5, 1], [1, 4, 1]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \",\")",
        "splitWordsBySeparator(a = [\"apple,orange\"], b = \",\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"p\")",
        "splitWordsBySeparator(a=[\"\", \"apple\"], b=\"p\")",
        "splitWordsBySeparator(a = [\"hello,world\", \"this,is,python\"], b = \",\")",
        "splitWordsBySeparator(a = [\"test\", \"word\"], b = \"word\")",
        "splitWordsBySeparator(a = [\"test\", \"hello\", \"world\"], b = \"\")",
        "splitWordsBySeparator(a= [\"a\", \"b\", \"c\"], b= \",\")",
        "splitWordsBySeparator(a = [\"ana\", \"banana\"], b = \"\")",
        "splitWordsBySeparator(a = [\"hello\", \"world\", \"python\", \"java\", \"csharp\"], b = \"o\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a = '5123010000000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome('even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s=\"even\")",
        "makeSmallestPalindrome(s = 'niven')",
        "makeSmallestPalindrome(s='nene')"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 4, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [2,2,3,3,3,4,4], k = 0)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4], k = 4)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,4,1,2,3,4,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,1,1,2,3,4,1,2,2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 4, 4, 4, 4, 5, 5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3,1,2,3,2,2,2,2,3,3,3,3], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 2], k = 2)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 5], k = 1)",
        "maximumBeauty(nums = [2,4,6,8], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 6, 8, 9], k = 2)",
        "maximumBeauty(nums = [2, 4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 5, 8], k = 1)",
        "maximumBeauty(nums = [2,5,4,9,1,7], k = 2)"
    ],
    "sample_163": [
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [55,9])",
        "maxSum(nums = [55,9])",
        "maxSum(nums=[55, 9])",
        "maxSum(nums = [50, 2, 1, 9])",
        "maxSum(nums = [54,546,548,60])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [55, 33, 44])",
        "maxSum([18, 43, 36, 13, 7])"
    ],
    "sample_151": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'gnirts')",
        "finalString(s = 'ingsrt')",
        "finalString(s = 'singt')",
        "finalString(s = \"tring\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000000')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber('001')",
        "maximumOddBinaryNumber('01')",
        "maximumOddBinaryNumber(s=\"10\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words=['easy-problem'], separator='-')",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words=[\"easy.problem\"], separator=\".\")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 4, 1, 2, 3, 4], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 1, 2, 1, 2, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A=[1, 2, 3, 4, 1, 2, 3, 4], K=1)",
        "longestEqualSubarray(A = [1,2,2,1,3,3,3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 1, 1, 2, 1, 1], K = 1)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,3,2,2], K = 2)",
        "longestEqualSubarray(A = [1,2,1,2,1,2,3,4], K = 3)",
        "longestEqualSubarray(A=[1,2,1,1,1,2,1], K=2)",
        "longestEqualSubarray(A=[1, 2, 3, 1, 2, 3, 1, 1, 1, 1, 2, 3, 1, 2, 3, 1, 2, 3], K=2)",
        "longestEqualSubarray(A = [2, 3, 4, 2, 1, 2, 3, 2, 2, 4], K = 3)"
    ],
    "sample_230": [
        "countWays(nums = [3, 2, 1])",
        "countWays([1, 2, 3])",
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [3,2,1])",
        "countWays(nums = [2, 2, 1])",
        "countWays(nums=[3,2,1])",
        "countWays(nums=[1, 2, 3, 4])",
        "countWays(nums = [2, 2, 2, 2])",
        "countWays(nums = [2,3,1])",
        "countWays([5, 5, 4, 4])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 3, 5, 7, 9, 11], k=2)",
        "sumIndicesWithKSetBits(nums=[4, 2, 1, 3, 5], k=2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 3, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 7, 8, 1, 9, 1], k = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '512301000000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"test\"], s = \"tiat\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"baa\")",
        "isAcronym(words=[\"Hello\", \"World\"], s=\"HW\")",
        "isAcronym(words = [\"Hello\", \"world\"], s = \"HW\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"this\", \"is\", \"an\", \"example\"], s = \"tie\")",
        "isAcronym(words = [\"my\", \"name\", \"is\", \"joe\"], s = \"mnsj\")",
        "isAcronym(words=[\"doctor\", \"house\"], s=\"dh\")",
        "isAcronym(words = [\"S\", \"L\", \"A\", \"M\"], s = \"SM\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,1,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [2, 1, 3, 1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1,2,2,1,3,1,4,2])",
        "countCompleteSubarrays(nums = [2,3,1,2,3,2,3,1,2,3])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n=1, target=1)"
    ],
    "sample_147": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'tinsr')",
        "finalString(s = 'gntsr')",
        "finalString(s = 'ingstnr')"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'nven')"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [3, 4, 3], [2, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 3], [3, 4, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 4], [1, 3, 5], [2, 4, 6]])",
        "maximizeTheProfit(n = 10, offers = [[1,2,5],[2,5,6],[5,7,10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 4], [0, 1, 1], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 7], [1, 3, 5], [4, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 2, 4], [2, 4, 6], [3, 4, 7]])",
        "maximizeTheProfit(n=6, offers=[[1,2,5], [2,4,3], [3,6,7]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,5],[0,3,4],[1,2,6],[2,4,7],[3,5,8]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [3, 4, 4], [1, 2, 5], [2, 3, 6], [3, 4, 1]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [10,20,30,40,50], target = 10)",
        "maximumJumps(nums = [10,20,30,40,50], target = 10)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7], target = 1)",
        "maximumJumps(nums = [10,30,20,40,50], target = 5)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [10, 20, 15, 25, 18], target = 5)",
        "maximumJumps(nums = [10, 20, 15, 25, 18], target = 5)",
        "maximumJumps(nums = [10,20,30,40,25], target = 20)",
        "maximumJumps(nums = [1, 10000], target = 9999)",
        "maximumJumps(nums = [2, 1, 0], target = 1)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,0,1,0,1,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s='000')",
        "maximumOddBinaryNumber(s = '00110')",
        "maximumOddBinaryNumber(s='01')"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n=3, k=5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 2)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 14, num2 = 1)",
        "makeTheIntegerZero(num1 = 21, num2 = 3)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=5, k=1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 1, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [4,5,1,2,3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 3, 1, 1], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 3, 2], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 2, 1, 3, 3, 2], modulo = 3, k = 2)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 2], k = 2)",
        "maximumBeauty(nums = [2, 4, 6], k = 1)",
        "maximumBeauty(nums=[1, 3, 4, 2], k=2)",
        "maximumBeauty(nums=[2, 3, 5, 7, 9], k=2)"
    ],
    "sample_148": [
        "finalString(s = 'iponter')",
        "finalString(s = 'iponter')",
        "finalString(s = 'itner')",
        "finalString(s = 'pinter')",
        "finalString(s = 'nitrop')",
        "finalString(s = 'itnerap')",
        "finalString(s = 'rnetop')",
        "finalString(s = \"inpeter\")",
        "finalString(s = 'inmter')",
        "finalString(s = 'iitnrepor')"
    ],
    "sample_231": [
        "countWays([0, 1, 2])",
        "countWays([1, 0, 2])",
        "countWays(nums = [0, 2, 1])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [2, 0, 1, 3])",
        "countWays([0,2,1])",
        "countWays([0,1,2,3])",
        "countWays(nums = [2, 3, 1, 0])",
        "countWays([3,2,0,1])",
        "countWays([1, 2, 0, 4, 5])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [25, 50, 75])",
        "countBeautifulPairs(nums = [21,22,23])",
        "countBeautifulPairs(nums = [12, 21, 23])",
        "countBeautifulPairs([12, 24, 36])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [25, 50, 100])",
        "countBeautifulPairs(nums=[12, 51, 2])",
        "countBeautifulPairs(nums = [12, 13, 24, 35, 46])",
        "countBeautifulPairs(nums = [12, 25, 33, 41, 56])",
        "countBeautifulPairs(nums = [25,40,5,16,12,15])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 9, num2 = 2)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"evening\")",
        "makeSmallestPalindrome(s = \"noven\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"For\", \"Your\", \"Information\"], s = \"FYI\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"test\"], s = \"tiat\")",
        "isAcronym(words = [\"Banana\", \"Orange\", \"Apple\"], s = \"BOA\")",
        "isAcronym(words = [\"from\", \"the\", \"other\", \"side\"], s = \"ftos\")",
        "isAcronym(words = [\"major\", \"league\", \"hacking\"], s = \"MLH\")",
        "isAcronym(words = [\"word\", \"of\", \"the\", \"day\"], s = \"wotd\")",
        "isAcronym(words = [\"m\", \"b\", \"n\"], s = \"mbn\")",
        "isAcronym(words = [\"must\", \"keep\"], s = \"mk\")",
        "isAcronym(words = [\"My\", \"String\"], s = \"MS\")",
        "isAcronym(words = [\"make\", \"perfect\", \"algorithm\"], s = \"mpea\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,1,0,1,0])",
        "numberOfGoodSubarraySplits([0,1,0,0,0])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8, 10, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 1, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,1,5,2,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 3, 5, 6, 7], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n=3, k=4)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [3, 2, 1, 5])",
        "countWays([3, 2, 1, 5, 4])",
        "countWays(nums = [3, 2, 1, 5, 6, 4])",
        "countWays([1, 2, 4, 5, 7])",
        "countWays([2, 5, 3, 7, 1])",
        "countWays(nums = [1, 0, 4, 2])",
        "countWays([1, 5, 3, 7, 2, 6])"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"0101\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"baa\")",
        "minimumCost(s = \"aaabb\")",
        "minimumCost(s = \"010111\")",
        "minimumCost(s = \"aaabbbaa\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"L__R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_\")",
        "furthestDistanceFromOrigin(moves = \"LR__\")",
        "furthestDistanceFromOrigin(moves = \"L_R\")",
        "furthestDistanceFromOrigin(moves = \"__LR\")",
        "furthestDistanceFromOrigin(moves = \"L__R_\")",
        "furthestDistanceFromOrigin(moves = \"__L_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_LR\")",
        "furthestDistanceFromOrigin(moves = \"_L__R_\")",
        "furthestDistanceFromOrigin('LR__')"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=1)",
        "distanceTraveled(mainTank=1, additionalTank=1)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])",
        "countCompleteSubarrays([1, 2, 3, 2, 1])",
        "countCompleteSubarrays([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays([2, 4, 2, 3, 4, 5, 2, 4, 3, 5])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [2,3,4,5,6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,1,2,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [4,5,6,7,8], threshold = 7)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 3, 1], threshold = 5)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1,3],[2,4],[3,6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 7]])",
        "numberOfPoints(nums = [[1, 3], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [1, 2]])",
        "numberOfPoints([[1, 3], [3, 5], [7, 9]])",
        "numberOfPoints(nums = [[1,3],[2,5],[3,6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6], [7,8]])",
        "numberOfPoints(nums = [[1,3], [4,6], [7,9]])",
        "numberOfPoints(nums = [[2,5],[3,7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5], [1, 2], [3, 4], [2, 3], [1, 5]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [21, 22, 23])",
        "countBeautifulPairs(nums = [12, 21, 23])",
        "countBeautifulPairs(nums = [25, 50, 75, 100])",
        "countBeautifulPairs(nums = [12, 24, 36, 48])",
        "countBeautifulPairs(nums = [12, 22, 32])",
        "countBeautifulPairs(nums = [12, 21, 33])",
        "countBeautifulPairs(nums = [52, 12, 15])",
        "countBeautifulPairs(nums = [23, 12, 30])",
        "countBeautifulPairs(nums = [12, 35, 61])",
        "countBeautifulPairs([12, 100, 23, 44, 56])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 10)",
        "longestAlternatingSubarray(nums=[1,2,3,4,5,6], t=6)",
        "longestAlternatingSubarray(nums=[1,2,3,5], t=5)",
        "longestAlternatingSubarray(nums = [1,3,5,7,9], t = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 2], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], t = 15)",
        "longestAlternatingSubarray(nums = [2,3,5,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 7, 11], t = 5)",
        "longestAlternatingSubarray(nums = [2,3,5,4,10,8,7,6], t = 10)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abcabc\")",
        "minimumCost(s = \"aabab\")",
        "minimumCost(s = \"babaa\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDA\")",
        "minLength(s = \"ABCDECDAB\")",
        "minLength(s = \"ABCDDCBA\")",
        "minLength(s = \"AABBCCDDEE\")",
        "minLength(s = \"ABCDACBCDAB\")",
        "minLength(s = \"ABCDAABBCDCD\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 6, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [2, 1, 3, 1, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [4, 2, 2, 2, 4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,1,3,4,2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 5, 7, 9], modulo = 10, k = 3)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2], nums2 = [2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2], nums2 = [2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2], nums2 = [1, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2], nums2 = [2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 3], nums2 = [2, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [2, 2, 2, 2, 2], nums2 = [2, 2, 2, 2, 2])",
        "maxNonDecreasingLength(nums1=[1, 3, 2, 1], nums2=[2, 1, 3, 2])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n=1, target=1)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 3])",
        "findValueOfPartition(nums = [1, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [3,1])",
        "findValueOfPartition(nums = [1,3,7,8])",
        "findValueOfPartition(nums = [1,3,6,10,15])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"L__LR_\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"L_LRR_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRR_LL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR__\")",
        "furthestDistanceFromOrigin(moves = \"L_RRR\")",
        "furthestDistanceFromOrigin(moves = \"L__RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LR_RLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLRRRRR_\")",
        "furthestDistanceFromOrigin(moves = 'LR__LR__')"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 3])",
        "minimumIndex(nums = [2, 1, 3, 1, 2, 2])",
        "minimumIndex(nums = [1,2,2,3,2,2,2,4,3])",
        "minimumIndex(nums = [1,2,2,3,4,4,4,5])",
        "minimumIndex(nums = [3,3,4,4,5,5,5])",
        "minimumIndex(nums = [2, 1, 2, 3, 2, 4, 2, 5, 2, 3])",
        "minimumIndex(nums = [2, 3, 1, 2, 1, 3])",
        "minimumIndex([1,2,3,1,2,3,1,2,3,1])",
        "minimumIndex(nums = [1,2,3,2,2,2,1,4,5,6,2,2])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation(nums = [2,3,1,4,5])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [4,3,2,1,5])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n=3, k=3)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n=3, k=4)",
        "minimumSum(n=1, k=3)"
    ]
}