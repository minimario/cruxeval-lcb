{
    "sample_178": [
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])",
        "maximizeTheProfit(n = 2, offers = [[0, 1, 10], [1, 2, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 10], [2, 4, 11]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 3], [4, 5, 2], [7, 8, 4]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 5], [0, 1, 5], [1, 2, 2]])",
        "maximizeTheProfit(n = 5, offers = [(1, 2, 2), (2, 4, 3), (2, 3, 2)])",
        "maximizeTheProfit(n = 4, offers = [(0, 2, 3), (1, 3, 10), (2, 2, 6)])",
        "maximizeTheProfit(n = 2, offers = [[0, 2, 4], [2, 1, 6], [1, 2, 7]])",
        "maximizeTheProfit(n = 7, offers = [[1, 3, 2], [2, 4, 6], [3, 6, 5], [4, 6, 7], [5, 6, 8], [6, 7, 10], [7, 8, 15]])",
        "maximizeTheProfit(n = 5, offers = [[1, 1, 1], [2, 1, 3], [2, 2, 4], [2, 4, 5], [4, 5, 8], [5, 5, 9], [5, 6, 12]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 16)",
        "canSplitArray(nums = [7,2,5,10,8], m = 16)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 1)",
        "canSplitArray(nums = [7,2,5,10,8], m = 16)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1,2,3,4], m = 5)",
        "canSplitArray(nums = [7,2,5,10,8], m = 15)",
        "canSplitArray(nums = [3, 2, 1, 5, 8, 7], m = 10)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 0, 1, 1, 1], k = 1)",
        "checkArray(nums = [1, 2, 3], k = 1)",
        "checkArray(nums = [3, 2, 1, 5, 4], k = 2)",
        "checkArray(nums = [10, 15, 3, 7], k = 3)",
        "checkArray(nums = [2, 5, 1, 3], k = 3)",
        "checkArray(nums = [0, 0, 0, 0, 1], k = 4)",
        "checkArray(nums = [2, 3, 4, 7], k = 2)",
        "checkArray(nums = [2, 3, 3, 4, 5], k = 3)",
        "checkArray(nums = [0, 0, 1, 0, 0, 0, 0, 1], k = 4)",
        "checkArray(nums = [10, 12, 14, 11, 12], k = 2)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 0)",
        "maximumBeauty(nums = [1, 2, 3, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 5], k = 3)",
        "maximumBeauty(nums = [1, 1, 2, 2, 3, 4, 4, 5], k = 3)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [\"\", \"a\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a.b\", \"\", \"c.d\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"aa,bb,cc\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"a.b\", \".\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"my dog has fleas\", \"and my cat has fleas too\"], separator = \" \")",
        "splitWordsBySeparator(words = [\" \", \"a\", \"b\", \" c\", \" \", \"c\"], separator = \" \")"
    ],
    "sample_226": [
        "countWays(nums = [1, 1, 2])",
        "countWays(nums = [1, 2, 3, 3])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [1, 3, 4])",
        "countWays(nums = [1, 3, 2, 4, 2])",
        "countWays(nums = [2,3,3])",
        "countWays(nums = [5, 5, 7, 9])",
        "countWays(nums = [1, 2, 3, 1, 2, 1])",
        "countWays(nums = [5, 6, 2, 7, 8])",
        "countWays(nums = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1, 3, 5])",
        "minimumIndex(nums = [1, 1, 1])",
        "minimumIndex(nums = [1, 3, 5, 2, 2, 2, 4, 2])",
        "minimumIndex(nums = [0, 1, 1, 1, 2, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 3, 5])",
        "minimumIndex(nums = [3, 3, 1, 2, 4, 2])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8])",
        "minimumIndex(nums = [0,0,0,2,0,0])",
        "minimumIndex(nums = [1,2,1,2,3,3,3,4,3,2,1])",
        "minimumIndex(nums = [3,5,4,1,1,0])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [0, 2]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [2, 3]])",
        "numberOfPoints(nums = [[1,1],[2,2],[3,3]])",
        "numberOfPoints(nums = [[1,4], [3,5]])",
        "numberOfPoints(nums = [[1,5],[2,3],[3,5]])",
        "numberOfPoints(nums = [[1, 2], [4, 5], [7, 10], [10, 11], [12, 20]])",
        "numberOfPoints(nums = [[1, 1], [1, 1], [2, 2], [3, 3]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8], [2, 6], [3, 5]])",
        "numberOfPoints(nums = [[0, 2], [2, 8], [3, 5]])",
        "numberOfPoints(nums = [[5, 10], [20, 30], [10, 20], [10, 15]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,3,5,2,4])",
        "semiOrderedPermutation(nums = [1,5,2,4,3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [4,1,2,3])",
        "semiOrderedPermutation(nums = [5,1,3,4,2])",
        "semiOrderedPermutation(nums = [1,5,6,4,3,2])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 0, target = 0)",
        "minimumPossibleSum(n = 5, target = 2)",
        "minimumPossibleSum(n = 5, target = 4)"
    ],
    "sample_118": [
        "minimumIndex(nums = [2, 3, 1, 2, 4, 2])",
        "minimumIndex(nums = [4, 3, 2, 1])",
        "minimumIndex(nums = [0, 1, 2, 0, 1, 2])",
        "minimumIndex(nums = [-1, 1, 0, 1, 0])",
        "minimumIndex(nums = [1, 3, 5, 2, 4, 5, 7, 6])",
        "minimumIndex(nums = [8, 6, 1, 4, 2])",
        "minimumIndex(nums = [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 4, 5])",
        "minimumIndex(nums = [-8, -6, 1, 2, 3, 5, 6, 7, 8, 12])",
        "minimumIndex(nums = [1, 3, 5, 2, 3, 5, 4, 3, 5, 2, 3, 4, 5, 3, 5, 4, 3, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2,"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 1, k = 4)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [6, 9]])",
        "numberOfPoints(nums = [[1, 3], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [5, 10], [12, 15]])",
        "numberOfPoints(nums = [[1, 3], [1, 5], [2, 7], [3, 5]])",
        "numberOfPoints(nums = [[0, 2], [1, 3], [0, 5]])",
        "numberOfPoints(nums = [[1,2], [3, 5], [4, 8]])",
        "numberOfPoints(nums = [[1, 5], [1, 10], [1, 50], [1, 100]])",
        "numberOfPoints(nums = [[2, 3], [1, 10], [1, 10], [4, 6], [8, 8], [2, 3]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 2)",
        "maximumJumps(nums = [100, 4, 200, 1, 3], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 100)",
        "maximumJumps(nums = [11, 22, 7, 7, 7, 7, 7, 7, 7, 22, 13], target = 5)",
        "maximumJumps(nums = [-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "maximumJumps(nums = [100, 200, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,",
        "maximumJumps(nums = [0, 11, 22, 33, 44, 55], target = 10)",
        "maximumJumps(nums = [-2,-1,-1,0,2,1,1,2,2,3,2,3,3,4,3,4,5,2,3,4,5,6,2,5,6,7,3,4,5,6,7,8,4,5,6,7,8,9,5,6,7,8,9,10], target = 3)"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 4, k = 1)",
        "minimumSum(n = 4, k = 1)"
    ],
    "sample_154": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1,1,1], m = 2)",
        "canSplitArray(nums = [1,2,3,4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1,1], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 20)",
        "canSplitArray(nums = [1,2,3], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 10)",
        "canSplitArray(nums = [1,1,1,2,2,2], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 2)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 3, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [4, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 3, 5], [3, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 3, 4], [3, 1, 1]])",
        "maximizeTheProfit(n = 1, offers = [[0, 0, 0]])",
        "maximizeTheProfit(n = 10, offers = [[2, 4, 6], [3, 6, 5], [8, 10, 10]])",
        "maximizeTheProfit(n = 4, offers = [[0,2,5],[1,3,2],[2,0,0]])",
        "maximizeTheProfit(n = 6, offers = [\n    [0, 1, 1],\n    [1, 3, 1],\n    [2, 3, 2],\n    [2, 4, 1],\n    [4, 5, 2],\n    [5, 6, 1],\n])",
        "maximizeTheProfit(n = 5, offers = [[3, 0, 1], [2, 1, 1], [3, 3, 2], [2, 4, 5], [1, 2, 6], [2, 5, 7]])",
        "maximizeTheProfit(n = 10, offers = [[1, 1, 10], [2, 2, 20], [3, 3, 30], [4, 5, 25], [5, 6, 50], [6, 8, 40], [7, 8, 30], [9, 9, 10], [10, 10, 20], [11, 11, 5]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [12, 1, 61, 5, 9, 2], k = 2)",
        "checkArray(nums = [2, 3, 1, 1, 4], k = 2)",
        "checkArray(nums = [1, 0, 1, 1], k = 1)",
        "checkArray(nums = [1, 4, 1, 2, 2], k = 2)",
        "checkArray(nums = [0, 0, 2, 0], k = 1)",
        "checkArray(nums = [3, 3, 7, 1, 2, 3], k = 3)",
        "checkArray(nums = [2, 3, 4, 0], k = 1)",
        "checkArray(nums = [0, -2, 3, -1, 1], k = 3)",
        "checkArray(nums = [5, 2, 2, 1, 0, -3, -5, -1, 4, 6, -3, 2, 2, 1, 5, 5], k = 5)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 0)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 1, 4, 2], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 1, 4, 2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1,1,2,2,3,3], k = 2)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 0], [1, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]])",
        "colorTheArray(n = 1, queries = [\n    [0, 0],\n    [0, 0]\n])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4, 1], [3, 0], [0, 1], [2, 2], [3, 0], [4,",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 4], [4, 5], [1, 3], [2, 1]])"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsncd\")",
        "smallestString(s = 'kkkddsbncd')",
        "smallestString(s = 'kddsnacd')",
        "smallestString(s = \"kddscbd\")",
        "smallestString(s = 'zzzzzzzzz')",
        "smallestString(s = \"aaaaaab\")",
        "smallestString(s = \"kdzbdc\")",
        "smallestString(s = \"knzsbncw\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3], threshold = 100)",
        "longestAlternatingSubarray(nums = [2,2,2,2,2], threshold = 1)",
        "longestAlternatingSubarray(nums = [5,1,3,4,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [3, 1, 3, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9,10,11,12,13,14,15], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,2,4,6], threshold = 3)",
        "longestAlternatingSubarray(nums = [100, 101, 200, 201, 202], threshold = 200)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 6, 9, 10, 13, 15], threshold = 10)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 3, 2, 2, 4, 3, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 10, 2, 9], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 100)",
        "longestAlternatingSubarray(nums = [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "longestAlternatingSubarray(nums = [4, 2, 2, 3, 3, 4, 4, 4, 4, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 5, 6, 4, 1, 2, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [12, 4, 6, 8, 10, 14, 15, 16, 20], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,1,2,3,2,4,2,1,2,3,3,4,1,2,3,4,2,3,4,3,4,4,1], threshold = 1)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 3, 1, 2, 1])",
        "distinctDifferenceArray(nums = [0, 1, 3, 4, 5])",
        "distinctDifferenceArray(nums = [5, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [4, 3, 1, 2, 1])",
        "distinctDifferenceArray(nums = [2, 3, 1, 0, 2, 4, 3])",
        "distinctDifferenceArray(nums = [4, 8, 2, 2, 3])"
    ],
    "sample_22": [
        "minLength(s = \"ABCB\")",
        "minLength(s = \"ABCB\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"AABBCD\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"AABCC\")",
        "minLength(s = \"ABCA\")",
        "minLength(s = \"CAB\")",
        "minLength(s = \"ABCDCDABCDC\")",
        "minLength(s = \"ACBDCBACCBDC\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"110\")",
        "minimumCost(s = \"pba\")",
        "minimumCost(s = \"AAC\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 2)",
        "canSplitArray(nums = [1, 2, 3], m = 5)",
        "canSplitArray(nums = [7, 1, 5, 4, 3], m = 6)",
        "canSplitArray(nums = [7,2,5,10,8], m = 22)",
        "canSplitArray(nums = [1, 1], m = 1)",
        "canSplitArray(nums = [3, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 1, 2, 1, 2], m = 3)",
        "canSplitArray(nums = [3, 2, 5, 1, 7, 9], m = 12)",
        "canSplitArray(nums = [7, 11, 5, 1, 9, 2], m = 10)",
        "canSplitArray(nums = [3, 1, 3, 2, 5, 2, 1, 2, 2], m = 6)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 2, 1])",
        "doesValidArrayExist(derived = [2, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [8, 7, 2, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1])"
    ],
    "sample_109": [
        "checkArray(nums = [2, 1, 2], k = 2)",
        "checkArray(nums = [2,5,1,3,4], k = 2)",
        "checkArray(nums = [3,1,2,4,3], k = 2)",
        "checkArray(nums = [1,2,3,1], k = 1)",
        "checkArray(nums = [4, 2, 3, 1, 4], k = 2)",
        "checkArray(nums = [3, 1, 2, 1], k = 2)",
        "checkArray(nums = [2, 2, 2, 2], k = 2)",
        "checkArray(nums = [2,5,1,3,4,6], k = 3)",
        "checkArray(nums = [1,3,2,6,7,4,8,5,9], k = 4)",
        "checkArray(nums = [1, 1, 2, 3, 3, 3, 4, 5], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 3, 2, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 3, 2, 1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 41, 42], target = 43)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 6, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 1, 2, 1, 3, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 12, 8, 7, 3, 5], target = 8)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [0,1,0], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0,1,2], k = 1)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 0)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [2,1,3,4,5], k = 1)",
        "maximumBeauty(nums = [4, 3, 2, 6], k = 2)",
        "maximumBeauty(nums = [5, 7, 8, 8], k = 1)"
    ],
    "sample_205": [
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"110\")",
        "minimumOperations(num = \"00255075\")",
        "minimumOperations(num = \"255255255\")",
        "minimumOperations(num = \"1010101\")",
        "minimumOperations(num = \"123456789\")",
        "minimumOperations(num = \"02025\")",
        "minimumOperations(num = \"50505050\")",
        "minimumOperations(num = \"0011001101\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"000\")",
        "minimumOperations(s = \"00110\")",
        "minimumOperations(s = \"00111\")",
        "minimumOperations(s = \"005075\")",
        "minimumOperations(s = \"000110\")",
        "minimumOperations(s = \"000010\")",
        "minimumOperations(s = \"0101010101\")",
        "minimumOperations(s = '0000000000')",
        "minimumOperations(s = \"2222\")",
        "minimumOperations(s = \"0001110010110011101\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 5, 4, 2])",
        "semiOrderedPermutation(nums = [1,2,4,3,5])",
        "semiOrderedPermutation(nums = [1, 1, 2, 2])",
        "semiOrderedPermutation(nums = [2, 5, 3, 1, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 1, 2, 3, 4, 4])",
        "semiOrderedPermutation(nums = [1, 1, 3, 2, 2, 4, 5, 6, 7, 4])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRRAL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLAR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRAL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRARRA\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"Adam\", \"Loves\", \"Python\"], s = \"ALP\")",
        "isAcronym(words = [\"generate\", \"random\", \"test\", \"cases\"], s = \"GRTC\")",
        "isAcronym(words = [\"Internationalization\", \"International\", \"Intern\"], s = \"I18N\")",
        "isAcronym(words = [\"Banana\", \"Apple\", \"Orange\", \"Orange\"], s = \"BAO\")",
        "isAcronym(words = [\"Big\", \"Green\", \"Eggs\", \"And\", \"Ham\"], s = \"BG EA\")",
        "isAcronym(words = ['I', 'am', 'learning', 'Python'], s = 'IALP')",
        "isAcronym(words = [\"pro\", \"gram\", \"mar\"], s = \"PGRM\")",
        "isAcronym(words = [\"batman\", \"stark\", \"robin\"], s = \"bstra\")",
        "isAcronym(words = [\"zebra\", \"octopus\", \"ntas\", \"meerkat\"], s = \"zoo\")",
        "isAcronym(words = [\"pocket\", \"protector\", \"punctuation\", \"permeable\", \"pamphlet\"], s = \"p\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,2,3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 6], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,4,0,7,2,1,3,1,2,1,1,2,1], modulo = 5, k = 2)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [12, 34, 67, 98])",
        "countBeautifulPairs(nums = [2, 4, 8, 6])",
        "countBeautifulPairs(nums = [1, 3, 5, 7, 9, 11])",
        "countBeautifulPairs(nums = [123, 123, 123, 123])",
        "countBeautifulPairs(nums = [11, 12, 14, 15, 16, 17])",
        "countBeautifulPairs(nums = [25, 14, 10, 8])",
        "countBeautifulPairs(nums = [1,2,4,6,12,18,24])",
        "countBeautifulPairs(nums = [32, 20, 54, 38])",
        "countBeautifulPairs(nums = [20, 33, 49, 91, 36, 51])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [100,-23,-23,404,100,23,23,23,3,404], target = 100)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 100)",
        "maximumJumps(nums = [10, 13, 12, 14, 15], target = 2)",
        "maximumJumps(nums = [-1,-1,-1,-1,-1], target = 2)",
        "maximumJumps(nums = [1,1,1,1,1], target = -1)",
        "maximumJumps(nums = [5,1,3,4,2], target = -1)",
        "maximumJumps(nums = [10, 10, 10, 10], target = 0)",
        "maximumJumps(nums = [1,-1,-2,4,-7,2,1,-7,-4,-2,4,1,3,-4,4,-7,2,-1,1,-1,4,-5,4,-4,2,-7,4,-1,5,-7,-1,-4,2,1,-6,-6,-1,2,-2,4,6,-3,-4,-5,-1,-5,-3,-4,-2,1,-1,-2,-3,5,-3,-3,-1,5,-2,-4,4,-1,1,-1,-5,4,-1,6,2,-4,2,-1,-3,-1,-5,-1,-3,-6,-4,1,-1,-5,-3,-7,-2,3,-6,-2,-4,-2,-4,4,-7,-2,-1,4,-6,-4,-1,2,-4,-2,-2,-7,-7,3,-6,-6,-2,2,-7,1,2,-5,1,-1,4,-5,-1,-4,2,-4,-1,-6,4,1,5,-2,-4,-1,-3,-1,-4,-1,2,1,-3,-2,-1,-6,-5,-2,4,5,-7,1,-4,-6,1,-4,1,-7,1,-7,1,-1,3,-4,-4,-4,2,-7,-1,-6,-1,-6,-3,-5,-3,4,-2,-4,1,-6,-7,-5,-2,-4,1,1,1,-1,-4,1,-1,-2,-7,-5,-4,-4,-5,-7,1,-5,-7,1,-6,-1,-4,-3,-4,1,-2,-1,-1,-5,-6,2,1,4,-1,-2,-4,-4,1,-7,1,-6,-5,-4,-1,-3,-7,1,1,-3,-5,-2,-4,-1,-1,-4,-4,1,-7,1,-6,-5,-4,-1,-3,-7,1,1,-3,-5,-2,-4,-1,-1,-4,-4,1,-7,1,-6,-5,-4,-1,-3,-7,1,1,-3,-5,-2,-4,-1,-1,-4,-4,1,-7,1,-6,-5,-4,-1,-"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [2, 4, 12, 21, 34])",
        "countBeautifulPairs(nums = [12, 34, 18, 9, 78])",
        "countBeautifulPairs(nums = [12, 26, 20, 30, 44, 16])",
        "countBeautifulPairs(nums = [2, 4, 1, 1, 2, 2, 3, 1, 1, 5])",
        "countBeautifulPairs(nums = [32, 56, 19, 48, 21, 28])",
        "countBeautifulPairs(nums = [12, 34, 45, 56, 12, 345, 234, 2345, 34523, 3452345, 3453, 234523, 34523452345])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABABAB\")",
        "minLength(s = \"CDABAB\")",
        "minLength(s = \"ABDCD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"AAABCDCD\")",
        "minLength(s = \"ACBACD\")",
        "minLength(s = \"ABCBABAB\")",
        "minLength(s = \"ABCDAABCD\")",
        "minLength(s = \"ADCBC\")"
    ],
    "sample_150": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = 'ring')",
        "finalString(s = 'ritsng')",
        "finalString(s = \"rtsng\")",
        "finalString(s = 'rtsiing')",
        "finalString(s = 'it is string')",
        "finalString(s = \"rtsigni\")",
        "finalString(s = 'its a game')"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "doesValidArrayExist(derived = [0,0,0,0,0])",
        "doesValidArrayExist(derived = [1, 3, 2])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 3, 2, 4])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 1, 0, 0, 1, 1])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 5, 5, 10])",
        "findValueOfPartition(nums = [-1, 5, 10, 25])",
        "findValueOfPartition(nums = [4, 2, 1, 3])",
        "findValueOfPartition(nums = [2, 1, 1, 1])",
        "findValueOfPartition(nums = [2, 1, 10])",
        "findValueOfPartition(nums = [1, 5, 1, 3, 4, 2, 3])",
        "findValueOfPartition(nums = [-78, 33, -42, 86])"
    ],
    "sample_7": [
        "colorTheArray(n = 2, queries = [[0, 1], [1, 0]])",
        "colorTheArray(n = 2, queries = [[0, 0], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [1, 3]])",
        "colorTheArray(n = 2, queries = [[1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [1, 3]])",
        "colorTheArray(n = 3, queries = [[0, 0], [2, 1], [1, 0]])",
        "colorTheArray(n = 1, queries = [[0, 1], [0, 0], [0, 0], [0, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 1], [2, 2], [5, 5]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,1],[1,0],[0,0]])",
        "colorTheArray(n = 3, queries = [[0,0],[1,1],[2,2],[1,2]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 3, target = 15)",
        "minimumPossibleSum(n = 10, target = 100)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 4, target = 24)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 1, k = 2)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 3, 2, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 2, 1], target = 4)"
    ],
    "sample_152": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 11)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "canSplitArray(nums = [1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [3, 2, 1], m = 2)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [3, 2, 5, 6], m = 10)",
        "canSplitArray(nums = [1,2,4,3,1], m = 3)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 5, 1, 3, 4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,1,2,2,3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,1,2,1,2,1,2,1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 0, 1, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 3, 4], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,4,1,2,7], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,4,1,2,7,1,2,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3, 2], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 4, 2, 7, 2, 0], m = 7, k = 3)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 5)",
        "longestAlternatingSubarray(nums = [2,3,2,2,4,3], t = 1)",
        "longestAlternatingSubarray(nums = [2,1,4,3,6,7], t = 3)",
        "longestAlternatingSubarray(nums = [5,6,3,4,2,3,6,4], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,5,6,4], t = 3)",
        "longestAlternatingSubarray(nums = [0, 1, 1, 0, 1, 0], t = 2)",
        "longestAlternatingSubarray(nums = [2,1,4,3,6,7,8,5], t = 5)",
        "longestAlternatingSubarray(nums = [1,0,0,1,1,1,0,0,1,1], t = 2)",
        "longestAlternatingSubarray(nums = [2,2,4,10], t = 5)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = \"512300001\")",
        "removeTrailingZeros(num = '512300010')",
        "removeTrailingZeros(num = '512300010')",
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = \"5123000010\")",
        "removeTrailingZeros(num = '5123000100')",
        "removeTrailingZeros(num = '5012300001')",
        "removeTrailingZeros(num = \"512300000000001\")",
        "removeTrailingZeros(num = '0005123010000')"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 9, b = 3)",
        "makeTheIntegerZero(a = 15, b = 5)",
        "makeTheIntegerZero(a = 12, b = 4)",
        "makeTheIntegerZero(a = 13, b = 5)",
        "makeTheIntegerZero(a = 10, b = 7)",
        "makeTheIntegerZero(a = 100, b = 50)",
        "makeTheIntegerZero(a = 50, b = 10)",
        "makeTheIntegerZero(a = 30, b = 15)",
        "makeTheIntegerZero(a=9, b=5)",
        "makeTheIntegerZero(a = 33, b = 99)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 5, 11, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [1, 1], m = 1)",
        "canSplitArray(nums = [7,2,5,10,8], m = 20)",
        "canSplitArray(nums = [1,2,3], m = 1)",
        "canSplitArray(nums = [1, 5, 2, 11, 5], m = 10)",
        "canSplitArray(nums
        "canSplitArray(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], m = 5)",
        "canSplitArray(nums = [2,3,3], m = 2)"
    ],
    "sample_161": [
        "maxSum(nums = [-1, -1, -1])",
        "maxSum(nums = [0, 2, 7, 0])",
        "maxSum(nums = [123, 123, 456, 456])",
        "maxSum(nums = [1, 7, 2, 3, 5])",
        "maxSum(nums = [123, 456])",
        "maxSum(nums = [21, 4, 1, 3])",
        "maxSum(nums = [12, 10, 8, 5])",
        "maxSum(nums = [3, 7, 1, 9, 2, 5, 7])",
        "maxSum(nums = [12, 12, 12, 20, 20, 12])",
        "maxSum(nums = [-44, 37, -1, 0, -44, 35, -44, -34, 42, -14, 53, -3, -12, 52, -1, -1, 37, -3, 43, -38, 41, -40, 4, -34, 42, -38, -43, 33, -27, -38, -2, 41, -16, 1, -1, 28, -43, 43, -38, 21, -44, 10, -36, -24, -44, 40, -39, 44, 39, -11, 24, 40, 3, 18, -44, -4, 9, -1, 42, -25, -19, -4, 14, -25, -2, 33, -1, -26, -15, 24, -13, 35, -44, 13, 9, -30, -20, -44, -38, 36, 39, 15, -22, -44, -13, -38, -37, 31, -22, -21, -12, 34, -38, 33, -44, 18, -11, -3, -39, 34, -44, 22, -44, -15, 15, -15, 37, -3, 16, -44, -28, 44, -18, 31, 16, -26, -44, -26, -3, 38, -39, 10, -22, -44, -21, -35, 32, 19, -24, -44, -14, -40, 34, -44, -15, 28, -25, -22, -38, -33, 40, -27, 42, -44, 27, 31, -27, 29, -39, -44, 23, -1, 33, -4, -44"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n=3, target=4)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n = 4, target = 100)",
        "minimumPossibleSum(n = 10000000, target = 1000000000000000000)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 10, 100, 1000])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [5,4,3,2,1])",
        "findValueOfPartition(nums = [1,10,100])",
        "findValueOfPartition(nums = [2, 4, 5, 7])",
        "findValueOfPartition(nums = [1, 3, 2, 9])",
        "findValueOfPartition(nums = [1,10,15,100,1000])",
        "findValueOfPartition(nums = [1,4,7,8,11])",
        "findValueOfPartition(nums = [7, 3, 4, 9, 2])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])",
        "numberOfPoints(nums = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [7, 8]])",
        "numberOfPoints(nums = [[1,2], [1,3], [1,4], [2,3], [3,4]])",
        "numberOfPoints(nums = [[2, 4], [5, 8], [10, 11]])",
        "numberOfPoints(nums = [[1, 1], [2, 2], [2, 3], [2, 4], [3, 3]])",
        "numberOfPoints(nums = [[1,5],[2,3],[4,5],[1,5]])",
        "numberOfPoints(nums = [[50,100],[1,10],[10,20],[5,25]])",
        "numberOfPoints(nums = [[1,3], [4,11], [13,15], [17,20]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [1, 2], [3, 4], [1, 100]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [1, 3], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 3], [2, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 5], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [1, 3], [2, 4], [2, 3]])",
        "numberOfPoints(nums = [[1, 5], [2, 5], [3, 5], [4, 5]])",
        "numberOfPoints(nums = [[0, 3], [2, 4], [2, 8]])",
        "numberOfPoints(nums = [[1, 5], [4, 7], [5, 7], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 7], [2, 7], [2, 6], [3, 5]])",
        "numberOfPoints(nums = [[1, 5], [1, 3], [5, 6], [5, 6], [3, 6]])",
        "numberOfPoints(nums = [[0, 5], [2, 5], [3, 5], [2, 2], [5, 2], [5, 5], [5, 5], [5, 5], [5, 5]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '')",
        "splitWordsBySeparator(words = [\"one two three four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one','two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one,two\", \"three,\", \"four,five,six\"])",
        "splitWordsBySeparator(words = ['one,two', 'three,,four,', 'five', 'six'], separator = ',')"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 11)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [3, 2, 2, 4, 3], target = 5)",
        "minOperations(nums = [1, 1, 1, 1, 1000], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 20)",
        "minOperations(nums = [4, 4, 4, 4, 4], target = 10)",
        "minOperations(nums = [2, 4, 12], target = 20)",
        "minOperations(nums = [100, 200, 300], target = 50000)",
        "minOperations(nums = [1, 3, 6, 7, 9], target = 15)",
        "minOperations(nums = [20, 10, 50], target = 250)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [10, -5, 2, -1], k = 2)",
        "checkArray(nums = [2, -1, 2], k = 3)",
        "checkArray(nums = [1, 2, 3, 1, 1], k = 3)",
        "checkArray(nums = [100, -23, 4, 19], k = 2)",
        "checkArray(nums = [2, -1, -3, 4, -5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], k = 6)",
        "checkArray(nums = [3,4,3,5,2,7,1], k = 2)",
        "checkArray(nums = [4, 2, 5, 7, 2, 3, 2, 7, 1], k = 2)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,1,1,1,1,0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1])"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [10,2])",
        "maxSum(nums = [10,10,10,10,10,10,10])",
        "maxSum(nums = [-10,-1,2,3,4])",
        "maxSum(nums = [2,22,1,11])",
        "maxSum(nums = [2,7,3,1])",
        "maxSum(nums = [0, 1, 1, 1, 1, 1, 0])",
        "maxSum(nums = [1,2,2,4,5,5,8,8,8,9])",
        "maxSum(nums = [10000,20000,20000,20000,30000,10000])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 2, 3, 1])",
        "continuousSubarrays(A = [1,2,3,4,3,2,1])",
        "continuousSubarrays(A = [1,2,3,4,5,6,7])",
        "continuousSubarrays(A = [0,0,0,0,0])",
        "continuousSubarrays(A = [1,2,1,3,5,1,3,2])",
        "continuousSubarrays(A = [2, 1, 2, 4, 3, 2, 3, 4, 2, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7])",
        "continuousSubarrays(A = [1, 1, 1, 2, 1, 3, 3, 3, 3, 3, 1, 1, 1])",
        "continuousSubarrays(A = [1, 4, 5, 2, 3, 2, 5])",
        "continuousSubarrays(A = [3, 2, 1, 0, 3, 1, 0, 1, 3])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 3, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [4,1,2,3])",
        "distinctDifferenceArray(nums = [2, 2, 1, 4, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 3, 3, 4, 4, 5, 5])",
        "distinctDifferenceArray(nums = [0, 1, 2, 0, 0, 0, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 5, 7, 8, 5, 3, 4, 3, 7, 5, 4])",
        "distinctDifferenceArray(nums = [-5, -1, -1, -1, -1, -1, 0, 1, 1, 2])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [4, 3, 2, 1], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 3, 7, 9, 5], b = [1, 3, 2, 4, 6])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 3, 2, 1], b = [0, 1, 2, 3, 2, 1, 0])",
        "maxNonDecreasingLength(a = [2, 1, 2, 3], b = [3, 1, 4, 5])",
        "maxNonDecreasingLength(a = [3, 4, 1, 5, 2], b = [5, 6, 4, 8, 7])",
        "maxNonDecreasingLength(a = [0, 1, 2, 3, 4, 5], b = [0, 2, 3, 4, 6, 8])",
        "maxNonDecreasingLength(a = [2, 2, 3, 1], b = [3, 3, 3, 2])",
        "maxNonDecreasingLength(a = [1,2,3,4,1,2,3,4], b = [2,1,2,3,2,1,2,3])",
        "maxNonDecreasingLength(a = [1,2,5,3,5,6,4], b = [1,2,3,4,5,6,7])",
        "maxNonDecreasingLength(a = [4, 5, 6, 6, 8, 2, 2, 2, 3, 4], b = [1, 2, 4, 2, 2, 2, 3, 1, 2, 4])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 11, additionalTank = 1)",
        "distanceTraveled(mainTank = 20, additionalTank = 10)"
    ],
    "sample_160": [
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [0,0,0,0])",
        "maxSum(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "maxSum(nums = [1000001,1000000,1000002,1000003])",
        "maxSum(nums = [1, 9, 23, 12])",
        "maxSum(nums = [37373737, 37373737, 37373737, 37373737, 37373737])",
        "maxSum(nums = [9, 7, 6, 5, 4, 4, 9, 7, 8])",
        "maxSum(nums = [91, 213, 759])",
        "maxSum(nums = [820, 834, 609, 643, 627])",
        "maxSum(nums = [2,7,4,0,1,0,2,1,3,0,2,4,8,0,7,7,1,0,0,0,0,0,1,3,5,7,3,1])"
    ],
    "sample_52": [
        "smallestString(s = \"kkddsbncd\")",
        "smallestString(s = \"kddsbnacd\")",
        "smallestString(s = \"kddsbncb\")",
        "smallestString(s = \"aabcd\")",
        "smallestString(s = \"bacbac\")",
        "smallestString(s = \"aaabbbcdd\")",
        "smallestString(s = \"abdsa\")",
        "smallestString(s = \"kdzdcds\")",
        "smallestString(s = \"aznqqa\")",
        "smallestString(s = 'kdbbzdx')"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 1, 1, 1])",
        "findValueOfPartition(nums = [1, 1, 1])",
        "findValueOfPartition(nums = [2, 1, 3])",
        "findValueOfPartition(nums = [1, 4, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 1])",
        "findValueOfPartition(nums = [4, 2, 1])",
        "findValueOfPartition(nums = [5, 3, 1])",
        "findValueOfPartition(nums = [1, 5, 1, 2, 1])",
        "findValueOfPartition(nums = [4, 3, 1, 5, 2])",
        "findValueOfPartition(nums = [7, 2, 4, 3, 6, 8])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'bab')",
        "makeSmallestPalindrome(s = 'aab')",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = \"a\")",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = \"bb\")",
        "makeSmallestPalindrome(s = \"aabbb\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 1, num2 = 1)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 10)",
        "makeTheIntegerZero(num1 = 9, num2 = 11)",
        "makeTheIntegerZero(num1 = 43, num2 = 24)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[2,3],[2,4],[4,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints(nums = [[1,5],[2,3],[2,4]])",
        "numberOfPoints(nums = [[1,5],[2,3],[2,7]])",
        "numberOfPoints(nums = [[5,10],[3,4]])",
        "numberOfPoints(nums = [[1,4],[3,4],[0,1],[1,2],[2,3],[0,3]])",
        "numberOfPoints(nums = [[2,4],[3,6],[8,10]])",
        "numberOfPoints(nums = [[1,5],[3,7],[2,6],[1,2],[1,4]])",
        "numberOfPoints(nums = [[1,10],[2,8],[3,4],[7,13]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 1, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 1, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 1, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3], m = 1, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 0, 5], m = 2, k = 2)"
    ],
    "sample_40": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabbcc\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"xxxyyy\")",
        "minimumCost(s = \"1001\")",
        "minimumCost(s = \"1000\")",
        "minimumCost(s = \"0100\")",
        "minimumCost(s = \"xaxbbbxx\")",
        "minimumCost(s = \"00101010010101011111111\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 1, 0, 0, 0])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [5, 6, 7, 8])",
        "distinctDifferenceArray(nums = [1, 7, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 3, 3, 6, 2])",
        "distinctDifferenceArray(nums = [-1, -1, -2, -2, -3])",
        "distinctDifferenceArray(nums = [0, 1, 0, 1, 1, 2, 2, 3, 0, 4])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [40, 30, 60], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 1, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 14, 16, 18, 20], target = 17)",
        "numberOfEmployeesWhoMetTarget(hours = [11, 11, 12, 12, 12, 13], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4, 2, 4, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 9, 8, 13], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 16, 4, 50], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 30, 10, 15, 20, 30], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 4, 23, 8, 2], target = 16)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1], target = 2)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'neve')",
        "makeSmallestPalindrome(s = 'nev')",
        "makeSmallestPalindrome(s = \"eve\")",
        "makeSmallestPalindrome(s = 'nen')",
        "makeSmallestPalindrome(s = \"cane\")",
        "makeSmallestPalindrome(s = \"qwne\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512300001\")",
        "removeTrailingZeros(num = \"512300001\")",
        "removeTrailingZeros(num = '51230000001')",
        "removeTrailingZeros(num
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,4,3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 6], m = 1, k = 0)",
        "countInterestingSubarrays(nums = [1,2,4,7,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 4, 3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 4, 2, 3, 1, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 2, 2, 3, 4], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 4, 1, 5, 3, 4, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [0,0,0,0,1,1,0,0,0], m = 3, k = 2)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 10)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 10)",
        "distanceTraveled(mainTank = 4, additionalTank = 4)",
        "distanceTraveled(mainTank = 1, additionalTank = 1000)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5, 6], x = 3)",
        "minCost(A = [1, 3, 4, 2], x = 2)",
        "minCost(A = [1, 2, 3, 1], x = 2)",
        "minCost(A = [1, 3, 4, 2], x = 3)",
        "minCost(A = [2, 1, 5, 2], x = 2)",
        "minCost(A = [3, 1, 2, 1], x = 2)",
        "minCost(A = [2, 5, 6], x = 1)",
        "minCost(A = [1, 1, 5, 5], x = 2)",
        "minCost(A = [1, 10, 12, 2, 3, 1, 11], x = 3)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7])",
        "maxIncreasingGroups(u = [1, 3, 2, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 1])",
        "maxIncreasingGroups(u = [1, 3, 4, 5, 6])",
        "maxIncreasingGroups(u = [2, 3, 5, 4, 6])",
        "maxIncreasingGroups(u = [1, 3, 5, 8, 7, 9, 5, 4, 6, 9])",
        "maxIncreasingGroups(u = [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9])",
        "maxIncreasingGroups(u = [3, 4, 3, 3, 2, 5, 5])",
        "maxIncreasingGroups(u = [0, 2, 4, 6, 8, 9, 10, 11, 12, 14, 15])",
        "maxIncreasingGroups(u = [2, 4, 5, 5, 8, 9, 10, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3], k = 1)",
        "checkArray(nums = [1, 2, 3, 1, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 1, 2, 3], k = 3)",
        "checkArray(nums = [2, 3, 1, 1, 4], k = 3)",
        "checkArray(nums = [1, 10, 5, 2, 7], k = 3)",
        "checkArray(nums = [1, -1, 4, 1, 1, 2], k = 2)",
        "checkArray(nums = [5, 2, 1, 2, 4, 1, 2, 3], k = 2)",
        "checkArray(nums = [2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2], k = 2)",
        "checkArray(nums = [4, 0, -1, 0, 3, 1, -1, 3], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"CDAB\")",
        "minLength(s = 'ABABCD')",
        "minLength(s = 'CDAB')",
        "minLength(s = \"ABD\")",
        "minLength(s = \"ACDABCD\")",
        "minLength(s = \"ABDABCD\")",
        "minLength(s = \"aCDbB\")",
        "minLength(s = \"ADCDABCDABCD\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [3,2,2,4], target = 7)",
        "minOperations(nums = [4,2,3], target = 7)",
        "minOperations(nums = [5, 1, 3], target = 9)",
        "minOperations(nums = [1,2,3,4], target = 15)",
        "minOperations(nums = [2, 2, 2, 2, 5, 5], target = 10)",
        "minOperations(nums = [0, 1, 1], target = 1)",
        "minOperations(nums=[1,2,3,4,5], target = 15)",
        "minOperations(nums = [5, 2, 1, 1, 5], target = 8)",
        "minOperations(nums = [5, 2, 3, 2, 4, 2], target = 16)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \".\")",
        "splitWordsBySeparator(words = [\"this,is,a,test\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a\", \"b c\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"abc\"], separator = \"ab\")",
        "splitWordsBySeparator(words = [\"bar|baz|foo\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"a\\tb\", \"c  d\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\",\"\",\"\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"--\", \"boo--foo\", \"--bar\"], separator = \"--\")",
        "splitWordsBySeparator(words = ['a.b.c.d', '1.2.3.4', 'j.m.c.r'], separator = '.')"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbnad\")",
        "smallestString(s = 'kddsbnad')",
        "smallestString(s = \"kddsbnad\")",
        "smallestString(s = 'bcdsbncd')",
        "smallestString(s = \"aabbaaa\")",
        "smallestString(s = 'aaaa')",
        "smallestString(s = 'aaybnc')"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"RLL__RR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR__RR\")",
        "furthestDistanceFromOrigin(moves = \"RR__R\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRLRLRR\")",
        "furthestDistanceFromOrigin(moves = \"RRR_LRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRRL_LRLRRL_LRLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLLLLRRRRRRRRRRR_\")",
        "furthestDistanceFromOrigin(moves = \"RR_RR_LL_L_L\")",
        "furthestDistanceFromOrigin(moves = \"RLRRRLLL_LL_RR\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 5)",
        "makeTheIntegerZero(num1 = 12, num2 = 2)",
        "makeTheIntegerZero(num1 = 19, num2 = 10)",
        "makeTheIntegerZero(num1 = 56, num2 = 23)",
        "makeTheIntegerZero(num1 = 130, num2 = 9)",
        "makeTheIntegerZero(num1 = 839, num2 = 56)",
        "makeTheIntegerZero(num1 = 795, num2 = 581)"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsnbncd\")",
        "smallestString(s = 'bcd')",
        "smallestString(s = 'dbcdsabcd')",
        "smallestString(s = \"gddsdtcd\")",
        "smallestString(s = \"aasdassaa\")",
        "smallestString(s = \"wzlkdqc\")"
    ],
    "sample_146": [
        "finalString(s = 'opinter')",
        "finalString(s = \"inter\")",
        "finalString(s = 'poniters')",
        "finalString(s = 'itopnre')",
        "finalString(s = 'ninterpo')",
        "finalString(s = 'inpponter')",
        "finalString(s = 'river')",
        "finalString(s = 'ontri')",
        "finalString(s = \"niopetr\")",
        "finalString(s = \"iiceicoponter\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 1)",
        "longestEqualSubarray(nums = [1,2,1,2,3,1,4,1,2,1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 2], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6], k = 5)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 5, 1, 3, 7], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 4, 2, 2, 2, 2, 3], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 11)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 11)",
        "canSplitArray(nums = [7,2,5,10,8], m = 15)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 18)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 11)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 16)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7], m = 5)",
        "canSplitArray(nums = [3,2,5,1], m = 5)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one,two', 'three', 'four,five,six'])",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"])",
        "splitWordsBySeparator(words = ['one/two/three', 'four/five/six'], separator = '/')",
        "splitWordsBySeparator(words = ['one,two,three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one/two', 'three/four', 'five/six'])",
        "splitWordsBySeparator(words = [\"one;two\", \"three;four\", \"five;six\"], separator = \";\")",
        "splitWordsBySeparator(words = [\"one|two|three|four\", \"five|six\"], separator = \"|\")",
        "splitWordsBySeparator(words = ['one:two', 'three::four', 'five:::six'], separator = ':')",
        "splitWordsBySeparator(words = [\"one.two.three\", \"four.five.six\"], separator = \".\")",
        "splitWordsBySeparator(words = ['one--two--three--four--five--six'], separator = '--')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [1,4,2,3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [20,20,20], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,0,1,0], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [90, 72, 90, 95, 100], target = 100)"
    ],
    "sample_168": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"international\", \"organization\"], s = \"i\")",
        "isAcronym(words = [\"B\", \"A\", \"N\", \"A\", \"N\", \"A\"], s = \"BANANA\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"test\"], s = \"thisisatest\")",
        "isAcronym(words = [\"this\", \"is\", \"not\", \"an\", \"acronym\"], s = \"NIANA\")",
        "isAcronym(words = [\"international\", \"new\", \"morning\"], s = \"inm\")",
        "isAcronym(words = [\"acro\", \"nine\", \"matic\"], s = \"AM\")",
        "isAcronym(words = [\"Mary\", \"Wins\", \"Bon\", \"Joe\"], s = \"MWBJ\")",
        "isAcronym(words = [\"small\", \"talk\", \"tears\"], s = \"stt\")",
        "isAcronym(words = [\"Genesis\", \"Apple\", \"Perry\"], s = \"GAP\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"i\", \"love\", \"python\"], s = \"ilp\")",
        "isAcronym(words = [\"this\", \"is\", \"an\", \"example\"], s = \"tias\")",
        "isAcronym(words = [\"We\", \"are\", \"discussing\", \"acronyms\"], s = \"WAD\")",
        "isAcronym(words = [\"This\", \"is\", \"not\", \"an\", \"acronym\"], s = \"notanacronym\")",
        "isAcronym(words = [\"do\", \"not\", \"reply\"], s = \"dNr\")",
        "isAcronym(words = [\"abcd\", \"efgh\", \"ijkl\"], s = \"aebj\")",
        "isAcronym(words = [\"test\", \"case\", \"example\", \"test\"], s = \"tceat\")",
        "isAcronym(words = [\"bat\", \"ring\"], s = \"bra\")",
        "isAcronym(words = [\"True\", \"nano\", \"pneumonoultramicroscopicsilicovolcanoconiosis\"], s = \"TNULPSVCI\")",
        "isAcronym(words = [\"You\", \"Need\", \"More\", \"Need\", \"To\", \"Learn\", \"Basic\", \"Python\", \"\"], s = \"YNMTNLBP\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aabbcc\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"00111\")",
        "minimumCost(s = \"xyy\")",
        "minimumCost(s = \"111000\")",
        "minimumCost(s = \"acb\")",
        "minimumCost(s = \"dcba\")",
        "minimumCost(s = \"zzab\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = \"aa\")",
        "makeSmallestPalindrome(s = 'abcd')"
    ],
    "sample_50": [
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abba\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"z\")",
        "smallestString(s = \"ababa\")",
        "smallestString(s = 'aaa')",
        "smallestString(s = \"abaaB\")",
        "smallestString(s = \"abacbab\")",
        "smallestString(s = 'aazbz')",
        "smallestString(s = \"abzzzzzzzzzzz\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [3,1,2,4,3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABAB\")",
        "minLength(s = \"ABABAB\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCB\")",
        "minLength(s = \"ABCDABEF\")",
        "minLength(s = \"ABCDCDCDCDCD\")",
        "minLength(s = \"CDACDBCD\")",
        "minLength(s = \"ACDABDABDACDAB\")"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 2])",
        "maxSum(nums = [11, 7, 2, 15])",
        "maxSum(nums = [111, 112, 113, 114, 115])",
        "maxSum(nums = [100, 20, 50])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])",
        "maxSum(nums = [123, 70, 89])",
        "maxSum(nums = [3, 5, 100, 4, 2, 1])",
        "maxSum(nums = [11, 99, 44, 111, 222])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [1, 3, 5])",
        "semiOrderedPermutation(nums = [5, 3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [2, 1, 5, 4, 3])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 6, 5])"
    ],
    "sample_162": [
        "maxSum(nums = [3, 6, 5, 9, 2, 7, 8])",
        "maxSum(nums = [12, 13, 23, 121, 123, 124])",
        "maxSum(nums = [1, 78, 79, 99, 200, 201, 202])",
        "maxSum(nums = [29, 10, 18, 8, 7, 2])",
        "maxSum(nums = [9, 4, 3, 9, 1, 2, 9, 6, 4, 8])",
        "maxSum(nums = [7, 6, 3, 5, 1, 8, 2, 9, 11, 4])",
        "maxSum(nums = [8, 1, 6, 5, 4, 3, 88, 8, 8])",
        "maxSum(nums = [18, 6, 8, 1, 7, 12, 4, 14, 11, 2])",
        "maxSum(nums = [11, 22, 44, 45, 55, 66, 77, 88, 99, 98, 97, 100, 101, 102, 111, 122, 144, 155, 166, 177, 188, 199, 198, 197, 200, 201, 202, 211, 222, 244, 255, 266, 277, 288, 299, 298, 297])",
        "maxSum(nums = [76, 33, 11, 49, 97, 10, 49, 33, 39, 69, 43, 58, 45, 15, 40, 88, 20, 92, 12, 76, 64, 7, 33, 11, 89, 98, 41, 33, 36, 61, 31, 90, 43, 36, 58, 84, 92, 38, 20, 11, 51, 36, 73, 46, 83, 36, 96, 93, 14, 38, 69, 52, 48, 36, 42, 51, 72, 95, 98, 46, 81, 80, 93, 61, 78, 90, 61, 67, 10, 32, 61, 72, 80, 19, 29, 63, 52, 21, 60, 96, 20, 43, 64, 30, 68, 70, 89, 87, 52, 10, 63, 14, 66, 75, 30, 84, 85, 94, 93, 60, 76, 81, 64, 71, 79, 80, 23, 12, 68, 97, 49, 21, 95, 7, 45, 84, 90, 10, 40, 31, 55, 97, 83, 84, 19, 27, 21, 51, 96, 63, 93, 33, 71, 94, 85, 22, 21, 78, 11, 62, 12, 90, 80, 48, 78,"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = '10001')",
        "maximumOddBinaryNumber(s = \"1000\")",
        "maximumOddBinaryNumber(s = '11001')",
        "maximumOddBinaryNumber(s = '010110')",
        "maximumOddBinaryNumber(s = '1010100')",
        "maximumOddBinaryNumber(s = \"10001\")",
        "maximumOddBinaryNumber(s = '1010000')",
        "maximumOddBinaryNumber(s = \"011001001\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [40, 30, 60], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 10, 11, 12], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 3, 3, 3, 3, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 30, 10, 40, 50], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 15, 3], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 3, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 8, 11, 10, 6], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 3, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2, 7, 4, 10, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 7, 4, 2, 2, 3], target = 5)"
    ],
    "sample_166": [
        "isAcronym(words = [\"This\", \"Is\", \"An\", \"Acronym\"], s = \"TIA\")",
        "isAcronym(words = [\"Foo\", \"Bar\", \"Baz\"], s = \"FBB\")",
        "isAcronym(words = [\"British\", \"Tea\", \"Party\"], s = \"BTP\")",
        "isAcronym(words = [\"Beta\", \"alpha\", \"gamma\"], s = \"B\")",
        "isAcronym(words = [\"Zoo\", \"Zookeeper\"], s = \"ZZ\")",
        "isAcronym(words = [\"SIM\", \"S\", \"I\", \"M\", \"S\"], s = \"SISIM\")",
        "isAcronym(words = [\"Dukes\",\"Battle\",\"Cards\"], s = \"DB\")",
        "isAcronym(words = [\"mother\", \"father\", \"married\", \"lives\"], s = \"mfm\")",
        "isAcronym(words = [\"do\", \"no\", \"repeat\", \"once\"], s = \"dono\")",
        "isAcronym(words = [\"young\", \"who\", \"would\", \"stay\", \"young\"], s = \"wywsy\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank=10, additionalTank=0)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 3, 5, 4, 2])",
        "maxIncreasingGroups(A = [3, 5, 1, 4, 2])",
        "maxIncreasingGroups(A = [2, 2, 1, 2, 1])",
        "maxIncreasingGroups(A = [1,2,3,3,4])",
        "maxIncreasingGroups(A = [2, 4, 10, 15, 20])",
        "maxIncreasingGroups(A = [2, 4, 3, 6, 7, 2, 2, 1, 0, 3, 1, 1, 1, 1, 1])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [2, 3, 1, 5, 4])",
        "distinctDifferenceArray(nums = [-1, 0, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [4, 2, 2, 5, 3])",
        "distinctDifferenceArray(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "distinctDifferenceArray(nums = [-5, -3, -1, 1, 3, 5])",
        "distinctDifferenceArray(nums = [5, 7, 2, 5, 7, 1])",
        "distinctDifferenceArray(nums = [2, 1, 2, 4, 3])",
        "distinctDifferenceArray(nums = [5, 7, 2, 5, 11])",
        "distinctDifferenceArray(nums = [1, 3, 2, 2, 4])",
        "distinctDifferenceArray(nums = [1, 3, 1, 5, 4, 1, 4, 1, 3, 6, 7, 3, 5, 1, 3, 6, 1])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 3, 1, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1, 3, 2, 4, 5, 6, 7, 8])",
        "countCompleteSubarrays(nums = [0, 1, 2, 5, 2, 3, 4, 2, 5, 3, 7, 4])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 9, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 2, 2, 2, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [3,1,4,1,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 1, 0, 1, 99], k = 4)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aabcccccaaa\")",
        "minimizedStringLength(s = \"aab\")",
        "minimizedStringLength(s = \"aaa\")",
        "minimizedStringLength(s = \"aabccb\")",
        "minimizedStringLength(s = \"aabccde\")",
        "minimizedStringLength(s = \"abccbb\")",
        "minimizedStringLength(s = \"abacd\")",
        "minimizedStringLength(s = \"abaabba\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,1,1,1,3], k = 2)",
        "longestEqualSubarray(nums = [2,1,2,3,4,2,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,4,4], k = 1)",
        "longestEqualSubarray(nums = [1,2,1,2,3,4,5,4,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3,4,3,2,4,3], k = 3)",
        "longestEqualSubarray(nums = [2, 1, 4, 3, 3, 3, 2, 2, 2], k = 2)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [1, 2], [0, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 1], [2, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,2],[4,3],[2,1]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [2, 1], [3, 1], [4, 3]])",
        "colorTheArray(n = 5, queries = [[0, 0], [0, 1], [0, 2], [2, 0], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 1], [2, 2], [1, 2], [0, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [0, 1], [1, 3], [0, 2], [1, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 2], [4, 1], [2, 0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [0, 3], [1, 1], [3, 2], [3, 3]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 40, 10], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 3, 2, 3, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 30, 30, 30, 20, 30], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 6, 7, 4], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 3, 5, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,3,2,2,0,4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 12, 20, 98, 1, 12], target = 120)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [123,456,789])",
        "countBeautifulPairs(nums = [32, 16, 82, 29])",
        "countBeautifulPairs(nums = [5, 7, 11, 13, 17])",
        "countBeautifulPairs(nums = [12, 18, 20, 15, 2, 3])",
        "countBeautifulPairs(nums = [12, 18, 20, 24, 30, 36, 42, 48, 54, 60, 66])",
        "countBeautifulPairs(nums = [24, 48, 145, 288, 600])",
        "countBeautifulPairs(nums = [123, 123, 1234, 3245, 345, 324, 1234, 1234, 1234])",
        "countBeautifulPairs(nums = [224, 280, 30, 284, 262, 235])",
        "countBeautifulPairs(nums = [517364, 457352, 348576, 245516, 517364, 178543])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [-1, 2, 4])",
        "countWays(nums = [-1, 0, 1, 2, 3, 4])",
        "countWays(nums = [2, 5, 5, 11])",
        "countWays(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 5])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = '111000')",
        "maximumOddBinaryNumber(s = '010101')",
        "maximumOddBinaryNumber(s = '01101')",
        "maximumOddBinaryNumber(s = '00001111')",
        "maximumOddBinaryNumber(s = \"0110101\")",
        "maximumOddBinaryNumber(s = '110011001')",
        "maximumOddBinaryNumber(s = \"01100011\")",
        "maximumOddBinaryNumber(s = \"101110100\")",
        "maximumOddBinaryNumber(s = \"01001001001001001\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3], k = 0)",
        "maximumBeauty(nums = [1, 2, 3], k = 0)",
        "maximumBeauty(nums = [1, 2, 3, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 2, 4, 6, 8], k = 3)",
        "maximumBeauty(nums = [2, 2, 1, 1], k = 2)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 3, 4, 5])",
        "maximumTripletValue(nums = [-1000, -1000, 1000])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [3,1,2,3])",
        "maximumTripletValue(nums = [3, 0, 5, 4])",
        "maximumTripletValue(nums = [4, -1, -1, 1, 0])"
    ],
    "sample_98": [
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 100)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 2)",
        "maximumJumps(nums = [100,-23,-23,404,100,23,23,23,3,404], target = 101)",
        "maximumJumps(nums = [-1, -1, -1, -1, -1], target = 3)",
        "maximumJumps(nums = [2,0,0,0,0,0], target = 0)",
        "maximumJumps(nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -4",
        "maximumJumps(nums = [7,6,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "maximumJumps(nums = [2,1,1,2,1,1,2,1,1,2,1], target = 1)",
        "maximumJumps(nums = [2,1,1,0,3,2,0,0], target = 3)"
    ],
    "sample_149": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'irtsng')",
        "finalString(s = 'itsi')",
        "finalString(s = 'testing')",
        "finalString(s = 'ping')",
        "finalString(s = \"itis\")",
        "finalString(s = \"itsu\")",
        "finalString(s = 'ihsng')",
        "finalString(s = \"icd\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 1, 2, 1, 1])",
        "continuousSubarrays(A = [1, 1, 2, 1, 1])",
        "continuousSubarrays(A = [1, 2, 2, 3, 2, 4, 2])",
        "continuousSubarrays(A = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1])",
        "continuousSubarrays(A = [3, 2, 4, 3, 5])",
        "continuousSubarrays(A = [2, 1, 2, 2, 1, 2, 2, 2, 1])",
        "continuousSubarrays(A = [1, 3, 2, 4, 5, 6, 3, 2])",
        "continuousSubarrays(A = [3, 5, 2, 6, 7, 1])",
        "continuousSubarrays(A = [2, 1, 3, 5, 3, 5, 1])",
        "continuousSubarrays(A = [1, 1, 2, 3, 2, 3, 1, 2, 2, 2, 2])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [4, 2, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [0, 1, 2, 5, 2, 3, 1, 4])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [0, 1, 2, 5, 2, 3, 4, 2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1,2,2,3,4,4,5,6])",
        "countCompleteSubarrays(nums = [3, 1, 4, 2, 5, 6, 1])",
        "countCompleteSubarrays(nums = [5, 2, 1, 2, 5, 4, 3, 2, 3, 6])"
    ],
    "sample_228": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0,1,2,3,4])",
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [1, 0, 0])",
        "countWays(nums = [0, 0, 0, 0, 1, 1])",
        "countWays(nums = [1,3,2,6,7,8,5,4])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 0)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "maximumBeauty(nums = [1, 2, 3, 1, 4], k = 1)",
        "maximumBeauty(nums = [4, 2, 4, 5, 3], k = 2)",
        "maximumBeauty(nums = [1, 1, 3, 5, 5, 7, 7, 9], k = 3)",
        "maximumBeauty(nums = [2, 1, 5, 3, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 1, 1], k = 0)",
        "maximumBeauty(nums = [3, 2, 1, 5, 4, 6], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 2, 4])",
        "distinctDifferenceArray(a = [1, 2, 3, 1, 4])",
        "distinctDifferenceArray(a = [5, 1, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 3, 4])",
        "distinctDifferenceArray(a = [1, 1, 1, 2, 3, 3])",
        "distinctDifferenceArray(a = [1, 3, 2, 5, 6])",
        "distinctDifferenceArray(a = [2, 3, 5, 5, 5])",
        "distinctDifferenceArray(a = [2, 3, 2, 1, 4])",
        "distinctDifferenceArray(a = [3, 1, 5, 7, 4])",
        "distinctDifferenceArray(a = [3, 4, 4, 1, 2, 3])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3,4,3,2,1])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3])",
        "continuousSubarrays(a = [1, 4, 4, 4, 4, 4])",
        "continuousSubarrays(a = [0,1,0,1,1,0,1])",
        "continuousSubarrays(a = [1, 2, 3, 2, 4, 1, 2, 3])",
        "continuousSubarrays(a = [1, 1, 2, 3, 4, 5, 6, 1])",
        "continuousSubarrays(a = [0, 1, 2, 2, 2, 2, 2, 1])",
        "continuousSubarrays(a = [1,2,1,3,5,4,3,2,1])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [0, 1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [0, 1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4])",
        "continuousSubarrays(nums = [0, 1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [0, 1, 2, 3, 4])",
        "continuousSubarrays(nums = [1, 2, 2, 3, 1, 4])",
        "continuousSubarrays(nums = [1,1,1,1,1,1,1])",
        "continuousSubarrays(nums = [1,2,2,3,1,4,0])",
        "continuousSubarrays(nums = [1, 2, 4, 6, 5])",
        "continuousSubarrays(nums = [1,1,2,2,3,3,3,3,3,4,5,5,5,5,5,5,6,7,7])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [12, 19, 3])",
        "countBeautifulPairs(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])",
        "countBeautifulPairs(nums = [2,3,5,9])",
        "countBeautifulPairs(nums = [12,18,13,9,14])",
        "countBeautifulPairs(nums = [19,22,44,73])",
        "countBeautifulPairs(nums = [20, 24, 66, 99, 107, 101, 100, 100, 100, 100, 100])",
        "countBeautifulPairs(nums = [3,4,12,2,10,7,13,5,8,14,16,20])",
        "countBeautifulPairs(nums = [32, 88, 67, 23, 61, 32, 71, 40, 19])",
        "countBeautifulPairs(nums = [2210, 2189, 112, 111, 31, 30, 5555])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1,3,2,5,4])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7])",
        "semiOrderedPermutation(nums = [1,5,2,3,4])",
        "semiOrderedPermutation(nums=[3, 1, 2, 4, 5])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 4, 2, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2,1,4,5,3])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 0, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 0, 0, 1, 0, 1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = '01110')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"00011\")",
        "maximumOddBinaryNumber(s = '00000001')",
        "maximumOddBinaryNumber(s = \"010001\")",
        "maximumOddBinaryNumber(s = '11101')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '000011111010010')"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [2,4,7,1,5,3])",
        "countCompleteSubarrays(nums = [2,3,3,2,5])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"AABCDCD\")",
        "minLength(s = \"CDABCDABCD\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s=\"ABCB\")",
        "minLength(s=\"ABCCD\")",
        "minLength(s = \"AACDDDD\")",
        "minLength(s = \"AABCDCDCDCDAB\")",
        "minLength(s = \"CAAAABCD\")",
        "minLength(s=\"AACBBCD\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [2,3,1,6,7])",
        "countCompleteSubarrays(nums = [2,3,1,6,7])",
        "countCompleteSubarrays(nums = [0,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [0, 1, 2, 0, 1, 2, 3, 4, 2, 3])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,4,4,5])",
        "countCompleteSubarrays(nums = [2,2,2,2,2,2,2,2])",
        "countCompleteSubarrays(nums = [2,2,2,2,2,1])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,3,4,1,4,3,3])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 100, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 4)",
        "makeTheIntegerZero(num1 = 14, num2 = 3)",
        "makeTheIntegerZero(num1 = 30, num2 = 5)",
        "makeTheIntegerZero(num1 = 23, num2 = 5)",
        "makeTheIntegerZero(num1 = 23, num2 = 15)",
        "makeTheIntegerZero(num1 = 33, num2 = 6)",
        "makeTheIntegerZero(num1 = 3, num2 = 1000)"
    ],
    "sample_100": [
        "maximumJumps(nums = [10, 13, 12, 14, 15], target = 2)",
        "maximumJumps(nums = [10, 13, 12, 14, 15], target = 2)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 2)",
        "maximumJumps(nums = [10,13,12,14,15], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [2, 5, 0, 0], target = 0)",
        "maximumJumps(nums = [5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "maximumJumps(nums = [-10, -5, -2, 4, 10], target = 5)",
        "maximumJumps(nums = [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0], target = 1)",
        "maximumJumps(nums = [7, 4, 10, 3, 5, 12, 13, 18, 20, 15], target = 8)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 3, 5, 4, 7])",
        "maxIncreasingGroups(x = [1, 2, 3])",
        "maxIncreasingGroups(x = [1, 2, 3, 4])",
        "maxIncreasingGroups(x = [5, 3, 1, 4, 2])",
        "maxIncreasingGroups(x = [9, 1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 4, 3])",
        "maxIncreasingGroups(x = [1, 2, 3, 3, 4, 4, 4])",
        "maxIncreasingGroups(x = [10, 10, 20, 20, 30, 30, 40, 50])",
        "maxIncreasingGroups(x = [2, 4, 8, 12, 13, 14])",
        "maxIncreasingGroups(x = [5, 6, 7, 8, 5, 3, 1, 2])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"RRRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLRLRLR\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"_RRRLLLL_\")",
        "furthestDistanceFromOrigin(moves = \"L_L_LRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLLL___\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLRRLLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"R_R_LRLRL_L_R\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '10001')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = '00011')",
        "maximumOddBinaryNumber(s = '00011')",
        "maximumOddBinaryNumber(s = '11010')",
        "maximumOddBinaryNumber(s = \"011010100110\")"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,1]])",
        "colorTheArray(n = 2, queries = [[1,1],[2,1]])",
        "colorTheArray(n = 3, queries = [[0,1],[0,0],[2,0]])",
        "colorTheArray(n=2, queries=[[1,0],[0,1],[1,1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 1], [3, 2], [4, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1,0],[2,1],[1,1],[2,0]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 10, 100, 1000])",
        "findValueOfPartition(nums = [3, 2, 1])",
        "findValueOfPartition(nums = [1, 10])",
        "findValueOfPartition(nums = [1, 10])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [-1, 0, 1, 2])",
        "findValueOfPartition(nums = [0, 3, 5, 8, 10])",
        "findValueOfPartition(nums = [1, 2, 3, 100])",
        "findValueOfPartition(nums = [-3, -1])",
        "findValueOfPartition(nums = [7, 9, 2, 5, 1, 6, 3])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1,0,1,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [4, 3, 2, 7, 8, 2, 3, 1])",
        "minimumIndex(nums = [0, 1, 2, 3])",
        "minimumIndex(nums = [3, 1, 2])",
        "minimumIndex(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 2, 1, 1, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 5, 6])",
        "minimumIndex(nums = [5, 4, 3, 2, 1, 5, 6])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3, 2, 2])",
        "minimumIndex(nums = [3, 2, 1, 4, 2, 1, 3])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,1,2,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,1,2,4,5,6,7], k = 3)",
        "sumIndicesWithKSetBits(nums = [12, 24, 48, 96, 192, 384, 768, 1536, 3072, 6144, 12288, 24576], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,0], k = 1)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 1, offers = [[1, 2, 10]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 2], [4, 6, 6], [7, 9, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 3, 3], [3, 5, 2]])",
        "maximizeTheProfit(n = 3, offers = [[0, 2, 5], [1, 2, 10], [2, 3, 6]])",
        "maximizeTheProfit(n = 10, offers = [(0, 10, 10)])",
        "maximizeTheProfit(n = 4, offers = [[0, 3, 5], [1, 2, 10], [1, 3, 4], [2, 3, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 3], [1, 3, 3], [2, 2, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [2, 3, 4], [3, 4, 6], [4, 5, 7], [5, 6, 8], [6, 7, 9], [7, 8, 10], [8, 9, 11]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 4], [0, 3, 3], [0, 2, 2], [1, 3, 3], [3, 5, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1,4,8],[3,5,9],[4,9,12],[5,7,16],[7,11,20],[8,12,24]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0001\")",
        "minimumOperations(num = \"00000\")",
        "minimumOperations(num = \"001\")",
        "minimumOperations(num = \"0010\")",
        "minimumOperations(num = \"00000000000000\")",
        "minimumOperations(num = \"101001\")",
        "minimumOperations(num = \"0102\")",
        "minimumOperations(num = \"0100111\")",
        "minimumOperations(num = \"38\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"0001\")",
        "minimumOperations(num = \"0001\")",
        "minimumOperations(num = \"050\")",
        "minimumOperations(num = \"01100\")",
        "minimumOperations(num = \"12340\")",
        "minimumOperations(num = \"0000000000000\")",
        "minimumOperations(num = \"3025\")",
        "minimumOperations(num = \"00110101\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 2, offers = [[1,1,1]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,1],[2,1,2]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,5],[2,3,1]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,5],[2,2,4]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 10], [3, 4, 10]])",
        "maximizeTheProfit(n=5, offers=[[1,1,1],[2,2,2],[3,3,3]])",
        "maximizeTheProfit(n = 5, offers = [[1,1,1],[2,3,5],[3,5,10]])",
        "maximizeTheProfit(n = 5, offers = [[2,1,3],[3,2,4],[5,3,5],[1,4,2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 0, 4], [2, 0, 4], [1, 1, 4], [2, 1, 2], [0, 2, 5]])",
        "maximizeTheProfit(n=4,offers=[\n    [1,0,3],\n    [3,1,2],\n    [2,1,1],\n    [2,1,3]\n])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "longestAlternatingSubarray(nums = [4,2,5,3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [3,3,3,3,3,3,3], threshold = 3)",
        "longestAlternatingSubarray(nums = [0,1,1,1,1,1,0,0,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [3,1,1,2,1,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [4,2,2,5,7,2,5,2,5], threshold = 2)",
        "longestAlternatingSubarray(nums = [12,11,24,13,25,24,15], threshold = 23)",
        "longestAlternatingSubarray(nums = [12,2,14,3,15,4,10], threshold = 3)"
    ],
    "sample_203": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"05\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"5025\")",
        "minimumOperations(num = \"00001\")",
        "minimumOperations(num = \"255255\")",
        "minimumOperations(num = \"010100\")",
        "minimumOperations(num = \"2512\")",
        "minimumOperations(num = \"0101010\")"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[4,4],[5,5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 1], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [2, 1], [3, 2], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 1], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 10, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [2, 3], [4, 1], [4, 3]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [1, 2], [2, 3], [1, 0]])",
        "colorTheArray(n = 4, queries = [[2, 0], [1, 1], [4, 1], [3, 1], [1, 0]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 2])",
        "minimumIndex(nums = [5, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 3])",
        "minimumIndex(nums = [2, 3, 1, 2])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 2, 1])",
        "minimumIndex(nums = [3, 3, 2, 1, 1])",
        "minimumIndex(nums = [1, 3, 1, 2, 1, 2, 1, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 2, 1, 2])",
        "minimumIndex(nums = [1, 3, 1, 3, 2, 1, 2, 3])"
    ],
    "sample_102": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], target = 3)",
        "maximumJumps(nums = [-10, -5, 2, 7, 8], target = 2)",
        "maximumJumps(nums = [-1, 2, 0, 1], target = 2)",
        "maximumJumps(nums = [6,10,15], target = 2)",
        "maximumJumps(nums = [1, 2, 0, 0, 0], target = 2)",
        "maximumJumps(nums = [3, 0, 2, 0, 0, 2, 0, 0, 1, 2, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [7, 5, 3, 2, 3, 7, 5, 7, 5, 7], target = 2)",
        "maximumJumps(nums = [2, 6, 8, 2, 3, 4, 1, 0, 9, 5, 8], target = 3)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '512300000001')",
        "removeTrailingZeros(num = \"00000512301\")",
        "removeTrailingZeros(num = \"51230000000\")",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num = '5123000000')"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 5, b = 0)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 0)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 0, b = 1)",
        "distanceTraveled(a = 2, b = 5)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 0])",
        "findValueOfPartition(a = [1, 4, 2, 7])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5, 10])",
        "findValueOfPartition(a = [1, 3, 1, 5])",
        "findValueOfPartition(a = [4, 3, 5, 2, 1])",
        "findValueOfPartition(a = [1, 5, 2, 10, 6, 3])",
        "findValueOfPartition(a = [5, 10, 20, 15, 20])",
        "findValueOfPartition(a = [2, 3, 4, 5, 6, 7, 10])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [4, 2, 2, 5, 3])",
        "distinctDifferenceArray(nums = [3, 1, 4, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 3, 2, 3, 4, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 10])",
        "distinctDifferenceArray(nums = [3, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 4, 5, 2, 3, 1])",
        "distinctDifferenceArray(nums = [-1, 1, 2, 3, 4, 4, 1])",
        "distinctDifferenceArray(nums = [2, 3, 1, 4, 2, 2, 3, 4, 3, 2])"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 3, 5])",
        "minimumIndex(nums = [4, 3, 2, 4])",
        "minimumIndex(nums = [1, 3, 5, 2, 2])",
        "minimumIndex(nums = [3, 4, 3, 2, 3, 5, 5, 6])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 4, 2])",
        "minimumIndex(nums = [2, 4, 2, 2])",
        "minimumIndex(nums = [-3, 1, -2, 0])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 0])",
        "minimumIndex(nums = [1, 2, 3, 3, 5, 6, 7])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"RRR\")",
        "furthestDistanceFromOrigin(moves = \"RR\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"URR\")",
        "furthestDistanceFromOrigin(moves = \"RLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRR\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"aabcc\")",
        "minimizedStringLength(s = \"aabcc\")",
        "minimizedStringLength(s = \"aabcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"abacaba\")",
        "minimizedStringLength(s = \"aabccb\")",
        "minimizedStringLength(s = \"banan\")",
        "minimizedStringLength(s = \"abcb\")",
        "minimizedStringLength(s = \"abbaccc\")",
        "minimizedStringLength(s = \"abceee\")"
    ],
    "sample_105": [
        "checkArray(nums = [10, 5, 2, 7, 8], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1, 2, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 1], k = 2)",
        "checkArray(nums = [10, -10, 10, -10, 10, -10, 10, -10], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 1)",
        "checkArray(nums = [12, -1, -7, 8, 3, -6, 4], k = 4)",
        "checkArray(nums = [10, 10, 1, 2, 3, 4, 5, 6], k = 4)",
        "checkArray(nums = [1,2,4,3,3,2,1,2], k = 3)",
        "checkArray(nums = [2, 1, 2, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 5)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [2, 2, 2, 2, 2, 2, 2])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 3, 2, 1, 4])",
        "maxIncreasingGroups(usageLimits = [2, 1, 1, 3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [100, 50, 25, 10, 5])",
        "maxIncreasingGroups(usageLimits = [100, 2, 50])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 3, 2, 2, 1, 3, 2, 2, 1, 3, 2, 2, 1])",
        "maxIncreasingGroups(usageLimits = [5, 5, 3, 1, 1, 1, 2, 1])",
        "maxIncreasingGroups(usageLimits = [1, 5, 1, 5, 1, 3, 1, 5, 1, 5, 1, 5, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,"
    ],
    "sample_206": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"050\")",
        "minimumOperations(num = \"050\")",
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"5075\")",
        "minimumOperations(num = \"010\")",
        "minimumOperations(num = \"5000\")",
        "minimumOperations(num = \"0250\")",
        "minimumOperations(num = \"0500\")",
        "minimumOperations(num = \"226\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4, 5, 6, 7, 8])",
        "doesValidArrayExist(derived = [0, 1, 2, 1, 3, 4])",
        "doesValidArrayExist(derived = [1, 3, 3, 4, 6, 7])"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aaba\")",
        "minimumCost(s = \"101101\")",
        "minimumCost(s = \"xyxyxyxy\")",
        "minimumCost(s = \"111100001111\")",
        "minimumCost(s = \"AABCB\")",
        "minimumCost(s = \"zzzzaaz\")",
        "minimumCost(s = \"adfbcaaaa\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [10, 20, 5, 30, 20])",
        "maxIncreasingGroups(usageLimits = [1, 3, 5, 7, 9, 11])",
        "maxIncreasingGroups(usageLimits = [1, 2, 1, 2, 1])",
        "maxIncreasingGroups(usageLimits = [5, 1, 2, 2, 4])",
        "maxIncreasingGroups(usageLimits = [3, 5, 8, 10, 12])",
        "maxIncreasingGroups(usageLimits = [100, 120, 120, 110, 110, 100, 100, 100])",
        "maxIncreasingGroups(usageLimits = [4,5,3,2,3,6])",
        "maxIncreasingGroups(usageLimits = [100, 110, 90, 115])",
        "maxIncreasingGroups(usageLimits = [12, 17, 20, 30, 50, 75])"
    ],
    "sample_53": [
        "smallestString(s = 'baabz')",
        "smallestString(s = 'baabz')",
        "smallestString(s = 'baabz')",
        "smallestString(s = 'baac')",
        "smallestString(s = 'bbc')",
        "smallestString(s = 'caaab')",
        "smallestString(s = 'caaba')",
        "smallestString(s = 'bc')",
        "smallestString(s = 'bccb')",
        "smallestString(s = 'zac')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 3)",
        "minAbsoluteDifference(nums = [1,4,7,10,13,19], x = 3)",
        "minAbsoluteDifference(nums = [0,1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [5,2,1,3], x = 2)",
        "minAbsoluteDifference(nums = [1,10,10,100], x = 5)",
        "minAbsoluteDifference(nums = [2,3,4], x = 3)",
        "minAbsoluteDifference(nums = [4,6,10,16,21], x = 2)",
        "minAbsoluteDifference(nums = [-2,-2,1,3,5], x = 2)",
        "minAbsoluteDifference(nums = [3,4,2,6,7,8,11], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 2, offers = [[0, 1, 1], [1, 0, 2]])",
        "maximizeTheProfit(N = 2, offers = [[0, 1, 2], [1, 0, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 100], [2, 3, 200], [2, 3, 300]])",
        "maximizeTheProfit(N = 2, offers = [(1, 1, 2), (1, 2, 3)])",
        "maximizeTheProfit(N = 3, offers = [[2, 3, 5], [1, 3, 2]])",
        "maximizeTheProfit(N = 4, offers = [(0, 2, 2), (1, 2, 3), (1, 3, 4)])",
        "maximizeTheProfit(N = 6, offers = [[0, 1, 2], [1, 3, 1], [2, 5, 2], [3, 4, 3], [4, 5, 4], [5, 6, 5]])",
        "maximizeTheProfit(N = 10, offers = [[0, 1, 5], [1, 5, 2], [5, 6, 3], [6, 10, 4]])",
        "maximizeTheProfit(N = 4, offers = [[2, 3, 5], [3, 1, 3], [3, 5, 2], [1, 4, 2]])",
        "maximizeTheProfit(N = 6, offers = [[1, 2, 4], [2, 5, 5], [3, 4, 6], [3, 5, 10], [4, 1, 2], [5, 2, 3], [5, 3, 3], [5, 4, 3], [5, 5, 3]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \"t\")",
        "splitWordsBySeparator(a = [\"abcd efgh ijkl\"], b = \" \")",
        "splitWordsBySeparator(a = [\"space separated\", \"words\"], b = \" \")",
        "splitWordsBySeparator(a = [\"asdf\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"a,b,c\", \"a,b\", \"a,b,c,d,e,f\"], b = \",\")",
        "splitWordsBySeparator(a = [\"a;b;c\", \"d;e\", \";f;\", \"g\"], b = \";\")",
        "splitWordsBySeparator(a = [\"c;b\",\"a;b\"], b = \";\")",
        "splitWordsBySeparator(a = [\"sdfsdf\", \"1 2 3 4\", \"sdfsdf\"], b = \" \")",
        "splitWordsBySeparator(a = [\"t,e,s,t\", \"hello,word\"], b = \",\")",
        "splitWordsBySeparator(a = [\"He\", \"ll o world\", \"\", \"!!\"], b = \" \")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512300001')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123000001')",
        "removeTrailingZeros(a = '5123000001')",
        "removeTrailingZeros(a = '512300010')",
        "removeTrailingZeros(a = '512301000000000')",
        "removeTrailingZeros(a = '512300')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'nev')",
        "makeSmallestPalindrome(s = 'nev')",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = 'neon')",
        "makeSmallestPalindrome(s = \"nevve\")",
        "makeSmallestPalindrome(s = 'enven')",
        "makeSmallestPalindrome(s = \"bane\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 4, 4, 4, 4, 4], k = 0)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 4, 3, 4, 5], k = 0)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 1, 4, 1, 2, 1, 2, 1, 3, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [1,1,1,3,5,5,5,7,7,7,7], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 3, 4, 3, 4], k = 3)",
        "longestEqualSubarray(nums = [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 5, 4, 3, 5, 6], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 0)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 0)",
        "maximumBeauty(nums = [1,2,3,1], k = 1)",
        "maximumBeauty(nums = [2,1,4,5,3], k = 2)",
        "maximumBeauty(nums = [1,1,3,5,7,9,11], k = 4)",
        "maximumBeauty(nums = [3, 2, 1, 5, 4, 6, 7], k = 1)"
    ],
    "sample_163": [
        "maxSum(nums = [1, 1, 1])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [1, 34, 3, 98, 9, 76, 45, 4])",
        "maxSum(nums = [10, 1])",
        "maxSum(nums = [100, 500, 200])",
        "maxSum(nums = [2, 1, 3, 0, 2, 3, 4, 5])",
        "maxSum(nums = [5, 8, 7, 6, 11])",
        "maxSum(nums = [7,1,5,9,10,3,4,1])",
        "maxSum(nums = [10, 4, 3, 9, 10, 11, 12, 2, 7, 8])",
        "maxSum(nums = [18, 42, 144, 14, 19, 14, 19, 42, 42, 19, 18, 14, 18, 42, 19, 42, 19, 19, 14, 42, 42, 42, 14, 144, 14, 19, 14, 19, 42, 42, 19, 42, 42, 19, 19, 18, 14, 18, 144, 14, 19, 14, 19, 42, 42, 19, 42, 42, 19, 19, 18, 14, 18, 144, 14, 19, 14, 19, 42, 42, 19, 42, 42, 19, 19, 18, 14, 18, 144, 14, 19, 14, 19, 42, 42, 19, 42, 42, 19, 19, 18, 14, 18, 144, 14, 19, 14, 19, 42, 42, 19, 42, 42, 19, 19, 18, 14, 18, 144, 14, 19, 14, 19, 42, 42, 19, 42, 42, 19, 19, 18, 14, 18, 144, 14, 19, 14, 19, 42, 42, 19, 42, 42, 19, 19, 18, 14, 18, 144, 14, 19, 14, 19, 42, 42, 19, 42, 42, 19, 19, 18, 14, 18,"
    ],
    "sample_151": [
        "finalString(s = 'tinsg')",
        "finalString(s = \"sring\")",
        "finalString(s = 'asdfi')",
        "finalString(s = \"reverse\")",
        "finalString(s = \"ingis\")",
        "finalString(s = 'tears')",
        "finalString(s = 'isthissmart')",
        "finalString(s = \"thisistheman\")",
        "finalString(s = 'gntins')",
        "finalString(s = \"i!s!i!s!\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = '512300010')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '5123000100')",
        "removeTrailingZeros(num = '51230000100')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '10')",
        "maximumOddBinaryNumber(s = \"1111\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"01010101\")",
        "maximumOddBinaryNumber(s = \"101011\")",
        "maximumOddBinaryNumber(s = \"00110100\")",
        "maximumOddBinaryNumber(s = \"111101001\")",
        "maximumOddBinaryNumber(s = '000001000010011')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = ['easy problem'], separator = ' ')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy_problem'], separator = '_')",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = [\"easy;problem\"], separator = \";\")",
        "splitWordsBySeparator(words = ['this-is-easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = \"y\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"splitWordsBySeparator\", \"easy\", \"problem\"], separator = \"W\")",
        "splitWordsBySeparator(words = [\"easy problem\", \"easy easy problem\", \" \"], separator = \" \")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 1, 3, 4], K = 1)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 1, 2], K = 1)",
        "longestEqualSubarray(A = [1, 2, 1, 3, 4, 1], K = 1)",
        "longestEqualSubarray(A = [1,2,1,2,1,1,2], K = 1)",
        "longestEqualSubarray(A = [1,2,1,2,1,1,2], K = 1)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 3, 2, 1], K = 2)",
        "longestEqualSubarray(A = [1, 2, 1, 3, 4, 1, 3, 2, 1], K = 4)",
        "longestEqualSubarray(A = [1,2,1,3,4,4,1,4,1], K = 3)",
        "longestEqualSubarray(A = [2,2,1,4,1,2], K = 3)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 1, 3, 4, 3, 2, 4, 1, 2, 3, 3, 2, 4, 2], K = 4)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 1, 1])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1, 3])",
        "countWays(nums = [2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 4, 4])",
        "countWays(nums = [1, 1, 1, 1, 2, 1])",
        "countWays(nums = [2, 4, 6, 9])",
        "countWays(nums = [5, 2, 1, 3, 5, 1, 2, 3, 4])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 5, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [3,4,5,6,7,8], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 5, 4, 6, 7, 9, 8], k = 4)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512300000')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '5123000000001')"
    ],
    "sample_167": [
        "isAcronym(words = [\"The\", \"usual\", \"suspects\"], s = \"TUS\")",
        "isAcronym(words = [\"not\", \"an\", \"acronym\"], s = \"notanacronym\")",
        "isAcronym(words = [\"He\", \"llo\", \"Wor\", \"ld\"], s = \"HW\")",
        "isAcronym(words = [\"super\", \"mega\"], s = \"sm\")",
        "isAcronym(words = [\"the\", \"company\"], s = \"tco\")",
        "isAcronym(words = [\"biking\", \"is\", \"fun\"], s = \"bisf\")",
        "isAcronym(words = [\"Hi\", \"Hello\", \"I\", \"You\"], s = \"HHIY\")",
        "isAcronym(words = [\"I\", \"am\", \"a\", \"boy\"], s = \"IBABO\")",
        "isAcronym(words = [\"Brick\",\"Lego\",\"School\"], s = \"BLOSCH\")",
        "isAcronym(words = [\"banana\", \"boot\", \"cow\", \"dizzy\"], s = \"baco\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 1])",
        "countCompleteSubarrays(nums = [2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 3, 2, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 2])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 1, target = 100)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 10, target = 10000)",
        "minimumPossibleSum(n = 10, target = 19)"
    ],
    "sample_147": [
        "finalString(s = 'string')",
        "finalString(s = \"tsring\")",
        "finalString(s = 'tring')",
        "finalString(s = 'sitring')",
        "finalString(s = 'trings')",
        "finalString(s = 'tetsing')",
        "finalString(s = 'sihni')",
        "finalString(s = \"ilovepy\")",
        "finalString(s = 'tiernsi')",
        "finalString(s = 'wraitsg')"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neve\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'nevem')",
        "makeSmallestPalindrome(s = \"nev\")",
        "makeSmallestPalindrome(s = \"ten\")",
        "makeSmallestPalindrome(s = \"event\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4], [5, 5, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 5], [3, 5, 10]])",
        "maximizeTheProfit(n = 2, offers = [[1, 1, 1], [1, 2, 3]])",
        "maximizeTheProfit(n = 2, offers = [[2, 1, 4], [3, 2, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 3, 3], [3, 4, 8]])",
        "maximizeTheProfit(n = 6, offers = [[0, 1, 10], [2, 5, 100], [3, 4, 200], [1, 3, 300]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [4, 2, 6], [5, 1, 7]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 3], [2, 2, 1], [2, 3, 4], [4, 5, 2], [0, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 2, 7], [2, 3, 10], [2, 5, 20], [3, 4, 5], [3, 5, 10]])",
        "maximizeTheProfit(n=3, offers=[[0, 1, 2], [0, 1, 5], [1, 2, 4], [2, 3, 6], [1, 3, 10], [2, 3, 15], [3, 4, 10], [3, 4, 15]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [10,13,12,14,15], target = 2)",
        "maximumJumps(nums = [10,13,12,14,15], target = 2)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 2)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 101)",
        "maximumJumps(nums = [100, 100, 100, 100], target = 0)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [2, 1], target = 1)",
        "maximumJumps(nums = [2, 1, 0, 0, 0, 1], target = 2)",
        "maximumJumps(nums = [-1000000, 0, 1000000], target = 2)",
        "maximumJumps(nums = [0, 11, 34, 5, 19, 34, 5], target = 30)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = '00100')",
        "maximumOddBinaryNumber(s = '010010')",
        "maximumOddBinaryNumber(s = '00000011')",
        "maximumOddBinaryNumber(s = \"00001111100\")",
        "maximumOddBinaryNumber(s = '101110101100')",
        "maximumOddBinaryNumber(s = '01101000100101001000')"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 8)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 3, k = 11)",
        "minimumSum(n = 5, k = 10)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 14, num2 = 4)",
        "makeTheIntegerZero(num1 = 26, num2 = 7)",
        "makeTheIntegerZero(num1 = 128, num2 = 16)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 10, target = 100)",
        "minimumPossibleSum(n = 1, target = 10)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 20, target = 100)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,2,3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 3, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [3, 1, 2, 5, 4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [10, 10, 10], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 3, 5, 2, 4, 6], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [3, 4, 1], modulo = 3, k = 1)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 5, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 10, 6, 7, 8, 9], k = 2)"
    ],
    "sample_148": [
        "finalString(s = 'pointer')",
        "finalString(s = \"pointer\")",
        "finalString(s = 'interesting')",
        "finalString(s = 'pinter')",
        "finalString(s = \"internationalization\")",
        "finalString(s = 'string')",
        "finalString(s = 'poniters')",
        "finalString(s = \"ponter\")",
        "finalString(s = \"interstellar\")",
        "finalString(s = \"rintp\")"
    ],
    "sample_231": [
        "countWays(nums = [0, 2, 3])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 3, 5, 7, 9])",
        "countWays(nums = [1, 0, 2])",
        "countWays(nums = [0,0,0,0])",
        "countWays(nums = [-2, 0, 1, 3])",
        "countWays(nums = [0, 1, 3, 5, 7, 9, 11])",
        "countWays(nums = [2, 3, 4, 5, 7, 8])",
        "countWays(nums = [-2, 1, 0, 0, 1, 2, 3])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [1,2,3])",
        "countBeautifulPairs(nums = [123,234,345])",
        "countBeautifulPairs(nums = [1,3,5,7,9])",
        "countBeautifulPairs(nums = [3,1,2,5])",
        "countBeautifulPairs(nums = [1,3,2,6,4,5])",
        "countBeautifulPairs(nums = [2,1,3,6,4,7,8])",
        "countBeautifulPairs(nums = [12,21,5,61])",
        "countBeautifulPairs(nums=[10,1,20,3,100,4])",
        "countBeautifulPairs(nums = [123,125,321,111,113,131,133,311,313,331])",
        "countBeautifulPairs(nums = [1122, 4245, 2459, 1241, 4212])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 23, num2 = 2)",
        "makeTheIntegerZero(num1 = 34, num2 = 4)",
        "makeTheIntegerZero(num1 = 40, num2 = 7)",
        "makeTheIntegerZero(num1 = 2147483647, num2 = 2)",
        "makeTheIntegerZero(num1 = 24, num2 = 32)",
        "makeTheIntegerZero(num1 = 1000000, num2 = 2)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"enev\")",
        "makeSmallestPalindrome(s = 'evne')",
        "makeSmallestPalindrome(s = 'evne')",
        "makeSmallestPalindrome(s = 'ene')",
        "makeSmallestPalindrome(s = 'nneve')"
    ],
    "sample_165": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"test\"], s = \"this\")",
        "isAcronym(words = [\"internationalization\", \"is\"], s = \"i18n\")",
        "isAcronym(words = [\"international\", \"order\", \"of\", \"mars\"], s = \"IOM\")",
        "isAcronym(words = [\"I\", \"have\", \"an\", \"apple\", \"in\", \"my\", \"hand\"], s = \"IHAMIH\")",
        "isAcronym(words = [\"adobe\", \"flash\", \"acrobat\"], s = \"aac\")",
        "isAcronym(words = [\"international\", \"inter-net\", \"internet\"], s = \"i\")",
        "isAcronym(words = [\"Dreaded\", \"Soul\", \"Stealer\"], s = \"DSS\")",
        "isAcronym(words = [\"Nor\", \"Terry\", \"Jim\"], s = \"NTERYJIM\")",
        "isAcronym(words = [\"hierarchy\", \"discipline\", \"interpretation\"], s = \"HDI\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 2, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1,0,0])",
        "numberOfGoodSubarraySplits(nums=[0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,1,2,4,3], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 2, 2, 2, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 1, 0, 1, 99], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 1, 2, 1, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 5, 7, 4, 6, 9], k = 1)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 5)"
    ],
    "sample_227": [
        "countWays(nums = [-1, 0, 1, 2])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [-2, 0, 1, 3])",
        "countWays(nums = [-1, 0, 1, 2, 3])",
        "countWays(nums = [2, 3, 1, 0, 4])",
        "countWays(nums = [10, 15, 3, 7])",
        "countWays(nums = [2, 3, 1, 0, 2])",
        "countWays(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "countWays(nums = [-1, -1, 0, 1, 2])",
        "countWays(nums = [-1, 2, 3, 5, 7, 4])"
    ],
    "sample_39": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aabbcc\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"00110\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"xxyy\")",
        "minimumCost(s = \"1000\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLL\")",
        "furthestDistanceFromOrigin(moves = \"RRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"R_LR\")",
        "furthestDistanceFromOrigin(moves = \"LL__RRRRR__LRLRLR__\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1,2,1,3])",
        "countCompleteSubarrays(nums = [2, 1, 2, 4, 2, 3])",
        "countCompleteSubarrays(nums = [0, 1, 2, 5, 2, 3, 1, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 5, 6, 4, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [2, 5, 2, 1, 2])",
        "countCompleteSubarrays(nums = [10, 2, 4, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 2, 3, 2, 2, 2, 3, 4, 4])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 2, 1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 3, 2, 4, 5, 6, 7, 8], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14], threshold = 10)",
        "longestAlternatingSubarray(nums = [3, 2, 1, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 3, 1, 2, 4, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 1, 3, 4, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 3, 2, 4, 2, 5, 6, 7], threshold = 2)",
        "longestAlternatingSubarray(nums = [0,0,1,1,1,1,0,0,1,1,1,1,1,1], threshold = 0)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [1, 3], [2, 3]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[0, 1], [2, 3], [4, 5], [6, 7]])",
        "numberOfPoints(nums = [[1,2],[1,4],[2,3]])",
        "numberOfPoints(nums = [[3, 10], [1, 5], [8, 12]])",
        "numberOfPoints(nums = [[1,3], [1,7], [3,5]])",
        "numberOfPoints(nums = [[0, 3], [6, 10], [12, 15]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 5], [1, 3], [2, 5], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7], [2, 3]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [1, 4], [4, 5], [6, 7], [6, 7], [6, 7]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 3])",
        "countBeautifulPairs(nums = [1, 3, 5, 7])",
        "countBeautifulPairs(nums = [123, 234, 345])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90])",
        "countBeautifulPairs(nums = [12, 28, 46, 32, 50, 30])",
        "countBeautifulPairs(nums = [5, 2, 6, 1, 4])",
        "countBeautifulPairs(nums = [12,3,4,8])",
        "countBeautifulPairs(nums = [12, 15, 10, 5])",
        "countBeautifulPairs(nums = [12, 18, 20, 100, 100])",
        "countBeautifulPairs(nums = [43, 14, 67, 27])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,2,1], t = 2)",
        "longestAlternatingSubarray(nums = [2,3,1,4], t = 2)",
        "longestAlternatingSubarray(nums = [2,1,2,4,3], t = 3)",
        "longestAlternatingSubarray(nums = [0,1,2,3,4], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,1,2,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], t = 1)",
        "longestAlternatingSubarray(nums = [3,2,4,1,2,3,1,2,4,1], t = 2)",
        "longestAlternatingSubarray(nums= [1, 2, 2, 3, 5, 3, 2, 2, 3], t= 3)",
        "longestAlternatingSubarray(nums = [5, 6, 7, 11, 12, 14, 15], t = 13)"
    ],
    "sample_36": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"xyyx\")",
        "minimumCost(s = \"aa\")",
        "minimumCost(s = \"0110\")",
        "minimumCost(s = \"01010101\")",
        "minimumCost(s = \"abcda\")",
        "minimumCost(s = \"42\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"AABCDCD\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABACDCD\")",
        "minLength(s = \"ABABCDAB\")",
        "minLength(s = \"ACDCDAB\")",
        "minLength(s = \"CABACD\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,4,2,7,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [3,1,4,1,5], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,4,7,11], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,2,2], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,2,3,1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], modulo=5, k=2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,0,0], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 4, 2, 1, 2, 7, 8], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,4,8,1,2,4,8,1,2,4,8], modulo = 5, k = 2)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 1], [2, 0]])",
        "colorTheArray(n = 3, queries = [[1, 2], [1, 3], [2, 3]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [0, 0]])",
        "colorTheArray(n = 4, queries = [[0, 1], [0, 1], [1, 2], [2, 3], [0, 1], [1, 2], [0, 1], [1, 2], [0, 1], [1, 2], [0, 1], [1, 2]])",
        "colorTheArray(n = 10, queries = [[5, 2], [5, 4], [1, 7], [2, 9], [8, 3], [7, 7], [8, 6], [4, 4], [4, 1], [2, 7]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 5, 2, 4, 1],\n                              nums2 = [2, 3, 3, 2, 4])",
        "maxNonDecreasingLength(nums1 = [4, 2, 2, 2, 4], nums2 = [4, 3, 2, 1, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [5, 2, 3, 6])",
        "maxNonDecreasingLength(nums1 = [4, 2, 1], nums2 = [5, 3, 3])",
        "maxNonDecreasingLength(nums1 = [10, 2, 6, 5, 4], nums2 = [4, 10, 4, 3, 8])",
        "maxNonDecreasingLength(nums1 = [6, 2, 1, 5], nums2 = [1, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 1, 3, 2, 3], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 4, 5], nums2 = [4, 2, 3, 5, 4, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 3, 2], nums2 = [5, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [10, 9, 2, 5, 3, 7, 101, 18],\n                              nums2 = [2, 7, 4, 10, 11, 5, 12, 15])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 10, target = 11)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7])",
        "findValueOfPartition(nums = [1, 1, 1, 1, 1, 1])",
        "findValueOfPartition(nums = [1, 2, 5, 10])",
        "findValueOfPartition(nums = [2, 3, 1, 4])",
        "findValueOfPartition(nums = [2, 1, 0, 1])",
        "findValueOfPartition(nums = [1, 5, 10, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "findValueOfPartition(nums = [1,1000000001])",
        "findValueOfPartition(nums = [4, 4, 0, 1])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"LL__RR_\")",
        "furthestDistanceFromOrigin(moves = \"_RRR__\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLR_RLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRRR_____L\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLL__R\")",
        "furthestDistanceFromOrigin(moves = \"RRR_L_LRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LR_LRLLRRRLR_\")",
        "furthestDistanceFromOrigin(moves = \"__RR_L_RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LRR_RLL_RRL\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [0, 1, 0])",
        "minimumIndex(nums = [1, 4, 4, 6, 1, 4, 5])",
        "minimumIndex(nums = [1, 2, 2])",
        "minimumIndex(nums = [1, 2, 1, 2, 1])",
        "minimumIndex(nums = [3, 1, 2, 2])",
        "minimumIndex(nums = [4, 3, 4, 4, 2])",
        "minimumIndex(nums = [1,2,3,1])",
        "minimumIndex(nums = [0, 1, 2, 1, 0, 3])",
        "minimumIndex(nums = [1, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [5, 1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [2, 3, 5, 1, 4])",
        "semiOrderedPermutation(nums = [1, 5, 4])",
        "semiOrderedPermutation(nums = [0, 1, 2, 3, 4, 5, 6])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n=2, k=2)"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [0, 1, 2, 3])",
        "alternatingSubarray(nums = [1,2,4,5,3])",
        "alternatingSubarray(nums = [2, 1, 2, 3, 2, 4, 2, 2])",
        "alternatingSubarray(nums = [1,2,3,4,3,2])",
        "alternatingSubarray(nums = [2, 2, 2, 3, 2, 4, 2, 2])",
        "alternatingSubarray(nums = [1,2,2,2,1,2,3,3,3,2,2,1])"
    ],
    "sample_310": [
        "matrixSum(a = [[0, 0], [0, 0]])",
        "matrixSum(a = [[1, 2, 3], [1, 2, 3]])",
        "matrixSum(a = [[1, 0], [1, 0]])",
        "matrixSum(a = [[0, 0, 0], [0, 0, 0], [0, 0, 1]])",
        "matrixSum(a = [[1,1], [1,1]])",
        "matrixSum(a = [[1, 1], [1, 0]])",
        "matrixSum(a = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])",
        "matrixSum(a = [[1, 2], [1, 3], [1, 3]])",
        "matrixSum(a = [[2, 1], [3, 3]])",
        "matrixSum(a = [[1, 2, 3, 4, 5], [2, 1, 2, 1, 2]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 0, 1, 0], [1, 1, 0, 1], [1, 0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 0, 0],\n                            [1, 1, 1],\n                            [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 1], [0, 0, 0, 1], [1, 1, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 1], [1, 0, 1, 1], [0, 1, 0, 1], [1, 1, 1, 0]])",
        "findChampion(grid = [[1, 1, 1, 1, 1],\n                            [0, 0, 1, 1, 0],\n                            [1, 1, 1, 0, 0],\n                            [1, 1, 0, 1, 0],\n                            [1, 0, 1, 0, 0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "matrixSum(a = [[1, 2, 3], [1, 2, 3]])",
        "matrixSum(a = [[0, 1, 2], [0, 1, 2], [0, 1, 2]])",
        "matrixSum(a = [[0,0], [1,1]])",
        "matrixSum(a = [[1, 3, 5], [2, 4, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 1], [2, 3]])",
        "matrixSum(a = [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20], [5, 10, 15, 20, 25]])",
        "matrixSum(a = [[1, 0, 1, 0, 1]])",
        "matrixSum(a = [[1, 3, 5], [2, 3, 4], [6, 7, 8]])",
        "matrixSum(a = [[1, 2, 3], [0, 4, 6], [7, 9, 1]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,7,4,9,2,5])",
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"fellow\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\", \"coconut\"], x = \"ana\")",
        "findWordsContaining(words = [\"banana\", \"haha\", \"apple\"], x = \"ana\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"lol\"], x = \"x\")",
        "findWordsContaining(words = [\"fun\", \"function\", \"funk\"], x = \"n\")",
        "findWordsContaining(words = [\"anna\", \"banana\", \"apples\"], x = \"na\")",
        "findWordsContaining(words = [\"qwer\", \"asdfg\", \"zxcvb\", \"qwerqwer\"], x = \"e\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"goes\"], x = \"e\")",
        "findWordsContaining(words = [\"dancin\", \"dancing\", \"dance\"], x = \"anc\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ab\")",
        "canBeEqual(s1 = \"0110\", s2 = \"1100\")",
        "canBeEqual(s1 = \"bbbbb\", s2 = \"bbbbb\")",
        "canBeEqual(s1 = \"x-\", s2 = \"y-\")",
        "canBeEqual(s1 = \"the\", s2 = \"teh\")",
        "canBeEqual(s1 = \"fairy\", s2 = \"grace\")",
        "canBeEqual(s1 = \"aqaaqaaaqaa\", s2 = \"aqaaqaaaqaa\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 2)",
        "lengthOfLongestSubsequence(nums = [-2,1,-3,4,-1,2,1,-5,4], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 2)",
        "lengthOfLongestSubsequence(nums = [2], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 21)",
        "lengthOfLongestSubsequence(nums = [2, 6, 3, 1], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 6, 7, 8, 9], target = 10)",
        "lengthOfLongestSubsequence(nums = [5, 5, 2, 1, 3], target = 9)",
        "lengthOfLongestSubsequence(nums = [2, 6, 4, 9, 8, 10], target = 14)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"cdeab\")",
        "canBeEqual(s1 = \"test\", s2 = \"test\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bbb\")",
        "canBeEqual(s1 = \"acd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"geek\", s2 = \"eegk\")",
        "canBeEqual(s1 = \"az\", s2 = \"axz\")",
        "canBeEqual(s1 = \"gbe\", s2 = \"ceb\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [5, 1, 3, 5])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 3, 2, 4])",
        "maxSubarrays(nums = [1, -2, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 1, 1, 1])",
        "maxSubarrays(nums = [2, 3, 1, 5, 3])",
        "maxSubarrays(nums = [0,1,2,3,0,4,5,6])",
        "maxSubarrays(nums = [5, 4, 1, 3, 5, 1, 2, 4, 2])",
        "maxSubarrays(nums = [10, -7, 5, -7, 5])"
    ],
    "sample_315": [
        "buyChoco(prices = [3, 2, 1], money = 10)",
        "buyChoco(prices = [2, 3, 5], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 12)",
        "buyChoco(prices = [5, 2], money = 10)",
        "buyChoco(prices = [4, 2, 1], money = 7)",
        "buyChoco(prices = [1, 5, 9], money = 4)",
        "buyChoco(prices = [1, 3, 6], money = 20)",
        "buyChoco(prices = [10, 10, 5, 5], money = 25)",
        "buyChoco(prices = [5, 10, 10, 10, 10, 10], money = 20)",
        "buyChoco(prices = [15,15,15,15,15], money = 20)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,2], l = 2, r = 3)",
        "countSubMultisets(nums = [1, 2, 2], l = 1, r = 2)",
        "countSubMultisets(nums = [3,1,2,4], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 3], l = 2, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 5)",
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 2)",
        "countSubMultisets(nums = [1,2,3], l = 0, r = 0)",
        "countSubMultisets(nums = [1,2,2], l = 0, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 0, r = 10)"
    ],
    "sample_322": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 10)",
        "isFascinating(n = 9)",
        "isFascinating(n = 22)",
        "isFascinating(n = 512)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"ab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcde\")",
        "canBeEqual(s1 = \"ABCDE\", s2 = \"BCDEA\")",
        "canBeEqual(s1 = \"abac\", s2 = \"baaac\")",
        "canBeEqual(s1 = \"student\", s2 = \"tust\")",
        "canBeEqual(s1 = \"zerozero\", s2 = \"zeroone\")",
        "canBeEqual(s1 = \"aaaacccbbbb\", s2 = \"aabbccbb\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [2, 5, 3, 7])",
        "minimumCoins(prices = [2, 5, 3, 7])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 3, 4, 5, 6])",
        "minimumCoins(prices = [3, 1, 3, 1, 2, 5, 6, 3, 5, 4])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 25)",
        "accountBalanceAfterPurchase(p = 25)",
        "accountBalanceAfterPurchase(p = 25)",
        "accountBalanceAfterPurchase(p = 55)",
        "accountBalanceAfterPurchase(p = 30)",
        "accountBalanceAfterPurchase(p = 85)",
        "accountBalanceAfterPurchase(p = 49)",
        "accountBalanceAfterPurchase(p = 27)",
        "accountBalanceAfterPurchase(p = 134)",
        "accountBalanceAfterPurchase(p = 194)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3, 1, 2, 3])",
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "minOperations(nums = [0, 0, 0, 1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 3, 3])",
        "minOperations(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minOperations(nums = [0,1,2,1])",
        "minOperations(nums = [3, 3, 3, 4, 2, 2])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,7,4,9,2,5])",
        "alternatingSubarray(nums = [1,7,4,9,2,5])",
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7])",
        "alternatingSubarray(nums = [1,2,2,3,3,3])",
        "alternatingSubarray(nums = [0,1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,4,5,7,8])",
        "alternatingSubarray(nums = [3, 6, 4, 7, 8])",
        "alternatingSubarray(nums = [2, 3, 1, 4, 5])"
    ],
    "sample_460": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 12, limit = 3)",
        "distributeCandies(n = 11, limit = 4)",
        "distributeCandies(n = 13, limit = 7)"
    ],
    "sample_247": [
        "minOperations(s1 = \"11111\", s2 = \"10000\", x = 2)",
        "minOperations(s1 = \"0100\", s2 = \"1001\", x = 2)",
        "minOperations(s1 = \"aaaaa\", s2 = \"bbbbb\", x = 2)",
        "minOperations(s1 = \"00100\", s2 = \"11100\", x = 1)",
        "minOperations(s1 = \"aabbcc\", s2 = \"aabbcd\", x = 2)",
        "minOperations(s1 = \"aab\", s2 = \"bca\", x = 1)",
        "minOperations(s1 = \"qwr\", s2 = \"qaz\", x = 2)",
        "minOperations(s1 = \"aaa\", s2 = \"bca\", x = 3)",
        "minOperations(s1 = \"100010001000110\", s2 = \"1010101010101010\", x = 2)",
        "minOperations(s1 = \"111100100\", s2 = \"1110100110\", x = 1)"
    ],
    "sample_340": [
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 1, y = 1, z = 2)",
        "longestString(x = 1, y = 1, z = 2)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 3, y = 1, z = 4)",
        "longestString(x = 4, y = 2, z = 1)",
        "longestString(x = 4, y = 2, z = 5)",
        "longestString(x = 5, y = 7, z = 1)",
        "longestString(x = 5, y = 7, z = 1)",
        "longestString(x = 6, y = 4, z = 8)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 3, 4, 2, 6, 5], k = 3)",
        "minOperations(nums = [3, 2, 1, 2, 4, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 4, 5, 6], k = 3)",
        "minOperations(nums = [2, 6, 4, 8, 10], k = 5)",
        "minOperations(nums = [2, 3, 3, 4, 4], k = 1)",
        "minOperations(nums = [1, 3, 4, 2, 2, 2, 3, 4, 3, 5, 5, 5, 6], k = 4)",
        "minOperations(nums = [2, 3, 3, 2, 4, 2, 2, 5], k = 2)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdee\")",
        "longestSemiRepetitiveSubstring(s = \"abcaaba\")",
        "longestSemiRepetitiveSubstring(s = \"bbaabbba\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 1])",
        "isGood(a = [1, 1, 2, 2, 3, 3])",
        "isGood(a = [1, 2, 2, 3, 3, 4])",
        "isGood(a = [1,2,3])",
        "isGood(a = [1,2,3])",
        "isGood(a = [1, 2, 3, 1, 4, 2])",
        "isGood(a = [1, 1, 0, 1, 2, 2])",
        "isGood(a = [0, 0, 1, 2, 3, 4, 5])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])",
        "isGood(a = [1, 3, 4, 5, 2, 5, 4, 2, 2, 1, 4])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 5, m = 4)",
        "differenceOfSums(n = 7, m = 4)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [5, 2, 3, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 0, 2, 3, 1, 4, 0, 1])",
        "minGroupsForValidAssignment(nums = [3, 1, 1, 4, 4, 4, 4, 5, 5, 5, 5, 1, 1, 1, 1, 4, 4, 5, 5, 5, 5, 5, 1, 4, 4, 4, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"4\", \"prev\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"prev\", \"prev\", \"1\", \"2\", \"prev\", \"1\", \"prev\", \"1\", \"prev\", \"1\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcab\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cde\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"acab\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"this\", \"pair\", \"of\", \"strings\", \"will\", \"create\", \"just\", \"one\", \"pair\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 1)",
        "shortestBeautifulSubstring(s = \"11001\", k = 2)",
        "shortestBeautifulSubstring(s = '011010110', k = 2)",
        "shortestBeautifulSubstring(s = \"1111111111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 4)",
        "shortestBeautifulSubstring(s = \"101010\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011011110110111100111011110111101101111001100101100110011011110111111111011111111111011011111111111110111111111111111110111111111111111111011111111111111111111011111111111111111111111101111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [2, 5, 1, 3, 4])",
        "minimumRightShifts(nums = [3, 8, 9, 7, 6])",
        "minimumRightShifts(nums = [3, 8, 9, 7, 6])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10110\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"0001\")",
        "minimumSteps(s = \"01011100\")",
        "minimumSteps(s = \"000000010001100000\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"baa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"mango\", s3 = \"papaya\")",
        "findMinimumOperations(s1 = \"lol\", s2 = \"lol\", s3 = \"lol\")",
        "findMinimumOperations(s1 = \"aaaaaaaaaa\", s2 = \"bbbbbbbbbb\", s3 = \"bbbbbbbbbb\")",
        "findMinimumOperations(s1 = \"ABCDE\", s2 = \"ABC\", s3 = \"ACDE\")",
        "findMinimumOperations(s1 = \"i\", s2 = \"love\", s3 = \"her\")",
        "findMinimumOperations(s1 = \"ahy\", s2 = \"an\", s3 = \"ah\")",
        "findMinimumOperations(s1 = \"xabcx\", s2 = \"axxxb\", s3 = \"axxxb\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"zyxw\")",
        "canMakeSubsequence(str1 = \"ae\", str2 = \"bfae\")",
        "canMakeSubsequence(str1 = \"wkp\", str2 = \"wqp\")"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [5, 4, 3, 2, 1])",
        "isGood(nums=[1,2,3,4,5])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums=[1,2,3,4,5,6])",
        "isGood(nums = [3, 2, 1, 4])",
        "isGood(nums = [2, 3, 4, 1])",
        "isGood(nums = [1, 2, 3, 5, 6, 7])",
        "isGood(nums=[1,2,3,4,5,6,7,8,9,10])",
        "isGood(nums = [1,2,3,4,6,7])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 2, 3], target = 8)",
        "countPairs(nums = [1, 1, 1], target = 2)",
        "countPairs(nums = [1, 3, 2, 4], target = 6)",
        "countPairs(nums = [0, 1, 2, 3], target = 2)",
        "countPairs(nums = [1, 4, 45, 6, 0, 19], target = 20)",
        "countPairs(nums = [0, 2, 4], target = 5)",
        "countPairs(nums = [2, 5, 3, 7, 4], target = 10)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [5, 9])",
        "relocateMarbles(nums = [6, 5, 8, 9], moveFrom = [6], moveTo = [8])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7], moveTo = [6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3], moveTo = [9, 7])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [1,2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [3, 4], moveTo = [6, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [2, 4, 6, 8], moveTo = [1, 3, 5, 7])",
        "relocateMarbles(nums = [8, 4, 6, 2, 3, 9, 5, 1, 7], moveFrom = [4, 3], moveTo = [6, 2])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3], target = 6)",
        "countPairs(nums = [1, 2, 3], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 1, 1, 1], target = 3)",
        "countPairs(nums = [2, 3, 4, 5], target = 9)",
        "countPairs(nums = [1, 2, 3, 5], target = 11)",
        "countPairs(nums = [3, 1, 1, 1, 1], target = 2)",
        "countPairs(nums = [2, 5, 11, 15], target = 11)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals(nums = [3,1,2])",
        "minLengthAfterRemovals(nums = [1,2,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [3,3,7,7,7,7])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Steve Rogers, 50\", \"Tony Stark, 55\", \"Bruce Wayne, 75\"])",
        "countSeniors(details = [\"Robert Burns, 72\", \"Patrick Swayze, 57\", \"John Cleese, 69\", \"Meg Ryan, 63\"])",
        "countSeniors(details = [\"Emily Geller, 25\", \"Hannah Geller, 30\", \"Murray Geller, 65\"])",
        "countSeniors(details = [\"Jerry 20\", \"Ally 40\", \"John 80\", \"Holly 65\"])",
        "countSeniors(details = [\"Lisa, 22\", \"Peter, 18\", \"Jenny, 43\", \"Danni, 16\"])",
        "countSeniors(details = [\"name:Joana;age:29;\", \"name:Bob;age:40;\", \"name:Chuck;age:50;\", \"name:Fred;age:10;\"])",
        "countSeniors(details = [\"Mr. John Doe, 20, Male, Student, 000-000-0000\",\n                               \"Mr. Joe Smith, 100, Male, Doctor, 000-000-0000\",\n                               \"Ms. Jane Doe, 30, Female, Student, 000-000-0000\"])",
        "countSeniors(details = [\"age: 30, sex: m\", \"age: 73, sex: m\", \"age: 56, sex: m\", \"age: 76, sex: m\", \"age: 65, sex: f\", \"age: 68, sex: f\", \"age: 31, sex: f\", \"age: 34, sex: f\", \"age: 38, sex: f\"])",
        "countSeniors(details = [\"Name: Nina Francis, Age: 60\", \"Name: Manjula Francis, Age: 29\", \"Name: Nina Francis, Age: 39\", \"Name: Jacob Martin, Age: 34\", \"Name: Nina Francis, Age: 44\"])",
        "countSeniors(details = [\"2375 Jamil Norton\", \"3164 Dorian Lester\", \"1295 Roberta Dillard\", \"3534 Donald Solomon\", \"1576 Mariana Nicholson\", \"0263 Theo Mckinney\", \"2912 Alison Massey\", \"2833 Dena Underwood\", \"1192 Kellie Stone\", \"2670 Davidson Baird\", \"3659 Norris Lester\", \"1611 Mckenzie Snyder\", \"1513 Jeremiah Rush\", \"3244 Jimmie Lester\", \"1637 Alana Buckley\", \"0504 Zora Marley\", \"2974 Kristi Carr\", \"1860 Shannon Hess\", \"3790 Jose Lara\", \"2735 Vance Arnold\", \"1099 Roxy Cruz\", \"0545 Alena Le\", \"3022 Thomas Reed\", \"1081 Elena Lara\", \"3604 Karina Owens\", \"1798 Melissa Mckay\", \"3033 Albert Palmer\", \"0289 Lorena Solomon\", \"3249 Dennis Lawson\", \"3540 June Owens\", \"0917 Shannon Wilder\", \"2637 Dennis Bryan\", \"3000 Cecil Vance\", \"1080 Ramona Solomon\", \"0924 Sheree Robertson\", \"2894 Mattie Macias\", \"3192 Sheree Tran\", \"2464 Leigh Vance\", \"0884 William Jenkins\", \"1650 Deidra Smith\", \"1322 Brian Bowman\", \"3497 Bessie House\", \"2417 Shanice Reid\", \"2687 Bobbi Mills\", \"2225 Denise Vance\", \"3680 Gloria Hurst\", \"1229 Lea Mueller\", \"3291 Gail Sellers\", \"1697 Nicole Kelly\", \"3475 Elisha Underwood\", \"1254 Anthony Carpenter\", \"1292 Cynthia Crawford\", \"0200 Josephine Downs\", \"2238 Gerry Mendoza\", \"1496 Maggie Reid\", \"1809 Janet Craig\", \"0216 Rene Dunn\", \"2847 Gloria Turner\", \"3616 Jerry Frye\", \"3916 Pat Vance\", \"2758 Milton Dyer\", \"0162 Janet Mullins\", \"2"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"bbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"aabaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaba\")",
        "longestSemiRepetitiveSubstring(s = \"ababacab\")",
        "longestSemiRepetitiveSubstring(s = \"abcaabcac\")",
        "longestSemiRepetitiveSubstring(s = \"bbaabbcc\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"aaaa\", s2 = \"bbbb\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"acbde\")",
        "canBeEqual(s1 = \"aacb\", s2 = \"cbaa\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"acebz\")",
        "canBeEqual(s1 = \"1122\", s2 = \"2222\")",
        "canBeEqual(s1 = \"cabc\", s2 = \"caba\")",
        "canBeEqual(s1 = \"gay\", s2 = \"age\")",
        "canBeEqual(s1 = \"gdba\", s2 = \"gdca\")",
        "canBeEqual(s1 = \"Dvdf\", s2 = \"vDfd\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"yz\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"helloworld\", s2 = \"helloworld\", s3 = \"helloworld\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banan\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"baba\", s2 = \"bab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abxdef\", s3 = \"abcdxy\")",
        "findMinimumOperations(s1 = \"aaabbb\", s2 = \"aabbbb\", s3 = \"bbbbbb\")",
        "findMinimumOperations(s1 = \"azerty\", s2 = \"azertyuiop\", s3 = \"azertyuiopqsdfghjklm\")",
        "findMinimumOperations(s1 = \"abac\", s2 = \"acbac\", s3 = \"abcabc\")",
        "findMinimumOperations(s1 = \"eeeeeeeee\", s2 = \"ababababab\", s3 = \"bcbcbcbcbcb\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 2, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [4,2,7,1,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,4,6,8,10,12,14,16,18,20], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,1,3,5,7,2,1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5, 7, 8, 9, 10, 13, 15, 18, 21], target = 20)",
        "lengthOfLongestSubsequence(nums = [1, 3, 4, 10, 12, 23, 24, 25], target = 25)",
        "lengthOfLongestSubsequence(nums = [-5, 1, 1, 4, 1, 1, 2, -1, 2, 3, 1, 4, 3, 1, 2, -3, 1, 1, -1, 3, 2, 4, 1, 2, 1, 1, 3, 4, -2, 2, -1, 4, 2, -3, 2, 4, 1, -3, 3, 3, 1, 2, 3, 1, 4, 1, 3, -2, 1, 4, 2, -2, -2, 2, 2, -1, 4, 1, 1, 3, 1, 3, 1, 1, 2, 1, 4, 1, 4, 3, 1, -1, 2, 2, 2, 2, -2, 1, 2, -1, 2, 2, -2, 1, 2, 2, -1, 2, 2, 1, 2, 3, -4, 2, -2, 2, -2, 2, 2, -4, 1, -1, 2, 2, 3, 1, 1, -3, 2, 2, -4, 1, 1, 2, 3, 4, -2, 2, -3, 1, 4, -3, 4, -4, 1, 1, -2, 2, 2, 1, 2, 3, 2, 2, 3, 1, 4, 1, 3, -3, 2, 2, -4, 1, 1, 2, 3, 2, 2, 3, 1, 4, 1, 3, -3, 2, 2, -4, 1, 1, 2, 3, 2, 2, 3, 1, 4, 1, 3, -3, 2, 2, -4, 1,"
    ],
    "sample_257": [
        "minimumSum(nums = [3, 1, 2, 4])",
        "minimumSum(nums = [2, 1, 2])",
        "minimumSum(nums = [3,1,2,4])",
        "minimumSum(nums = [1, 1, 1, 1, 1, 1])",
        "minimumSum(nums = [2, 3, 4, 7, 8, 10])",
        "minimumSum(nums = [2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [1, 2, 1, 3, 2, 4])",
        "minimumSum(nums = [1, 10, 20, 5, 1])",
        "minimumSum(nums = [8, 7, 1, 9, 6, 2, 10, 5, 8, 4, 1, 6, 4])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"cat\", \"banana\", \"dog\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"bt\", \"xyzt\"])",
        "minimizeConcatenatedLength(words = [\"bab\", \"aba\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"cab\", \"abc\", \"bac\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"s\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"pct\", \"c\", \"t\"])",
        "minimizeConcatenatedLength(words = [\"st\", \"xy\", \"ct\"])",
        "minimizeConcatenatedLength(words = [\"ntx\", \"ncu\", \"dqo\", \"nmx\", \"kpz\", \"qkp\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"111111\", k = 4)",
        "shortestBeautifulSubstring(s = \"1001001\", k = 4)",
        "shortestBeautifulSubstring(s = '00110', k = 2)",
        "shortestBeautifulSubstring(s = \"01100110\", k = 4)",
        "shortestBeautifulSubstring(s = \"11111111111\", k = 6)",
        "shortestBeautifulSubstring(s = '1110101', k = 2)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"cat\",\"banana\",\"dog\",\"nana\",\"walk\",\"walker\"])",
        "minimizeConcatenatedLength(words = [\"geeks\", \"for\", \"geeks\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\",\"ef\"])",
        "minimizeConcatenatedLength(words = [\"pine\", \"apple\", \"pen\"])",
        "minimizeConcatenatedLength(words = [\"dog\",\"cat\",\"moon\"])",
        "minimizeConcatenatedLength(words = [\"10\",\"01\",\"10\"])",
        "minimizeConcatenatedLength(words = [\"abcdef\", \"fghijkl\", \"klmno\", \"pqrst\", \"tuvwxyz\"])",
        "minimizeConcatenatedLength(words = [\"play\",\"lead\",\"plea\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"vv\", \"ss\", \"tt\", \"cc\", \"dd\"])",
        "minimizeConcatenatedLength(words = [\"den\", \"revers\", \"en\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 7, m = 2)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,2,3])",
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray(nums = [0,1,1,0,1])",
        "alternatingSubarray(nums = [0,2,1,3])",
        "alternatingSubarray(nums = [2,4,3,5])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [2,1,2,4,3])",
        "findMaximumLength(nums = [3,2,2,4,3])",
        "findMaximumLength(nums = [1,1,2,3])",
        "findMaximumLength(nums = [0,0])",
        "findMaximumLength(nums = [2,1,1])",
        "findMaximumLength(nums = [1,2,3,3,4,5])",
        "findMaximumLength(nums = [2, 1, 3, 5, 2, 3, 6])",
        "findMaximumLength(nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20])",
        "findMaximumLength(nums = [1, 2, 1, 2, 3, 2])",
        "findMaximumLength(nums = [3,2,1,4,2,5])"
    ],
    "sample_302": [
        "countSeniors(details = [\"1234567891001234\", \"1234567891001235\", \"1234567891001236\"])",
        "countSeniors(details = [\"name1 2016 10 11 12\", \"name2 2019 10 11 12\", \"name3 2001 10 11 12\"])",
        "countSeniors(details = [\"Name 95, age 40\", \"Name 50, age 90\", \"Name 32, age 13\"])",
        "countSeniors(details = [\"N-S-61-1\", \"F-S-72-1\", \"N-S-62-1\", \"M-S-32-1\"])",
        "countSeniors(details = [\"Mr. Johnson 62\", \"Mrs. Thompson 41\", \"Dr. Grant 40\", \"Mr. Wilson 65\"])",
        "countSeniors(details = [\"Smith, Adam, 1996-09-29\", \"Smythe, Bill, 1989-03-11\", \"Smythe, Jane, 1979-05-29\", \"Smythe, Katie, 1973-01-01\"])",
        "countSeniors(details = [\"Pinky Sharma, Male, 22, 170, 77.9, 190904\", \"Geet Sharma, Female, 72, 170, 52.9, 190904\"])",
        "countSeniors(details = [\"sdaf98432y3434\", \"a3242342sdfsdf1998\", \"sdfasdfasdf1970\"])",
        "countSeniors(details = [\"1988/11/02-Douglas Adams-32\", \"1925/12/25-Oscar Wilde-72\", \"1921/01/01-Grace Hopper-104\", \"2009/11/02-Stephen Hawking-80\", \"2011/01/12-Stephen King-45\"])",
        "countSeniors(details = [\"Alice Fender 32 60 12/08/2018 123.45\", \"Bonnie Green 37 65 14/07/2018 532.10\", \"Charlie Chaplin 20 65 20/09/2018 612.00\", \"Douglas Reynolds 43 64 25/10/2018 100.00\", \"Elmer Fudd 10 70 10/05/2018 1000.00\", \"Freddy Roach 12 70 01/10/2018 1100.00\", \"Gertrude Stein 35 75 26/12/2018 900.00\", \"Hector Hugo 48 69 03/03/2018 1000.00\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"aaaa\", s2 = \"aaba\")",
        "canBeEqual(s1 = \"1234\", s2 = \"2143\")",
        "canBeEqual(s1 = \"ba\", s2 = \"a\")",
        "canBeEqual(s1 = \"324\", s2 = \"432\")",
        "canBeEqual(s1 = \"2233\", s2 = \"3322\")",
        "canBeEqual(s1 = \"acab\", s2 = \"cab\")",
        "canBeEqual(s1 = \"1\", s2 = \"1234\")",
        "canBeEqual(s1 = \"1352\", s2 = \"0000\")",
        "canBeEqual(s1 = \"bcdf\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"2418\", s2 = \"2329\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 3])",
        "minimumCoins(prices = [5, 1, 1, 1, 1])",
        "minimumCoins(prices = [1, 4, 2, 3, 5])",
        "minimumCoins(prices = [10, 5, 15, 30, 15])",
        "minimumCoins(prices = [5, 6, 2, 3, 1, 4, 10])",
        "minimumCoins(prices = [2, 2, 1, 2, 3, 1, 2, 4, 1, 2, 2, 1, 2, 3, 2, 3, 1, 2, 1, 2, 3, 2, 4, 1, 2, 2, 1, 2, 3, 2, 3, 1, 2, 1, 2, 3, 2, 4, 1, 2, 2, 1, 2, 3, 2, 3, 1, 2, 1, 2, 3, 2, 4, 1, 2, 2, 1, 2, 3, 2, 3, 1, 2, 1, 2, 3, 2, 4])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 1, 1, 1, 1])",
        "minimumSeconds(A = [1, 1, 1, 1])",
        "minimumSeconds(A = [0, 0, 0, 0, 0])",
        "minimumSeconds(A = [1,1,1,1,1,1])",
        "minimumSeconds(A = [1,3,4,2])",
        "minimumSeconds(A = [1, 5, 2, 1, 4, 3])",
        "minimumSeconds(A = [1,2,2])",
        "minimumSeconds(A = [0,1,0,0,1,1])",
        "minimumSeconds(A = [1,2,1,1,1,3])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"bca\", \"abc\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"a\", \"ab\", \"ab\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"c\", \"c\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"aba\", \"sss\", \"xzy\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"at\", \"gt\", \"ct\", \"at\"])",
        "maximumNumberOfStringPairs(words = [\"myname\", \"nyname\", \"subder\", \"subder\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 0], nums2 = [0, 3, 0])",
        "minSum(nums1 = [1, 1, 0, 1], nums2 = [1, 1, 0, 1])",
        "minSum(nums1 = [1, 0, 1, 1], nums2 = [1, 0, 1, 1])",
        "minSum(nums1 = [1, 0, 5], nums2 = [2, 3, 0])",
        "minSum(nums1 = [1, 3, 0, 2], nums2 = [1, 2, 3, 0])",
        "minSum(nums1 = [3, 7, 0], nums2 = [1, 2, 3])",
        "minSum(nums1 = [2, 1, 0, 3], nums2 = [4, 5, 6, 7])",
        "minSum(nums1 = [2, 5, 1], nums2 = [4, 4, 5])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"what\", \"a\", \"great\", \"kata\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"kiwi\"], x = \"an\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"fish\"], x = \"t\")",
        "findWordsContaining(words = [\"abc\", \"dabc\"], x = \"abc\")",
        "findWordsContaining(words = [\"the\", \"orange\"], x = \"orange\")",
        "findWordsContaining(words = [\"a\", \"ba\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], x = \"a\")",
        "findWordsContaining(words = [\"pineapple\", \"mango\", \"banana\", \"kiwi\"], x = \"i\")",
        "findWordsContaining(words = [\"str\", \"e\", \"ing\"], x = \"e\")",
        "findWordsContaining(words = [\"rabbit\", \"horse\", \"fog\"], x = \"or\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 4)",
        "maxSum(nums = [1, -1, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 1, k = 2)",
        "maxSum(nums = [1, -2, 3, 1, -4], m = 2, k = 3)",
        "maxSum(nums = [1,-2,1,1,1], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], m = 1, k = 1)",
        "maxSum(nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9], m = 2, k = 5)",
        "maxSum(nums = [2, 3, 6, 1, 7], m = 2, k = 3)",
        "maxSum(nums = [3, 2, 5, 6, 3], m = 1, k = 2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [3], moveTo = [0])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3], moveTo = [5, 3, 4])",
        "relocateMarbles(nums = [3, 2, 1], moveFrom = [2], moveTo = [0])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 3, 4], moveTo = [2, 3, 4])",
        "relocateMarbles(nums = [1,2,3,4,5,6], moveFrom = [1,3,5], moveTo = [4,6,2])",
        "relocateMarbles(nums = [2, 4, 6], moveFrom = [2, 4], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7], moveFrom = [1, 2, 3], moveTo = [7, 5, 3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1], moveTo = [100])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6, 7])",
        "minimumRightShifts(nums = [3, 7, 4, 6, 5])",
        "minimumRightShifts(nums = [4, 0, 1])",
        "minimumRightShifts(nums = [5, 6, 2, 4, 1])",
        "minimumRightShifts(nums = [1, 10, 20, 100, 1000])"
    ],
    "sample_314": [
        "buyChoco(prices = [2, 3], money = 4)",
        "buyChoco(prices = [10, 20, 30], money = 20)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], money = 15)",
        "buyChoco(prices = [2, 5, 3, 1], money = 7)",
        "buyChoco(prices = [8, 10], money = 20)",
        "buyChoco(prices = [2, 4, 8, 9], money = 10)",
        "buyChoco(prices = [30, 10, 20], money = 30)",
        "buyChoco(prices = [3, 3, 3], money = 1)",
        "buyChoco(prices = [10000, 20000, 30000, 40000, 50000], money = 10000)",
        "buyChoco(prices = [2, 1, 3, 1, 5, 5, 1, 1, 5, 1, 3, 1, 1, 3, 1, 3, 1, 5, 1], money = 5)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [5, 1, 3, 4, 7], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 50)",
        "lengthOfLongestSubsequence(nums = [1], target = 2)",
        "lengthOfLongestSubsequence(nums = [5, 1, 3, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 4, 5, 7, 8], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 4, 1, 6], target = 6)",
        "lengthOfLongestSubsequence(nums = [-1, -2, 3, -4, -5], target = -2)",
        "lengthOfLongestSubsequence(nums = [-1, 3, -1, 5, -1, 6], target = -2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5], target = 9)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"aabccbb\")",
        "longestSemiRepetitiveSubstring(s = \"bbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabacbab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbba\")",
        "longestSemiRepetitiveSubstring(s = \"bbaac\")",
        "longestSemiRepetitiveSubstring(s = \"aabcde\")",
        "longestSemiRepetitiveSubstring(s = \"bbaaaccd\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"e\")",
        "findWordsContaining(words = [\"banana\", \"banana\", \"banana\"], x = \"na\")",
        "findWordsContaining(words = [\"cat\", \"bird\", \"dog\"], x = \"t\")",
        "findWordsContaining(words = [\"spam\", \"egg\", \"bacon\"], x = \"am\")",
        "findWordsContaining(words = [\"The\", \"fox\", \"jumps\", \"over\", \"the\", \"dog\"], x = \"the\")",
        "findWordsContaining(words = [\"java\", \"python\", \"javascript\"], x = \"ava\")",
        "findWordsContaining(words = [\"abc\", \"dbe\", \"xyz\"], x = \"e\")",
        "findWordsContaining(words = [\"word1\", \"anan\", \"word3\"], x = \"an\")",
        "findWordsContaining(words = [\"bread\", \"sky\", \"cool\"], x = \"oo\")",
        "findWordsContaining(words = [\"play\", \"pray\", \"playing\", \"platy\"], x = \"lay\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"next\", \"go\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"3\", \"4\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"1\", \"1\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"next\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"prev\", \"2\", \"prev\", \"1\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"3\", \"2\", \"prev\", \"1\", \"1\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"aaaa\", s2 = \"bbbb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bdac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcdf\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edcba\")",
        "canBeEqual(s1 = \"xyxy\", s2 = \"xyyy\")",
        "canBeEqual(s1 = \"azxby\", s2 = \"zbxya\")",
        "canBeEqual(s1 = \"sasasas\", s2 = \"asasas\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3,1,4,2,5])",
        "minimumSum(nums = [1,5,2,3,4])",
        "minimumSum(nums = [1,5,3,4,2])",
        "minimumSum(nums = [3,5,2,7,4])",
        "minimumSum(nums = [1,3,4,6,7,8,10])",
        "minimumSum(nums = [3,4,3,3])",
        "minimumSum(nums = [9, 5, 1, 2, 4])",
        "minimumSum(nums = [2,5,7,8,10,12])",
        "minimumSum(nums = [5,3,7,6,2,9,1])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 1, 3], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [2,1,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 12)",
        "lengthOfLongestSubsequence(\n    nums = [5, 1, 3, 5, 2, 4],\n    target = 9\n)",
        "lengthOfLongestSubsequence(nums = [5, 2, 3, 1, 4], target = 10)",
        "lengthOfLongestSubsequence(\n    nums = [3, 5, 2, 4],\n    target = 10\n)"
    ],
    "sample_368": [
        "sortVowels(s = \"ymph\")",
        "sortVowels(s = \"YmpHl\")",
        "sortVowels(s = 'HmpLy')",
        "sortVowels(s = \"LympH\")",
        "sortVowels(s = 'ylmph')",
        "sortVowels(s = 'HlmpY')",
        "sortVowels(s = \"HylmP\")",
        "sortVowels(s = \"lyMPH\")",
        "sortVowels(s = \"PyThon\")",
        "sortVowels(s = \"yMph\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1,2,3],[1,2,3],[1,2,3]])",
        "matrixSum(nums = [[1,2,3],[1,2,3],[1,2,3]])",
        "matrixSum(nums = [[1,2], [3,4]])",
        "matrixSum(nums = [[1,2,3],[1,2,3]])",
        "matrixSum(nums = [[1,0],[0,1]])",
        "matrixSum(nums = [[1,3,4],[2,3,5]])",
        "matrixSum(nums = [[1,4,7,12,15],[2,5,8,13,19],[3,6,9,14,22],[10,11,18,21,25],[16,17,20,24,26]])",
        "matrixSum(nums = [[5,3,4],[2,3,2],[1,2,4]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [5, 1, 1, 0])",
        "maximumTripletValue(nums = [1, 1, 1, 1, 1, 1])",
        "maximumTripletValue(nums = [-2, 0, 1, 2])",
        "maximumTripletValue(nums = [3, 4, 5, 6, 7])",
        "maximumTripletValue(nums = [7, 7, 7])",
        "maximumTripletValue(nums = [-3, 1, 2, 4, 5])",
        "maximumTripletValue(nums = [-3, -5, -1])",
        "maximumTripletValue(nums = [3, 4, 5, 3, 2, 1])",
        "maximumTripletValue(nums = [-2, -2, 1, 1, 3])",
        "maximumTripletValue(nums = [2, 2, 3, 3, 0, 0, 4, 4, 5, 5])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [0, 1, 1, 0])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [0,1,0])",
        "alternatingSubarray(nums = [1,0,1,0,1])",
        "alternatingSubarray(nums = [0,1,0,1,0,1,99])",
        "alternatingSubarray(nums = [1, 2, 2, 1, 2, 2, 1])",
        "alternatingSubarray(nums = [0,1,1,1,1,0])",
        "alternatingSubarray(nums = [0, 1, 0, 1, 1])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 15)",
        "beautifulSubstrings(s = \"ababa\", k = 2)",
        "beautifulSubstrings(s = \"beautifulsubstrings\", k = 18)",
        "beautifulSubstrings(s = \"abacabad\", k = 7)",
        "beautifulSubstrings(s = \"aabbef\", k = 3)",
        "beautifulSubstrings(s = \"eaeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeioii\", k = 2)",
        "beautifulSubstrings(s = \"aaaee\", k = 5)"
    ],
    "sample_449": [
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"xx\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"1111\")",
        "minChanges(s = \"aaaaaa\")",
        "minChanges(s = \"xyyzyx\")",
        "minChanges(s = \"aaaabbbb\")",
        "minChanges(s = \"00010\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"100\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s = \"101101\")",
        "minimumSteps(s = \"100110\")",
        "minimumSteps(s = \"01110000\")",
        "minimumSteps(s = \"10000111\")",
        "minimumSteps(s = \"001110111\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"MALE,YOUNG,SENIOR\"])",
        "countSeniors(details = [\"01 10 1980\", \"01 11 1980\", \"01 12 1980\", \"01 13 1980\", \"01 14 1980\", \"01 15 1980\", \"01 16 1980\", \"01 17 1980\", \"01 18 1980\", \"01 19 1980\", \"01 20 1980\", \"01 21 1980\", \"01 22 1980\", \"01 23 1980\", \"01 24 1980\", \"01 25 1980\", \"01 26 1980\", \"01 27 1980\", \"01 28 1980\", \"01 29 1980\", \"01 30 1980\", \"01 31 1980\", \"01 10 1970\", \"01 11 1970\", \"01 12 1970\", \"01 13 1970\", \"01 14 1970\", \"01 15 1970\", \"01 16 1970\", \"01 17 1970\", \"01 18 1970\", \"01 19 1970\", \"01 20 1970\", \"01 21 1970\", \"01 22 1970\", \"01 23 1970\", \"01 24 1970\", \"01 25 1970\", \"01 26 1970\", \"01 27 1970\", \"01 28 1970\", \"01 29 1970\", \"01 30 1970\", \"01 31 1970\", \"01 10 1960\", \"01 11 1960\", \"01 12 1960\", \"01 13 1960\", \"01 14 1960\", \"01 15 1960\", \"01 16 1960\", \"01 17 1960\", \"01 18 1960\", \"0",
        "countSeniors(details = [\"313312301234\",\"313312301235\",\"313312301236\",\"313312301237\",\"313312301238\"])",
        "countSeniors(details = [\"Mike Thompson, 23, 62, male, 20000\", \"Albert Einstein, 55, 132, male, 80000\"])",
        "countSeniors(details=[\"Roger Brown, 19890708, 1000\"])",
        "countSeniors(details = [\"11-20-02-04-2-56-0-0-0-0-0-0-20-0-0-0-0-0-20-0-0-0-0-0-0-20-0-0-0-0-0-0-0-0-0-0-0-20-0-0-0-0-0-0-0-0-0-20-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0",
        "countSeniors(details = [\"001412252317\", \"001211004302\", \"001410040823\"])",
        "countSeniors(details = [\"Ronak 23 1998 Male\", \"Akansha 21 2000 Female\", \"Shobhit 22 1999 Male\", \"Vidushi 21 1999 Female\", \"Priya 19 2003 Female\", \"Ritika 20 2004 Female\"])",
        "countSeniors(details = [\"7891234561,John,Smith,Doe,01/01/2001,1234567890,123 St,City,ST,12345,M,M,\",\n\"7891234562,Mark,Jones,Jones,01/01/1900,1234567890,123 St,City,ST,12345,M,M,\",\n\"7891234563,Mary,Talbert,Baker,01/01/1990,1234567890,123 St,City,ST,12345,F,S,\"])",
        "countSeniors(details = [\"Sandeep Kumar 79 8456897\", \"Rahul 82 784567\", \"Karan 66 897845\", \"Sunny 42 8978456\", \"Ranjit 41 978456\", \"Jimmy 39 89784567\", \"Anu 32 89784567\", \"Jack 34 89784567\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5])",
        "minGroupsForValidAssignment(nums = [4,5,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,4,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,10,11])",
        "minGroupsForValidAssignment(nums = [1,0,2,0])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,3,3,4,5,5])",
        "minGroupsForValidAssignment(nums = [3,2,2,1,1,3,2])",
        "minGroupsForValidAssignment(nums = [2,1,4,1,6,3,3,1,2])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[1, 3], [3, 5], [5, 7], [7, 9]], k = 3)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 0], [0, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[1, 1], [1, 0], [0, 1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [2, 2], [2, 1]], k = 1)",
        "countPairs(coordinates = [[2, 1], [3, 2], [3, 4]], k = 2)",
        "countPairs(coordinates = [[0, 1], [1, 1], [0, 0], [1, 0], [2, 1], [1, 2]], k = 2)",
        "countPairs(coordinates = [[1, 0], [1, 1], [0, 1], [0, 0], [0, 2], [1, 2], [2, 1], [2, 0], [2, 2]], k = 1)",
        "countPairs(coordinates = [[2, 3], [3, 2], [5, 4], [1, 1], [1, 1]], k = 2)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 1, 2], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 2, k = 3)",
        "maxSum(nums = [1, -2, 3, 10, -4, 7, 2, -5], m = 2, k = 3)",
        "maxSum(nums = [1, -2, 3, 10, -4, 7, 2, -5], m = 2, k = 3)",
        "maxSum(nums = [1, -1, 2], m = 1, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 3, 2, 4], m = 2, k = 3)",
        "maxSum(nums = [3, 3, 3, 1, 1, 1, 2, 2, 2], m = 3, k = 3)",
        "maxSum(nums = [-2, 3, 1, 2, -1, 1, -1, 3, -3, -4], m = 3, k = 3)"
    ],
    "sample_452": [
        "minChanges(s = \"1001\")",
        "minChanges(s = \"1010\")",
        "minChanges(s = \"0100\")",
        "minChanges(s = \"01001\")",
        "minChanges(s = \"000111\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"01011\")",
        "minChanges(s = \"xyyyyzz\")",
        "minChanges(s = \"zzzt\")",
        "minChanges(s = \"aabbccddeeff\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,3,5,4], nums2 = [1,2,3,7])",
        "minOperations(nums1 = [1,3,5,4,2], nums2 = [1,2,3,7,6,4])",
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,1])",
        "minOperations(nums1 = [1, 3, 5, 4, 2],\n    nums2 = [1, 2, 3, 7, 6, 4])",
        "minOperations(nums1 = [0, 0, 1, 1], nums2 = [1, 0, 1, 0])",
        "minOperations(nums1 = [0,0,0], nums2 = [1,1,1])",
        "minOperations(nums1 = [3, 1, 5], nums2 = [2, 7, 4])",
        "minOperations(nums1 = [1, 4, 1, 4], nums2 = [2, 3, 2, 3])",
        "minOperations(nums1 = [5, 3, 1, 2, 4], nums2 = [1, 2, 4, 3, 5])",
        "minOperations(nums1 = [0, 1, 4, 7, 2, 1, 0],\n    nums2 = [2, 5, 1, 8, 4, 7, 6])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"1100011\", k = 2)",
        "shortestBeautifulSubstring(s = \"011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 1)",
        "shortestBeautifulSubstring(s = \"1111111\", k = 4)",
        "shortestBeautifulSubstring(s = \"0000000001\", k = 1)",
        "shortestBeautifulSubstring(s = '0001111000', k = 2)",
        "shortestBeautifulSubstring(s = \"1110000111\", k = 1)",
        "shortestBeautifulSubstring(s = \"0101010\", k = 1)",
        "shortestBeautifulSubstring(s = \"010101011101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101111010101011110101010111101010101",
        "shortestBeautifulSubstring(s
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 1, 1, 1])",
        "maximumTripletValue(nums = [1,2,3,4,5,6])",
        "maximumTripletValue(nums = [0,0,0,0])",
        "maximumTripletValue(nums = [0,1,2])",
        "maximumTripletValue(nums = [-1, 2, -1, -4])",
        "maximumTripletValue(nums = [1, 3, 6, 1, 2, 1])",
        "maximumTripletValue(nums = [3, 4, 2, 8, 1, 5, 10])",
        "maximumTripletValue(nums = [7, 8, 9, 12, 1, 4, 5, 3])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 15, limit = 5)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [4,3,2,1,0])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [4,4,6,5])",
        "minGroupsForValidAssignment(nums = [1,1,4,3,2])",
        "minGroupsForValidAssignment(nums=[1,1,1,1,2,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,4,1])",
        "minGroupsForValidAssignment(nums = [6,6,6,6,6,2])",
        "minGroupsForValidAssignment(nums = [0,1,2,3,4,100])",
        "minGroupsForValidAssignment(nums = [3,2,2,4,6,1,6,5,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,1,2,2,2,2,2,2,2,4,5,6,7,8,9,10,11,12,13,14])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 1], nums2 = [2, 2, 2])",
        "minSum(nums1 = [1, 2, 0, 0], nums2 = [1, 2, 0, 0])",
        "minSum(nums1 = [3, 3, 3], nums2 = [3, 3, 3])",
        "minSum(nums1 = [1, 0, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [2, 2, 0, 0], nums2 = [3, 3, 0, 0])",
        "minSum(nums1 = [0, 0, 0, 0, 1, 1, 1, 1], nums2 = [0, 0, 0, 1, 1, 1, 1, 1])",
        "minSum(nums1 = [2, 4, 5], nums2 = [1, 4, 0])",
        "minSum(nums1 = [0, 3, 4, 5], nums2 = [0, 5, 6, 7, 8])",
        "minSum(nums1 = [0, 3, 1, 1, 2], nums2 = [2, 1, 2, 1, 2])"
    ],
    "sample_453": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"xyz\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"abbc\")",
        "minChanges(s = \"bbbbb\")",
        "minChanges(s = \"abccccdd\")",
        "minChanges(s = \"aaccbb\")",
        "minChanges(s = \"aabbccddeff\")",
        "minChanges(s = \"yzyx\")",
        "minChanges(s = \"ccde\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aiueo\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 5)",
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s=\"\", k=2)",
        "beautifulSubstrings(s = \"aaaiueo\", k = 2)",
        "beautifulSubstrings(s=\"aiu\", k=1)",
        "beautifulSubstrings(s = \"k",
        "beautifulSubstrings(s=\"test\", k=1)",
        "beautifulSubstrings(s = \"iaiaiiaiaiaiaiaiai\", k = 3)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"aabbeccaa\", k = 3)",
        "beautifulSubstrings(s = \"ab\", k = 2)",
        "beautifulSubstrings(s = \"",
        "beautifulSubstrings(s = \"aeb\", k = 3)",
        "beautifulSubstrings(s = \"yzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzyzy",
        "beautifulSubstrings(s = \"bbbeaaebbbb\", k = 3)",
        "beautifulSubstrings(s = \"azxxzy\", k = 3)",
        "beautifulSubstrings(s = \"beeaaaae\", k = 2)",
        "beautifulSubstrings(s = \"aabcbcbcbbbbbcccddc\", k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"ymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"hYmpL\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = 'mpHlY')",
        "sortVowels(s = \"HmPLy\")",
        "sortVowels(s = 'lpyMPH')",
        "sortVowels(s = \"loompy\")",
        "sortVowels(s = \"bILy\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [5, 1, 3, 4, 2])",
        "minimumSeconds(nums = [1, 0, 1, 1, 1])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [3, 1, 2, 4, 3])",
        "minimumSeconds(nums = [2, 2, 3, 3, 4, 4, 5, 5])",
        "minimumSeconds(nums = [2, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0])",
        "minimumSeconds(nums = [3, 1, 2, 6, 1, 3, 1])"
    ],
    "sample_258": [
        "minimumSum(nums = [4, 3, 2, 6])",
        "minimumSum(nums = [1, 4, 4])",
        "minimumSum(nums = [1, 5, 2, 4, 3])",
        "minimumSum(nums = [2, 1, 4, 5, 3])",
        "minimumSum(nums = [1, 8, 3, 4, 5])",
        "minimumSum(nums = [2, 5, 3, 7, 10, 8, 4])",
        "minimumSum(nums = [2, 3, 1, 7])",
        "minimumSum(nums = [2, 6, 4, 5, 9, 1, 10])",
        "minimumSum(nums = [5, 6, 2, 3, 4, 5, 1, 7, 8, 10])",
        "minimumSum(nums = [10, 11, 2, 3, 5, 11])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [3, 2, 2, 4, 3], k = 7)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 3, 4, 5, 2], k = 2)",
        "minOperations(nums = [0,0,1,1,1,2,2,3,3,4], k = 4)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11], k = 7)",
        "minOperations(nums = [2, 2, 3, 3, 4, 4, 5, 5], k = 2)",
        "minOperations(nums = [1, 1, 1, 2, 3, 4, 8], k = 4)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3], m = 1, k = 1)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 1, k = 1)",
        "maxSum(A = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 2, k = 3)",
        "maxSum(A = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 4, k = 2)",
        "maxSum(A = [2, 3, 7, 8], m = 2, k = 3)",
        "maxSum(A = [1, 0, 0, 1, 1], m = 2, k = 1)",
        "maxSum(A = [3, 3, 2, 2, 3], m = 3, k = 2)",
        "maxSum(A = [1, 100, 2, 100, 3, 100, 4, 100], m = 3, k = 2)",
        "maxSum(A = [4, 5, 1, 6, 2, 4, 9, 0, 5], m = 2, k = 3)",
        "maxSum(A = [10, 13, 5, 15, 3, 6, 17, 19, 7, 16, 5, 9, 12, 14, 18], m = 5, k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"10010\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"1011101\")",
        "minimumSteps(s = \"0100111101\")",
        "minimumSteps(s = \"1000000000000000000000000000000\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 1, 1])",
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [0, 0, 1, 1, 1, 0, 0])",
        "maxSubarrays(nums = [0, 1, 0, 0, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1,1,1])",
        "maxSubarrays(nums = [5, 4, 2, 1, 3])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 5], money = 5)",
        "buyChoco(prices = [1, 3, 4], money = 5)",
        "buyChoco(prices = [1, 10], money = 3)",
        "buyChoco(prices = [1, 2, 20], money = 10)",
        "buyChoco(prices = [1,2], money = 50)",
        "buyChoco(prices = [4, 5, 7], money = 12)",
        "buyChoco(prices = [12, 20], money = 18)",
        "buyChoco(prices = [4, 4, 10, 10, 10, 20], money = 6)",
        "buyChoco(prices = [4, 5, 1, 3, 7], money = 15)",
        "buyChoco(prices = [12, 31, 12, 31, 12], money = 40)"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"000000\")",
        "minimumSteps(s = \"0000000\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"0110000011\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals(nums = [3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 2, 4, 3], k = 2)",
        "minOperations(nums = [1, 2, 3, 2, 4, 3], k = 2)",
        "minOperations(nums = [0, 1, 2, 3], k = 2)",
        "minOperations(nums = [1, 2, 2, 4, 5], k = 3)",
        "minOperations(nums = [0, 1, 1, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 4, 3, 2, 1], k = 4)",
        "minOperations(nums = [1, 2, 2, 2, 3], k = 2)",
        "minOperations(nums = [10, 2, 3, 1], k = 4)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 2, 3])",
        "isGood(nums = [1, 2, 2, 3])",
        "isGood(nums = [1, 2, 2, 3, 4])",
        "isGood(nums = [1, 2, 2, 3, 4, 4])",
        "isGood(nums = [1, 2, 3, 2, 2])",
        "isGood(nums = [2, 1, 1])",
        "isGood(nums = [0, 1, 1, 2, 2])",
        "isGood(nums = [0, 1, 3, 2, 4])",
        "isGood(nums = [1,2,3,4,5,6,2,3,4,5])",
        "isGood(nums = [2, 2, 2, 4, 3, 1, 0, 1])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 12)",
        "isFascinating(n = 9)",
        "isFascinating(n = 8)",
        "isFascinating(n = 8)",
        "isFascinating(n = 6)",
        "isFascinating(n = 14)",
        "isFascinating(n = 9)",
        "isFascinating(n = 53)",
        "isFascinating(n = 9999)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 4, 3, 2])",
        "isGood(nums = [1,2,2,3,4])",
        "isGood(nums = [0,1,2,3])",
        "isGood(nums = [1, 2, 2, 3, 4, 5])",
        "isGood(nums = [1, 3, 2, 2])",
        "isGood(nums = [3, 1, 2, 3])",
        "isGood(nums = [3,2,1,2])",
        "isGood(nums = [3,1,2,5,4])",
        "isGood(nums = [1, 3, 2, 1, 4])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 3, 2])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 100000])",
        "minimumSeconds(nums = [4,5,6,7,0,2,1,3])",
        "minimumSeconds(nums = [1, 3, 2, 1, 1, 3])",
        "minimumSeconds(nums = [1, 0, 1, 0, 1, 1, 1, 1])",
        "minimumSeconds(nums = [2,1,3,4,5,3])",
        "minimumSeconds(nums = [0, 3, 5, 0, 0])",
        "minimumSeconds(nums = [1, 10, 3, 4, 2, 4, 6, 5, 9, 7])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4, 2, 3])",
        "minimumRightShifts(nums = [0, 2, 4, 6, 8])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [0, 1, 2, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "isGood(nums = [0,2,1])",
        "isGood(nums = [1,2,3,4,6,7,8])",
        "isGood(nums = [1, 2, 2, 3, 4])",
        "isGood(nums = [3, 4, 5, 2])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 5, 7], nums2 = [2, 3, 5])",
        "minOperations(nums1 = [1, 4, 5], nums2 = [1, 3, 4])",
        "minOperations(nums1 = [1, 3, 6], nums2 = [1, 4, 7])",
        "minOperations(nums1 = [1, 5, 6, 14], nums2 = [24, 2, 19])",
        "minOperations(nums1 = [2,5,2,1,2], nums2 = [3,2,4,2])",
        "minOperations(nums1 = [2, 4, 6, 8], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [0, 0, 2, 2], nums2 = [2, 1, 2, 0])",
        "minOperations(nums1 = [3, 2, 1, 2], nums2 = [3, 2, 3, 4, 3, 2, 4, 1, 2, 1, 7, 8])",
        "minOperations(nums1 = [3, 4, 1, 5, 6], nums2 = [6, 2, 9, 3, 1])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"10110\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101001\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110111101\", k = 5)",
        "shortestBeautifulSubstring(s = \"1110000\", k = 3)",
        "shortestBeautifulSubstring(s = \"1110001111\", k = 4)",
        "shortestBeautifulSubstring(s = \"1111111111111111111111\", k = 4)",
        "shortestBeautifulSubstring(s = \"1110011110\", k = 3)",
        "shortestBeautifulSubstring(s = \"1100011011\", k = 1)",
        "shortestBeautifulSubstring(s
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [5, 2, 3, 4, 1])",
        "minGroupsForValidAssignment(nums = [2,1,3,2,2,1])",
        "minGroupsForValidAssignment(nums = [2, 3, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 4, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,2,2,1])",
        "minGroupsForValidAssignment(nums = [2,3,2,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [2,4,6,1,4,2])"
    ],
    "sample_289": [
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"101010101\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"1011101\")",
        "minimumSteps(s = \"10011\")",
        "minimumSteps(s
        "minimumSteps(s = \"100100\")",
        "minimumSteps(s = \"01001000100100110\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4], target = 16)",
        "lengthOfLongestSubsequence(nums = [10,1,2,7,6,1,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 0)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,4,8,16], target = 17)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 6, 8, 9, 10, 12], target = 13)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 1, 5], target = 10)"
    ],
    "sample_259": [
        "minimumSum(nums = [3,1,2,4])",
        "minimumSum(nums = [3,1,2,4])",
        "minimumSum(nums = [3, 1, 2, 4])",
        "minimumSum(nums = [3, 1, 2, 4])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [3,2,1])",
        "minimumSum(nums = [2, 1, 2])",
        "minimumSum(nums = [3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3])",
        "minimumSum(nums = [1, 4, 4, 6, 6, 1, 1])",
        "minimumSum(nums = [7,2,1,4,5,6,7])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3], m = 1, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 1, k = 1)",
        "maxSum(nums = [10, 9, 2, 5, 3, 7, 101, 18], m = 3, k = 3)",
        "maxSum(nums = [2,4,3,1,4], m = 3, k = 2)",
        "maxSum(nums = [2, 4, 3, 5, 10], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 2, 3, 4, 3, 6, 7], m = 3, k = 2)",
        "maxSum(nums = [4, 13, 12, 3], m = 2, k = 2)",
        "maxSum(nums = [1, -3, 7, 3, 4, 1, 3, 6, 7, -2], m = 2, k = 3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"bandana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcd\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"edcba\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"orange\", s3 = \"apples\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aaa\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"panna\", s3 = \"manana\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aab\", s3 = \"bca\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 3, 2, 1])",
        "minOperations(nums = [1, 2, 2, 1])",
        "minOperations(nums = [3, 2, 2, 4, 3])",
        "minOperations(nums = [1,1,2,2,3])",
        "minOperations(nums = [3, 1, 2, 3])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [2, 2, 2, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [4, 1, 4, 2, 5, 3])",
        "minOperations(nums = [2, 3, 5, 2, 3, 5, 2, 3, 5])",
        "minOperations(nums = [2,1,3,6,5])"
    ],
    "sample_474": [
        "minimumCoins(prices = [2, 5, 3, 7])",
        "minimumCoins(prices = [2, 5, 3, 7])",
        "minimumCoins(prices = [2, 5, 3, 7])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [3, 1, 2, 5, 4])",
        "minimumCoins(prices = [3, 2, 1, 4, 5])",
        "minimumCoins(prices = [5, 10, 3, 7])",
        "minimumCoins(prices = [5, 2, 1, 4, 3, 4, 2, 2, 2])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,3,2,4])",
        "minimumSeconds(nums=[1,2,3,4,5])",
        "minimumSeconds(nums = [7,7,7,7,7,7,7])",
        "minimumSeconds(nums = [2,1,3])",
        "minimumSeconds(nums = [1, 3, 2, 4, 2])",
        "minimumSeconds(nums = [2,1,1,2,3,1])",
        "minimumSeconds(nums = [2,2,3,3,4,4,6])"
    ],
    "sample_448": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"xyxy\")",
        "minChanges(s = \"xyx\")",
        "minChanges(s = \"azbz\")",
        "minChanges(s = \"21\")",
        "minChanges(s = \"ABCBDEF\")",
        "minChanges(s = \"xxxxyyyyzzzz\")",
        "minChanges(s = \"zg\")",
        "minChanges(s = \"111100001111\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 4, 3, 2, 1], limit = 1)",
        "lexicographicallySmallestArray(nums = [9, 8, 5, 3, 1], limit = 1)",
        "lexicographicallySmallestArray(nums = [9, 3, 5, 1, 8], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 4, 3, 2, 1], limit = 2)",
        "lexicographicallySmallestArray(nums = [4, 7, 1, 3, 5], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 2, 6], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 4, 1, 3, 5], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 2, 1, 4, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [10, 3, 15, 20, 1], limit = 4)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,1,2,2,3,3])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts(nums = [1,2,3,1,2,1])",
        "sumCounts(nums = [1,3,2,4,2])",
        "sumCounts(nums = [4, 3, 4])",
        "sumCounts(nums=[1,1,2,2,3,3,4,4,5,5,6,6])",
        "sumCounts(nums = [1, 2, 3, 1, 1, 3, 2])",
        "sumCounts(nums=[1,1,1,1,1,1,2])",
        "sumCounts(nums = [1, 3, 1, 3, 1, 2, 2])",
        "sumCounts(nums = [2,1,2,1,3,1,3,1,4])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [-2, 0, 2])",
        "maximumTripletValue(nums = [-1, 1, 2])",
        "maximumTripletValue(nums = [5, 1, 3, 4])",
        "maximumTripletValue(nums = [-3, -2, 0, 1, 1, 3])",
        "maximumTripletValue(nums = [-10, -20, 20, 30])",
        "maximumTripletValue(nums = [-10, -4, 1, 5])",
        "maximumTripletValue(nums = [-5, -1, 2, 4])",
        "maximumTripletValue(nums = [-5, -2, 4, -5, -4, 1, -1, 3, -4, 1, 1])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"abcb\", k = 3)",
        "beautifulSubstrings(s = \"aabbe\", k = 3)",
        "beautifulSubstrings(s = \"ababababab\", k = 3)",
        "beautifulSubstrings(s = \"super\", k = 3)",
        "beautifulSubstrings(s = \"abcab\", k = 3)",
        "beautifulSubstrings(s = \"aaea\", k = 5)",
        "beautifulSubstrings(s = \"hello world\", k = 5)",
        "beautifulSubstrings(s = \"aeiouaeiouaeiouaeiou\", k = 7)",
        "beautifulSubstrings(s = \"uua\", k = 2)",
        "beautifulSubstrings(s = \"abaeioueeeeuo\", k = 2)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 8)",
        "countPairs(nums = [1,2,3,4,5,6], target = 10)",
        "countPairs(nums = [3, 1, 2], target = 4)",
        "countPairs(nums = [1, 3, 2, 4, 5], target = 6)",
        "countPairs(nums = [1,3,5,7,9], target = 20)",
        "countPairs(nums = [3, 5, 6, 7, 9], target = 12)",
        "countPairs(nums = [2, 5, 10], target = 13)",
        "countPairs(nums = [0, 0, 1, 0], target = 1)",
        "countPairs(nums = [1,3,1,2,1], target = 5)",
        "countPairs(nums = [1,1,1,3,4,5], target = 4)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 20, limit = 3)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 15, limit = 3)",
        "distributeCandies(n = 7, limit = 5)",
        "distributeCandies(n = 13, limit = 5)",
        "distributeCandies(n = 50, limit = 30)",
        "distributeCandies(n = 14, limit = 10)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 1, 2])",
        "minOperations(nums1 = [2, 2, 2], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minOperations(nums1 = [4, 5, 6, 7, 8], nums2 = [2, 4, 6, 8, 10])",
        "minOperations(nums1 = [1, 2, 1, 2], nums2 = [1, 2, 1, 2])",
        "minOperations(nums1 = [1, 2, 1, 2, 3], nums2 = [1, 2, 3, 2, 1])",
        "minOperations(nums1 = [0, 1, 10], nums2 = [1, 2, 10])",
        "minOperations(nums1 = [5, 6, 10], nums2 = [2, 7, 9])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 1, 2, 3])",
        "minOperations(nums = [1, 2, 2, 1, 1, 3])",
        "minOperations(nums = [1, 2, 3, 2, 1, 3])",
        "minOperations(nums = [2, 2, 3, 4, 3])",
        "minOperations(nums = [2, 2, 1, 1])",
        "minOperations(nums = [3,3,4,3,3])",
        "minOperations(nums = [1, 2, 3, 1, 2, 3, 2, 1])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"110110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"110110110\", k = 2)",
        "shortestBeautifulSubstring(s = '11111', k = 3)",
        "shortestBeautifulSubstring(s = \"011110\", k = 2)",
        "shortestBeautifulSubstring(s = '00111', k = 2)",
        "shortestBeautifulSubstring(s = '001101', k = 2)",
        "shortestBeautifulSubstring(s = '100110111000', k = 2)",
        "shortestBeautifulSubstring(s = \"1011011111\", k = 2)",
        "shortestBeautifulSubstring(s = \"00010010\", k = 1)",
        "shortestBeautifulSubstring(s = \"0100101010111000\", k = 1)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1,1])",
        "minimumSeconds(nums = [2, 1, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 3, 2])",
        "minimumSeconds(nums = [1, 2, 2, 3, 4, 4])",
        "minimumSeconds(nums = [1, 3, 2, 1, 4])",
        "minimumSeconds(nums = [1, 10, 5, 3, 10])",
        "minimumSeconds(nums = [0, 2, 2, 2, 2, 3, 5, 5])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [3, 2, 2, 4, 3])",
        "minOperations(nums = [3, 2, 2, 4, 3])",
        "minOperations(nums = [1, 2, 2, 6, 6, 6, 3])",
        "minOperations(nums = [1, 2, 2, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "minOperations(nums = [1, 2, 2, 6, 6, 3, 3, 4, 4, 5, 5])",
        "minOperations(nums = [2, 2, 1, 1, 3, 3, 1])",
        "minOperations(nums = [3,3,4,3,4,3,3])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [1,7,4,9,2,5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7])",
        "alternatingSubarray(nums = [3, 1, 4, 2])",
        "alternatingSubarray(nums = [-1, -2, -3, 4, -5])",
        "alternatingSubarray(nums = [3,5,6,7,9,11,12,14])",
        "alternatingSubarray(nums = [2, 2, 2, 1, 1, 2, 2, 2, 1])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 1, 3, 3, 2, 2])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"fed\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"bc\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"bb\", \"bbb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ax\", \"xy\", \"yx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"fed\", \"cba\", \"gee\", \"egg\", \"gge\", \"gag\", \"hgg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"d\", \"qwe\", \"a\", \"b\", \"c\", \"d\", \"efg\", \"b\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"aceg\", str2 = \"abcdefg\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"banana\")",
        "canMakeSubsequence(str1 = \"bab\", str2 = \"bza\")",
        "canMakeSubsequence(str1 = \"tr\", str2 = \"tra\")",
        "canMakeSubsequence(str1 = \"adbce\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"aaaaa\", str2 = \"aabcd\")",
        "canMakeSubsequence(str1 = \"afc\", str2 = \"agckzn\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabaaab\")",
        "longestSemiRepetitiveSubstring(s = \"abccccde\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaab\")",
        "longestSemiRepetitiveSubstring(s = \"abccddddeee\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcdbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"fshppppps\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,-2,3,10,-10,2], m = 3, k = 4)",
        "maxSum(nums = [1, -1, 2], m = 2, k = 1)",
        "maxSum(nums = [1, -1, 2, -1, 2], m = 2, k = 3)",
        "maxSum(nums = [1,-1,4,-2,3], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8], m = 3, k = 4)",
        "maxSum(nums = [-3, -2, -1, 4, 0], m = 2, k = 2)",
        "maxSum(nums = [2, 3, 4, 7, 8, 10, 12], m = 2, k = 4)",
        "maxSum(nums = [5, 6, 2, 3, 4, 1, 7, 8, 10, 9], m = 2, k = 3)",
        "maxSum(nums = [9,2,1,0,1,3,9], m = 3, k = 3)",
        "maxSum(nums = [2,-2,0,0,1,-3,-2,2,0,-3,-1,-2,2,-3,-2,0,0,2,-1,-2,2,0,3,-1,2,-1,-3,-2,-1,0,-3,-2,-1,1,-1,-3,-1,3,-3,3,-2,2,-3,-2,-2,-1,-1,2,2,1,-2,2,-1,-1,1,1,-1,-2,0,0,3,-3,2,1,1,-1,-2,-1,2,3,1,2,-1,2,-1,-1,-3,0,0,-1,2,3,1,2,-1,0,-3,-3,-1,0,3,-1,1,2,-1,-3,-2,0,-3,-3,-3,2,2,2,-1,3,-1,2,1,0,-2,-2,3,-2,2,-1,0,-1,3,-3,1,0,-3,-3,-3,-3,-1,-1,-2,-1,-2,3,3,2,3,-2,0,-2,1,-2,-3,-1,0,0,-2,2,-1,2,1,1,0,-2,3,2,3,-1,0,-2,-2,-2,-3,-3,0,-1,-2,-1,-3,-1,-2,-1,-1,-1,2,0,-1,2,-2,-2,2,3,-3,3,-1,2,-1,-2,-3,0,1,-3,-2,-2,-3,-2,-1,0,-3,0,-3,3,2,1,1,-1,2,-1,-2,3,3,-2,2,-3,-1,0,0,-3,-1,2,2,1,-3,-1,3,-3,0,0,2,-1,-3,-1,3,-1,-1,1,0,2,-1,-2,3,-1,-3,-3,1,-2,-2,-3,-1,0,-2,-3,0,-2,0,-1,2,2,2,2,2,2,2,0,-1,-2,1,-3,"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"foo\", \"bar\"], x = \"o\")",
        "findWordsContaining(words = [\"a\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"h\")",
        "findWordsContaining(words = [\"A\", \"B\"], x = \"A\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"banana\", \"dog\", \"apple\", \"banana\"], x = \"banana\")",
        "findWordsContaining(words = [\"fish\", \"xyz\", \"cat\", \"x\"], x = \"x\")",
        "findWordsContaining(words = [\"monkey\", \"bar\", \"robot\"], x = \"y\")",
        "findWordsContaining(words = [\"below\",\"down\",\"go\",\"lower\",\"love\",\"never\",\"now\",\"on\",\"then\",\"there\",\"these\",\"those\",\"though\",\"under\",\"up\",\"very\",\"what\"], x = \"th\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2], moveFrom = [0], moveTo = [1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [3,2])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [3], moveTo = [5])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [0], moveTo = [3])",
        "relocateMarbles(nums = [2,3,3,4], moveFrom = [2], moveTo = [3])",
        "relocateMarbles(nums = [2,2], moveFrom = [0,1], moveTo = [2,1])",
        "relocateMarbles(nums = [2,4,5,1], moveFrom = [1,4], moveTo = [3,2])",
        "relocateMarbles(nums = [2, 5, 3, 7], moveFrom = [0, 1, 2, 3], moveTo = [1, 1, 1, 1])",
        "relocateMarbles(nums = [2,3,5,1,4,6],moveFrom = [3,4],moveTo = [2,5])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9, 10, 11, 12], moveFrom = [9, 11, 7, 10], moveTo = [12, 12, 10, 11])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 0])",
        "maximumTripletValue(nums = [1, 2, 0])",
        "maximumTripletValue(nums = [-1000, -1000, -1000])",
        "maximumTripletValue(nums = [-1, -2, 0])",
        "maximumTripletValue(nums = [0, 1, -1, -1])",
        "maximumTripletValue(nums = [4, 3, 2, 1, 3])",
        "maximumTripletValue(nums = [1, -4, -5, -2, -3])",
        "maximumTripletValue(nums = [3, 0, -2, -2, 6, -1, 4, -5, -4])",
        "maximumTripletValue(nums = [10, 2, 20, 4, 5, 50])",
        "maximumTripletValue(nums = [1, 3, 0, 5, 0, 4, 3, 0, 1])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcba\")",
        "longestSemiRepetitiveSubstring(s = \"abcaabcaabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcdedcba\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"",
        "maximumNumberOfStringPairs(words = [\"aba\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"b\", \"an\", \"na\"])",
        "maximumNumberOfStringPairs(words = [\"asd\", \"asd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"b\", \"ba\", \"ab\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"tag\", \"ago\", \"ago\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "matrixSum(nums = [[1], [1]])",
        "matrixSum(nums = [[1,1],[1,1]])",
        "matrixSum(nums = [[1, 10], [10, 1]])",
        "matrixSum(nums = [[3, 2], [1, 4]])",
        "matrixSum(nums = [[3, 1], [2, 1], [1, 1]])",
        "matrixSum(nums = [[1, 0, 0, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 0]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"hello\", s2 = \"hello\", s3 = \"hello\")",
        "findMinimumOperations(s1 = \"12345\", s2 = \"12345\", s3 = \"123456\")",
        "findMinimumOperations(s1=\"abc\", s2=\"abc\", s3=\"def\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"abc\")",
        "findMinimumOperations(s1=\"ab\",s2=\"bc\",s3=\"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"zy\", s3 = \"zz\")",
        "findMinimumOperations(s1 = \"little\", s2 = \"little\", s3 = \"little\")",
        "findMinimumOperations(s1 = \"lolololol\", s2 = \"lol\", s3 = \"ololol\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"ba\", s3 = \"nana\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"as\", s2 = \"as\", s3 = \"as\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abba\", s2 = \"abbb\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"123456\", s2 = \"1234\", s3 = \"123\")"
    ],
    "sample_324": [
        "isFascinating(n = 10)",
        "isFascinating(n = 3)",
        "isFascinating(n = 21)",
        "isFascinating(n = 11)",
        "isFascinating(n = 4)",
        "isFascinating(n = 3)",
        "isFascinating(n = 21)",
        "isFascinating(n = 234)",
        "isFascinating(n = 11)",
        "isFascinating(n = 365879)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1,2,3,4,5,6])",
        "minimumCoins(prices = [2, 5, 3, 7])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9])",
        "minimumCoins(prices = [1,2,4])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9,10])",
        "minimumCoins(prices = [2, 4, 5, 6, 7, 9])"
    ],
    "sample_380": [
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1,2,3], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 8)",
        "countPairs(nums = [1,2,3], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 9)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 9)",
        "countPairs(nums = [1,1,2,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7], target = 9)",
        "countPairs(nums = [1, 2, 3, 5, 7, 9], target = 11)",
        "countPairs(nums = [1, 5, 10, 25], target = 13)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [4,1,3,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7])",
        "minGroupsForValidAssignment(nums = [1,1,1,1])",
        "minGroupsForValidAssignment(nums = [3,1,1,1])",
        "minGroupsForValidAssignment(nums = [6, 3, 2, 2])",
        "minGroupsForValidAssignment(nums = [5,1,1,3,5])",
        "minGroupsForValidAssignment(nums = [3, 3, 4, 4, 5, 5])",
        "minGroupsForValidAssignment(nums = [5,10,5,20])",
        "minGroupsForValidAssignment(nums = [6, 3, 5, 7, 1, 9, 4, 8])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 4, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 10)",
        "countPairs(nums = [1, 3, 1, 5, 4], target = 6)",
        "countPairs(nums = [2, 3, 1, 1, 4], target = 4)",
        "countPairs(nums = [1, 3, 5, 7, 8], target = 9)",
        "countPairs(nums = [2, 3, 5, 6], target = 7)",
        "countPairs(nums = [2, 6, 9, 1], target = 10)"
    ],
    "sample_317": [
        "buyChoco(prices = [1,2,3], money = 10)",
        "buyChoco(prices = [2, 3, 5], money = 6)",
        "buyChoco(prices = [1,2,3], money = 2)",
        "buyChoco(prices = [2,3], money = 10)",
        "buyChoco(prices = [20, 10, 5], money = 10)",
        "buyChoco(prices = [1, 2, 4, 6], money = 4)",
        "buyChoco(prices = [20, 3, 2], money = 50)",
        "buyChoco(prices = [10, 4], money = 13)",
        "buyChoco(prices = [4,1,2,3,4], money = 7)",
        "buyChoco(prices = [4, 2, 3, 1, 7, 6], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bac\", \"bc\"])",
        "maximumNumberOfStringPairs(words = [\"za\",\"zb\",\"ba\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"xyz\", \"car\", \"xyz\", \"foo\", \"bar\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"dqm\", \"pqq\", \"vqh\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = 'code')",
        "sortVowels(s = \"code\")",
        "sortVowels(s = \"EOTcede\")",
        "sortVowels(s = 'tcede')",
        "sortVowels(s = \"dLeotcede\")",
        "sortVowels(s = \"decelerate\")",
        "sortVowels(s = \"tootcede\")",
        "sortVowels(s = 'ceode')",
        "sortVowels(s = 'tcoDele')"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 3, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1,2,3,1])",
        "sumCounts(nums = [1, 2, 1, 3, 2, 5])",
        "sumCounts(nums = [2, 2, 3, 5, 5])",
        "sumCounts(nums = [0,0,1,1,2,2,3])",
        "sumCounts(nums = [1,2,3,2,3,4,3,5])",
        "sumCounts(nums = [3, 1, 5, 6, 2, 4])",
        "sumCounts(nums = [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [4, 1, 1, 2])",
        "minimumCoins(prices = [3, 2, 4, 1, 5])",
        "minimumCoins(prices = [5, 2, 1, 7])",
        "minimumCoins(prices = [2, 3, 4, 6, 9])",
        "minimumCoins(prices = [1, 10, 4, 100, 50])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 4, m = 2)",
        "differenceOfSums(n = 5, m = 4)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 100, m = 20)"
    ],
    "sample_307": [
        "countSeniors(details = [\"9201010201\", \"9201020203\", \"9201030205\", \"9201040207\"])",
        "countSeniors(details = [\"1983-03-15\", \"1960-03-16\", \"1969-03-15\"])",
        "countSeniors(details = [\"93/11/22\", \"12/01/00\"])",
        "countSeniors(details = [\"1973-05-10\", \"1981-02-02\", \"1979-08-31\"])",
        "countSeniors(details = [\"12-01-1998\", \"01-01-1945\", \"21-01-1985\", \"28-01-1960\"])",
        "countSeniors(details = [\"19850325\", \"19820512\", \"19900829\", \"19841208\"])",
        "countSeniors(details = [\"Sakura 39 10\", \"Akane 50 10\", \"Sayaka 48 10\"])",
        "countSeniors(details = [\"1987-11-15\", \"1995-09-19\", \"1965-04-29\", \"1938-06-16\"])",
        "countSeniors(details = [\"18-04-1983\", \"23-05-1999\", \"24-02-1981\", \"25-06-1989\", \"22-01-1993\", \"04-08-1988\"])",
        "countSeniors(details = [\"B33 3402 1964 12 22\", \"B12 1234 1923 12 31\", \"B21 2312 1933 11 21\", \"B00 2332 1953 01 01\", \"B31 3453 1973 12 13\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 1)",
        "isFascinating(n = 3)",
        "isFascinating(n = 123)",
        "isFascinating(n = 8)",
        "isFascinating(n = 17)",
        "isFascinating(n = 31)",
        "isFascinating(n = 125874)",
        "isFascinating(n = 16305)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"x\")",
        "minimumBeautifulSubstrings(s = \"aabaaa\")",
        "minimumBeautifulSubstrings(s = \"aaaaaaaaaaaaaa\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"010000010\")",
        "minimumBeautifulSubstrings(s = \"32132\")",
        "minimumBeautifulSubstrings(s = \"a
        "minimumBeautifulSubstrings(s = \"abx",
        "minimumBeautifulSubstrings(s = \"1111000011111110010100101010011011010100101001111101101001010011111100000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"1101100001110010111111000000010111110011101010000001111101101101110001100001000110000011111011111001101100000111110111100011001000001100100000110011111110011111101010111111111011011011111010000001100001011011111101000001111100111110011111011101011011100111110011111010111100111110000111111111111101101001111111100000000000001110110110111111111100011101111101000111111001000011000101111111001100010111110000111111001001110111011010011001111101101011100001001111001110110000111010111010111111001001111010000111"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 12, limit = 2)",
        "distributeCandies(n = 15, limit = 2)"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 4)",
        "minOperations(nums = [3,2,1,2,4,3], k = 3)",
        "minOperations(nums = [1,2,3,4], k = 4)",
        "minOperations(nums = [1,1,4,2,3], k = 2)",
        "minOperations(nums = [1,1,2,2,3,3,4,4], k = 3)",
        "minOperations(nums = [2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3",
        "minOperations(nums = [2, 1, 2, 2, 2], k = 2)",
        "minOperations(nums = [2,3,3,4,2,4,2], k = 3)",
        "minOperations(nums = [1,2,2,1,3,4], k = 3)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [0, 1, 1])",
        "sumCounts(nums = [2, 1, 1])",
        "sumCounts(nums = [2, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 3, 3, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "sumCounts(nums = [2, 1, 2, 2, 1, 2])",
        "sumCounts(nums = [0, 0, 1, 1, 2, 3, 4, 4])",
        "sumCounts(nums = [1, 3, 4, 5, 2, 5, 5])",
        "sumCounts(nums = [2, 1, 2, 1, 2, 3, 4, 4, 3, 3, 4, 5, 5, 6, 7, 8, 6, 7, 5])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', '1', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"3\", \"4\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"4\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', '2', 'next', '1', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev', '3', 'prev'])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"10\", \"4\", \"prev\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"10\", \"prev\", \"2\", \"3\", \"prev\", \"4\", \"5\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [12, 24, 8, 32], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6], k = 2)",
        "minOperations(nums = [3, 4, 9, 6], k = 2)",
        "minOperations(nums = [3, 1, 3, 3, 2], k = 2)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"bbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1,2,1])",
        "sumCounts(nums = [1,1,2,2,3,3,4,4])",
        "sumCounts(nums = [1, 3, 3, 3])",
        "sumCounts(nums = [0, 1, 2, 2, 3, 0, 4, 2])",
        "sumCounts(nums = [1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [2, 2, 3, 3, 4, 5, 6, 7, 7, 7, 7])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"110110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"110110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110100\", k = 2)",
        "shortestBeautifulSubstring(s = \"00111000\", k = 2)",
        "shortestBeautifulSubstring(s = '1101101101', k = 2)",
        "shortestBeautifulSubstring(s = \"10010111\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"leetcode\")",
        "minimumBeautifulSubstrings(s = \"abacb\")",
        "minimumBeautifulSubstrings(s = \"aab\")",
        "minimumBeautifulSubstrings(s = \"aaaaa\")",
        "minimumBeautifulSubstrings(s = \"100100\")",
        "minimumBeautifulSubstrings(s = \"111\")",
        "minimumBeautifulSubstrings(s = \"aacab\")",
        "minimumBeautifulSubstrings(s = \"baab\")",
        "minimumBeautifulSubstrings(s = \"baaaaaaaabbbbbaaaaaaaacccccaaaaaaaa\")"
    ],
    "sample_341": [
        "longestString(x = 5, y = 4, z = 3)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 1, z = 4)",
        "longestString(x = 3, y = 1, z = 4)",
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 1, y = 3, z = 1)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 3, y = 4, z = 3)",
        "longestString(x = 2, y = 3, z = 6)",
        "longestString(x = 100, y = 3, z = 7)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]])",
        "findChampion(grid = [[0,0,1],[0,0,0],[1,0,0]])",
        "findChampion(grid = [[1,0,0,0], [1,0,0,0], [1,0,0,0], [1,0,0,0]])",
        "findChampion(grid = [[0, 2], [0, 2]])",
        "findChampion(grid = [[1, 0, 0, 0, 1], [0, 1, 0, 0, 1], [0, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"aaa\", k = 3)",
        "beautifulSubstrings(s = \"aaa\", k = 2)",
        "beautifulSubstrings(s = \"aaeiou\", k = 3)",
        "beautifulSubstrings(s = \"aaa\", k = 2)",
        "beautifulSubstrings(s = \"substrings\", k = 10)",
        "beautifulSubstrings(s = \"abccbac\", k = 3)",
        "beautifulSubstrings(s = \"baeea\", k = 3)",
        "beautifulSubstrings(s = \"aeiouuuuuuu\", k = 1)",
        "beautifulSubstrings(s = \"arran\", k = 3)"
    ],
    "sample_304": [
        "countSeniors(details = [\"123456789012\", \"123456789011\"])",
        "countSeniors(details = [\"12/05/1990\", \"12/06/1955\", \"12/07/1970\"])",
        "countSeniors(details = [\"Angelica Angel\", \"Anja Anger\", \"Andrea Angel\"])",
        "countSeniors(details = [\"Dave, 65, 170, 90\", \"Frank, 65, 180, 90\", \"Joe, 15, 170, 90\"])",
        "countSeniors(details = [\"111-00-0001, Jennifer Smith, 20, female\", \"111-00-0002, Robert Jones, 35, male\", \"111-00-0003, Susan Williams, 56, female\"])",
        "countSeniors(details = [\"56785213883011978789\", \"56785213883011978790\", \"56785213883011978791\"])",
        "countSeniors(details = [\"Tim Jones 2003-05-01\", \"Jessica Sanders 1990-02-05\", \"Joe Miller 1987-03-10\"])",
        "countSeniors(details = [\"19731029\", \"19810517\", \"19930401\", \"19670923\", \"19910327\", \"19780228\"])",
        "countSeniors(details = [\"Julia Baggins 1990-10-12\", \"Meriadoc Brandybuck 1974-02-22\", \"Frodo Baggins 1987-03-15\", \"Peregrin Took 1983-02-24\"])",
        "countSeniors(details = [\"Mary Smith, 19, m, 1995-06-25\", \"Carl Hansen, 45, m, 1962-01-12\", \"Albert Johnson, 39, m, 1962-10-12\", \"David Jones, 17, m, 1983-01-12\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-1, -2, -3])",
        "maximumTripletValue(nums = [-1, -2, -3])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [2, 3, 1])",
        "maximumTripletValue(nums = [1, 3, -5])",
        "maximumTripletValue(nums = [2, 4, 5, 7])",
        "maximumTripletValue(nums = [2, 0, 0, 2, 2])",
        "maximumTripletValue(nums = [-100, -99, 0, 1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 1, 5, 6, 7])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s
        "minimumBeautifulSubstrings(s = \"0110\")",
        "minimumBeautifulSubstrings(s = \"11110\")",
        "minimumBeautifulSubstrings(s = \"55555\")",
        "minimumBeautifulSubstrings(s = \"2020\")",
        "minimumBeautifulSubstrings(s = \"00001111\")",
        "minimumBeautifulSubstrings(s = \"01001010101010\")",
        "minimumBeautifulSubstrings(s = \"0010111000\")",
        "minimumBeautifulSubstrings(s = \"11110101111\")",
        "minimumBeautifulSubstrings(s = \"111110010110000111111\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "maxSubarrays(nums = [0, 0, 0, 1, 0, 1])",
        "maxSubarrays(nums = [2, 3, 6, 4, 5])",
        "maxSubarrays(nums = [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [2, 3, 5, 6, 1, 2])",
        "maxSubarrays(nums = [2, 5, 3, 10])",
        "maxSubarrays(nums = [-1, 0, 0, 0, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [5, 2, 8, -1, 6, 9])",
        "maxSubarrays(nums = [-1, -3, -4, -8, -10])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [1, 2, 3])",
        "minOperations(a = [1, 3, 5, 2, 4], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [1, 3, 5, 2, 4], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "minOperations(a = [1,2,3,4], b = [3,2,1,4])",
        "minOperations(a = [1, 2, 3], b = [4, 2, 1])",
        "minOperations(a = [3, 4, 1, 2], b = [3, 1, 2, 4])",
        "minOperations(a = [2, 3, 1, 2], b = [5, 6, 7, 8])",
        "minOperations(a = [2, 3, 1, 2], b = [4, 1, 5, 3])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"cat\", \"banana\", \"dog\", \"nana\", \"walk\", \"walker\", \"dogwalker\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"leet\", \"code\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"cute\", \"cutie\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"rabbit\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"mouse\", \"leopard\"])",
        "minimizeConcatenatedLength(words = [\"c\", \"cc\", \"ccc\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"d",
        "minimizeConcatenatedLength(words = [\"cab\", \"cta\", \"atc\", \"tca\", \"cat\"])",
        "minimizeConcatenatedLength(words = [\"ted\", \"sf\", \"r\", \"te\"])"
    ],
    "sample_371": [
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = \"ymPh\")",
        "sortVowels(s = \"HympL\")",
        "sortVowels(s = 'hmpLy')",
        "sortVowels(s = \"HymPL\")",
        "sortVowels(s = \"mypH\")",
        "sortVowels(s = 'Phylm')",
        "sortVowels(s = \"Pylmh\")",
        "sortVowels(s = 'IylmPh')",
        "sortVowels(s = 'zHympH')"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [1, 2, 2, 3, 4, 3])",
        "sumCounts(nums = [1, 3, 5, 1, 5])",
        "sumCounts(nums = [3, 3, 2, 4])"
    ],
    "sample_256": [
        "minimumSum(nums = [3, 1, 2, 4])",
        "minimumSum(nums = [1, 3, 5, 7, 9])",
        "minimumSum(nums = [1, 3, 6, 2, 5])",
        "minimumSum(nums = [4, 3, 2, 6, 2, 3, 4])",
        "minimumSum(nums = [4, 2, 3, 1, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSum(nums = [2,3,4,5,6])",
        "minimumSum(nums = [1,2,1,2,6,7,5,1])",
        "minimumSum(nums = [1, 2, 5, 7, 9])",
        "minimumSum(nums = [1, 1, 4, 1, 1, 6, 1, 1, 1, 1])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0],\n                            [1, 0, 1],\n                            [1, 0, 1]])",
        "findChampion(grid = [[0, 0, 0, 1], [0, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]])"
    ],
    "sample_372": [
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"code\")",
        "sortVowels(s = \"code\")",
        "sortVowels(s = 'leotcede')",
        "sortVowels(s = \"code\")",
        "sortVowels(s = \"EOtcede\")",
        "sortVowels(s = \"Let's code!\")",
        "sortVowels(s = \"delete\")",
        "sortVowels(s = 'Tedocedel')"
    ],
    "sample_292": [
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"11010\")",
        "minimumSteps(s = \"110011\")",
        "minimumSteps(s = \"100110\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"1111111110\")",
        "minimumSteps(s = \"111000101\")",
        "minimumSteps(s = \"0001001\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 0])",
        "minimumRightShifts(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0])",
        "minimumRightShifts(nums = [2, 4, 2, 4])",
        "minimumRightShifts(nums = [2, 1, 0, 3, 5, 4])",
        "minimumRightShifts(nums = [2, 0, 3, 2, 4, 5])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 2, 3])",
        "minOperations(nums = [1, 2, 2, 3])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1,2,3,1,2,3,1,2,3])",
        "minOperations(nums = [1, 2, 3, 2, 3, 2, 3])",
        "minOperations(nums = [2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "minOperations(nums = [3, 1, 2, 3, 3, 2, 2, 2, 3, 3, 1])",
        "minOperations(nums = [1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 2, 3, 1])"
    ],
    "sample_367": [
        "sortVowels(s = 'ymph')",
        "sortVowels(s = 'ymph')",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = 'lymph')",
        "sortVowels(s = \"HmpL\")",
        "sortVowels(s = 'hYmlp')",
        "sortVowels(s = 'HpyYmpL')",
        "sortVowels(s = 'yhLPM!')",
        "sortVowels(s = 'uPHEpH')",
        "sortVowels(s = 'PypyRp')"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0,0,0], [0,0,0], [0,0,0]])",
        "findChampion(grid = [[0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0,0],[0,0],[0,0]])",
        "findChampion(grid = [[1,0], [1,0]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 1, 0]])",
        "findChampion(grid = [[1,0,0,0],\n                            [1,1,0,1],\n                            [0,0,0,0],\n                            [1,1,1,1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2], nums2 = [1, 2])",
        "minSum(nums1 = [1, 2], nums2 = [2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 3, 2], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 3, 4], nums2 = [1, 2, 3])",
        "minSum(nums1 = [2, 3, 4, 5], nums2 = [1, 0, 5])",
        "minSum(nums1 = [1, 1, 1], nums2 = [1, 2, 1, 3])",
        "minSum(nums1 = [1, 3, 4, 5], nums2 = [3, 1, 5, 4])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [3, 2, 1, 2, 4, 3], k = 2)",
        "minOperations(nums = [1, 3, 4, 8], k = 3)",
        "minOperations(nums = [2, 5, 3, 4, 1], k = 2)",
        "minOperations(nums = [1, 2, 1, 2], k = 2)",
        "minOperations(nums = [1, 2, 1, 2, 2, 1], k = 2)",
        "minOperations(nums = [1, 3, 4, 2, 7, 5], k = 3)",
        "minOperations(nums = [2, 2, 2, 1, 1, 1, 0], k = 1)",
        "minOperations(nums = [1, 2, 3, 4, 1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 3)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2, 3, 4, 5], moveTo = [2, 3, 4, 5, 6])",
        "relocateMarbles(\n    nums = [1, 2, 3, 4],\n    moveFrom = [0],\n    moveTo = [2]\n)",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [3, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1,2,3,4,5,6], moveFrom = [3, 5], moveTo = [4, 1])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [4, 3, 1], moveTo = [3, 2, 5])",
        "relocateMarbles(nums = [3, 4, 5, 6, 7], moveFrom = [0, 4], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [3, 1, 5], moveTo = [3, 5, 2])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1], m = 1, k = 1)",
        "maxSum(nums = [1, 4, 2, 5, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 1, 4], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [10, 4, 3, 8, 9], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 2, 3, 4, 2, 2, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [5,2,3,3,2,1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [100, 0, 1, 2, 3, 4, 5], m = 5, k = 4)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"az\", s2 = \"azaz\")",
        "canMakeSubsequence(s1 = \"ab",
        "canMakeSubsequence(s1 = \"azbc\", s2 = \"zbca\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"ac\")",
        "canMakeSubsequence(s1 = \"aabc\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"ab\", s2 = \"zabac\")",
        "canMakeSubsequence(s1 = \"s\", s2 = \"issi\")",
        "canMakeSubsequence(s1 = \"wqoex\", s2 = \"oexwq\")"
    ],
    "sample_270": [
        "minSum(nums1 = [0, 0], nums2 = [0, 0])",
        "minSum(nums1 = [0, 0], nums2 = [0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 1], nums2 = [0, 2])",
        "minSum(nums1 = [0, 1, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2], nums2 = [1, 2, 0])",
        "minSum(nums1 = [0, 1, 1, 1], nums2 = [1, 0, 0, 1])",
        "minSum(nums1 = [0,0,1,1], nums2 = [1,1,0,0])",
        "minSum(nums1 = [2, 5, 1, 2, 0], nums2 = [3, 0, 5])",
        "minSum(nums1 = [1, 4, 2, 0], nums2 = [2, 3, 3, 1])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"2\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', '3'])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"5\", \"prev\", \"prev\", \"4\", \"1\", \"6\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 2, 5, 4])",
        "isGood(nums = [1, 2, 4, 5, 3])",
        "isGood(nums = [2, 3, 4, 5, 6, 7])",
        "isGood(nums = [2, 1, 0, 4])",
        "isGood(nums = [3, 5, 6])",
        "isGood(nums = [1, 1, 3, 5, 7, 9])"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [1, 2, 2, 6, 6, 3])",
        "minOperations(nums = [1,2,2,2,1])",
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [1,2,3,3,2,1])",
        "minOperations(nums = [1,3,2,3])",
        "minOperations(nums = [1,1,2,1,2,2])",
        "minOperations(nums = [2,2,1,2,2])",
        "minOperations(nums = [1,2,2,3,4,5,5])",
        "minOperations(nums = [4,3,2,2,4,3,3,3])"
    ],
    "sample_451": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"xxxyyy\")",
        "minChanges(s = \"010\")",
        "minChanges(s = \"xyxz\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"xyyzyx\")",
        "minChanges(s = \"xyxyxy\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"axby\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 20, limit = 5)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 15, limit = 3)",
        "distributeCandies(n = 100, limit = 2)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5])",
        "minSum(nums1 = [1,2,0], nums2 = [1,2,0])",
        "minSum(nums1 = [2,1,3], nums2 = [2,3,1])",
        "minSum(nums1 = [1,2,0], nums2 = [0,2])",
        "minSum(nums1 = [0,0,0,0,0], nums2 = [1,1,1,1])",
        "minSum(nums1 = [1,1,0,1], nums2 = [2,2,2,2])",
        "minSum(nums1 = [0,6,5,4,3,2,1], nums2 = [0,10,9,8,7,6,5])",
        "minSum(nums1=[1,1,1,0,1], nums2=[1,1,1,0,0])",
        "minSum(nums1 = [3, 2, 0, 5, 0], nums2 = [4, 1, 0, 1, 7])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 10, 4, 7, 1])",
        "minimumRightShifts(nums = [1, 10, 4, 7, 1])",
        "minimumRightShifts(nums = [3, 2, 1, 4])",
        "minimumRightShifts(nums = [5, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 2, 5, 4, 1, 6, 7])"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3], t = 5)",
        "countPairs(nums = [1, 2, 3], t = 5)",
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(nums = [1,4,2,3], t = 7)",
        "countPairs(nums = [1, 1, 1, 1], t = 2)",
        "countPairs(nums = [1,1,2], t = 3)",
        "countPairs(nums = [1, 3, 5, 2, 4], t = 7)",
        "countPairs(nums = [2, 3, 5, 8], t = 10)",
        "countPairs(nums = [1, 1, 2, 4, 4], t = 8)",
        "countPairs(nums = [1,2,5,10], t = 5)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"push\", \"3\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"p2\", \"p1\", \"p0\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\", \"3\"])",
        "lastVisitedIntegers(words = [\"push\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"p1\", \"p2\", \"p3\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"pop\", \"push\", \"2\", \"push\", \"3\", \"pop\", \"push\", \"4\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"push\", \"3\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"p\", \"3\", \"7\", \"p\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"2\", \"s\", \"p\", \"4\", \"g\", \"p\"])",
        "lastVisitedIntegers(words = [\"push\", \"3\", \"push\", \"4\", \"pop\", \"2\", \"push\", \"3\", \"pop\", \"pop\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"zaz\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"zzzz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"zzazz\", str2 = \"zaaaaz\")",
        "canMakeSubsequence(str1 = \"azbzbz\", str2 = \"azzzb\")",
        "canMakeSubsequence(str1 = \"xzzyw\", str2 = \"zy\")",
        "canMakeSubsequence(str1 = \"mzjawxbye\", str2 = \"majayjayh\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 0, 1, 0, 1], nums2 = [1, 0, 1, 0, 1])",
        "minSum(nums1 = [1, 0, 1, 0], nums2 = [0, 1, 0, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3, 0])",
        "minSum(nums1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minSum(nums1 = [0, 0, 0, 0, 12], nums2 = [12])",
        "minSum(nums1 = [0, 2, 1, 2], nums2 = [0, 1, 1, 0])",
        "minSum(nums1 = [0,1,0,2], nums2 = [0,2,0,1])",
        "minSum(nums1 = [2, 0, 3, 2, 0], nums2 = [2, 2, 2, 2, 0])",
        "minSum(nums1 = [2, 5, 7, 8], nums2 = [0, 4, 0])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[1,1],[2,2],[3,3]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 1], [1, 3], [2, 4], [3, 2], [4, 4]], k = 2)",
        "countPairs(coordinates = [[1,2],[2,3],[3,4],[5,6],[6,7]], k = 2)",
        "countPairs(coordinates = [[2, 1], [3, 0], [0, 1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 4], [2, 3], [4, 1], [1, 3], [3, 2]], k = 3)",
        "countPairs(coordinates = [[3, 0], [0, 0], [2, 4], [1, 2], [1, 1], [0, 1]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 5], [2, 2], [1, 2], [3, 2], [4, 3]], k = 1)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"fed\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"car\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"cba\", \"abc\", \"cab\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, -2, -3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [-1, 0, 1, 2, 3, 4])",
        "maxStrength(nums = [2, 3, 4, -1, -2])",
        "maxStrength(nums = [-1, 2, 4, 5])",
        "maxStrength(nums = [-3, 1, 2, 5, 6])",
        "maxStrength(nums = [-2, -2, 1, 1, 1, 2])",
        "maxStrength(nums = [-10, 4, -4])",
        "maxStrength(nums = [4, -3, 3, -3])",
        "maxStrength(nums = [0, 2, -1, -3, 0, 2, -2])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [2, 5, 3, 7])",
        "minimumCoins(prices = [1, 2, 3, 10])",
        "minimumCoins(prices = [2, 1, 2, 2, 3])",
        "minimumCoins(prices = [3, 2, 2, 4, 2])",
        "minimumCoins(prices = [1, 6, 5, 10, 2])",
        "minimumCoins(prices = [1, 2, 10, 5, 4, 12])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [0, 1, 0, 1, 0])",
        "minLengthAfterRemovals(nums = [3, 1, 1, 3])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [2, 4, 6, 8], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 8)",
        "buyChoco(prices = [0, 0, 0, 0], money = 0)",
        "buyChoco(prices = [2, 1, 3, 4, 5], money = 4)",
        "buyChoco(prices = [2, 4, 6, 8], money = 5)",
        "buyChoco(prices = [3, 7, 2, 9], money = 10)",
        "buyChoco(prices = [1, 4, 5], money = 6)",
        "buyChoco(prices = [1, 4, 2, 5], money = 7)",
        "buyChoco(prices = [1, 10, 50, 100], money = 50)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"3\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [0, 0, 0])",
        "sumCounts(nums = [1, 2, 3, 1])",
        "sumCounts(nums = [1, 1, 2, 3, 4])",
        "sumCounts(nums = [2, 1, 2, 3])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [6, 7], moveTo = [6, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8], moveFrom = [1, 2], moveTo = [7, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [5, 8], moveTo = [8, 5])",
        "relocateMarbles(\n    nums = [4, 5, 6, 8, 9],\n    moveFrom = [5, 8],\n    moveTo = [6, 7],\n)",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [6, 2, 3], moveTo = [8, 1, 4])",
        "relocateMarbles(nums = [5, 1, 8, 6, 2, 9],\n    moveFrom = [1, 6, 7],\n    moveTo = [6, 3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9],\nmoveFrom = [5, 1, 4, 6, 8, 7],\nmoveTo = [2, 7, 1, 4, 3, 5])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"za\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azbzc\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"zaba\", str2 = \"bab\")",
        "canMakeSubsequence(str1 = \"bcz\", str2 = \"bca\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"blue\", \"green\", \"red\"], x = \"e\")",
        "findWordsContaining(words = [\"pine\", \"apple\", \"pen\"], x = \"e\")",
        "findWordsContaining(words = [\"the\", \"cat\", \"in\", \"the\", \"hat\"], x = \"t\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"pear\"], x = \"e\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"goodbye\"], x = \"h\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"a\"], x = \"l\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"foo\", \"bar\", \"hello\"], x = \"l\")",
        "findWordsContaining(words = [\"test\", \"taste\", \"tester\"], x = \"t\")",
        "findWordsContaining(words = [\"where\", \"baby\", \"cow\", \"where\"], x = \"where\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "matrixSum(nums = [[0, 0], [0, 0]])",
        "matrixSum(nums = [[1, 0, 1], [1, 1, 0], [1, 0, 1]])",
        "matrixSum(nums = [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0]])",
        "matrixSum(nums = [[0,0,0,1],[1,0,0,0],[0,1,0,0],[0,0,1,0]])",
        "matrixSum(nums = [[1], [3, 2], [5, 4, 6, 7]])",
        "matrixSum(nums = [[1, 2, 3], [2, 5, 3], [2, 1, 1]])",
        "matrixSum(nums = [[0,1,2,0], [1,2,0,2], [0,0,0,2]])",
        "matrixSum(nums = [[5, 3, 1, 4], [2, 3, 6, 8], [1, 3, 1, 2], [7, 6, 5, 1]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 1)",
        "buyChoco(a = [1, 2], money = 1)",
        "buyChoco(a = [10, 20], money = 10)",
        "buyChoco(a = [5, 7], money = 10)",
        "buyChoco(a = [1,2], money = 2)",
        "buyChoco(a = [1, 4], money = 3)",
        "buyChoco(a = [0, 100], money = 100)",
        "buyChoco(a = [1, 2, 1], money = 5)",
        "buyChoco(a = [2,3,1], money = 5)",
        "buyChoco(a = [30, 20, 10], money = 25)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [4, 3, 3, 1, 1])",
        "minGroupsForValidAssignment(nums = [4, 3, 3, 1, 1])",
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2])",
        "minGroupsForValidAssignment(nums = [2, 1, 2, 5, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 3, 3, 4, 4, 5, 1])",
        "minGroupsForValidAssignment(nums = [1,1,3,2,2,2,2,2,2,3,1,1,1])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 0])",
        "minimumRightShifts(nums = [4, 5, 1, 2, 3])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumRightShifts(nums = [1, 10, 100])",
        "minimumRightShifts(nums = [3, 2, 5, 4, 6, 1])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [5, 4, 2, 3])",
        "minimumRightShifts(nums = [4, 2, 3, 5, 1, 6, 7, 8, 9])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 3, 5, 7, 9])",
        "maxStrength(nums = [3, 5, 6, 7, 8])",
        "maxStrength(nums = [5, 2, 4])",
        "maxStrength(nums = [2, 3, 5])",
        "maxStrength(nums = [5, 2, 3, 9])",
        "maxStrength(nums = [1, 3, 2, 5])",
        "maxStrength(nums = [2, 5, 6, 4])",
        "maxStrength(nums = [4, 3, 2, 6])",
        "maxStrength(nums = [2, 3, 1, 5, 6])",
        "maxStrength(nums = [5, 1, 4, 3])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 15, limit = 5)",
        "distributeCandies(n = 100, limit = 10)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 11, limit = 5)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 3, 2, 3, 4, 5])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\", \"dog\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"mango\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"coconut\"], x = \"na\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"apple\", \"kiwi\"], x = \"an\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"apple\", \"zebra\"], x = \"a\")",
        "findWordsContaining(words = [\"hey\", \"bro\"], x = \"y\")",
        "findWordsContaining(words = [\"car\", \"pet\", \"rabbit\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"sport\"], x = \"n\")",
        "findWordsContaining(words = [\"cat\", \"bats\", \"freaks\"], x = \"a\")",
        "findWordsContaining(words = [\"mellow\", \"smile\", \"beach\", \"pillow\"], x = \"w\")"
    ],
    "sample_278": [
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 2], [3, 4, 5], [6, 7, 8]])",
        "findChampion(grid = [[1,0,0],[0,1,1],[0,0,1]])",
        "findChampion(grid = [[1, 2, 3], [1, 3, 2], [3, 1, 2]])",
        "findChampion(grid = [[1, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1], [1, 0, 0, 0, 0]])",
        "findChampion(grid = [[2, 1, 0], [0, 2, 1], [1, 1, 1]])",
        "findChampion(grid = [[1,1,0,0], [0,1,1,0], [0,0,0,1], [0,0,0,0]])",
        "findChampion(grid = [[0, 1, 2],\n                             [0, 1, 2],\n                             [1, 1, 0]])",
        "findChampion(grid = [[1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0], [1, 0, 1, 1, 1], [0, 0, 0, 1, 1], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0,1,1,0])",
        "maxSubarrays(nums = [1, 2, 3, 0, 4, 5])",
        "maxSubarrays(nums = [2, 6, 4, 8, 10, 9, 15])",
        "maxSubarrays(nums = [2, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [2, 1, 0, 3, 4, 5, 2, 3])",
        "maxSubarrays(nums = [3, 5, 0, 3, 4, 2, 3, 4, 1])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"beabeefeab\", k = 3)",
        "beautifulSubstrings(s = \"aabb\", k = 3)",
        "beautifulSubstrings(s = \"abcbc\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"ccaabbb\", k = 5)",
        "beautifulSubstrings(s = \"xaeiouy\", k = 3)",
        "beautifulSubstrings(s = \"abcbcbcbc\", k = 2)",
        "beautifulSubstrings(s = \"kickstart\", k = 3)",
        "beautifulSubstrings(s = \"submissionsareforyou\", k = 3)",
        "beautifulSubstrings(s = \"ababbababababba\", k = 3)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minimumSeconds(nums = [1,1,1])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [2, 3, 1, 1, 4])",
        "minimumSeconds(nums = [3,2,1,5,4])",
        "minimumSeconds(nums = [3,3,1,1])",
        "minimumSeconds(nums = [2, 1, 3, 5, 4, 3])",
        "minimumSeconds(nums = [7, 3, 3, 4, 1, 8])",
        "minimumSeconds(nums = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 13)",
        "isFascinating(n = 12345)",
        "isFascinating(n = 19)",
        "isFascinating(n = 1488)",
        "isFascinating(n = 1488)",
        "isFascinating(n = 1111)",
        "isFascinating(n = 99)",
        "isFascinating(n = 567)",
        "isFascinating(n = 69)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1], target = 1)",
        "lengthOfLongestSubsequence(nums = [0], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 4, 45, 6, 10], target = 51)",
        "lengthOfLongestSubsequence(nums = [1, 2, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [5, 2, 4, 6], target = 1)",
        "lengthOfLongestSubsequence(nums = [5,3,8], target = 100)",
        "lengthOfLongestSubsequence(nums = [2, 4, 8, 16, 32, 64, 128, 256, 512], target = 448)",
        "lengthOfLongestSubsequence(nums = [50, 4, 20, 15], target = 30)",
        "lengthOfLongestSubsequence(nums = [2, 5, 3, 2, 1, 4, 2], target = 13)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1], [1], [1]])",
        "matrixSum(nums = [[1, 3], [2, 4]])",
        "matrixSum(nums = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "matrixSum(nums = [[0], [1], [2]])",
        "matrixSum(nums = [[1,2,3,4,5], [1,2,3,4,5]])",
        "matrixSum(nums = [[0,0,0],[0,0,0]])",
        "matrixSum(nums = [[2, 4], [2, 1]])",
        "matrixSum(nums = [[1, 3, 5, 7], [3, 6, 9, 12]])",
        "matrixSum(nums = [[0, 2, 3, 3], [2, 4, 6, 1], [0, 1, 1, 4], [1, 3, 5, 8]])"
    ],
    "sample_326": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 2)",
        "isFascinating(n = 10)",
        "isFascinating(n = 4)",
        "isFascinating(n = 8)",
        "isFascinating(n = 6)",
        "isFascinating(n = 13)",
        "isFascinating(n = 13)",
        "isFascinating(n = 21)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [\n    [1, 0, 0, 0],\n    [0, 1, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 1]\n])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 1],\n                            [0, 0, 1, 1],\n                            [1, 1, 0, 1],\n                            [1, 0, 0, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 7, 4, 3, 2])",
        "minimumSum(nums = [3, 6, 2, 4, 5, 1])",
        "minimumSum(nums = [4, 1, 2, 3])",
        "minimumSum(nums = [4, 1, 5, 7])",
        "minimumSum(nums = [2, 5, 1, 3, 4])",
        "minimumSum(nums = [3, 5, 1, 2, 6])",
        "minimumSum(nums = [10, 2, 4, 8, 6])",
        "minimumSum(nums = [3, 4, 2, 9, 7, 8])",
        "minimumSum(nums = [2, 4, 7, 8, 10, 16, 12, 11, 14])"
    ],
    "sample_450": [
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"10111\")",
        "minChanges(s = \"10011\")",
        "minChanges(s = \"bbbab\")",
        "minChanges(s = \"abbccc\")",
        "minChanges(s = \"00101\")",
        "minChanges(s = \"abbb\")",
        "minChanges(s = \"xxxyyxyx\")",
        "minChanges(s = \"ba\")",
        "minChanges(s = \"313\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"10110\", s2 = \"10111\", x = 1)",
        "minOperations(s1 = \"0110\", s2 = \"0110\", x = 1)",
        "minOperations(s1 = \"1001\", s2 = \"0011\", x = 1)",
        "minOperations(s1 = \"11000\", s2 = \"11000\", x = 2)",
        "minOperations(s1 = \"111\", s2 = \"001\", x = 1)",
        "minOperations(s1 = \"1111\", s2 = \"1010\", x = 5)",
        "minOperations(s1 = \"1011\", s2 = \"1010\", x = 100)",
        "minOperations(s1 = \"101010\", s2 = \"001100\", x = 3)",
        "minOperations(s1 = \"1000111000\", s2 = \"1010011010\", x = 3)",
        "minOperations(s1 = \"10000011\", s2 = \"01111100\", x = 5)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 2, y = 4, z = 6)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 2)",
        "longestString(x = 4, y = 5, z = 3)",
        "longestString(x = 6, y = 2, z = 2)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [0, 0, 0, 0])",
        "maxSubarrays(nums = [4, 2, 5, 3])",
        "maxSubarrays(nums = [0, 1, 1, 1, 1, 0])",
        "maxSubarrays(nums = [2, 3, 1])",
        "maxSubarrays(nums = [1,2,4,8])",
        "maxSubarrays(nums = [7, 1, 4, 0])",
        "maxSubarrays(nums = [1, 2, 3, 0, 2, 2])",
        "maxSubarrays(nums = [1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4])",
        "maxSubarrays(nums = [3, 5, 2, 1, 4, 7, 8])",
        "maxSubarrays(nums = [1, 1, 2, 2, 2, 2, 3, 4, 3, 4, 3])"
    ],
    "sample_306": [
        "countSeniors(details = [\"Mary is a senior\", \"Peter is a senior\", \"Julian is not a senior\"])",
        "countSeniors(details = [\"Aged 21, male\", \"Aged 55, female\", \"Aged 21, male\", \"Aged 62, female\"])",
        "countSeniors(details = [\"William Wallace (1766-1837)\", \"John Wallace (1837-1913)\", \"William Wallace (1913-2005)\"])",
        "countSeniors(details = [\"name\", \"age\", \"weight\", \"height\", \"HWV\", \"SSF\", \"weight\", \"height\", \"HWV\", \"SSF\", \"weight\", \"height\", \"HWV\", \"SSF\", \"weight\", \"height\", \"HWV\", \"SSF\"])",
        "countSeniors(details = [\"Amy, 23\", \"Betty, 25\", \"Charlie, 65\", \"Dora, 55\", \"Eliza, 27\", \"Fiona, 23\"])",
        "countSeniors(details = [\"Jane Doe, 28, female, 748 Evergreen Terrace\", \"John Doe, 90, male, 4321 Somewhere Else\", \"Sarah Connor, 60, female, 123 Appletree Lane\"])",
        "countSeniors(details = [\"Melbourne, Australia, 35, Male, 75.1\", \"Seoul, South Korea, 53, Female, 165.1\", \"Tokyo, Japan, 67, Male, 180\"])",
        "countSeniors(details = [\"10-01-1980, Yoshi Tannamuri, Male, 23, 10-11-2021, 18.75\", \"22-04-1988, Yoshi Tannamuri, Male, 23, 10-11-2021, 18.75\", \"10-11-1971, Yoshi Tannamuri, Male, 23, 10-11-2021, 18.75\"])",
        "countSeniors(details = [\"02 01 01112002 Thomas 18\", \"02 01 01112003 Jean 52\", \"02 01 01112004 Joseph 55\", \"02 01 01112005 Peter 19\", \"02 01 01112006 Linda 56\", \"02 01 01112007 Jim 20\", \"02 01 01112008 Jane 23\", \"02 01 01112009 Albert 60\", \"02 01 01112010 Robert 62\", \"02 01 01112011 Lisa 42\", \"02 01 01112012 Debra 21\"])",
        "countSeniors(details = [\"710-34-2345 John Smith 12/13/1990 60000\", \"210-12-1312 Mary Smith 09/22/1975 120000\", \"210-87-3352 Ed Jones 04/12/1990 80000\", \"210-32-1287 Jane Jones 02/12/1989 30000\", \"710-77-9927 John Smith 07/09/1967 200000\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [0, 0, 0, 0, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [3, 4, 5, 2, 8, 9])",
        "maxSubarrays(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "maxSubarrays(nums = [2, 3, 5, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 0, 1, 2, 3])",
        "maxSubarrays(nums = [4, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [10, 7, 1, 13, 15, 10, 6])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [7, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2], moveTo = [7, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [5, 8, 9], moveFrom = [5, 8], moveTo = [6, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 6, 7], moveTo = [6, 7, 8])",
        "relocateMarbles(nums = [3, 4, 5, 6, 7, 8, 9], moveFrom = [3, 4, 5], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [7, 9], moveTo = [8, 7])",
        "relocateMarbles(nums = [6, 4, 5, 8, 9], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 6, 8], moveTo = [6, 1, 7])",
        "relocateMarbles(nums = [4, 3, 7, 8, 9], moveFrom = [1, 5], moveTo = [2, 7])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"abac\", s2 = \"abac\", s3 = \"abac\")",
        "findMinimumOperations(s1 = \"bana\", s2 = \"nana\", s3 = \"nana\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bbb\", s3 = \"aca\")",
        "findMinimumOperations(s1 = \"abab\", s2 = \"abbb\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"abac\", s2 = \"cbaa\", s3 = \"aaba\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"x\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"dca\", s3 = \"cbc\")",
        "findMinimumOperations(s1 = \"axb\", s2 = \"bxc\", s3 = \"cxd\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4,5,5,6,6])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [2, 3, 2])",
        "minLengthAfterRemovals(nums = [3,1,4,2])",
        "minLengthAfterRemovals(nums = [2,4,5,3,5])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 0, 1, 1, 0, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [5, 7, 6, 9, 1, 10])"
    ]
}