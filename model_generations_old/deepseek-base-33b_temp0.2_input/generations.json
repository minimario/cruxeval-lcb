{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2], [3, 4]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 0)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3], money = 2)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 10)",
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 10)",
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 10)",
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 10)",
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 10)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3,4,5,6], l = 1, r = 2)"
    ],
    "sample_322": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 4, 3, 2, 1])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)"
    ],
    "sample_247": [
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"bcdf\", x = 3)",
        "minOperations(s1 = \"abcd\", s2 = \"bcdf\", x = 3)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"bcda\", x = 2)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 4, z = 2)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 7)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbabba\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 3])",
        "isGood(a = [1, 2, 3, 3])",
        "isGood(a = [1, 2, 3, 3])",
        "isGood(a = [1, 2, 3, 3])",
        "isGood(a = [1, 2, 3, 3])",
        "isGood(a = [1, 2, 3, 3])",
        "isGood(a = [1, 2, 3, 4, 5, 5])",
        "isGood(a = [1, 2, 3, 4, 4])",
        "isGood(a = [1, 2, 3, 4, 4])",
        "isGood(a = [1, 2, 3, 4, 3])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 1, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"001101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011100\", k = 2)",
        "shortestBeautifulSubstring(s = \"10110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011011101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"1011001101\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s
        "minimumSteps(s = \"110001\")",
        "minimumSteps(s = \"101010101\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcde\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"abc\", s3 = \"abcd\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"z\")"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8], moveTo = [8, 9, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8], moveTo = [8, 9, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3, 4], moveTo = [5, 6, 7, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3, 4], moveTo = [5, 6, 7, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [6, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 9], moveTo = [8, 5])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Joe is 21\", \"Bill is 55\", \"Sally is 66\", \"Beatrice is 43\"])",
        "countSeniors(details = [\"123456789\", \"987654321\", \"123456789\", \"987654321\"])",
        "countSeniors(details = [\"123456789\", \"987654321\", \"123456789\", \"987654321\"])",
        "countSeniors(details = [\"123456789\", \"123456789\", \"123456789\", \"123456789\", \"123456789\", \"123456789\", \"123456789\", \"123456789\", \"123456789\", \"123456789\"])",
        "countSeniors(details = [\"John, 65\", \"Jane, 60\", \"Jim, 70\", \"Jack, 55\"])",
        "countSeniors(details = [\"Jane, 20\", \"Joe, 61\", \"Jill, 59\", \"Jack, 70\"])",
        "countSeniors(details = [\"Jane, 20\", \"Joe, 60\", \"Jill, 50\", \"Jack, 70\"])",
        "countSeniors(details = [\"Joe, 65\", \"Jane, 72\", \"Jill, 34\", \"Jack, 55\"])",
        "countSeniors(details = [\"Joe, 65\", \"Bob, 75\", \"Jane, 55\"])",
        "countSeniors(details = [\"John 32\", \"Jane 65\", \"Bob 23\", \"Mary 18\", \"Joe 45\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"baaabbabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abaaabbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabbba\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"01001\", k = 2)",
        "shortestBeautifulSubstring(s = \"01001\", k = 2)",
        "shortestBeautifulSubstring(s = \"01001\", k = 2)",
        "shortestBeautifulSubstring(s = \"001101\", k = 5)",
        "shortestBeautifulSubstring(s = \"10110\", k = 4)",
        "shortestBeautifulSubstring(s = \"10110\", k = 4)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"01001001\", k = 4)",
        "shortestBeautifulSubstring(s = \"1011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"111000010101110111101010101\", k = 5)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aaa\", \"bbb\", \"cde\"])",
        "minimizeConcatenatedLength(words = [\"aaa\",\"bbb\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"aaa\",\"bbb\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\", \"cc\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findMaximumLength(nums = [1, 2, 3])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])"
    ],
    "sample_302": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 1, 2])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"z\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"p\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3], money = 2)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbabba\")",
        "longestSemiRepetitiveSubstring(s = \"abaaabbba\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1,2,3,4,5,6])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10)"
    ],
    "sample_368": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = 'lYmPh')",
        "sortVowels(s = 'lYmPh')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'HYlmp')",
        "sortVowels(s = 'HYlmp')"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)"
    ],
    "sample_449": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"aabb\")"
    ],
    "sample_291": [
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"100111001\")"
    ],
    "sample_305": [
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minGroupsForValidAssignment(nums = [2,2,1,1,1,2,2,2,2,2])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], k = 10)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], k = 10)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], k = 10)",
        "countPairs(coordinates = [[1, 1], [1, 2], [2, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]], k = 10)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 5)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 5)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]], k = 10)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1], [3, 0], [3, 1]], k = 1)"
    ],
    "sample_401": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 2)"
    ],
    "sample_452": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abb\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 2])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110110\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110\", k = 2)",
        "shortestBeautifulSubstring(s = '01011', k = 2)",
        "shortestBeautifulSubstring(s = '00110', k = 2)",
        "shortestBeautifulSubstring(s = '00110', k = 2)",
        "shortestBeautifulSubstring(s = \"10110\", k = 2)",
        "shortestBeautifulSubstring(s = \"000110110\", k = 3)",
        "shortestBeautifulSubstring(s
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 6, limit = 2)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])"
    ],
    "sample_453": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 2])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 1, k = 5)"
    ],
    "sample_293": [
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"0101010101\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"00100\")",
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"0100101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)"
    ],
    "sample_290": [
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"0000\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)"
    ],
    "sample_363": [
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [2, 1, 3])",
        "isGood(nums = [2, 1, 3])",
        "isGood(nums = [2, 1, 3])",
        "isGood(nums = [1, 3, 2, 2])",
        "isGood(nums = [1, 3, 2, 2, 3, 1])",
        "isGood(nums = [1, 3, 2, 2, 3, 1])"
    ],
    "sample_325": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 3, 3, 2])",
        "isGood(nums = [1, 3, 2, 2, 5, 2, 3, 7])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 3, 3])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 3, 3])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 3, 3])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 3, 3])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 3, 3])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 3, 3])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 3, 3])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 3, 1, 2, 3])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [1, 3, 2, 4, 5])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"011100\", k = 3)",
        "shortestBeautifulSubstring(s = \"011100\", k = 3)",
        "shortestBeautifulSubstring(s = \"011100\", k = 3)",
        "shortestBeautifulSubstring(s = '011100', k = 3)",
        "shortestBeautifulSubstring(s = \"00110110\", k = 3)",
        "shortestBeautifulSubstring(s = '1011101', k = 2)",
        "shortestBeautifulSubstring(s = '1011101', k = 2)",
        "shortestBeautifulSubstring(s = \"0110011\", k = 2)",
        "shortestBeautifulSubstring(s = '11011', k = 2)",
        "shortestBeautifulSubstring(s = \"00111\", k = 2)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4])"
    ],
    "sample_289": [
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"101\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 100)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 2)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])"
    ],
    "sample_448": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 5, 3, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 5, 3, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 1, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 5, 3, 9, 8], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 1, 8, 3, 9], limit = 4)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 5)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 4, 6])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110\", k = 2)",
        "shortestBeautifulSubstring(s = \"110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"10011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"010110\", k = 2)",
        "shortestBeautifulSubstring(s = \"011100\", k = 2)",
        "shortestBeautifulSubstring(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"101101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"010111100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,1,2,1,2])",
        "minimumSeconds(nums = [1,2,1,2,1,2])",
        "minimumSeconds(nums = [1,2,1,2,1,2])",
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1,2,1,2,1,2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dd\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"abcdefghijklmnopqrstuvwxyz\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abaaab\")",
        "longestSemiRepetitiveSubstring(s = \"abaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbb\")"
    ],
    "sample_399": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 1, k = 1)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2,3], moveTo = [2,3,1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2,3], moveTo = [2,3,1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2,3], moveTo = [2,3,1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3, 2], moveTo = [2, 1, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2, 3], moveTo = [2, 3, 1])",
        "relocateMarbles(nums = [1,1,3,3,3,2], moveFrom = [1,3,2], moveTo = [2,1,3])",
        "relocateMarbles(nums = [1,1,3,3,3,2], moveFrom = [1,3,2], moveTo = [2,1,3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3,2], moveTo = [2,1,3])",
        "relocateMarbles(nums = [1,1,2,2,3,3], moveFrom = [1,2,3], moveTo = [2,3,1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3,3], moveTo = [2,1,2])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"baaabbabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abaaabbbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abaaabbbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbabba\")",
        "longestSemiRepetitiveSubstring(s = \"aabaaa\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cba\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")"
    ],
    "sample_324": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9,10])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9,10])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9,10])",
        "minimumCoins(prices = [1, 2, 3, 4])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 6)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment(nums = [2,3,3,3,3,4,4,4,4,4,5])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1,2,3], money = 3)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"cd\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_307": [
        "countSeniors(details = [\"123456789\", \"987654321\", \"123456789\", \"987654321\"])",
        "countSeniors(details = [\"123456789\", \"987654321\", \"123456789\"])",
        "countSeniors(details = [\"123456789\", \"987654321\", \"123456789\"])",
        "countSeniors(details = [\"123456789\", \"987654321\", \"123456789\", \"987654321\"])",
        "countSeniors(details = [\"123456789\", \"987654321\", \"123456789\"])",
        "countSeniors(details = [\"123456789\", \"987654321\", \"123456789\"])",
        "countSeniors(details = [\"123456789\", \"987654321\", \"123456789\"])",
        "countSeniors(details = [\"123456789\", \"123456789\", \"123456789\"])",
        "countSeniors(details = [\"123456789\", \"123456789\", \"123456789\"])",
        "countSeniors(details = [\"3467845398 30\", \"4567234435 55\", \"0298423212 78\", \"9877363539 63\", \"9871673436 74\", \"7689653495 83\"])"
    ],
    "sample_323": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 2)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 3)"
    ],
    "sample_419": [
        "minOperations(nums = [3,1,3,2,5,3], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6], k = 6)",
        "minOperations(nums = [1,2,3,4,5,6], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [3,2,20,1,1,3], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"00110110\", k = 3)",
        "shortestBeautifulSubstring(s = \"001101\", k = 2)",
        "shortestBeautifulSubstring(s = \"001101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"011100\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"000111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0101101111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011011110101010101101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"01011\")",
        "minimumBeautifulSubstrings(s = \"011100\")"
    ],
    "sample_341": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 2, z = 1)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [0, 1, 0]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)"
    ],
    "sample_304": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567",
        "countSeniors(details = [\"1234567890AB56\", \"1234567890AB57\", \"1234567890AB58\", \"1234567890AB59\", \"1234567890AB60\"])",
        "countSeniors(details = [\"1234567890AB56\", \"1234567890AB57\", \"1234567890AB58\", \"1234567890AB59\", \"1234567890AB60\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"011011100101100110101001100101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "minOperations(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "minOperations(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "minOperations(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "minOperations(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "minOperations(a = [1, 2, 3], b = [2, 3, 1])",
        "minOperations(a = [1, 2, 3], b = [2, 3, 1])",
        "minOperations(a = [1, 2, 3], b = [2, 3, 1])",
        "minOperations(a = [1, 2, 3], b = [2, 3, 1])",
        "minOperations(a = [1, 2, 3], b = [2, 1, 3])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"bb\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"bb\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"bb\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"bb\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"lYmpH\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1, 2, 1, 2])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])"
    ],
    "sample_372": [
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = 'Leetcode')"
    ],
    "sample_292": [
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"101011\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"00110\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])"
    ],
    "sample_367": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"lYmpH\")"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 1, 1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 9)",
        "minOperations(nums = [1,2,3,4,5,6], k = 6)",
        "minOperations(nums = [1,2,3,4], k = 4)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2, 3], moveTo = [2, 3, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2, 3], moveTo = [2, 3, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2, 3], moveTo = [2, 3, 1])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"abcdefghijklmnopqrstuvwxyz\", s2 = \"zabcdefghijklmnopqrstuvwxy\")",
        "canMakeSubsequence(s1 = \"abcdef\", s2 = \"abd\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"ace\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abcdefghijklmnopqrstuvwxyz\", s2 = \"z\")",
        "canMakeSubsequence(s1 = \"abcdefghijklmnopqrstuvwxyz\", s2 = \"zab\")",
        "canMakeSubsequence(s1 = \"abcdefghijklmnopqrstuvwxyz\", s2 = \"zab\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bcd\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"az\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 1, 2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 2, 3])",
        "minSum(nums1 = [1, 0, 2], nums2 = [1, 1, 1])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])"
    ],
    "sample_451": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 2)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minSum(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minSum(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minSum(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minSum(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minSum(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minSum(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minSum(nums1 = [1,2,3], nums2 = [2,3,4])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 1])"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [2, 7, 11, 15], t = 10)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\", \"1\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"pop\", \"push\", \"pop\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"zab\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"zab\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"zab\")",
        "canMakeSubsequence(str1 = \"zxz\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"zbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbzbz"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 0, 3], nums2 = [5, 3, 4, 0, 7])",
        "minSum(nums1 = [1, 2, 3, 0, 3], nums2 = [5, 3, 4, 0, 7])",
        "minSum(nums1 = [1, 2, 3, 0, 3], nums2 = [5, 3, 4, 0, 7])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]], k = 1)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dc\", \"ll\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dd\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [2, -1, 1, 1])",
        "maxStrength(nums = [2, -1, 1, 1])",
        "maxStrength(nums = [2, -1, 1, 1])",
        "maxStrength(nums = [2, 3, -2, 4])",
        "maxStrength(nums = [2, 3, -2, 4])",
        "maxStrength(nums = [2, 3, -2, 4])",
        "maxStrength(nums = [2,3,-2,4])",
        "maxStrength(nums = [2, -3, 1, 0, -5])",
        "maxStrength(nums = [2, 3, 5, -2, -4])",
        "maxStrength(nums = [2, 3, 5, -2, -4])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 5])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"abcdefghijklmnopqrstuvwxyza\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [1, 2, 3], money = 1)",
        "buyChoco(a = [1, 2, 3], money = 1)",
        "buyChoco(a = [1, 2], money = 1)",
        "buyChoco(a = [1, 2, 3], money = 5)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 1, 2])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])"
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 2)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")"
    ],
    "sample_278": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [1, 0, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1, 2, 3, 1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])"
    ],
    "sample_327": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_326": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [0, 0, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_450": [
        "minChanges(s = \"abbabb\")",
        "minChanges(s = \"abbabb\")",
        "minChanges(s = \"abbabb\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abb\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"ababababab\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 2)",
        "minOperations(s1 = \"10101\", s2 = \"11111\", x = 1)",
        "minOperations(s1 = \"111000\", s2 = \"101010\", x = 2)",
        "minOperations(s1 = \"1111\", s2 = \"1111\", x = 1)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 1)",
        "minOperations(s1 = \"0110\", s2 = \"1001\", x = 2)",
        "minOperations(s1 = \"111000\", s2 = \"001011\", x = 2)"
    ],
    "sample_342": [
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 3, z = 1)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_306": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [6, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [6, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [6, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [6, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [6, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 5])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"bca\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [0, 2, 10], [1, 3, 15], [2, 4, 20], [3, 4, 25]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 1], [3, 4, 2], [4, 5, 3]])",
        "maximizeTheProfit(n = 10, offers = [[0, 5, 10], [2, 7, 15], [5, 9, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 3, 5], [2, 4, 7], [3, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 4, 5], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 4], [3, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 5], [3, 5, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 10], [3, 4, 10], [4, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 4, 5], [2, 4, 1], [2, 5, 2]])",
        "maximizeTheProfit(n = 10, offers = [[0, 5, 10], [3, 7, 10], [5, 10, 10]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 4)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 0, 1], k = 1)",
        "checkArray(nums = [1, 0, 1], k = 1)",
        "checkArray(nums = [1, 0, 1], k = 1)",
        "checkArray(nums = [1, 0, 1], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \",\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minimumIndex(nums = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minimumIndex(nums = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minimumIndex(nums = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minimumIndex(nums = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minimumIndex(nums = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minimumIndex(nums = [1,2,2,2])",
        "minimumIndex(nums = [1,2,2,2,3,4,4,4,4,4])",
        "minimumIndex(nums = [1,2,2,2,3,4,4,4,4,4])",
        "minimumIndex(nums = [1,2,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 4], [3, 6], [2, 8]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 3, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [4, 6]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 3)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [2, 1, 3, 5, 4, 8], m = 7)",
        "canSplitArray(nums = [2, 1, 3, 5, 4, 8], m = 7)",
        "canSplitArray(nums = [2, 1, 3, 5, 4, 8], m = 7)",
        "canSplitArray(nums = [2, 1, 3], m = 5)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [0, 2, 10], [1, 3, 15], [2, 4, 20]])",
        "maximizeTheProfit(n = 5, offers = [[0, 0, 1], [0, 2, 2], [1, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 10, offers = [[0, 2, 5], [1, 3, 4], [2, 4, 3], [3, 5, 2], [4, 6, 1], [5, 7, 2], [6, 8, 3], [7, 9, 4], [8, 10, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [0, 2, 3], [1, 3, 4], [2, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [0, 2, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 3], [1, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 2], [2, 3, 3], [3, 4, 4], [4, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [0, 2, 6], [1, 3, 7], [1, 4, 8], [2, 3, 9], [2, 4, 10], [3, 4, 11]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1], k = 2)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbncz')"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [3,4,5,7,8], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,4,5,7,8], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,4,5,7,8], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7], threshold = 1)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7], threshold = 10)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCDCDABAB\")",
        "minLength(s = \"ABABCDCDABAB\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abaac\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 0, 1], k = 1)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0], target = 1)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)"
    ],
    "sample_205": [
        "minimumOperations(num = \"5200\")",
        "minimumOperations(num = \"5200\")",
        "minimumOperations(num = \"5200\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"1000\")",
        "minimumOperations(num = \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"10000\")"
    ],
    "sample_204": [
        "minimumOperations(s
        "minimumOperations(s
        "minimumOperations(s
        "minimumOperations(s
        "minimumOperations(s
        "minimumOperations(s
        "minimumOperations(s
        "minimumOperations(s = \"001100\")",
        "minimumOperations(s = \"123456789\")",
        "minimumOperations(s = \"5225\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LLRAA\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bao\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [21, 31, 49])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDABCD\")"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1,"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,1],[1,1],[2,1]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)"
    ],
    "sample_171": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 5, 1, 4, 2, 3], m = 5, k = 3)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], t = 5)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], t = 4)",
        "longestAlternatingSubarray(nums = [3, 4, 5, 7, 8], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 3)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"512301000000\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)"
    ],
    "sample_161": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [3,6,1])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9]])",
        "numberOfPoints(nums = [[1, 4], [7, 10], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3, 4], target = 10)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1, 0])"
    ],
    "sample_159": [
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [2, 4, 6, 8, 10])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)"
    ],
    "sample_160": [
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbncz')"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abb')"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 10)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 5, 4, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 5, 4, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 4, 5, 3], m = 4, k = 2)"
    ],
    "sample_40": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aabb\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = '51230100')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5, 2, 6, 4, 2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5, 2, 6, 4, 2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [3,1,4,3,2,2,4], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2, 1, 4, 5, 3, 9, 6], m = 3, k = 6)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 1)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 1, 2, 2, 3, 3])",
        "maxIncreasingGroups(u = [1, 1, 2, 2, 3, 3])",
        "maxIncreasingGroups(u = [1, 2, 3])",
        "maxIncreasingGroups(u = [1, 2, 3])",
        "maxIncreasingGroups(u = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "maxIncreasingGroups(u = [1, 1, 1, 2, 2, 3])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 0, 1, 1, 0], k = 2)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3, 4], target = 10)",
        "minOperations(nums = [1, 2, 3, 4], target = 10)",
        "minOperations(nums = [1, 2, 3, 4], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], target = 100)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \",\")"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"L___R__R_\")",
        "furthestDistanceFromOrigin(moves = \"L_R__R_\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L",
        "furthestDistanceFromOrigin(moves = \"L__R_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"L_R__L\")",
        "furthestDistanceFromOrigin(moves = \"L__R_L\")",
        "furthestDistanceFromOrigin(moves = \"L_RR___\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')"
    ],
    "sample_146": [
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pontie\")",
        "finalString(s = \"pinter\")",
        "finalString(s = \"pointe\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [2, 1, 3], m = 5)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five,six\"], separator = \",\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)"
    ],
    "sample_168": [
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bapo\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ba\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abb\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abcd')"
    ],
    "sample_50": [
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"aaab\")",
        "smallestString(s = \"aaab\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)"
    ],
    "sample_20": [
        "minLength(s
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s
        "minLength(s = \"ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCD",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABABCDCDABABCDCD\")",
        "minLength(s = \"ABABCDCDABABCDCD\")"
    ],
    "sample_158": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])"
    ],
    "sample_162": [
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 24, 42])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '10001')",
        "maximumOddBinaryNumber(s = '11001')",
        "maximumOddBinaryNumber(s = '111000')",
        "maximumOddBinaryNumber(s = '11011')",
        "maximumOddBinaryNumber(s = '110011')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)"
    ],
    "sample_166": [
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bapo\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(A = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"abbbcc\")",
        "minimizedStringLength(s = \"abbbccc\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)"
    ],
    "sample_10": [
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '111000')",
        "maximumOddBinaryNumber(s = '111000')",
        "maximumOddBinaryNumber(s = '111000')",
        "maximumOddBinaryNumber(s = '111000')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '000111')",
        "maximumOddBinaryNumber(s = '00000')",
        "maximumOddBinaryNumber(s = '1001')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)"
    ],
    "sample_149": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])"
    ],
    "sample_228": [
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [0,1,2,3])",
        "countWays(nums = [0,1,2,3,4,5])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [1, 0, 2])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1,5,4,2,9,9,9], k = 3)",
        "maximumBeauty(nums = [1,5,4,2,9,9,9], k = 3)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 5])",
        "distinctDifferenceArray(a = [5, 3, 1, 3, 2, 3])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 4])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(a = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(a = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 2, 3, 4, 5, 6])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3])",
        "continuousSubarrays(nums = [1, 2, 3])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [11, 21, 12])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"00000\")",
        "maximumOddBinaryNumber(s = \"0000\")",
        "maximumOddBinaryNumber(s = \"1110001\")"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABABCDCDABABCDCD\")",
        "minLength(s = \"ABABCDCDABABCDCD\")",
        "minLength(s = \"ABABCDCDABABCDCD\")",
        "minLength(s
        "minLength(s
        "minLength(s = \"ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAB"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"L___RL__R_\")",
        "furthestDistanceFromOrigin(moves = \"L___RL__R_\")",
        "furthestDistanceFromOrigin(moves = \"L___R__R_\")",
        "furthestDistanceFromOrigin(moves = \"L___R__R_\")",
        "furthestDistanceFromOrigin(moves = \"L___R__R_\")",
        "furthestDistanceFromOrigin(moves = \"L___R__R_\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"L___L___R___L___\")",
        "furthestDistanceFromOrigin(moves = \"L___R_______\")",
        "furthestDistanceFromOrigin(moves = \"L___R______RR__\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '00001')"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 1, 2])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 4, 10], [4, 5, 20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 4, 10], [4, 5, 20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 4, 10], [4, 5, 20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 4, 10], [4, 5, 20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 4, 10], [4, 5, 20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 4, 10], [4, 5, 20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 5, 3], [3, 4, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 3, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 4, 3], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0,2,3],[1,3,2],[1,4,3],[2,5,1],[3,5,2],[4,5,1]])"
    ],
    "sample_202": [
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num = \"5200\")",
        "minimumOperations(num = \"5200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"5025\")",
        "minimumOperations(num = \"50725\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"100\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 1], [0, 2, 2], [1, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 1], [0, 2, 2], [1, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 1], [0, 2, 2], [1, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,4],[3,4,5]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,2],[0,2,3],[1,3,2],[2,4,3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [0, 2, 3], [1, 3, 2], [2, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [0, 2, 3], [1, 3, 4], [2, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [0, 3, 1], [2, 4, 1]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)"
    ],
    "sample_203": [
        "minimumOperations(num = \"522\")",
        "minimumOperations(num = \"522\")",
        "minimumOperations(num = \"522\")",
        "minimumOperations(num = \"522\")",
        "minimumOperations(num = \"522\")",
        "minimumOperations(num = \"522\")",
        "minimumOperations(num = \"522\")",
        "minimumOperations(num = \"522\")",
        "minimumOperations(num = \"522\")",
        "minimumOperations(num = \"52212\")"
    ],
    "sample_11": [
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 2, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5",
        "minimumIndex(nums = [1, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 1, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 5, 5, 5])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"51230100000000\")"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 3, 5, 7])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "minimumIndex(nums = [2, 1, 3, 1, 1, 1, 7, 1, 1])",
        "minimumIndex(nums = [2, 1, 3, 1, 1, 1, 7, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLR\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abab\")",
        "minimizedStringLength(s = \"abab\")",
        "minimizedStringLength(s = \"abbccc\")",
        "minimizedStringLength(s = \"abbccc\")",
        "minimizedStringLength(s = \"abbccc\")",
        "minimizedStringLength(s = \"abbccc\")",
        "minimizedStringLength(s = \"aabbcc\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(usageLimits = [1, 2, 1, 2, 1])",
        "maxIncreasingGroups(usageLimits = [1, 2, 1, 1, 1])"
    ],
    "sample_206": [
        "minimumOperations(num = \"2520\")",
        "minimumOperations(num = \"2520\")",
        "minimumOperations(num = \"2520\")",
        "minimumOperations(num = \"2520\")",
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num = \"5075\")",
        "minimumOperations(num = \"5075\")",
        "minimumOperations(num = \"2525\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])"
    ],
    "sample_38": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"abab\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 7, 10])"
    ],
    "sample_53": [
        "smallestString(s = \"cbaab\")",
        "smallestString(s = \"cbaab\")",
        "smallestString(s = 'cbbaa')",
        "smallestString(s = 'cbbaa')",
        "smallestString(s = 'cbbaa')",
        "smallestString(s = 'cbaab')",
        "smallestString(s = 'cbaab')",
        "smallestString(s = \"cbbaa\")",
        "smallestString(s = 'cbabc')",
        "smallestString(s = 'baabcd')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 3)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 3)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 2)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 2)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 2)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 2)",
        "minAbsoluteDifference(nums = [1, 3, 8, 10, 15], x = 2)",
        "minAbsoluteDifference(nums = [1, 3, 8, 10, 15], x = 2)",
        "minAbsoluteDifference(nums = [1, 3, 8, 10, 15], x = 2)",
        "minAbsoluteDifference(nums = [4, 6, 10, 15, 16], x = 4)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[0, 1, 1], [0, 2, 2], [1, 3, 1], [3, 4, 1], [0, 3, 3], [1, 2, 2], [1, 4, 5], [2, 4, 1], [4, 5, 4]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 10], [1, 2, 20], [2, 3, 30], [3, 4, 40], [4, 5, 50]])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 1], [1, 2, 1], [2, 3, 1]])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 1], [1, 2, 1], [2, 3, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [1, 3, 2], [2, 3, 1]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 1], [1, 2, 2], [2, 3, 3], [3, 4, 4], [4, 5, 5]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 10], [0, 2, 20], [1, 3, 10], [1, 4, 20], [2, 4, 5], [2, 5, 10]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 10], [0, 2, 20], [1, 3, 10], [1, 4, 20], [2, 4, 5], [2, 5, 10]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 10], [0, 2, 10], [1, 3, 10], [1, 4, 10], [2, 3, 10], [2, 4, 10], [3, 4, 10]])",
        "maximizeTheProfit(N = 4, offers = [[0, 1, 1], [1, 2, 2], [2, 3, 3], [0, 2, 1], [1, 3, 2], [0, 3, 1]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"b\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a
        "removeTrailingZeros(a
        "removeTrailingZeros(a
        "removeTrailingZeros(a
        "removeTrailingZeros(a
        "removeTrailingZeros(a
        "removeTrailingZeros(a
        "removeTrailingZeros(a
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '512301000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 3, 2, 1, 4, 1, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 4, 1, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 4, 1, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 4, 1, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 4, 1, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 4, 1, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 4, 1, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 1, 3], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)"
    ],
    "sample_163": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [51,71,17,42])"
    ],
    "sample_151": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K = 5)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K = 5)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K = 5)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K = 5)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K = 5)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K = 5)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K = 5)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K = 5)",
        "longestEqualSubarray(A = [1,3,2,1,4,1,1,1,1], K = 0)",
        "longestEqualSubarray(A = [1,3,2,1,4,1,1,1,1,1], K = 0)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num
        "removeTrailingZeros(num
        "removeTrailingZeros(num
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512301000000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bao\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bao\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bao\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bbo\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 10], [3, 4, 20], [1, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 10], [3, 4, 20], [1, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 10], [3, 4, 20], [1, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [0, 2, 10], [1, 3, 15], [2, 4, 20], [3, 4, 25]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [0, 2, 10], [1, 3, 15], [2, 4, 20], [3, 4, 25]])",
        "maximizeTheProfit(n = 5, offers = [[0, 0, 1], [0, 2, 2], [1, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 4]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 5], [0, 2, 10], [1, 3, 15], [2, 3, 20]])",
        "maximizeTheProfit(n = 3, offers = [[0, 0, 1], [0, 1, 2], [1, 2, 3]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = '000101')",
        "maximumOddBinaryNumber(s = '000101')",
        "maximumOddBinaryNumber(s = '0001000')",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"0001000\")",
        "maximumOddBinaryNumber(s = '111000')",
        "maximumOddBinaryNumber(s = \"00001\")",
        "maximumOddBinaryNumber(s = \"00101\")"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)"
    ],
    "sample_148": [
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pontie\")",
        "finalString(s = \"pontie\")",
        "finalString(s = \"pointer\")"
    ],
    "sample_231": [
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [1, 0, 2])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [11, 21, 12])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bapo\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"baao\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [1, 3, 5, 7, 9])",
        "countWays(nums = [1, 3, 5, 7, 9])"
    ],
    "sample_39": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"L_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"L___R\")",
        "furthestDistanceFromOrigin(moves = \"L__R_L\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7], threshold = 100)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 2, 4, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 10)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3], t = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], t = 10)"
    ],
    "sample_36": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")"
    ],
    "sample_21": [
        "minLength(s = \"ABABCDCDABABCDCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABABCDCDABABCD\")",
        "minLength(s = \"ABABCDCDABABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s
        "minLength(s
        "minLength(s
        "minLength(s = \"ABABCDCD\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 5])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [3,6,1])",
        "findValueOfPartition(nums = [3,6,1])",
        "findValueOfPartition(nums = [3,6,1])",
        "findValueOfPartition(nums = [3,6,1])",
        "findValueOfPartition(nums = [3,6,1])",
        "findValueOfPartition(nums = [3,6,1])",
        "findValueOfPartition(nums = [3,6,1])",
        "findValueOfPartition(nums = [3, 6, 1, 9, 5])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"L___R__R_\")",
        "furthestDistanceFromOrigin(moves = \"L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___L___",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLL_R_R_R_\")",
        "furthestDistanceFromOrigin(moves = \"L__R_R_\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"L_R__R_\")",
        "furthestDistanceFromOrigin(moves = \"L_L_R_R_\")",
        "furthestDistanceFromOrigin(moves = \"LL_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)"
    ]
}