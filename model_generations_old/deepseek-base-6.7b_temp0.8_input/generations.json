{
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 3], [2, 5, 4], [3, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 3], [2, 4, 4], [4, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [1, 2, 3], [3, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 4, 4], [3, 4, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [1, 3, 4], [1, 4, 3], [2, 4, 4], [3, 5, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1,1,2], [1,2,5], [2,4,3], [3,4,3], [3,5,2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 1, 1], [2, 3, 2], [1, 3, 3], [3, 3, 3]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 7], [2, 5, 3], [5, 8, 10], [3, 7, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [0, 4, 4], [0, 1, 4], [1, 4, 5], [2, 4, 7]])",
        "maximizeTheProfit(n = 10, offers = [[2,5,6],[1,4,4],[4,8,8],[1,7,9],[3,8,7],[5,8,4],[7,8,2],[4,9,6]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [2,2,1], m = 2)",
        "canSplitArray(nums = [2,2,1], m = 2)",
        "canSplitArray(nums = [1,1,1], m = 3)",
        "canSplitArray(nums = [1, 4, 1, 4], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 2)",
        "canSplitArray(nums = [5,1,5,5,5], m = 3)",
        "canSplitArray(nums = [1, 1], m = 2)",
        "canSplitArray(nums = [1000000000, 1000000000, 1000000000], m = 3)",
        "canSplitArray(nums = [10, 5, 4, 7, 1, 12], m = 2)"
    ],
    "sample_106": [
        "checkArray(nums = [2, 2, 3, 1, 1, 0], k = 3)",
        "checkArray(nums = [4,2,3,1,7,2], k = 4)",
        "checkArray(nums = [8, 5, 8], k = 2)",
        "checkArray(nums = [3, 4, 3, 0, 2, 0], k = 3)",
        "checkArray(nums = [3, 4, 3, 3, 4], k = 2)",
        "checkArray(nums = [10, 10, 10, 10, 10], k = 3)",
        "checkArray(nums = [4, 0, 1, 1, 0], k = 1)",
        "checkArray(nums = [10, 100, 1000, 10000], k = 2)",
        "checkArray(nums = [10, 10, 1, 10, 10], k = 2)",
        "checkArray(nums = [2, 4, 2, 4, 5, 1], k = 2)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 3, 2], k = 1)",
        "maximumBeauty(nums = [1, 3, 1, 4, 2, 2, 8], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 4], k = 1)",
        "maximumBeauty(nums = [2, 3, 1, 5, 4], k = 2)",
        "maximumBeauty(nums = [1,3,5,10], k = 2)",
        "maximumBeauty(nums = [4, 3, 1, 2], k = 1)",
        "maximumBeauty(nums = [1, 3, 1, 4, 1], k = 0)",
        "maximumBeauty(nums = [3,1,5,10,15], k = 1)",
        "maximumBeauty(nums=[1, 2, 4, 6], k=2)",
        "maximumBeauty(nums = [5,3,1,6], k = 2)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\", \"e\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\"], separator = \"-\")",
        "splitWordsBySeparator(words=[\"one\", \"two\", \"three\", \"four\"], separator=\"\")",
        "splitWordsBySeparator(words=[\"one\",\"two\",\"three\",\"four\"], separator=\"\")",
        "splitWordsBySeparator(words=[\"this\", \"is\", \"a\", \"test\", \"of\", \"the\", \"system\"], separator=\"test\")"
    ],
    "sample_226": [
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [2,1,3])",
        "countWays([1,2,3])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1,2,3,4,5,6])",
        "countWays(nums = [4, 3, 2, 1])",
        "countWays(nums=[0,1,2,3])",
        "countWays(nums = [3, 1, 4, 2, 6])",
        "countWays([5, 4, 4, 2, 2, 8])",
        "countWays(nums = [0,1,2,3,5,6,7,8,9,10,11])"
    ],
    "sample_122": [
        "minimumIndex(nums = [2,1,1,2,1,2,2])",
        "minimumIndex(nums = [2, 1, 1, 2, 1, 3, 3, 3, 1])",
        "minimumIndex(nums = [1, 2, 2, 3, 2, 2])",
        "minimumIndex(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minimumIndex([1,2,2,2,2])",
        "minimumIndex([2,2,1,1,1,2,2])",
        "minimumIndex(nums = [2, 1, 3, 1, 1, 3, 3, 3])",
        "minimumIndex(nums = [2,3,1,2,3,2,4,3])",
        "minimumIndex(nums = [3, 4, 5, 3, 5, 3, 3])",
        "minimumIndex(nums = [1, 0, 0, 8, 5, 7, 5, 8, 8, 9])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,3],[3,9],[4,10]])",
        "numberOfPoints(nums = [[1, 4], [4, 5], [7, 8]])",
        "numberOfPoints([[1, 3], [5, 9]])",
        "numberOfPoints([[1,2],[3,7],[4,6]])",
        "numberOfPoints([[1, 4], [3, 6], [5, 7]])",
        "numberOfPoints(nums = [[5,7],[3,9],[5,9]])",
        "numberOfPoints([[2, 2], [3, 3], [7, 7]])",
        "numberOfPoints(nums = [[2,5],[3,8],[1,4]])",
        "numberOfPoints(nums = [[1, 4], [3, 5], [4, 6], [7, 10]])",
        "numberOfPoints(nums = [[1,3], [2, 6], [3, 8], [1, 4], [3, 5], [4, 7], [5, 9]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation(nums = [2,3,1,4,4])",
        "semiOrderedPermutation([2,3,4,1,5])",
        "semiOrderedPermutation(nums = [4,2,1,3])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [2,1,3,4])",
        "semiOrderedPermutation(nums = [3,1,5,2,4])",
        "semiOrderedPermutation(nums=[4,3,2,5,1])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 5, target = 4)"
    ],
    "sample_118": [
        "minimumIndex(nums = [2, 1, 1, 2, 1])",
        "minimumIndex(nums = [2, 3, 1, 1, 1])",
        "minimumIndex(nums = [0, 0, 0, 2, 0, 0])",
        "minimumIndex(nums = [2,1,1,1])",
        "minimumIndex(nums = [8, 7, 7, 7, 7, 7, 7])",
        "minimumIndex(nums = [2, 1, 2, 1, 2])",
        "minimumIndex(nums = [1, 1, 1, 2, 2])",
        "minimumIndex(nums = [2,1,2,1,2,1,2])",
        "minimumIndex(nums = [2, 2, 5, 2, 5, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 10)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [3, 9]])",
        "numberOfPoints(nums = [[1,3],[3,9]])",
        "numberOfPoints(nums = [[1, 4], [4, 5], [7, 9]])",
        "numberOfPoints(nums = [[1, 4], [4, 5], [7, 9]])",
        "numberOfPoints(nums = [[1, 4], [4, 5], [7, 9]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [5, 6]])",
        "numberOfPoints([[1, 4], [2, 3], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [1, 5]])",
        "numberOfPoints([[1, 5], [2, 4], [5, 8], [6, 7]])",
        "numberOfPoints(nums = [[2,2], [1,5], [6,10], [11,11]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1,3,6,4,1,2,4], target = 2)",
        "maximumJumps(nums = [1,2,3,4], target = 1)",
        "maximumJumps(nums = [1,3,6,4,1,2,4], target = 2)",
        "maximumJumps(nums=[1, 3, 6, 10, 15], target=3)",
        "maximumJumps(nums = [0, 1, 2, 3, 4, 5], target = 5)",
        "maximumJumps(nums = [1,2,3,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,10,15,16], target = 3)",
        "maximumJumps(nums = [0, 1, 2, 5, 3, 6], target = 1)",
        "maximumJumps(nums = [0, 1, 2, 3, 4, 5, 15], target = 4)",
        "maximumJumps(nums=[1,3,6,10,15,16,21], target=3)"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n=2, k=5)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "canSplitArray(nums = [2,4,1,3], m = 5)",
        "canSplitArray(nums = [3, 2, 2, 1], m = 4)",
        "canSplitArray(nums = [1,4,1], m = 5)",
        "canSplitArray(nums = [1,4,2,5], m = 6)",
        "canSplitArray(nums = [10,5,4,2], m = 7)",
        "canSplitArray(nums = [10,20,10,10], m = 30)",
        "canSplitArray(nums = [5, 1, 1, 2, 1], m = 5)",
        "canSplitArray(nums = [1,5,10,4,2,6,3], m = 6)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 10, offers = [[2, 5, 6], [4, 6, 5], [6, 7, 4], [8, 9, 11]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 3, 5], [4, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 10], [1, 3, 5]])",
        "maximizeTheProfit(n = 10, offers = [[2,6,4],[8,10,2]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 4], [0, 2, 4], [1, 2, 6], [1, 2, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 1], [2, 8, 2], [3, 6, 3], [4, 9, 4], [5, 10, 5], [6, 11, 6]])",
        "maximizeTheProfit(n = 6, offers = [[0, 1, 5], [1, 2, 6], [2, 4, 3], [3, 5, 8], [2, 5, 7]])",
        "maximizeTheProfit(n = 7, offers = [[0, 2, 10], [2, 6, 11], [2, 4, 13], [4, 7, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[1,4,7],[3,5,10],[2,3,1],[3,5,5],[4,5,7]])"
    ],
    "sample_108": [
        "checkArray(nums = [4, 2, 3, 1, 12], k = 2)",
        "checkArray(nums = [4,2,3,1,1,1], k = 2)",
        "checkArray(nums = [4,2,3,1,1,1], k = 3)",
        "checkArray(nums = [2, 2, 3, 3], k = 2)",
        "checkArray(nums = [2, 0, 0, 2], k = 2)",
        "checkArray(nums = [5, 4, 2, 3, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 2, 3], k = 3)",
        "checkArray(nums = [5,5,0,0,0], k = 3)",
        "checkArray(nums = [5, 4, 2, 3, 2, 1], k = 2)",
        "checkArray(nums = [2, 3, 2, 3, 1, 2], k = 2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [3,3,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,3,2,2,1,3,1,1,2], k = 2)",
        "longestEqualSubarray(nums=[3,2,1,3,2,1], k=2)",
        "longestEqualSubarray(nums = [1,2,2,3,1,1,2,1,2], k = 2)",
        "longestEqualSubarray(nums = [3,1,2,2,1,2], k = 3)",
        "longestEqualSubarray(nums=[2, 3, 2, 2, 2], k=2)",
        "longestEqualSubarray(nums = [1,3,2,2,2,1,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,5,5,5,5,6,7,8,9], k = 3)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 3], [1, 2], [2, 1], [3, 2]])",
        "colorTheArray(n = 3, queries = [[0, 100], [1, 100], [2, 100]])",
        "colorTheArray(n = 3, queries = [[2, 1], [1, 2], [1, 1]])",
        "colorTheArray(n=3, queries = [[0, 3], [1, 2]])",
        "colorTheArray(n = 10, queries = [[1,10],[3,2],[8,5],[7,4],[3,1]])",
        "colorTheArray(n = 10, queries = [[4,100], [5,100], [1,100], [1,0], [3,1], [4,1], [6,1], [3,0], [8,1], [8,0]])"
    ],
    "sample_55": [
        "smallestString(s = 'kddscncd')",
        "smallestString(s = \"kddsbndd\")",
        "smallestString(s = \"kddsbnbc\")",
        "smallestString(s = 'kddbcncd')",
        "smallestString(s = \"kddzbncd\")",
        "smallestString(s='kd')",
        "smallestString(s = 'kddsbnaaaaad')",
        "smallestString(s = 'aazzzzzz')",
        "smallestString(s = 'kdced')",
        "smallestString(s=\"kkkkkkkk\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8], threshold = 6)",
        "longestAlternatingSubarray(nums = [6, 5, 4], threshold = 10)",
        "longestAlternatingSubarray(nums=[4,2,3,4,5,6], threshold=5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8], threshold = 7)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 4, 9, 8], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 5, 2, 6, 3, 4], threshold = 5)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 5, 6, 7], threshold=7)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 3])",
        "distinctDifferenceArray([5, 2, 1, 4, 3])",
        "distinctDifferenceArray(nums = [4, 5, 4, 2, 4])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACBD\")",
        "minLength(s = \"ACBBCD\")",
        "minLength(\"ACBBD\")",
        "minLength(s = \"AAABBB\")",
        "minLength(s = \"ACDBBCD\")",
        "minLength(s = \"CDABAB\")",
        "minLength(\"ACDBB\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(\"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"0101\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"101101\")",
        "minimumCost(s = \"110101\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [2, 3, 3, 2, 3], m = 6)",
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [2, 1, 3], m = 3)",
        "canSplitArray(nums = [3, 1, 2], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 7)",
        "canSplitArray(nums = [2, 3, 1, 4], m = 3)",
        "canSplitArray(nums = [1, 1, 2], m = 4)",
        "canSplitArray(nums = [1, 2, 2, 3], m = 5)",
        "canSplitArray(nums = [2, 3, 1, 2, 4, 1], m = 5)",
        "canSplitArray(nums = [15, 13, 4], m = 2)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1,1,0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0,1,1,0])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [1,0,1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 0])"
    ],
    "sample_109": [
        "checkArray(nums = [4, 2, 3], k = 1)",
        "checkArray(nums = [1,2,3,4,5,6], k = 3)",
        "checkArray(nums = [5,4,5], k = 1)",
        "checkArray(nums=[1,3,2], k=1)",
        "checkArray(nums = [1,2,2,2], k = 1)",
        "checkArray(nums = [0, 0, 1], k = 1)",
        "checkArray(nums = [4, 2, 3, 1, 1], k = 2)",
        "checkArray(nums = [3,4,3,0,2,8,1], k = 4)",
        "checkArray(nums = [8,5,7,9,4,3,10], k = 1)",
        "checkArray(nums=[8, 5, 6, 4, 3, 1, 1, 2, 0, 1], k=3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0, 0], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [34, 35, 36], target = 37)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 15, 20, 22, 25], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 50, 70, 40], target = 90)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10], target = 7)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 7, 2], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,1,1], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 5, 1], k = 2)",
        "sumIndicesWithKSetBits(nums=[4, 5, 2, 7], k=3)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 2, 3, 1], k = 3)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [3,1,3,4,3], k = 1)",
        "maximumBeauty(nums = [1, 3, 1, 4, 2, 2, 8], k = 2)",
        "maximumBeauty(nums = [1,3,1,4,2,2,8,2,4,8], k = 5)",
        "maximumBeauty(nums = [1,5,4,6,8,9,10,2], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "maximumBeauty(nums = [3, 1, 3, 4, 3], k = 2)",
        "maximumBeauty(nums = [3,4,5,6,7,8], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 4, 3, 2], k = 2)",
        "maximumBeauty(nums = [3,1,5,2,1,3,4], k = 2)",
        "maximumBeauty(nums = [2,5,7,8,2,4], k = 2)"
    ],
    "sample_205": [
        "minimumOperations(num = \"225\")",
        "minimumOperations(num = \"0123\")",
        "minimumOperations(num = \"02575\")",
        "minimumOperations(\"2500\")",
        "minimumOperations(num = \"000000\")",
        "minimumOperations(\"125\")",
        "minimumOperations(\"00010\")",
        "minimumOperations(\"1222\")",
        "minimumOperations(\"50250\")",
        "minimumOperations(\"000000000\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"0075\")",
        "minimumOperations(s = \"0275\")",
        "minimumOperations(\"0075\")",
        "minimumOperations(s = \"12345\")",
        "minimumOperations(s = \"0000\")",
        "minimumOperations(s = \"0123456789\")",
        "minimumOperations(s = \"1234567890\")",
        "minimumOperations(\"12345\")",
        "minimumOperations(s = \"00125575\")",
        "minimumOperations(s = \"25002552500\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,3,1])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [2,1,3,4])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LRAR\")",
        "furthestDistanceFromOrigin(moves = \"LLAR\")",
        "furthestDistanceFromOrigin(moves = \"RLLR\")",
        "furthestDistanceFromOrigin(\"LRR\")",
        "furthestDistanceFromOrigin(\"RRLL\")",
        "furthestDistanceFromOrigin(\"RLA\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRU\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLLRLR\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"I\", \"love\", \"you\"], s = \"ILY\")",
        "isAcronym(words = [\"h\", \"a\", \"t\"], s = \"hat\")",
        "isAcronym(words = [\"abstract\", \"algebra\", \"algorithm\"], s = \"AAA\")",
        "isAcronym(words = [\"they\", \"say\"], s = \"ts\")",
        "isAcronym(words = ['banana', 'acronym'], s = \"baa\")",
        "isAcronym(words = [\"think\", \"about\", \"me\"], s = \"tam\")",
        "isAcronym(words = [\"there\", \"is\", \"only\", \"one\", \"way\", \"to\", \"do\", \"this\"], s = \"toot\")",
        "isAcronym(words = [\"amazing\", \"gorgeous\", \"adorable\"], s = \"AGA\")",
        "isAcronym(words = [\"Barcelona\", \"Sky\", \"Liverpool\"], s = \"BCL\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [4,5,0,-2,-3,1], modulo = 5, k = 5)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 6, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [3,1,2,4,3], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [4,3,2,1], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [5, 0, 3], modulo = 3, k = 2)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs([10, 12])",
        "countBeautifulPairs(nums = [13, 31, 36, 18])",
        "countBeautifulPairs(nums = [11, 21, 22, 43])",
        "countBeautifulPairs(nums = [21, 210, 21, 21])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 1)",
        "maximumJumps(nums = [1,3,6,7,8,10], target = 3)",
        "maximumJumps(nums = [4,3,2,6,7], target = 2)",
        "maximumJumps(nums = [3,1], target = 5)",
        "maximumJumps(nums = [2,1,3,4,5,6], target = 1)",
        "maximumJumps(nums = [1,5,1,3,5,3], target = 2)",
        "maximumJumps(nums = [2,5,6,7,3,4,1,2], target = 2)",
        "maximumJumps(nums=[1,5,10,20,30],target=10)",
        "maximumJumps(nums = [10,22,55,67,95,96,97,98,100,103,156,166,176,202,212,221,231,241,255,256,257,275,285,311,315,325,335,345,355,366], target = 20)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [25,49,9,6,10,37,28,7,64,100])",
        "countBeautifulPairs(nums = [25, 49, 9, 6, 10, 37])",
        "countBeautifulPairs(nums = [25, 20, 32, 46, 65])",
        "countBeautifulPairs(nums = [21, 29, 49, 51])",
        "countBeautifulPairs([1000, 1000, 1000])",
        "countBeautifulPairs(nums = [10, 20, 16, 23])",
        "countBeautifulPairs(nums = [21, 42, 13, 6])",
        "countBeautifulPairs([25, 26, 45, 62, 23])",
        "countBeautifulPairs(nums = [123, 321, 243, 345, 123, 345, 123])",
        "countBeautifulPairs(nums = [25,23,56,48,12,102,58,40,13,5])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACBDACBD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"AABCC\")",
        "minLength(s = \"ABCABD\")",
        "minLength(\"ABABABAB\")",
        "minLength(s = \"ACABBC\")",
        "minLength(\"ABBAACCD\")"
    ],
    "sample_150": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'singing')",
        "finalString(s = \"trisng\")",
        "finalString(s = 'grtsing')"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [3, 4, 5, 8])",
        "doesValidArrayExist([1,2,3,4])",
        "doesValidArrayExist(derived=[0, 1, 1, 0])",
        "doesValidArrayExist(derived = [3, 1, 4, 1, 5, 9, 2, 6])",
        "doesValidArrayExist([1, 2, 2])",
        "doesValidArrayExist([0, 2, 1, 3])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist(derived = [1, 3, 5])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [9, 7, 5, 3])",
        "findValueOfPartition(nums = [9, 7, 5, 2, 10])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition([3, 9, 7, 8])",
        "findValueOfPartition(nums = [3,9,7,1])",
        "findValueOfPartition(nums = [3, 7, 9, 1])",
        "findValueOfPartition([3, 9, 7, 3])",
        "findValueOfPartition(nums = [2,3,5,9])",
        "findValueOfPartition(nums = [2, 5, 6, 1, 4, 9, 2, 3, 6, 2, 1])"
    ],
    "sample_7": [
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[0, 3], [4, 2], [1, 3]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4],[4,5]])",
        "colorTheArray(n = 4, queries = [[0,1], [1,2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 3], [4, 2], [1, 3]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,1],[3,2],[3,1],[4,2]])",
        "colorTheArray(n=2, queries = [[0,1],[0,2]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[4,4],[5,1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [1, 1], [2, 2], [2, 3]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 4, target = 11)",
        "minimumPossibleSum(n = 2, target = 3)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 0, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 5, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 12, 12, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours=[5,12,7,3], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 2, 7, 3, 3, 3, 2, 10, 5], target = 3)"
    ],
    "sample_152": [
        "canSplitArray(nums = [7, 2, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [2, 1], m = 4)",
        "canSplitArray(nums = [3, 2, 2], m = 3)",
        "canSplitArray(nums = [2, 1, 2], m = 3)",
        "canSplitArray(nums = [10, 5, 6, 2], m = 8)",
        "canSplitArray(nums = [15,14,2], m = 2)",
        "canSplitArray(nums = [2, 4, 5, 6], m = 10)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1,2,3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,2,4,3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [3,1,4,3,2,2,4], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,2,3,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums=[2,3,1,2,2,2,3], m=3, k=2)",
        "countInterestingSubarrays(nums = [4,3,2,3,1], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,4,5,6,7,8], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [3,2,2,2,1,1,2,1,1], m = 2, k = 1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 10)",
        "longestAlternatingSubarray(nums=[1,2,3,4], t=4)",
        "longestAlternatingSubarray(nums = [5,2,3,10,12,18,14,15], t = 15)",
        "longestAlternatingSubarray(nums = [2,3,4,2,2,3,4], t = 3)",
        "longestAlternatingSubarray(nums = [4,1,2,5,1,3], t = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 9, 7, 5, 1], t = 9)",
        "longestAlternatingSubarray(nums=[2,2,5,1,6,7,3,4,8,9], t=10)",
        "longestAlternatingSubarray(nums = [3, 5, 7, 1, 2, 3, 6, 2, 3, 5], t = 4)",
        "longestAlternatingSubarray(nums = [2,1,2,2,3,2,1,2,2,3,2,2,2,1,2,3,3,3,3], t = 2)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums=[0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits([1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,1,0,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num=\"512301000\")",
        "removeTrailingZeros(num = '512301000000000')",
        "removeTrailingZeros(\"512300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 7, b = 2)",
        "makeTheIntegerZero(a = 10, b = 1)",
        "makeTheIntegerZero(a = 11, b = 3)",
        "makeTheIntegerZero(a = 12, b = 2)",
        "makeTheIntegerZero(a = 12, b = 5)",
        "makeTheIntegerZero(a = 20, b = 5)",
        "makeTheIntegerZero(a=13, b=2)",
        "makeTheIntegerZero(a=17, b=5)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [2,1,3,5,1], m = 4)",
        "canSplitArray(nums = [2, 3, 4], m = 4)",
        "canSplitArray(nums = [2, 1, 2, 5, 1, 2, 5, 1, 2, 5], m = 5)",
        "canSplitArray(nums = [10, 10, 10], m = 20)",
        "canSplitArray(nums = [2, 2, 1, 1, 2, 1, 1], m = 2)",
        "canSplitArray(nums = [3, 2, 5, 1, 10], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 10, 13], m = 5)",
        "canSplitArray(nums = [4,1,6,2], m = 1)"
    ],
    "sample_161": [
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [18,43,36,13,7])",
        "maxSum(nums = [5, 5])",
        "maxSum(nums = [51,9,2,4,33])",
        "maxSum([10, 5])",
        "maxSum(nums = [51,9,2,4,33,23])",
        "maxSum(nums = [22, 49, 100, 27, 28, 66])",
        "maxSum(nums = [51, 22, 112, 90, 45])",
        "maxSum([2, 13, 1, 7, 3, 20, 19, 4, 9, 23])",
        "maxSum([4,11,23,32,77,88,123,222,999])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 4, target = 2)",
        "minimumPossibleSum(n=4, target=3)",
        "minimumPossibleSum(n=10, target=11)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [9,7,5,3])",
        "findValueOfPartition(nums = [9,7,5,3])",
        "findValueOfPartition(nums = [9,7,5,3,1])",
        "findValueOfPartition(nums = [3,9,7,3])",
        "findValueOfPartition(nums = [9,3,5])",
        "findValueOfPartition(nums = [7,9,5,8,1,3])",
        "findValueOfPartition(nums = [7,9,3,8,1])",
        "findValueOfPartition(nums = [7,9,3,8,5,2])",
        "findValueOfPartition(nums = [9, 4, 5, 3, 2, 1])",
        "findValueOfPartition(nums=[1,4,6,3,8])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2],[3,7],[4,6]])",
        "numberOfPoints(nums = [[1,4],[2,5],[3,6]])",
        "numberOfPoints(nums = [[1,3], [10, 20]])",
        "numberOfPoints(nums = [[1,3], [3,5]])",
        "numberOfPoints(nums = [[5,6],[1,3],[7,10]])",
        "numberOfPoints([[1,2],[2,3],[1,5]])",
        "numberOfPoints([[1, 3], [3, 5]])",
        "numberOfPoints(nums = [[2,7],[4,5],[5,6],[7,9]])",
        "numberOfPoints(nums = [[3,7],[2,5],[3,8],[1,10]])",
        "numberOfPoints(nums = [[5,6], [3,10], [2,7], [7,8], [4,9], [4,10], [8,9]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [3, 9]])",
        "numberOfPoints(nums = [[1, 3], [3, 7], [6, 8]])",
        "numberOfPoints(nums = [[0, 3], [2, 5], [4, 7]])",
        "numberOfPoints(nums = [[1,3], [10, 20], [2, 5]])",
        "numberOfPoints([[1, 3], [4, 5], [2, 4]])",
        "numberOfPoints([[1, 4], [5, 6], [4, 5]])",
        "numberOfPoints(nums = [[1,3], [1,2], [2,3], [1,4]])",
        "numberOfPoints([[1, 2], [3, 4], [2, 3], [5, 6], [7, 8]])",
        "numberOfPoints(nums=[[1,3], [1,2], [2,3], [4,5]])",
        "numberOfPoints([[2, 3], [3, 5], [5, 9], [3, 7]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator=\"-\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one.two.three\",\"four.five\",\"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\",\"five\", \"six\"], separator = \"four\")",
        "splitWordsBySeparator(words=['one', 'two', 'three', 'four','five', 'six'], separator=' ')",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"\",\"four\",\"five\",\"six\"], separator = \"\")",
        "splitWordsBySeparator(words = ['one','','two','three','','four','','five','','six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one.two.three,four,five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one.two.three,four,five,six\"], separator = \".\")"
    ],
    "sample_200": [
        "minOperations(nums = [1,1,1,9], target = 4)",
        "minOperations(nums = [8,9,8,1,1], target = 6)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1], target = 5)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1], target = 1)",
        "minOperations(nums = [1,1,1,2], target = 4)",
        "minOperations(nums = [1,1,2], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 1)",
        "minOperations(nums=[1, 2, 3], target=3)",
        "minOperations(nums = [1, 2, 3, 5], target = 13)",
        "minOperations(nums=[8,9,10,11,1], target=50)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 5, 1, 4], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 8)",
        "checkArray(nums = [3, 2, 1, 4], k = 3)",
        "checkArray(nums = [1, 2, 1, 1, 2, 3], k = 2)",
        "checkArray(nums = [4,3,2,1,4,3,2,1], k = 2)",
        "checkArray(nums = [5, 6, 7, 8, 9], k = 2)",
        "checkArray(nums = [2,1,1,1,1,1,1,1,1,1], k = 5)",
        "checkArray(nums = [2, 5, 1, 3, 2, 3], k = 2)",
        "checkArray(nums = [3, 1, 1, 2, 1, 1, 2, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 1, 1, 2, 3, 4, 5, 6, 1], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1,1,0,1])",
        "doesValidArrayExist(derived = [1,0,1,1,0,1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0,0,0,0,0,0])"
    ],
    "sample_159": [
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum([55,9])",
        "maxSum(nums = [51,9])",
        "maxSum(nums=[55,99,83,77])",
        "maxSum(nums = [1,15,22,16,17])",
        "maxSum([35, 17, 89, 90, 35])",
        "maxSum(nums=[50, 1, 9, 28, 77, 199, 399, 7707, 11, 53])",
        "maxSum(nums = [51,94,66,85,33,98,52,99,56,31])",
        "maxSum(nums = [29,19,53,66,34,11,9,101,2,54,88,32,22,24,100,44])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 1])",
        "continuousSubarrays(A = [1,2,3,5,6])",
        "continuousSubarrays(A = [1, 2, 1, 1, 2, 2])",
        "continuousSubarrays([3, 3, 2, 2, 2, 3, 3])",
        "continuousSubarrays(A = [1,2,3,4,5,1,1,1,1,2,3,4])",
        "continuousSubarrays(A = [1,2,1,1,1,2,2,1,1,1])",
        "continuousSubarrays(A = [1,2,3,5,1,1,1,4])",
        "continuousSubarrays(A = [1,2,3,2,1,2,3,1,1,2,3,3])",
        "continuousSubarrays(A = [1,2,3,4,1,2,3,1,2,3,4,5,1,2,3])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray([0,1,2,3,4])",
        "distinctDifferenceArray(nums = [4,5,5,5,6,6,6,7])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 3, 2, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 5, 6])",
        "maxNonDecreasingLength(a = [1, 2, 1, 2], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 1, 3], b = [2, 3, 4, 2, 4])",
        "maxNonDecreasingLength(a = [2, 1, 5, 3], b = [1, 3, 4, 7])",
        "maxNonDecreasingLength(a = [1,2,4,7], b = [1,2,4,3])",
        "maxNonDecreasingLength(a = [5, 5, 10, 10], b = [1, 2, 5, 10])",
        "maxNonDecreasingLength(a = [1, 2, 5, 3, 5, 10, 7, 8], b = [1, 2, 3, 4, 10, 11, 10, 11])",
        "maxNonDecreasingLength(a = [4, 2, 1, 6, 4, 1, 2], b = [5, 1, 1, 1, 2, 1, 3])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 20, additionalTank = 10)",
        "distanceTraveled(mainTank = 12, additionalTank = 4)",
        "distanceTraveled(mainTank = 20, additionalTank = 20)"
    ],
    "sample_160": [
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum([51,32,43])",
        "maxSum(nums=[51,32,43])",
        "maxSum([51, 71, 17, 42])",
        "maxSum(nums = [54, 5467, 548, 60])",
        "maxSum([5, 55])",
        "maxSum(nums = [16,16,16,16,16])",
        "maxSum(nums = [625, 256, 12, 7125])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbna')",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"aaaaaaaaaa\")",
        "smallestString(s = \"abcdab\")",
        "smallestString(s = 'kddscbc')",
        "smallestString(s = \"ababababab\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [3, 9, 7, 3])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [9,7,5,3])",
        "findValueOfPartition(nums = [1, 4, 8, 10])",
        "findValueOfPartition(nums = [4, 1, 5, 2, 10, 3])",
        "findValueOfPartition(nums = [9, 10, 15, 20])",
        "findValueOfPartition(nums = [2,1,10,4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = \"aabbb\")",
        "makeSmallestPalindrome(s='aba')",
        "makeSmallestPalindrome(s=\"bac\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 3)",
        "makeTheIntegerZero(num1=4, num2=3)",
        "makeTheIntegerZero(num1 = 100, num2 = 100)",
        "makeTheIntegerZero(num1 = 29, num2 = 4)",
        "makeTheIntegerZero(num1 = 200, num2 = 150)",
        "makeTheIntegerZero(num1 = 1223, num2 = 1)",
        "makeTheIntegerZero(num1=3, num2=2)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[3,9]])",
        "numberOfPoints(nums = [[2,4],[3,6],[5,5]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,4],[4,5],[7,9]])",
        "numberOfPoints(nums = [[1,3],[3,7],[8,9]])",
        "numberOfPoints(nums = [[1,3],[1,2],[2,3]])",
        "numberOfPoints(nums = [[0,3],[1,2],[0,1],[3,3]])",
        "numberOfPoints(nums = [[1,2],[2,4],[4,6]])",
        "numberOfPoints(nums = [[1,4],[3,5],[4,7]])",
        "numberOfPoints(nums = [[1,3],[1,3],[2,5],[4,6],[5,7]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1,2,3,4], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [3,1,4,3,2,2,4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 3, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [2,3,1,2,3,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2,3,1,2,2,2,2,3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [3,1,2,2,3,1,3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,2,2,3,4,5,1,6], m = 4, k = 2)",
        "countInterestingSubarrays(nums=[2, 3, 1, 2, 3, 3, 2, 1, 3, 3, 3, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 3, 1, 2, 1, 2, 1, 2, 2, 2, 3, 3, 1, 3, 2, 2, 3, 1, 1, 2, 3, 2, 2, 3, 3, 2, 1, 3, 2, 3, 1, 2, 3, 2, 2, 2, 3, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 3, 3, 1, 1, 2, 3, 2, 3, 1, 2, 2, 1, 1, 3, 2, 2, 3, 3, 2, 3, 1, 1, 3, 2, 3, 2, 2, 1, 2, 3, 2, 2, 2, 1, 2, 1, 3, 3, 3, 3, 1, 2, 3, 1, 1, 2, 2, 1, 2, 3, 3, 2, 3, 3, 1, 2, 3, 3, 3, 1, 1, 3, 2, 1, 2, 2, 3, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 3, 1, 3, 2, 1, 1, 2, 1, 1, 2, 3, 1, 3, 3"
    ],
    "sample_40": [
        "minimumCost(s = \"0100\")",
        "minimumCost(s = \"0010\")",
        "minimumCost(s = \"0010\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"0011\")",
        "minimumCost(s = \"00110\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"acccb\")",
        "minimumCost(s = \"111010100111101\")",
        "minimumCost(s = \"1001010101001000001\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [1,1,1,0])",
        "doesValidArrayExist(derived = [0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1,1,0,1,0])",
        "doesValidArrayExist([1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,1,0,1,1,0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist([1, 0, 0, 0, 1, 0])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [1,2,3,4])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [2, 3, 3, 4, 5])",
        "distinctDifferenceArray(nums = [5, 1, 7, 3, 1])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 25, 15, 20, 30], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 13, 12, 14], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours=[12, 14, 10, 15], target=12)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 34, 23, 24], target = 23)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 2, 1, 9], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 11, 40, 72, 3], target = 30)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s='neven')",
        "makeSmallestPalindrome(s='never')",
        "makeSmallestPalindrome(s=\"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"need\")",
        "makeSmallestPalindrome(s = \"naveen\")",
        "makeSmallestPalindrome(s = \"nana\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = \"51230000\")",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"5123000000001\")",
        "removeTrailingZeros
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 1, k = 3)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 3, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3], m = 1, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,2,3,4], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3], m = 1, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,3,1,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7], m = 2, k = 4)",
        "countInterestingSubarrays(nums = [4,3,2,1,5], m = 1, k = 3)",
        "countInterestingSubarrays(nums = [2,3,1,2,4,1,1], m = 4, k = 2)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 4)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 8, additionalTank = 3)",
        "distanceTraveled(mainTank = 20, additionalTank = 3)",
        "distanceTraveled(mainTank = 15, additionalTank = 1)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3], x = 1)",
        "minCost(A = [1,2,3,4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 3)",
        "minCost(A=[1,2,3,4,5], x=2)",
        "minCost(A = [2, 2, 1], x = 3)",
        "minCost(A=[1, 1, 1, 1], x=3)",
        "minCost(A = [1,3,4,5,2], x = 2)",
        "minCost(A = [3, 6, 2], x = 2)",
        "minCost(A = [1, 2, 4, 5, 3], x = 2)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3])",
        "maxIncreasingGroups(u = [1, 2, 3])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 3, 2])",
        "maxIncreasingGroups(u = [1, 2, 2])",
        "maxIncreasingGroups(u = [1, 1, 1, 1, 1, 1])",
        "maxIncreasingGroups(u = [1, 4])",
        "maxIncreasingGroups(u=[1, 2, 2, 3])",
        "maxIncreasingGroups(u = [3, 4, 7, 1, 2])",
        "maxIncreasingGroups(u=[3, 5, 1, 1, 2])"
    ],
    "sample_110": [
        "checkArray(nums = [4, 2, 3, 1, 12], k = 2)",
        "checkArray(nums = [4, 2, 3, 1, 12], k = 1)",
        "checkArray(nums = [4,2,3,1,7,2], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [0, 0, 0, 0, 0], k = 2)",
        "checkArray(nums = [1,1,1], k = 2)",
        "checkArray(nums = [0, 0, 0, 0, 0], k = 1)",
        "checkArray(nums = [2, 3, 1, 3, 4, 2], k = 3)",
        "checkArray(nums = [8,5,4,3,2,1,1], k = 3)",
        "checkArray(nums = [5, 12, 3, 10, 14, 4, 10], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ACBDACBD\")",
        "minLength(s = \"ACBDACBD\")",
        "minLength(s = \"ACBD\")",
        "minLength(s = \"ACBD\")",
        "minLength(s = \"ABAB\")",
        "minLength(\"ABCD\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ABACABAD\")",
        "minLength(s = \"ABCC\")",
        "minLength(s = \"AABABBA\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,5], target = 5)",
        "minOperations(nums = [8,9,2,2], target = 5)",
        "minOperations(nums = [1, 1, 1], target = 3)",
        "minOperations(nums = [1,1,1,2], target = 5)",
        "minOperations(nums = [1], target = 1)",
        "minOperations(nums = [1,2,3], target = 2)",
        "minOperations(nums = [1,3,5], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums=[4, 2, 1], target=4)",
        "minOperations(nums = [1,2,2,2,3], target = 4)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"a\", \"b\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], separator = \"e\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\", \"e\"], separator = \"xx\")",
        "splitWordsBySeparator(words = [\"\",\"a\",\"b\",\"\"], separator = \",\")"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbnaa')",
        "smallestString(s='kdssbncd')",
        "smallestString(s = 'abcdzz')",
        "smallestString(s = \"acdbn\")",
        "smallestString(s = \"kdsbndcda\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"__R___L_\")",
        "furthestDistanceFromOrigin(moves = \"__R_L_R__\")",
        "furthestDistanceFromOrigin(\"_R_L_R_L_\")",
        "furthestDistanceFromOrigin(\"R___L\")",
        "furthestDistanceFromOrigin(moves = \"R_LRR_R\")",
        "furthestDistanceFromOrigin(\"_L_______R\")",
        "furthestDistanceFromOrigin(moves = \"L_L_L_L_R_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LR__U__R_\")",
        "furthestDistanceFromOrigin(moves = \"L_L_L_R__R_R_R\")",
        "furthestDistanceFromOrigin(\"R_LLRLR__RRLR__\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 8, num2 = 4)",
        "makeTheIntegerZero(num1 = 13, num2 = 1)",
        "makeTheIntegerZero(num1 = 7, num2 = 1)",
        "makeTheIntegerZero(num1 = 31, num2 = 3)"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s='kddsbncd')",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = 'kdbsncd')",
        "smallestString(s = 'aab')",
        "smallestString(s = 'kddaa')",
        "smallestString(s = \"aabab\")",
        "smallestString(s = \"dddsaaaaa\")",
        "smallestString(s = \"kkkdkdskd\")"
    ],
    "sample_146": [
        "finalString(s = 'inter')",
        "finalString(s = 'pointer')",
        "finalString(s = 'pointers')",
        "finalString(s = 'i')",
        "finalString(s='pinert')",
        "finalString(s = \"reponit\")",
        "finalString(s=\"ponteti\")",
        "finalString(s='rntep')",
        "finalString(s = \"ihatter\")",
        "finalString(s = 'iomnterp')"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,4,3,1,6,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 2, 2, 2, 1, 1], k = 3)",
        "longestEqualSubarray(nums = [2,2,3,3,3], k = 1)",
        "longestEqualSubarray(nums = [3,3,3,3,1,1,2,2,2,2], k = 1)",
        "longestEqualSubarray(nums = [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1,3,4,4,1,2,2,3,1,3,3,3,4,4,4,3,1,1,1,3,3,3,3,2,2,3,1,1,1,1,4,1,1,3,4,4,3,2,1,4,4,2,1,1,3,1,2,1,2,3,4,1,2], k = 4)"
    ],
    "sample_155": [
        "canSplitArray(nums = [7,2,5], m = 10)",
        "canSplitArray(nums = [7,2,5], m = 10)",
        "canSplitArray(nums=[2,2,1], m=4)",
        "canSplitArray(nums = [2,2,1,1], m = 2)",
        "canSplitArray(nums = [5,1,5], m = 3)",
        "canSplitArray(nums = [1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [1, 1, 2, 3], m = 10)",
        "canSplitArray(nums = [1, 1, 2, 2, 2], m = 6)",
        "canSplitArray(nums = [5, 8, 7, 1, 3, 3, 1, 8, 2, 6], m = 10)",
        "canSplitArray(nums = [5, 1, 2, 2], m = 5)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,0,1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one.two.three\", \"four.five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one.two.three\", \"four.five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one.two.three\", \"four.five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one.two.three\", \"four.five\", \"six\"], separator = \".\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [0,0,0,0,0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [0], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 11, 12], target = 13)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 4, 2], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10,12,11], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [2,4,6,8,9], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [0,2,4,2,4,5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours=[5, 5, 5, 10, 20, 15, 25, 35], target=5)"
    ],
    "sample_168": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hww\")",
        "isAcronym(words = [\"k\", \"j\"], s = \"kj\")",
        "isAcronym(words = [\"a\", \"lol\"], s = \"al\")",
        "isAcronym(words=[\"jack\", \"jill\"], s=\"j\")",
        "isAcronym(words = [\"banana\", \"apple\", \"carrot\", \"honey\"], s = \"bahc\")",
        "isAcronym(words = [\"foobar\", \"academy\", \"baz\"], s = \"FAB\")",
        "isAcronym(words = [\"bassoon\", \"crow\"], s = \"bc\")",
        "isAcronym(words=[\"apple\", \"banana\", \"orange\"], s=\"cg\")",
        "isAcronym(words = [\"lively\", \"strawberry\"], s = \"lively\")",
        "isAcronym(words = [\"Me\", \"Be\", \"Yo\", \"ou\"], s = \"Mo\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"banana\", \"apple\"], s = \"bap\")",
        "isAcronym(words = [\"This\", \"is\", \"an\", \"acronym\"], s = \"TA\")",
        "isAcronym(words = [\"banana\", \"is\", \"a\", \"fruit\"], s = \"baif\")",
        "isAcronym(words = [\"coding\", \"is\", \"fun\"], s = \"CI\")",
        "isAcronym(words = [\"abc\", \"xyz\", \"pqr\"], s = \"xyzpqr\")",
        "isAcronym(words = [\"free\", \"ass\", \"day\"], s = \"fad\")",
        "isAcronym(words = [\"baz\", \"qux\", \"quux\"], s = \"bqx\")",
        "isAcronym(words = [\"An\", \"An\", \"An\", \"An\"], s = \"AAA\")",
        "isAcronym(words = [\"i\", \"am\", \"here\"], s = \"AM\")",
        "isAcronym(words = [\"o\", \"n\", \"c\"], s = \"nco\")"
    ],
    "sample_41": [
        "minimumCost(s = \"0100\")",
        "minimumCost(s = \"0010\")",
        "minimumCost(s = \"0010\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"010101\")",
        "minimumCost(s = \"1100\")",
        "minimumCost(s = \"0001\")",
        "minimumCost(s = \"AAAABBBBB\")",
        "minimumCost(s = \"z\")",
        "minimumCost(s = \"abcabca\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1,1,0,0])",
        "doesValidArrayExist(derived = [0,1,0,1,0])",
        "doesValidArrayExist([0,1,1,0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0,0,0,1,1,0,0,0])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'aabb')",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'baab')",
        "makeSmallestPalindrome(s = \"abacaba\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(\"abb\")",
        "makeSmallestPalindrome(s=\"abc\")"
    ],
    "sample_50": [
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"babaa\")",
        "smallestString(s = \"aabba\")",
        "smallestString(s = \"abbabaa\")",
        "smallestString(s = \"aaabbbaa\")",
        "smallestString(s=\"baabab\")",
        "smallestString(\"abc\")",
        "smallestString(s = \"ababababababababab\")",
        "smallestString(s = \"zabcdefg\")",
        "smallestString(\"zbaz\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5], k=2)",
        "sumIndicesWithKSetBits(nums = [3,4,5,6,7], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,0,1,0,1], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5, 6, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1, 2, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 2, 3, 6, 7, 5, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [4,5,8,9,7,1,2,4,5,9,1,2,3], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"BBABC\")",
        "minLength(s = \"ABABABABABABABAB\")",
        "minLength(s = \"AABAABAB\")",
        "minLength(s = \"BAAAB\")",
        "minLength(s = \"BABABABACD\")",
        "minLength(\"ABABABABABABABABABABABABABABABABABAB\")",
        "minLength(s = \"BBBBBABABBBABBBAB\")"
    ],
    "sample_158": [
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [18, 43, 36, 13, 7])",
        "maxSum(nums = [55,9])",
        "maxSum(nums=[51, 32, 43])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [5, 4, 6, 2, 1])",
        "maxSum(nums = [51, 90, 50, 31])",
        "maxSum(nums = [12, 30, 25, 16, 27, 22])",
        "maxSum(nums = [51, 11, 12, 13, 21, 32, 43, 45])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation([3, 1, 2])"
    ],
    "sample_162": [
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums=[51,32,43])",
        "maxSum(nums=[51,32,43])",
        "maxSum([18, 43, 36, 13, 7])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '10')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber(s = '11111')",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s='1000')",
        "maximumOddBinaryNumber(s = '00011')",
        "maximumOddBinaryNumber(s='1011')",
        "maximumOddBinaryNumber(s=\"001\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 5, 20, 10, 3], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,2,3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 3, 1, 2, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 1, 4, 5, 3, 1, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 13, 5, 15, 20], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 2, 5, 5, 2, 1, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 4, 10, 25], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 9, 8, 11, 9, 13], target = 10)"
    ],
    "sample_166": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"bananaapple\")",
        "isAcronym(words = [\"ab\", \"bc\"], s = \"a\")",
        "isAcronym(words = [\"banana\", \"yummy\"], s = \"by\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\", \"durian\"], s = \"abcd\")",
        "isAcronym(words = [\"banana\", \"eat\", \"me\"], s = \"beam\")",
        "isAcronym(words = [\"its\", \"a\", \"nice\", \"day\"], s = \"itad\")",
        "isAcronym(words = [\"fear\", \"anger\", \"sad\", \"mad\"], s = \"FASM\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank=1, additionalTank=1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)"
    ],
    "sample_130": [
        "maxIncreasingGroups([1, 2, 3, 4])",
        "maxIncreasingGroups([1, 1, 1])",
        "maxIncreasingGroups(A = [1,2,3,4])",
        "maxIncreasingGroups(A = [2,3,4,5])",
        "maxIncreasingGroups(A = [1, 5, 2, 3, 5])",
        "maxIncreasingGroups(A = [10, 5, 2, 6])",
        "maxIncreasingGroups([1, 3, 1, 4, 3])",
        "maxIncreasingGroups([2, 6, 10, 12])",
        "maxIncreasingGroups(A = [3,3,4,3,4,2,2,2,4])",
        "maxIncreasingGroups(A = [1, 3, 2, 4, 5, 7, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [1, 1, 1, 1, 1])",
        "distinctDifferenceArray(nums = [5, 4, 2, 1, 6])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 0)",
        "distanceTraveled(mainTank=2, additionalTank=1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [3,4,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [2, 5, 4, 4, 3, 2, 5, 3])",
        "countCompleteSubarrays(nums = [5, 5, 5, 2, 3, 4, 1, 1, 2, 2])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 3, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,4,5,6,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 6, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 2, 4, 5, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 6, 7, 1, 2, 3, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 7, 9, 21, 33, 55], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"apple\")",
        "minimizedStringLength(s = \"apple\")",
        "minimizedStringLength(s = \"aabbccdd\")",
        "minimizedStringLength(s = \"aaaabbb\")",
        "minimizedStringLength(s = \"112233\")",
        "minimizedStringLength(s=\"mqpxzy\")",
        "minimizedStringLength(s = \"sushant\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,1,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4,1,2,3,4], k = 4)",
        "longestEqualSubarray(nums=[1,2,1,2,1,3,3], k=2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [4,1,3,3,4,1,1,2], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3",
        "longestEqualSubarray(nums=[2,2,2,2,3,3,3,3,3,3,4,5,6,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [2,1], [3,2], [3,1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[0, 100], [1, 100], [2, 100], [3, 100], [4, 100]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,2],[3,1],[4,1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 100], [1, 100], [2, 200], [3, 200]])",
        "colorTheArray(n=5, queries=[[0, 1], [1, 1], [2, 2], [2, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,1],[3,1],[2,2],[3,1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 2], [1, 1], [5, 1], [4, 2]])",
        "colorTheArray(n=5, queries=[[0, 2], [1, 1], [1, 3], [2, 4], [3, 1]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3, 4, 5], target=5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 5, 20, 10, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3, 4], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 5, 20, 10, 5], target=15)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 5, 9], target = 5)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [25, 49, 9, 6, 100])",
        "countBeautifulPairs(nums = [25, 49, 9, 6, 10])",
        "countBeautifulPairs(nums = [25,49,9,6,100,36,91,72,82,46])",
        "countBeautifulPairs(nums = [2, 5, 12, 55, 32])",
        "countBeautifulPairs(nums = [22,33,44])",
        "countBeautifulPairs(nums = [25,26,25,26])",
        "countBeautifulPairs(nums = [21, 12, 13, 14, 32])",
        "countBeautifulPairs(nums = [212, 211, 212, 212, 212, 212, 212, 212, 212, 212])",
        "countBeautifulPairs(nums = [11, 21, 12, 30, 20, 10, 10])",
        "countBeautifulPairs([25, 33, 35, 19, 93])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays([1,2,3,4,5])",
        "countWays(nums = [1, 3, 2, 4, 5])",
        "countWays(nums = [1,1,1,1])",
        "countWays(nums=[2,0,1,3])",
        "countWays([1, 0, 1, 0])",
        "countWays(nums=[2,1,1])",
        "countWays(nums = [3,3,4,1,4,5])",
        "countWays([3, 2, 1, 0])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = '1111')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = \"111001\")",
        "maximumOddBinaryNumber(s = '00001010')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 3, 1, 4, 2, 2, 8, 2, 4, 9], k = 5)",
        "maximumBeauty(nums = [1, 3, 1, 5, 4], k = 0)",
        "maximumBeauty(nums = [1, 5, 4, 2], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 4], k = 2)",
        "maximumBeauty(nums = [2,10,5,4,8], k = 3)",
        "maximumBeauty(nums = [4, 2, 1, 3], k = 1)",
        "maximumBeauty(nums = [2, 4, 5, 3, 1, 6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 3, 3, 3, 3], k = 2)",
        "maximumBeauty(nums = [3,1,5,6,8], k = 1)",
        "maximumBeauty(nums = [1,3,5,3,3,10], k = 3)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [4, 3, 2, 1])",
        "maximumTripletValue(nums = [-1,-2,1])",
        "maximumTripletValue(nums = [1, 0, 1, 1, 2])",
        "maximumTripletValue(nums = [1,2,0,3,0,4,5])",
        "maximumTripletValue(nums = [1, -2, 0, 5, 6, 7, 4])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1,3,6,10,15], target = 3)",
        "maximumJumps(nums = [1,5,2,4,1], target = 1)",
        "maximumJumps(nums = [1,5,1], target = 1)",
        "maximumJumps(nums=[1,2,3,4,5,6,7,8,9,10], target=2)",
        "maximumJumps(nums = [1,3,6,8,10,15], target = 3)",
        "maximumJumps(nums = [1, 3, 5, 2], target = 2)",
        "maximumJumps(nums=[100,2,104,103,102], target=5)",
        "maximumJumps(nums = [2,5,6,7,8,10], target = 1)",
        "maximumJumps(nums = [50, 30, 20, 20, 20], target = 20)",
        "maximumJumps(nums = [1,5,2,4,1,7,8,3,1,10,11,13], target = 1)"
    ],
    "sample_149": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'ring')",
        "finalString(s = \"rsting\")",
        "finalString(s = 'stingr')",
        "finalString(s = \"stirng\")",
        "finalString(s = 'rsiitng')",
        "finalString(s = \"srgti\")",
        "finalString(s = \"certsi\")",
        "finalString(s = \"fotsngi\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1,2,3,4,5])",
        "continuousSubarrays(A = [1,2,3,4,5])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6])",
        "continuousSubarrays([1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 2, 3, 2, 2, 2])",
        "continuousSubarrays(A = [1, 2, 2, 2, 3, 3, 1])",
        "continuousSubarrays(A = [1,2,3,4,5,1,2,3,1,2])",
        "continuousSubarrays(A = [2,2,2,1,2,1,1,2,2,1,1,2,1,1])",
        "continuousSubarrays(A = [2, 5, 6, 5, 1, 1, 5, 2, 1])",
        "continuousSubarrays([2,2,2,2,2,3,4,5,3,1,2,3,4,4,5,6,7])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays([1, 1, 1, 2, 2, 2, 3, 3, 3, 4])",
        "countCompleteSubarrays(nums = [5,5,5,5,5,5,5,5,5,5,5])",
        "countCompleteSubarrays(nums=[1,2,3,1,2,1,3,2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 3, 3, 1, 2, 2, 1])",
        "countCompleteSubarrays([3, 2, 1, 2, 2, 3, 1])"
    ],
    "sample_228": [
        "countWays([0,1,2])",
        "countWays(nums = [0,2,1,3])",
        "countWays(nums = [2,1,3,0])",
        "countWays([0,1,2,2])",
        "countWays(nums = [2, 1, 0, 2])",
        "countWays([1,0,0,0])",
        "countWays(nums = [1,0,2,4,5,3])",
        "countWays(nums = [1,2,0,4,6])",
        "countWays([0, 1, 1, 3])",
        "countWays([3,5,0,0,7,10,0,12,14])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [3,5,2,6], k = 2)",
        "maximumBeauty(nums = [1, 3, 1, 4, 1, 5], k = 2)",
        "maximumBeauty(nums = [3, 1, 4], k = 2)",
        "maximumBeauty(nums = [2,4,6,8,10,12,14,16], k = 3)",
        "maximumBeauty(nums = [2,3,2,4], k = 1)",
        "maximumBeauty(nums = [3, 4, 1, 5, 2], k = 2)",
        "maximumBeauty(nums = [1,3,2,5,1,5,2,4], k = 2)",
        "maximumBeauty(nums = [3,5,2,5,5,2,4,2], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 1, 3, 5, 4, 2, 1], k = 1)",
        "maximumBeauty(nums = [2,4,5,3,2,7,8,4,10], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3,2,3,4,2])",
        "distinctDifferenceArray(a=[3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [2, 4, 6, 8, 10])",
        "distinctDifferenceArray(a = [1,1,1,1,1])",
        "distinctDifferenceArray(a = [5, 4, 3, 5, 2])",
        "distinctDifferenceArray(a = [3, 1, 2, 3, 4])",
        "distinctDifferenceArray(a = [5,2,1,4,3])",
        "distinctDifferenceArray(a = [1,1,3,3,5,5])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1,2,3,4,5])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays([1,2,3,4,5,6,7,8])",
        "continuousSubarrays(a = [1, 3, 2, 2, 5, 2, 3, 7])",
        "continuousSubarrays([-2,-1,0,1,2,3])",
        "continuousSubarrays(a = [2, 4, 3, 5, 1, 6])",
        "continuousSubarrays(a = [0,1,2,3,4,2,0])",
        "continuousSubarrays(a = [2,5,4,2,3,5,4])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1,2,3,4])",
        "continuousSubarrays(nums = [1,2,3,4])",
        "continuousSubarrays(nums = [1, 2, 3, 4])",
        "continuousSubarrays(nums = [4,2,2,2,4,4,2,2])",
        "continuousSubarrays(nums=[5, 4, 2, 4])",
        "continuousSubarrays(nums = [1, 2, 2, 3, 3, 3])",
        "continuousSubarrays(nums=[1, 3, 5, 2, 7, 5])",
        "continuousSubarrays(nums = [2,4,5,7,8,9])",
        "continuousSubarrays(nums = [5, 4, 2, 2, 1, 0])",
        "continuousSubarrays(nums = [2, 4, 3, 5, 7, 1, 6])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [42, 11, 1, 97])",
        "countBeautifulPairs(nums = [21, 22, 23, 24, 25])",
        "countBeautifulPairs(nums=[21,22,23,24,25,26])",
        "countBeautifulPairs([25, 20, 32, 40, 49])",
        "countBeautifulPairs(nums = [1000, 1100, 1110])",
        "countBeautifulPairs(nums = [21, 22, 22, 11, 20])",
        "countBeautifulPairs(nums = [12, 51, 23, 4, 32, 43])",
        "countBeautifulPairs(nums = [22,44,43,12,11,19])",
        "countBeautifulPairs(nums
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation([2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,1,3,5,4])",
        "semiOrderedPermutation(nums = [4,3,1,2])",
        "semiOrderedPermutation(nums = [1,2,5,3,4])",
        "semiOrderedPermutation(nums = [1,2,5,3,4])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation([3, 1, 2])",
        "semiOrderedPermutation([2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 2, 1, 1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums=[0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,0,0,0,1,0])",
        "numberOfGoodSubarraySplits([1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,1,0,0,0,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,0,0,0,1,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,1,1,1,0,0,0,0,1,1,0,1,0,1,0,0,0,0,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,1,1,0,0,0,1,1,0,1,1,1,1,0,0,0,1,0,1,0,0,1,0,1,1,1,1,0,0,1,1,0,0,0,1,1,1,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,0,0,1,0,1,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s='0101')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '0100')",
        "maximumOddBinaryNumber(s = \"001000\")",
        "maximumOddBinaryNumber(s = \"011100\")",
        "maximumOddBinaryNumber(\"1101010\")",
        "maximumOddBinaryNumber(s = \"0101000000011\")"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays([1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 1, 3])"
    ],
    "sample_23": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACBDACBD\")",
        "minLength(s = \"ACBDAA\")",
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"CABABD\")",
        "minLength(s = \"AABBCCDD\")",
        "minLength(s = \"ACBD\")",
        "minLength(s=\"ACBD\")",
        "minLength(s=\"BBABCAB\")",
        "minLength(s = \"BBBBACCADAB\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [2,1,3,1,2,1,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays([3, 4, 4, 1, 2, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays([3,1,2,4,3])",
        "countCompleteSubarrays(nums = [3,4,4,5,6,6,6])",
        "countCompleteSubarrays(nums = [1,2,1,1,2,1,3,1,1,1])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 17, num2 = 3)",
        "makeTheIntegerZero(num1 = 23, num2 = 5)",
        "makeTheIntegerZero(num1 = 30, num2 = 5)",
        "makeTheIntegerZero(num1 = 4, num2 = 1)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1,3,6,10,15,16], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 7, 8, 10], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 2)",
        "maximumJumps(nums = [1,3,6,7,8,10], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6], target = 2)",
        "maximumJumps(nums = [1, 5, 2, 4, 2], target = 3)",
        "maximumJumps(nums = [10, 20, 30, 40, 25, 40, 50, 60, 35, 70, 90], target = 20)",
        "maximumJumps(nums = [0, 3, 9, 6, 7, 5], target = 3)",
        "maximumJumps(nums = [1,3,6,10,15,16,27,28,30], target = 2)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [2, 3, 1, 5])",
        "maxIncreasingGroups(x = [1, 2, 5, 9, 10])",
        "maxIncreasingGroups(x = [2, 5, 1, 4, 3, 6])",
        "maxIncreasingGroups(x = [4, 2, 2, 2, 1, 5])",
        "maxIncreasingGroups([0, 0, 1, 1, 2, 2, 2, 2])",
        "maxIncreasingGroups([-1, 0, 0, 1, 2, 2, 4, 5, 6, 8])",
        "maxIncreasingGroups([100, 90, 90, 80])",
        "maxIncreasingGroups([1, 2, 3])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"L__R____\")",
        "furthestDistanceFromOrigin(moves = \"__L_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_LR\")",
        "furthestDistanceFromOrigin(moves = \"LRRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"L_L__R_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R__L__\")",
        "furthestDistanceFromOrigin(moves = \"LRRR_LLL\")",
        "furthestDistanceFromOrigin(moves = \"LL_R_\")",
        "furthestDistanceFromOrigin(\"LLR_LR__\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR__R_L_\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '0010')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s='000')",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s='100')",
        "maximumOddBinaryNumber(s='1100')",
        "maximumOddBinaryNumber(s=\"0010\")",
        "maximumOddBinaryNumber(s = '010000')"
    ],
    "sample_6": [
        "colorTheArray(n = 4, queries = [[0,1],[1,2],[2,1],[3,2]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,0]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,1],[3,2],[4,1]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,1],[3,1],[4,1],[5,1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 2, queries = [[0,100],[1,100]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[1,2]])",
        "colorTheArray(n = 3, queries = [[0,3],[1,2],[2,1],[1,3],[0,2]])",
        "colorTheArray(n=4, queries = [[0, 1], [1, 2], [0, 3], [3, 2]])",
        "colorTheArray(n = 4, queries = [[2,3],[3,1],[4,2]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [3, 9, 7, 8])",
        "findValueOfPartition(nums = [3, 9, 7, 3])",
        "findValueOfPartition(nums = [9, 4, 1, 7])",
        "findValueOfPartition(nums = [9, 4, 1, 7])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [3,9,7,1,2,4])",
        "findValueOfPartition(nums = [3, 1, 6])",
        "findValueOfPartition(nums = [1, 10, 3])",
        "findValueOfPartition(nums = [1,3,5,100])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits([0,0,0])",
        "numberOfGoodSubarraySplits([1,0,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,1,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0,1,0,0,0,1,0,0,0])"
    ],
    "sample_121": [
        "minimumIndex(nums = [2,1,3,1,1,1,7,1,2,1])",
        "minimumIndex(nums = [2,1,3,5,2,2,2,2])",
        "minimumIndex(nums = [2,1,3,1,1,2,2])",
        "minimumIndex(nums = [2,1,3,1,1,2,2])",
        "minimumIndex(nums = [2,1,3,1,1,2])",
        "minimumIndex(nums = [2,1,3,1,1,3])",
        "minimumIndex(nums = [3,2,3,2,2,2])",
        "minimumIndex([3, 2, 3, 2, 2])",
        "minimumIndex(nums = [2,1,1,1,2,1,1,3])",
        "minimumIndex(nums=[2,1,3,1,1,2,2,1,1,2])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 7, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [4,5,2,2,2], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 2, 2, 1, 4, 5], k = 3)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 1, offers = [[0, 10, 10]])",
        "maximizeTheProfit(n = 10, offers = [[1,3,3],[4,10,3],[3,5,1],[5,9,2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 10], [1, 3, 3], [3, 5, 15]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,5],[1,2,5],[3,3,3],[3,4,10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 4, 3], [2, 5, 2], [3, 4, 3], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 1], [1, 3, 1], [2, 4, 1], [2, 5, 3], [3, 5, 1]])",
        "maximizeTheProfit(n = 10, offers = [[1, 6, 6], [2, 8, 10], [5, 9, 8]])",
        "maximizeTheProfit(n = 10, offers = [[1,5,2], [3,7,3], [4,8,3], [8,10,4], [9,11,5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [1, 3, 7], [3, 4, 4], [2, 3, 4], [3, 5, 2], [4, 5, 4]])",
        "maximizeTheProfit(n = 5, offers = [[0, 5, 10], [1, 6, 11], [0, 3, 20], [2, 5, 11], [0, 10, 5]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"22575\")",
        "minimumOperations(num = \"0250\")",
        "minimumOperations(num = \"022550\")",
        "minimumOperations(\"0011\")",
        "minimumOperations(\"225575\")",
        "minimumOperations(\"007550\")",
        "minimumOperations(\"00101\")",
        "minimumOperations(\"255225255\")",
        "minimumOperations(\"05005000\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"001\")",
        "minimumOperations(num = \"0255\")",
        "minimumOperations(num = \"10\")",
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"0075\")",
        "minimumOperations(\"0250\")",
        "minimumOperations(\"25575\")",
        "minimumOperations(num = \"12220\")",
        "minimumOperations(num = \"3933\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[3,4,5]])",
        "maximizeTheProfit(n = 4, offers = [[1,1,2],[2,2,3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1,1,2],[1,2,1],[1,2,2]])",
        "maximizeTheProfit(n = 5, offers = [[2,4,3],[1,3,2],[2,5,5]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,3],[1,4,1],[4,4,4]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 2], [5, 8, 1], [2, 4, 3], [2, 5, 4]])",
        "maximizeTheProfit(n = 10, offers = [[2, 1, 20], [3, 4, 15], [5, 7, 10], [7, 10, 20]])",
        "maximizeTheProfit(n = 10, offers = [[6,10,7],[1,2,5],[3,5,9],[1,5,3]])",
        "maximizeTheProfit(n = 6, offers = [[3,4,4],[1,3,5],[3,5,7],[3,3,4],[4,5,3],[3,3,2]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums=[1,2,3,4], threshold=4)",
        "longestAlternatingSubarray(nums=[2,2,2,3,4,5], threshold=5)",
        "longestAlternatingSubarray(nums = [1,1,1,2,2,1,1,2,2,2,1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 3, 1, 2, 4, 2, 3, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,1,0,0,0,1,0,0,1,1,1,1,0,1,0,1], threshold = 1)"
    ],
    "sample_203": [
        "minimumOperations(num = \"225\")",
        "minimumOperations(num = \"99\")",
        "minimumOperations(num = \"325\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"90\")",
        "minimumOperations(num = \"5025\")",
        "minimumOperations(num = \"13\")",
        "minimumOperations(num = \"9001\")",
        "minimumOperations(num = \"0001111\")",
        "minimumOperations(\"2340596\")"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 1], [4, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [1, 0], [4, 1]])",
        "colorTheArray(n = 5, queries = [[2, 1], [5, 1], [1, 1], [4, 2], [3, 2]])",
        "colorTheArray(n=5, queries=[[1,1], [2,2], [1,2], [3,2], [5,1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [3, 4], [4, 5], [5, 1], [2, 3]])",
        "colorTheArray(n=5, queries = [[1, 1], [2, 2], [2, 3], [4, 4], [3, 4]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [2,1,1,2,1,3,3,3,1,1,3])",
        "minimumIndex(nums = [2,1,1,2,1,3,3,3,1,1,3])",
        "minimumIndex(nums = [2, 1, 3, 1, 1, 1, 7, 1, 2, 1])",
        "minimumIndex(nums = [2,1,1,2,1,1,1,3])",
        "minimumIndex(nums = [2, 2, 1, 2])",
        "minimumIndex(nums = [2, 1, 2, 2, 2, 2, 2, 1, 2, 1])",
        "minimumIndex(nums = [3, 2, 4, 3])",
        "minimumIndex(nums = [2,2,2,1,1,1])",
        "minimumIndex(nums = [2, 1, 1, 1, 2, 1, 3, 3])",
        "minimumIndex(nums = [3, 2, 1, 3, 3, 3, 3])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1,2,3,4], target = 1)",
        "maximumJumps(nums = [1,2,3,4,7], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 3, 6, 7, 8, 12], target = 5)",
        "maximumJumps(nums = [1, 5, 2, 3], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [1,3,4,8], target = 2)",
        "maximumJumps(nums = [10, 9, 8], target = 2)",
        "maximumJumps(nums = [3, 7, 9, 11], target = 1)",
        "maximumJumps(nums=[-5, -4, -2, 1, 2, 3], target=2)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = '5123000001')"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 1, b = 2)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 5, b = 5)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 3, 8, 10, 15])",
        "findValueOfPartition(a = [9,3,5])",
        "findValueOfPartition(a = [3, 9, 7, 1])",
        "findValueOfPartition(a = [4, 2, 1, 3])",
        "findValueOfPartition(a = [4, 2, 1, 3])",
        "findValueOfPartition(a = [2, 3, 5, 1])",
        "findValueOfPartition(a = [2, 3, 4])",
        "findValueOfPartition(a = [2, 2])",
        "findValueOfPartition(a = [10, 1, 100])",
        "findValueOfPartition(a = [1,2,4,5,8])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([3, 2, 3, 4, 2])",
        "distinctDifferenceArray([3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [-1, 1, 3, 3, 5])",
        "distinctDifferenceArray(nums = [4,5,1,6,2,7,3,8])",
        "distinctDifferenceArray(nums = [5, 5, 3, 3, 7])"
    ],
    "sample_120": [
        "minimumIndex(nums = [2, 1, 3, 1, 1, 1])",
        "minimumIndex(nums = [2,1,3,1,1,3])",
        "minimumIndex(nums = [2, 1, 3, 1, 1, 1, 7, 1, 2, 1])",
        "minimumIndex(nums = [2, 3, 1, 2, 2])",
        "minimumIndex(nums = [2, 1, 1, 2, 2])",
        "minimumIndex(nums = [1,2,2,3,2,1,3])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5])",
        "minimumIndex(nums=[1,1,1,1,1,2])",
        "minimumIndex(nums = [1,2,2,2,2,2,2,2,2,3])",
        "minimumIndex(nums=[1, 1, 1, 0, 1])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLR\")",
        "furthestDistanceFromOrigin(moves = \"RRR\")",
        "furthestDistanceFromOrigin(moves = \"LLL\")",
        "furthestDistanceFromOrigin(\"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRRRRLLL\")",
        "furthestDistanceFromOrigin(moves=\"LRRLLRLRRLL\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abcd\")",
        "minimizedStringLength(s = \"aaabb\")",
        "minimizedStringLength(s = \"Banana\")",
        "minimizedStringLength(s = \"abbb\")",
        "minimizedStringLength(\"abca\")",
        "minimizedStringLength(s = \"abcdabcdd\")",
        "minimizedStringLength(s = \"abcabababac\")",
        "minimizedStringLength(s = \"zabcdez\")"
    ],
    "sample_105": [
        "checkArray(nums = [4, 2, 3, 1, 10], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6], k = 3)",
        "checkArray(nums = [2,2,3,3,1,0,1], k = 3)",
        "checkArray(nums = [4,2,3,1,10,7,2,5], k = 3)",
        "checkArray(nums = [1,1,1,0,1,1,1,1], k = 3)",
        "checkArray(nums = [3, 4, 4, 3, 0], k = 3)",
        "checkArray(nums = [8, 0, 3, 7], k = 3)",
        "checkArray(nums = [6, 0, 1, 0, 1, 0, 1], k = 5)",
        "checkArray(nums = [10, 5, 4, 2, 1, 3, 1], k = 4)",
        "checkArray(nums = [2,10,10,4,2,10,9,10], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 1, 1, 1])",
        "maxIncreasingGroups([2, 3, 1])",
        "maxIncreasingGroups(usageLimits = [2, 0, 1])",
        "maxIncreasingGroups(usageLimits = [2, 4, 1])",
        "maxIncreasingGroups(usageLimits = [2, 4, 1, 2])",
        "maxIncreasingGroups(usageLimits = [3,2,3,1])",
        "maxIncreasingGroups(usageLimits = [3, 2, 5, 1, 7])",
        "maxIncreasingGroups([5, 1, 2, 10, 3, 3])",
        "maxIncreasingGroups(usageLimits = [3, 5, 8, 1, 12, 1, 7])",
        "maxIncreasingGroups(usageLimits = [4, 7, 2, 5, 2, 1, 1, 3, 4, 5])"
    ],
    "sample_206": [
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"02550\")",
        "minimumOperations(\"000\")",
        "minimumOperations(\"0052\")",
        "minimumOperations(num = \"001234\")",
        "minimumOperations(num = \"7345\")",
        "minimumOperations(\"250502\")",
        "minimumOperations('222522')",
        "minimumOperations(num = \"2550252550252525\")",
        "minimumOperations(\"734526\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0,1,1,0])",
        "doesValidArrayExist(derived = [1,1,0])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [2, 0, 3, 1])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0])",
        "doesValidArrayExist([0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [2, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0,1,1,0,1,0,1,0])"
    ],
    "sample_38": [
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"0110\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"01010101\")",
        "minimumCost(s = \"11100\")",
        "minimumCost(s = \"0101001\")",
        "minimumCost(s = \"00101100\")",
        "minimumCost(s = \"bbbaa\")",
        "minimumCost(\"110110\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4])",
        "maxIncreasingGroups([1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(usageLimits = [1, 3, 5, 7])",
        "maxIncreasingGroups(usageLimits = [2, 1, 2])",
        "maxIncreasingGroups(usageLimits = [4, 6, 9])",
        "maxIncreasingGroups([1, 3, 5, 6, 7])",
        "maxIncreasingGroups(usageLimits = [10, 5, 20, 10, 5])",
        "maxIncreasingGroups(usageLimits = [2, 1, 2, 3, 3, 1])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 11, 17, 22])"
    ],
    "sample_53": [
        "smallestString(s = 'baabc')",
        "smallestString(s = 'baacc')",
        "smallestString(s = 'baabb')",
        "smallestString(s = 'abc')",
        "smallestString(s = 'aaabc')",
        "smallestString(s = 'bzzz')",
        "smallestString(s = 'acz')",
        "smallestString(s = \"baazc\")",
        "smallestString(s = 'babzc')",
        "smallestString(s = \"b\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [4,3,2,4], x = 2)",
        "minAbsoluteDifference(nums = [4,3,2,4], x = 2)",
        "minAbsoluteDifference(nums = [4,3,2,4], x = 2)",
        "minAbsoluteDifference(nums = [4,3,2,4], x = 2)",
        "minAbsoluteDifference(nums=[5,3,2,10,15], x=1)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7,8,9,10], x = 4)",
        "minAbsoluteDifference(nums = [4,2,5,3,2,1,4,3], x = 3)",
        "minAbsoluteDifference(nums = [2, 5, 3, 7, 10], x = 3)",
        "minAbsoluteDifference(nums=[1,2,3,4,5,6], x=2)",
        "minAbsoluteDifference(nums = [3,2,5,1,7], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 1, 2], [1, 2, 1], [2, 3, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 2], [0, 2, 1]])",
        "maximizeTheProfit(N = 5, offers = [[2, 3, 1], [1, 4, 3], [4, 5, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1,2,3],[2,3,2],[3,5,1]])",
        "maximizeTheProfit(N = 7, offers = [[1, 2, 2], [2, 3, 1], [3, 4, 1], [4, 5, 2], [5, 6, 1], [6, 7, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 1], [3, 4, 2], [3, 5, 2], [4, 5, 1]])",
        "maximizeTheProfit(N = 5, offers = [[0, 2, 1], [0, 1, 2], [2, 4, 1], [1, 3, 3], [2, 5, 1]])",
        "maximizeTheProfit(N = 5, offers = [[0, 2, 10], [1, 4, 1], [2, 3, 5], [4, 4, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1,3,1],[3,5,2],[2,4,1],[2,5,2],[2,3,2]])",
        "maximizeTheProfit(N=7, offers = [[1, 2, 3], [1, 4, 2], [2, 5, 3], [4, 6, 2], [4, 7, 5]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \",\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"\")",
        "splitWordsBySeparator(a = [\"this\", \"is\", \"a\", \"sentence\"], b = \" \")",
        "splitWordsBySeparator(a = [], b = \"-\")",
        "splitWordsBySeparator(a = [\"one\", \"two\", \"three\", \"four\"], b = \"tw\")",
        "splitWordsBySeparator(a = [\"hey\", \"my\", \"dear\"], b = \"y\")",
        "splitWordsBySeparator(a = [\"hihihi\", \"hihi\", \"hi\"], b = \"hi\")",
        "splitWordsBySeparator(a = [\"she\", \"is\", \"a\", \"good\", \"girl\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"acd\", \"bd\", \"zx\"], b = \",\")",
        "splitWordsBySeparator(a = [\"..\", \"aa\", \"a\", \"..bb\", \"bbb\", \"...\", \"..\"], b = \"..\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '512301000000')",
        "removeTrailingZeros(a = '512300')",
        "removeTrailingZeros(a='5123000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'nev')",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'naveen')",
        "makeSmallestPalindrome(\"neven\")",
        "makeSmallestPalindrome(s = 'nine')",
        "makeSmallestPalindrome(\"nev\")",
        "makeSmallestPalindrome(s = \"ninja\")",
        "makeSmallestPalindrome(s = \"nevve\")",
        "makeSmallestPalindrome(s = \"veni\")",
        "makeSmallestPalindrome(s = \"aabc\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 3, 2, 2, 3, 1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,1,2,3,4], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,2,3,1,3,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,1,2,3,1,2], k = 3)",
        "longestEqualSubarray(nums = [5,2,3,4,5,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [3,1,2,3,1,1,1,2,2], k = 3)",
        "longestEqualSubarray(nums = [3, 4, 3, 1, 3, 3, 3, 4], k = 2)",
        "longestEqualSubarray(nums = [2, 1, 3, 3, 1, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 2, 2, 1, 1, 3, 3, 4, 1, 1], k = 3)",
        "longestEqualSubarray(nums = [2, 3, 4, 5, 1, 2, 3, 4], k = 4)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,5,4,2,3], k = 1)",
        "maximumBeauty(nums = [3,5,2,6], k = 2)",
        "maximumBeauty(nums = [1, 3, 1, 4, 2, 2, 8, 2, 4, 8], k = 5)",
        "maximumBeauty(nums = [2,4,6,1], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 6], k = 1)",
        "maximumBeauty(nums=[3,5,1,2,4], k=2)",
        "maximumBeauty(nums = [3,2,5,4,1], k = 1)",
        "maximumBeauty(nums = [1, 3, 4, 6, 9, 10], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 1, 5, 6], k = 3)",
        "maximumBeauty(nums = [3,4,5,6,7,8,9,1,12,2,3,4,1,2,3,4,5,1,2,1,3,4,1,2,3,4,12,1,3,4,1,2,1,3,4,5,1,2,1,3,4,5,6,7,8,9], k = 2)"
    ],
    "sample_163": [
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [54,546,548,60])",
        "maxSum(nums=[51, 32, 43])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums=[1,2,3,4,5,6,7,8,9,10])",
        "maxSum([20, 50, 30, 10, 50, 60])",
        "maxSum([55, 432, 543, 34, 3, 454, 345, 3453, 5467, 6576575, 5435, 2324, 435543, 234, 324, 4546457, 4568, 6797, 7687687, 543345, 43546457, 456457, 456])"
    ],
    "sample_151": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'sting')",
        "finalString(s = 'rsting')",
        "finalString(s = 'tinir')",
        "finalString(s = \"rtings\")",
        "finalString(s = 'eiratsng')",
        "finalString(s = \"stringsng\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = \"5123000\")"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '11')",
        "maximumOddBinaryNumber(s='001')",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s='101')",
        "maximumOddBinaryNumber('111')",
        "maximumOddBinaryNumber(s = \"11\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber('101000')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy.problem\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"easy.problem\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"easy.problem.solving\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"easy_problem\"], separator = \"_\")",
        "splitWordsBySeparator(words = ['easy problem'], separator = ' ')",
        "splitWordsBySeparator(words=[\"easy problem\"], separator=\" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"easy problem\",\"hard problem\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easy.problem.easy'], separator = \".\")",
        "splitWordsBySeparator(words = ['one', 'easy', 'problem'], separator = 'e')"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 1, 2, 2, 1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,1,2,3,4,5,6], K = 1)",
        "longestEqualSubarray(A = [1,2,3,4,4,4,4,4], K = 1)",
        "longestEqualSubarray(A = [4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "longestEqualSubarray(A = [1,3,4,4,5,5,5], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 1, 3, 3, 4, 3], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 1, 1, 1, 2, 2, 2, 4], K = 2)",
        "longestEqualSubarray(A=[1, 2, 3, 1, 1, 2, 3, 3], K=3)",
        "longestEqualSubarray(A = [3,5,5,7,6,7,4,3,6,5], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,4,4,4,4,2,1,5,6,6,6,6,6,6], K = 1)"
    ],
    "sample_230": [
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [3, 3, 3])",
        "countWays(nums = [4, 2, 3, 1])",
        "countWays(nums = [1, 3, 5, 6])",
        "countWays(nums = [4, 2, 3, 1, 5])",
        "countWays(nums=[1, 2, 3, 3, 3])",
        "countWays([2, 3, 2, 4])",
        "countWays([3, 4, 3, 3])",
        "countWays(nums = [2,4,7,6,8])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 1)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3)",
        "sumIndicesWithKSetBits(nums=[2, 4, 6, 8, 10], k=2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 5, 3, 2], k = 3)",
        "sumIndicesWithKSetBits(nums = [4,2,1,3,1,1,2,3], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 4, 2, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 5, 2, 1, 1, 5, 2, 1, 4, 1, 3], k = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"51230000\")",
        "removeTrailingZeros(num = '51230100000000000')",
        "removeTrailingZeros(num = \"5123010000000\")"
    ],
    "sample_167": [
        "isAcronym(words = [\"banana\", \"apple\"], s = \"bap\")",
        "isAcronym(words = [\"apple\", \"orange\", \"grape\"], s = \"aog\")",
        "isAcronym(words = [\"bread\", \"butter\"], s = \"bbr\")",
        "isAcronym(words = [\"break\", \"bad\"], s = \"bdb\")",
        "isAcronym(words = [\"ma\", \"ty\"], s = \"m\")",
        "isAcronym(words=[\"Limited\", \"company\"], s=\"Lc\")",
        "isAcronym(words = [\"major\", \"minor\", \"important\"], s = \"JM\")",
        "isAcronym(words=[\"bare\", \"across\"], s=\"br\")",
        "isAcronym(words = [\"it\", \"is\", \"a\", \"really\", \"big\", \"world\"], s = \"ibr\")",
        "isAcronym(words = [\"jonathan\", \"tam\", \"stella\"], s = \"jts\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2])",
        "countCompleteSubarrays([1, 2, 1, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [2, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums=[1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,1])",
        "countCompleteSubarrays([3, 1, 4, 2, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 3, 2, 1, 2])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 1, target = 10)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n=3, target=4)"
    ],
    "sample_147": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = 'sting')",
        "finalString(s = 'rtsng')",
        "finalString(s=\"rtinsg\")",
        "finalString(s=\"codeing\")",
        "finalString(s = 'gngor')",
        "finalString(s = 'iturgir')"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"naveen\")",
        "makeSmallestPalindrome(s = \"niven\")",
        "makeSmallestPalindrome(s = \"naveen\")",
        "makeSmallestPalindrome(s = 'nene')",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(\"nev\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 3], [0, 3, 10]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 1], [1, 2, 2], [2, 3, 3], [3, 4, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 3], [1, 4, 5], [0, 1, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 3], [1, 4, 5], [4, 4, 4]])",
        "maximizeTheProfit(n=5, offers=[[1, 3, 3], [2, 5, 1], [1, 5, 2], [5, 5, 6]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 4], [1, 4, 6], [1, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 0, 0], [2, 3, 5], [1, 1, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 4], [3, 4, 3], [2, 4, 2], [5, 5, 5], [2, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 3], [1, 3, 5], [2, 5, 10], [3, 4, 4], [1, 3, 2], [2, 4, 1]])",
        "maximizeTheProfit(n = 7, offers = [[1, 4, 3], [3, 6, 5], [2, 5, 6], [4, 7, 2], [1, 7, 10], [6, 7, 3]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1,3,6,10,15,16], target = 3)",
        "maximumJumps(nums = [1,3,6,10,15,16], target = 3)",
        "maximumJumps(nums = [1,3,6,10,15], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 16], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 7, 8, 12], target = 2)",
        "maximumJumps(nums=[1, 2, 3, 4], target=1)",
        "maximumJumps(nums = [1,5,6,11], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 6, 7, 8, 9, 10, 11], target = 1)",
        "maximumJumps(nums = [0,2,5,7,9,10], target = 1)",
        "maximumJumps(nums = [3, 1, 5, 2, 10, 12, 4, 6, 8, 12, 11, 9, 3, 3], target = 5)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits([1,1,2,1,1])",
        "numberOfGoodSubarraySplits([1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '11')",
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s = '0010')",
        "maximumOddBinaryNumber(s = '1110')",
        "maximumOddBinaryNumber(s = '01001')",
        "maximumOddBinaryNumber(s = \"1111\")",
        "maximumOddBinaryNumber(s = \"1111\")",
        "maximumOddBinaryNumber('101')",
        "maximumOddBinaryNumber(s = '11')",
        "maximumOddBinaryNumber(s = '00101001')"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n=3, k=4)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 15, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 12, num2 = 1)",
        "makeTheIntegerZero(num1 = 17, num2 = 2)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 5, target = 1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 4, target = 6)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [5, 0, 10, 0, 10, 5], modulo = 5, k = 10)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 4, 3], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6], modulo = 10, k = 5)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], modulo=4, k=1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [2,2,2,2,2,2,2,2,2,2], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 6, 1, 4], modulo = 2, k = 1)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1,3,1,4,2,3], k = 1)",
        "maximumBeauty(nums=[3,5,6,7,9], k=2)",
        "maximumBeauty(nums = [4, 3, 2, 1, 5], k = 1)",
        "maximumBeauty(nums = [4, 1, 5, 25, 3], k = 2)",
        "maximumBeauty(nums = [4,5,2,3,1], k = 1)",
        "maximumBeauty(nums=[1,5,10,100,101,102], k=5)",
        "maximumBeauty(nums = [1, 3, 5, 2, 5, 4, 6, 6, 6, 7, 7, 7, 1, 1, 1, 2], k = 3)"
    ],
    "sample_148": [
        "finalString(s = 'iponter')",
        "finalString(s = 'peter')",
        "finalString(s = 'potter')",
        "finalString(s = 'piton')",
        "finalString(s = 'poitner')",
        "finalString(s = \"reporter\")",
        "finalString(s='pointr')",
        "finalString(s=\"niptoc\")",
        "finalString(s = 'ipoen')",
        "finalString(s='profeter')"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 0])",
        "countWays(nums = [2, 0, 1])",
        "countWays([2, 1, 0])",
        "countWays([0,1])",
        "countWays(nums=[1, 0, 2, 3, 4])",
        "countWays(nums = [4,2,1,0,3])",
        "countWays(nums = [0,1,4,3])",
        "countWays([2,0,0,0,0,0,0,0])",
        "countWays([5, 2, 1, 4, 0, 6, 3])",
        "countWays([0,1,2,5])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [1,2,3,4])",
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [42,21,10,2])",
        "countBeautifulPairs(nums=[1,2,3,4,5,6,7,8,9,10,11,12])",
        "countBeautifulPairs(nums = [21, 12, 21, 22, 20, 21])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 8, num2 = 4)",
        "makeTheIntegerZero(num1 = 8, num2 = 4)",
        "makeTheIntegerZero(num1 = 17, num2 = 2)",
        "makeTheIntegerZero(num1 = 17, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 10)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(\"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neve\")",
        "makeSmallestPalindrome(s='nene')",
        "makeSmallestPalindrome(s = \"nven\")",
        "makeSmallestPalindrome(s = 'nevven')"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"I\", \"love\", \"coding\"], s = \"ILC\")",
        "isAcronym(words = [\"two\", \"words\"], s = \"tw\")",
        "isAcronym(words = ['Banana'], s = 'B')",
        "isAcronym(words = [\"hello\", \"there\", \"general\", \"kenobi\"], s = \"hgk\")",
        "isAcronym(words = [\"meet\", \"eat\", \"tea\"], s = \"met\")",
        "isAcronym(words = [\"my\", \"first\", \"sentence\"], s = \"MFS\")",
        "isAcronym(words = [\"Hey\", \"You\", \"Geeks\"], s = \"HYG\")",
        "isAcronym(words = [\"much\", \"more\", \"fat\", \"than\"], s = \"momtft\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums=[0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits([1,0,1,0,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits([1,1,1,1,1,1,1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [5, 4, 3, 2, 1], k = 3)",
        "sumIndicesWithKSetBits(nums=[4, 5, 2, 7, 8, 9], k=1)",
        "sumIndicesWithKSetBits(nums = [4,5,7,7,8], k = 3)",
        "sumIndicesWithKSetBits(nums=[10,4,8,3], k=3)",
        "sumIndicesWithKSetBits(nums = [2, 4, 5, 6, 7, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [4,5,1,6,7,8], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,0,0,0,1], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 5, 11, 3, 7], k = 2)",
        "sumIndicesWithKSetBits(nums=[4,5,2,7,3,9,1], k=2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 2, 4, 1, 0, 2, 2], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 1, k = 1)"
    ],
    "sample_227": [
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [2, 1, 0])",
        "countWays([3, 2, 4, 1])",
        "countWays(nums = [1, 3, 0, 5, 2])",
        "countWays([2, 3, 5, 6])",
        "countWays(nums = [5, -2, 4, 3, 0])",
        "countWays([-2, -3, 3, 0, 1])",
        "countWays(nums = [1, 4, 7, 2, 0, 9, 10])",
        "countWays([-2,0,2,5,6,7,9])",
        "countWays(nums = [1, 5, 6, 11, 15, 20, 21, 22, 23, 28, 29, 30, 31])"
    ],
    "sample_39": [
        "minimumCost(s = \"0010\")",
        "minimumCost(s = \"1001\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"aa\")",
        "minimumCost(s = \"baba\")",
        "minimumCost(s = \"ababab\")",
        "minimumCost(s = \"011\")",
        "minimumCost(s = \"1111\")",
        "minimumCost(s = \"aabaaba\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"L__\")",
        "furthestDistanceFromOrigin(moves = \"LR__\")",
        "furthestDistanceFromOrigin(moves = \"L_LR\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_L\")",
        "furthestDistanceFromOrigin(moves = \"L_R___\")",
        "furthestDistanceFromOrigin(\"L_____R\")",
        "furthestDistanceFromOrigin(moves = \"L_L_L_L_L_\")",
        "furthestDistanceFromOrigin(\"_LL_RR_\")",
        "furthestDistanceFromOrigin(moves = \"___R_L_R\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 6, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 11, additionalTank = 0)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays([1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,3,3,1,2,3])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 2, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums=[1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,1,1,1], threshold = 1)",
        "longestAlternatingSubarray(nums=[2,3,4,5], threshold=2)",
        "longestAlternatingSubarray(nums=[2, 3, 4, 5], threshold=4)",
        "longestAlternatingSubarray(nums = [2,3,5,7,9], threshold = 1)",
        "longestAlternatingSubarray(nums=[1, 1, 2, 1], threshold=1)",
        "longestAlternatingSubarray(nums = [1,3,3,2,7], threshold = 2)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [3, 9]])",
        "numberOfPoints(nums = [[1, 3], [3, 9]])",
        "numberOfPoints(nums = [[1, 3], [3, 9]])",
        "numberOfPoints(nums = [[1,3],[3,9]])",
        "numberOfPoints(nums = [[1,3],[3,9]])",
        "numberOfPoints(nums = [[1,5],[1,7],[3,9]])",
        "numberOfPoints(nums = [[1, 4], [4, 5], [5, 6]])",
        "numberOfPoints(nums = [[1,3], [1,3], [1,3], [2,3]])",
        "numberOfPoints(nums = [[1, 2], [1, 2], [2, 2]])",
        "numberOfPoints([[-2,2], [-1,1], [-3,3], [-5,1], [100,200]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs([2, 5, 1, 4])",
        "countBeautifulPairs(nums=[2,5,1,4])",
        "countBeautifulPairs(nums = [25, 20, 15, 10, 5])",
        "countBeautifulPairs(nums = [2, 5, 1, 4, 2])",
        "countBeautifulPairs([200, 1000, 1500])",
        "countBeautifulPairs(nums = [1, 10, 100, 21, 30, 40])",
        "countBeautifulPairs(nums = [100, 10, 101, 2, 11, 21])",
        "countBeautifulPairs(nums = [25,49,9,6,100,37,43,22,36,35,38,39,17,16,41,11,1])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [5,6,7,8,9], t = 9)",
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 4)",
        "longestAlternatingSubarray(nums=[1,2,3,4], t=4)",
        "longestAlternatingSubarray(nums = [2,5,7,9], t = 10)",
        "longestAlternatingSubarray(nums = [4,4,4], t = 3)",
        "longestAlternatingSubarray(nums = [3,2,4,3], t = 3)",
        "longestAlternatingSubarray(nums = [1,3,2,4,5,6,7,8,9], t = 20)",
        "longestAlternatingSubarray(nums=[3, 2, 5, 1, 4], t=5)",
        "longestAlternatingSubarray(nums=[2,3,5,6,7,8,1,2,3,4,5,6], t=7)",
        "longestAlternatingSubarray(nums=[1,2,3,5,6,7,8,10,12,14,16,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"010101\")",
        "minimumCost(s = \"010101\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"010011\")",
        "minimumCost(s = \"abbba\")",
        "minimumCost(s = \"abaabb\")",
        "minimumCost(s = \"aaaabbbba\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACBDACBD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACBDAA\")",
        "minLength(s = \"ACDBCB\")",
        "minLength(s = \"ACBBD\")",
        "minLength(s = \"ABACABAD\")",
        "minLength(s = \"ABAB\")",
        "minLength(s = \"AABCCB\")",
        "minLength(s = \"AAABBBCCCD\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [4,5,0,-2,-3,1], modulo = 5, k = 5)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [5,0,10,0,10,5], modulo = 5, k = 10)",
        "countInterestingSubarrays(nums = [2,1,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums=[2, 4, 6], modulo=10, k=5)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 5, k = 4)",
        "countInterestingSubarrays(nums = [1,1,1,1,2,2,3,3,4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [0, 2, 1, 0, 3, 1, 2], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [2, 2, 1, 0, 3, 1, 2, 2], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [0,2,0,3,1,3,1,0], modulo = 7, k = 4)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 100]])",
        "colorTheArray(n = 1, queries = [[0, 100000]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [0, 2], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 1], [1, 2]])",
        "colorTheArray(n = 3, queries = [[2, 1], [2, 2], [1, 2], [3, 1], [3, 2], [1, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [1, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1,2], nums2 = [2,1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 4, 2], nums2 = [2, 2, 2, 2, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(nums1 = [2, 1, 2], nums2 = [3, 1, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [4, 1, 1])",
        "maxNonDecreasingLength(nums1 = [2,4,2,5,3], nums2 = [1,5,3,6,7])",
        "maxNonDecreasingLength(nums1 = [1, 4, 1], nums2 = [4, 1, 5])",
        "maxNonDecreasingLength(nums1=[3,2,1,4], nums2=[2,1,4,3])",
        "maxNonDecreasingLength(nums1 = [1, 5, 2, 1], nums2 = [5, 1, 5, 1])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 5, target = 4)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [3,9,7,3])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1,3,2])",
        "findValueOfPartition(nums = [1, 3, 2, 6])",
        "findValueOfPartition(nums = [1, 1])",
        "findValueOfPartition([1,3,5,7])",
        "findValueOfPartition(nums = [1,3,5,6,7,9])",
        "findValueOfPartition(nums = [9, 8, 1, 3, 4])",
        "findValueOfPartition(nums = [1, 5, 10, 2, 4])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LLLRRR\")",
        "furthestDistanceFromOrigin(\"LR__\")",
        "furthestDistanceFromOrigin(moves = \"L_RL_\")",
        "furthestDistanceFromOrigin(moves = \"LRRL__\")",
        "furthestDistanceFromOrigin(moves = \"LLR_R_\")",
        "furthestDistanceFromOrigin(moves = 'L_LR')",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LRL_R__R_\")",
        "furthestDistanceFromOrigin(moves = 'LRLL')",
        "furthestDistanceFromOrigin(moves = \"LLLLLLRLLRL_L\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [2,1,1,2])",
        "minimumIndex(nums = [2,1,1,2])",
        "minimumIndex(nums = [2,1,1,2])",
        "minimumIndex(nums = [2,1,1,2,1,3,3,3,1])",
        "minimumIndex(nums = [2,1,3,1,1,1,7,1,2,1])",
        "minimumIndex(nums = [2,1,3,1,1,3])",
        "minimumIndex(nums = [1, 2, 2, 2, 2, 2, 2, 3])",
        "minimumIndex(nums = [2,1,1,1,2,1,2,1,1,2])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2, 2, 2, 3])",
        "minimumIndex(nums = [1,1,1,1,1,1,1,1])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])"
    ],
    "sample_172": [
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n=2, k=4)",
        "minimumSum(n=1, k=3)"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [4, 2, 3])",
        "alternatingSubarray(nums = [1, 3, 5])",
        "alternatingSubarray(nums = [1, 1, 1])",
        "alternatingSubarray(nums = [2,3,3,2,1])",
        "alternatingSubarray(nums = [2,3,4,6])",
        "alternatingSubarray(nums = [0,2,1,4,3])",
        "alternatingSubarray(nums = [2, 1, 2, 2, 1, 1])",
        "alternatingSubarray(nums = [3,4,5,3,4,2,1])",
        "alternatingSubarray(nums = [1, 3, 4, 2])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2], [2, 1]])",
        "matrixSum(a = [[1,2],[3,4]])",
        "matrixSum(a = [[0,1], [1,0]])",
        "matrixSum(a = [[2, 2], [1, 1]])",
        "matrixSum([[1, 0], [0, 1], [1, 0]])",
        "matrixSum([[0, 1], [1, 2], [2, 3]])",
        "matrixSum(a=[[0, 1], [2, 0]])",
        "matrixSum(a = [[2], [4], [5]])",
        "matrixSum([[1,2], [3,4], [1,2]])",
        "matrixSum([[2, 3, 0, 2], [1, 3, 1, 1], [3, 3, 3, 4]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0,1,0],[1,0,1],[0,1,0]])",
        "findChampion(grid = [[0,1,0],[1,0,0],[0,0,1]])",
        "findChampion([[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0,1,0],[1,0,1],[0,0,0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [0, 1, 1, 1]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1], [0]])",
        "matrixSum(a = [[1, 2], [2, 3]])",
        "matrixSum(a=[[1], [2]])",
        "matrixSum(a = [[1,2,3], [1,2,3]])",
        "matrixSum(a = [[1,2], [1,2]])",
        "matrixSum(a = [[1, 0, 0, 1], [2, 3, 4, 5]])",
        "matrixSum([[1, 2, 4], [1, 3, 3], [1, 4, 2]])",
        "matrixSum(a = [[1, 0, 0], [2, 2, 1], [0, 3, 1]])",
        "matrixSum(a = [[1, 4, 2], [3, 7, 0], [0, 1, 4]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray(nums = [2,4,6,8,10])",
        "alternatingSubarray(nums = [2,3,4,5,6,7,8])",
        "alternatingSubarray([4, 2, 3, 4, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 7, 8, 9])",
        "alternatingSubarray(nums = [1, -3, 5, -7, 11, -13, 15, -17])",
        "alternatingSubarray(nums = [2,3,4,5,7,10,11,7,12,6,7,7,16,18,19])",
        "alternatingSubarray(nums = [3, 4, 5, 7, 2, 5, 6, 8, 3])",
        "alternatingSubarray(nums = [3,2,3,4,4,5,1,2,3,1,2])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\"], x = \"z\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"ef\")",
        "findWordsContaining(words = [\"ab\", \"abc\", \"ac\"], x = \"a\")",
        "findWordsContaining(words = [\"Banana\", \"apple\", \"Orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"applet\", \"pineapple\"], x = \"pine\")",
        "findWordsContaining(words = [\"abcd\", \"aaa\", \"bcd\"], x = \"b\")",
        "findWordsContaining(words = [\"banana\", \"fruit\", \"grapefruit\"], x = \"fruit\")",
        "findWordsContaining(words = [\"aaa\", \"ppp\", \"bbb\"], x = \"a\")",
        "findWordsContaining(words=[\"love\", \"the\", \"dance\"], x=\"the\")",
        "findWordsContaining(words = [\"halloween\", \"peek-a-boo\", \"alien\"], x = \"a\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"cbaed\")",
        "canBeEqual(s1 = \"banana\", s2 = \"anana\")",
        "canBeEqual(s1 = \"aabbcc\", s2 = \"bbaacd\")",
        "canBeEqual(s1 = \"atns\", s2 = \"ntas\")",
        "canBeEqual(s1 = \"sll\", s2 = \"lls\")",
        "canBeEqual(s1 = \"xcb\", s2 = \"abx\")",
        "canBeEqual(s1 = \"papapap\", s2 = \"takatak\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums=[2,3,5], target=8)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 1)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3], target=4)",
        "lengthOfLongestSubsequence(nums = [10,1,2,7,6,1,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], target=100)",
        "lengthOfLongestSubsequence(nums = [1,3,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,3,2,5,7], target = 10)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bdac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bdca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"abab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cabd\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"sgt\", s2 = \"sagt\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 4, 8, 16, 32])",
        "maxSubarrays([1,2,3,4,5,6,7])",
        "maxSubarrays(nums = [1, 2, 4, 1])",
        "maxSubarrays(nums = [1, 0, 0, 0, 0, 0])",
        "maxSubarrays(nums=[4,3,2,1])",
        "maxSubarrays(nums = [3, 5, 7, 12])",
        "maxSubarrays(nums = [3,1,2,1,4,2])",
        "maxSubarrays(nums = [10, 4, 8, 7, 2])"
    ],
    "sample_315": [
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices=[1, 1, 2, 3], money=3)",
        "buyChoco(prices = [2,3], money = 5)",
        "buyChoco(prices=[10, 20, 30], money=15)",
        "buyChoco(prices = [4, 10, 15], money = 20)",
        "buyChoco(prices=[4, 2, 1, 3], money=20)",
        "buyChoco(prices = [22, 2, 4, 2], money = 4)",
        "buyChoco(prices = [41, 35, 23, 6], money = 100)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [0,0,0,0], l = 0, r = 0)",
        "countSubMultisets(nums = [1,2,3], l = 4, r = 10)",
        "countSubMultisets(nums = [2,3,4,5], l = 6, r = 20)",
        "countSubMultisets(nums = [3,3,6,8], l = 1, r = 5)",
        "countSubMultisets(nums = [1,2,3,4,5,6], l = 1, r = 1)",
        "countSubMultisets(nums = [3,5,7], l = 0, r = 8)",
        "countSubMultisets(nums = [3,4,6], l = 2, r = 6)",
        "countSubMultisets(nums = [2,3,1,4], l = 2, r = 100)",
        "countSubMultisets(nums = [3, 5, 7, 9, 12, 15], l = 4, r = 6)",
        "countSubMultisets(nums = [0,2,2,3,0,2,1,3,3], l = 0, r = 7)"
    ],
    "sample_322": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(789)",
        "isFascinating(10)",
        "isFascinating(234)",
        "isFascinating(389)",
        "isFascinating(n = 768)",
        "isFascinating(n=786)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"ab\", s2 = \"aa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cbc\")",
        "canBeEqual(s1 = \"aab\", s2 = \"ab\")",
        "canBeEqual(s1 = \"bab\", s2 = \"aaa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"xbxx\")",
        "canBeEqual(s1 = \"dcbaa\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"lwqo\", s2 = \"rlwo\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [3, 2, 4, 1])",
        "minimumCoins([2, 3, 2])",
        "minimumCoins(prices = [1, 2, 3, 4, 10])",
        "minimumCoins(prices = [1, 4, 6, 2, 8, 2, 7])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins([2, 5, 3, 1, 5, 4])",
        "minimumCoins([1, 3, 2, 1, 5])",
        "minimumCoins(prices = [2, 3, 2, 1, 2, 4, 3, 1, 2])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 109)",
        "accountBalanceAfterPurchase(p = 140)",
        "accountBalanceAfterPurchase(105)",
        "accountBalanceAfterPurchase(105)",
        "accountBalanceAfterPurchase(p = 135)",
        "accountBalanceAfterPurchase(p = 145)",
        "accountBalanceAfterPurchase(130)",
        "accountBalanceAfterPurchase(p = 31)"
    ],
    "sample_423": [
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [3,3,3])",
        "minOperations([1,1,2,2,3,3,4,4,5,5,5])",
        "minOperations([1, 1, 1, 2, 3, 3, 3, 3])",
        "minOperations(nums = [1,2,2,2,3,4,5,6,7])",
        "minOperations(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 5, 6])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [4,2,5,3])",
        "alternatingSubarray(nums = [2,3,4,3,4])",
        "alternatingSubarray(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "alternatingSubarray(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "alternatingSubarray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "alternatingSubarray(nums = [1,2,3,4,2,5])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])",
        "alternatingSubarray(nums = [2,1,2,2,3,2,3,4])",
        "alternatingSubarray([0, 1, 1, 0, 1, 0, 0, 1, 1, 0])",
        "alternatingSubarray(nums = [1,2,2,1,2,3,3,3,2,2,1])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n=4, limit=2)",
        "distributeCandies(n = 12, limit = 5)"
    ],
    "sample_247": [
        "minOperations(s1 = \"aa\", s2 = \"aa\", x = 1)",
        "minOperations(s1 = \"p\", s2 = \"p\", x = 1)",
        "minOperations(s1 = \"xxx\", s2 = \"yyy\", x = 3)",
        "minOperations(s1 = \"xxyyzz\", s2 = \"xxzzyy\", x = 2)",
        "minOperations(s1 = \"ac\", s2 = \"bd\", x = 1)",
        "minOperations(s1 = \"aabb\", s2 = \"abaa\", x = 1)",
        "minOperations(s1 = \"cb\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", s2 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", x = 5)",
        "minOperations(s1 = \"bbbbb\", s2 = \"aaaaa\", x = 5)",
        "minOperations(s1 = \"adcbc\", s2 = \"acdbb\", x = 3)"
    ],
    "sample_340": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 1, y = 4, z = 2)",
        "longestString(x = 2, y = 4, z = 5)",
        "longestString(x = 4, y = 4, z = 2)",
        "longestString(x = 2, y = 6, z = 1)",
        "longestString(x = 5, y = 6, z = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [5,1,6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 3)",
        "minOperations(nums = [3,4,4,2,1], k = 4)",
        "minOperations(nums = [1, 3, 5, 7, 10], k = 12)",
        "minOperations(nums=[3, 1, 2, 2, 3, 1], k=3)",
        "minOperations(nums = [5, 1, 1, 1, 1, 2, 2], k = 3)",
        "minOperations(nums = [3, 5, 4, 6, 7, 8], k = 7)",
        "minOperations(nums = [5, 4, 2, 2, 2, 1, 10, 1], k = 2)",
        "minOperations(nums=[20, 18, 15, 10, 8, 6, 4, 2], k=4)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abbccc\")",
        "longestSemiRepetitiveSubstring(s = \"abbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abc\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbccc\")",
        "longestSemiRepetitiveSubstring(s = \"ababababab\")",
        "longestSemiRepetitiveSubstring(\"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabbb\")"
    ],
    "sample_361": [
        "isGood([1, 2, 3])",
        "isGood(a = [2, 1, 3, 2])",
        "isGood(a = [4, 1, 3, 2, 2])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 3])",
        "isGood(a = [1, 3, 2, 1, 3])",
        "isGood(a = [1, 5, 4, 2, 3, 2])",
        "isGood(a=[2, 2, 3, 1])",
        "isGood(a = [1, 3, 5, 6, 2])",
        "isGood([0, 1, 2, 4, 1, 3])",
        "isGood(a = [2,3,4,4,5,6,7,1,2])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 8, m = 3)",
        "differenceOfSums(n = 9, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 15, m = 4)",
        "differenceOfSums(n = 15, m = 2)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2, 3, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 3, 5, 2, 1, 3, 1, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1,2,2,1,1,1,2,2,2,2])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers([\"1\", \"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"2\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"3\", \"next\", \"5\", \"next\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"prev\", \"2\", \"push\", \"1\", \"pop\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"lc\", \"cl\", \"gg\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\",\"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"abc\",\"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"cc\",\"ll\",\"xx\"])",
        "maximumNumberOfStringPairs(words=[\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"1111111\", k = 2)",
        "shortestBeautifulSubstring(s = '111', k = 2)",
        "shortestBeautifulSubstring(s = \"1111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111111\", k = 1)",
        "shortestBeautifulSubstring(s = '111111', k = 1)",
        "shortestBeautifulSubstring(s = \"1101111\", k = 2)",
        "shortestBeautifulSubstring(s = '101', k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = '1110011111111111100111', k = 3)",
        "shortestBeautifulSubstring(s = \"011110101111110000\", k = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [3, 4, 5, 5, 3, 6])",
        "minimumRightShifts(nums = [4, 2, 3, 1])",
        "minimumRightShifts(nums = [2, 2, 2, 2, 2])",
        "minimumRightShifts(nums = [1, 2, 1, 3, 4])"
    ],
    "sample_294": [
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(\"001011\")",
        "minimumSteps(s = \"100101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10010\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"00011010\")",
        "minimumSteps(s = \"001111000101101\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"ddd\", s2 = \"ddd\", s3 = \"ddd\")",
        "findMinimumOperations(s1 = \"pqr\", s2 = \"pq\", s3 = \"pq\")",
        "findMinimumOperations(s1 = \"mqp\", s2 = \"pxy\", s3 = \"zy\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"acdef\", s3 = \"abdef\")",
        "findMinimumOperations(s1 = \"azc\", s2 = \"abc\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"gaxc\", s2 = \"csbx\", s3 = \"gaxxxcsbx\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"abcdefghijklmnopqrstuvwxyz\")",
        "canMakeSubsequence(str1 = \"xbz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"adfc\")",
        "canMakeSubsequence(str1 = \"abe\", str2 = \"zd\")",
        "canMakeSubsequence(str1 = \"abcdefghijkl\", str2 = \"acdefghijkl\")",
        "canMakeSubsequence(str1 = \"zabb\", str2 = \"zxab\")"
    ],
    "sample_364": [
        "isGood(nums = [2,1,3])",
        "isGood(nums = [1,3,2])",
        "isGood(nums = [2, 1, 3])",
        "isGood(nums = [1,2,3,4,5,6,7,8])",
        "isGood(nums = [1, 4, 3, 2])",
        "isGood(nums = [3,1,5,2,4])",
        "isGood(nums = [3, 2, 5, 4, 1])",
        "isGood([5,1,3,4,2])",
        "isGood(nums=[1,2,4,2,3])",
        "isGood(nums=[1, 3, 4, 2, 6, 7, 8, 5])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 8)",
        "countPairs(nums = [1,2,3,4], target = 7)",
        "countPairs(nums = [3, 2, 1, 4, 5], target = 6)",
        "countPairs(nums=[3, 1, 2], target=4)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 9], moveTo = [9, 8])",
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [5, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8, 9], moveTo = [8, 6, 9, 5])",
        "relocateMarbles(nums = [8,9,5,6], moveFrom = [5,8], moveTo = [5,8])",
        "relocateMarbles(nums = [5, 6, 6, 8, 9, 9], moveFrom = [6, 8], moveTo = [5, 6])",
        "relocateMarbles(nums=[8,5,9,6], moveFrom=[9, 5], moveTo=[6, 8])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [2,7,9], moveTo = [2,4,5])",
        "relocateMarbles(nums = [5,6,7,8,9], moveFrom = [7, 5, 6], moveTo = [7, 9, 5])",
        "relocateMarbles(nums = [5, 4, 5, 6, 8, 6, 9], moveFrom = [4, 6, 8], moveTo = [9, 5, 6])",
        "relocateMarbles(nums = [5, 1, 8, 6, 4, 9], moveFrom = [1, 4, 7, 9], moveTo = [3, 5, 1, 10])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 1, 2, 2], target = 3)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 4)",
        "countPairs(nums = [1,2,3,4,5,6,7], target = 10)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3], target = 3)",
        "countPairs(nums = [1, 3, 5, 2], target = 4)",
        "countPairs(nums = [3,2,1,4], target = 5)",
        "countPairs(nums = [3,2,4,3], target = 6)",
        "countPairs(nums = [5, 10, 20, 15], target = 25)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1,2,2,1,1,3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 1, 1])",
        "minLengthAfterRemovals(nums = [3,3,3,3,3,3,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,3,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,3,2,1,3])",
        "minLengthAfterRemovals(nums = [4, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [1,1,2,2,1,1,2,1,2,2,2,1,1,2,1,2,1,2,1,2,2,2])"
    ],
    "sample_303": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abcaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccdd\")",
        "longestSemiRepetitiveSubstring(s = \"abaaaaa\")",
        "longestSemiRepetitiveSubstring(s=\"abcccde\")",
        "longestSemiRepetitiveSubstring(s = \"aabacbacb\")",
        "longestSemiRepetitiveSubstring(s = \"abacababcabb\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1=\"abc\", s2=\"bca\")",
        "canBeEqual(s1 = \"xy\", s2 = \"zy\")",
        "canBeEqual(s1=\"ba\", s2=\"nana\")",
        "canBeEqual(s1=\"abc\", s2=\"dca\")",
        "canBeEqual(s1 = \"atn\", s2 = \"cat\")",
        "canBeEqual(s1 = \"dsf\", s2 = \"fdf\")",
        "canBeEqual(s1 = \"sna\", s2 = \"saa\")",
        "canBeEqual(s1=\"g1a\", s2=\"a1g\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abab\", s2 = \"abab\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abcde\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"aaab\", s2 = \"aaab\", s3 = \"aaab\")",
        "findMinimumOperations(s1 = \"abababab\", s2 = \"abababab\", s3 = \"abababab\")",
        "findMinimumOperations(s1 = \"xzxzxz\", s2 = \"xzxzxz\", s3 = \"xzxzxz\")",
        "findMinimumOperations(s1 = \"xp\", s2 = \"yp\", s3 = \"xp\")",
        "findMinimumOperations(s1 = \"algo\", s2 = \"goal\", s3 = \"go\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,5,6,7], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,5,8], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,5,7], target = 4)",
        "lengthOfLongestSubsequence(nums=[3, 1, 4, 2, 5], target=10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 2], target = 1)",
        "lengthOfLongestSubsequence(nums = [10,1,2,3,4,5], target = 20)",
        "lengthOfLongestSubsequence(nums = [2, 5, 4, 6, 1, 7], target = 5)",
        "lengthOfLongestSubsequence(nums = [2,1,2,1,3,2,4,5,6,3,3,2,1,2,2,3,1,3,2,2,3,2,1,3,1,2,1], target = 1)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [1,2,3,4,5,6,7])",
        "minimumSum(nums = [2, 3, 5, 6])",
        "minimumSum(nums = [100, 1, 10, 1000])",
        "minimumSum(nums = [100, 2, 100, 10, 100])",
        "minimumSum(nums=[1,1,10,10,10,10])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"xyz\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\", \"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"xyz\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"ca\", \"bb\", \"ac\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"b\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"word\", \"word\"])",
        "minimizeConcatenatedLength(words = [\"ba\",\"ac\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"11100110\", k = 3)",
        "shortestBeautifulSubstring(s = '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"111001001\", k = 3)",
        "shortestBeautifulSubstring(s = \"111\", k = 1)",
        "shortestBeautifulSubstring(s = '10011', k = 3)",
        "shortestBeautifulSubstring(s = '1100111', k = 3)",
        "shortestBeautifulSubstring(s = \"1000100110\", k = 2)",
        "shortestBeautifulSubstring(s = '00011010', k = 3)",
        "shortestBeautifulSubstring(s = \"1010111111011111111101111111111010111111111011011111111111111111101111111110001111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"1011011011000110111100011111001011100100111011110011111100010011111101111110010111111011011010110010101111010111110001001111100010101101011010010111001101011000111011010011010111101100001011001011000001101101001000001111011110010011110100100000111011100011001111011111010101010111011100001111000001111111100100111110001111111110001011111011101111111100000010001110111101111100100000100110110101101101100101001101000011110001011001001110011110100001110110010100101000100001010100001000010110111100101010011110001100"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"aa\",\"bb\",\"ab\",\"ba\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"ba\",\"cd\",\"dc\",\"ef\",\"fe\",\"gh\",\"hg\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bc\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"hello\", \"world\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"ab\",\"a\",\"b\"])",
        "minimizeConcatenatedLength(words=[\"ca\",\"cc\",\"cd\"])",
        "minimizeConcatenatedLength(words = [\"ca\",\"bc\",\"c\",\"d\"])",
        "minimizeConcatenatedLength(words = [\"bca\", \"a\", \"bca\", \"a\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"xyz\",\"xzy\",\"zyx\",\"zxy\",\"azx\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 9, m = 3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray([1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,1])",
        "alternatingSubarray(nums = [1,2,3,3,4,5,6,7])",
        "alternatingSubarray([2,3,4,5,6,7])",
        "alternatingSubarray(nums = [1,2,3,5,7,9])",
        "alternatingSubarray(nums=[2,2,2,3,4])",
        "alternatingSubarray(nums = [2,3,5,10,7,4,15,12,9])",
        "alternatingSubarray(nums = [1,1,2,3,2,4])",
        "alternatingSubarray(nums = [3, 1, 2, 1, 3])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength([1, 2, 3, 4, 5])",
        "findMaximumLength([10,9,2,5,3,7,101,18])",
        "findMaximumLength(nums = [2,4,5,10])",
        "findMaximumLength(nums = [-1,2,1])",
        "findMaximumLength(nums = [2,3,4,5,6,7,8])",
        "findMaximumLength(nums = [1,3,1,1,2])",
        "findMaximumLength(nums = [1,0,0,1,1,0,0,1,1,1])",
        "findMaximumLength(nums = [-2, -1, -3, 3, 0])"
    ],
    "sample_302": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"cdab\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbba\")",
        "canBeEqual(s1 = \"atb\", s2 = \"bta\")",
        "canBeEqual(s1 = \"abc\", s2 = \"xzy\")",
        "canBeEqual(s1 = \"15\", s2 = \"10\")",
        "canBeEqual(s1 = \"badc\", s2 = \"dbca\")",
        "canBeEqual(s1 = \"0123\", s2 = \"0123\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 1, 1])",
        "minimumCoins(prices=[1, 2])",
        "minimumCoins(prices = [1, 1, 1, 2])",
        "minimumCoins([1,1,2])",
        "minimumCoins(prices = [1,2,1])",
        "minimumCoins([1, 2, 3, 4, 5, 6, 7])",
        "minimumCoins(prices = [2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [2, 4, 3, 1, 1, 1])"
    ],
    "sample_378": [
        "minimumSeconds(A = [4,2,5,3])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5])",
        "minimumSeconds([0, 1])",
        "minimumSeconds(A = [1,2,3,1])",
        "minimumSeconds(A = [2, 3, 1, 5])",
        "minimumSeconds(A = [2,3,1,4,5])",
        "minimumSeconds([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "minimumSeconds(A=[0, 2, 4, 6, 8])",
        "minimumSeconds([2, 5, 1, 3, 4, 7, 6, 1])",
        "minimumSeconds(A = [2, 3, 4, 6, 2, 1, 3, 5, 2, 1, 4, 3])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"lc\", \"cl\", \"gg\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"a\"])",
        "maximumNumberOfStringPairs(words=[\"ab\",\"ba\",\"cc\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"bb\",\"aa\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [0, 1, 2], nums2 = [1, 2, 3])",
        "minSum(nums1 = [2, 0], nums2 = [4, 1])",
        "minSum(nums1 = [1, 2, 2], nums2 = [1, 2, 5])",
        "minSum(nums1 = [0, 0, 1, 0], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [2, 2, 0], nums2 = [1, 2, 0])",
        "minSum(nums1=[6, 9, 3, 8], nums2=[1, 1, 2, 2])",
        "minSum(nums1=[2, 1, 1], nums2=[1, 0, 0])",
        "minSum(nums1 = [5, 2, 3, 0, 0], nums2 = [3, 5, 100, 10, 10])",
        "minSum(nums1 = [1, 2, 2, 2, 1, 2], nums2 = [0, 1, 2, 2, 1, 2])",
        "minSum(nums1 = [5, 2, 3, 1, 4, 3, 1], nums2 = [4, 3, 2, 2, 2, 1, 5])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"cde\", \"efg\"], x = \"de\")",
        "findWordsContaining(words = [\"hello\", \"hey\", \"hi\", \"there\"], x = \"he\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\", \"grape\", \"mango\"], x = \"ana\")",
        "findWordsContaining(words = [\"banana\", \"car\", \"dog\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"are\", \"you\", \"a\", \"good\", \"boy\"], x = \"a\")",
        "findWordsContaining(words = [\"Hello\", \"world\", \"there\", \"!\"], x = \"\")",
        "findWordsContaining(words = [\"coder\", \"bob\", \"apple\", \"dogs\"], x = \"bob\")"
    ],
    "sample_397": [
        "maxSum(nums = [1,2,3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 3, k = 3)",
        "maxSum(nums=[1,2,3], m=2, k=2)",
        "maxSum(nums = [5,2,2,7,3,7,9,0], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 4, 3, 2], m = 2, k = 3)",
        "maxSum(nums=[3, 4, 1, 3, 5, 6, 2, 2, 1, 5], m=2, k=3)",
        "maxSum(nums = [10, 10, 6, 7, 4], m = 3, k = 3)",
        "maxSum(nums = [2,3,3,1,2,3,2,1,3,2,3,2,1,3,1], m = 3, k = 5)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6], m=3, k=2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [3, 2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 3], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [3, 3])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,3], moveTo = [2,3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [3, 2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [2], moveTo = [3])",
        "relocateMarbles(nums = [2, 1, 2], moveFrom = [2, 1], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2, 4], moveTo = [3, 3, 4])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [4,3,2,1])",
        "minimumRightShifts(nums = [4,3,2,1])",
        "minimumRightShifts(nums = [1,2,3,4,5,6])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [3, 4, 5, 2, 1])",
        "minimumRightShifts(nums = [2, 5, 4, 3, 1])",
        "minimumRightShifts(nums = [1, 2, 4, 4, 7, 7, 8, 6, 8, 9])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices=[1, 2, 2], money=3)",
        "buyChoco(prices = [1, 3, 2], money = 4)",
        "buyChoco(prices = [4, 2, 1], money = 10)",
        "buyChoco(prices = [20, 30, 40, 50], money = 100)",
        "buyChoco(prices = [2, 4, 6, 8], money = 10)",
        "buyChoco(prices = [100, 50, 40, 90, 150, 1000], money = 500)",
        "buyChoco(prices = [20, 15, 10, 5], money = 50)",
        "buyChoco(prices = [2, 5, 2, 8], money = 15)",
        "buyChoco(prices = [3, 1, 5, 4, 3], money = 5)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1], target = 8)",
        "lengthOfLongestSubsequence(nums = [3, 5, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 1, 1, 1, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [2, 5, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 2, 3, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [5, 2, 1, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 4, 5, 7, 8, 9], target = 23)",
        "lengthOfLongestSubsequence(nums = [5, 3, 6, 4, 9], target = 9)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abccd\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"abbabb\")",
        "longestSemiRepetitiveSubstring(s = \"ababababababa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabc\")",
        "longestSemiRepetitiveSubstring(s = \"mommy\")",
        "longestSemiRepetitiveSubstring(s = \"acabababa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaxbbaa\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"ananas\"], x = \"ana\")",
        "findWordsContaining(words = [\"ab\", \"bc\", \"cd\"], x = \"b\")",
        "findWordsContaining(words = [\"abc\", \"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"a\", \"apple\", \"apples\"], x = \"ap\")",
        "findWordsContaining(words = [\"apple\", \"strawberry\", \"banana\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"banana\", \"melon\"], x = \"a\")",
        "findWordsContaining(words = [\"the\", \"cake\", \"is\", \"a\", \"lie\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\", \"fruit\", \"grapes\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"duck\", \"cats\"], x = \"t\")",
        "findWordsContaining(words=[\"hot\", \"hotel\", \"cold\"], x=\"ho\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers([\"prev\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"5\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"5\", \"6\", \"prev\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"aabb\", s2 = \"abab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbda\")",
        "canBeEqual(s1 = \"badc\", s2 = \"badd\")",
        "canBeEqual(s1 = \"aacb\", s2 = \"ccba\")",
        "canBeEqual(s1 = \"bca\", s2 = \"baa\")",
        "canBeEqual(s1 = \"13\", s2 = \"31\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"bcdeaf\")",
        "canBeEqual(s1 = \"bank\", s2 = \"anbn\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")"
    ],
    "sample_255": [
        "minimumSum(nums = [3,6,2,3])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [4,1,5,20,3])",
        "minimumSum(nums = [1,2,4,8,16])",
        "minimumSum(nums=[4,1,5,20,3])",
        "minimumSum(nums = [4,3,2,5,6])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "minimumSum(nums = [3,6,5,2,1,8])",
        "minimumSum([4,2,1,2,1,3])",
        "minimumSum(nums = [2,7,2,1,8,1,8])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 8, 10], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4], target=5)",
        "lengthOfLongestSubsequence(nums = [3,4,7], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 1, 3, 1], target = 4)",
        "lengthOfLongestSubsequence(nums = [3,4,5,7], target = 10)",
        "lengthOfLongestSubsequence(nums = [5, 1, 2, 6, 3], target = 8)",
        "lengthOfLongestSubsequence(nums = [5, 4, 3, 2], target = 12)",
        "lengthOfLongestSubsequence(nums = [5, 10, 3, 6, 4, 1], target = 3)"
    ],
    "sample_368": [
        "sortVowels('lYmpH')",
        "sortVowels(\"lYmpH\")",
        "sortVowels(s = \"MyPhl\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s=\"YmphL\")",
        "sortVowels('mPhyL')",
        "sortVowels(s = \"LyMpH\")",
        "sortVowels('HympL')",
        "sortVowels('mPlyH')",
        "sortVowels(s = \"MyPhpL\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "matrixSum([[0,1],[0,1]])",
        "matrixSum(nums = [[0, 1, 2], [3, 4, 5], [6, 7, 8]])",
        "matrixSum(nums = [[1], [3], [2]])",
        "matrixSum(nums=[[1, 1], [1, 1]])",
        "matrixSum([[2,0],[1,0]])",
        "matrixSum(nums = [[1,2],[100,101]])",
        "matrixSum(nums = [[0, 0, 0], [1, 1, 1], [1, 1, 0]])",
        "matrixSum([[0, 1, 2],[0, 1, 0],[0, 0, 2]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [-1, -2, -3])",
        "maximumTripletValue(nums = [0, 1, 0])",
        "maximumTripletValue(nums = [0, -1, 2, 3])",
        "maximumTripletValue(nums = [2, 3, 2, 4])",
        "maximumTripletValue(nums = [1, 5, 6, 2])",
        "maximumTripletValue(nums = [4, 10, 15, 20])",
        "maximumTripletValue(nums = [2, 4, 0, 1, 2])",
        "maximumTripletValue(nums = [100, 1, 50])",
        "maximumTripletValue(nums = [2, 3, 4, 1, 5, 1])",
        "maximumTripletValue(nums=[10, 20, 1, 30, 100, 40, 1000])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [4,2,5,3])",
        "alternatingSubarray(nums = [4,2,5,3])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [2, 3, 4])",
        "alternatingSubarray(nums = [2,3,5,4,6])",
        "alternatingSubarray([1, 3, 2, 2, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 1, 3, 4, 3, 5])",
        "alternatingSubarray(nums = [2,1,4,3,6,5])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4, 4, 4])",
        "alternatingSubarray([2, 3, 4, 3, 4])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiou\", k = 5)",
        "beautifulSubstrings(s = \"aba\", k = 5)",
        "beautifulSubstrings(s = \"aeiouu\", k = 6)",
        "beautifulSubstrings(s=\"aeiou\", k=5)",
        "beautifulSubstrings(s = \"aeiouu\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiou\", k = 54)",
        "beautifulSubstrings(s = \"aeiou\", k = 30)",
        "beautifulSubstrings(s = \"aabbc\", k = 3)",
        "beautifulSubstrings(s=\"aawseoaeiouuaeoaiouuaeiou\", k=20)"
    ],
    "sample_449": [
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"101\")",
        "minChanges(s = \"11110000\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"aaaabbb\")",
        "minChanges(s=\"00110\")",
        "minChanges(\"0100101\")",
        "minChanges(\"zxyz\")",
        "minChanges(\"abbccddeff\")",
        "minChanges(\"111110110001101110001111\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"11101\")",
        "minimumSteps(\"101\")",
        "minimumSteps(\"100101\")",
        "minimumSteps(s = \"100\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(\"10101\")",
        "minimumSteps(s = \"1110100\")",
        "minimumSteps(s = \"1010000\")",
        "minimumSteps(s = \"101111\")",
        "minimumSteps(s = \"000101101\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = ['7868190130M7522', '5303914400F9211', '9273338290F4010'])",
        "countSeniors(details = ['7868190130M7522', '5303914400F9211', '9273338290F4010'])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,3,4])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [2,1,3,3,2,2,1])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,4,5,5,5,5,6,6,6,7,7,8,8,8])",
        "minGroupsForValidAssignment([3,2,5,2,1,5,3,4,1,3,3,3,5])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1,1],[2,2],[3,3],[4,4]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [1, 3], [3, 1], [2, 3], [3, 2]], k = 2)",
        "countPairs(coordinates = [[1,1],[1,3],[3,1],[3,3],[2,2]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15]], k = 10)",
        "countPairs(coordinates = [[1, 0], [0, 0], [1, 1], [0, 1], [0, 2], [1, 2]], k = 1)",
        "countPairs(coordinates = [[1,1],[1,1],[0,0],[0,0],[0,0],[1,1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [0, 1], [1, 2], [2, 1], [2, 2], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates=[[1,1], [1,1], [2,3], [3,3], [3,3], [3,3], [4,5], [5,5], [5,5], [6,7]], k=3)",
        "countPairs(coordinates = [[1,2],[3,1],[4,2],[5,0],[6,1],[1,0],[2,1]], k = 4)",
        "countPairs(coordinates = [[3, 0], [3, 1], [2, 1], [2, 0], [0, 1], [1, 2], [1, 3], [1, 0], [0, 2]], k = 1)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 4)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7], m=3, k=3)",
        "maxSum(nums = [0,0,0,0,0,0,0,0,0,0], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 7], m = 2, k = 3)",
        "maxSum(nums=[2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,",
        "maxSum(nums = [5, 4, 3, 4, 2, 1, 5, 3, 2], m = 3, k = 3)",
        "maxSum(nums=[4, 1, 4, 5, 1, 2, 0, 1, 2, 4], m=2, k=3)"
    ],
    "sample_452": [
        "minChanges(s = \"0100\")",
        "minChanges(s = \"0101\")",
        "minChanges(s = \"010101\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"101010\")",
        "minChanges(s = \"01010101\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"xxoox\")",
        "minChanges(\"baxbx\")",
        "minChanges(\"abcde\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [5,6,4,3,1,2], nums2 = [6,3,3,1,4,5,6])",
        "minOperations(nums1 = [1, 2, 5, 4], nums2 = [5, 6, 3, 2])",
        "minOperations(nums1 = [3, 4, 1, 2], nums2 = [1, 3, 4, 2])",
        "minOperations(nums1 = [1, 1, 5], nums2 = [2, 2, 4])",
        "minOperations(nums1 = [1,2,4,4,1], nums2 = [1,1,1,2,1])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"111\", k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"11111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 1)",
        "shortestBeautifulSubstring(s = '11111', k = 3)",
        "shortestBeautifulSubstring(s=\"111111\", k=2)",
        "shortestBeautifulSubstring(s = \"100101110\", k = 2)",
        "shortestBeautifulSubstring(s='111', k=1)",
        "shortestBeautifulSubstring(s
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maximumTripletValue([1, 2, 3, 4])",
        "maximumTripletValue([1,2,3,4,5,6,7,8,9,10])",
        "maximumTripletValue(nums = [3,1,2,3])",
        "maximumTripletValue(nums=[1,3,3,3,2])",
        "maximumTripletValue([1, 3, 2, 8])",
        "maximumTripletValue([10, 7, 1, 8, 9])",
        "maximumTripletValue(nums = [2,1,-3,4,-2])",
        "maximumTripletValue(nums = [2, 4, 2, 1, 2, 2, 1, 2, 2, 4, 2])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 3, limit = 4)",
        "distributeCandies(n = 3, limit = 1)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums=[1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums=[3,3,3,3,3,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums=[2,1,3,5,6,3,4,2,1])",
        "minGroupsForValidAssignment(nums = [2,1,3,5,2,1,3,5,2,1,3,5,2,1,3,5,2,1,3,5])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 0, 1, 4, 2, 1], nums2 = [1, 4, 0, 5, 3, 1])",
        "minSum(nums1 = [1, 3], nums2 = [0, 4])",
        "minSum(nums1 = [2, 1], nums2 = [5, 0])",
        "minSum(nums1 = [1,2,0], nums2 = [2,3,0])",
        "minSum(nums1 = [3,2,2], nums2 = [3,2,1])",
        "minSum(nums1 = [1, 2, 0, 4], nums2 = [3, 2, 5])",
        "minSum(nums1 = [1, 1, 3], nums2 = [2, 2, 2, 4])",
        "minSum(nums1 = [1, 2, 1, 2], nums2 = [4, 3, 2, 1])",
        "minSum(nums1 = [2, 3, 5, 0], nums2 = [2, 2, 3, 0])"
    ],
    "sample_453": [
        "minChanges(s = \"0100\")",
        "minChanges(s = \"0100\")",
        "minChanges(s = \"10101\")",
        "minChanges(s = \"010101\")",
        "minChanges(s = \"01101\")",
        "minChanges(s = \"baabb\")",
        "minChanges(s = \"01001011\")",
        "minChanges(s = \"111110\")",
        "minChanges(\"RGBG\")",
        "minChanges(\"acac\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"aieou\", k = 5)",
        "beautifulSubstrings(s=\"aiueo\", k=3)",
        "beautifulSubstrings(s=\"abc\", k=2)",
        "beautifulSubstrings(s=\"aa\", k=4)",
        "beautifulSubstrings(s = \"azm\", k = 2)",
        "beautifulSubstrings(s = \"ayyayyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s=\"aeiouu\", k=2)",
        "beautifulSubstrings(s = \"aaeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoaeiouuoae",
        "beautifulSubstrings(s = \"aeiaaiooiiauuoueeeaeiioooaauuaeiuaeiouaaiaeuoueiuou\", k = 5)",
        "beautifulSubstrings(s = \"aaebeeoaeaioooaau\", k = 3)"
    ],
    "sample_369": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s='YmplH')",
        "sortVowels(s='YmplH')",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"YmphL\")",
        "sortVowels(s = \"mPhYL\")",
        "sortVowels('mYphL')"
    ],
    "sample_375": [
        "minimumSeconds(nums = [3, 2, 1, 2, 1, 7])",
        "minimumSeconds(nums = [2, 2, 2])",
        "minimumSeconds(nums = [5, 5, 5, 5, 5])",
        "minimumSeconds(nums = [2,1,3,1,2,2,1])",
        "minimumSeconds(nums = [1,5,0,3,4])",
        "minimumSeconds(nums = [3,4,7,5,2])",
        "minimumSeconds(nums = [2, 3, 2, 4])",
        "minimumSeconds(nums = [7, 1, 3, 4, 2, 6, 5])",
        "minimumSeconds(nums = [2,1,4,5,2])",
        "minimumSeconds(nums = [1,5,3,1,4,5])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [1, 1, 1, 1, 1])",
        "minimumSum(nums = [5, 3, 4, 6, 7])",
        "minimumSum(nums = [5, 6, 2, 3, 1, 7])",
        "minimumSum(nums = [2, 2, 5, 3, 1, 6])",
        "minimumSum(nums = [1, 3, 5, 4, 9, 6])",
        "minimumSum(nums = [2, 9, 1, 20, 10])",
        "minimumSum(nums = [1, 2, 3, 10, 14, 20])",
        "minimumSum(nums = [6,1,5,9,7,10,3,11])",
        "minimumSum(nums = [6,3,1,5,2,1,10,2,9])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 5)",
        "minOperations(nums=[5,19,8,1], k=32)",
        "minOperations(nums = [3, 2, 1, 4, 5], k = 4)",
        "minOperations(nums = [1, 2, 3, 5, 6, 7, 8], k = 2)",
        "minOperations(nums = [1, 3, 3, 3, 4], k = 5)",
        "minOperations(nums = [7, 7, 7, 7, 16, 16, 16, 16, 16, 7, 7, 7, 7, 16, 16, 16, 16], k = 4)",
        "minOperations(nums = [2,4,5,8,9,10,17,20,25,30], k = 100)",
        "minOperations(nums = [8,14,10,1,2,19,9,7,6,4], k = 16)",
        "minOperations(nums = [7, 5, 6, 12, 1, 14, 15, 17, 2, 18, 8, 3, 19, 11, 4, 13, 16, 10, 9], k = 7)",
        "minOperations(nums = [21247,14349,7056,14639,12189,19948,14050,19759,1783,11163,10672,19571,1159,1992,18021,9129,11321,13115,13029,7607,1551,18140,18330,12240,16471,6094,10891,10195,1540,11750,14632,15277,18871,1576,1897,15528,19532,18092,1115,14644,1133,13730,15393,14429,13240,1793,14461,13166,1587,1901,15853,15387,13600,10240,15630,15015,10280,10935,10643,18496,12765,10746,10766,10879,17968,1395,19923,11122,19978,13214,18649,16376,19225,11194,15191,12369,19410,12314,11440,11577,18608,14368,12572,10364,10740,10018,16104,17674,14115,16872,16495,17151,12058,19653,12311,11831,11047,17948,18143,10828,17037,15154,16365,16148,15789,10050,"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 1, 1, 1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(A = [1,2,3,4,5], m = 3, k = 4)",
        "maxSum(A = [2, 1, 1, 1, 1, 1], m = 3, k = 2)",
        "maxSum(A = [2, 4, 1, 4, 2, 4], m = 3, k = 3)",
        "maxSum(A = [1, 2, 1, 1, 1, 1, 2, 1], m = 1, k = 4)",
        "maxSum(A=[1, 2, 3, 1, 3, 4], m=3, k=3)",
        "maxSum(A = [1,1,2,1,2,2,3,1,2], m = 2, k = 2)",
        "maxSum(A = [1, 2, 2, 3, 1, 2, 3, 1, 2, 3, 3], m = 3, k = 10)",
        "maxSum(A = [2, 3, 5, 0, 5, 1, 2, 4], m = 2, k = 2)"
    ],
    "sample_293": [
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(\"0100\")",
        "minimumSteps(s = \"10110101\")",
        "minimumSteps(s = \"1011010\")",
        "minimumSteps(\"00010\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [5,10,2,6])",
        "maxSubarrays(nums = [12, 9, 7, 15])",
        "maxSubarrays(nums = [5, 1, 4, 3, 2])",
        "maxSubarrays(nums = [16,8,4,2,1])",
        "maxSubarrays(nums = [3, 1, 5, 6, 1])",
        "maxSubarrays(nums = [2, 3, 2, 4, 3])",
        "maxSubarrays(nums = [4,3,2,1,12])",
        "maxSubarrays(nums = [5,1,1,4,2,3,4])",
        "maxSubarrays(nums = [2,1,3,1,4,2,6,3])"
    ],
    "sample_319": [
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices = [10, 10, 10, 10], money = 50)",
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 6)",
        "buyChoco(prices = [10, 20, 5], money = 10)",
        "buyChoco(prices = [200, 150, 50], money = 350)",
        "buyChoco(prices = [10, 20, 20, 20, 30], money = 40)",
        "buyChoco(prices = [200, 100, 500, 10], money = 1000)"
    ],
    "sample_290": [
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s=\"001011\")",
        "minimumSteps(\"100101\")",
        "minimumSteps(\"01001\")",
        "minimumSteps(s = \"111000111\")",
        "minimumSteps(s = \"0000111001\")",
        "minimumSteps(s=\"0101000010\")",
        "minimumSteps(\"101000111010110\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums = [3,2,3,2,2,2])",
        "minLengthAfterRemovals(nums = [1,2,2,2,2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [3,3,3,1,2,3,2,2,2])",
        "minLengthAfterRemovals([1, 3, 2, 2, 2, 2])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [5, 6, 1], k = 3)",
        "minOperations(nums = [1, 1, 1, 2, 2], k = 1)",
        "minOperations(nums = [3, 4, 3, 2, 3], k = 3)",
        "minOperations(nums = [2, 5, 1, 8], k = 2)",
        "minOperations(nums = [2, 6, 3, 5, 1], k = 7)",
        "minOperations(nums = [4,3,2,3,1], k = 4)",
        "minOperations(nums = [2,1,2,1,1,2,2,1], k = 3)",
        "minOperations(nums = [2, 3, 3, 1, 4, 5, 6], k = 4)",
        "minOperations(nums = [10, 1, 2, 11], k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 3, 4, 2, 2])",
        "isGood(nums = [1, 3, 4, 2, 2])",
        "isGood(nums = [1,3,2])",
        "isGood([4, 2, 3, 1, 5])",
        "isGood(nums = [1,3,2,4,5,2])",
        "isGood(nums = [2, 1, 3, 3, 1])",
        "isGood(nums = [2, 5, 2, 4, 1])",
        "isGood(nums = [2,4,5,5,6,6])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood([2, 1, 3, 2])"
    ],
    "sample_325": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(789)",
        "isFascinating(7512)"
    ],
    "sample_365": [
        "isGood(nums = [3,4,5,1,2])",
        "isGood(nums = [1,1])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood([1,1,2,3])",
        "isGood(nums = [1,1,1,1,1,1,1,1,1,1])",
        "isGood(nums = [3,4,2,5,1])",
        "isGood(nums = [4,4,4,4,4])",
        "isGood(nums = [3,2,3,2,1])",
        "isGood(nums=[1,2,1,1,1,1,1,1])",
        "isGood(nums = [2,4,6,1,6,2,7,4,9,10])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1])",
        "minimumSeconds(nums = [0,3,7,2,5,8,4,6,0,1])",
        "minimumSeconds(nums = [0, 1, 0])",
        "minimumSeconds(nums = [3,4,5])",
        "minimumSeconds(nums = [2,4,1,2,7,8])",
        "minimumSeconds([1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1, 2, 3, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [1, 3, 1, 2, 3, 1, 1])",
        "minimumSeconds(nums = [0, 1, 0, 2, 2, 3, 2, 0])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [3, 4, 5, 5, 3, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 5, 4])",
        "minimumRightShifts([1, 1, 1, 2])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [3, 4, 5, 1, 2])",
        "isGood(nums = [2,1,4,3])",
        "isGood(nums = [1, 3, 2, 4])",
        "isGood(nums = [1,2,3,4,4])",
        "isGood(nums = [3,1,2])",
        "isGood([1,3,4,2])",
        "isGood([3,1,5,2,4])",
        "isGood([5, 2, 3, 1, 4])",
        "isGood(nums = [1,2,3,4,5,6,7,10,9])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,3,5,7,9], nums2 = [3,3,3,3,3])",
        "minOperations(nums1 = [1,2,1], nums2 = [2,1,2])",
        "minOperations(nums1 = [1,1,4,2,3], nums2 = [5,3,2,2,1])",
        "minOperations(nums1 = [3, 1, 10], nums2 = [3, 10, 3])",
        "minOperations(nums1 = [5, 2, 3, 4, 1], nums2 = [4, 5, 2, 3, 1])",
        "minOperations(nums1 = [5, 3, 4, 1], nums2 = [3, 4, 6, 3])",
        "minOperations(nums1 = [6,7,8,10,20], nums2 = [6,10,10,10,10])",
        "minOperations(nums1 = [2,3,5,8,11], nums2 = [2,5,8,11,14,18])",
        "minOperations(nums1 = [1,2,11,6,19], nums2 = [2,12,5,16,15])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = '11', k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 4)",
        "shortestBeautifulSubstring(s = \"11111111\", k = 8)",
        "shortestBeautifulSubstring(s = \"11111\", k = 3)",
        "shortestBeautifulSubstring(s = \"111000\", k = 2)",
        "shortestBeautifulSubstring(s = '11111111', k = 7)",
        "shortestBeautifulSubstring(s=\"11100001\", k=3)",
        "shortestBeautifulSubstring(s=\"11\", k=2)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 1, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1,2,2,1,2,2])",
        "minGroupsForValidAssignment(nums = [1, 1, 3, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [1,1,2,1,2,2,3,3,3,3,2,3,3,3,3,1,1,1,1,3,3,3,3,1,2,3,1,3,1,1,3,1,3,2,2,2,3,1,3,2,2,2,3,1,3,3,2,1,3,2,3,2,2,2,1,2,2,1,2,1,3,1,1,1,2,2,2,3,2,2,1,2,1,3,1,2,3,1,3,1,2,2,2,2,2,3,1,2,2,1,2,3,1,3,1,3,3,3,1,3,2,3,1,3,2,1,2,1,3,1,3,1,1,3,1,1,3,3,1,1,3,2,2,1,1,3,2,1,1,3,1,1,1,2,1,3,3,1,2,2,3,2,3,2,2,1,2,2,1,2,3,3,2,2,2,1,2,3,2,1,1,3,2,2,2,2,3,1,3,3,2,1,3,2,1,2,1,2,3,3,1,2,3,2,2,1,2,2,1,3,3,1,2,2,2,2,1,3,3,2,1,2,2,2,1,3,2,1,2,1,2,1,1,1,1,1,1,3,2,1,2,3,2,2,2,1,1,2,3,2,2,1,2,1,2,3,1,3,2,1,2,2,1,3,1,2,2,1,2,2,2,1,2,2,1,1,2,2,2,2,1,2,2,2,3,3,1,2,1,2,1,1,"
    ],
    "sample_289": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"111011\")",
        "minimumSteps(s = \"000111\")",
        "minimumSteps(s = \"10111\")",
        "minimumSteps(s = \"01000\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 5], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 8)",
        "lengthOfLongestSubsequence(nums = [5, 3, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [4, 2, 3, 1, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [4, 3, 2, 3, 5, 2, 1], target = 4)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums=[3,1,2,4,5])",
        "minimumSum(nums = [2,1,3,2])",
        "minimumSum(nums = [2,3,4,5,6])",
        "minimumSum(nums = [1,2,3,1,2,3])",
        "minimumSum(nums = [9,8,7,6,5,4,3,2,1])",
        "minimumSum(nums = [1,1,2,1,3])",
        "minimumSum(nums = [4,2,2,2])",
        "minimumSum(nums = [4, 2, 3, 2, 5])",
        "minimumSum(nums = [100,200,50,2,20,10])"
    ],
    "sample_398": [
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [2,2,2,2,5,5,5,8], m = 3, k = 4)",
        "maxSum(nums=[1, 2, 3, 1, 2, 3], m=3, k=3)",
        "maxSum(nums = [1, 4, 2, 3, 1], m = 2, k = 3)",
        "maxSum(nums = [1,0,0,1,1,1], m = 3, k = 2)",
        "maxSum(nums = [1, 4, 2, 3, 1, 4], m = 1, k = 2)",
        "maxSum(nums = [3, 3, 2, 2, 1], m = 3, k = 1)",
        "maxSum(nums = [2,3,5,2,7,5,2], m = 3, k = 4)",
        "maxSum(nums = [4,5,3,2,6,7], m = 2, k = 2)",
        "maxSum(nums = [1,2,1,4,5,1,1,3,3,3], m = 2, k = 3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ababc\", s2 = \"abab\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apples\", s3 = \"mango\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"qwert\", s3 = \"qwerty\")",
        "findMinimumOperations(s1=\"cab\", s2=\"cdab\", s3=\"cdab\")",
        "findMinimumOperations(s1 = \"aaabbbb\", s2 = \"abbbbbb\", s3 = \"abb\")",
        "findMinimumOperations(s1 = \"ed\", s2 = \"xz\", s3 = \"edxz\")",
        "findMinimumOperations(s1 = \"megha\", s2 = \"meghana\", s3 = \"megh\")",
        "findMinimumOperations(s1 = \"axb\", s2 = \"aqxb\", s3 = \"axqbx\")"
    ],
    "sample_427": [
        "minOperations(nums = [1,2,3,4])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations([1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 2, 2, 2, 3])",
        "minOperations(nums=[1,2,3,4,5,6,7,8,9])",
        "minOperations(nums = [1,2,3,2,1,3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 1, 3])",
        "minOperations([3,3,4,2,4,4,2,4,4])",
        "minOperations(nums = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5])",
        "minOperations(nums = [1,1,2,2,2,2,2,2,1,1,2,2,2,2,2,2,1,1,2,2,2,2,2,2])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [2, 5, 3, 1])",
        "minimumCoins(prices = [2, 1, 3])",
        "minimumCoins(prices = [2, 5, 6, 8])",
        "minimumCoins(prices = [1, 1, 1])",
        "minimumCoins(prices = [3, 4, 1])",
        "minimumCoins([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [3,1,2,1,2])",
        "minimumCoins(prices=[2,2,3,1,1,4,4,4])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [2,1,3,1,2,2,3,3])",
        "minimumSeconds([1])",
        "minimumSeconds(nums = [3,3,3])",
        "minimumSeconds([2,1,3,5,6,4,7])",
        "minimumSeconds([2,1,3,1,2,2,3,3])",
        "minimumSeconds(nums = [1, 2, 3, 2, 2, 1])",
        "minimumSeconds(nums = [5,4,2,2,2,10,10,10])",
        "minimumSeconds([6, 6, 6, 6, 6])",
        "minimumSeconds(nums = [4, 3, 4, 4, 4, 2, 4])"
    ],
    "sample_448": [
        "minChanges(s = \"0100\")",
        "minChanges(s = \"0100\")",
        "minChanges(s = \"aabb\")",
        "minChanges(\"aabb\")",
        "minChanges(\"banana\")",
        "minChanges(s = \"aaaabbbb\")",
        "minChanges(s = \"0101010\")",
        "minChanges(s = \"011110\")",
        "minChanges(s = \"0111110\")",
        "minChanges(s = \"11001011\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 5, 1, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [8, 1, 5, 3, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 3, 8, 5, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 8, 9, 3, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [4, 3, 1, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 5, 3, 9, 8], limit = 5)",
        "lexicographicallySmallestArray(nums = [3, 5, 8, 9, 1, 10], limit = 2)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,1,1])",
        "sumCounts(nums = [1,1,1,1])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts([1,2,3])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1,3,2,1,2])",
        "sumCounts(nums = [1,1,1,1,2,2,2,2,3,3,3,3])",
        "sumCounts(nums = [1,1,1,2,2,1,3,1,2,1])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue([1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maximumTripletValue(nums = [2, 2, 2])",
        "maximumTripletValue(nums = [3, 1, 6, 4, 5, 2])",
        "maximumTripletValue(nums = [1, 5, 10, 2])",
        "maximumTripletValue(nums = [2,0,2,1,4,7])",
        "maximumTripletValue([1, 10, 1, 1, 1, 1, 1, 1, 1, 10])",
        "maximumTripletValue(nums = [10, 8, 9, 12, 8, 2, 10, 8, 14, 9])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 10)",
        "beautifulSubstrings(s = \"baa\", k = 2)",
        "beautifulSubstrings(s=\"aba\", k=2)",
        "beautifulSubstrings(s=\"aeiou\", k=1)",
        "beautifulSubstrings(s = \"abacaba\", k = 1)",
        "beautifulSubstrings(s = \"azerdii\", k = 10)",
        "beautifulSubstrings(s = \"xyyaa\", k = 2)",
        "beautifulSubstrings(s = \"geese\", k = 5)",
        "beautifulSubstrings(s = \"azeea\", k = 3)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4,5], target = 8)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 5)",
        "countPairs(nums = [2,3,3,4,6,9], target = 6)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], target = 8)",
        "countPairs(nums = [1, 5, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 4, 8], target = 5)",
        "countPairs(nums=[1,2,2,2,3,4], target=5)",
        "countPairs(nums = [3, 5, 4, 8, 10], target = 10)",
        "countPairs(nums = [4,2,3,5,1,6,7,8,9], target = 10)",
        "countPairs(nums = [2, 1, 4, 12, 3], target = 5)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n = 15, limit = 4)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(15, 15)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,1,1,1,1,1,1], nums2 = [6])",
        "minOperations(nums1 = [1,4,3,2], nums2 = [1,2,3,4])",
        "minOperations(nums1 = [6, 3, 3, 2], nums2 = [5, 4, 2, 2])",
        "minOperations(nums1 = [3,2,4], nums2 = [1,2,3,4])",
        "minOperations(nums1 = [3,4,6,8], nums2 = [2,3,5,8])",
        "minOperations(nums1 = [4, 3, 4], nums2 = [2, 1, 1, 4])",
        "minOperations(nums1 = [5,3,1,1,1,1,1,1,1,1], nums2 = [2,1,4,1,4,4,1,1,5,4])"
    ],
    "sample_426": [
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1,1,2,2,2,2])",
        "minOperations([1,2,3,4,5,6])",
        "minOperations([2, 2, 3, 3, 2, 4, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "minOperations(nums = [1, 1, 3, 3, 3, 4])",
        "minOperations(nums = [1, 2, 3, 5, 6, 7, 8])",
        "minOperations(nums=[3,3,3,3,3,3])",
        "minOperations([1, 2, 4, 6, 7, 8, 10, 12])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"11011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 1)",
        "shortestBeautifulSubstring(s = \"0110\", k = 1)",
        "shortestBeautifulSubstring(s = \"11011111\", k = 2)",
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101111\", k = 2)",
        "shortestBeautifulSubstring(s = '101100110', k = 3)",
        "shortestBeautifulSubstring(s='11111', k=3)",
        "shortestBeautifulSubstring(s = '0110110', k = 2)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds(nums = [3,2,1,2,1,7])",
        "minimumSeconds(nums = [1,5,4,3,2])",
        "minimumSeconds(nums = [0,1,2,3,4,5,6,7,8])",
        "minimumSeconds(nums = [6,2,3,4,5,1])",
        "minimumSeconds(nums = [0, 1, 1, 1, 0])",
        "minimumSeconds(nums=[0, 3, 4, 1, 2])",
        "minimumSeconds(nums = [1,1,1,1,2,1,1,1,2,1,2,2])"
    ],
    "sample_428": [
        "minOperations(nums = [1,2,2,2,2])",
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [1,1,1,1,2,2,2,2])",
        "minOperations([1, 1, 1, 1, 2, 2, 2])",
        "minOperations(nums=[1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1,2,2,2,2,3,3])",
        "minOperations([1, 1, 2, 2, 2])",
        "minOperations([1, 2, 2, 2, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [2, 2, 3, 2, 1, 1, 1])",
        "minOperations
    ],
    "sample_351": [
        "alternatingSubarray(nums = [2, 3, 4, 3, 4])",
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [3, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray([1, 3, 2, 2, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [4, 5, 7, 1, 8, 3, 6, 2, 9])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minLengthAfterRemovals(nums = [1,1,2,3,3])",
        "minLengthAfterRemovals(nums = [5,5,5,5,5,5,5,5,5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [5, 3, 3, 3, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"cd\", \"dc\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"cd\", \"dc\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cc\",\"cd\",\"dc\",\"aa\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bc\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"as\", \"bs\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"b\",\"c\",\"ab\",\"ba\",\"cd\"])",
        "maximumNumberOfStringPairs([\"ll\", \"bb\", \"k\", \"aa\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acz\")",
        "canMakeSubsequence(str1 = \"aa\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bad\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"aceghikmoqsuwy\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"abcdx\")",
        "canMakeSubsequence(str1 = \"dce\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"bbc\")",
        "canMakeSubsequence(str1 = \"zn\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"baz\", str2 = \"azy\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abbabb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s=\"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s=\"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abababababababa\")",
        "longestSemiRepetitiveSubstring(s = \"acbbc\")",
        "longestSemiRepetitiveSubstring(s = \"abbaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdaf\")",
        "longestSemiRepetitiveSubstring(\"ababcababab\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,1,1,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 1, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 0, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2,2,2,3,3,4], m = 2, k = 3)",
        "maxSum(nums=[1,1,2,1,1], m=2, k=3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums=[1,2,3,3], m=1, k=2)",
        "maxSum(nums = [4,3,2,1,3,2,1], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2,3,3,4,3,4,4], m = 2, k = 2)",
        "maxSum(nums=[1, 2, 1, 2, 2, 2, 1, 2, 1, 2], m=1, k=3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"ana\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"world\")",
        "findWordsContaining(words = [\"banana\", \"mango\", \"apple\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"ple\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"orange\"], x=\"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hi\"], x = \"lo\")",
        "findWordsContaining(words = [\"book\", \"books\"], x = \"o\")",
        "findWordsContaining(words = [\"word\", \"words\", \"words\"], x = \"word\")",
        "findWordsContaining(words = [\"zqx\", \"xqx\"], x = \"qx\")",
        "findWordsContaining(words = [\"xanax\", \"apple\", \"bannana\"], x = \"ana\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,2,1], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,1,2,3], moveFrom = [1,1], moveTo = [2,2])",
        "relocateMarbles(nums = [1,1,2], moveFrom = [1,2], moveTo = [1,2])",
        "relocateMarbles(nums = [1,2,2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1,2,2,2], moveFrom = [2,1], moveTo = [1,2])",
        "relocateMarbles(nums=[1,1,2,3], moveFrom=[1,1], moveTo=[2,2])",
        "relocateMarbles(nums = [1, 2, 2, 1], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums=[1,2,3], moveFrom=[3,1], moveTo=[2,3])",
        "relocateMarbles(nums = [1,1,3,2,3,2], moveFrom = [1,3,2], moveTo = [2,3,1])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 0, 2])",
        "maximumTripletValue(nums = [1, 3, 2, 4])",
        "maximumTripletValue([-1, 2, 3, -4, 5, -6, 7, -8, 9, 10])",
        "maximumTripletValue(nums = [10,1,15,20,30,5,1,4])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s=\"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"abbbcd\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abac\")",
        "longestSemiRepetitiveSubstring(s = \"abacade\")",
        "longestSemiRepetitiveSubstring(\"bbbabbb\")",
        "longestSemiRepetitiveSubstring(s = \"babybab\")",
        "longestSemiRepetitiveSubstring(s = \"sasasasasasasas\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cc\"])",
        "maximumNumberOfStringPairs([\"ab\",\"ba\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\",\"ef\",\"fe\"])",
        "maximumNumberOfStringPairs(words = [\"aabb\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bb\",\"ab\"])",
        "maximumNumberOfStringPairs([\"aa\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"adc\", \"dc\", \"cb\", \"cba\", \"ad\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [3, 2, 1]])",
        "matrixSum([[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "matrixSum([[1, 2], [3, 2]])",
        "matrixSum(nums = [[1, 2, 3], [2, 3, 4], [4, 5, 6]])",
        "matrixSum(nums = [[1, 3], [2, 3], [5, 3]])",
        "matrixSum(nums = [[0, 1], [1, 0], [0, 1], [0, 1]])",
        "matrixSum(nums = [[3, 2, 1], [0, 1, 2], [1, 1, 1]])",
        "matrixSum([[5, 2, 8], [1, 0, 3]])",
        "matrixSum(nums = [[3, 5, 7, 10], [0, 5, 4, 3], [1, 7, 10, 12], [9, 7, 6, 3]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abab\", s2 = \"ab\", s3 = \"ababab\")",
        "findMinimumOperations(s1=\"banana\",s2=\"nana\",s3=\"banana\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"cut\", s3 = \"cut\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"bana\", s3 = \"banananana\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"anana\", s3 = \"apple\")",
        "findMinimumOperations(s1=\"aabcc\", s2=\"dbbca\", s3=\"aadbbbccca\")",
        "findMinimumOperations(s1 = \"babab\", s2 = \"bbbb\", s3 = \"bbbbb\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcde\", s3 = \"abed\")",
        "findMinimumOperations(s1 = \"zxz\", s2 = \"yxy\", s3 = \"yxyz\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"ace\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"xz\", s2 = \"yz\", s3 = \"xy\")",
        "findMinimumOperations(s1 = \"abcc\", s2 = \"abcc\", s3 = \"abcc\")",
        "findMinimumOperations(s1 = \"xxxx\", s2 = \"yyyy\", s3 = \"yyyy\")",
        "findMinimumOperations(s1 = \"m\", s2 = \"n\", s3 = \"p\")",
        "findMinimumOperations(s1 = \"sun\", s2 = \"sat\", s3 = \"t\")"
    ],
    "sample_324": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(123)",
        "isFascinating(210)",
        "isFascinating(n = 100)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins([1, 2, 3])",
        "minimumCoins(prices = [1,1,1,1,1,1,1])",
        "minimumCoins(prices = [1,1,1,2])",
        "minimumCoins(prices = [1, 5, 6, 9, 10, 11])",
        "minimumCoins(prices = [1,3,1,5,9])",
        "minimumCoins(prices = [1,3,5,2,1,6])"
    ],
    "sample_380": [
        "countPairs(nums=[1,2,3,4,5], target=6)",
        "countPairs(nums = [1,2,3,4,5,6], target = 6)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "countPairs(nums = [3,1,3,6,7], target = 10)",
        "countPairs(nums=[1,2,3,4], target=4)",
        "countPairs(nums = [1,2,3,5], target = 4)",
        "countPairs(nums=[1, 2, 3, 4, 5, 6], target=5)",
        "countPairs(nums = [2, 3, 1, 5, 4], target = 5)",
        "countPairs(nums = [2,1,3,4,5,6,7,8,9], target = 9)",
        "countPairs(nums = [2,5,6,3,7], target = 7)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [10, 6, 12, 7, 3, 5])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,3,3,4,4,5,5,5,5])",
        "minGroupsForValidAssignment(nums = [1,2,2,1,2,2])",
        "minGroupsForValidAssignment([1,1,1,1,2,2,2,3,4])",
        "minGroupsForValidAssignment([2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1])",
        "minGroupsForValidAssignment(nums = [1,3,3,2,2,2,2,1,1,3,1,3,2,1,2,2,3,1,3,1,2,1,1,2,2,3,3,3,2,1,3,1,3,2])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [5, 1, 3, 4, 2], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 8)",
        "countPairs(nums = [3, 2, 1, 4], target = 5)",
        "countPairs(nums = [1, 3, 5, 4, 2], target = 6)",
        "countPairs(nums = [1, 2, 3, 5, 6], target = 4)",
        "countPairs(nums = [5, 1, 3, 2, 4], target = 6)",
        "countPairs(nums = [4, 1, 6, 3], target = 10)"
    ],
    "sample_317": [
        "buyChoco(prices = [3,2,3], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [1,2,2], money = 3)",
        "buyChoco(prices = [1,2,2], money = 3)",
        "buyChoco(prices = [1,2,2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [3,2,3], money = 4)",
        "buyChoco(prices = [2,1,2], money = 3)",
        "buyChoco(prices=[2,3,1], money=7)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ab\",\"ba\",\"cd\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"cdab\", \"adcb\", \"cbad\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\", \"gh\", \"hg\", \"ij\", \"ji\", \"kl\", \"lk\", \"mn\", \"nm\", \"op\", \"po\", \"qr\", \"rq\"])"
    ],
    "sample_370": [
        "sortVowels(s = 'Letcede')",
        "sortVowels(s = \"Letcede\")",
        "sortVowels(\"Let's code\")",
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = 'Let\\'s code')",
        "sortVowels(s = 'Let\\'s code')",
        "sortVowels(s = \"HelloThere\")",
        "sortVowels('Let\\'s code')",
        "sortVowels(s = 'lEetcode')",
        "sortVowels(s=\"Let us code\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1,1,2])",
        "sumCounts([1, 2, 2, 3])",
        "sumCounts(nums = [1,2,1,3,1])",
        "sumCounts(nums = [1,2,2,1,2])",
        "sumCounts(nums = [2,2,2,1,1,1])",
        "sumCounts(nums = [2,3,2,1,2])",
        "sumCounts([1,1,2,1,2,1,2])",
        "sumCounts([2,1,3,2,1,1,3,3,4,2,1,4,2,4])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices=[1, 2, 5])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [3, 2, 4, 1])",
        "minimumCoins(prices = [2, 5, 10, 1])",
        "minimumCoins(prices = [1,2,5,10])",
        "minimumCoins(prices = [1,2,3,11])",
        "minimumCoins(prices = [2, 2, 1, 1, 2])",
        "minimumCoins(prices = [5, 4, 2, 4])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 15, m = 4)",
        "differenceOfSums(n = 15, m = 4)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 15, m = 2)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 5, m = 4)",
        "differenceOfSums(n = 25, m = 5)"
    ],
    "sample_307": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])"
    ],
    "sample_323": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)",
        "isFascinating(79)",
        "isFascinating(789)",
        "isFascinating(123)",
        "isFascinating(234)",
        "isFascinating(765)",
        "isFascinating(76)",
        "isFascinating(531)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"0110111\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"00101101\")",
        "minimumBeautifulSubstrings(s = \"011011100\")",
        "minimumBeautifulSubstrings(s = \"10001\")",
        "minimumBeautifulSubstrings(s = \"11001001\")",
        "minimumBeautifulSubstrings(s = \"0111100111111111111111111111111100000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"0101101110111111111111000100110\")",
        "minimumBeautifulSubstrings
        "minimumBeautifulSubstrings
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n=5, limit=3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 8, limit = 4)",
        "distributeCandies(n=4, limit=3)"
    ],
    "sample_419": [
        "minOperations(nums = [3,4,5,2], k = 2)",
        "minOperations(nums = [2,3,1,4], k = 3)",
        "minOperations(nums = [4,2,3,1,1,2], k = 5)",
        "minOperations(nums = [1,10,100,1000], k = 3)",
        "minOperations(nums=[3, 1, 10, 12, 5], k=3)",
        "minOperations(nums=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k=4)",
        "minOperations(nums=[2,1,4,3,2],k=3)",
        "minOperations(nums = [2,1,5], k = 1)",
        "minOperations(nums = [1,3,1,2,2,2,4], k = 3)",
        "minOperations(nums = [6,7,5,10,2,3,5,9], k = 4)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1,1,1])",
        "sumCounts([1,2,3])",
        "sumCounts(nums = [2, 1, 1])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3])",
        "sumCounts([1,1,2])",
        "sumCounts([1, 1, 3])"
    ],
    "sample_437": [
        "lastVisitedIntegers([\"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = ['push', 'push', 'prev', 'push', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = ['prev', '3', 'prev', 'prev', '2', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'prev', 'prev', '3', 'prev', '1', 'prev', '2'])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"prev\", \"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"next\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"prev\", \"next\", \"prev\", \"next\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"prev\", \"next\", \"next\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"next\", \"prev\", \"next\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"prev\", \"next\", \"prev\", \"next\", \"next\", \"next\", \"next\", \"prev\", \"next\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\", \"next\", \"next\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \""
    ],
    "sample_421": [
        "minOperations(nums = [5,6,4,3,1,2], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1,2,3,5,6], k = 3)",
        "minOperations(nums = [2,4,6,8], k = 4)",
        "minOperations(nums = [10, 20, 30, 40], k = 40)",
        "minOperations(nums = [5,4,2,5,1], k = 5)",
        "minOperations(nums = [5,4,6,2,3,1], k = 3)",
        "minOperations(nums = [8,9,18,12,20,1], k = 6)",
        "minOperations(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 9)",
        "minOperations(nums=[1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10], k=10)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abbabb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbccdd\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbcc\")",
        "longestSemiRepetitiveSubstring(s=\"azcbobobegghakl\")",
        "longestSemiRepetitiveSubstring(s = \"mmmmmmmmmm\")",
        "longestSemiRepetitiveSubstring(s = \"babbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"abaabdaba\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccbbbcaaaadb\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts([1, 2, 3])",
        "sumCounts([1,2,3])",
        "sumCounts([1, 2, 1, 2, 1])",
        "sumCounts(nums = [1,2,1,3,4])",
        "sumCounts(nums = [2, 1, 1])",
        "sumCounts(nums = [1, 1, 1, 1])",
        "sumCounts(nums = [1, 2, 1, 2, 1, 1, 2])",
        "sumCounts(nums = [2, 2, 1, 2, 3])",
        "sumCounts(nums = [2, 1, 2, 1, 3, 3, 2, 1, 2, 3])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '111111', k = 3)",
        "shortestBeautifulSubstring(s = \"0010110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1110111\", k = 2)",
        "shortestBeautifulSubstring(s='11', k=2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 2)",
        "shortestBeautifulSubstring(s = '111111', k = 3)",
        "shortestBeautifulSubstring(s = \"11001110\", k = 2)",
        "shortestBeautifulSubstring(s = '1110010', k = 2)",
        "shortestBeautifulSubstring(s = \"11011011\", k = 3)",
        "shortestBeautifulSubstring(s=\"11011001\", k=3)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"01101110\")",
        "minimumBeautifulSubstrings(s = \"0101\")",
        "minimumBeautifulSubstrings(s = \"011\")",
        "minimumBeautifulSubstrings(s=\"101101\")",
        "minimumBeautifulSubstrings(\"00101\")",
        "minimumBeautifulSubstrings(\"101010\")",
        "minimumBeautifulSubstrings(s = \"1101000010\")",
        "minimumBeautifulSubstrings(\"01101001\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 5, y = 4, z = 3)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 3, y = 2, z = 5)",
        "longestString(x = 2, y = 1, z = 5)",
        "longestString(x = 2, y = 7, z = 1)",
        "longestString(x = 1, y = 10, z = 1)",
        "longestString(x=5, y=4, z=3)",
        "longestString(x = 3, y = 10, z = 10)"
    ],
    "sample_274": [
        "findChampion(grid = [[1,0],[0,1]])",
        "findChampion(grid = [[1, 1, 0], [1, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1,1,0],[1,0,1],[0,1,1]])",
        "findChampion(grid = [[0,1,0],[0,0,1],[0,0,0]])",
        "findChampion(grid = [[0,1,1],[1,0,1],[0,0,0]])",
        "findChampion([[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion([[1, 1, 1], [0, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [-1, 0, 3], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0, 0], [1, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 5)",
        "beautifulSubstrings(s = \"a\", k = 4)",
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"aeeouuu\", k = 6)",
        "beautifulSubstrings(s = \"aeaoueioe\", k = 10)"
    ],
    "sample_304": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maximumTripletValue(nums = [2, 1, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 1, 4])",
        "maximumTripletValue(nums = [2, 8, 10])",
        "maximumTripletValue(nums = [2, 1, 4])",
        "maximumTripletValue(nums = [1, -1, 1, -1])",
        "maximumTripletValue(nums = [2, 1, 3, 5, 4, 6])",
        "maximumTripletValue(nums = [3, 6, 2, 5, 4])",
        "maximumTripletValue(nums = [2, 11, 3, 5, 10, 7, 8])",
        "maximumTripletValue(nums = [2,10,11,1])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(\"101101101\")",
        "minimumBeautifulSubstrings(\"0110110001\")",
        "minimumBeautifulSubstrings(s = \"0010\")",
        "minimumBeautifulSubstrings(\"101101\")",
        "minimumBeautifulSubstrings(s = \"00101101\")",
        "minimumBeautifulSubstrings(s = \"110110011\")",
        "minimumBeautifulSubstrings(s = \"0110101111110\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [5, 4, 3, 2, 1])",
        "maxSubarrays(nums = [5, 5, 5])",
        "maxSubarrays(nums = [5, 2, 3, 2, 3, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 10, 15])",
        "maxSubarrays([5, 1, 2, 3, 4, 6, 7])",
        "maxSubarrays([1, 2, 3])",
        "maxSubarrays([5, 2, 1, 5, 2, 5, 2, 5, 5, 5, 5, 1, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 1, 1, 1, 5, 1, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 1, 5, 5, 1, 5, 5, 5, 5, 1, 5, 5, 1, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 1, 5, 1, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 1, 5, 5, 5, 1, 5, 5, 1, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 5, 5, 5, 1, 1, 1, 1, 1, 5, 5, 1, 1, 1, 5, 1, 1, 5,",
        "maxSubarrays(nums=[2, 0, 2, 1, 1, 0, 0, 2, 0, 1, 1, 1, 0, 2, 2, 2, 2, 0, 2, 2, 2, 1, 0, 2, 1, 1, 1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 1, 1, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 1, 0, 0, 2, 1, 2, 0, 0, 1, 2, 2, 0, 2, 1, 2, 0, 0, 2, 2, 2, 0, 1, 2, 2, 2, 2, 2, 0, 1, 2, 0, 1, 2, 1, 1, 2, 2, 0, 2, 1, 0, 2, 2, 2, 1, 0, 1, 2, 1, 1, 2, 1, 0, 1, 2, 0, 2, 0, 2, 2, 1, 2, 0, 1, 1, 1, 1, 2, 2, 0, 0, 0, 1, 1, 0, 1, 1, 0, 2, 2, 0, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 0, 2, 0, 0, 2, 1, 2, 2, 1, 0, 0, 2, 0, 0, 1, 0, 0, 2, 2, 2, 2, 1, 2, 0, 1, 0, 1, 2, 0, 1, 0, 1, 0, 0, 0",
        "maxSubarrays(nums = [240, 189, 393, 105, 328, 137, 116, 276, 265, 267, 165, 189, 327, 241, 300, 182, 315, 321, 106, 312, 309, 181, 128, 247, 218, 277, 187, 110, 173, 248, 296, 270, 309, 237, 176, 215, 128, 108, 315, 101, 308, 303, 253, 227, 302, 262, 216, 272, 206, 245, 291, 327, 193, 180, 123, 241, 105, 317, 221, 102, 116, 253, 246, 191, 106, 265, 275, 188, 297, 159, 219, 165, 167, 187, 280, 183, 266, 135, 271, 227, 100, 159, 166, 166, 259, 250, 221, 326, 175, 319, 128, 264, 308, 198, 316, 326, 248, 184, 122, 260, 127, 285, 323, 171, 290, 102, 238, 268, 241, 180, 225, 3"
    ],
    "sample_281": [
        "minOperations(a = [1, 4], b = [2, 3])",
        "minOperations(a = [2, 1, 3], b = [2, 3, 1])",
        "minOperations(a = [5, 5, 5], b = [5, 5, 5])",
        "minOperations(a = [3, 3, 3, 3], b = [1, 2, 3, 4])",
        "minOperations(a = [2, 3], b = [5, 1])",
        "minOperations(a = [2, 1, 3], b = [1, 4, 3])",
        "minOperations(a=[1,3,5,9], b=[1,2,3,4])",
        "minOperations(a=[2, 4, 3, 1], b=[1, 6, 7, 5])",
        "minOperations(a = [2, 3, 3], b = [3, 2, 1])",
        "minOperations(a = [3, 2, 4, 6], b = [1, 2, 2, 6])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\"])",
        "minimizeConcatenatedLength(words=[\"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"aa\",\"aa\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"ad\"])",
        "minimizeConcatenatedLength([\"abc\",\"ab\",\"bca\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"Ymphl\")",
        "sortVowels(s = \"HYmpl\")",
        "sortVowels(\"MyPh\")",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s = \"HYlMp\")",
        "sortVowels(s = \"MpYhL\")",
        "sortVowels(s='PhMyl')",
        "sortVowels(s = \"pYlmH\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts([1, 1, 2, 2])",
        "sumCounts(nums=[1, 1, 1, 1])",
        "sumCounts([1, 2, 2, 2])",
        "sumCounts(nums = [1, 1, 2, 3, 4])",
        "sumCounts([1, 1, 1, 1])"
    ],
    "sample_256": [
        "minimumSum(nums = [1,4,3,2])",
        "minimumSum(nums = [1,4,2,3])",
        "minimumSum(nums = [3,5,2,6,5])",
        "minimumSum(nums = [4,3,2,6])",
        "minimumSum([5,3,2,4])",
        "minimumSum(nums=[1,2,3,4,5,6])",
        "minimumSum(nums = [1,3,2,3,1])",
        "minimumSum(nums = [1, 3, 2, 5, 4])",
        "minimumSum(nums = [5,3,2,4,7])",
        "minimumSum(nums=[4, 2, 5, 3, 1])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion([[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0], [1, 1]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion([[1,0],[0,1]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0,0,1],[1,0,1],[1,1,0]])",
        "findChampion(grid = [[1, 1, 0, 0], [1, 0, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]])",
        "findChampion(grid = [[0,1,0,0],[1,0,0,0],[1,1,0,0],[0,0,1,0]])",
        "findChampion(grid = [[1,1,1,1], [0,0,1,1], [1,0,0,0], [0,1,1,1]])"
    ],
    "sample_372": [
        "sortVowels(s = 'Letcede')",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(\"Let's code\")",
        "sortVowels(s = 'Let\\'s code')",
        "sortVowels(s = 'lEOtcede')",
        "sortVowels('Letcede')",
        "sortVowels('Let\\'s code')",
        "sortVowels(s = 'Leetcode')",
        "sortVowels('lEotcedE')"
    ],
    "sample_292": [
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(\"0101\")",
        "minimumSteps(s = \"0010110\")",
        "minimumSteps(s = \"01111\")",
        "minimumSteps(s = \"1011011\")",
        "minimumSteps(s = \"1011101\")",
        "minimumSteps(s = \"0010101\")",
        "minimumSteps(s = \"101100111001\")",
        "minimumSteps(s = \"0110111000011000\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [3, 4, 5, 5, 5, 6])",
        "minimumRightShifts(nums=[1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [3, 4, 5, 5, 3, 6])",
        "minimumRightShifts(nums = [3, 4, 7, 2, 1])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])",
        "minimumRightShifts(nums = [2, 3, 1, 2, 2, 2])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [1,1,1,1,1])",
        "minOperations(nums = [1,2,3,4,4,4])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations([1, 1, 1, 1, 1])",
        "minOperations([1,1,1,1])",
        "minOperations(nums = [1,2,3,3,3,4])",
        "minOperations([1,1,2,3])",
        "minOperations([1,1,1,1,2,2,2,2,3,3])"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Ymphl\")",
        "sortVowels(s='lYmpH')",
        "sortVowels(s = \"mPhY\")",
        "sortVowels('YmpHl')",
        "sortVowels(s = \"mpHylY\")",
        "sortVowels(s = 'YlHpM')"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0], [1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 1], [0, 1, 1]])",
        "findChampion(grid = [[0,0,0], [0,1,0], [0,0,0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [1, 0, 1]])",
        "findChampion([[0, 0, 0], [0, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1,0,1], [0,0,1], [0,0,1]])",
        "findChampion(grid = [[0, 1, 0],\n                            [0, 1, 1],\n                            [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 1, 0], [0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1,1,0,1,1], [1,1,0,1,1], [0,0,0,0,1], [1,1,1,1,0], [1,1,1,1,0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 0])",
        "minSum(nums1 = [2, 1], nums2 = [2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 2, 3])",
        "minSum(nums1 = [2,1], nums2 = [1,2])",
        "minSum(nums1 = [0,1,2], nums2 = [2,3,4])",
        "minSum(nums1 = [0, -1], nums2 = [2, 4])",
        "minSum(nums1 = [0, 1, 1], nums2 = [3, 2, 1])",
        "minSum(nums1 = [0, 3, 1, 5, 4, 2], nums2 = [0, 2, 3, 4, 5, 1])",
        "minSum(nums1 = [1, 1, 0, 3, 2], nums2 = [1, 4, 1, 5, 2])",
        "minSum(nums1 = [0, 3, 4, 5, 6], nums2 = [10, 2, 1, 1, 0])"
    ],
    "sample_422": [
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "minOperations(nums = [2,1,3,5,4], k = 5)",
        "minOperations(nums=[1,2,3,4,5,6,7,8], k=3)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6, 7], k=7)",
        "minOperations(nums=[1, 1, 1, 1, 1], k=5)",
        "minOperations(nums=[2,1,1,3], k=4)",
        "minOperations(nums = [6,2,3,4,5,2], k = 2)",
        "minOperations(nums = [1, 2, 3, 5, 7, 4, 6, 8, 9, 10], k = 2)",
        "minOperations(nums = [3, 1, 4, 5, 2, 1, 3], k = 1)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [2,2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 1, 3], moveFrom = [1, 1], moveTo = [2, 3])",
        "relocateMarbles(nums=[1, 2, 3], moveFrom=[2, 1], moveTo=[3, 3])",
        "relocateMarbles(nums = [1, 2, 4], moveFrom = [1, 2, 4], moveTo = [2, 2, 4])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [1,3,6], moveTo = [2,3,4])",
        "relocateMarbles(nums=[1, 2, 4, 7], moveFrom=[4, 1], moveTo=[4, 1])"
    ],
    "sample_402": [
        "maxSum(nums = [1,1,1,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,1], m = 3, k = 3)",
        "maxSum(nums=[1, 2, 3, 4], m=3, k=3)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=4, k=3)",
        "maxSum(nums = [5,2,1,6,3,1,5], m = 3, k = 3)",
        "maxSum(nums=[-1, 1, 0, 0, 1, 1, 0], m=2, k=4)",
        "maxSum(nums = [1,2,1,2,1,1,2,1,1,1,1,2,2,2], m = 3, k = 2)",
        "maxSum(nums = [3, 2, 5, 3, 5, 1, 4], m = 2, k = 4)",
        "maxSum(nums = [4, 5, 4, 3, 2, 1, 4, 5, 6, 7], m = 3, k = 7)",
        "maxSum(nums = [5,3,1,1,3,4,2,2], m = 1, k = 4)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"ba\", s2 = \"nana\")",
        "canMakeSubsequence(s1 = \"acb\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"az\", s2 = \"banana\")",
        "canMakeSubsequence(s1 = \"zd\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"baz\", s2 = \"zaa\")",
        "canMakeSubsequence(s1=\"dz\", s2=\"az\")",
        "canMakeSubsequence(s1=\"abcd\", s2=\"acde\")",
        "canMakeSubsequence(s1=\"zaab\", s2=\"baz\")",
        "canMakeSubsequence(s1 = \"aazbz\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"zdab\", s2 = \"adb\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 0, 2], nums2 = [0, 3, 0])",
        "minSum(nums1=[1,0,1], nums2=[0,0,1])",
        "minSum(nums1 = [1, 1, 1], nums2 = [100, 100, 100])",
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [1, 2, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [2, 3, 0, 4])",
        "minSum(nums1 = [0, 1, 5, 2], nums2 = [5, 2, 3])",
        "minSum(nums1 = [1, 2, 0, 1, 2, 0], nums2 = [1, 1, 0, 1, 1, 0])",
        "minSum(nums1 = [6, 1, 12, 3], nums2 = [1, 0, 3, 3, 3])",
        "minSum(nums1 = [2, 3, 1, 0, 2, 1], nums2 = [1, 0, 3, 0, 2, 1])",
        "minSum(nums1 = [60864, 25280, 30896, 8127], nums2 = [61721, 11931, 19123, 25784])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', 'next', 'prev', 'prev', 'prev', 'next'])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = ['1', 'prev', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"",
        "lastVisitedIntegers(words = ['prev', 'next', 'prev', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'prev', 'prev', 'prev', 'prev', 'prev', 'prev', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words= [\"prev\", \"5\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [2, 1, 3])",
        "isGood([2, 1, 3])",
        "isGood(nums = [1, 2, 4, 3, 5])",
        "isGood([1, 5, 4, 2, 3])",
        "isGood(nums = [4, 1, 5, 2, 3])",
        "isGood([4, 3, 1, 2])",
        "isGood(nums = [1, 2, 3])",
        "isGood([2, 1, 4, 3, 6, 5])",
        "isGood([1, 2, 3])"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,1,1])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minOperations([1,2,3,4,5,6])",
        "minOperations([1,1,2,2,3])",
        "minOperations(nums = [1,1,1,1,3,3,3])",
        "minOperations(nums = [1,1,1,2,2,2,2,3,3,3])",
        "minOperations([4,3,3,3,3])"
    ],
    "sample_451": [
        "minChanges(s = \"0100\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"0011\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"1110\")",
        "minChanges(s = \"xxxyyy\")",
        "minChanges(s = \"1111100000\")",
        "minChanges(\"abcdef\")",
        "minChanges(\"0101100\")",
        "minChanges(s = \"mjlgfcta\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 11, limit = 2)",
        "distributeCandies(n = 11, limit = 2)",
        "distributeCandies(10, 2)",
        "distributeCandies(n = 12, limit = 5)",
        "distributeCandies(15, 5)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,4,2], nums2 = [1,2,3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 0])",
        "minSum(nums1 = [4, 3], nums2 = [2, 1])",
        "minSum(nums1 = [5,4,5], nums2 = [1,2,3])",
        "minSum(nums1 = [1, 2, 1], nums2 = [2, 0, 0])",
        "minSum(nums1=[5,4,3], nums2=[1,2,3])",
        "minSum(nums1 = [5,6,7,8], nums2 = [6,5,4,8,9])",
        "minSum(nums1 = [1, 0, 0, 1], nums2 = [2, 0, 1, 3])",
        "minSum(nums1 = [4, 1, 5, 0], nums2 = [1, 0, 5, 4])",
        "minSum(nums1 = [3,3,4,1], nums2 = [5,1,6,1])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [4,3,2,1])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1,2,3,4,5,6])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [3,4,5,5,1,2])",
        "minimumRightShifts(nums = [1, 1, 1, 2, 3])",
        "minimumRightShifts([2,3,4,5,6,7,8,1,0,9])"
    ],
    "sample_381": [
        "countPairs(nums = [1,1,2,2], t = 3)",
        "countPairs(nums = [1,2,3,4,5,6,7,8], t = 10)",
        "countPairs(nums = [1,2,3,4,5], t = 10)",
        "countPairs(nums=[1,2,3,4], t=6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], t = 12)",
        "countPairs(nums = [1,3,5,2,1], t = 4)",
        "countPairs(nums = [5,2,7,3], t = 10)",
        "countPairs(nums=[1,1,2,3],t=5)",
        "countPairs(nums = [3, 1, 2, 1, 3], t = 3)",
        "countPairs(nums=[3,3,3,3,1,2,3,3,3,3,3], t=5)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = ['push', 'push', 'push', 'pop', 'push', 'pop'])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"p\", \"push\", \"p\"])",
        "lastVisitedIntegers(words=[\"push\", \"push\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"push\", \"pop\", \"push\", \"pop\"])",
        "lastVisitedIntegers([\"push\", \"push\", \"push\", \"pop\", \"push\", \"push\", \"pop\", \"pop\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"push\", \"3\", \"push\", \"push\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"pop\", \"push\", \"3\", \"push\", \"pop\", \"push\"])",
        "lastVisitedIntegers(words = [\"push\", \"100\", \"push\", \"11\", \"push\", \"3\", \"pop\", \"push\", \"2\", \"pop\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"banana\")",
        "canMakeSubsequence(str1 = \"aab\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abczxyzzy\", str2 = \"azxy\")",
        "canMakeSubsequence(str1 = \"zzzyx\", str2 = \"azxxz\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 0], nums2 = [2, 3])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [0, 1, 2, 3])",
        "minSum(nums1 = [1,2,3,4], nums2 = [0,1,1])",
        "minSum(nums1 = [1, 2, 0, 4, 5], nums2 = [6, 7, 8, 9, 0])",
        "minSum(nums1 = [1,2,3], nums2 = [0, 5])",
        "minSum(nums1 = [4, 3, 2], nums2 = [6, 1, 2])",
        "minSum(nums1 = [2, 2, 0, 0, 1], nums2 = [1, 1, 0, 0, 0])",
        "minSum(nums1 = [4, 1, 4, 5], nums2 = [1, 4, 5, 0])",
        "minSum(nums1 = [3, 1, 6, 4, 1], nums2 = [2, 0, 0, 2, 0])",
        "minSum(nums1 = [2, 3, 1, 1, 0, 2, 3, 1, 1, 0, 2, 3, 1, 1, 0], nums2 = [3, 2, 3, 2, 0, 3, 2, 3, 2, 0, 3, 2, 3, 2, 0])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], k = 1)",
        "countPairs(coordinates = [[0,0], [0,1], [1,0], [1,1], [2,0], [2,1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 0], [2, 0], [0, 1], [0, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 1], [1, 0], [2, 0], [2, 1]], k = 1)",
        "countPairs(coordinates = [[1,2], [2,1], [1,3], [3,1], [1,4], [4,1]], k = 2)",
        "countPairs(coordinates = [[1,1], [1,1], [2,2], [3,3], [4,4], [4,4]], k = 2)",
        "countPairs(coordinates = [[1, 2], [1, 3], [2, 2], [2, 1], [2, 3], [3, 1], [3, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[2, 1], [0, 2], [0, 1], [1, 0], [2, 0]], k = 2)",
        "countPairs(coordinates = [[1,0], [1,2], [2,1], [0,1], [0,0]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 0], [1, 0], [3, 0], [2, 1], [1, 2], [3, 1], [2, 2], [1, 3], [3, 2], [2, 3], [1, 4], [3, 3], [2, 4], [1, 5], [3, 4], [2, 5]], k = 3)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"lc\", \"cl\", \"gg\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\",\"ef\",\"fe\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\",\"aa\"])",
        "maximumNumberOfStringPairs([\"lc\",\"cl\",\"gg\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [5, -1, -2, 3, 4])",
        "maxStrength(nums = [1, -2, 3, 4, -5])",
        "maxStrength(nums = [1,2,3,-4])",
        "maxStrength(nums = [1,-4,-5,-2])",
        "maxStrength(nums = [1, -1, -2])",
        "maxStrength(nums = [1,-1,-1,0])",
        "maxStrength(nums = [5, -2, 1, -3, 10, -10])",
        "maxStrength(nums = [2, 1, 4, 5, 6, -2, -3, -10])",
        "maxStrength(nums = [10,-2,4,-10,-2,3,-10,20])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins([1, 2, 3, 4])",
        "minimumCoins(prices = [2, 5, 6])",
        "minimumCoins(prices = [4, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 10])",
        "minimumCoins(prices = [1, 2, 1, 4])",
        "minimumCoins(prices = [2,5,1])",
        "minimumCoins([3, 0, 1])",
        "minimumCoins([2, 5, 1, 7, 10])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,3,2,2])",
        "minLengthAfterRemovals(nums = [1,2,2,1,3,3,3])",
        "minLengthAfterRemovals(nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,2,2,2,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,2,2,3,3,3,3,3,4,4,5,5,5,5])",
        "minLengthAfterRemovals(nums = [2, 4, 6, 6, 4, 8])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 7, 8, 9])"
    ],
    "sample_318": [
        "buyChoco(prices = [1,2,3], money = 10)",
        "buyChoco(prices = [2, 3, 1], money = 10)",
        "buyChoco(prices=[1, 2, 3, 4], money=10)",
        "buyChoco(prices = [2, 2], money = 1)",
        "buyChoco(prices = [20, 10, 10], money = 5)",
        "buyChoco(prices=[2, 3, 1], money=6)",
        "buyChoco(prices = [7, 2, 1], money = 10)",
        "buyChoco(prices = [4, 5, 2, 3, 1, 7], money = 10)",
        "buyChoco(prices = [4, 1, 5, 2, 4, 1], money = 5)",
        "buyChoco(prices=[10, 2, 4, 6, 8, 12, 5], money=12)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"1\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\",",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"3\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\", \"prev\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\", \"prev\", \"prev\", \"1\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 1, 1])",
        "sumCounts(nums = [1, 2, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [2, 1, 2, 1])",
        "sumCounts(nums=[1, 2, 1, 3, 1])",
        "sumCounts(nums = [1,1,1,1,2])",
        "sumCounts([1, 1, 2, 2, 1, 3])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8], moveTo = [6, 8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [5, 9])",
        "relocateMarbles(nums = [8, 5, 6, 9], moveFrom = [8, 5, 6], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [5, 7, 9, 8], moveFrom = [7, 8], moveTo = [6, 5])",
        "relocateMarbles(nums = [1, 5, 8, 9], moveFrom = [1, 9], moveTo = [6, 8])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom=[1, 2, 3, 4], moveTo=[8, 7, 6, 5])",
        "relocateMarbles(nums = [8, 7, 5, 6], moveFrom = [7, 6], moveTo = [9, 8])",
        "relocateMarbles(nums = [3, 8, 2, 5, 6, 9], moveFrom = [2, 5, 6], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [5, 3, 4, 6, 9, 8], moveFrom = [3, 6, 8], moveTo = [4, 9, 5])",
        "relocateMarbles(nums = [3, 6, 8, 5, 10], moveFrom = [3, 6, 8], moveTo = [5, 8, 9])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xzyx\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"zaz\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"abcdz\")",
        "canMakeSubsequence(str1 = \"zza\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abbbb\")",
        "canMakeSubsequence(str1 = \"mq\", str2 = \"mqqq\")",
        "canMakeSubsequence(str1 = \"azbc\", str2 = \"abzz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"adabcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abc\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"mango\"], x = \"ana\")",
        "findWordsContaining(words=[\"this\", \"is\", \"a\", \"test\"], x=\"is\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"bear\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"orange\"], x = \"ange\")",
        "findWordsContaining(words = [\"apple\", \"peach\", \"orange\"], x = \"or\")",
        "findWordsContaining(words = [\"ac\", \"ab\", \"cd\"], x = \"b\")",
        "findWordsContaining(words = [\"apples\", \"banana\", \"grapes\"], x = \"apples\")",
        "findWordsContaining(words=[\"apples\", \"bananas\", \"cats\", \"dogs\"], x=\"a\")",
        "findWordsContaining(words = [\"egg\", \"chicken\", \"potato\"], x = \"eg\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[7, 2, 1], [6, 4, 2], [6, 5, 3], [3, 2, 1]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum(nums = [[7,2,1],[5,4,9],[3,8,6]])",
        "matrixSum(nums = [[6, 2, 1], [4, 2, 1], [1, 1, 1]])",
        "matrixSum(nums = [[1,2,3,4],[2,3,4,5],[3,4,5,6],[4,5,6,7]])",
        "matrixSum(nums = [[5, 2, 3], [4, 1, 3]])",
        "matrixSum(nums = [[5,4,3],[2,5,7],[3,4,1]])",
        "matrixSum(nums = [[4, 3, 8], [0, 9, 5]])",
        "matrixSum(nums = [[5,4,3,2],[5,1,4,5]])",
        "matrixSum(nums = [[6, 9, 8, 2], [6, 9, 9, 2], [9, 9, 9, 2], [6, 6, 6, 2]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 2], money = 3)",
        "buyChoco(a = [1, 2, 2], money = 3)",
        "buyChoco(a = [1,2,2], money = 3)",
        "buyChoco(a = [100, 100, 100], money = 100)",
        "buyChoco(a = [10, 10, 10, 10, 10], money = 55)",
        "buyChoco(a = [1,2,3], money = 3)",
        "buyChoco(a = [10, 20, 30], money = 40)",
        "buyChoco(a = [3, 1], money = 4)",
        "buyChoco(a = [1, 2, 3, 4], money = 4)",
        "buyChoco(a = [1, 1000, 3], money = 500)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [2,1,3,5,1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment([1, 1, 2])",
        "minGroupsForValidAssignment(nums = [2, 3, 5, 6, 8])",
        "minGroupsForValidAssignment(nums = [1,2,5,3,5,3,1,1,3,3])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3,4,7,5,6,2])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [2, 3, 1, 4])",
        "minimumRightShifts(nums = [3, 4, 5, 5, 3, 6])",
        "minimumRightShifts(nums = [3,4,5,2])",
        "minimumRightShifts([1, 3, 2])",
        "minimumRightShifts([3, 3, 5, 2, 1])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [5, 4, 2, 4])",
        "maxStrength(nums = [1, 5, 4, 2])",
        "maxStrength(nums = [5, -3, 5])",
        "maxStrength(nums = [2, 3, 1, 5])",
        "maxStrength(nums=[1, 2, 3, 4])",
        "maxStrength(nums = [3, -1, -1])",
        "maxStrength([1, 5, 3])",
        "maxStrength(nums = [5, 10, 7, 11, 3, 16, 8, 2, 13, 14, 1, 16])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 4)",
        "distributeCandies(n = 2, limit = 2)",
        "distributeCandies(n=4, limit=2)",
        "distributeCandies(n = 6, limit = 4)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n=2, limit=3)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3,3,3,3,7,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 1, 3])",
        "minLengthAfterRemovals(nums = [3,3,2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [2,2,2,2])",
        "minLengthAfterRemovals(nums=[2, 2, 1, 1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,2,2,2,2,3])",
        "minLengthAfterRemovals(nums = [1,2,3,2,2,2,1])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 2, 2])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 3, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 2, 2, 1])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"ba\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"app\")",
        "findWordsContaining(words = [\"foo\", \"bar\", \"baz\"], x = \"ba\")",
        "findWordsContaining(words = [\"apple\", \"ball\", \"cat\"], x = \"all\")",
        "findWordsContaining(words = [\"apple\", \"oranges\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"pear\"], x = \"pl\")",
        "findWordsContaining(words=[\"hello\", \"world\"], x=\"wor\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cake\", \"doughnuts\"], x = \"an\")",
        "findWordsContaining(words=[\"apple\", \"cake\", \"banana\"], x=\"a\")"
    ],
    "sample_278": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion([[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid=[[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 1, 1], [1, 0, 1, 1, 1], [0, 1, 0, 1, 1], [0, 0, 1, 0, 1], [0, 0, 0, 1, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1,2,3])",
        "maxSubarrays([5, 10, 20, 6, 3, 8])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [5, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1,1,1,1,1,1,1,1,1,1])",
        "maxSubarrays(nums = [5, 2, 1, 3, 1])",
        "maxSubarrays(nums=[1, 3, 2, 4, 2, 1])",
        "maxSubarrays(nums = [3,12,11,2])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"awesome\", k = 2)",
        "beautifulSubstrings(s = \"aea\", k = 2)",
        "beautifulSubstrings(s = \"aabbcc\", k = 3)",
        "beautifulSubstrings(s=\"aabaabaa\", k=2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [2, 1, 4, 3])",
        "minimumSeconds(nums = [1,2,2,3])",
        "minimumSeconds(nums = [4,2,5,3,1])",
        "minimumSeconds([3, 3, 3, 3])",
        "minimumSeconds(nums = [3,2,20,1,6,5,4,8,7,9])",
        "minimumSeconds(nums = [1, 2, 2, 2, 5])",
        "minimumSeconds([0, 0, 1, 2, 1])",
        "minimumSeconds(nums = [3,4,7,5,2,1,3,4])",
        "minimumSeconds([1, 4, 3, 3, 2, 1, 1])",
        "minimumSeconds(nums = [0, 4, 2, 1, 0, 0, 5, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0])"
    ],
    "sample_327": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)",
        "isFascinating(79)",
        "isFascinating(10)",
        "isFascinating(10)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 1, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 10], target = 1)",
        "lengthOfLongestSubsequence(nums = [4,12,25,125,56,33], target = 100)",
        "lengthOfLongestSubsequence(nums = [20, 6, 28, 47, 54, 37, 35], target = 94)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1], [1]])",
        "matrixSum([[1], [2], [3]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[0, 0, 1], [1, 0, 0], [0, 0, 1]])",
        "matrixSum(nums = [[2, 3], [1, 1], [0, 0]])",
        "matrixSum(nums = [[1, 2, 3, 4, 5, 6, 7, 8, 9]])",
        "matrixSum([[2,3,4], [4,3,2], [1,2,3]])",
        "matrixSum(nums = [[1, 2, 2], [3, 5, 3], [4, 4, 1]])",
        "matrixSum(nums=[[1, 4, 2], [7, 8, 3], [6, 5, 9]])"
    ],
    "sample_326": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)",
        "isFascinating(7919)",
        "isFascinating(39)",
        "isFascinating(783)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [0, 1, 1]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 1], [1, 1, 0]])",
        "findChampion([[1, 0, 1], [1, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1,0,0],[1,1,1],[1,0,1]])",
        "findChampion(grid = [[1, 1, 0, 1], [1, 1, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[0,1,1,1], [1,0,0,0], [1,0,0,0], [0,0,0,0]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 1, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 6, 2, 3])",
        "minimumSum(nums = [3,2,5,1,7])",
        "minimumSum(nums = [4,3,2,1])",
        "minimumSum(nums = [3, 1, 2, 4])",
        "minimumSum(nums = [10, 2, 14, 4, 16, 6])",
        "minimumSum(nums = [4, 2, 1, 6, 5])",
        "minimumSum(nums = [9, 5, 2, 7])",
        "minimumSum(nums = [2, 2, 5, 8, 2, 3])",
        "minimumSum(nums=[1, 3, 5, 2, 7, 4, 6, 9, 8])"
    ],
    "sample_450": [
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"0011\")",
        "minChanges(\"aabb\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabbbb\")",
        "minChanges(s = \"baaab\")",
        "minChanges(\"abcdaa\")",
        "minChanges(s = \"abbbaa\")",
        "minChanges(s=\"AAAABBBB\")",
        "minChanges(\"00110111\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"1110\", s2 = \"0110\", x = 4)",
        "minOperations(s1 = \"1110\", s2 = \"0110\", x = 4)",
        "minOperations(s1 = \"101\", s2 = \"001\", x = 3)",
        "minOperations(s1 = \"101\", s2 = \"000\", x = 2)",
        "minOperations(s1 = \"110\", s2 = \"101\", x = 1)",
        "minOperations(s1 = \"111\", s2 = \"011\", x = 2)",
        "minOperations(s1 = \"10111\", s2 = \"00100\", x = 2)",
        "minOperations(s1 = \"0110\", s2 = \"1101\", x = 1)",
        "minOperations(s1 = \"1101\", s2 = \"0010\", x = 1)",
        "minOperations(s1 = \"0001\", s2 = \"0111\", x = 3)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 4, z = 1)",
        "longestString(x = 4, y = 3, z = 2)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 1, y = 3, z = 3)",
        "longestString(x = 5, y = 5, z = 0)",
        "longestString(x = 5, y = 5, z = 10)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays(nums = [1,2,3,4])",
        "maxSubarrays(nums = [1, 2, 3, 3, 2, 2])",
        "maxSubarrays(nums = [1, 2, 3, 4, 0, 5, 6, 7])",
        "maxSubarrays(nums = [1, 2, 3, 0, 2, 2])",
        "maxSubarrays(nums = [13, 13, 13])",
        "maxSubarrays(nums = [2, 3, 6, 1, 4, 5])",
        "maxSubarrays(nums = [0b10101, 0b10110, 0b10100, 0b10101, 0b10110])",
        "maxSubarrays(nums = [0x12, 0x34, 0x77, 0x34, 0x56, 0x77])",
        "maxSubarrays(nums = [12, 6, 2, 1, 7, 2, 14, 8, 1])"
    ],
    "sample_306": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors([\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"930101-321111\", \"930101-123111\", \"860215-231122\", \"940101-456111\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 3, 4, 2])",
        "maxSubarrays(nums = [2, 1, 0, 4])",
        "maxSubarrays(nums = [3, 2, 1, 0, 2, 3])",
        "maxSubarrays(nums = [0, 2, 4, 2, 0])",
        "maxSubarrays(nums = [1, 1, 1, 2, 2, 2, 2, 1, 1, 1])",
        "maxSubarrays(nums = [1,2,1,0,1,0,1,0])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [8, 5, 9, 6], moveFrom = [8, 6], moveTo = [5, 9])",
        "relocateMarbles(nums = [6, 9, 8, 5], moveFrom = [6, 5], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 8, 9], moveFrom = [3, 2, 4, 1], moveTo = [2, 1, 3, 4])",
        "relocateMarbles(nums = [1, 2, 5, 6, 8, 9], moveFrom = [2, 6, 5], moveTo = [5, 9, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [3, 2, 4], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [2, 6, 9, 8])",
        "relocateMarbles(nums = [7, 5, 6, 9, 8], moveFrom = [5, 6, 8], moveTo = [7, 7, 7])",
        "relocateMarbles(nums = [2, 4, 6, 8, 9, 5, 7], moveFrom = [6, 4, 2], moveTo = [9, 5, 8])",
        "relocateMarbles(nums = [6, 5, 8, 9, 7, 6, 5, 6], moveFrom = [5, 5, 5, 5, 5, 5, 5], moveTo = [6, 6, 6, 6, 6, 6, 6])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abca\", s3 = \"abca\")",
        "findMinimumOperations(s1 = \"bababa\", s2 = \"bababa\", s3 = \"bababa\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bbb\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"xz\", s2 = \"xzz\", s3 = \"xzz\")",
        "findMinimumOperations(s1 = \"bz\", s2 = \"zb\", s3 = \"zz\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"xedab\", s3 = \"abxed\")",
        "findMinimumOperations(s1 = \"mqw\", s2 = \"xzy\", s3 = \"qwx\")",
        "findMinimumOperations(s1=\"aacbbc\", s2=\"abcaac\", s3=\"acbbca\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1,2,3,5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums = [3,2,3,2,2])",
        "minLengthAfterRemovals(nums = [3,3,3])",
        "minLengthAfterRemovals(nums = [5,5,4,4,2,2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals([5,5,4,4,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,3,3,1,1,3,1,2])"
    ]
}