{
    "sample_178": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 5], [2, 4, 6], [1, 2, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [2, 4, 3], [3, 5, 4]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 1], [2, 3, 10]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 3, 4], [1, 2, 5], [3, 4, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 3], [1, 2, 4], [2, 3, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [3, 4, 5], [3, 5, 4], [2, 5, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 5, 3], [2, 3, 5], [1, 3, 6], [2, 5, 4]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 1], [3, 4, 2], [4, 7, 5], [1, 6, 1], [2, 3, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 4, 10], [2, 6, 15], [3, 5, 5], [5, 8, 3], [7, 9, 2]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4], m = 3)",
        "canSplitArray(nums = [1,2,3,4], m = 3)",
        "canSplitArray(nums = [1,2,1,2,1], m = 2)",
        "canSplitArray([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "canSplitArray(nums = [3,2,3,4,3,2,1], m = 2)",
        "canSplitArray(nums = [1,3,5,9,12], m = 4)",
        "canSplitArray(nums = [5,5,10], m = 7)",
        "canSplitArray(nums = [5,2,7,3,4], m = 3)",
        "canSplitArray([10,5,5,10,10,5,10,5,10],10)",
        "canSplitArray(nums = [10,20,30], m = 1)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [2,1,-1,-2], k = 2)",
        "checkArray(nums = [0, -1, 0, 1, -1, 0, 1, -1, 0], k = 2)",
        "checkArray([-2, -1, 1, 2, -1, -4], 3)",
        "checkArray(nums = [0, 2, 1, -3, 5], k = 3)",
        "checkArray(nums = [-4, -3, 1, 2, 1, -2], k = 3)",
        "checkArray(nums = [4, -2, -3, -1, 5, -4, 7, -5, -3], k = 3)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [4, 2, 1, 3], k = 1)",
        "maximumBeauty(nums = [1, 4, 2, 3, 1], k = 2)",
        "maximumBeauty(nums = [4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 8, 16], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 7, 6, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 5, 1, 3, 4], k = 1)",
        "maximumBeauty(nums = [4, 6, 9, 3, 7, 5], k = 3)",
        "maximumBeauty(nums = [10, 1, 2, 7, 7, 7, 7, 7, 6, 7], k = 3)",
        "maximumBeauty(nums = [10, 5, 7, 6, 8, 11], k = 2)",
        "maximumBeauty(nums = [2, 5, 7, 9, 10, 3, 6, 1], k = 1)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"ba\", \"na\", \"na\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"this\", \"is\", \"a\", \"test\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"Hello\", \"World\"], separator = \" \")",
        "splitWordsBySeparator(words = \"\", separator = \" \")",
        "splitWordsBySeparator(words = [\"ba\", \"na\", \"na\", \"na\", \"na\"], separator = \"a\")",
        "splitWordsBySeparator(words = \"\", separator = \",\")",
        "splitWordsBySeparator(words = [\"aa\", \"bb\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"aa\", \"bb\", \"cc\", \"dd\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"yay\", \"Hai\"], separator = \"\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [2,1,3])",
        "countWays(nums = [1,1])",
        "countWays(nums = [0,0,0,0,0])",
        "countWays(nums = [0, 3, 1, 4, 2])",
        "countWays(nums = [3, 4, 3, 1])"
    ],
    "sample_122": [
        "minimumIndex(nums = [2,2,1,1,1,2])",
        "minimumIndex(nums = [3, 2, 3])",
        "minimumIndex(nums = [3, 2, 2, 3])",
        "minimumIndex(nums = [2,2,1,1,1,1])",
        "minimumIndex(nums = [1,2,3,4,4,4])",
        "minimumIndex(nums = [2,2,1,1,1,1,2])",
        "minimumIndex(nums = [0, 1, 0, 1, 0, 1, 0, 1])",
        "minimumIndex(nums = [2, 2, 1, 2, 2, 2])",
        "minimumIndex(nums = [1,2,3,4,4,4,4])",
        "minimumIndex(nums = [1, 2, 1, 2, 3, 4])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [1, 2]])",
        "numberOfPoints(nums = [[0, 2], [2, 5], [5, 10]])",
        "numberOfPoints(nums = [[0, 2], [3, 5], [6, 8], [12, 16]])",
        "numberOfPoints(nums = [[-10, 10], [-10, 10]])",
        "numberOfPoints(nums = [[1,3],[2,5],[1,2]])",
        "numberOfPoints(nums = [[1, 5], [3, 10], [6, 9]])",
        "numberOfPoints(nums = [[0,1],[2,4],[1,3],[0,2]])",
        "numberOfPoints(nums = [[3, 4], [2, 2], [4, 5]])",
        "numberOfPoints(nums = [[3,4],[2,3],[5,6],[0,1],[5,6],[4,5]])",
        "numberOfPoints(nums = [[0, 2], [3, 4], [0, 1], [1, 2], [2, 3], [0, 3], [1, 4], [0, 4]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1,3,4])",
        "semiOrderedPermutation(nums = [2,1,3,4])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [1,0,0])",
        "semiOrderedPermutation(nums = [3,4,2,1])",
        "semiOrderedPermutation(nums = [1, 3, 3, 2])",
        "semiOrderedPermutation(nums = [3, 4, 3, 2, 1])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 5, target = 6)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 6, target = 9)",
        "minimumPossibleSum(n = 8, target = 2)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 2, 2, 3, 4])",
        "minimumIndex(nums = [3, 3, 3, 3, 3, 3])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minimumIndex(nums = [5, 3, 5])",
        "minimumIndex(nums = [1, 1, 3, 4, 4])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1, 3, 4, 2, 4])",
        "minimumIndex(nums = [2, 2, 3, 4, 4, 5, 6, 7, 7, 7])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 1, 1, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 4, 5, 6, 8])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 4, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 8)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [5, 9]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [5, 7], [8, 10]])",
        "numberOfPoints(nums = [[1, 5], [10, 15]])",
        "numberOfPoints(nums = [[0,0], [2,2]])",
        "numberOfPoints(nums = [[-2, 0], [0, 2], [2, -2]])",
        "numberOfPoints(nums = [[-1, 3], [0, 2], [5, 6]])",
        "numberOfPoints(nums = [[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3]])",
        "numberOfPoints(nums = [[3, 5], [5, 7], [2, 9]])",
        "numberOfPoints(nums = [[-1, 1], [2, 3], [-4, -3]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], target = 1)",
        "maximumJumps(nums = [3, 0, 2, 1, 2], target = 3)",
        "maximumJumps(nums = [3, 4, 2, 1, 5], target = 3)",
        "maximumJumps(nums = [1, 4, 2, 3], target = 3)",
        "maximumJumps(nums = [2, 1, 1, 2, 0, 2, 1], target = 1)",
        "maximumJumps(nums = [1,4,0,0,0], target = 1)",
        "maximumJumps([3, 0, 0, 1, 9, 4], 3)"
    ],
    "sample_173": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 6, k = 3)",
        "minimumSum(n = 6, k = 2)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3], m = 5)",
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [1,2,3], m = 3)",
        "canSplitArray(nums = [1,2,3], m = 6)",
        "canSplitArray(nums = [3, 2, 2, 4], m = 3)",
        "canSplitArray(nums = [1,1,1,1,1,1,1], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 5], m = 3)",
        "canSplitArray(nums = [1,5,3,4,2], m = 5)",
        "canSplitArray(nums = [2, 3, 5, 7, 8, 9], m = 10)",
        "canSplitArray(nums = [4,1,2,3], m = 6)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [1, 3, 4], [2, 3, 5]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 5], [1, 2, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 0, 3], [2, 3, 5]])",
        "maximizeTheProfit(n = 3, offers = [[0, 0, 0], [1, 3, 6], [2, 4, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 7], [2, 4, 3], [3, 4, 2]])",
        "maximizeTheProfit(n = 3, offers = [[3, 1, 1], [3, 2, 5], [2, 2, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 2], [4, 4, 2]])",
        "maximizeTheProfit(n = 3, offers = [[0, 0, 2], [1, 0, 3], [3, 2, 5], [4, 3, 7]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 10], [2, 4, 30], [1, 2, 20], [2, 3, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,4],[2,5,3],[4,2,1],[3,2,3],[3,3,2]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, -2, 3], k = 2)",
        "checkArray(nums = [0, 1, -1, 1, 0], k = 2)",
        "checkArray(nums = [1,2,3,-3], k = 3)",
        "checkArray(nums = [-2, -1, 1, 2, 2], k = 3)",
        "checkArray([2, 7, 11, 15], 3)",
        "checkArray(nums = [0, 2, -3, 1], k = 3)",
        "checkArray(nums = [2, 1, -1, 3, -2, 2], k = 3)",
        "checkArray(nums = [4, 3, 2, 3, 6, 7, 1], k = 3)",
        "checkArray(nums = [2, 5, 3, -2, -3, 4], k = 3)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,0,0,1,0,1], k = 2)",
        "longestEqualSubarray(nums = [1,0,1,0,1,1], k = 1)",
        "longestEqualSubarray(nums = [1, 0, 1, 0, 1, 1, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 0, 1, 1, 0, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 1)",
        "longestEqualSubarray(nums = [1,0,0,1,0,0,1,0,0], k = 2)",
        "longestEqualSubarray(nums = [1, 0, 1, 1, 0, 1, 1, 0, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,3,4,2,2,2,5,2,2], k = 2)"
    ],
    "sample_8": [
        "colorTheArray(n = 2, queries = [[0, 1], [1, 0]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [3, 1], [4, 1]])",
        "colorTheArray(n = 3, queries = [[0, 0], [2, 1]])",
        "colorTheArray(n = 6, queries = [[1, 0], [3, 0], [4, 0], [2, 1], [5, 1]])",
        "colorTheArray(n = 10, queries = [[4, 5], [4, 5]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 10, queries = [[2, 10], [1, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 0], [1, 2], [0, 2], [2, 0], [2, 1], [0, 3], [3, 2]])",
        "colorTheArray(n = 7, queries = [[1,1],[1,2],[2,2],[2,3],[3,3],[4,4],[5,4],[6,4]])",
        "colorTheArray(n = 5, queries = [[3, 1, 3], [4, 4, 3], [4, 4, 4]])"
    ],
    "sample_55": [
        "smallestString(s = 'abcd')",
        "smallestString(\"banana\")",
        "smallestString(s = \"aaa\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"kddsncd\")",
        "smallestString(s = \"bask\")",
        "smallestString(\"aaa\")",
        "smallestString(s = \"zakaza\")",
        "smallestString('abcd')",
        "smallestString(\"a\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [0, 1, 0, 1, 1, 0], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 2, 3, 4, 3, 2, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 4, 2, 3, 2, 1, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 3, 2, 5, 4, 6, 9], threshold = 2)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], threshold = 0)",
        "longestAlternatingSubarray(nums = [1, 0, 1, 0, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 2, 4], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 1, 0], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 3, 4, 5, 1, 2, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 2, 3, 5, 4, 4, 7], threshold = 2)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 3, 6, 7])",
        "distinctDifferenceArray(nums = [3, 2, 1, 5, 4])",
        "distinctDifferenceArray(nums = [0, 2, 3])",
        "distinctDifferenceArray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "distinctDifferenceArray(nums = [4, 3, 2, 7, 9, 2, 1])",
        "distinctDifferenceArray(nums = [-4, -2, 0, 1, 3])"
    ],
    "sample_22": [
        "minLength(s = \"abcd\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"aab\")",
        "minLength(s = \"abab\")",
        "minLength(s = \"AABBCCD\")",
        "minLength(s = \"abcabcd\")",
        "minLength(s = \"abcdefg\")",
        "minLength(s = \"zab\")",
        "minLength(\"ABCABCDEF\")",
        "minLength(s = \"bcdfgh\")"
    ],
    "sample_37": [
        "minimumCost(\"abcd\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"banana\")",
        "minimumCost(\"ab\")",
        "minimumCost(s = \"aaaa\")",
        "minimumCost(\"aaa\")",
        "minimumCost(\"baaab\")",
        "minimumCost(s = \"abcdefghij\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 1], m = 2)",
        "canSplitArray(nums = [1, 1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [1, 3, 2], m = 3)",
        "canSplitArray(nums = [6, 2, 4, 5], m = 11)",
        "canSplitArray(nums = [1, 5, 2, 5, 3], m = 6)",
        "canSplitArray(nums = [5, 4, 6, 7, 2, 3], m = 8)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0,1,2,3])",
        "doesValidArrayExist(derived = [0,1,2,3])",
        "doesValidArrayExist(derived = [1,0,1,0,1])",
        "doesValidArrayExist(derived = [1,3,2])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 3, 3, 2])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0,1,1,1,0,0,0,1,1,1])"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1,2], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6,7], k = 3)",
        "checkArray(nums = [1,2,1,2,1], k = 2)",
        "checkArray(nums = [3,2,1,4], k = 2)",
        "checkArray(nums = [4, 6, 7, 1, 2], k = 3)",
        "checkArray(nums = [4,5,1,2,3], k = 3)",
        "checkArray(nums = [1,2,3], k = 1)",
        "checkArray(nums = [10, 5, 4, 3, 3, 2], k = 3)",
        "checkArray(nums = [1,2,3], k = 1)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 12, 12], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 7, 6, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 1, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 5, 6, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 35, 20, 50], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 3, 6, 5, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 10, 4, 3, 9, 9], target = 5)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7], k = 1)",
        "sumIndicesWithKSetBits(nums = [2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 1, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 3, 3, 7], k = 3)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1,4,3,2], k = 2)",
        "maximumBeauty(nums = [1,4,2], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 5, 1], k = 1)",
        "maximumBeauty(nums = [1,3,3], k = 1)",
        "maximumBeauty(nums = [3, 4, 2, 1, 6], k = 1)",
        "maximumBeauty(nums = [4, 6, 7, 4], k = 3)",
        "maximumBeauty(nums = [5, 3, 5, 3, 5], k = 1)",
        "maximumBeauty(nums = [7,4,9,3,2], k = 2)",
        "maximumBeauty(nums = [2,3,4,4,5,6,8,9], k = 1)",
        "maximumBeauty(nums = [0, 5, 0, 3, 5, 7, 9], k = 5)"
    ],
    "sample_205": [
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"999\")",
        "minimumOperations(num = \"1125\")",
        "minimumOperations(num = \"1050\")",
        "minimumOperations(\"300\")",
        "minimumOperations(num = \"1278\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"100\")",
        "minimumOperations(s = \"100\")",
        "minimumOperations(s = \"001\")",
        "minimumOperations(s = \"1001\")",
        "minimumOperations(s = '100')",
        "minimumOperations(s = \"150\")",
        "minimumOperations(s = \"01100\")",
        "minimumOperations(\"12\")",
        "minimumOperations(s = \"1123\")",
        "minimumOperations(s = \"1245\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 1, 0, 1])",
        "semiOrderedPermutation(nums = [1, 1, 0])",
        "semiOrderedPermutation(nums = [0, 1, 1, 0, 1, 1])",
        "semiOrderedPermutation(nums = [0, 0, 0, 1, 1, 1])",
        "semiOrderedPermutation(nums = [1, 0, 1, 0, 0, 1])",
        "semiOrderedPermutation(nums = [1, 0, 1, 0, 0, 1])",
        "semiOrderedPermutation(nums = [1,1,0,1,0])",
        "semiOrderedPermutation(nums = [1,1,1])",
        "semiOrderedPermutation(nums = [1,0,1,1,0])",
        "semiOrderedPermutation(nums = [1, 1, 0, 1, 0, 1, 0, 0, 1])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")",
        "furthestDistanceFromOrigin(moves = \"R2L3R\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRLR\")",
        "furthestDistanceFromOrigin(\"LLL\")",
        "furthestDistanceFromOrigin(moves = 'LL')",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRRR\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"National\", \"Aeronautics\", \"Space\", \"Administration\"], s = \"NASA\")",
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"ABC\")",
        "isAcronym(words = [\"mq\", \"px\", \"zy\"], s = \"mpz\")",
        "isAcronym(words = [\"H\", \"T\"], s = \"HT\")",
        "isAcronym(words = [\"an\", \"is\", \"a\"], s = \"aisa\")",
        "isAcronym(words = [\"LOL\", \"PYTHON\", \"SQL\"], s = \"LOP\")",
        "isAcronym(words = [\"a\", \"c\", \"a\", \"t\", \"a\", \"c\", \"t\"], s = \"actacct\")",
        "isAcronym(words = [\"HOT\", \"TAG\", \"AT\"], s = \"HTAT\")",
        "isAcronym(words = [\"Dart\", \"Pep\", \"Poo\", \"Boo\"], s = \"DPB\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 6, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [0, 1, 2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 1, 2, 1, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 2, 1, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3,2,2,3], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 4, 5], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [2,4,2,2], modulo = 6, k = 0)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [2, 1, 4, 7, 5, 9])",
        "countBeautifulPairs(nums = [11, 12, 23, 24, 34, 35])",
        "countBeautifulPairs(nums = [23, 30, 17, 19])",
        "countBeautifulPairs(nums = [2, 4, 6])",
        "countBeautifulPairs(nums = [10, 25, 2, 27])",
        "countBeautifulPairs(nums = [121, 10, 1221, 123])",
        "countBeautifulPairs(nums = [10, 4, 7, 10, 8])",
        "countBeautifulPairs(nums = [16, 64, 90, 124])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [3,2,1,0,4], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [0,1,0,3,2,3], target = 3)",
        "maximumJumps(nums = [3,2,5,0,0,3,1,1,3], target = 1)",
        "maximumJumps(nums = [1,5,6,7,8,9,10,11,12,13], target = 4)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "countBeautifulPairs(nums = [12, 34, 5, 6])",
        "countBeautifulPairs(nums = [12, 34, 56])",
        "countBeautifulPairs(nums = [2, 3, 4])",
        "countBeautifulPairs(nums = [10, 2, 8, 12])",
        "countBeautifulPairs(nums = [100, 2, 5, 20])",
        "countBeautifulPairs(nums = [10, 2, 5, 3, 100, 4])",
        "countBeautifulPairs(nums = [19, 71, 25, 35, 16, 14])"
    ],
    "sample_18": [
        "minLength(\"ABCD\")",
        "minLength(\"ABBA\")",
        "minLength(s = \"AABBCCD\")",
        "minLength(\"ABC\")",
        "minLength(\"BABCD\")",
        "minLength(\"ABCA\")",
        "minLength(s = \"ABABA\")",
        "minLength(s = \"bc\")",
        "minLength(\"AABBC\")",
        "minLength(s = \"bacb\")"
    ],
    "sample_150": [
        "finalString(s = \"hello\")",
        "finalString(s = \"hello\")",
        "finalString(\"python\")",
        "finalString(s = \"picture\")",
        "finalString(s = \"I love python!\")",
        "finalString(s = 'simsing')",
        "finalString(s = \"my name is me\")",
        "finalString(s = \"miesn\")",
        "finalString(s = \"abcdIz\")",
        "finalString(\"my name is astrid\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1,2,3,4])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 2])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "doesValidArrayExist(derived = [0,1,1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, -1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 2])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [2, 4, 7, 1, 4, 3])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 3, 1])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [3, 4, 5, 1, 2])",
        "findValueOfPartition(nums = [1, 0])",
        "findValueOfPartition(nums = [1, 2, 5])",
        "findValueOfPartition(nums = [7, 2, 5, 10])",
        "findValueOfPartition(nums = [2, 3, 1, 3, 4])",
        "findValueOfPartition(nums = [3, 1, 1])",
        "findValueOfPartition(nums = [5, 2, 8, 1, 6, 3])",
        "findValueOfPartition(nums = [4,3,1,0,1,2])"
    ],
    "sample_7": [
        "colorTheArray(n = 4, queries = [[1, 2], [2, 3], [3, 1]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,3],[3,4],[4,5],[0,0]])",
        "colorTheArray(n = 3, queries = [[1,0],[0,0],[2,1],[1,2]])",
        "colorTheArray(n = 6, queries = [[1, 1], [0, 2], [3, 3], [2, 0], [4, 4]])",
        "colorTheArray(n = 5, queries = [[-1, 2], [-2, 0], [0, 4], [4, 0], [4, 4]])",
        "colorTheArray(n = 3, queries = [[-1, 0], [1, 2], [1, 0], [2, 1], [2, 2]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 1], [2, 0], [2, 2], [0, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[-1, 1], [1, 3], [-1, -1], [1, 0], [3, 4]])",
        "colorTheArray(n = 5, queries = [[2,2],[-1,0],[-3,3],[0,-4],[4,1],[1,-1],[1,1],[0,0]])",
        "colorTheArray(n = 10, queries = [[-1, 6], [1, 1], [2, 1], [3, 4], [-1, 8], [4, 2], [3, 9], [-2, -1], [-1, 3], [3, 9]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 4, target = 9)"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 6, k = 3)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 5, k = 1)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 3, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 5, 6, 6], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [3,4,5,6,7,8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 50, 100], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 3, 3, 3, 4, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1], target = 1)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 7)",
        "canSplitArray(nums = [2, 3, 1, 2, 4, 3], m = 3)",
        "canSplitArray(nums = [1, 2, 1], m = 2)",
        "canSplitArray(nums = [1, 2, 3], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [2, 5, 10], m = 8)",
        "canSplitArray(nums = [1, 2, 4, 7, 3], m = 5)",
        "canSplitArray(nums = [2, 5, 2, 3, 5, 10], m = 7)",
        "canSplitArray(nums = [8, 3, 1, 6, 7], m = 9)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 0, 0], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 0, 0, 1, 1, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [0, 2, 1, 1, 0], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [4, 1, 4], m = 6, k = 0)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1, 3, 4, 2], t = 3)",
        "longestAlternatingSubarray(nums = [6, 4, 3, 2], t = 5)",
        "longestAlternatingSubarray(nums = [2, 5, 2, 7, 8], t = 2)",
        "longestAlternatingSubarray(nums = [10,13,14,15,16,17,18,19,20], t = 13)",
        "longestAlternatingSubarray(nums = [1,1,2,3,4,2,2,2,1], t = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 5, 2, 3, 2, 5, 2], t = 3)",
        "longestAlternatingSubarray(nums = [3,3,4,4,4,3,3,4,4,5,5], t = 5)",
        "longestAlternatingSubarray([4,1,3,2,2,2,2,2,2],4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], t = 1)",
        "longestAlternatingSubarray(nums = [6,9,7,5,2,3,9,4,2,1,6,8], t = 3)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,1,1,1,1,1,0,1,1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(\"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"0512301\")",
        "removeTrailingZeros(num = \"100000\")",
        "removeTrailingZeros(num = \"52301\")",
        "removeTrailingZeros(num = \"5001\")",
        "removeTrailingZeros(\"102300\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 5, b = 3)",
        "makeTheIntegerZero(a = 9, b = 3)",
        "makeTheIntegerZero(a = 9, b = 3)",
        "makeTheIntegerZero(a = 8, b = 3)",
        "makeTheIntegerZero(a = 4, b = 2)",
        "makeTheIntegerZero(a = 2, b = 3)",
        "makeTheIntegerZero(a = 13, b = 5)",
        "makeTheIntegerZero(a = 9, b = 7)",
        "makeTheIntegerZero(a = 16, b = 11)",
        "makeTheIntegerZero(a = 983, b = 456)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 1, 2], m = 2)",
        "canSplitArray(nums = [2, 5, 2, 1, 2], m = 5)",
        "canSplitArray(nums = [1, 2, 1, 1], m = 1)",
        "canSplitArray(nums = [2, 2, 5, 1, 2], m = 4)",
        "canSplitArray(nums = [1, 3, 2, 2, 5], m = 4)",
        "canSplitArray(nums = [10, 2, 5, 3, 4, 7], m = 7)",
        "canSplitArray(nums = [5, 10, 3, 1, 2], m = 9)"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [10, 20, 30, 40])",
        "maxSum(nums = [2, 5, 2])",
        "maxSum(nums = [5, 2, 3])",
        "maxSum(nums = [5, 5, 5, 5, 5, 5])",
        "maxSum(nums = [-1, -10, 5, 2])",
        "maxSum([1, 2, 3, 10, 11, 12])",
        "maxSum([4, 6, 6])",
        "maxSum(nums = [10, 10, 10, 10, -1, 10, -1])",
        "maxSum(nums = [23, 5, 43, 6, 9, 8])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 4, target = 4)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n=3, target=4)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n=2, target=4)",
        "minimumPossibleSum(n = 5, target = 5)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,3])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [1,2])",
        "findValueOfPartition(nums = [0,1,0])",
        "findValueOfPartition(nums = [1,4,4])",
        "findValueOfPartition(nums = [0,1,2,4,7])",
        "findValueOfPartition(nums = [2,5,3,4,1,7])",
        "findValueOfPartition(nums = [1,1,3,6])",
        "findValueOfPartition(nums = [3,5,0,7])",
        "findValueOfPartition(nums = [1,10,4,1,5])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[0,2],[4,6],[7,9]])",
        "numberOfPoints(nums = [[1,2],[4,5],[7,9]])",
        "numberOfPoints(nums = [[0, 1], [2, 5], [8, 12]])",
        "numberOfPoints(nums = [[1,2],[2,4],[2,3]])",
        "numberOfPoints(nums = [[1,2],[2,3],[4,5],[1,2]])",
        "numberOfPoints(nums = [[1,2],[4,5],[7,8],[10,12]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [6, 7], [9, 10]])",
        "numberOfPoints([[0,2],[2,4],[2,6]])",
        "numberOfPoints([[0,2],[3,4],[0,4],[1,3],[0,1],[2,4]])",
        "numberOfPoints(nums = [[0, 2], [2, 4], [7, 8], [8, 10], [10, 13]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,2],[2,3]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [0, 6]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [2, 3]])",
        "numberOfPoints(nums = [[2, 3], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [0, 7]])",
        "numberOfPoints(nums = [[1, 4], [2, 3], [7, 9]])",
        "numberOfPoints(nums = [[0, 2], [3, 4], [0, 1], [1, 2]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = '_')"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3], target = 6)",
        "minOperations(nums = [1, 2, 3, 4], target = 5)",
        "minOperations(nums = [1, 3, 5], target = 6)",
        "minOperations(nums = [1, 2, 5], target = 7)",
        "minOperations(nums = [1,2,3,4,5], target = 9)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 16)",
        "minOperations(nums = [3, 2, 3, 4], target = 6)",
        "minOperations(nums = [7, 13, 6], target = 13)",
        "minOperations(nums = [2,1,3,4,2,4], target = 6)",
        "minOperations([6,2,2,2,3,2], 8)"
    ],
    "sample_107": [
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [3, 4, -1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [1,1,1,1], k = 3)",
        "checkArray(nums = [1, 3, -1], k = 2)",
        "checkArray(nums = [1, 2, 1], k = 1)",
        "checkArray(nums = [4,3,2,7,0,1], k = 4)",
        "checkArray(nums = [4,2,4,1,3], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [4, 2, -4, 1, -1], k = 5)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1,1,1,1,0])"
    ],
    "sample_159": [
        "maxSum(nums = [10,2])",
        "maxSum(nums = [10,2])",
        "maxSum(nums = [10,2])",
        "maxSum([1,2,3])",
        "maxSum(nums = [3,30,34,5,9])",
        "maxSum(nums = [12, 34, 56])",
        "maxSum(nums = [2, 3, 5, 7, 11])",
        "maxSum(nums = [7, 19, 2])",
        "maxSum(nums = [10, 11, 13, 7])",
        "maxSum(nums = [23, 22, 4, 34, 32, -2, -3, 1])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,3,4,5])",
        "continuousSubarrays(A = [1,2,2,3,1])",
        "continuousSubarrays(A = [1, 2, 2, 3, 1])",
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1,2,3,2,1])",
        "continuousSubarrays(A = [1,2,2,3,1,4,2])",
        "continuousSubarrays(A = [3, 2, 2, 3])",
        "continuousSubarrays(A = [0,1,0,1,0,1])",
        "continuousSubarrays(A = [4, 4, 4, 5, 5, 6, 6, 6])",
        "continuousSubarrays(A = [1,1,2,3,3,4,4,4,3,2,1])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1,2,1])",
        "distinctDifferenceArray(nums = [1,2,2,3,1])",
        "distinctDifferenceArray(nums = [0, 1, 2, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [4,2,2,4])",
        "distinctDifferenceArray(nums = [0,1,0,1,0])",
        "distinctDifferenceArray(nums = [3, 6, 9])",
        "distinctDifferenceArray([1,1,1])",
        "distinctDifferenceArray(nums = [2, 2, 1, 2, 1])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3], b = [4, 5, 6])",
        "maxNonDecreasingLength(a = [1, 2, 3], b = [3, 4, 5])",
        "maxNonDecreasingLength(a = [1,2,3], b = [1,3,4])",
        "maxNonDecreasingLength(a = [4, 3, 2, 5], b = [5, 4, 3, 6])",
        "maxNonDecreasingLength(a = [2, 4, 5, 7], b = [1, 3, 6, 8, 9])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5, 6], b = [3, 6, 7, 8, 9])",
        "maxNonDecreasingLength(a = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4], b = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])",
        "maxNonDecreasingLength(a = [2, 5, 4, 1, 3], b = [3, 2, 1, 5, 6, 4])",
        "maxNonDecreasingLength(a = [2, 3, 5, 0, 3, 4, 2], b = [9, 8, 7, 6, 5, 4, 3])",
        "maxNonDecreasingLength(a = [2, 4, 5, 1, 3], b = [4, 4, 4, 5, 1, 2])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 4)",
        "distanceTraveled(mainTank = 5, additionalTank = 6)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 9, additionalTank = 4)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 8)",
        "distanceTraveled(mainTank = 12, additionalTank = 2)"
    ],
    "sample_160": [
        "maxSum(nums = [10, 2])",
        "maxSum([12, 34, 56, 78, 9])",
        "maxSum(nums = [9, 10, 2])",
        "maxSum(nums = [20, 2, 22])",
        "maxSum(nums = [23, 2, 4, 32, 8])",
        "maxSum(nums = [12,23,34,45,56,67,78,89,90,12,23,34,45,56,67,78,89])",
        "maxSum([11,21,12,21,12])",
        "maxSum(nums = [34, 23, 23, 4, 46, 4])",
        "maxSum(nums = [23,2,5,15,34])",
        "maxSum(nums = [20, 20, 100, 50, 4, 5])"
    ],
    "sample_52": [
        "smallestString(s = 'kdsbncd')",
        "smallestString('aab')",
        "smallestString(\"bbbba\")",
        "smallestString('ddz')",
        "smallestString(s = \"abb\")",
        "smallestString(\"abcd\")",
        "smallestString(\"abcd\")",
        "smallestString('ab')",
        "smallestString(\"ab\")",
        "smallestString(\"abcd\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [4, 2, 1, 3])",
        "findValueOfPartition(nums = [2, 7, 11, 15])",
        "findValueOfPartition(nums = [4, 3, 2, 1])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [10, 9, 2, 5, 3, 7, 101])",
        "findValueOfPartition(nums = [10, 1, 2, 4, 7, 3])",
        "findValueOfPartition(nums = [2, 4, 7, 5, 1])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = \"aab\")",
        "makeSmallestPalindrome(\"race\")",
        "makeSmallestPalindrome(\"race\")",
        "makeSmallestPalindrome(s = \"cdc\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 4)",
        "makeTheIntegerZero(num1 = 60, num2 = 38)",
        "makeTheIntegerZero(num1 = 1000, num2 = 9)",
        "makeTheIntegerZero(num1 = -4, num2 = -2)",
        "makeTheIntegerZero(num1 = 1234567, num2 = 87654321)",
        "makeTheIntegerZero(num1 = 120, num2 = 123)",
        "makeTheIntegerZero(num1 = 130, num2 = 3)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[2,3],[4,6],[7,9]])",
        "numberOfPoints(nums = [[2,4],[8,10],[15,18]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [4, 5]])",
        "numberOfPoints([[1,2], [2,3], [3,4]])",
        "numberOfPoints(nums = [[0,1], [2,4]])",
        "numberOfPoints(nums = [[3,7],[2,5]])",
        "numberOfPoints([[2,3],[4,6],[7,10]])",
        "numberOfPoints([[1,2], [3,4], [3,4]])",
        "numberOfPoints(nums = [[1,3],[2,4],[2,6],[3,5],[5,7]])",
        "numberOfPoints(nums = [[0, 2], [1, 4], [3, 5], [6, 10], [8, 12]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 2, 2, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [4, 4, 4], m = 4, k = 0)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [0, 3, 2, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [5, 0, 2, 4], m = 6, k = 2)"
    ],
    "sample_40": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(\"aba\")",
        "minimumCost(\"aba\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"google\")",
        "minimumCost(s = \"baba\")",
        "minimumCost(\"cab\")",
        "minimumCost(s = \"eefg\")",
        "minimumCost(\"ababcababcababca\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6])",
        "doesValidArrayExist(derived = [2, 2, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [2,3,4,5])",
        "doesValidArrayExist(derived = [1, 2, 0, 1, 3, 1, 0])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3])",
        "distinctDifferenceArray(nums = [1, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1])",
        "distinctDifferenceArray(nums = [1,1,2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [3, 3, 2, 3])",
        "distinctDifferenceArray(nums = [2, 1, 2, 4, 3])",
        "distinctDifferenceArray(nums = [4, 1, 2, 2, 1, 4])",
        "distinctDifferenceArray(nums = [-1, 1, 2, 2, 3, 1, 4, 2])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 1, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 7, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 6, 8, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 8, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [7,8,6,9,10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 5, 3, 2, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3,2,1,2,2,3,4], target = 2)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"aacecaaa\")",
        "makeSmallestPalindrome(s = \"a\")",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome('aab')",
        "makeSmallestPalindrome(s = \"anada\")",
        "makeSmallestPalindrome(\"naic\")",
        "makeSmallestPalindrome('cee')",
        "makeSmallestPalindrome(s = \"a\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = \"55512301\")",
        "removeTrailingZeros(\"123010\")",
        "removeTrailingZeros(num = \"12301001\")",
        "removeTrailingZeros(\"1234\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,1,2,1,2], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,1,1,1,1], m = 1, k = 1)",
        "countInterestingSubarrays(nums = [2,3,4], m = 5, k = 2)",
        "countInterestingSubarrays([0, 1, 0, 3, 2, 3], 3, 1)",
        "countInterestingSubarrays([2,2,3,3,2,2],2,1)",
        "countInterestingSubarrays(nums = [5,1,1,5], m=2, k=0)",
        "countInterestingSubarrays([4, 6, 4, 6, 4, 6, 4, 6, 4, 6], 4, 2)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 4, additionalTank = 7)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 9, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 9)",
        "distanceTraveled(mainTank = 5, additionalTank = 12)",
        "distanceTraveled(mainTank = 4, additionalTank = 11)",
        "distanceTraveled(mainTank = 12, additionalTank = 10)",
        "distanceTraveled(mainTank = 11, additionalTank = 1)",
        "distanceTraveled(mainTank = 20, additionalTank = 2)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4], x = 3)",
        "minCost(A = [1, 2, 3, 4], x = 3)",
        "minCost(A = [1, 2, 3, 4], x = 4)",
        "minCost(A = [1, 1, 1], x = 2)",
        "minCost(A = [4, 3, 2, 1, 2], x = 2)",
        "minCost(A = [2, 4, 5, 5], x = 2)",
        "minCost(A = [1,4,5,6,7], x = 3)",
        "minCost([4,1,2,3], 3)",
        "minCost(A = [3, 4, 2, 1, 3, 5], x = 2)",
        "minCost(A = [10, 2, 5, 7, 9, 3, 1], x = 7)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 3, 7, 9, 10])",
        "maxIncreasingGroups(u = [1, 3, 2, 4, 6, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 1, 2, 3, 4])",
        "maxIncreasingGroups(u = [1, 2, 4, 4])",
        "maxIncreasingGroups(u = [1,2,3,4,1,2])",
        "maxIncreasingGroups(u = [1, 3, 2, 4, 4])",
        "maxIncreasingGroups(u = [1, 3, 6, 1, 2, 4])",
        "maxIncreasingGroups(u = [1, 5, 3, 4, 5, 5])",
        "maxIncreasingGroups(u = [1, 3, 5, 8, 1, 2])",
        "maxIncreasingGroups(u = [2, 5, 2, 7, 7, 7, 2, 4])"
    ],
    "sample_110": [
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [0, 1, 2, 3, 4], k = 2)",
        "checkArray(nums = [0, 0, 0, 0], k = 2)",
        "checkArray(nums = [1, -1, 2, -2], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 4)",
        "checkArray(nums = [4, 2, 1, -2, -3], k = 3)",
        "checkArray(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3], k = 2)",
        "checkArray(nums = [3, 0, 0, 3, 0, 0, 3], k = 3)",
        "checkArray(nums = [-4, -2, 2, 1, 3], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = 'ABCD')",
        "minLength(s = 'ABCD')",
        "minLength(s = \"abcd\")",
        "minLength(\"ABCDABC\")",
        "minLength(s = \"ABBABCD\")",
        "minLength(s = \"ABABBCC\")",
        "minLength('abcb')",
        "minLength(s
        "minLength(\"abc\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,2,3], target = 7)",
        "minOperations(nums = [2,4,6], target = 5)",
        "minOperations(nums = [1,2,3,4], target = 8)",
        "minOperations(nums = [1,2,4,8], target = 15)",
        "minOperations(nums = [2,1,5], target = 6)",
        "minOperations(nums = [4, 2, 2, 1], target = 3)",
        "minOperations(nums = [3, 5], target = 10)",
        "minOperations(nums = [1,2,5,10,20], target = 6)",
        "minOperations([1,4,5,7], 16)",
        "minOperations([6, 2, 8, 7], 15)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"ba\", \"nana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ba\", \"na\", \"na\"], separator = \"n\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\"], separator = \"n\")",
        "splitWordsBySeparator(words = [\"\", \"\", \"\"])",
        "splitWordsBySeparator(words = [\"the\", \"quick\", \"brown\", \"fox\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"ba\", \"banana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"1\", \"2\", \"3\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"This\", \"is\", \"my\", \"sentence\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"Hi,my name is\", \"James\"], separator = \",\")"
    ],
    "sample_54": [
        "smallestString(s = 'banana')",
        "smallestString(\"abacd\")",
        "smallestString(s = \"babac\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(\"acda\")",
        "smallestString(s = \"azbzc\")",
        "smallestString('abacad')",
        "smallestString(s = \"abacbddc\")",
        "smallestString(\"abbbaabab\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"____\")",
        "furthestDistanceFromOrigin(moves = \"LR_LRLR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"__LR__\")",
        "furthestDistanceFromOrigin(moves = \"___LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLR\")",
        "furthestDistanceFromOrigin(moves = '_L__R__R__')",
        "furthestDistanceFromOrigin(moves = \"L_R_LLL\")",
        "furthestDistanceFromOrigin(moves = \"____R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"__\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 16, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 9)",
        "makeTheIntegerZero(num1 = 42, num2 = 9)",
        "makeTheIntegerZero(num1 = 3, num2 = -4)",
        "makeTheIntegerZero(num1 = 500, num2 = 999)",
        "makeTheIntegerZero(num1 = int('1111', 2), num2 = int('11', 2))"
    ],
    "sample_51": [
        "smallestString(s = \"ba\")",
        "smallestString(s = 'aa')",
        "smallestString(s = \"bac\")",
        "smallestString(s = 'abba')",
        "smallestString(s = \"aaaxxxbaa\")",
        "smallestString(s = \"baaaaa\")",
        "smallestString(s = \"daab\")",
        "smallestString(\"aaa\")",
        "smallestString(s = \"a\")",
        "smallestString('a' * 0 + 'b' * 0)"
    ],
    "sample_146": [
        "finalString(s = \"peter\")",
        "finalString(s = 'ipont')",
        "finalString(s = 'pontere')",
        "finalString(s = \"iPython\")",
        "finalString(s = 'onp')",
        "finalString(\"inponter\")",
        "finalString(s = \"I am a human\")",
        "finalString(s = \"iioni\")",
        "finalString(s = \"IceCream\")",
        "finalString(s = \"darn\" )"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [2,2,1,1,1,2,2], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,1,1,2], k = 2)",
        "longestEqualSubarray(nums = [1,0,1,1,0], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 1, 3, 4, 3], k = 2)",
        "longestEqualSubarray(nums = [4, 4, 4, 4, 5, 5, 5, 4, 4, 4], k = 3)",
        "longestEqualSubarray(nums = [4, 4, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4], m = 5)",
        "canSplitArray(nums = [4, 3, 2, 3, 5, 2], m = 5)",
        "canSplitArray(nums = [1,3,2,2,3,1], m = 3)",
        "canSplitArray(nums = [2,5,2,3,5], m = 7)",
        "canSplitArray(nums = [10, 20, 30], m = 35)",
        "canSplitArray(nums = [10, 2, 5, 3, 9], m = 10)",
        "canSplitArray(nums = [1,1,1,1,1,1], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 1, 1], m = 1)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [2,1,2])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one','two','three','four','five','six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one-two\", \"three-four\", \"five-six\"], separator = \"-\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 7, 8, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 6, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 6, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 3, 4, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 6, 9, 9], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [5,3,5,6,8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 1, 7, 2, 8], target = 10)"
    ],
    "sample_168": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"ABC\")",
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"ABC\")",
        "isAcronym(words = [\"ba\", \"na\", \"na\"], s = \"banana\")",
        "isAcronym(words = [\"ab\", \"cd\", \"ef\"], s = \"abc\")",
        "isAcronym(words = [\"i\", \"love\", \"python\"], s = \"ilpy\")",
        "isAcronym(words = [\"USA\", \"UAE\", \"UK\"], s = \"US\")",
        "isAcronym(words = [\"Blue\", \"Loud\", \"Laugh\"], s = \"BLLL\")",
        "isAcronym(words = [\"cloud\", \"Intelligence\", \"Services\"], s = \"CIS\")",
        "isAcronym(words = [\"NAL\", \"WCC\", \"SWC\", \"KCC\"], s = \"NWC\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"North\", \"Atlantic\", \"Treaty\"], s = \"NATO\")",
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\"], s = \"baNA\")",
        "isAcronym(words = [\"abcd\", \"xyz\"], s = \"abcd\")",
        "isAcronym(words = [\"Welcome\", \"to\", \"Python\"], s = \"Wtp\")",
        "isAcronym(words = [\"apple\", \"bacon\"], s = \"ab\")",
        "isAcronym(words = [\"A\",\"n\",\"n\",\"a\",\"b\"], s = \"ab\")",
        "isAcronym(words = [\"my\", \"name\", \"is\", \"Anna\"], s = \"Mary\")",
        "isAcronym(words = [\"northeast\", \"bay\"])"
    ],
    "sample_41": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abaca\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(\"abaca\")",
        "minimumCost(\"abcda\")",
        "minimumCost(s = \"abcbb\")",
        "minimumCost(\"ABABAB\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,1,0,1,0,1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,1,1,1,1,1,1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abca\")",
        "makeSmallestPalindrome(s = \"abca\")",
        "makeSmallestPalindrome(s = \"abca\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abca\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"bac\")"
    ],
    "sample_50": [
        "smallestString(\"baaab\")",
        "smallestString(s = \"aabaab\")",
        "smallestString(s = \"abaaab\")",
        "smallestString(\"aaab\")",
        "smallestString(s = \"babab\")",
        "smallestString(s = \"a\"*7)",
        "smallestString(s = 'a'*5)",
        "smallestString(\"ba\")",
        "smallestString(s = 'aaaaaa')",
        "smallestString(\"abcaaaab\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 5, 9, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 4, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 5, 8, 11, 15], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 10, 5, 1, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 10, 11, 5, 6, 7], k = 2)"
    ],
    "sample_20": [
        "minLength(\"abcde\")",
        "minLength(s = \"ABCAB\")",
        "minLength(s = \"AABA\")",
        "minLength(s = \"aabc\")",
        "minLength(s = \"AAABBBCCDDEEE\")",
        "minLength(s = \"hijkl\")",
        "minLength(\"ababb\")",
        "minLength(s = \"cdcdcd\")",
        "minLength(s = \"cad\"))",
        "minLength(s = \"aABBCCDabcd\")"
    ],
    "sample_158": [
        "maxSum(nums = [3, 30, 34, 5, 9])",
        "maxSum(nums = [9, 9, 9])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [12, 34, 56])",
        "maxSum(nums = [0,0,0])",
        "maxSum(nums = [10, 20, 3, 4, 5])",
        "maxSum(nums = [10, 2, 5, 1, 7, 9])",
        "maxSum([-10, 1, 2, 3, 4])",
        "maxSum(nums = [0, -2, -10, 2, 10])",
        "maxSum(nums = [-10, -5, -5, -2, -3, -3])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [0, 1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [1,2])",
        "semiOrderedPermutation(nums = [1, 0])",
        "semiOrderedPermutation(nums = [1, 3, 1])"
    ],
    "sample_162": [
        "maxSum(nums = [3, 30, 34, 5, 9])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "maxSum(nums = [1, 2, 3, 4, 5, 9, 9])",
        "maxSum(nums = [1,2,7,8,9,10])",
        "maxSum(nums = [10, 9, 2, 6, 7, 5, 1, 8, 19, 18])",
        "maxSum(nums = [4, 6, 99, 4])",
        "maxSum(nums = [123, 2, 6, 1, 100, 6])",
        "maxSum(nums = [75, 3, 5, 5, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4",
        "maxSum(nums = [2, 4, 14, 21, 22, 27, 28, 42, 56, 70, 78, 83, 94])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"10\")",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = \"0011\")",
        "maximumOddBinaryNumber(s = \"0011\")",
        "maximumOddBinaryNumber(s = '10110')",
        "maximumOddBinaryNumber(s = 'b')",
        "maximumOddBinaryNumber(s = '00110')",
        "maximumOddBinaryNumber(s = \"aaabbb\")",
        "maximumOddBinaryNumber(s = '1010101010101010101010')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1, 2, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 7], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 6, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 7, 3, 6, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 5, 4, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 6, 9, 8, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 9, 12, 10, 9], target = 10)"
    ],
    "sample_166": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"United\", \"Nations\"], s = \"UN\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cherry\"], s = \"ABC\")",
        "isAcronym(words = [\"International\", \"Business\", \"Machines\"], s = \"IBM\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"USA\", \"UK\"], s = \"USUK\")",
        "isAcronym(words = [\"alpha\", \"beta\", \"gamma\"], s = \"abc\")",
        "isAcronym(words = [\"be\", \"a\", \"cat\"], s = \"bac\")",
        "isAcronym(words = [\"woof\", \"meow\"], s = \"woofmeow\")",
        "isAcronym(words = [\"Aeronautical\", \"Moth\", \"Rescue\", \"Cape\"], s = \"AMRC\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank=4, additionalTank=5)",
        "distanceTraveled(mainTank = 6, additionalTank = 4)",
        "distanceTraveled(mainTank=3, additionalTank=0)",
        "distanceTraveled(mainTank=1, additionalTank=4)",
        "distanceTraveled(mainTank=10, additionalTank=1)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1,2,3,4])",
        "maxIncreasingGroups(A = [1,2])",
        "maxIncreasingGroups(A = [1, 2, 3, 1])",
        "maxIncreasingGroups(A = [1,3,2,2,1])",
        "maxIncreasingGroups(A = [1, 3, 7, 2, 5])",
        "maxIncreasingGroups(A = [3, 5, 6, 4])",
        "maxIncreasingGroups(A = [4, 1, 2])",
        "maxIncreasingGroups(A = [1, 5, 10, 8])",
        "maxIncreasingGroups(A = [2, 4, 3, 4, 5])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [-3, -1, 1, 3, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1, 4, 2])",
        "distinctDifferenceArray(nums = [1,2,2,3,4])",
        "distinctDifferenceArray(nums = [-3, 1, -3, 4, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 4])",
        "distinctDifferenceArray(nums = [4, 2, 3, 0, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 1, 4, 2, 3])",
        "distinctDifferenceArray(nums = [5, 2, 7, 9, 3, 1])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 4)",
        "distanceTraveled(mainTank = 5, additionalTank = 4)",
        "distanceTraveled(mainTank = 5, additionalTank = 4)",
        "distanceTraveled(mainTank = 2, additionalTank = 4)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays([1,2,1])",
        "countCompleteSubarrays(nums = [1,1,2,3,4,2])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 5, 7, 11], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 6, 1, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 7, 9, 11, 13], k = 1)",
        "sumIndicesWithKSetBits(nums = [10, 20, 30, 40], k = 1)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aab\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"ab\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(\"aab\")",
        "minimizedStringLength(\"abc\")",
        "minimizedStringLength(s = \"aabb\")",
        "minimizedStringLength(s = \"bba\")",
        "minimizedStringLength(\"abb\")",
        "minimizedStringLength(\"bbbb\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,1,2,1,2], k = 3)",
        "longestEqualSubarray(nums = [2,2,2,2,2,2,2,2,2,2], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [4,4,4,4,4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 2, 1, 2, 3, 4], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,2,2,2,2,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,1,1,1,1,2,2,2], k = 3)",
        "longestEqualSubarray(nums = [1,1,1,2,1,2,2,2,3,3,4,4,1], k = 2)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 1], [3, 1], [4, 0]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 0], [3, 0], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1],[1, 3],[2, 3]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 0], [2, 1], [1, 2], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 2], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 3], [1, 3], [2, 4], [3, 3], [4, 4]])",
        "colorTheArray(n = 6, queries = [[0,2],[2,4],[4,5],[1,3],[3,5]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,1],[4,1],[1,1],[3,1],[2,1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [2, 3], [3, 3], [4, 3], [4, 4], [4, 4]])",
        "colorTheArray(n = 4, queries = [[0,1],[2,2],[3,3],[3,3],[1,2],[3,2]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2,1,3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [6,5,7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 3, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [11, 12, 13, 14, 15], target = 14)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 4, 6, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 9, 9, 10, 9], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,1,0,2], target = 1)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [2, 4, 6, 8])",
        "countBeautifulPairs(nums = [10, 12, 15])",
        "countBeautifulPairs(nums = [123, 321, 456, 654, 789])",
        "countBeautifulPairs(nums = [10, 15, 25])",
        "countBeautifulPairs(nums = [3, 9, 10, 12])",
        "countBeautifulPairs(nums = [5, 11, 10, 9, 7])",
        "countBeautifulPairs(nums = [12,21,102,121,132])",
        "countBeautifulPairs(nums = [121, 343, 18, 788, 788, 18])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [1,3,5,6])",
        "countWays(nums = [0,1,2,2])",
        "countWays(nums = [0, 0, 1, 1])",
        "countWays(nums = [1, 2, 2, 1, 1])",
        "countWays(nums = [3,4,5,6,7])",
        "countWays(nums = [1, 3, 6, 7, 7])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = '11011')",
        "maximumOddBinaryNumber(s = '000111')",
        "maximumOddBinaryNumber(s = \"0101\")",
        "maximumOddBinaryNumber(s = \"0101\")",
        "maximumOddBinaryNumber(s = \"10101011\")",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"1010101010101010101010101010101010101010101010101010\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 3, 2, 4], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 5, 4], k = 2)",
        "maximumBeauty(nums = [1, 3, 1], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6, 7, 8], k = 1)",
        "maximumBeauty(nums = [1, 5, 4, 9, 2, 7], k = 3)",
        "maximumBeauty(nums = [3, 4, 6, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1, 7, 3, 6, 5, 8, 4, 9, 2], k = 2)",
        "maximumBeauty(nums = [1,4,1,4,7,1,4,2], k = 3)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 0, -1])",
        "maximumTripletValue([1, 2, 3])",
        "maximumTripletValue(nums = [3, 1, 4, 2])",
        "maximumTripletValue(nums = [1, 2, 1, 2])",
        "maximumTripletValue(nums = [1, 5, 2])",
        "maximumTripletValue(nums = [1, 6, 3, 4, 2])",
        "maximumTripletValue(nums = [10, 2, 5, 1, 0])",
        "maximumTripletValue(nums = [-1,2,3,-4,5])"
    ],
    "sample_98": [
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 2)",
        "maximumJumps(nums = [1,3,5,8,9,2,6,7], target = 2)",
        "maximumJumps(nums = [3, 4, 2, 1, 3], target = 1)",
        "maximumJumps(nums = [0, 1, 0, 0, 0], target = 1)",
        "maximumJumps(nums = [1, 3, 5, 6], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 9, 2], target = 5)",
        "maximumJumps(nums = [1, 5, 10, 15, 20, 25, 30, 35, 40], target = 15)",
        "maximumJumps(nums = [2, 1, 1, 3, 0, 0, 4], target = 3)",
        "maximumJumps(nums = [3, 4, 2, 1, 2, 7, 7, 1, 7], target = 9)"
    ],
    "sample_149": [
        "finalString(\"rtsng\")",
        "finalString(s = \"RTSNG\")",
        "finalString(s = \"tsing\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"RTSNg\")",
        "finalString(\"The quick brown fox jumped over the lazy dog\")",
        "finalString(\"lmao\")",
        "finalString(s = \"I was sad\")",
        "finalString(s = \"hlligit\")",
        "finalString(s = \"i aana ani i\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1,2,3])",
        "continuousSubarrays(A = [1,2,3,4])",
        "continuousSubarrays(A = [1, 2, 1])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4])",
        "continuousSubarrays(A = [1,3,2,2,3,1])",
        "continuousSubarrays(A = [1,2,2,1])",
        "continuousSubarrays(A = [1, 0, 1, 0])",
        "continuousSubarrays([1,1,2,2,2])",
        "continuousSubarrays(A = [5, 1, 5, 2, 5])",
        "continuousSubarrays(A = [4,3,2,2,3,1,1,2])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 1, 1])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [3,1,5,1,3])"
    ],
    "sample_228": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [0,1,2,3])",
        "countWays(nums = [2, 1, 4, 3])",
        "countWays(nums = [1,2,2,4])",
        "countWays(nums = [2, 3, 1, 1, 4])",
        "countWays(nums = [4,1,2,1])",
        "countWays(nums = [0, 3, 1, 3, 4])",
        "countWays(nums = [3, 0, 5, 2])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 4], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 3, 1], k = 1)",
        "maximumBeauty(nums = [1, 1, 1, 1, 1, 1], k = 1)",
        "maximumBeauty(nums = [2,1,5,3,2], k = 1)",
        "maximumBeauty(nums = [2, 1, 3, 4, 3, 2], k = 3)",
        "maximumBeauty(nums = [2, 1, 5, 3, 4, 2], k = 2)",
        "maximumBeauty(nums = [3, 5, 1, 4, 7], k = 1)",
        "maximumBeauty(nums = [4, 2, 3, 1, 7, 6], k = 1)",
        "maximumBeauty(nums = [4, 3, 2, 4, 3, 2, 5, 6, 2, 5, 6, 7, 9, 8, 4, 9, 6, 3, 7, 6, 4, 9, 5, 5, 8, 7, 5, 4, 8, 4, 9, 5, 8, 6, 3, 7, 7, 8, 6, 9, 4, 5, 7, 7, 4, 2, 9, 5, 8, 7, 2, 7, 6, 2, 5, 3, 7, 7, 4, 6, 9, 3, 5, 8, 9, 4, 6, 6, 7, 2, 6, 5, 9, 9, 7, 9, 6, 5, 6, 4, 4, 5, 7, 5, 4, 2, 8, 6, 4, 2, 4, 6, 7, 5, 5, 7, 6, 5, 7, 4, 6, 8, 6, 8, 5, 7, 7, 3, 8, 9, 4, 6, 7, 8, 5, 7, 9, 3, 4, 9, 7, 6, 9, 6, 4, 8, 5, 7, 7, 4, 7, 7, 5, 2, 8, 7, 4, 5, 7, 7, 2, 6, 5, 3, 7, 7, 8, 5, 4, 2, 5, 9, 5, 8, 7, 2, 6, 5, 9, 5, 5, 7, 7, 4, 6, 9, 3, 5, 8, 9, 4, 6, 6, 7, 2, 6, 5, 9, 9, 7, 9, 6, 5, 6, 4, 4, 5, 7, 5, 4, 2, 8, 6, 4, 2, 4, 6, 7, 5, 5, 7, 6, 5, 7, 4, 6, 8, 6, 8, 5, 7, 7, 3, 8, 9, 4, 6, 7, 8, 5, 7, 9, 3, 4, 9, 7, 6, 9, 6, 4, 8, 5, 7, 7, 4, 7, 7, 5, 2, 8, 7, 4, 5, 7, 7, 2, 6, 5, 3, 7, 7, 8, 5, 4, 2, 5, 9, 5, 8, 7, 2, 6, 5, 9, 5, 5, 7, 7, 4, 6, 9, 3, 5, 8, 9, 4, 6, 6, 7, 2, 6, 5, 9, 5, 5, 7, 7, 4, 7, 7, 5, 2, 8, 6, 4, 2, 4, 6, 7"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(a = [3, 1, 4, 1, 5])",
        "distinctDifferenceArray(a = [1, 3, 5])",
        "distinctDifferenceArray(a = [1, 3, 2, 5, 4])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(a = [1, 3, 3, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 1, 3, 5])",
        "distinctDifferenceArray(a = [-2, -1, 2, 1])",
        "distinctDifferenceArray(a = [-1, 1, 2, 5, 3])",
        "distinctDifferenceArray(a = [1, 1, 3, 1, 1, 1])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3])",
        "continuousSubarrays(a = [1,2,3,4,5])",
        "continuousSubarrays(a = [1, 2, 3])",
        "continuousSubarrays(a = [1, 2, 1])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(a = [1,1,1,2,2,1])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1,1,1,2,1,2])",
        "continuousSubarrays(a = [1,2,1,2,3,4,1])",
        "continuousSubarrays(a = [2, 3, 4, 4, 5, 5])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1,2,3])",
        "continuousSubarrays(nums = [1,2,3])",
        "continuousSubarrays(nums = [1,2,3,1])",
        "continuousSubarrays(nums = [1, 3, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(nums = [1,2,3,2,3])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 2, 2, 3, 4, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 4, 7, 7, 9])",
        "continuousSubarrays([-4, -1, -2, -2, -3])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [10, 11, 12, 13])",
        "countBeautifulPairs(nums = [1,2,3,4,5,6])",
        "countBeautifulPairs(nums = [12, 13, 15])",
        "countBeautifulPairs(nums = [13, 17, 31, 7])",
        "countBeautifulPairs(nums = [3, 4, 5, 12, 13, 14])",
        "countBeautifulPairs(nums = [30, 33, 34, 35, 36, 39])",
        "countBeautifulPairs(nums = [123, 5, 6, 7, 8, 10])",
        "countBeautifulPairs(nums = [4, 13, 3, 6, 11, 8])",
        "countBeautifulPairs(nums = [12, 34, 12, 15, 18, 5])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [2,1,2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1,2,2])",
        "semiOrderedPermutation(nums = [4,1,2,3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1,2,1,2])",
        "semiOrderedPermutation(nums = [4, 2, 1])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 2, 2, 1])",
        "semiOrderedPermutation(nums = [1, 2, 2, 1])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1, 1, 2, 3])",
        "semiOrderedPermutation(nums = [4,3,2,1])",
        "semiOrderedPermutation(nums = [1, 2, 2, 3, 3, 3])",
        "semiOrderedPermutation(nums = [4, 3, 2, 7, 1])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits([1, 0, 0, 1])",
        "numberOfGoodSubarraySplits([1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,1,1,1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = '10110')",
        "maximumOddBinaryNumber(s = \"0\")",
        "maximumOddBinaryNumber(s = \"10\")",
        "maximumOddBinaryNumber(s = \"10\")",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = '01011')",
        "maximumOddBinaryNumber(s = \"1000101010\")",
        "maximumOddBinaryNumber(s = '101010111011')"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays(nums = [1,1,1,1])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [0,1,2,0,1,1,2,3])"
    ],
    "sample_23": [
        "minLength(s = \"ABCD\")",
        "minLength(\"ABC\")",
        "minLength(s=\"ABCDE\")",
        "minLength(s = \"ABCB\")",
        "minLength(\"AABBCCDDD\")",
        "minLength(\"ABCBAC\")",
        "minLength(s = \"CDBA\")",
        "minLength(s = \"AABCAB\")",
        "minLength(s = \"ABBABCABA\")",
        "minLength(s=\"ABADCB\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,1,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [0,1,2])",
        "countCompleteSubarrays(nums = [1,1,2,3,3,3])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3, 0, 1, 2, 3])",
        "countCompleteSubarrays([0,1,2,2,3,0,4,2])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 5)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 9, num2 = 2)",
        "makeTheIntegerZero(num1 = 20, num2 = 3)",
        "makeTheIntegerZero(num1 = 1, num2 = 5)",
        "makeTheIntegerZero(num1 = 19, num2 = 3)",
        "makeTheIntegerZero(num1 = 54, num2 = 7)"
    ],
    "sample_100": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 4, 2, 3], target = 2)",
        "maximumJumps(nums = [3,2,1,0,4], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 1)",
        "maximumJumps(nums = [2, 5, 0, 1, 9, 3], target = 5)",
        "maximumJumps(nums = [1, 5, 1, 1, 9, 1, 2, 1], target = 3)",
        "maximumJumps(nums = [0,1,0,1,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0], target = 1)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4])",
        "maxIncreasingGroups(x = [1,3,2])",
        "maxIncreasingGroups(x = [1, 3, 5, 4, 2])",
        "maxIncreasingGroups(x = [1, 3, 2, 4, 3, 5, 4, 6])",
        "maxIncreasingGroups(x = [1,2,2,3,4])",
        "maxIncreasingGroups(x = [1,2,3,5])",
        "maxIncreasingGroups(x = [3, 1, 5, 4, 7])",
        "maxIncreasingGroups(x = [1, 3, 2, 4, 3, 4, 5, 7, 6])",
        "maxIncreasingGroups(x = [10, 10, 5, 3, 2, 2])",
        "maxIncreasingGroups([1, 2, 3, 4])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"UUDDLRLRBA\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"RRLLRL\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(\"_LLRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLLL_\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLRRLRL\")",
        "furthestDistanceFromOrigin(moves = \"UDDDLLLLUUU\")",
        "furthestDistanceFromOrigin(moves = \"RRUULDRDD\")",
        "furthestDistanceFromOrigin(moves = \"RLLLURDLURDDLLLLUDDLLUDLLLUDDDLLLDULRULR\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = \"0101\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"10110\")",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(\"123\")",
        "maximumOddBinaryNumber(s=\"111101\")"
    ],
    "sample_6": [
        "colorTheArray(n = 3, queries = [[1,2],[2,1]])",
        "colorTheArray(n = 3, queries = [[0,0],[0,1],[1,0],[2,2]])",
        "colorTheArray(n = 3, queries = [[0,1],[2,1],[1,0],[2,2]])",
        "colorTheArray(n = 4, queries = [[0,0],[1,2],[0,2],[2,2]])",
        "colorTheArray(n = 6, queries = [[1,1],[1,2],[3,3],[3,4],[4,3]])",
        "colorTheArray(n = 5, queries = [[0,1],[2,0],[4,2],[0,4]])",
        "colorTheArray(n = 6, queries = [[0, 2], [3, 2], [3, 5], [4, 2]])",
        "colorTheArray(n = 6, queries = [[3,4],[0,2],[2,4],[5,1]])",
        "colorTheArray(n = 6, queries = [[0,3],[1,3],[2,1],[4,3],[2,2],[5,4]])",
        "colorTheArray(n = 6, queries = [[0, 0], [2, 1], [4, 3], [3, 1], [2, 0]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 4])",
        "findValueOfPartition(nums = [4,2,1,3])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1, 3, 5, 4, 7])",
        "findValueOfPartition(nums = [0, 1, 2, 4])",
        "findValueOfPartition(nums = [2, 5, 10])",
        "findValueOfPartition(nums = [2, 1, 2, 1])",
        "findValueOfPartition(nums = [10, 4, 2, 1, 9])",
        "findValueOfPartition(nums = [4,2,3,10])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits([1,0,1,1,1])",
        "numberOfGoodSubarraySplits([1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0,1,1,0,0,0,1,1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [1,2,2,3,1])",
        "minimumIndex(nums = [1, 2, 2, 3, 1])",
        "minimumIndex(nums = [1,2,2,3])",
        "minimumIndex(nums = [2,2,3,3])",
        "minimumIndex(nums = [2,1,2,2])",
        "minimumIndex([1,2,3,4,5])",
        "minimumIndex(nums = [1,2,2,3,1,1])",
        "minimumIndex(nums = [1,2,2,3,4,2,2])",
        "minimumIndex([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minimumIndex([-1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 5, 6, 7], k = 1)",
        "sumIndicesWithKSetBits(nums = [0,1,2,3,4,5,6,7,8,9], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 7, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 1, 6, 7, 9, 0], k = 1)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 2, offers = [[1, 2, 3], [2, 3, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,4],[2,3,5],[1,2,3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 2], [1, 2, 2]])",
        "maximizeTheProfit(n = 2, offers = [[1, 2, 4], [1, 3, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 5, 5], [2, 6, 7], [3, 7, 10]])",
        "maximizeTheProfit(n = 2, offers = [[1,3,1],[2,3,2],[1,2,2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [3, 6, 10], [4, 7, 15], [5, 8, 20]])",
        "maximizeTheProfit(n = 4, offers = [[4, 5, 4], [1, 2, 2], [1, 3, 3]])",
        "maximizeTheProfit(n = 3, offers = [[2, 4, 2], [2, 3, 1], [1, 5, 2], [3, 4, 4]])",
        "maximizeTheProfit(n = 5, offers = [[2,3,2],[1,2,3],[3,4,5],[5,6,7],[4,7,8]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"7550\")",
        "minimumOperations(num = \"1225\")",
        "minimumOperations(num = \"2501\")",
        "minimumOperations(num = \"20100\")",
        "minimumOperations(num = \"890\")",
        "minimumOperations(num = \"2601\")",
        "minimumOperations(num = \"719\")",
        "minimumOperations(num = \"1112000\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"1\")",
        "minimumOperations(num = \"26\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(num = \"77\")",
        "minimumOperations(num = \"226\")",
        "minimumOperations(num = \"0919\")",
        "minimumOperations(num = '5'*100)"
    ],
    "sample_181": [
        "maximizeTheProfit(n=4, offers = [[1,2,1],[2,3,1],[3,4,2]])",
        "maximizeTheProfit(n = 6, offers = [[2,3,1],[1,2,3]])",
        "maximizeTheProfit(n = 3, offers = [[1,1,2],[2,2,1],[3,2,1]])",
        "maximizeTheProfit(n = 6, offers = [[1,2,3],[2,3,4],[3,4,5],[4,5,6]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 4, 5], [2, 3, 4]])",
        "maximizeTheProfit(n = 5, offers = [[0,3,4],[1,4,6],[2,4,7],[3,5,8],[4,5,9]])",
        "maximizeTheProfit(n = 7, offers = [[1, 3, 4], [2, 3, 5], [3, 5, 5], [4, 5, 3]])",
        "maximizeTheProfit(n = 9, offers = [[2,4,6],[1,2,6],[1,2,3],[1,2,1]])",
        "maximizeTheProfit(n = 4, offers = [[1,1,3],[1,2,5],[2,2,3],[3,3,3],[4,4,2],[5,5,1]])",
        "maximizeTheProfit(n = 3, offers = [[2,1,3],[3,1,2],[4,5,3],[3,3,2],[1,2,3]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,2,1,1,4,4,3,3], threshold = 1)",
        "longestAlternatingSubarray(nums = [3,5,1,4,2,5], threshold = 2)",
        "longestAlternatingSubarray([3, 2, 4, 1, 6, 5], 2)",
        "longestAlternatingSubarray(nums = [1,0,4,5,0], threshold = 4)",
        "longestAlternatingSubarray(nums = [5, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 5, 2, 2, 5, 1, 5, 1], threshold = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"500\")",
        "minimumOperations(num = \"15\")",
        "minimumOperations(num = \"11\")",
        "minimumOperations(num = \"0001\")",
        "minimumOperations(num = \"5000\")",
        "minimumOperations(num = \"1525\")",
        "minimumOperations(num = '123')",
        "minimumOperations(num = \"1425\")",
        "minimumOperations(num = \"1725\")"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [3, 4]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[2, 4], [1, 3]])",
        "colorTheArray(n = 5, queries = [[1, 4], [2, 4]])",
        "colorTheArray(n = 6, queries = [[1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n = 4, queries = [[1,3],[3,4],[1,2]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,3],[3,4],[1,3],[1,2]])",
        "colorTheArray(n = 5, queries = [[4, 3], [0, 2]])",
        "colorTheArray(n = 7, queries = [[1, 1], [3, 3], [3, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [5, 2], [6, 4], [5, 4]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 2, 3, 4])",
        "minimumIndex(nums = [2, 2, 3, 3])",
        "minimumIndex(nums = [1,1,1,2,2,2])",
        "minimumIndex(nums = [4, 1, 2, 2])",
        "minimumIndex(nums = [1,1,2,3,3,3])",
        "minimumIndex(nums = [1, 3, 1, 3, 3])",
        "minimumIndex([1,2,3,1])",
        "minimumIndex(nums = [2,1,3,2,2,1])",
        "minimumIndex(nums = [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0,"
    ],
    "sample_102": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [3, 5, 1, 2, 4], target = 2)",
        "maximumJumps(nums = [1,1,1,1,1,1,1,1,1,1], target = 1)",
        "maximumJumps(nums = [3, 5, 1, 1, 4], target = 4)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 7, 6], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1,3,5,6,8,2,3], target = 2)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(\"512301\")",
        "removeTrailingZeros(\"512301\")",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"012301\")",
        "removeTrailingZeros(num = \"0\")",
        "removeTrailingZeros(\"500123\")",
        "removeTrailingZeros(num = '551010')"
    ],
    "sample_57": [
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 2, b = 4)",
        "distanceTraveled(a = 3, b = 5)",
        "distanceTraveled(a = 4, b = 0)",
        "distanceTraveled(a = 1, b = 5)",
        "distanceTraveled(a = 1, b = 5)",
        "distanceTraveled(a = 9, b = 2)",
        "distanceTraveled(a = 11, b = 2)",
        "distanceTraveled(a = 3, b = 10)",
        "distanceTraveled(a = 15, b = 2)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 3, 1])",
        "findValueOfPartition(a = [1, 5, 3, 4])",
        "findValueOfPartition(a = [1, 5, 9, 12])",
        "findValueOfPartition(a = [1, 2, 5, 3])",
        "findValueOfPartition(a = [1, 3, 5, 2, 4, 6])",
        "findValueOfPartition(a = [5, 3, 2, 4, 1])",
        "findValueOfPartition(a = [2, 7, 1, 3, 8, 4])",
        "findValueOfPartition(a = [3, 5, 7, 9])",
        "findValueOfPartition(a = [1, 2, 2, 3, 5])",
        "findValueOfPartition(a = [0, 0, 0, 0, 0])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1,2,1,2,3,4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 1, 3])",
        "distinctDifferenceArray(nums = [1,2,3,3,4])",
        "distinctDifferenceArray(nums = [3,1,2,2,1])",
        "distinctDifferenceArray(nums = [1,1,1,3,3,3])",
        "distinctDifferenceArray(nums = [1,2,1,2,3,1,1])",
        "distinctDifferenceArray(nums = [3,1,5,3,3,2])"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 2, 3, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1, 3, 2, 3])",
        "minimumIndex(nums = [1,2,2,3,4])",
        "minimumIndex(nums = [1, 2, 3, 2, 3])",
        "minimumIndex(nums = [1, 3, 3, 2])",
        "minimumIndex(nums = [2, 2, 3, 1, 1])",
        "minimumIndex(nums = [3,1,2,1,2])",
        "minimumIndex([1, 2, 1, 3, 1, 4, 1])",
        "minimumIndex(nums = [4, 5, 4, 4, 1, 4, 4])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"R\")",
        "furthestDistanceFromOrigin(\"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLL\")",
        "furthestDistanceFromOrigin(\"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLL\"*2 + \"R\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abcabcbb\")",
        "minimizedStringLength(s = \"abcabcbb\")",
        "minimizedStringLength(s = \"apple\")",
        "minimizedStringLength(s = \"apple\")",
        "minimizedStringLength(s = \"aaabbc\")",
        "minimizedStringLength(s = \"ababc\")",
        "minimizedStringLength(\"abba\")",
        "minimizedStringLength(s = \"abcdef\")",
        "minimizedStringLength(s = \"aaabbbaa\")",
        "minimizedStringLength(s = \"aaaaaaabbbbbb\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 1], k = 2)",
        "checkArray(nums = [0,1,2,3,4], k = 3)",
        "checkArray(nums = [1,2,3,1], k = 2)",
        "checkArray(nums = [1, 2, -3, 4], k = 3)",
        "checkArray(nums = [3, 1, 2, 4, 3], k = 3)",
        "checkArray(nums = [1, -1, 2, -2], k = 1)",
        "checkArray(nums = [1,1], k = 3)",
        "checkArray(nums = [1, -3, -4, 2], k = 3)",
        "checkArray(nums = [4, -3, -1, -3, 1, 4, 0], k = 3)",
        "checkArray(nums = [2, 4, 4, 2, 5, -2, 5], k = 2)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(count = [1, 1, 1, 1, 1, 1, 1], group = 3)",
        "maxIncreasingGroups(count = [2, 2, 1, 1, 2], group = 2)",
        "maxIncreasingGroups(usageLimits = [1, 1, 1, 2, 2])",
        "maxIncreasingGroups(count = [2,2,2,2,2,2], group = 5)",
        "maxIncreasingGroups(usageLimits = [2, 3, 1, 3, 3, 2])",
        "maxIncreasingGroups(usageLimits = [2, 3, 0, 1, 4, 1])",
        "maxIncreasingGroups(count = [2,3,1,2,3], group = 5)",
        "maxIncreasingGroups(count = [5, 0, 0, 0, 0, 0, 0, 5], group = 2)",
        "maxIncreasingGroups(count = [1, 2, 3, 4, 5], group = 1)"
    ],
    "sample_206": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"75\")",
        "minimumOperations(\"25\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"7500\")",
        "minimumOperations(num = \"26\")",
        "minimumOperations(\"2550\")",
        "minimumOperations(num = \"42\")",
        "minimumOperations(num = \"012\")",
        "minimumOperations(\"02550\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0,1,0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 2, 1])",
        "doesValidArrayExist(derived = [0, 2, 0, 2])",
        "doesValidArrayExist(derived = [0,1,2,3,4,5,6,7,8,9])",
        "doesValidArrayExist(derived = [1, -1, 1, 1, -1, -1])"
    ],
    "sample_38": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(\"ababca\")",
        "minimumCost(s = \"dabac\")",
        "minimumCost(\"baaa\")",
        "minimumCost(s = \"ABBA\")",
        "minimumCost(s = \"abbbb\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [1, 2, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [0, 1, 3, 6, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 10, 20])",
        "maxIncreasingGroups([3, 1, 2])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 2, 4, 4])",
        "maxIncreasingGroups(usageLimits = [3,1,2,1,5])",
        "maxIncreasingGroups(usageLimits = [1,3,4,2,3,7,8])",
        "maxIncreasingGroups(usageLimits = [1, 5, 2, 3, 3, 5, 4])"
    ],
    "sample_53": [
        "smallestString(\"baabc\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"baab\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = 'bac')",
        "smallestString(s = \"baz\")",
        "smallestString(s = \"ba\")",
        "smallestString(s = \"abc\")",
        "smallestString('bac')",
        "smallestString(s = \"ab\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4], x = 3)",
        "minAbsoluteDifference(nums = [3,1,4,2], x = 1)",
        "minAbsoluteDifference(nums = [-1,2,4], x = 2)",
        "minAbsoluteDifference(nums = [1,5,3,4,2], x = 4)",
        "minAbsoluteDifference(nums = [4,5,1,2,3], x = 1)",
        "minAbsoluteDifference(nums = [2,5,1,3,7], x = 3)",
        "minAbsoluteDifference(nums = [1,2,4,8,10], x = 3)",
        "minAbsoluteDifference(nums = [3,6,9,12,15,18], x = 9)",
        "minAbsoluteDifference(nums = [1,3,2,2], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 5]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [3, 4, 1], [2, 3, 5]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 4], [2, 3, 5], [1, 4, 2]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [1, 3, 6]])",
        "maximizeTheProfit(N = 3, offers = [[1, 1, 1],[1, 2, 10],[2, 2, 10],[2, 3, 5]])",
        "maximizeTheProfit(N = 3, offers = [[2, 5, 3], [4, 6, 2], [5, 7, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 4], [2, 5, 1], [5, 4, 7]])",
        "maximizeTheProfit(N = 2, offers = [[1, 1, 4],[2, 4, 3],[3, 3, 3]])",
        "maximizeTheProfit(N = 10, offers = [[6, 0, 9], [2, 4, 3], [5, 8, 2], [3, 2, 6], [1, 5, 5], [6, 7, 1], [0, 6, 9]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"hello\", \"world\"], b = \" \")",
        "splitWordsBySeparator(a = [], b = \"\")",
        "splitWordsBySeparator(a = [\"ba\", \"nana\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"ba\", \"nana\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"ba\", \"nana\", \"ba\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"baa\", \"aa\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"abc\"], b = \" \")",
        "splitWordsBySeparator(a = [\"abc\", \"defg\", \"xyz\"], b = \" \")",
        "splitWordsBySeparator(a = [\"hello\", \"the\", \"sky\"] , b = \"eo\")",
        "splitWordsBySeparator(a = [\"hello\", \"world\", \"!\", \"wonderful\"], b = \"o\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(\"512301\")",
        "removeTrailingZeros(\"512301\")",
        "removeTrailingZeros(a = \"12301\")",
        "removeTrailingZeros(a = \"512301000\")",
        "removeTrailingZeros(\"05123010\")",
        "removeTrailingZeros(a = '5122300')",
        "removeTrailingZeros(a = \"1010012301\")",
        "removeTrailingZeros(a = '1501000')",
        "removeTrailingZeros(a = '1.00120000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(\"eve\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(\"ab\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s = \"hello\")",
        "makeSmallestPalindrome(s = 'abab')",
        "makeSmallestPalindrome(s = \"aa\")",
        "makeSmallestPalindrome(s = \"ce\")",
        "makeSmallestPalindrome(\"eeve\")",
        "makeSmallestPalindrome(s = \"abeced\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 0, 1, 0, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4], k = 3)",
        "longestEqualSubarray(nums = [1, 0, 1, 0, 1, 0, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1, 0, 1, 1, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 2, 1, 1, 1, 2, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1,0,1,0,1], k = 2)",
        "longestEqualSubarray(nums = [1,0,0,1,0,0,1,0,0,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], k = 2)",
        "longestEqualSubarray(nums = [1,0,0,1,0,1,1,1,1], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [3, 4, 5, 1, 2], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 4, 3, 2, 5, 7], k = 2)",
        "maximumBeauty(nums = [2, 6, 1, 0], k = 1)",
        "maximumBeauty(nums = [1,5,9,3,2], k=1)",
        "maximumBeauty(nums = [7,1,3,6,2], k = 1)",
        "maximumBeauty(nums = [5,2,4,1,1], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 4, 5, 9, 9], k = 3)",
        "maximumBeauty(nums = [7,5,10,6,2], k = 3)"
    ],
    "sample_163": [
        "maxSum(nums = [2, 3, 5, 7, 11])",
        "maxSum(nums = [3,2,3])",
        "maxSum(nums = [2, 3, 7])",
        "maxSum(nums = [0, -1, -2, -3, -4, -5, -6, -7, -8, -9])",
        "maxSum(nums = [10, 2, 4, 8])",
        "maxSum(nums = [99, 22])",
        "maxSum([0, -1, 1, -1, 1])",
        "maxSum(nums = [9,20,15,7,5])",
        "maxSum(nums = [12,34,56,78,34,56,12,67,89])",
        "maxSum(nums = [23, 19, 23, 51, 52, 28, 29, 32, 31, 6, 7])"
    ],
    "sample_151": [
        "finalString(s = 'string')",
        "finalString(s = \"Hello\")",
        "finalString(s = 'This is a test string')",
        "finalString(s = 'ignore')",
        "finalString(\"tsng\")",
        "finalString(\"is an example\")",
        "finalString(s = 'TsuRtsng')",
        "finalString(s = 'It is cool')",
        "finalString(s = 'mifnla')",
        "finalString(s = 'internationalization')"
    ],
    "sample_31": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(\"12301\")",
        "removeTrailingZeros(\"12301\")",
        "removeTrailingZeros(num = \"12350\")",
        "removeTrailingZeros(num = \"123010\")",
        "removeTrailingZeros(\"123502301\")",
        "removeTrailingZeros(num = '502230')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"11011\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '11')",
        "maximumOddBinaryNumber(s = \"10\")",
        "maximumOddBinaryNumber(s = \"12\")",
        "maximumOddBinaryNumber(s = \"10111\")",
        "maximumOddBinaryNumber(s = \"01011101\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = ' ')",
        "splitWordsBySeparator(words = [\"this\", \"is\", \"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"apple\", \"is\", \"a\", \"fruit\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"this_is_easy\", \"this_is_a_problem\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"dishwasher\", \"problem\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"s-hi\", \"how are you\"], separator = \"-\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,1,1,2,2,3], K = 1)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3], K = 3)",
        "longestEqualSubarray(A = [1,0,1,0,1,0], K = 1)",
        "longestEqualSubarray(A = [1, 0, 1, 0, 1, 0, 1], K = 2)",
        "longestEqualSubarray(A = [3,2,1,3], K = 2)",
        "longestEqualSubarray(A = [1,2,3,2,1,4,4,4,4], K = 2)",
        "longestEqualSubarray(A = [4,2,2,4,2,2,2], K = 2)",
        "longestEqualSubarray(A = [4,4,4,2,4,4,4,2,4,2], K = 2)",
        "longestEqualSubarray(A = [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], K = 2)",
        "longestEqualSubarray(A = [1,0,2,2,2,2,2,3,2,2,2,4,0,0,0,0,2,2,2,2,2,2,0], K = 3)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [3, 2, 1])",
        "countWays([1, 2, 3])",
        "countWays(nums = [2, 2, 2])",
        "countWays(nums = [2, 1, 5, 3, 4])",
        "countWays(nums = [2,1,2])",
        "countWays(nums = [1, 3, 2, 4, 5])",
        "countWays([1, 1, 0])",
        "countWays(nums = [3, 1, 5, 4, 3])",
        "countWays(nums = [1, 4, 6, 2])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 5, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 1, 6, 7, 3, 2], k = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5001\")",
        "removeTrailingZeros(num = '100')",
        "removeTrailingZeros(\"1000000\")"
    ],
    "sample_167": [
        "isAcronym(words = [\"mq\", \"px\", \"zy\"], s = \"mqpxzy\")",
        "isAcronym(words = [\"USA\", \"UK\"], s = \"USAUK\")",
        "isAcronym(words = [\"c\", \"a\", \"t\"], s = \"act\")",
        "isAcronym(words = [\"B\", \"A\", \"T\", \"S\"], s = \"BAT\")",
        "isAcronym(words = [\"BAN\", \"NANA\"], s = \"BANANA\")",
        "isAcronym(words = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], s = \"pythont\")",
        "isAcronym(words = [\"The\", \"FBI\"], s = \"FBI\")",
        "isAcronym(words = [\"c\", \"o\", \"w\"], s = \"cow\")",
        "isAcronym(words = [\"as\", \"as\", \"we\", \"are\"], s = \"asawer\")",
        "isAcronym(words = [\"calculator\", \"processor\", \"terminal\"], s = \"Cpt\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3])",
        "countCompleteSubarrays(nums = [0, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,1,1,2,1,2])",
        "countCompleteSubarrays(nums = [1,2,3,1,1,1,1,2,3,4])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 5, target = 2)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 5, target = 15)",
        "minimumPossibleSum(n=5, target=3)",
        "minimumPossibleSum(target = 6, n = 1)"
    ],
    "sample_147": [
        "finalString(s = \"this is a test\")",
        "finalString(s = \"ring\")",
        "finalString(s = 'testing')",
        "finalString(\"bi\")",
        "finalString(\"Ian\")",
        "finalString(\"isti\")",
        "finalString(s = \"123456789\")",
        "finalString(\"kenneth\")",
        "finalString(\"singing\")",
        "finalString('i like ')"
    ],
    "sample_29": [
        "makeSmallestPalindrome(\"neven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(\"abcd\")",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = \"abcde\")",
        "makeSmallestPalindrome(s = 'babad')",
        "makeSmallestPalindrome(\"even\")",
        "makeSmallestPalindrome(s = \"b\")",
        "makeSmallestPalindrome(\"tacocat\")",
        "makeSmallestPalindrome(\"aabbc\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 2, offers = [[1,2,3],[2,3,4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30]])",
        "maximizeTheProfit(n = 2, offers = [[1, 2, 1], [2, 1, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [1, 3, 30]])",
        "maximizeTheProfit(n = 2, offers = [[0, 1, 1], [1, 2, 4]])",
        "maximizeTheProfit(n = 4, offers = [[3, 2, 5], [2, 1, 3], [4, 1, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 5, 5], [4, 1, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [1, 5, 3], [2, 3, 4], [3, 4, 7]])",
        "maximizeTheProfit(n = 7, offers = [[1, 3, 4], [2, 4, 3], [3, 5, 6], [1, 5, 1]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 1], [1, 2, 5], [2, 6, 4], [3, 2, 7]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 4, 2, 3], target = 2)",
        "maximumJumps(nums = [0, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [3, 2, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [0, 3, 1, 1, 4, 2], target = 3)",
        "maximumJumps([1, 3, 5, 4, 2], 2)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"100101\")",
        "maximumOddBinaryNumber(s = '01010101')",
        "maximumOddBinaryNumber(s = '00110')",
        "maximumOddBinaryNumber(\"0101\")"
    ],
    "sample_175": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 4, k = 6)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 14, num2 = 3)",
        "makeTheIntegerZero(num1 = 21, num2 = 4)",
        "makeTheIntegerZero(num1 = 0b1101, num2 = 1)",
        "makeTheIntegerZero(num1 = \"1111111111\", num2 = \"10000100001\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 5, target = 12)",
        "minimumPossibleSum(n = 5, target = 100)",
        "minimumPossibleSum(n = 10, target = 45)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1,0,1,0,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,1,1,1,1,1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 2, 4], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,3,4,2,1], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 4, 3, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,1,2,1,2,3,1], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [4,5,3,4,3,5,1], modulo = 5, k = 2)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3)",
        "maximumBeauty(nums = [1,2,3,4], k = 2)",
        "maximumBeauty(nums = [1, 4, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 4], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 4, 7, 6], k = 3)",
        "maximumBeauty(nums = [4, 5, 6, 1, 7, 5], k = 2)",
        "maximumBeauty([2, 5, 1, 3, 4, 7, 8], 3)",
        "maximumBeauty(nums = [4, 2, 3, 5, 4, 6, 7, 5, 1], k = 3)",
        "maximumBeauty([1,4,9,3,2,5,10,4,3,2,1,10], 3)"
    ],
    "sample_148": [
        "finalString(s = 'ponterer')",
        "finalString(s = 'pontor')",
        "finalString(s = \"Hello\")",
        "finalString(s = 'aio')",
        "finalString(s = \"Aibohphobia\")",
        "finalString(s = \"iitnop\")",
        "finalString(s = \"klei\")",
        "finalString(s = \"bioinformatics\")",
        "finalString(\"rmn\")",
        "finalString(s = \"i like july, i like monday\")"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [1, 2, 3, 5])",
        "countWays(nums = [3, 5, 2, 1])",
        "countWays(nums = [0, 1, 1, 1])",
        "countWays(nums = [1, 2, 1, 2])",
        "countWays(nums = [1, 5, 2, 3])",
        "countWays(nums = [1, 5, 10])",
        "countWays([2, 3, 1, 5, 4])",
        "countWays(nums = [4, 2, 2, 1, 4])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [1,2,3,4])",
        "countBeautifulPairs(nums = [10,11,12])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "countBeautifulPairs(nums = [2,3,4,5,6])",
        "countBeautifulPairs(nums = [1, 3, 4, 2])",
        "countBeautifulPairs(nums = [12, 14, 15, 21])",
        "countBeautifulPairs(nums = [3, 2, 9, 4])",
        "countBeautifulPairs(nums = [11, 2, 31, 4, 5, 6])",
        "countBeautifulPairs(nums = [24,13,10,51,37])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 7)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 1, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 999, num2 = 100)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"aacecaaa\")",
        "makeSmallestPalindrome(s = \"eve\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(\"neven\")",
        "makeSmallestPalindrome(s = \"n\")",
        "makeSmallestPalindrome(s = \"tce\")",
        "makeSmallestPalindrome(s = \"stressed\")",
        "makeSmallestPalindrome(s = \"aacecaaa\")",
        "makeSmallestPalindrome(s = \"badef\")",
        "makeSmallestPalindrome(s = \"abcd\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"North\", \"Atlantic\", \"Treaty\", \"Organization\"], s = \"NATO\")",
        "isAcronym(words = [\"B\", \"A\", \"T\"], s = \"BAT\")",
        "isAcronym(words = [\"B\",\"a\",\"n\"], s = \"BAN\")",
        "isAcronym(words = [\"h\", \"o\", \"w\"], s = \"how\")",
        "isAcronym(words = [\"abcd\", \"wxyz\"], s = \"aw\")",
        "isAcronym(words = [\"Harvard\", \"University\", \"Boston\"], s = \"HU\")",
        "isAcronym(words = [\"w\", \"h\", \"o\", \"r\", \"s\"], s = \"who\"])",
        "isAcronym(words = [\"for\", \"initial\", \"values\"], s = \"fiv\")",
        "isAcronym(words = ['CAT', 'RAT', 'MAT'], s = 'CR')"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 5, 6, 7, 11], k = 2)",
        "sumIndicesWithKSetBits([1, 2, 3], 1)",
        "sumIndicesWithKSetBits(nums = [5, 2, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 9, 10], k = 2)",
        "sumIndicesWithKSetBits([6, 5, 1, 2, 3], 1)",
        "sumIndicesWithKSetBits(nums = [4, 2, 21, 4, 5], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 5, k = 6)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays([-1, 0, 1, 2])",
        "countWays(nums = [0, 1, 1, 2])",
        "countWays(nums = [2, 3, 4, 5, 6])",
        "countWays(nums = [1, 1, 2, 2])",
        "countWays(nums = [0x1, 0x2, 0x3, 0x4])",
        "countWays([-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "countWays(nums = [4, 5, 1, 2])",
        "countWays([-0x3f3f3f3f, -0x3f3f3f3f, -0x3f3f3f3f, 0x3f3f3f3f, 0x3f3f3f3f, 0x3f3f3f3f, 0x3f3f3f3f])",
        "countWays(nums = [10, 9, 2, 5, 3, 7, 101, 18, 19, 20])"
    ],
    "sample_39": [
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"ababab\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"eceba\")",
        "minimumCost(s = \"abacab\")",
        "minimumCost(\"ab\")",
        "minimumCost(s = \"abcdabcdabcd\")",
        "minimumCost(s = \"bbbba\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"R_L_\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"R_LR_\")",
        "furthestDistanceFromOrigin(moves = \"_L_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"_LLRRLR\")",
        "furthestDistanceFromOrigin(moves = 'LL_RL_')",
        "furthestDistanceFromOrigin(moves = '_R__L__')",
        "furthestDistanceFromOrigin(moves = \"____L__\")",
        "furthestDistanceFromOrigin(moves = 'R_R_L_L_R_R_L')"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 4, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 4)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 4)",
        "distanceTraveled(mainTank = 1, additionalTank = 4)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 9, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 5)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3])",
        "countCompleteSubarrays([1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [3, 3])",
        "countCompleteSubarrays(nums = [2, 2, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 0)",
        "longestAlternatingSubarray(nums = [2,2,2,2,2,2,2,2,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,4,3,2,4], threshold = 2)",
        "longestAlternatingSubarray(nums = [10, 11, 12, 13], threshold = 13)",
        "longestAlternatingSubarray(nums = [3,4,2,3,5,4], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 5, 3, 4, 8, 9, 7], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,3,2,1,3,2,1,4,4,4,4,4,4], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 4, 7, 9, 6, 9, 4, 1], threshold = 4)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[0, 1], [2, 2]])",
        "numberOfPoints(nums = [[-1, 1], [-2, 2], [-3, 3], [1, 2]])",
        "numberOfPoints(nums = [[1, 5], [2, 4], [0, 3]])",
        "numberOfPoints(nums = [[0, 5], [3, 6], [6, 8]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [3, 6], [5, 10], [8, 12]])",
        "numberOfPoints(nums = [[1,3], [2,6], [3,9], [6,9], [8,12]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [2, 3, 4])",
        "countBeautifulPairs(nums = [10, 2, 5, 7])",
        "countBeautifulPairs(nums = [10, 11, 12, 13, 14, 15])",
        "countBeautifulPairs(nums = [11, 22, 33, 44, 55, 66])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50, 60, 70, 80])",
        "countBeautifulPairs([12, 13, 15])",
        "countBeautifulPairs(nums = [10, 20, 9])",
        "countBeautifulPairs([12, 24, 32])",
        "countBeautifulPairs(nums = [2, 5, 10, 17, 11])",
        "countBeautifulPairs(nums = [11, 6, 9, 15, 2, 7])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 2)",
        "longestAlternatingSubarray(nums = [5,4,3,2,1], t = 1)",
        "longestAlternatingSubarray(nums = [0,1,2,3,4,5,6,7], t = 3)",
        "longestAlternatingSubarray(nums = [1, 4, 2, 1, 3, 5], t = 2)",
        "longestAlternatingSubarray(nums = [4, 1, 2, 2], t = 4)",
        "longestAlternatingSubarray(nums = [4, 6, 2, 5, 3], t = 4)",
        "longestAlternatingSubarray(nums = [3,4,1,5], t = 1)",
        "longestAlternatingSubarray(nums = [2, 2, 4, 4, 4, 6, 6, 6, 6], t = 2)"
    ],
    "sample_36": [
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abcabcbb\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(\"abcd\")",
        "minimumCost(s = \"abcabc\")",
        "minimumCost(s = \"abcda\")",
        "minimumCost(s = \"abcda\")",
        "minimumCost(s = \"eceba\")",
        "minimumCost(\"baba\")",
        "minimumCost(s = \"aaaaaa\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(\"ABCD\")",
        "minLength(s = \"abcd\")",
        "minLength(\"ABCDE\")",
        "minLength(\"ABCA\")",
        "minLength(\"BABCDAB\")",
        "minLength(s = \"aabABBA\")",
        "minLength(s = \"CDBCABACB\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3,4,5], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [3, 4, 1, 2], modulo = 5, k = 4)",
        "countInterestingSubarrays(nums = [10, 15, 5, 20], modulo = 11, k = 3)",
        "countInterestingSubarrays(nums = [2, 3, 4, 1, 5], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [0, 2, 0], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [3,5,1,2,6,8], modulo = 7, k = 3)"
    ],
    "sample_9": [
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,0]])",
        "colorTheArray(n = 2, queries = [[1, 0], [0, 1]])",
        "colorTheArray(n = 5, queries = [[0,2], [1,2]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 1], [2, 2], [1, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [0, 0]])",
        "colorTheArray(n = 4, queries = [[0, 1], [2, 2], [2, 2], [0, 1]])",
        "colorTheArray(n = 7, queries = [[0, 1], [2, 3], [2, 5], [2, 6]])",
        "colorTheArray(n = 10, queries = [[0, 9], [1, 10], [10, 9]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [2, 4], [4, 4], [4, 5]])",
        "colorTheArray(n = 10, queries = [[1,2],[1,1],[2,1],[3,5],[2,5]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [3, 4, 5, 1], nums2 = [1, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [4, 1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [4, 5, 1], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 3, 4, 5], nums2 = [2, 3])",
        "maxNonDecreasingLength(nums1 = [3, 4, 2, 3], nums2 = [5, 6, 7])",
        "maxNonDecreasingLength(nums1 = [1, 2, 4, 5], nums2 = [3, 5, 6, 7])",
        "maxNonDecreasingLength(nums1 = [1,2,3,2,2], nums2 = [1,3,4,2,2])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 4, 5], nums2 = [2, 3, 1, 2, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1,2,3,3,4], nums2 = [3,4,5,2,3,6])",
        "maxNonDecreasingLength(nums1 = [10, 9, 2, 5, 3, 7],\n                              nums2 = [10, 1, 2, 5, 1, 2])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 11)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,5,3,4])",
        "findValueOfPartition(nums = [2,3,1,4])",
        "findValueOfPartition(nums = [1,5,1])",
        "findValueOfPartition(nums = [4,1,3,2])",
        "findValueOfPartition(nums = [4,2,5,0,3,1])",
        "findValueOfPartition(nums = [5,1,2,10])",
        "findValueOfPartition(nums = [1,5,1,2,4,1])",
        "findValueOfPartition(nums = [3, -1, -4, 1])",
        "findValueOfPartition(nums = [0, 0, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LL_RR_\")",
        "furthestDistanceFromOrigin(\"_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_R__R\")",
        "furthestDistanceFromOrigin(moves = \"L\")",
        "furthestDistanceFromOrigin(\"_L_R\")",
        "furthestDistanceFromOrigin(moves = \"R__L_\")",
        "furthestDistanceFromOrigin(moves = \"LLR_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_RLR_\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRL\")",
        "furthestDistanceFromOrigin(\"_ _ _ _ _ _ _ _\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 2])",
        "minimumIndex(nums = [1, 2, 3, 2, 2])",
        "minimumIndex(nums = [3, 2, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 4])",
        "minimumIndex(nums = [1,1,1,2,3])",
        "minimumIndex(nums = [1,2,3,4,1,2,3])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 3])",
        "minimumIndex(nums = [2, 2, 2, 3, 3, 4, 5, 5])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 1, 1, 2, 3, 4, 3, 2, 1])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [2, 1, 1])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [0,1,2,3])",
        "semiOrderedPermutation(nums = [0, 1, 2])",
        "semiOrderedPermutation(nums = [0, 0, 1, 1])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n=5, k=3)",
        "minimumSum(n=4, k=3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 7, k = 10)"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 2, 4])",
        "alternatingSubarray(nums = [1, 1, 2, 3, 3])",
        "alternatingSubarray(nums = [3, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 4, 4, 5])",
        "alternatingSubarray(nums = [1, 4, 2, 3, 5])",
        "alternatingSubarray(nums = [0, 1, 2, 4, 3])",
        "alternatingSubarray(nums = [1, 3, 4, 7, 8])",
        "alternatingSubarray(nums = [9,1,2,3,4])",
        "alternatingSubarray(nums = [1, 3, 4, 2, 2, 6, 5, 1])"
    ],
    "sample_310": [
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[3, 2, 1], [6, 5, 4], [9, 8, 7]])",
        "matrixSum(a = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [0, 8, 9]])",
        "matrixSum(a = [[1, 3, 5], [2, 4, 6], [0, 8, 7]])",
        "matrixSum(a = [[0,1,0],[2,2,1],[0,0,0]])",
        "matrixSum(a = [[1, 1, 2], [1, 1, 3], [2, 2, 3]])",
        "matrixSum(a = [[1,1,3],[1,3,4],[1,1,4]])",
        "matrixSum(a = [ [0, 0, 0], [2, 3, 4], [0, 0, 0] ])",
        "matrixSum(a = [[2, 3, 7, 0, 5], [9, 4, 5, 2, 0], [6, 1, 3, 4, 2]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0, 0],\n                            [1, 1, 0, 0],\n                            [0, 0, 0, 0],\n                            [0, 0, 0, 0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1,2],[3,4]])",
        "matrixSum(a = [[1, 5, 9], [2, 6, 10], [3, 7, 11]])",
        "matrixSum(a = [[1,2,3], [2,3,1], [3,1,2]])",
        "matrixSum(a = [[1, 2, 3], [1, 3, 2], [2, 1, 3]])",
        "matrixSum(a = [[1, 0], [1, 0]])",
        "matrixSum([[1, 2, 3], [3, 1, 2], [2, 3, 1]])",
        "matrixSum(a = [[3, 2, 3], [3, 0, 1], [2, 4, 2]])",
        "matrixSum(a = [[4, 3, 5], [1, 2, 6], [9, 7, 8]])",
        "matrixSum(a = [[2, 7, -4], [3, 8, 1], [2, 3, 1]])",
        "matrixSum(a = [[2,4,5],[7,8,3],[9,1,6]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [10, 9, 2, 5, 3, 7, 101, 18])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [2, 1, 4, 7, 3, 2, 5])",
        "alternatingSubarray(nums = [-1, 7, 4, 9, 2, 5])",
        "alternatingSubarray(nums = [2, 4, 7, 9, 11])",
        "alternatingSubarray(nums = [2, 1, 4, 7, 5, 8, 9, 6])",
        "alternatingSubarray(nums = [3, -1, 2, 4, -2])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\"], x = \"a\")",
        "findWordsContaining(words = [\"ba\", \"nana\"], x = \"na\")",
        "findWordsContaining(words = [\"ba\", \"ana\", \"nana\"], x = \"na\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"grapes\"], x = \"a\")",
        "findWordsContaining(words = [\"baan\", \"banana\", \"naan\"], x = \"na\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"grape\"], x = \"na\")",
        "findWordsContaining(words = [\"ba\", \"nan\", \"nana\", \"nana\", \"nana\"], x = \"nana\")",
        "findWordsContaining(words = [\"baan\", \"can\", \"ana\", \"nana\"], x = \"na\")",
        "findWordsContaining(words = [\"app\", \"banana\", \"popp\"], x = \"o\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(\"aab\", \"baa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"aeb\")",
        "canBeEqual(s1 = \"madam\", s2 = \"madam\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"tacocat\", s2 = \"catact\")",
        "canBeEqual(s1 = \"Rabbbit\", s2 = \"Rabbbit\")",
        "canBeEqual(s1 = \"la\", s2 = \"el\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 18)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 5)",
        "lengthOfLongestSubsequence(nums = [4,2,1,2,1], target = 5)",
        "lengthOfLongestSubsequence(nums = [9,2,3,4,5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,4,4,2,4,2,1,4,1], target = 4)",
        "lengthOfLongestSubsequence(nums = [4, 2, 3, 7, 8, 9, 2, 5, 1], target = 8)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"edcba\")",
        "canBeEqual(s1 = \"baa\", s2 = \"aaab\")",
        "canBeEqual(s1 = \"cat\", s2 = \"act\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [2, 4, 6, 8])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [2, 4, 6, 8, 10])",
        "maxSubarrays(nums = [1,1,1,0])",
        "maxSubarrays([0, 1, 2])",
        "maxSubarrays([2, 1, 2, 4])",
        "maxSubarrays(nums = [2, 5, 1, 3, 5])",
        "maxSubarrays(nums = [1, 3, 4, 2, 3, 2])",
        "maxSubarrays(nums = [0,1,1,0,1,1,1,0,0,1,1,1,0,1,0,1,1])",
        "maxSubarrays(nums = [2, 5, 10, 5, 5, 2, 3, 2, 1, 5])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2], money = 2)",
        "buyChoco(prices = [10, 20, 30, 40, 50], money = 60)",
        "buyChoco(prices = [3, 4, 5], money = 5)",
        "buyChoco(prices = [1, 2, 4, 6], money = 5)",
        "buyChoco(prices = [3, 1, 2], money = 1)",
        "buyChoco(prices = [2, 3, 4, 5, 6, 7], money = 5)",
        "buyChoco(prices = [2,3,10], money = 5)",
        "buyChoco(prices = [1,2,5,7], money = 6)",
        "buyChoco(prices = [5, 7, 8, 9], money = 8)",
        "buyChoco(prices = [5, 4, 1, 5], money = 5)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,1,2], l = 0, r = 2)",
        "countSubMultisets(nums = [1,1,1], l = 1, r = 2)",
        "countSubMultisets(nums = [1, 1, 1], l = 0, r = 2)",
        "countSubMultisets(nums = [1, 2, 2], l = 2, r = 3)",
        "countSubMultisets(nums = [2, 1, 1, 2], l = 1, r = 2)",
        "countSubMultisets(nums = [2, 2, 1], l = 2, r = 2)",
        "countSubMultisets(nums = [1,2,2,2,2,2,2,2,2,2], l = 3, r = 7)",
        "countSubMultisets(nums = [2,3,3,4,1], l = 0, r = 3)",
        "countSubMultisets(nums = [3,2,2,1,1,3], l = 0, r = 6)",
        "countSubMultisets(nums = [1,2,3,1,3,2,1,3,4,4], l = 3, r = 6)"
    ],
    "sample_322": [
        "isFascinating(n = 9)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 111)",
        "isFascinating(n = 1234)",
        "isFascinating(999)",
        "isFascinating(n = 121)",
        "isFascinating(n = 137)",
        "isFascinating(n = 699)",
        "isFascinating(n = 8191)",
        "isFascinating(n = 927368400)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"acebd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abccba\", s2 = \"abccba\")",
        "canBeEqual(\"abcabc\", \"abcabc\")",
        "canBeEqual(\"abcdef\", \"cbadef\")",
        "canBeEqual(s1 = \"redblue\", s2 = \"bluerad\")",
        "canBeEqual(s1 = \"bab\", s2 = \"aaa\")",
        "canBeEqual(s1 = \"manGod\", s2 = \"GodMan\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 5, 11, 16])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1, 10, 5])",
        "minimumCoins(prices = [1, 5, 11, 6])",
        "minimumCoins(prices = [8, 2, 4])",
        "minimumCoins(prices = [12, 3, 5, 8, 7])",
        "minimumCoins([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "minimumCoins(prices = [4,5,1,7,6,7,4,8])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 8)",
        "accountBalanceAfterPurchase(p = 8)",
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 99)",
        "accountBalanceAfterPurchase(p = 24)",
        "accountBalanceAfterPurchase(p = 21)",
        "accountBalanceAfterPurchase(p = 1)",
        "accountBalanceAfterPurchase(p = 73)",
        "accountBalanceAfterPurchase(p = 230)",
        "accountBalanceAfterPurchase(p = 1)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1,2,3])",
        "minOperations(nums = [1,2,2,3])",
        "minOperations(nums = [0, 1, 2])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1])",
        "minOperations([2, 1, 3, 4])",
        "minOperations(nums = [3, 6, 6, 6, 9])",
        "minOperations(nums = [2,1,1,1,1,1])",
        "minOperations([6, 2, 2, 1, 6])",
        "minOperations([3, 6])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1, 2, 3, 1])",
        "alternatingSubarray(nums = [1,2,2,3,3,3])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "alternatingSubarray(nums = [1,2,3,4,1,2])",
        "alternatingSubarray(nums = [1,1,2,3,4,4])",
        "alternatingSubarray(nums = [1,3,5,7,9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 4, 4, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 1, 2, 3, 1, 2, 1, 3, 1, 2])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 3, limit = 6)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 5, limit = 1)"
    ],
    "sample_247": [
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 2)",
        "minOperations(s1 = \"mq\", s2 = \"px\", x = 1)",
        "minOperations(s1 = \"aab\", s2 = \"baa\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"bcd\", x = 2)",
        "minOperations(s1 = \"wxyz\", s2 = \"wxy\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 0)",
        "minOperations(\"tant\" , \"rat\" , 2)",
        "minOperations(s1 = \"abcd\", s2 = \"efgh\", x = 1)"
    ],
    "sample_340": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 2, z = 4)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 2, y = 5, z = 3)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 2, y = 5, z = 9)",
        "longestString(x = 1, y = 3, z = 3)",
        "longestString(x = 7, y = 5, z = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 1, 3], k = 2)",
        "minOperations(nums = [3, 2, 1, 4], k = 2)",
        "minOperations(nums = [1, 2, 5], k = 2)",
        "minOperations(nums = [1, 1, 2, 2, 3], k = 3)",
        "minOperations(nums = [1,3,2,3], k = 1)",
        "minOperations(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k = 2)",
        "minOperations(nums = [1, 3, 10, 4, 5], k = 2)",
        "minOperations(nums = [2, 3, 5, 1, 1, 2], k = 1)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abccba\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbc\")",
        "longestSemiRepetitiveSubstring(s = \"bbabbbbaaaaaa\")",
        "longestSemiRepetitiveSubstring(\"annnnt\")",
        "longestSemiRepetitiveSubstring(s = \"babaccbaabaccbaabaccba\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 4])",
        "isGood(a = [1, 2, 3, 4])",
        "isGood(a = [1, 2, 3])",
        "isGood(a = [1,2,3,4])",
        "isGood(a = [1, 2, 1])",
        "isGood(a = [2, 3, 2])",
        "isGood(a = [1, 3, 2, 1])",
        "isGood(a = [1,2,2,3])",
        "isGood(a = [1, 2, 1, 2, 3])",
        "isGood(a = [2, 1, 4, 3])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 30, m = 5)",
        "differenceOfSums(n = 100, m = 3)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,1,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2])",
        "minGroupsForValidAssignment(nums = [3, 2, 2, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,2,1,2,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,1,3])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"prev\", \"a\", \"b\", \"c\", \"prev\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"prev\", \"a\", \"b\", \"c\", \"prev\"])",
        "lastVisitedIntegers(words = [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"])",
        "lastVisitedIntegers(words = [\"last\", \"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"ab\", \"ba\", \"ab\"])",
        "lastVisitedIntegers(words = [\"hello\", \"world\", \"previous\", \"1\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"right\", \"left\", \"left\", \"right\", \"left\", \"left\"])",
        "lastVisitedIntegers(words = [\"a\", \"a\", \"b\", \"a\", \"prev\", \"b\", \"prev\"])",
        "lastVisitedIntegers(words = [\"this\", \"is\", \"a\", \"prev\", \"test\", \"prev\", \"this\", \"is\", \"a\", \"prev\", \"this\", \"is\", \"a\", \"test\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"tac\", \"god\", \"act\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"def\",\"fed\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cdc\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"tac\", \"god\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"na\", \"nanab\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"abc\", \"abca\", \"abcc\"])",
        "maximumNumberOfStringPairs(words = [\"kitten\",\"sitting\",\"sitting\",\"fish\",\"leetcode\"])",
        "maximumNumberOfStringPairs(words = [\"pop\", \"op\", \"lo\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"well\", \"lol\", \"ow\", \"elhlo\", \"lleh\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10\", k = 1)",
        "shortestBeautifulSubstring(s = \"111001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101011\", k = 2)",
        "shortestBeautifulSubstring(s = \"011100\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101001\", k = 2)",
        "shortestBeautifulSubstring(\"1010101\", 2)",
        "shortestBeautifulSubstring(s = \"010010011\", k = 2)",
        "shortestBeautifulSubstring(s = \"z011110001\", k = 2)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [2, 1, 3, 4, 6, 5])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [2, 6, 4, 8, 10, 9, 15])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 3])"
    ],
    "sample_294": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"100\")",
        "minimumSteps(s = \"000111\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"100110\")",
        "minimumSteps(s = \"00011001\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"ba\", s2 = \"ana\", s3 = \"nana\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bc\", s3 = \"c\")",
        "findMinimumOperations(\"ab\", \"bc\", \"ac\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"baa\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcd\", s3 = \"acd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bac\", s3 = \"cab\")",
        "findMinimumOperations(\"cba\", \"ab\", \"abc\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"hat\", s3 = \"at\")",
        "findMinimumOperations(\"adcf\", \"dcf\", \"abc\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"ab\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"cde\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"foo\", str2 = \"bar\")",
        "canMakeSubsequence(str1 = \"aab\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"abca\")",
        "canMakeSubsequence(str1 = \"abac\", str2 = \"baba\")",
        "canMakeSubsequence(\"abcd\", \"abdcef\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ac\")"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood([1,2,3,4])",
        "isGood([5,3,1,2,4])"
    ],
    "sample_383": [
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs([1, 2, 3], 4)",
        "countPairs(nums = [1, 2, 3, 4], target = 4)",
        "countPairs(nums = [1, 2, -1, -2], target = 0)",
        "countPairs(nums = [1, 3, 2, 4], target = 6)",
        "countPairs(nums = [4, 2, 1, 3], target = 4)",
        "countPairs(nums = [1, 4, 6, 2, 3], target = 5)",
        "countPairs(nums = [-1,0,1], target = 2)",
        "countPairs(nums = [1, 3, 7, 4], target = 7)",
        "countPairs(nums = [4, 2, 1, 2, 1], target = 4)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9, 5, 6], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [3, 2, 2, 3], moveFrom = [2, 3], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [4,5], moveTo = [2, 3])",
        "relocateMarbles(nums = [3, 3, 3, 3], moveFrom = [1], moveTo = [4])",
        "relocateMarbles(nums = [5,2,5,6,8,9], moveFrom = [2,5,8], moveTo = [5,6,9])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [0, 1, 2, 3], moveTo = [3, 1, 4, 0])",
        "relocateMarbles(nums = [2,2,3,3,3,5,6,8,9], moveFrom = [2,3], moveTo = [3,5])",
        "relocateMarbles(nums = [2, 5, 5, 2, 8, 9], moveFrom = [2], moveTo = [9])",
        "relocateMarbles(nums = [2, 2, 2, 4, 5, 6, 8, 9, 9], moveFrom = [2, 5, 8], moveTo = [4, 6, 9])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 4)",
        "countPairs(nums = [1, 3, 5, 6, 7], target = 9)",
        "countPairs(nums = [1, 5, -3, 3, 2], target = 4)",
        "countPairs(nums = [4, 6, 7], target = 11)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 1, 2])",
        "minLengthAfterRemovals(nums = [1,2,2,3,4,3])",
        "minLengthAfterRemovals(nums = [1,2,3,1])",
        "minLengthAfterRemovals(nums = [2,3,3,4,3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [0,0,0,0,0,0,0,0])",
        "minLengthAfterRemovals(nums = [3, 2, 3, 1, 2, 4, 3, 2])",
        "minLengthAfterRemovals(nums = [0,1,2,3,3,3,4,5])",
        "minLengthAfterRemovals(nums = [0, 1, 0, 1, 0, 1, 1, 1, 1, 1])"
    ],
    "sample_303": [
        "countSeniors(details = [\"70 years old\", \"34 years old\"])",
        "countSeniors(details = [\"ab55\", \"cd20\", \"ef10\"])",
        "countSeniors(details = [\"John, 23\", \"Mary, 61\", \"Bob, 64\"])",
        "countSeniors(details = [\"bgeb\", \"gebge\", \"bgebge\"])",
        "countSeniors(details = [\"bob, 60, m\", \"joe, 45, m\", \"bob, 30, m\"])",
        "countSeniors(details = [\"Ben:22\", \"Mike:45\", \"David:83\"])",
        "countSeniors(details = [\"john25\", \"mary23\", \"nancy65\", \"mary61\"])",
        "countSeniors(details = [\"Aditya - 19\", \"Rohan - 61\", \"Rohit - 72\", \"Sarita - 68\"])",
        "countSeniors(details = [\"Oluwaseun, 33\", \"Chioma, 62\", \"Samuel, 35\"])",
        "countSeniors(details = [\"Mthreesense\", \"Mtruus\", \"Mthreem\", \"Mthreemtruus\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abccba\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"bbbab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcdabcd\")",
        "longestSemiRepetitiveSubstring(\"leetcode\")",
        "longestSemiRepetitiveSubstring(s = \"xyxzzxyx\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"ba\", s2 = \"anana\")",
        "canBeEqual(s1 = \"apple\", s2 = \"banana\")",
        "canBeEqual(s1 = \"baa\", s2 = \"aaa\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nan\")",
        "canBeEqual(\"aab\", \"baa\")",
        "canBeEqual(\"hello\", \"hlelo\")",
        "canBeEqual(s1 = \"pat\", s2 = \"tap\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"BaN\", s2 = \"NaN\")",
        "canBeEqual(\"ab\", \"ba\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cde\", s3 = \"efg\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"a\", s3 = \"bb\")",
        "findMinimumOperations(\"abcdefgh\", \"abcdefgh\", \"abcdefgh\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abca\", s3 = \"cbaa\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [2,3,1,2,4,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 7)",
        "lengthOfLongestSubsequence(nums = [3,4,-1,0], target = 4)",
        "lengthOfLongestSubsequence(nums = [5,4,3,2,1], target = 2)",
        "lengthOfLongestSubsequence(nums = [2,3,1,4,5,6,7,8,9,10], target = 2)",
        "lengthOfLongestSubsequence(nums = [2,1,5,3,7,4,6], target = 7)",
        "lengthOfLongestSubsequence(nums = [3, 4, -1, -4, -2], target = 5)",
        "lengthOfLongestSubsequence(nums = [3, 4, 6, 7, 8, 1, 2], target = 3)",
        "lengthOfLongestSubsequence(nums = [3, 3, 5, 8, 12], target = 8)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1, 2, 3])",
        "minimumSum([-2, -3, 4])",
        "minimumSum(nums = [1, 1, 2, 1])",
        "minimumSum(nums = [-4, -1, -2, -3])",
        "minimumSum(nums = [3,4,2])",
        "minimumSum(nums = [1, 7, 2, 3, 2])",
        "minimumSum([-4, -2, -8, -1, -2])",
        "minimumSum(nums = [2, 5, 1, 4, 3, 7, 3])",
        "minimumSum(nums = [1, 5, 10, 25, 10, 1])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ba\", \"ana\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"gh\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"bat\", \"rat\"])",
        "minimizeConcatenatedLength(words = [\"baa\", \"aaab\", \"aabaa\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"za\", \"za\", \"za\"])",
        "minimizeConcatenatedLength(words = [\"z\", \"x\", \"x\", \"z\"])",
        "minimizeConcatenatedLength(words = [\"is\", \"this\", \"sample\", \"sentence\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"da\", \"ad\", \"a\", \"bc\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"110101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010\", k = 3)",
        "shortestBeautifulSubstring(s = \"001011\", k = 3)",
        "shortestBeautifulSubstring(s = \"101001\", k = 3)",
        "shortestBeautifulSubstring(s = '11011', k = 3)",
        "shortestBeautifulSubstring(s = '1010101', k = 4)",
        "shortestBeautifulSubstring(s = \"babcaab\", k = 2)",
        "shortestBeautifulSubstring(s = \"1001011000111\", k = 3)",
        "shortestBeautifulSubstring(s = \"0\"*16, k = 1)",
        "shortestBeautifulSubstring(s
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abcw\", \"baz\", \"foo\", \"bar\", \"xtfn\", \"abcdef\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"catdog\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\", \"na\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"ba\", \"anana\"])",
        "minimizeConcatenatedLength(words = [\"baa\",\"nana\",\"aaa\"])",
        "minimizeConcatenatedLength(words = [\"foo\",\"bar\",\"z\"])",
        "minimizeConcatenatedLength(words = [\"baa\", \"abc\", \"bca\", \"abc\", \"abca\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"ab\",\"abc\",\"cd\",\"cdab\",\"xyz\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 30, m = 5)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3])",
        "alternatingSubarray(nums = [1,2,3,5,6,7])",
        "alternatingSubarray(nums = [1,2,3,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,5,6,4])",
        "alternatingSubarray(nums = [3,5,4,6])",
        "alternatingSubarray(nums = [2,3,5,1,2,5])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 4, 7, 9, 8])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,1,1])",
        "findMaximumLength(nums = [0,1])",
        "findMaximumLength(nums = [1,2,3,2,1])",
        "findMaximumLength(nums = [0,0,1])",
        "findMaximumLength(nums = [0,1,1,0])",
        "findMaximumLength(nums = [2,3,1,1,4])",
        "findMaximumLength([1,0])",
        "findMaximumLength(nums = [1,3,2,4,3,1])",
        "findMaximumLength(nums = [2, 1, 5, 3, 4, 5])",
        "findMaximumLength(nums = [-2,0,1,-3,3,-1,1,2,-3,4])"
    ],
    "sample_302": [
        "countSeniors(details = [\"abcd
        "countSeniors(details = [\"A 123 45\", \"B 231 55\", \"C 123 45\"])",
        "countSeniors(details = [\"12:00,123,name,surname,age\", \"1:00,345,name,surname,age\"])",
        "countSeniors(details = [\"mq20121128_3_Senior\", \"px20121128_2_Senior\"])",
        "countSeniors(details = [\"pwwkew 123456\", \"jdgfdshg 987654\"])",
        "countSeniors(details = [\"6 456 87\", \"9 456 21\", \"6 456 18\"])",
        "countSeniors(details = [\"josef50,1990-01-01\", \"john59,1998-04-01\"])",
        "countSeniors(details = [\"244522 1012\", \"244522 5231\", \"244522 2231\"])",
        "countSeniors(details = [\"123_12AA/22_1\", \"234_12BB/26_2\", \"345_12CC/36_3\"])",
        "countSeniors(details = [\"Rahul:21.9\", \"Amit:34.2\", \"Rahul:39.0\", \"Amit:58.2\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ba\", s2 = \"na\")",
        "canBeEqual(s1 = \"ba\", s2 = \"anana\")",
        "canBeEqual(s1 = \"baa\", s2 = \"nana\")",
        "canBeEqual(s1 = \"baa\", s2 = \"aab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"zyx\")",
        "canBeEqual(s1 = \"baa\", s2 = \"bnna\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"bbba\", s2 = \"aabb\")",
        "canBeEqual(s1 = \"baf\", s2 = \"fee\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 5, 8])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 3, 8])",
        "minimumCoins(prices = [1, 2, 5, 10, 25])",
        "minimumCoins(prices = [1, 2, 6, 7, 8, 10])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20, 24])",
        "minimumCoins(prices = [3, 1, 2, 1, 1, 2])",
        "minimumCoins(prices = [10, 60, 200, 300, 1000])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1,2,3])",
        "minimumSeconds(A = [1,2,3])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1,4,2,3])",
        "minimumSeconds(A = [0,1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5,6,7,8])",
        "minimumSeconds(A = [3,6,9,12])",
        "minimumSeconds(A = [0,1,1,0])",
        "minimumSeconds(A = [1,1,3,3,3])",
        "minimumSeconds(A = [8,1,5,2,6,3,5])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\", \"tac\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"bb\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"bar\", \"foo\", \"goo\", \"rab\"])",
        "maximumNumberOfStringPairs(words = [\"mam\", \"madam\", \"man\", \"kangaroo\"])",
        "maximumNumberOfStringPairs(words = [\"bab\", \"foo\", \"cbb\", \"foo\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"dad\", \"add\", \"deed\", \"good\", \"dad\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\", \"cats\", \"dog\", \"god\", \"dot\", \"cat\", \"cogs\", \"sod\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 4])",
        "minSum([1, 2, 3], [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 5, 2])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [4, 5, 6, 7])",
        "minSum(nums1 = [0, 2, 4], nums2 = [1, 3, 5])",
        "minSum(nums1 = [1, 1, 0, 0], nums2 = [1, 2, 1, 2])",
        "minSum(nums1 = [1, -1, -2], nums2 = [0, -2, -3])",
        "minSum(nums1 = [4, 9, 1], nums2 = [4, 9, 2])",
        "minSum(nums1 = [3, -4, -4], nums2 = [9, -9])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"pear\")",
        "findWordsContaining(words = [\"a\", \"ab\", \"abc\"], x = \"bc\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"orange\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"grapes\"], x = \"p\")",
        "findWordsContaining(words = [\"pink\", \"blue\", \"green\"], x = \"no\")",
        "findWordsContaining(words = [\"ba\", \"a\", \"an\", \"nana\"], x = \"n\")",
        "findWordsContaining(words = [\"apple\", \"grapes\", \"peach\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"test\", \"example\", \"tour\"], x = \"ex\")",
        "findWordsContaining(words = [\"dog\", \"god\", \"doggy\", \"car\"], x = \"cat\")",
        "findWordsContaining(words = [\"david\", \"peter\", \"james\", \"david\", \"rachel\", \"david\"], x = \"david\")"
    ],
    "sample_397": [
        "maxSum(nums = [1,1,1,2,2,3], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,1,1], m = 1, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 5)",
        "maxSum(nums = [2,1,5,1,3,2], m = 2, k = 3)",
        "maxSum(nums = [0, 1, 1, 0], m = 2, k = 2)",
        "maxSum(nums = [2, 2, 2, 3, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 3, 4], m = 2, k = 4)",
        "maxSum(nums = [4, 3, 2, 7, 8, 2, 3], m = 3, k = 3)",
        "maxSum([0,1,0,1,0,1], 2, 2)",
        "maxSum(nums = [2, 1, 2, 7, 5, 4, 7, 9], m = 3, k = 2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [0, 2], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 1, 3], moveFrom = [0, 2], moveTo = [1, 2])",
        "relocateMarbles(nums = [1,2,2,3,4], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1,1,1,2,2,2], moveFrom = [1,1,1], moveTo = [2,2,2])",
        "relocateMarbles(nums = [4, 2, 2, 3, 1, 2], moveFrom = [0, 3], moveTo = [2, 5])",
        "relocateMarbles(nums = [2, 1, 2, 4, 3, 3], moveFrom = [3], moveTo = [])",
        "relocateMarbles(nums = [5,1,2,5,2,3,1,3,5,2,1], moveFrom = [1,2,3,5], moveTo = [3,4,6,7])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [6, 7, 8, 9, 10, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [5,6,7,8,9,1,2,3,4])",
        "minimumRightShifts(nums = [2, 1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 1, 1], money = 3)",
        "buyChoco(prices = [2, 3, 5], money = 10)",
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices = [1, 2, 1], money = 3)",
        "buyChoco(prices = [1, 3, 5, 7], money = 10)",
        "buyChoco(prices = [1, 5], money = 5)",
        "buyChoco(prices = [10, 20], money = 10)",
        "buyChoco(prices = [4, 5, 2], money = 10)",
        "buyChoco(prices = [1,2,3], money = 2)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 7)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 17)",
        "lengthOfLongestSubsequence(nums = [4, 3, 2, 7, 8, 2, 3, 1], target = 9)",
        "lengthOfLongestSubsequence(nums = [3, 4, -1, 0, 3], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 5, 8, 4, 7], target = 5)",
        "lengthOfLongestSubsequence(nums = [5, 10, 2, 7], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,3,5,7,9,11,13,17], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 2, 2, 4, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2], target = 6)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcccccaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbab\")",
        "longestSemiRepetitiveSubstring(s = \"abcbc\")",
        "longestSemiRepetitiveSubstring(s = \"aabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcbabcb\")",
        "longestSemiRepetitiveSubstring(s = \"abcc\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"na\")",
        "findWordsContaining(words = [\"ba\", \"na\", \"an\"], x = \"n\")",
        "findWordsContaining(words = [\"hello\", \"goodbye\", \"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"Python\", \"Java\", \"JavaScript\", \"PHP\"], x = \"J\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mq\", \"px\", \"zy\", \"rose\"], x = \"n\")",
        "findWordsContaining(words = [\"apple\", \"p\", \"plum\", \"q\", \"l\"])"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"a\", \"prev\", \"b\", \"prev\", \"c\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"last\", \"visited\", \"integers\", \"2\", \"1\", \"prev\", \"prev\", \"-1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\", \"prev\", \"next\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"pop\", \"push\", \"pop\", \"push\", \"prev\", \"pop\"])",
        "lastVisitedIntegers(words = [\"i\", \"like\", \"leetcode\", \"i\", \"like\", \"coding\", \"leetcode\", \"i\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"3\", \"4\", \"prev\", \"5\", \"prev\", \"6\"])",
        "lastVisitedIntegers(words = [\"b\", \"a\", \"c\", \"b\", \"a\", \"b\", \"a\", \"c\", \"b\", \"b\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"baa\", s2 = \"nana\")",
        "canBeEqual(\"abcd\", \"bacd\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bab\")",
        "canBeEqual(s1 = \"tac\", s2 = \"cat\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abc\")",
        "canBeEqual(s1 = \"bab\", s2 = \"aab\")",
        "canBeEqual(s1 = \"man\", s2 = \"man\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"cbadef\")",
        "canBeEqual(\"abba\", \"deed\")",
        "canBeEqual(\"bam\", \"man\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [2,3,4])",
        "minimumSum(nums = [2,3,4])",
        "minimumSum(nums = [3,1,2])",
        "minimumSum(nums = [3,4,5,1,2])",
        "minimumSum([2,3,1,4])",
        "minimumSum(nums = [4, 1, 5, 2])",
        "minimumSum(nums = [5, 2, 3])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 18)",
        "lengthOfLongestSubsequence(nums = [2, 7, 11, 15], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 0)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 8)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 7, 9, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [4, 6, 3, 2, 9, 10, 15, 12, 11], target = 17)"
    ],
    "sample_368": [
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'YmpH')",
        "sortVowels(\"YmpH\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(\"Lorem ipsum dolor sit amet\")",
        "sortVowels('apple')",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = 'LympH')",
        "sortVowels(\"Mango\")",
        "sortVowels(s = \"I am a human\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[9,8],[7,6]])",
        "matrixSum(nums = [[1,2],[4,5]])",
        "matrixSum([[1, 1], [1, 1]])",
        "matrixSum(matrix = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3],[9, 8, 7]])",
        "matrixSum(nums = [[9,2,7],[3,8,1],[6,5,4]])",
        "matrixSum(matrix = [[-9,4,-3],[3,9,-1],[1,-4,3]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [2, 3, 1, 5])",
        "maximumTripletValue([1,2,1])",
        "maximumTripletValue(nums = [3, 2, 6, 1])",
        "maximumTripletValue(nums = [3,0,2,7])",
        "maximumTripletValue(nums = [1, 0, 2, 0, 3])",
        "maximumTripletValue(nums = [4, 2, 5, 6])",
        "maximumTripletValue(nums = [3, 4, 6, 5])",
        "maximumTripletValue(nums = [5, 2, 6, -1, 7, 3, 4, -2])",
        "maximumTripletValue([-5,-3,2,1,1,3])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [3, 4, 2, 3])",
        "alternatingSubarray(nums = [2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [2, 1, 4, 2, 3])",
        "alternatingSubarray(nums = [0, 2, 2, 0])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 1])",
        "alternatingSubarray(nums = [2,2,2,2,2,2,2,2,2,2])",
        "alternatingSubarray(nums = [2, 5, 10, 2])",
        "alternatingSubarray(nums = [3, -2, 3, -2, 3, -2])",
        "alternatingSubarray(nums = [5, 2, 4, 7, 6, 3, 5, 7, 1])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"ababa\", k = 2)",
        "beautifulSubstrings(s = \"ababa\", k = 3)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"ababa\", k = 4)",
        "beautifulSubstrings(s = \"abcba\", k = 2)",
        "beautifulSubstrings(\"ababa\", 3)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"babab\", k = 2)",
        "beautifulSubstrings(\"abab\", 3)",
        "beautifulSubstrings(s = \"aabccba\", k = 3)"
    ],
    "sample_449": [
        "minChanges(s = \"aab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"aa\")",
        "minChanges(\"aab\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aaaaaa\")",
        "minChanges(s = \"rra\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"11\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"1110\")",
        "minimumSteps(s = \"11011\")",
        "minimumSteps(s = \"000111\")",
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s = \"123\")",
        "minimumSteps(\"0000000000000101\")",
        "minimumSteps(\"1110101010110\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"Seniors with age < 60 : 10\", \"Seniors with age >=60: 2\"])",
        "countSeniors(details=[\"11230-59-00-000\",\"11230-60-00-000\",\"11230-61-00-000\"])",
        "countSeniors(details = [\n    \"aadntdummy\",\n    \"aadntdummy\",\n    \"adntdummy\"\n])",
        "countSeniors(details = [\"12:0:4:20:0:12:0:44:0:0:0:0\",\n                                \"12:0:4:20:0:12:0:44:0:0:0:0\",\n                                \"12:0:4:20:0:12:0:44:0:0:0:0\"])",
        "countSeniors(details = [\"John:20-06-2005,Peter:50-06-2005,Eliza:70-06-2005\"])",
        "countSeniors(details = [\"ashley:47\", \"krish:48\", \"manish:23\"])",
        "countSeniors(details = [\"Bradley  |  40\", \"Jose  |  80\", \"Tom   |  75\"])",
        "countSeniors(details=[\"paula0004453\", \"george000113\", \"jane000112\"])",
        "countSeniors(details = [\"mq52001212,cx52001212,ba52001212,po52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,po52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba52001212,ba5",
        "countSeniors(details = [\"jn78hj\", \"am67b\", \"a8s3o4\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,4])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,3,2,2])",
        "minGroupsForValidAssignment(nums = [2,2,1,2,2])",
        "minGroupsForValidAssignment(nums = [1,3,4,3,1])",
        "minGroupsForValidAssignment(nums = [4, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2,1,2,1,2,2])",
        "minGroupsForValidAssignment(nums = [2,1,4,4,4])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[1, 0], [0, 1], [1, 0], [0, 1]], k = 2)",
        "countPairs(coordinates = [[0,0], [0,1], [1,1], [1,0]], k = 1)",
        "countPairs(coordinates = [[1, 3], [2, 3]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [2, 1]], k = 2)",
        "countPairs(coordinates = [[1, 0], [2, 0], [3, 0]], k = 1)",
        "countPairs(coordinates = [[1, 0], [1, 0], [2, 2], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 1], [1, 0], [2, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1,2],[2,3],[1,3],[2,1]], k = 2)",
        "countPairs(coordinates = [[-2, 2], [-1, -1], [2, 0], [1, -2], [1, 2], [-1, 1], [0, -2], [-2, 0], [0, 2], [2, -2]], k = 4)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 1], m = 2, k = 2)",
        "maxSum(nums = [2, 1, 5, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1,2,1], m = 3, k = 1)",
        "maxSum(nums = [1, 3, 2, 2, 1], m = 2, k = 2)",
        "maxSum(nums = [3,1,2,1], m = 2, k = 2)",
        "maxSum(nums = [0, 1, 2, 2], m = 2, k = 3)",
        "maxSum(nums = [1, 5, 3, 7], m = 3, k = 2)",
        "maxSum([1, 1, 2, 2, 3, 3], 5, 3)",
        "maxSum(nums = [1,2,1,3,2,5], m = 3, k = 3)",
        "maxSum(nums = [4, 3, 5, 10, 11, 12], m = 3, k = 4)"
    ],
    "sample_452": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"baab\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"hlelo\")",
        "minChanges(s = \"qwertyuiop\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 1, 3])",
        "minOperations([1,2,3,4], [4,3,2,1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [4, 1, 2, 3])",
        "minOperations(nums1 = [1, 5, 3], nums2 = [3, 1, 5])",
        "minOperations([1, 3, 5], [3, 5, 1])",
        "minOperations(nums1 = [1, 5, 3], nums2 = [5, 2, 4])",
        "minOperations(nums1 = [1, 1, 1, 2], nums2 = [1, 2, 1, 2])",
        "minOperations(nums1 = [2, 3, 1, 1], nums2 = [2, 3, 1, 4])",
        "minOperations(nums1 = [0, 5, 6, 1, 2], nums2 = [2, 5, 7, 1, 0])",
        "minOperations([0, 5, 2, 3, 0], [4, 0, 5, 1, 2])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"11011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010\", k = 1)",
        "shortestBeautifulSubstring(\"10101\", 2)",
        "shortestBeautifulSubstring(s = \"0010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)",
        "shortestBeautifulSubstring(\"1010101\", 3)",
        "shortestBeautifulSubstring(s = '101101', k = 3)",
        "shortestBeautifulSubstring(s = \"1111\", k = 4)",
        "shortestBeautifulSubstring(s = \"101111010\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101110101111\", k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [-1, 0, 1, 2, -1, -4])",
        "maximumTripletValue(nums = [3, 0, 2])",
        "maximumTripletValue(nums = [-1, 2, -3, 4])",
        "maximumTripletValue(nums = [-1, -2, -3])",
        "maximumTripletValue(nums = [1, 4, 3, 2])",
        "maximumTripletValue(nums = [3, 2, 1, 5])",
        "maximumTripletValue(nums = [0, 2, -3])",
        "maximumTripletValue(nums = [1, 4, 3, 1])",
        "maximumTripletValue(nums = [4, 2, 1, 5, 0])",
        "maximumTripletValue(nums = [-1, -2, 1, 2, -1, -4])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 6, limit = 6)",
        "distributeCandies(n = 12, limit = 2)",
        "distributeCandies(n = 3, limit = 1)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [1,1,2])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,2,3])",
        "minGroupsForValidAssignment(nums = [2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7])",
        "minGroupsForValidAssignment(nums = [4,3,2,3,5,2,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [5, 2, 2, 5])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [0, 1, 2], nums2 = [3, 4, 5])",
        "minSum([1, 2, 3, 4, 5], [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 1, 1])",
        "minSum(nums1 = [3, 3, 3], nums2 = [0, 2, 2])",
        "minSum([4,1,2], [1,2,2])",
        "minSum(nums1 = [0, 1, 1, 1, 1], nums2 = [0, 2, 2, 3, 3])",
        "minSum(nums1 = [3, 3, 5, -4], nums2 = [8, -10, 1, 2])",
        "minSum([2, 3, 2, -7], [4, -5, 1, -8])"
    ],
    "sample_453": [
        "minChanges(s = \"aab\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"baaab\")",
        "minChanges(\"banana\")",
        "minChanges(\"abc\")",
        "minChanges(s = \"aabcc\")",
        "minChanges(s = \"baba\")",
        "minChanges(s = \"ab\" * 2)",
        "minChanges(\"a\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aaiueo\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"baaab\", k = 2)",
        "beautifulSubstrings(\"aba\", 3)",
        "beautifulSubstrings(s = \"xyx\", k = 2)",
        "beautifulSubstrings(s=\"aAab\", k=2)",
        "beautifulSubstrings(\"aegis\", 2)",
        "beautifulSubstrings(s=\"aieaae\", k=2)",
        "beautifulSubstrings(s=\"aabaa\", k=1)",
        "beautifulSubstrings(s=\"takayutamikamikamakamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamikamik"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"ababa\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abcabc\", k = 2)",
        "beautifulSubstrings(s = \"abcba\", k = 3)",
        "beautifulSubstrings(\"abac\", 2)",
        "beautifulSubstrings(s = \"abaa\", k = 4)",
        "beautifulSubstrings(\"abacd\", 2)",
        "beautifulSubstrings(s = \"xyzabc\", k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(\"lYmpH\")",
        "sortVowels(s = 'Python')",
        "sortVowels(s = \"liYmpH\")",
        "sortVowels(\"YmPh\")",
        "sortVowels(\"LeetCode\")",
        "sortVowels(s = 'abcdeoiu')",
        "sortVowels(s = 'It is a sunny day')"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1,2,3,1])",
        "minimumSeconds(nums = [3,6,9,12])",
        "minimumSeconds(nums = [1, 3, 6, 4])",
        "minimumSeconds(nums = [1,3,2,1,2])",
        "minimumSeconds(nums = [3, 4, 1, 3])",
        "minimumSeconds(nums = [6,0,1,2,5,4])",
        "minimumSeconds(nums = [2,3,4,4,3,4,5,1])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [3, 2, 2])",
        "minimumSum(nums = [1, 3, 6, 7])",
        "minimumSum([-1, 2, -3, 4])",
        "minimumSum(nums = [-4, -1, 0, 3, 10])",
        "minimumSum(nums = [-10, 10, 20, 30])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 3, 4, 2], k = 3)",
        "minOperations(nums = [3, 1, 4, 1, 5], k = 3)",
        "minOperations(nums = [2, 4, 6], k = 3)",
        "minOperations(nums = [3, 6, 7, 11, 17], k = 5)",
        "minOperations(nums = [7,6,3,4], k = 3)",
        "minOperations(nums = [6, 7, 2, 4, 9, 5], k = 3)",
        "minOperations(nums = [2, 2, 5, 3, 3, 5], k = 3)",
        "minOperations(nums = [3, 4, 5, 10, 6], k = 6)",
        "minOperations(nums = [3,2,3,4,3,5,2], k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 1, 2], m = 2, k = 2)",
        "maxSum(A = [3, 1, 2, 4, 3], m = 3, k = 2)",
        "maxSum(A = [1, 1, 1], m = 3, k = 2)",
        "maxSum(A = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2], m = 3, k = 4)",
        "maxSum(A = [1, 2, 2, 3, 4, 2], m = 3, k = 4)",
        "maxSum(A = [1, 4, 2, 8, 6], k = 5, m = 2)",
        "maxSum(A = [2, 3, 5, 1, 7], m = 2, k = 4)",
        "maxSum(A = [2, 2, 2, 5, 1, 5], k = 4, m = 2)",
        "maxSum(A = [9, 11, 4, 2, 6, 8], m = 2, k = 4)",
        "maxSum(A = [0, 0, 2, -1, 3, 3], m = 3, k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"10110\")",
        "minimumSteps(s = \"101010\")",
        "minimumSteps(s = \"010000\")",
        "minimumSteps(s = \"100011\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [2, 4, 6, 8])",
        "maxSubarrays(nums = [1,1,1,1,1])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [-1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 3, 5, 2, 3, 5])",
        "maxSubarrays([0,1,0,1,1,0,1,1,1,1])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 5], money = 10)",
        "buyChoco(prices = [5, 5], money = 10)",
        "buyChoco(prices = [10, 20], money = 25)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6], money = 3)",
        "buyChoco(prices = [5, 1, 3, 4], money = 9)",
        "buyChoco(prices = [3,4,5,2], money = 10)",
        "buyChoco(prices = [4, 3, 2, 3, 4], money = 7)",
        "buyChoco(prices = [5, 2, 3, 7, 10], money = 12)",
        "buyChoco(prices = [12, 7, 5, 4], money = 13)"
    ],
    "sample_290": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"10011\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"10010\")",
        "minimumSteps(s = \"011211100\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [2,2,2,2])",
        "minLengthAfterRemovals(nums = [4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,1,1,2])",
        "minLengthAfterRemovals(nums = [1,2,1,3,3,4])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_420": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [3, 2, 1, 3, 4], k = 3)",
        "minOperations(nums = [1, 3, 5, 7], k = 4)",
        "minOperations(nums = [1, 3, 6, 2, 5, 4], k = 3)",
        "minOperations(nums = [4, 4, 5, 5], k = 2)",
        "minOperations(nums = [7, 1, 5, 2, 3, 4, 4], k = 4)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 2, 3])",
        "isGood(nums = [1, 2, 2, 3])",
        "isGood(nums = [1, 2, 2, 3, 3, 3])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 5])",
        "isGood(nums = [1, 2, 3, 3, 4, 4])",
        "isGood(nums = [3,2,3])",
        "isGood(nums = [1, 3, 2, 3, 1])",
        "isGood(nums = [1, 1, 3])",
        "isGood([1,1,2,3])",
        "isGood(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_325": [
        "isFascinating(n = 9)",
        "isFascinating(n = 9)",
        "isFascinating(n = 9)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 1)",
        "isFascinating(123456789)",
        "isFascinating(n = 728)",
        "isFascinating(n = 999999999999)",
        "isFascinating(n = 556)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [4, 3, 2, 1])",
        "isGood([1,2,3,4])",
        "isGood(nums = [1, 2, 2, 3, 3, 3])",
        "isGood([2,3,1])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [4,3,2,1,0])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1,2,3])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [0, 1, 0])",
        "minimumSeconds(nums = [1, 3, 1])",
        "minimumSeconds(nums = [1, 4, 3, 2])",
        "minimumSeconds(nums = [0,0,0,0])",
        "minimumSeconds(nums = [1, 3, 8, 4, 2])",
        "minimumSeconds(nums = [7,2,3,5,4])",
        "minimumSeconds(nums = [2, 1, 2, 5, 2, 2])",
        "minimumSeconds(nums = [1, 5, 10, 2, 8])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [2,3,1,5,6,4])",
        "minimumRightShifts(nums = [1, 3, 4, 2])",
        "minimumRightShifts([2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [2, 5, 1, 3, 7, 9, 6, 4])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [0, 1, 2])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [0,1,2,3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,3])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [4, 3, 2, 1])",
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,1])",
        "minOperations([1, 1], [1, 1])",
        "minOperations(nums1 = [4, 2, 2], nums2 = [4, 2, 2])",
        "minOperations([3, 2, 2, 1], [2, 2])",
        "minOperations([0,1,0,0,0], [0,1,0,0,0])",
        "minOperations(nums1 = [1, 3, 7, 10], nums2 = [2, 6, 9, 13])",
        "minOperations(nums1 = [1,3,4,3,5], nums2 = [4,3,5,3,1])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"abab\", k = 2)",
        "shortestBeautifulSubstring(s = \"10\", k = 1)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = \"111221\", k = 2)",
        "shortestBeautifulSubstring(s = \"1221\", k = 3)",
        "shortestBeautifulSubstring(s = \"12345\", k = 4)",
        "shortestBeautifulSubstring(s = \"13\", k = 3)",
        "shortestBeautifulSubstring(s = \"abcabcabcab\", k = 3)",
        "shortestBeautifulSubstring(s = \"1234aab\", k = 2)",
        "shortestBeautifulSubstring(\"ababdabdba\", 3)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment([1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1,2,1,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2, 1, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 1])",
        "minGroupsForValidAssignment([1, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [2,4,4,4,6,6,6,8,8])"
    ],
    "sample_289": [
        "minimumSteps(s = \"11\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"10011\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"011001\")",
        "minimumSteps(s = \"0001100\")",
        "minimumSteps(\"00\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 8)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10], target = 11)",
        "lengthOfLongestSubsequence(nums = [3, 1, 2, 4, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [4, 2, 3, 6, 1], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 4, 2, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [2,3,4,5,10], target = 9)",
        "lengthOfLongestSubsequence(nums = [4, 2, 1, 2, 2, 1], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,3,2,2,2,2,2,2,2,2,2,2], target = 10)",
        "lengthOfLongestSubsequence(nums = [8, 4, 7, 9, 3, 1], target = 20)"
    ],
    "sample_259": [
        "minimumSum(nums = [10,9,2,5,3,7,101,18])",
        "minimumSum(nums = [1,4,3,2])",
        "minimumSum(nums = [3,4,5,1,2])",
        "minimumSum(nums = [3,5,2,4])",
        "minimumSum(nums = [-4,-3,-2,-1,0,1,2,3,4])",
        "minimumSum(nums = [2,1,5,2,3,4])",
        "minimumSum(nums = [0, 1, 0, 3, 12])",
        "minimumSum([1,2,3,4,5,1,2,3,4,5])",
        "minimumSum(nums = [2,1,5,6,8,4])",
        "minimumSum([1, 2, 4, 4, 2, 1, 1])"
    ],
    "sample_398": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 1], m = 3, k = 2)",
        "maxSum(nums = [2,1,2], m = 2, k = 2)",
        "maxSum(nums = [0,1,0], m = 2, k = 1)",
        "maxSum(nums = [1,2,1,3,4], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 3, 4, 3, 2], m = 2, k = 2)",
        "maxSum([1, 1, 1, 1, 2, 2, 2, 3, 3, 4], 3, 2)",
        "maxSum(nums = [3,4,1,5], m = 2, k = 5)",
        "maxSum(nums = [0,1,2,2,1,0,1,2,2], m = 3, k = 2)",
        "maxSum(nums = [5, 1, 5, 9, 3], m = 2, k = 2)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"ana\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"baa\", s2 = \"aab\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"aaa\", s3 = \"aaaa\")",
        "findMinimumOperations(\"mq\", \"px\", \"zy\")",
        "findMinimumOperations(s1 = \"baaa\", s2 = \"aaab\", s3 = \"aaaab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"cat\", s3 = \"tac\")"
    ],
    "sample_427": [
        "minOperations(nums = [2, 1, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [3, 3, 3, 3])",
        "minOperations(nums = [1, 1, 4, 1])",
        "minOperations(nums = [3, 5, 7, 9])",
        "minOperations(nums = [5, 1, 7])",
        "minOperations([4, 9, 6])",
        "minOperations(nums = [1,1,1,2,3,4,4,4])",
        "minOperations([1,2,3])",
        "minOperations([3, 3, 2, 3, 3, 5])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 11, 5])",
        "minimumCoins(prices = [1, 5, 8, 9, 10])",
        "minimumCoins([1, 2, 3, 4, 5])",
        "minimumCoins(prices = [10, 5, 1, 2])",
        "minimumCoins(prices = [1, 2, 5, 10, 100, 500])",
        "minimumCoins(prices = [10, 1, 5, 8, 9, 10, 20])",
        "minimumCoins([3, 3, 1, 1, 3, 10])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,1,2])",
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds(nums = [2,2,3,3,3,4])",
        "minimumSeconds(nums = [3,4,3,1,2])",
        "minimumSeconds([1,0])",
        "minimumSeconds(nums = [4,5,6,7,1,2])",
        "minimumSeconds([3, 1, 2, 3])",
        "minimumSeconds(nums = [3,3,3,4,4,4,3,3,3])"
    ],
    "sample_448": [
        "minChanges(s = \"ab\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"abcd\")",
        "minChanges(\"abcd\")",
        "minChanges(\"aba\")",
        "minChanges(s = \"abccde\")",
        "minChanges(s = \"abccd\")",
        "minChanges(s = \"aaba\")",
        "minChanges(\"anna\")",
        "minChanges(s = \"abccccddddeeeee\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [2, 7, 11, 15], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 8, 9, 3, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [9, 1, 5, 3, 8], limit = 5)",
        "lexicographicallySmallestArray(nums = [1, 2, 4, 5, 7], limit = 3)",
        "lexicographicallySmallestArray(nums = [5, 8, 4, 3, 6], limit = 2)",
        "lexicographicallySmallestArray(nums = [4, 6, 2, 5, 7, 3], limit = 3)",
        "lexicographicallySmallestArray(nums = [3, 5, 6, 7], limit = 2)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [2,2,2])",
        "sumCounts(nums = [0,1,2])",
        "sumCounts(nums = [1,2,2,3,3,3])",
        "sumCounts(nums = [1,1,2,3])",
        "sumCounts(nums = [1,2,3,4,5,6])",
        "sumCounts([1,1,2,2])",
        "sumCounts(nums = [1,2,1])",
        "sumCounts(nums = [3, 0, 0, 1, 2])",
        "sumCounts(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-3, 1, 2])",
        "maximumTripletValue(nums = [2, 3, 0, -2, 4])",
        "maximumTripletValue(nums = [2, 3, 5, 4])",
        "maximumTripletValue(nums = [3, -5, 1, 2])",
        "maximumTripletValue(nums = [1, 2, 0, 2, 7])",
        "maximumTripletValue(nums = [-4,-2,-1,2,3])",
        "maximumTripletValue(nums = [-2, -3, 0, 5, 1])",
        "maximumTripletValue(nums = [3, 9, 0, 6])",
        "maximumTripletValue(nums = [1, 6, 2, -4, -1])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"a\", k = 3)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"abca\", k = 1)",
        "beautifulSubstrings(\"ababa\", 6)",
        "beautifulSubstrings(s = \"abcdae\", k = 3)",
        "beautifulSubstrings(s = \"aaeae\", k = 5)",
        "beautifulSubstrings(s = \"bae\", k = 1000000007)",
        "beautifulSubstrings(s = \"abecd\", k = 3)",
        "beautifulSubstrings(\"aab\", 1)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3], target = 4)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [-1, 0, 1, 2, -1, -4], target = 0)",
        "countPairs(nums = [1, 2, 3], target = 6)",
        "countPairs(nums = [1, 3, 2], target = 4)",
        "countPairs([0, 1, 2], 2)",
        "countPairs(nums = [4, 5, -1, 0, -2, -3], target = 0)",
        "countPairs(nums = [4,5,7,3,2,6], target = 6)"
    ],
    "sample_462": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 9, limit = 2)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 20, limit = 10)",
        "distributeCandies(candyCount = 5, limit = 2)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(c3 = 1, n = 5)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1,3,5], nums2 = [2,4,6])",
        "minOperations(nums1 = [1, 3, 4], nums2 = [2, 3, 5])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 1, 1])",
        "minOperations(nums1 = [3,4,5], nums2 = [1,2,3])",
        "minOperations(nums1 = [2,3,5], nums2 = [3,4,5])",
        "minOperations([1, 2, 5], [3, 4])",
        "minOperations(nums1 = [1, 1, 2, 3], nums2 = [2, 3, 4, 4])",
        "minOperations(nums1 = [4, 2, 3], nums2 = [4, 6, 9])",
        "minOperations(nums1 = [3, 4, 2, 7], nums2 = [3, 6, 1, 4, 8])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2])",
        "minOperations([1, 2, 3, 4, 5])",
        "minOperations(nums = [3, 3, 3, 3, 3])",
        "minOperations(nums = [3,2,1])",
        "minOperations(nums = [2,1,1])",
        "minOperations(nums = [4, 1, 3])",
        "minOperations(nums = [5, 6, 7, 8, 9])",
        "minOperations(nums = [2,3,5,6])",
        "minOperations(nums = [1,3,1,2])",
        "minOperations(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"0011\", k = 2)",
        "shortestBeautifulSubstring(s = \"010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10000\", k = 1)",
        "shortestBeautifulSubstring(s = \"1221\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111101101\", k = 3)",
        "shortestBeautifulSubstring(s = \"011101011011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1123123123\", k = 3)",
        "shortestBeautifulSubstring(\"10111011110011111\", 3)",
        "shortestBeautifulSubstring(s = \"0000000000000000000011101010000011100001101010110100011110010111100011101010101000110111\", k = 2)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 1])",
        "minimumSeconds(nums = [0,0,0])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [4,2,2,2,1])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 2])",
        "minOperations(nums = [2, 3, 3])",
        "minOperations(nums = [2, 2, 2, 3, 3])",
        "minOperations(nums = [2,1,2])",
        "minOperations(nums = [1, 1, 1, 3])",
        "minOperations(nums = [2, 3, 3, 5])",
        "minOperations(nums = [2, 1, 2, 3, 1, 2])",
        "minOperations(nums = [2,3,3,3,2,3])",
        "minOperations(nums = [1,1,1])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 2, 2, 5, 7])",
        "alternatingSubarray(nums = [2, 1, 2, 3])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 7])",
        "alternatingSubarray(nums = [1, 3, 5])",
        "alternatingSubarray(nums = [-1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 5, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 5, 9, 7, 6])",
        "alternatingSubarray(nums = [5, 2, 4, 7, 8, 6, 9, 1, 3, 2])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 1, 4, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [2, 1, 2, 3, 1, 2])",
        "minLengthAfterRemovals(nums = [2,2,3,3,2,2])",
        "minLengthAfterRemovals(nums = [0, 1, 0, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [0, 1, 0, 2, 1, 1, 1, 3, 2, 1, 2, 3, 0, 2, 2, 4])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\", \"dog\", \"god\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"ghi\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\", \"cats\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"tattarrattat\", \"tattarrattat\", \"tattarrattat\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xy\", \"aba\", \"xyx\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\", \"tac\", \"moo\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\", \"aaaaaaaaaaa\", \"aaaaaaaaaaaa\", \"aaaaaaaaaaaaa\", \"aaaaaaaaaaaaaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aba\", \"xyz\", \"xyz\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"abc\",\"b\",\"bc\",\"c\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"aab\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abca\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"a\")",
        "canMakeSubsequence(\"baz\", \"foo\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"z\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(\"abab\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(\"aab\")",
        "longestSemiRepetitiveSubstring(s = \"abbbba\")",
        "longestSemiRepetitiveSubstring(s = \"aabaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"bbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcccba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabb\")",
        "longestSemiRepetitiveSubstring(\"abcdabcdabcd\")",
        "longestSemiRepetitiveSubstring(\"bababa\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,1], m = 1, k = 2)",
        "maxSum(nums = [1,1,1], m = 2, k = 2)",
        "maxSum(nums = [2,2,3,2], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8], m = 3, k = 3)",
        "maxSum(nums = [3, 2, 2, 3], m = 3, k = 3)",
        "maxSum([1,2,3,4,5,6], 3, 2)",
        "maxSum(nums = [3,2,3,1,2,4,2,1], m = 3, k = 2)",
        "maxSum(nums = [0,1,1,1,1,2], m = 3, k = 4)",
        "maxSum(nums = [0, 1, 2, 3, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,1,4,2,3], m = 3, k = 2)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\", \"dog\"], x = \"a\")",
        "findWordsContaining(words = [\"bat\", \"cat\", \"rat\"], x = \"a\")",
        "findWordsContaining(words = [\"ba\", \"na\", \"ba\"], x = \"a\")",
        "findWordsContaining(words = [\"ab\", \"bc\", \"cd\", \"ca\"], x = \"a\")",
        "findWordsContaining(words = [\"bar\", \"nana\", \"banana\", \"x\"], x = \"an\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [3,3])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [4], moveTo = [2])",
        "relocateMarbles(nums = [1,1,2,2,3], moveFrom = [2,1], moveTo = [1,2])",
        "relocateMarbles(nums = [1, 1, 2, 3], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1,1,1,2,2,3], moveFrom = [2,1,3], moveTo = [1,3,2])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,1,1], moveTo = [2,3])",
        "relocateMarbles(nums = [3,2,3,1,2,4,1,2], moveFrom = [0,1], moveTo = [3,6])",
        "relocateMarbles(nums = [3, 1, 2, 1, 1, 2, 3], moveFrom = [0, 2, 5], moveTo = [3, 6, 7])",
        "relocateMarbles(nums = [0,1,2,0,2,1,1,1,2,0], moveFrom = [0,0,0,1,1,2,2,3,3,3], moveTo = [0,0,0,0,0,0,0,0,0,0])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-1, 0, 1, 2, -1, -4])",
        "maximumTripletValue(nums = [-1, 2, 1, -4])",
        "maximumTripletValue(nums = [-1, 2, -3, 4])",
        "maximumTripletValue(nums = [1, 3, 4, 2])",
        "maximumTripletValue(nums = [10, 9, 2, 5, 3, 7, 101, 18])",
        "maximumTripletValue([2,3,-2,4])",
        "maximumTripletValue(nums = [2, 1, 5, 0, 4])",
        "maximumTripletValue(nums = [-4, -3, -1, 0, 2, 1])",
        "maximumTripletValue(nums = [2, 5, 3, 6, -1])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(\"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(\"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"leetcode\")",
        "longestSemiRepetitiveSubstring(s = \"aababbaa\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\", \"dog\", \"god\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"rat\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"cba\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"moo\", \"foo\", \"moo\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"aa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abcba\", \"bab\", \"aa\", \"aaaa\"])",
        "maximumNumberOfStringPairs(words = [\"love\", \"leve\", \"code\", \"do\", \"good\"])",
        "maximumNumberOfStringPairs(words = [\"baba\", \"xyaa\", \"yzyy\", \"babax\"])",
        "maximumNumberOfStringPairs(words = [\"aba\",\"baa\",\"abcd\",\"dcba\",\"cdcba\",\"cddcba\",\"abab\",\"aabc\",\"aacb\",\"baba\",\"bbba\",\"abcd\",\"dcba\",\"cdcba\",\"cddcba\",\"abab\",\"aabc\",\"aacb\",\"baba\",\"bbba\",\"abcd\",\"dcba\",\"cdcba\",\"cddcba\",\"abab\",\"aabc\",\"aacb\",\"baba\",\"bbba\",\"abcd\",\"dcba\",\"cdcba\",\"cddcba\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 2, 3], [3, 2, 1], [2, 3, 1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum([[3, 2, 1], [6, 5, 4], [9, 8, 7]])",
        "matrixSum(nums = [[1, 3, 5], [2, 4, 6], [7, 8, 9]])",
        "matrixSum(nums = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9],\n])",
        "matrixSum(nums = [[1, 2, 3], [3, 2, 1], [1, 3, 2]])",
        "matrixSum(nums = [[1,3,5],[2,4,6],[0,9,10]])",
        "matrixSum(nums = [[3, 5, 2], [1, 4, 6], [7, 8, 9]])",
        "matrixSum(nums = [\n    [0, 2],\n    [-1, 2]\n])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ana\", s3 = \"nan\")",
        "findMinimumOperations(\"ab\", \"ab\", \"ab\")",
        "findMinimumOperations(s1 = \"baa\", s2 = \"aab\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nanaba\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cba\", s3 = \"cba\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cde\", s3 = \"def\")",
        "findMinimumOperations(\"ab\", \"ba\", \"ab\")",
        "findMinimumOperations(\"abcde\", \"xyz\", \"abcde\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"cats\", s3 = \"sat\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abc\")",
        "findMinimumOperations(\"abc\", \"abc\", \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abf\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"ba\", s3 = \"bba\")",
        "findMinimumOperations(s1 = \"papaya\", s2 = \"papel\", s3 = \"papar\")",
        "findMinimumOperations(\"abc\", \"abc\", \"abc\")"
    ],
    "sample_324": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 19)",
        "isFascinating(n = 23)",
        "isFascinating(n = 13195)",
        "isFascinating(11)",
        "isFascinating(153)",
        "isFascinating(n = 73)",
        "isFascinating(n = 726)",
        "isFascinating(n = 3719)",
        "isFascinating(n = 9)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1,5,10,25])",
        "minimumCoins(prices = [2, 3, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins([1, 2, 3, 4])",
        "minimumCoins(prices = [2,7,1,5,8,4])",
        "minimumCoins(prices = [5,2,8])",
        "minimumCoins(prices = [1, 10, 25, 35, 84])",
        "minimumCoins([4,5,6,7])",
        "minimumCoins(prices = [1, 2, 7, 6, 8])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [3,3], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "countPairs([1,2,3,4,5],6)",
        "countPairs(nums = [1, 1, 2, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,5,11,5,8], target = 9)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [5,5,5,5,5])",
        "minGroupsForValidAssignment([2,2,2,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [2,3,1,2,1,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,1,3,2,1,3])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1, 2, 3, 4], target = 4)",
        "countPairs(nums = [1, 3, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "countPairs(nums = [10, 20, 30, 40], target = 50)",
        "countPairs(nums = [1, 7, 5, 3], target = 8)",
        "countPairs(nums = [1, 5, -1, -5], target = 6)",
        "countPairs(nums = [10, 2, 5, 1, 8, 13], target = 11)",
        "countPairs(nums = [1, 2, 4, 8, 10], target = 11)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [1, 1, 2], money = 3)",
        "buyChoco(prices = [7, 1, 5, 3, 6, 4], money = 10)",
        "buyChoco(prices = [1, 5, 11], money = 10)",
        "buyChoco(prices = [2, 4, 8], money = 5)",
        "buyChoco(prices = [10, 2, 4, 5], money = 4)",
        "buyChoco(prices = [3, 6, 7, 8, 10], money = 13)",
        "buyChoco(prices = [3, 1, 4, 3, 2, 1], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"hi\", \"world\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"hello\", \"world\", \"hello\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\", \"tac\", \"cat\", \"tac\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"hello\")",
        "sortVowels(\"lOtcede\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"lorem ipsum dolor sit amet\")",
        "sortVowels(s = 'hello')",
        "sortVowels(\"leotcede\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Credibility is lost with lies\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1,2])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts([1, 2])",
        "sumCounts(nums = [2, 2, 2, 2, 2, 2])",
        "sumCounts([3, 1, 4, 1, 5])",
        "sumCounts(nums = [1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 5, 8])",
        "minimumCoins(prices = [1, 5, 8])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 10, 5])",
        "minimumCoins(prices = [1, 5, 3, 6, 8])",
        "minimumCoins(prices = [1, 2, 5, 10, 25])",
        "minimumCoins(prices = [5, 10, 20, 25])",
        "minimumCoins(prices = [1, 10, 6, 5, 2])",
        "minimumCoins(prices = [3,2,5])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 16, m = 3)",
        "differenceOfSums(n = 16, m = 5)"
    ],
    "sample_307": [
        "countSeniors(details = [\"s1:00\", \"s2:30\", \"s3:45\", \"s4:00\"])",
        "countSeniors(details = [\"45-65\", \"50-65\", \"10-50\"])",
        "countSeniors(details = [\"name:alex b:20\", \"name:bob b:60\"])",
        "countSeniors(details = [\"Bob:22\", \"Alice:70\", \"John:65\", \"Tom:28\"])",
        "countSeniors(details = [\"a1:61\", \"b1:78\", \"c1:24\", \"d1:50\"])",
        "countSeniors(details = [\"joe at 25\", \"sam at 30\", \"dan at 60\"])",
        "countSeniors(details = [\"Name: Abhishek, Age: 58\", \"Name: Arjun, Age: 63\", \"Name: Parth, Age: 59\"])",
        "countSeniors(details = [\"bio_78\", \"chem_12\", \"physics_99\", \"math_40\"])",
        "countSeniors(details = [\"kuri\", \"736\", \"854\", \"749\", \"858\", \"766\"])",
        "countSeniors(details = [\"wd44 \", \"sdfg8\", \"dgfs \", \"fgfasd43\"])"
    ],
    "sample_323": [
        "isFascinating(n = 3)",
        "isFascinating(n = 4)",
        "isFascinating(n = 4)",
        "isFascinating(n = 5)",
        "isFascinating(n = 7)",
        "isFascinating(n = 2)",
        "isFascinating(n = 21)",
        "isFascinating(n = 27)",
        "isFascinating(n = 121)",
        "isFascinating(n = 121)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(\"abab\")",
        "minimumBeautifulSubstrings(s = \"aba\")",
        "minimumBeautifulSubstrings(\"abaaabaaa\")",
        "minimumBeautifulSubstrings(\"bababccba\")",
        "minimumBeautifulSubstrings(s = \"baaaaaaaaaaaaaaaaaaaaaa\")",
        "minimumBeautifulSubstrings(s = \"abaaabaaaabaaaabaaaa\")",
        "minimumBeautifulSubstrings(\"bababaaaabaaaa\")",
        "minimumBeautifulSubstrings(s = \"aa\")",
        "minimumBeautifulSubstrings(s = \"1\")",
        "minimumBeautifulSubstrings(\"1\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 8, limit = 3)"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations(nums = [1,2,3,4,5,6,7,8], k = 3)",
        "minOperations(nums = [3,2,1,6,4], k = 3)",
        "minOperations(nums = [2,3,3,1,2], k = 3)",
        "minOperations([4,3,2,1,5],4)",
        "minOperations([4,1,5], 3)",
        "minOperations(nums = [6,3,8,2,5,3], k = 3)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 3, 2, 4])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2', 'prev', 'prev', '3'])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"3\", \"prev\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"a\", \"prev\", \"c\", \"prev\", \"b\", \"prev\", \"a\"])",
        "lastVisitedIntegers(words = [\"dir\", \"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"ab\", \"b\", \"prev\", \"a\", \"prev\", \"a\"])",
        "lastVisitedIntegers(words = [\"one\", \"two\", \"prev\", \"four\", \"prev\", \"three\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', '1', '1', 'prev', '2', 'prev', '3', 'prev', '1'])",
        "lastVisitedIntegers(words = [\"visit\", \"book\", \"prev\", \"visit\", \"prev\"])",
        "lastVisitedIntegers(words = [\"we\", \"1\", \"prev\", \"2\", \"prev\", \"3\", \"next\", \"4\"])",
        "lastVisitedIntegers(words = [\"ba\", \"nana\", \"bal\", \"nana\", \"banana\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3], k = 3)",
        "minOperations(nums = [2, 3, 1, 3, 4], k = 2)",
        "minOperations(nums = [4, 3, 2, 3, 1], k = 3)",
        "minOperations(nums = [3, 2, 1, 5, 4], k = 3)",
        "minOperations(nums = [3, 5, 1, 4, 2], k = 3)",
        "minOperations(nums = [3, 2, 4, 5, 1], k = 4)",
        "minOperations(nums = [3, 3, 5, 5, 5, 5], k = 3)",
        "minOperations(nums = [5, 6, 9, 10, 5, 4, 7], k = 3)",
        "minOperations(nums = [6, 6, 7, 10, 5, 1, 9, 10], k = 4)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(\"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abbba\")",
        "longestSemiRepetitiveSubstring(\"aabbaabb\")",
        "longestSemiRepetitiveSubstring(\"aaabccbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabccbbbaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcddddee\")",
        "longestSemiRepetitiveSubstring(s = \"abcde\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts([1,2,3])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1,2,3,4,5,6])",
        "sumCounts(nums = [1,3,5])",
        "sumCounts(nums = [4,4,4])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"11100\", k = 2)",
        "shortestBeautifulSubstring(s = '10100', k = 2)",
        "shortestBeautifulSubstring(s = \"110101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011001\", k = 3)",
        "shortestBeautifulSubstring(s = '1011001', k = 3)",
        "shortestBeautifulSubstring(s = '00001111', k = 4)",
        "shortestBeautifulSubstring(s = '100001101', k = 2)",
        "shortestBeautifulSubstring(s = \"000001111100\", k = 3)",
        "shortestBeautifulSubstring(s = '000111100010100011', k = 3)",
        "shortestBeautifulSubstring(s = \"011010101001011101011110011010010111011001101\", k = 4)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"baaab\")",
        "minimumBeautifulSubstrings(\"baa\")",
        "minimumBeautifulSubstrings(s = \"aab\")",
        "minimumBeautifulSubstrings(s = \"mq\")",
        "minimumBeautifulSubstrings(s = \"mq\")",
        "minimumBeautifulSubstrings(\"ababa\")",
        "minimumBeautifulSubstrings(s = \"babad\")",
        "minimumBeautifulSubstrings(s = \"aaabccba\")",
        "minimumBeautifulSubstrings(s = \"zzsz\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 4, z = 6)",
        "longestString(x = 5, y = 5, z = 5)",
        "longestString(x = 5, y = 7, z = 4)",
        "longestString(x = 4, y = 2, z = 2)",
        "longestString(x = 4, y = 6, z = 1)",
        "longestString(x = 3, y = 8, z = 2)",
        "longestString(x = 6, y = 2, z = 1)",
        "longestString(x = 10, y = 5, z = 4)",
        "longestString(x = 3, y = 10, z = 3)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion(grid = [[1, 1], [1, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0,1],[1,0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [\n    [1, 0, 0],\n    [1, 1, 0],\n    [1, 1, 1]\n])",
        "findChampion(grid = [[1,0,0], [0,1,0], [0,1,0]])",
        "findChampion(grid = [[-1, 2], [3, -4]])",
        "findChampion(grid = [[0, 0, 0], [1, 2, 0], [1, 2, 2]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"abacaba\", k = 3)",
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"aau\", k = 2)",
        "beautifulSubstrings(s = \"abecedarian\", k = 3)",
        "beautifulSubstrings(s = \"bcabc\", k = 3)",
        "beautifulSubstrings(s = \"unna\", k = 2)",
        "beautifulSubstrings(\"abc\", 1)"
    ],
    "sample_304": [
        "countSeniors(details = [\"12345678912\", \"23456789123\", \"34567891234\"])",
        "countSeniors(details = [\"2022-04-19 00:00:00\", \"2022-04-19 01:00:00\", \"2022-04-19 02:00:00\"])",
        "countSeniors(details = [\"&John,23,Male&\", \"&Mary,62,Female&\"])",
        "countSeniors(details = [\"10:00:00 - 20:00:00;Senior\", \"10:00:00 - 20:00:00;Junior\"])",
        "countSeniors(details = [\"akash 56\", \"amita 67\", \"sumit 61\", \"srikant 71\"])",
        "countSeniors(details = [\"Name: John; Age: 22; Sex: M; Height: 6'2\\\"\", \n                                \"Name: Peter; Age: 70; Sex: M; Height: 6'5\\\"\", \n                                \"Name: Paul; Age: 23; Sex: M; Height: 6'5\\\"\"])",
        "countSeniors(details = [\"John,25,Male,25000\", \"Eric,65,Male,500000\", \"Eva,18,Female,0\", \"Bob,35,Male,30000\"])",
        "countSeniors(details = [\"10,09,00,John,20,01,A\", \"10,08,00,Alex,32,01,B\", \"10,09,00,Anna,15,01,C\"])",
        "countSeniors(details = [\"Shelby, 54\", \"Chase, 77\", \"Stella, 64\", \"Lars, 13\"])",
        "countSeniors(details = [\"2015-10-10 13:14:15,12,1,7,45,BAZ,BAZ,3,7,2,12\",\n                              \"2015-10-11 13:14:15,12,2,5,45,BAZ,BAZ,3,4,3,12\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [-1, -2, -3])",
        "maximumTripletValue(nums = [4, 2, 7, 10])",
        "maximumTripletValue(nums = [4, 2, 2, 5, 1, 5])",
        "maximumTripletValue(nums = [3, 3, 0, 1])",
        "maximumTripletValue(nums = [10, 7, 2, 5, 6, 8])",
        "maximumTripletValue([9, 6, 1, 2, 4, 3])",
        "maximumTripletValue(nums = [10, 1, 2, 6, -1, -4, 3, -3, -1, 7])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"aba\")",
        "minimumBeautifulSubstrings(s = \"baab\")",
        "minimumBeautifulSubstrings(s = \"abccba\")",
        "minimumBeautifulSubstrings(s = \"baa\")",
        "minimumBeautifulSubstrings(s = \"banana\")",
        "minimumBeautifulSubstrings(s = \"abacadae\")",
        "minimumBeautifulSubstrings(\"abaaba\")",
        "minimumBeautifulSubstrings(\"aaabaaa\")",
        "minimumBeautifulSubstrings(\"01010101010101010101010101010101010101010101010101010101010101010\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [2, 3, 5])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [3, 2, 3, 4])",
        "maxSubarrays(nums = [1,1,1,1,1,0,0,0,0,1])",
        "maxSubarrays(nums = [2, 3, 5, 11, 3])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [3, 1, 2])",
        "minOperations(a = [1, 2, 3], b = [2, 1, 3])",
        "minOperations(a = [1,2,3], b = [3,4,5])",
        "minOperations(a = [1, 2, 2], b = [3, 1, 4])",
        "minOperations(a = [9, 2, 1], b = [9, 2, 1])",
        "minOperations(a = [2, 4, 5], b = [5, 6, 3])",
        "minOperations(a = [2, 4, 3], b = [6, 1, 7, 5])",
        "minOperations([1, 2, 3, 6], [2, 3, 4, 8])",
        "minOperations(a = [4, 2, 1, 5], b = [4, 2, 4, 6])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"time\", \"me\", \"bell\"])",
        "minimizeConcatenatedLength(words = [\"abcde\", \"fghij\", \"klmno\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"aa\", \"aaa\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"xyz\"])",
        "minimizeConcatenatedLength(words = [\"abcdefg\", \"xyz\", \"pqr\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"mno\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"ba\", \"an\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"abcdefg\", \"fgghijk\", \"klmno\"])"
    ],
    "sample_371": [
        "sortVowels(\"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"Lily\")",
        "sortVowels(\"Hello World\")",
        "sortVowels(s = 'myMpH')",
        "sortVowels(s = \"LmypH\")",
        "sortVowels(s = 'Hello, how are you?')",
        "sortVowels(s = 'YmpHlE')",
        "sortVowels(s = \"Happy Birthday\")",
        "sortVowels(s = \"XpLYmpH\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1,2,2])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [3, 2, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3, 4, 5, 6, 6])"
    ],
    "sample_256": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [4, 3, 2, 5, 1])",
        "minimumSum(nums = [2, 3, 4, 5, 5])",
        "minimumSum(nums = [6, -1, 5, 2, -4, 3])",
        "minimumSum(nums = [4,2,1,5,9,3,6])",
        "minimumSum(nums = [1, 10, 2, 5, 3, 4, 7, 4, 5])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0], [1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1]])",
        "findChampion(grid = [[1,0,0], [0,1,1], [1,1,1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [0, 1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1], [0, 1, 0, 0, 0], [1, 0, 1, 0, 0]])",
        "findChampion(grid = [[2, 0, 0, 1], [0, 2, 0, 0], [0, 1, 1, 0], [0, 0, 1, 2]])",
        "findChampion(grid = [[2,1,2,3,0],[4,5,6,7,8],[9,10,11,12,13]])"
    ],
    "sample_372": [
        "sortVowels(s = \"hello world\")",
        "sortVowels(s = \"Hello World!\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels('hello')",
        "sortVowels(\"Hello World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(\"Apple\")",
        "sortVowels(s = 'TcEeDs')",
        "sortVowels('laurence')",
        "sortVowels(s = \"Lorem ipsum dolor sit amet\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"11000110\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [0, 0])",
        "minimumRightShifts(nums = [3,1,2])",
        "minimumRightShifts(nums = [5,6,7,1,2,3])",
        "minimumRightShifts(nums = [4, 6, 7, 9, 10, 11])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2])",
        "minOperations(nums = [1,1,3])",
        "minOperations([1,1,2])",
        "minOperations(nums = [1, 1, 2, 3, 3, 4])",
        "minOperations([2, 2, 2, 3])",
        "minOperations(nums = [1,2,2,4,5,6])",
        "minOperations(nums = [2, 3, 6, 3, 3])",
        "minOperations(nums = [1,2,1,3,4,1,3])",
        "minOperations(nums = [1, 2, 3, 1, 1, 3, 1, 1])"
    ],
    "sample_367": [
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(\"lYmpH\")",
        "sortVowels(\"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"Lorem ipsum dolor sit amet\")",
        "sortVowels(\"Hello\")",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s = 'My name is John')",
        "sortVowels(s = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc id magna sit amet magna euismod ullamcorper. Praesent mauris vel est aliquam, vitae lacinia velit faucibus. Fusce pharetra nisl quis lorem rutrum fringilla.\")"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1,0,0],[0,0,0],[1,1,1]])",
        "findChampion(grid = [[1,1,1],[1,1,1],[1,1,0]])",
        "findChampion(grid = [\n[0, 0, 0],\n[0, 1, 0],\n[0, 0, 0]])",
        "findChampion(grid = [\n    [1, 1, 0, 0, 0],\n    [1, 1, 0, 0, 0],\n    [1, 1, 0, 0, 0],\n    [1, 1, 0, 0, 0],\n    [1, 1, 0, 0, 0],\n])",
        "findChampion(grid = [\n    [0, 1, 0, 1],\n    [0, 0, 1, 0],\n    [1, 1, 1, 1],\n    [0, 0, 0, 0]\n])",
        "findChampion(grid = [\n  [2, 3, 0],\n  [4, 0, 6],\n  [7, 8, 9]\n])",
        "findChampion(grid = [\n[0, 1, 0, 1],\n[1, 0, 0, 0],\n[0, 0, 0, 0],\n[1, 1, 0, 0]\n])"
    ],
    "sample_267": [
        "minSum(nums1 = [0, 1, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [2, 7, 11], nums2 = [1, 2, 4])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum([-1,-2], [-3,-4])",
        "minSum(nums1 = [0, 1, 1], nums2 = [2, 1, 2])",
        "minSum([1,3], [2,1])",
        "minSum([2, 3], [1, 3, 4])",
        "minSum(nums1 = [3, 4, 5, 1], nums2 = [2, 1, 4, 5])",
        "minSum([0, 2, 1], [1, 1, 0])",
        "minSum([0, 2, 3, 4], [4, 3, 2, 1])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3], k = 3)",
        "minOperations(nums = [1,2,3,4], k = 4)",
        "minOperations(nums = [1, 1, 2, 2, 3], k = 3)",
        "minOperations(nums = [1, 5, 2, 3], k = 3)",
        "minOperations(nums = [4, 3, 2, 1, 5], k = 4)",
        "minOperations([1,2,3,4,5,6,7,8], 4)",
        "minOperations([1, 3, 5, 6, 8], 4)",
        "minOperations(nums = [0, 2, 1, 4, 5], k = 3)",
        "minOperations(nums = [6,5,4,8,1,2,7,3], k = 3)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [2], moveTo = [4])",
        "relocateMarbles(nums = [3,2,3], moveFrom = [0,2], moveTo = [1,2])",
        "relocateMarbles(nums = [1, 3, 5], moveFrom = [2], moveTo = [5])",
        "relocateMarbles(nums = [3,2,2,3], moveFrom = [2,2], moveTo = [2,3])",
        "relocateMarbles(nums = [4,2,3,1], moveFrom = [1,2,3], moveTo = [4])",
        "relocateMarbles(nums = [1, 3, 4, 5], moveFrom = [0, 1], moveTo = [2, 4])",
        "relocateMarbles(nums = [2, 2, 2, 2, 2, 2], moveFrom = [1, 2], moveTo = [2, 5])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 4, k = 2)",
        "maxSum([1,2,3], 2, 3)",
        "maxSum([1,1,1], 3, 2)",
        "maxSum(nums = [2, 1, 4, 3], m = 2, k = 2)",
        "maxSum(nums = [3,2,3,3], m = 3, k = 2)",
        "maxSum(nums = [2,1,2,4,3,5], m = 2, k = 3)",
        "maxSum(nums = [2, 7, 2, 10, 7, 2], m = 2, k = 3)",
        "maxSum(nums = [1,4,4,4,2,2,4], m = 3, k = 2)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"ab\", s2 = \"ba\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"cba\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"cab\")",
        "canMakeSubsequence(s1 = \"za\", s2 = \"bna\")",
        "canMakeSubsequence(s1 = \"abcz\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"abna\", s2 = \"nab\")",
        "canMakeSubsequence(\"b\", \"ab\")",
        "canMakeSubsequence(\"zazbz\", \"aabz\")",
        "canMakeSubsequence(\"abacaba\", \"zabcabc\")",
        "canMakeSubsequence(\"srd\", \"d\")"
    ],
    "sample_270": [
        "minSum([1, 2, 3], [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 1, 4])",
        "minSum([1, 2, 3], [2, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, -1, 4])",
        "minSum(nums1 = [2,0,2], nums2 = [1,1,0])",
        "minSum(nums1 = [1, 2, -3], nums2 = [3, 4, -1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 1, 2, 2, 3])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 5, 2, 4, 1])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"3\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"next\", \"1\", \"prev\", \"2\", \"next\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"prev\",\"2\",\"prev\",\"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"one\", \"two\", \"prev\", \"prev\", \"three\"])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"2\",\"prev\",\"3\",\"4\",\"prev\",\"5\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"prev\", \"d\", \"e\", \"prev\", \"f\", \"g\", \"prev\", \"h\"])",
        "lastVisitedIntegers(words = [\"start\", \"1\", \"prev\", \"2\", \"next\", \"3\", \"prev\", \"4\", \"next\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"one\", \"prev\", \"two\", \"prev\", \"prev\", \"three\", \"four\"])",
        "lastVisitedIntegers(words = [\"abc\", \"prev\", \"xyz\", \"prev\", \"xyz\", \"prev\", \"xyz\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood([1,2,3])",
        "isGood(nums = [4,3,2,1])",
        "isGood([3, 4, 5, 6])",
        "isGood(nums = [2, 4, 6, 8, 10])"
    ],
    "sample_424": [
        "minOperations(nums = [1, 2, 2])",
        "minOperations(nums = [1,2,2,2])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,2,1,3,2])",
        "minOperations([1, 1, 2, 2, 3, 3])",
        "minOperations([1, 2, 3, 3])",
        "minOperations(nums = [2,4,4,4])",
        "minOperations(nums = [1,2,1,2,2,2])",
        "minOperations([4, 2, 2, 4])",
        "minOperations(nums = [3, 3, 4, 2, 3])"
    ],
    "sample_451": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(\"abab\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"baa\")",
        "minChanges(s = \"happi\")",
        "minChanges(s = \"aa\")"
    ],
    "sample_461": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 4)"
    ],
    "sample_271": [
        "minSum(nums1 = [0,1,2], nums2 = [3,4,5])",
        "minSum(nums1 = [2,7,11], nums2 = [1,2,11])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 4])",
        "minSum(nums1 = [1,2,3,4], nums2 = [2,4,6,8])",
        "minSum(nums1 = [1,0,2], nums2 = [3,0,4])",
        "minSum(nums1 = [1,2,3,0,0], nums2 = [2,3,4])",
        "minSum(nums1 = [1,3,1], nums2 = [1,2,1])",
        "minSum(nums1 = [1, 1, 3, 4], nums2 = [2, 2, 2, 3])",
        "minSum(nums1 = [10,20,30], nums2 = [2,7,11])",
        "minSum(nums1 = [0,2,3,-4], nums2 = [5,7,-2,8])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [2,3,1,4,0])",
        "minimumRightShifts(nums = [0,1,2])",
        "minimumRightShifts(nums = [2,1,3,4,0])",
        "minimumRightShifts(nums = [2, 1, 3, 4, 6, 7])",
        "minimumRightShifts(nums = [3,4,3])",
        "minimumRightShifts(nums = [3,2,1,0,4])",
        "minimumRightShifts(nums = [2, 3, 1, 5, 6, 4])"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3], t = 3)",
        "countPairs(nums = [2, 7, 11, 15], t = 9)",
        "countPairs(nums = [1,2,3,4,5], t = 4)",
        "countPairs(nums = [1,2,3,4,5], t=6)",
        "countPairs(nums = [1, 2, 3, 4], t = 3)",
        "countPairs(nums = [1,1,2], t = 2)",
        "countPairs([1, 2, 3, 4, 5], 7)",
        "countPairs(nums = [3,1,4,2], t=6)",
        "countPairs(nums = [1, 3, 2, 1], t=2)",
        "countPairs(nums = [1,4,5,7], t=10)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"apple\", \"banana\", \"pear\", \"peach\"])",
        "lastVisitedIntegers(words = [\"a\", \"p\", \"a\"])",
        "lastVisitedIntegers(words = [\"apple\", \"banana\", \"pear\", \"peach\", \"plum\"])",
        "lastVisitedIntegers(words = [\"apple\", \"banana\", \"pear\", \"peach\", \"banana\", \"apple\"])",
        "lastVisitedIntegers(words = [\"p2\", \"p1\", \"p-1\"])",
        "lastVisitedIntegers(words = [\"we\", \"are\", \"the\", \"best\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"p\", \"ab\"])",
        "lastVisitedIntegers(words = [\"ab\", \"pqr\", \"xyz\", \"p\", \"q\", \"r\", \"p\"])",
        "lastVisitedIntegers(words = [\"love\", \"one\", \"pen\", \"pencil\", \"apple\", \"pen\"])",
        "lastVisitedIntegers(words = [\"ab\", \"pqr\", \"12\", \"abc\", \"pq\", \"p\", \"2\", \"pqr\", \"3\", \"p\", \"q\", \"pq\", \"8\", \"r\", \"pqr\", \"1\", \"6\", \"pqr\", \"p\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"az\", str2 = \"bna\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"zab\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"z\", str2 = \"banana\")",
        "canMakeSubsequence(str1 = \"zaz\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"baa\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abxz\")",
        "canMakeSubsequence(str1 = \"bad\", str2 = \"dab\")",
        "canMakeSubsequence(str1 = \"apple\", str2 = \"aaz\")",
        "canMakeSubsequence(str1 = \"ar\", str2 = \"baz\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 1, 1], nums2 = [2, 2, 2])",
        "minSum(nums1 = [1,2,3], nums2 = [2,4])",
        "minSum(nums1 = [2, 4, 6, 8], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1,2,3,4], nums2 = [10,20,30,40])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4])",
        "minSum(nums1 = [4, 2], nums2 = [8, 4])",
        "minSum(nums1 = [3, 2, 2, 4], nums2 = [1, 2, 2, 4])",
        "minSum(nums1 = [4, 3, 2], nums2 = [2, 1, 1])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 2], [3, 4], [1, 2]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 1], [1, 0]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [1, 2], [2, 3]], k = 1)",
        "countPairs([[0, 0], [1, 1], [2, 2], [3, 3]], 1)",
        "countPairs(coordinates = [[1, 1], [1, 2], [2, 1], [2, 2], [1, 3], [2, 3], [3, 1], [3, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 2], [2, 1], [1, 0]], k = 1)",
        "countPairs(coordinates = [[-1, 1], [0, 1], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 1], [4, 2], [4, 3]], k = 2)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\", \"dog\", \"tac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"lls\", \"s\", \"ll\"])",
        "maximumNumberOfStringPairs(words = [\"w\", \"wo\", \"woow\", \"wor\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bab\", \"aba\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"cdab\", \"c\", \"ab\", \"a\", \"bcda\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, -3])",
        "maxStrength(nums = [-1, -2, 3, 4])",
        "maxStrength(nums = [2, -1, -4])",
        "maxStrength(nums = [2,3,-2,-4])",
        "maxStrength(nums = [-2, -2, 3, 5, -4])",
        "maxStrength(nums = [5, -5, -1, 1])",
        "maxStrength(nums = [10, 3, -2, 6, -3, 1, 3, -10])",
        "maxStrength(nums = [5, 6, -2, -7, 10, 3, 2, -6])"
    ],
    "sample_475": [
        "minimumCoins([1, 2, 5])",
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices = [10, 25, 35, 84])",
        "minimumCoins(prices = [5, 3, 8])",
        "minimumCoins(prices = [2, 3, 10])",
        "minimumCoins([5, 1, 5])",
        "minimumCoins(prices = [10, 6, 2, 8, 7])",
        "minimumCoins(prices = [1, 5, 2, 6, 8])",
        "minimumCoins(prices = [10, 7, 5, 11, 12, 17, 16, 20])",
        "minimumCoins(prices = [10, 25, 30, 35, 36, 17, 42, 1, 2, 4, 7])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [2, 3, 2])",
        "minLengthAfterRemovals(nums = [3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [2, 3, 4, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 3])",
        "minLengthAfterRemovals(nums = [1,2,1,2])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "minLengthAfterRemovals(nums = [2,2,3,3,4,4,5,6])",
        "minLengthAfterRemovals(nums = [2, 3, 2, 2, 2, 5])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 7)",
        "buyChoco(prices = [2, 3, 5], money = 10)",
        "buyChoco(prices = [10, 20, 30, 40], money = 0)",
        "buyChoco(prices = [1, 5, 3, 4], money = 8)",
        "buyChoco(prices = [4, 2, 1, 3], money = 7)",
        "buyChoco(prices = [2, 3, 1, 3, 5], money = 5)",
        "buyChoco(prices = [7, 2, 5, 10, 2, 5], money = 20)",
        "buyChoco(prices = [4, 2, 3, 5, 2], money = 12)",
        "buyChoco(prices = [4, 2, 8, 6, 2], money = 20)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"hello\", \"world\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"-1\"])",
        "lastVisitedIntegers(words = [\"this\", \"is\", \"a\", \"test\", \"this\", \"is\", \"a\", \"test\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"nope\", \"prev\", \"nope\", \"nope\", \"prev\", \"nope\"])",
        "lastVisitedIntegers(words = [\"hi\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"hello\", \"world\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"world\", \"world\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"world\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts([1,1,2])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [0, 2, 4], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1,2,3,4,5,6], moveFrom = [3,4], moveTo = [1,2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [0, 4, 8], moveTo = [2, 6, 10])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [2,3], moveTo = [0,1])",
        "relocateMarbles(nums = [2, 3, 4, 5, 6, 7], moveFrom = [4, 5], moveTo = [1, 2])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [0,0], moveTo = [0,0])",
        "relocateMarbles(nums = [5, 9, 10, 11, 2, 3, 4], moveFrom = [2, 4], moveTo = [3, 5])",
        "relocateMarbles(nums = [4, 2, 4, 3, 3, 4, 3, 2, 4, 1, 3, 4], moveFrom = [4, 3], moveTo = [2, 3])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"ab\", str2 = \"ba\")",
        "canMakeSubsequence(\"ab\", \"abc\")",
        "canMakeSubsequence(\"abcde\", \"ace\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cba\")",
        "canMakeSubsequence(\"abc\", \"z\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(\"a\", \"aaa\")",
        "canMakeSubsequence(str1 = \"an\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"dbbe\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"abpcle\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hello world\"], x = \"o\")",
        "findWordsContaining(words = [\"Python\", \"Java\", \"C++\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"rat\"], x = \"a\")",
        "findWordsContaining(words = [\"ana\", \"banana\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"ananas\", \"coconut\"], x = \"an\")",
        "findWordsContaining(words = [\"bana\", \"bana\", \"banana\", \"banana\", \"banana\"], x = \"an\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[3, 2, 1], [6, 5, 4], [9, 8, 7]])",
        "matrixSum(nums = [[1, 1], [2, 2]])",
        "matrixSum(nums = [\n    [1, 1],\n    [2, 2]\n])",
        "matrixSum(nums = [[4,3,1],[3,1,4],[1,4,3]])",
        "matrixSum(nums = [[0,2,-3],[0,0,0],[10,0,0]])",
        "matrixSum(nums = [\n    [0, 2, 3],\n    [1, 1, 1],\n    [2, 4, 1]\n])",
        "matrixSum(nums = [[0, 9, 8, 7], [5, 6, 1, 4], [3, 2, 0, 6], [2, 1, 2, 0]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [1, 3], money = 5)",
        "buyChoco(a = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], money = 10)",
        "buyChoco(a = [2,3], money = 4)",
        "buyChoco(a = [1, 3, 4, 5], money = 4)",
        "buyChoco(a = [3, 3, 5], money = 10)",
        "buyChoco(a = [20, 40], money = 60)",
        "buyChoco(a = [1, 5, 3], money = 9)",
        "buyChoco(a = [2, 3, 5, 1, 3], money = 7)",
        "buyChoco(a = [5,3,1,4,2], money = 6)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3])",
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [1, 2])",
        "minGroupsForValidAssignment(nums = [4, 2, 2, 4])",
        "minGroupsForValidAssignment([1, 2, 3])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [2, 3, 3, 6])",
        "minGroupsForValidAssignment(nums = [2, 3, 3, 6])",
        "minGroupsForValidAssignment(nums = [1, 3, 2, 3])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [4,5,6,7,0,1,2])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [5, 6, 7, 8, 9, 0, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [6, 7, 8, 9, 10, 1, 2, 3])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [2, 4, 6, 8, 10])",
        "minimumRightShifts(nums = [0,0,1])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength(nums = [2, 3, 5, 7])",
        "maxStrength(nums = [2, 3, 5, 7])",
        "maxStrength(nums = [2, 3, 4])",
        "maxStrength(nums = [1, 4, 6])",
        "maxStrength(nums = [4, 2, 6, 5, 1, 2])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 5, limit = 4)",
        "distributeCandies(n = 10, limit = 1)",
        "distributeCandies(n = 20, limit = 6)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3,2,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 3, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1,2,1,3,3,4,2])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cantaloupe\"], x = \"an\")",
        "findWordsContaining(words = [\"bat\", \"rat\", \"mat\"], x = \"at\")",
        "findWordsContaining(words = [\"this\", \"is\", \"an\", \"example\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"grapes\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"piano\", \"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"bba\", \"nana\", \"aaa\"])",
        "findWordsContaining(words = [\"q\", \"b\", \"n\", \"a\"], x = \"a\")",
        "findWordsContaining(words = [\"at\", \"bat\", \"bit\", \"bites\"], x = \"it\")",
        "findWordsContaining(words = [\"franz\", \"fred\", \"freddy\", \"freddie\", \"frederick\"], x = \"fred\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1,1,1],[1,1,1],[1,1,1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 2, 3], [3, 2, 1], [1, 2, 3]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [2, 3, 1], [4, 5, 6]])",
        "findChampion(grid = [[2, 7, 9], [6, 1, 1], [7, 2, 7]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1, 0, 0, 1])",
        "maxSubarrays(nums = [3, 0, 0, 3])",
        "maxSubarrays([0, 1, 0, 0])",
        "maxSubarrays(nums = [3, 5, 7, 9])",
        "maxSubarrays(nums = [3, 5, 2, 8, 9, 1, 2])",
        "maxSubarrays([2, 1, 5, 2, 2, 2, 2, 1, 1, 2, 5, 2, 5, 2, 2, 2, 2, 2, 2, 1, 1])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"aab\", k = 1)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(\"aabaa\", 2)",
        "beautifulSubstrings(\"abacaba\", 2)",
        "beautifulSubstrings(s = \"azcbobobegghakl\", k = 2)",
        "beautifulSubstrings(s = \"abcdef\", k = 2)",
        "beautifulSubstrings(\"bcae\", 2)",
        "beautifulSubstrings(s = \"a\", k = 1)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1,2,3,1])",
        "minimumSeconds(nums = [0,1,0])",
        "minimumSeconds(nums = [0,1,2,4,5,7])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [3,1,3])",
        "minimumSeconds(nums = [0, 1, 2, 2, 3, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4, 4, 2])",
        "minimumSeconds(nums = [1,4,2,2,5,2,2])",
        "minimumSeconds(nums = [3,3,3,3,3,4,5,6])"
    ],
    "sample_327": [
        "isFascinating(n = 1234)",
        "isFascinating(n = 729)",
        "isFascinating(n = 1234567890)",
        "isFascinating(n = 1230)",
        "isFascinating(45)",
        "isFascinating(n = 297)",
        "isFascinating(n = 2121)",
        "isFascinating(n = 1260)",
        "isFascinating(n = 1298)",
        "isFascinating(n = 53214)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [4, 3, 2, 7, 8, 2, 3, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 7, 8, 7, 1, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [7, 1, 5, 8, 9], target = 5)",
        "lengthOfLongestSubsequence(nums = [9,4,2,9,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [5, 2, 3, 4, 8, 6], target = 10)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2],[2,1]])",
        "matrixSum(nums = [[1,2,3],[4,5],[6,7,8]])",
        "matrixSum(nums = [[1,3,5],[2,4,6],[8,7,9]])",
        "matrixSum(nums = [\n    [3, 2],\n    [1, 2],\n])",
        "matrixSum(nums = [[3, 7, 8], [1, 2, 4], [4, 6, 9]])",
        "matrixSum(nums = [[1,3,7], [2,4,9], [0,8,5]])",
        "matrixSum(nums = [[4,5,3,4],[2,6,7,1],[3,5,4,3],[8,1,7,4]])"
    ],
    "sample_326": [
        "isFascinating(n = 9)",
        "isFascinating(n = 9)",
        "isFascinating(n = 123)",
        "isFascinating(n = 37)",
        "isFascinating(n = 19)",
        "isFascinating(n = 111)",
        "isFascinating(3)",
        "isFascinating(n = 555)",
        "isFascinating(8)",
        "isFascinating(2)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0], [0, 0]])",
        "findChampion(grid = [[1,1,0], [1,1,0], [0,0,1]])",
        "findChampion(grid = [[0,0,0],[1,1,1],[0,0,1]])",
        "findChampion(grid = [[1,1,1,0],[1,1,1,0],[1,1,1,1]])",
        "findChampion(grid = [[0, 0, 0, 0], [1, 0, 0, 0], [0, 1, 1, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1,0,0,0],[1,1,0,0],[1,0,1,0],[1,1,1,0]])",
        "findChampion(grid = [[1, 0, 0, 1, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0,1,0,0],[1,1,0,1],[1,1,0,1],[0,1,1,1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum([1,2,3])",
        "minimumSum(nums = [2, 3, 7])",
        "minimumSum([4, 1, 3, 2])",
        "minimumSum(nums = [10, 2, 5, 1, 8, 20])",
        "minimumSum(nums = [1, 3, 2, 8, 4])",
        "minimumSum([2, 6, 3, 7, 5])",
        "minimumSum(nums = [-2, -2, -1, 2, 2])",
        "minimumSum(nums = [4, 6, 2, -2, -3, 1, 3])"
    ],
    "sample_450": [
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"anna\")",
        "minChanges(s = \"aabcd\")",
        "minChanges(s = \"abccccc\")",
        "minChanges(\"aaaaa\")",
        "minChanges(\"xxxx\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"10\", s2 = \"01\", x = 1)",
        "minOperations(s1 = \"0\", s2 = \"1\", x = 2)",
        "minOperations(s1 = \"baa\", s2 = \"aab\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"edcba\", x = 4)",
        "minOperations(s1 = \"0100\", s2 = \"0110\", x = 4)",
        "minOperations(s1 = \"10110\", s2 = \"01110\", x = 4)",
        "minOperations(\"0011\", \"1011\", 2)",
        "minOperations(\"11100\", \"00100\", 5)",
        "minOperations(s1 = \"abccba\", s2 = \"bcda\", x = 3)",
        "minOperations(\"bb\", \"aaaa\", 10)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 1, z = 2)",
        "longestString(x = 1, y = 1, z = 2)",
        "longestString(x = 2, y = 6, z = 3)",
        "longestString(x = 4, y = 4, z = 6)",
        "longestString(x = 1, y = 4, z = 6)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [0, 1, 0, 0])",
        "maxSubarrays(nums = [1, 0])",
        "maxSubarrays(nums = [1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 0])",
        "maxSubarrays(nums = [1, 2, 3, 0])",
        "maxSubarrays(nums = [2, 1, 2])",
        "maxSubarrays(nums = [0, 0, 0, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1, 1, 0])",
        "maxSubarrays(nums = [2, 1, 2, 3, 1])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John Doe,18,Male\", \"Doe,23,Male\"])",
        "countSeniors(details = [\"Sarah, age: 35\", \"John, age: 56\"])",
        "countSeniors(details = [\"Alice-46\", \"Bob-70\", \"Cindy-23\", \"Dan-58\"])",
        "countSeniors(details = [\"(age=61, name=John)\", \"(age=65, name=Mark)\", \"(age=55, name=Nina)\"])",
        "countSeniors(details = [\"Nikhil: 23\", \"Gurpreet: 58\", \"Krishan: 62\"])",
        "countSeniors(details = [\"Jojo,23,3\", \"Anant,48,5\", \"Kumar,62,7\"])",
        "countSeniors(details = [\"Selma, 72\", \"Fern, 68\", \"Isaac, 64\", \"Omar, 65\"])",
        "countSeniors(details = [\"Jessie,(20,21),Student\", \"Terry,(56,60),Doctor\", \"Mark,(34,44),Secretary\"])",
        "countSeniors(details = [\"https://www.google.com/search?q=%7B%22name%22%3A%22banana%22%22%2C%22age%22%3A%2260%22%2C%22name%22%3A%22Mr.%20Smith%22%22%2C%22age%22%3A%2250%22%2C%22name%22%3A%22Mrs.%20Smith%22%2C%22age%22%3A%2240%22%2C%22name%22%3A%22Mr.%20Smith%22%2C%22age%22%3A%2240%22%2C%22name%22%3A%22Mrs.%20Smith%22%2C%22age%22%3A%2240%22%2C%22name%22%3A%22Mr.%20Smith%22%2C%22age%22%3A%2240%22%2C%22name%22%3A%22Mrs.%20Smith%22%2C%22age%22%3A%2240%22%2C%22name%22%3A%22Mr.%20Smith%22%2C%22age%22%3A%2250%22%2C%22name%22%3A%22Mrs.%20Smith%22%2C%22age%22%3A%2250%22%2C%22name%22%3A%22Mr.%20Smith%22%2C%22age%22%3A%2260%22%2C%22name%22%3A%22Mr.%20Smith%22%2C%22age%22%3A%2260%22%2C%22name%22%3A%22Mr.%20Smith%22%2C%22age%22%3A%2260%22%2C%22name%22%3A%22Mr.%20Smith%22%2C%22age%22%3A%2260%22%2C%22name%22%3A%22Mrs.%20Smith%22%2C%22age%22%3A%2260%22%2C%22name%22%3A%22Mr.%20Smith%22%2C%22age%22%3A%2250%22%2C%22name%22%3A%22Mrs.%20Smith%22%2C%22age%22%3A%2250%22%2C%22name%22%3A%22Mrs.%20Smith%22%2C%22age%22%3A%2250%22%2C%22name%22%3A%22Mr.%",
        "countSeniors(details = [\"sabby(12), palak(45), yash(23)\", \"david(18), kalpana(59), tanisha(22)\", \"samuel(70), mike(69), pete(25)\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [2, 4, 8])",
        "maxSubarrays(nums = [1,0,1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [2,2,2,2,2])",
        "maxSubarrays([1, 1, 1, 0, 0, 0, 1, 0, 1])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [0, 1], moveTo = [2, 3])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 3, 4], moveTo = [2, 5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [4, 5], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [9])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [1, 0, 3, 2], moveTo = [3, 0, 1, 2])",
        "relocateMarbles(nums = [1, 5, 9, 12, 13], moveFrom = [1, 5, 9], moveTo = [1, 5, 9])",
        "relocateMarbles(nums = [4, 5, 1, 9, 6, 7], moveFrom = [2, 5], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 4, 6, 9], moveFrom = [1, 3, 4], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [1, 4, 2, 7, 5, 9, 3, 8, 6], moveFrom = [0, 2, 5, 6, 7, 8, 9], moveTo = [1, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"bb\", s3 = \"cc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"aaabbb\", s2 = \"bbbccc\", s3 = \"aabbbccc\")",
        "findMinimumOperations(\"kakak\", \"kakak\", \"kakak\")",
        "findMinimumOperations(\"abcc\", \"aaaa\", \"bcbcbcc\")",
        "findMinimumOperations(\"a\", \"b\", \"c\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1,2])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,1])",
        "minLengthAfterRemovals(nums = [3, 2, 3])",
        "minLengthAfterRemovals(nums = [2,3,4,3])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1,2,1,2,1])",
        "minLengthAfterRemovals(nums = [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1])",
        "minLengthAfterRemovals([3,4,3,4,5,3])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 5, 6, 3, 5])"
    ]
}