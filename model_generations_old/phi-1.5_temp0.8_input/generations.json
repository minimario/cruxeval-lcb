{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 4, 3, 5])",
        "alternatingSubarray(nums = [1, 4, 2, 3, 5])",
        "alternatingSubarray(nums = [3, 2, 1, 5, 4])",
        "alternatingSubarray(nums = [1, 3, 2, 5, 4, 7, 6])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 3, 3, 2])",
        "alternatingSubarray(nums = [1, 3, 4, 2, 1, 6, 5])"
    ],
    "sample_310": [
        "matrixSum([[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum([[1,2], [3,4]])",
        "matrixSum(matrix = [[1,2], [3,4]])",
        "matrixSum(a = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "matrixSum(a = [[2, 3], [5, 3]])",
        "matrixSum([[3, 2, 1], [5, 4, 6], [8, 7, 9]])",
        "matrixSum([[0,1,1],[0,0,1],[1,1,1]])",
        "matrixSum([[1, 5, 9], [10, 15, 17], [18, 20, 24]])",
        "matrixSum([[2, 2, 3, 1], [1, 2, 2, 1], [4, 3, 1, 2]])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1,2,3], [4,5,6], [7,8,9]])",
        "findChampion(grid = [[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "findChampion(grid = [[\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]])",
        "findChampion(grid = [[\"1\"], [\"2\"], [\"3\"]])",
        "findChampion([[0, 1, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion([[2,1,2], [2,1,0], [3,2,2]])",
        "findChampion(grid = [\n    [1, 2, 3, 4, 5],\n    [3, 5, 1, 2, 6],\n    [5, 1, 3, 4, 6],\n    [2, 6, 6, 1, 3],\n    [4, 6, 3, 1, 6],\n])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(a = [[1, 2], [4, 3]])",
        "matrixSum(matrix = [[1,3,2],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[1, 3, 5], [10, 2, 6], [7, 8, 9]])",
        "matrixSum(a = [[3, 1, 1], [2, 2, 0], [1, 0, 3]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 3, 2, 4, 2])",
        "alternatingSubarray(nums = [1, 3, 5, 1, 3, 5])",
        "alternatingSubarray([1, 2, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 4, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 3, 4, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 4, 7, 12, 17])",
        "alternatingSubarray(nums = [0,1,2,3,3,4,5,6])",
        "alternatingSubarray(nums = [1, 4, 5, 2, 3, 8, 7])",
        "alternatingSubarray(nums = [3, 5, 4, 8, 4, 6])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"kiwi\"], x = \"an\")",
        "findWordsContaining(words = [\"aaa\", \"bbb\", \"ccc\"], x = \"bb\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"pineapple\"], x = \"p\")",
        "findWordsContaining(words = [\"banana\", \"abana\"], x = \"ba\")",
        "findWordsContaining(words = [\"ab\", \"bc\", \"cd\", \"dab\"], x = \"ab\")",
        "findWordsContaining(s1 = [\"banana\", \"papaya\", \"apple\"], x = \"apple\")",
        "findWordsContaining(s1 = [\"ba\", \"nana\", \"ab\", \"an\"], x = \"ana\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"ba\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"bb\")",
        "canBeEqual(s1 = \"ba\", s2 = \"bba\")",
        "canBeEqual(s1 = \"aab\", s2 = \"aba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"aab\")",
        "canBeEqual(\"ba\", \"na\")",
        "canBeEqual(s1 = \"aaabb\", s2 = \"aaa\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,1,2], target = 2)",
        "lengthOfLongestSubsequence([1,2,3,4,5], 7)",
        "lengthOfLongestSubsequence(nums = [1,3,2,1], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,2], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,5,3,2,4,6], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,1,3,2,4,1,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,1,3,5,3,6,7], target = 1)",
        "lengthOfLongestSubsequence([-1,0,1,0,2,1,0,-1],1)",
        "lengthOfLongestSubsequence(nums = [1,3,2,4,5,9,3,4,1], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 5, 7, 3, 2, 5, 9, 3, 7], target = 9)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"anana\")",
        "canBeEqual(s1 = \"bba\", s2 = \"abba\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"acbde\")",
        "canBeEqual(s1 = \"abacaba\", s2 = \"ababab\")",
        "canBeEqual(s1 = \"ana\", s2 = \"nan\")",
        "canBeEqual(s1 = \"ba\", s2 = \"anna\")",
        "canBeEqual(s1 = \"12345\", s2 = \"12346\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1,1,1,1,1])",
        "maxSubarrays([1,2,2,3,3])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [2,2,3])",
        "maxSubarrays(nums = [10,20,30,40,50])",
        "maxSubarrays([4, 2, 2, 5, 7, 7, 8])",
        "maxSubarrays([1, -3, 3, -1, -2, 2, -2, 0])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [0, 1, 2], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4], money = 7)",
        "buyChoco(prices = [1,2,3,4], money = 10)",
        "buyChoco(prices = [0, 10, 20], money = 30)",
        "buyChoco(prices = [5, 10, 15], money = 25)",
        "buyChoco(prices = [20, 30, 40, 50], money = 150)",
        "buyChoco(prices = [12, 5, 10, 8], money = 10)",
        "buyChoco(prices = [2,5,3], money = 12)",
        "buyChoco(prices = [5, 9, 15, 13], money = 10)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [2, 2, 2], l = 0, r = 3)",
        "countSubMultisets(nums = [1,2,3,4], l = 0, r = 4)",
        "countSubMultisets(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], l = 0, r = 5)",
        "countSubMultisets(nums = [0, 1, 1], l = 0, r = 2)",
        "countSubMultisets(nums = [1, 2, 3, 3], l = 0, r = 4)",
        "countSubMultisets(nums = [1,2,2,2,2,3], l = 0, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,4,5,5,5,5], l = 0, r = 10)",
        "countSubMultisets(nums = [1,3,1,4,2,1,4], l = 0, r = 5)",
        "countSubMultisets(nums = [2,4,4,4,4,4], l = 5, r = 7)"
    ],
    "sample_322": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 9)",
        "isFascinating(n = 1234567890)",
        "isFascinating(??)",
        "isFascinating(n = 100)",
        "isFascinating(n = 3)",
        "isFascinating(n = 9**2)",
        "isFascinating(n = 9451634)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"ba\", s2 = \"ab\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"abced\")",
        "canBeEqual(s1 = \"abba\", s2 = \"abcd\")",
        "canBeEqual(\"abcd\", \"abcd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"aa\")",
        "canBeEqual(\"abcd\", \"ab\")",
        "canBeEqual(s1 = \"abba\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cbda\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [10, 20, 30])",
        "minimumCoins(prices = [5, 10, 15, 20])",
        "minimumCoins(prices = [1, 2, 1, 2])",
        "minimumCoins(prices = [1, 2, 5, 8, 13])",
        "minimumCoins(prices = [1, 3, 5, 6, 4])",
        "minimumCoins(prices = [2,3,7,10])",
        "minimumCoins(prices = [5, 2, 10, 20, 15, 25])",
        "minimumCoins(prices = [2, 5, 1, 1, 2, 1, 4])",
        "minimumCoins(prices = [2,1,1,5,8,10])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 5)",
        "accountBalanceAfterPurchase(p = 5)",
        "accountBalanceAfterPurchase(p = 123)",
        "accountBalanceAfterPurchase(p = 3)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 12)",
        "accountBalanceAfterPurchase(p = 783)",
        "accountBalanceAfterPurchase(p = 106)",
        "accountBalanceAfterPurchase(a = 7, b = 6)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [3, 6, 9, 12])",
        "minOperations(nums = [1, 4, 2, 2, 1])",
        "minOperations(nums = [3,1,1,1,2,3])",
        "minOperations(nums = [1, 3, 4, 4, 4, 5, 8])",
        "minOperations(nums = [2,3,4,1,1,2,3,4,1])",
        "minOperations(nums = [2, 3, 4, 3, 4, 4, 2, 2, 2, 4])",
        "minOperations(nums = [3, 2, 1, 3, 4, 4, 4, 1, 1, 3, 3])",
        "minOperations([3, 1, 2, 4, 3, 4, 1, 2, 2, 1])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7])",
        "alternatingSubarray(nums = [0,1,0,0,1,0])",
        "alternatingSubarray([1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1,0,1,1,0,1,1,0])",
        "alternatingSubarray(nums = [1,1,2,3,5,6,7])",
        "alternatingSubarray(nums = [2,2,2,3,3,3,3,3])",
        "alternatingSubarray(nums = [1,3,5,5,5,5,5,5,5,5])",
        "alternatingSubarray(nums = [5, 6, 5, 4, 3, 1])",
        "alternatingSubarray(nums = [1, 3, 2, 1, 4, 5, 1, 4, 1])"
    ],
    "sample_460": [
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 2, limit = 5)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 4, limit = 10)",
        "distributeCandies(n = 3, limit = 8)"
    ],
    "sample_247": [
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 3)",
        "minOperations(s1 = \"ab\", s2 = \"ab\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abd\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abd\", x = 2)",
        "minOperations(s1 = \"bba\", s2 = \"nana\", x = 1)",
        "minOperations(s1 = \"ba\", s2 = \"bxa\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abc\", x = 3)",
        "minOperations(s1 = \"bba\", s2 = \"xby\", x = 1)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 0, y = 0, z = 0)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 4, y = 2, z = 3)",
        "longestString(x = 3, y = 1, z = 4)",
        "longestString(x = 2, y = 4, z = 5)",
        "longestString(x = 6, y = 4, z = 2)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 4, y = 3, z = 2)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [3,1,2,4,5], k = 3)",
        "minOperations(nums = [3, 1, 0, 2, 4], k = 2)",
        "minOperations(nums = [1, 2, 2, 4, 5], k = 3)",
        "minOperations(nums = [2,4,1,3,1], k = 2)",
        "minOperations(nums = [1, 3, 6, 3, 2], k = 3)",
        "minOperations(nums = [3, 5, 4, 4, 3, 3], k = 2)",
        "minOperations(nums = [1, 2, 3, 1, 2, 3, 4, 5, 4, 3, 2, 1], k = 4)",
        "minOperations(nums = [2, 2, 3, 4, 4, 5, 6, 7, 8, 9], k = 2)",
        "minOperations(nums = [1, 2, 1, 3, 1, 1, 2, 4, 3], k = 1)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababcabab\")",
        "longestSemiRepetitiveSubstring(\"abaab\")"
    ],
    "sample_361": [
        "isGood([1, 2, 3])",
        "isGood(a = [1, 2, 3, 2, 1])",
        "isGood(s1 = [1, 2, 3, 4, 5, 6])",
        "isGood(a = [1,2,2,3])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8])",
        "isGood(s1 = [2, 3, 4])",
        "isGood(a = [1, 1, 2, 1, 2, 1])",
        "isGood(my_list = [1, 2, 3, 4, 4, 5, 6])",
        "isGood([4, 4, 1, 1, 1, 1, 2, 2, 2])",
        "isGood(a = [3, 3, 2, 1, 4, 4, 3, 3, 4, 4, 3, 3, 2, 1, 4])"
    ],
    "sample_244": [
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 9, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 4, m = 2)",
        "differenceOfSums(n = 0, m = 3)",
        "differenceOfSums(n = 8, m = 4)",
        "differenceOfSums(n = 15, m = 2)",
        "differenceOfSums(n = 21, m = 7)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment([1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [4,5,1,3,2])",
        "minGroupsForValidAssignment(nums = [2, 5, 1, 2, 2, 3])",
        "minGroupsForValidAssignment(nums = [0, 3, 5, 5, 5, 5])",
        "minGroupsForValidAssignment(nums = [4, 5, 5, 3, 3, 2, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [0,1,0,2,0,3,1,3,1])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"prev\", \"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"previous\", \"current\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"a\", \"b\", \"c\", \"prev\", \"d\"])",
        "lastVisitedIntegers(words = [\"prev\", \"a\", \"b\", \"c\", \"d\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"3\", \"1\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"ba\", \"zabc\"])",
        "lastVisitedIntegers(words = [\"prev\", \"mq\", \"pz\", \"zy\", \"prev\", \"px\", \"nq\", \"zy\"])",
        "lastVisitedIntegers(words = [\"prev\", \"eel\", \"mercado\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"nana\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"an\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"aa\"])",
        "maximumNumberOfStringPairs(s1 = \"ab\", s2 = \"cba\")",
        "maximumNumberOfStringPairs(words = [\"civic\", \"civic\", \"civic\", \"civic\", \"civic\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"efgh\", \"ijk\", \"mnop\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"aba\", \"aaa\", \"aab\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"ba\", \"na\", \"anana\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"ana\", \"nan\", \"apple\", \"ap\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111\", k = 3)",
        "shortestBeautifulSubstring(s = \"a\", k = 2)",
        "shortestBeautifulSubstring(s = \"abcba\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"bab\", k = 3)",
        "shortestBeautifulSubstring(\"abacabadabacaba\", 2)",
        "shortestBeautifulSubstring(s = \"abcbca\", k = 2)",
        "shortestBeautifulSubstring(\"001011\", 3)",
        "shortestBeautifulSubstring(s = \"0010111011100001\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts([1,2,3,4,5])",
        "minimumRightShifts([1,3,2])",
        "minimumRightShifts(nums = [3, 4, 5, 6])",
        "minimumRightShifts([1, 2, 4, 3])",
        "minimumRightShifts([3,4,1,2])",
        "minimumRightShifts(nums = [3, 1, 2, 1, 3])",
        "minimumRightShifts([10, 6, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 1, 0, 3, 1])",
        "minimumRightShifts([4, 1, 9, 3, 7, 2])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"ba\")",
        "minimumSteps(s = \"110101\")",
        "minimumSteps(s1 = \"1010\")",
        "minimumSteps(s = \"ababab\")",
        "minimumSteps(\"10010\")",
        "minimumSteps(\"1111111\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ba\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"anana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"bn\", s3 = \"bn\")",
        "findMinimumOperations(\"ba\", \"bna\", \"bna\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"ba\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abab\", s3 = \"aaaa\")"
    ],
    "sample_388": [
        "canMakeSubsequence(s1 = \"ba\", s2 = \"ab\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"aa\")",
        "canMakeSubsequence(\"abcd\", \"abc\")",
        "canMakeSubsequence(s1 = \"bba\", s2 = \"banana\")",
        "canMakeSubsequence(str1 = \"abab\", str2 = \"ab\")",
        "canMakeSubsequence(\"abc\", \"aab\")",
        "canMakeSubsequence(\"abcd\", \"cdef\")",
        "canMakeSubsequence(s1 = \"bca\", s2 = \"abc\")",
        "canMakeSubsequence(str1 = \"baba\", str2 = \"ababa\")",
        "canMakeSubsequence(\"aaaa\", \"abc\")"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood([1,2,3])",
        "isGood([1,2,3,4,5])",
        "isGood([])",
        "isGood(my_list = [1, 2, 3, 4])",
        "isGood(my_list = [0,1,2,3,4,5,6,7,8,9])",
        "isGood(nums = [2,3,4,5,1,2,3,4,5,6,7])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 3)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 3)",
        "countPairs(s1 = [1,2,3], target = 0)",
        "countPairs(nums = [1, 4, 5], target = 8)",
        "countPairs(nums = [2,3,4,5,6], target = 12)",
        "countPairs(nums = [3, 1, 4, 2, 1, 5, 9, 2, 6, 5, 3], target = 6)",
        "countPairs(nums = [2, 5, 4, 6, 8, 1, 3, 7, 9], target = 10)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 4], moveTo = [2, 6])",
        "relocateMarbles(nums = [5, 5, 8, 9], moveFrom = [0, 1], moveTo = [2])",
        "relocateMarbles(nums = [0, 0, 0, 0, 0], moveFrom = [0, 0, 1, 1, 0], moveTo = [1, 0, 0, 0, 0])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [4, 5, 6, 7], moveTo = [3, 8, 9])",
        "relocateMarbles(nums = [1,2,2,3,4,4,4,5,5,5,5], moveFrom = [1,3], moveTo = [3,4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0], moveFrom = [0, 1], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 4, 3, 2, 1, 5, 4], moveFrom = [5, 4], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 4, 8, 6, 8, 6], moveFrom = [1, 3, 4], moveTo = [2, 5, 6])",
        "relocateMarbles(nums = [5,3,4,2,1], moveFrom = [4,2,6,7], moveTo = [3,8,6])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 10)",
        "countPairs(nums = [1, 1, 2], target = 3)",
        "countPairs(nums = [3, 6, 9, 12], target = 10)",
        "countPairs(nums = [0, 1, 2, 3, 4], target = 4)",
        "countPairs(nums = [3, 4, 2, 5, 6], target = 6)",
        "countPairs(nums = [5, 6, 2, 3, 1], target = 9)",
        "countPairs(nums = [5, 3, 8, 3, 9], target = 16)",
        "countPairs(nums = [0, 5, 5, 8, 5, 7], target = 6)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1,3,2,2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,2,2,1])",
        "minLengthAfterRemovals(nums = [3,2,1,2,1,3])",
        "minLengthAfterRemovals(nums = [3, 2, 1, 4, 4, 4])",
        "minLengthAfterRemovals([0,2,1,3,2,0])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Bob\", \"Alice\", \"Peter\", \"Jane\"])",
        "countSeniors(details = [\"Jan 1, 1990\", \"Jan 2, 1990\"])",
        "countSeniors(details = [\"Rick\", \"Bob\", \"Alice\", \"Walter\"])",
        "countSeniors(details = [\"75\", \"52\", \"60\", \"19\", \"78\"])",
        "countSeniors(details = [\"75\", \"65\", \"89\", \"99\", \"10\"])",
        "countSeniors(details = [\"991\", \"23\", \"82\"])",
        "countSeniors(details = [\"0\", \"10\", \"45\", \"1\", \"70\"])",
        "countSeniors(details = [\"bob,75\", \"Alice,59\"])",
        "countSeniors(details = [\"john,51,66\", \"paul,41,50\", \"mary,17,59\"])",
        "countSeniors(details = [\"6:34:29\", \"7:15:12\", \"9:58:08\", \"7:15:12\", \"9:58:08\", \"7:15:12\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(\"aab\")",
        "longestSemiRepetitiveSubstring(\"banana\")",
        "longestSemiRepetitiveSubstring(s1 = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"baab\")",
        "longestSemiRepetitiveSubstring(\"aabbb\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"ba\", s2 = \"an\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abd\")",
        "canBeEqual(s1 = \"ba\", s2 = \"bab\")",
        "canBeEqual(s1 = \"ba\", s2 = \"bna\")",
        "canBeEqual(s1 = \"ba\", s2 = \"bana\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abce\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"anana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"anana\", s3 = \"nana\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"anana\", s3 = \"bana\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcda\", s3 = \"cda\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcb\", s3 = \"cba\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bba\", s3 = \"bbaa\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,3,2,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6], target = 10)",
        "lengthOfLongestSubsequence(nums = [10,1,2,1,5,4], target = 6)",
        "lengthOfLongestSubsequence(nums = [4, 3, 2, 1, 5, 6, 7], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,3,3,2,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,3,5,7,8,9], target = 7)",
        "lengthOfLongestSubsequence(nums = [5,5,1,2,3], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,0,3,2,0,3], target = 2)",
        "lengthOfLongestSubsequence(nums = [4,2,6,5,1], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,3,1,2,4,4,1,1,2,2], target = 5)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 3, -1, -3, 5, 3, 6, 7])",
        "minimumSum(nums = [10, 20, 30, 40, 50])",
        "minimumSum(nums = [1, 5, 9, 3])",
        "minimumSum([-1, -2, -3])",
        "minimumSum([1, 3, 1, 1, 5, 9])",
        "minimumSum([2, 3, 4, 5, 7])",
        "minimumSum([-3, 1, -4, 1, -5, 9])",
        "minimumSum(nums = [7, 2, 4, 1, 3, 9, 5])",
        "minimumSum(nums = [1, 5, 2, 9, 5, 6, 3])",
        "minimumSum([5, 2, 6, 7, 2, 7, 1])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"mq\", \"px\", \"zy\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\", \"gh\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"abc\", \"abcd\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"ab\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"ba\", \"b\"])",
        "minimizeConcatenatedLength(s1 = \"aba\", s2 = \"ba\")",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"a\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"abc\", \"abcd\", \"abdc\", \"abdc\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"aab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abcd\", k = 4)",
        "shortestBeautifulSubstring(s = \"ababab\", k = 3)",
        "shortestBeautifulSubstring(s = \"abc\", k = 3)",
        "shortestBeautifulSubstring(s = \"ba\", k = 2)",
        "shortestBeautifulSubstring(s = \"101\", k = 2)",
        "shortestBeautifulSubstring(s = \"ababac\", k = 3)",
        "shortestBeautifulSubstring(s = \"bab\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011101\", k = 4)",
        "shortestBeautifulSubstring(s = \"001010001001\", k = 3)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\", \"de\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"ba\", \"ba\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\", \"bc\"])",
        "minimizeConcatenatedLength(s1 = \"aaa\", s2 = \"bbb\")",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"kiwi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"abd\", \"abe\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\", \"de\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"pineapple\", \"pear\"])",
        "minimizeConcatenatedLength(words = [\"bad\", \"apple\", \"pie\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 12, m = 2)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7])",
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray([1,2,3,4,5,6])",
        "alternatingSubarray([1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9])",
        "alternatingSubarray(nums = [1,2,3,5,5,3,5])",
        "alternatingSubarray(nums = [5, 5, 1, 1, 5, 5])",
        "alternatingSubarray(nums = [3, 4, 3, 2, 1, 4, 5, 3, 6, 8])",
        "alternatingSubarray(nums = [2,2,5,5,4,2,2,3,3,3,3,4,4])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength(nums = [1,1,1,1])",
        "findMaximumLength([1,2,3,4,5])",
        "findMaximumLength([1,2,3,1,2])",
        "findMaximumLength([1,3,2,4,2,3])",
        "findMaximumLength(nums = [1,2,3,3,4,4,5,5])",
        "findMaximumLength(nums = [1,2,3,3,5,5])",
        "findMaximumLength(nums = [1,4,5,7,10])",
        "findMaximumLength(nums = [10, 8, 12, 1, 13])",
        "findMaximumLength([-1,3,2,0,3,1,1,4])"
    ],
    "sample_302": [
        "countSeniors(details = [\"50\", \"60\", \"70\", \"80\", \"90\"])",
        "countSeniors(details = [\"64\", \"32\", \"50\", \"20\"])",
        "countSeniors(s = \"60/50\")",
        "countSeniors(details = [\"john is 61\", \"jane is 34\", \"dick is 59\"])",
        "countSeniors(details = [\"abc123456789\", \"xyz345678912\", \"def123456789\"])",
        "countSeniors(details = [\"45-30\", \"20-40\", \"60-70\", \"50-60\", \"40-50\"])",
        "countSeniors(details = [\"bought\", \"banana\", \"bought, bought, eaten\", \"bought, bought, ate, ate\"])",
        "countSeniors(details = [\"mulaw\", \"mahok\", \"nibbo\", \"mama\"])",
        "countSeniors(details = [\"234567890\", \"54321\", \"987654321\", \"1938383938\", \"766766664\"])",
        "countSeniors(details = [\"135946\", \"094799\", \"153952\", \"163968\", \"117638\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"ba\", s2 = \"ab\")",
        "canBeEqual(s1 = \"ba\", s2 = \"ab\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"a\", s2 = \"aa\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aaab\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 3, 5, 7])",
        "minimumCoins(prices = [10, 1, 5, 5, 10])",
        "minimumCoins(prices = [4, 5, 3, 2, 1])",
        "minimumCoins(prices = [5, 4, 2, 3, 1])",
        "minimumCoins([5, 2, 4, 1, 3])",
        "minimumCoins(prices = [2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000])",
        "minimumCoins([0,1,1,0,1,1,1,0])"
    ],
    "sample_378": [
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds([1,2,3,4])",
        "minimumSeconds([3, 1, 4, 2])",
        "minimumSeconds(A = [0, 3, 2, 1])",
        "minimumSeconds(A = [0,1,3,5,6,7])",
        "minimumSeconds(A = [3,5,8,2])",
        "minimumSeconds(A = [0,0,0,1,0,0,0,1,1,0,0,0])",
        "minimumSeconds(A = [2,2,3,4,5,6,7])",
        "minimumSeconds(A = [0, 2, 3, 1, 5, 8, 7, 4, 6])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cb\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"anana\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"anna\", \"nana\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"bc\", \"ba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"apple\", \"pear\", \"peach\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"ana\", \"nan\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ana\", \"nab\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"hi\", \"yo\", \"hi\", \"yo\"])",
        "maximumNumberOfStringPairs(words = [\"bab\", \"ab\", \"abc\", \"bb\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum([1, -1], [1, -1])",
        "minSum(nums1 = [1, 2], nums2 = [2, 2])",
        "minSum([1, 2, 3], [1, 3, 2])",
        "minSum(nums1 = [2, 5, 6], nums2 = [8, 1, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 0, 1, 3])",
        "minSum(nums1 = [0, 1, 2, 0, 5], nums2 = [0, 1, 0, 1, 5])",
        "minSum([2, 0, 0, 3, 1, 0], [0, 2, 1, 2, 1, 0])",
        "minSum([0, 4, 9, 0], [1, 3, 9, 6])",
        "minSum(nums1 = [2, -3, 1, 0, -7, -4, 2, 3, -6, 4], nums2 = [0, -3, -7, -4, -1, 2, 3, 4, 2, 0, -2])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"lemon\"], x = \"ana\")",
        "findWordsContaining(words = [\"ba\", \"ban\", \"nana\"], x = \"nana\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"fish\"], x = \"do\")",
        "findWordsContaining(words = [\"abcd\", \"efghij\", \"klmno\"], x = \"l\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"apple\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"cat\", \"frog\"], x = \"cat\")",
        "findWordsContaining(words = [\"banana\", \"xyz\", \"xyz\"], x = \"xyz\")",
        "findWordsContaining(s1 = [\"ba\", \"an\", \"ma\"], x = \"an\")",
        "findWordsContaining(words = [\"bob\", \"apple\", \"banana\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"bad\", \"dad\", \"at\"], x = \"bad\")"
    ],
    "sample_397": [
        "maxSum([1, 2, 3, 4, 5], 2, 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 4, k = 2)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "maxSum([0,1,2,3], 2, 2)",
        "maxSum([1, 1, 1, 1, 1, 1], 3, 2)",
        "maxSum([1,2,2,2,3,3,3], 2, 2)",
        "maxSum(nums = [1, 2, 2, 3, 4, 4, 4, 5], m = 2, k = 2)",
        "maxSum([1, 1, 2, 2, 2, 3, 3, 3, 3], 3, 2)",
        "maxSum(nums = [10, -5, 3, -2, 10], m = 3, k = 2)"
    ],
    "sample_355": [
        "relocateMarbles(moveFrom = [1, 2, 3], moveTo = [4, 5, 6], nums = [1, 2, 3, 4, 5, 6])",
        "relocateMarbles(nums = [2, 3, 4], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [2,1,3], moveFrom = [1,2], moveTo = [3,2])",
        "relocateMarbles(nums = [1,2,3,4,5,6], moveFrom = [1,3], moveTo = [4,5])",
        "relocateMarbles(nums = [2, 3, 4, 5], moveFrom = [1, 3], moveTo = [0, 2])",
        "relocateMarbles(nums = [2, 1, 3, 1, 3, 2], moveFrom = [0, 2, 4], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [2,3,1,5,7], moveFrom = [0,2,4], moveTo = [2,4,6])",
        "relocateMarbles(nums = [2, 4, 5, 6, 3, 1, 7, 8], moveFrom = [2, 4], moveTo = [4, 6])",
        "relocateMarbles(nums = [2, 1, 3, 5, 3, 4, 2, 2, 2, 1], moveFrom = [0, 2, 4], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [2, 7, 5, 1, 6, 4, 8, 3], moveFrom = [2, 4, 5, 8, 6], moveTo = [1, 3, 4, 7, 8, 5, 6, 2])"
    ],
    "sample_407": [
        "minimumRightShifts([1, 2, 3, 1])",
        "minimumRightShifts([1,3,5,7])",
        "minimumRightShifts(nums = [3, 2, 1, 3])",
        "minimumRightShifts(nums = [4, 1, 3])",
        "minimumRightShifts(nums = [3, 4, 4])",
        "minimumRightShifts(nums = [3, 6, 8])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8,9,0])",
        "minimumRightShifts(nums = [2, 0, 2, 0, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 5, 6, 6, 7, 7])",
        "minimumRightShifts([-1, 2, -1, -3, 4, -1])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [10, 20, 30], money = 50)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 6)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 4)",
        "buyChoco(prices = [1, 5, 2], money = 10)",
        "buyChoco(prices = [5, 1, 3], money = 6)",
        "buyChoco(prices = [2, 4, 3, 6], money = 13)",
        "buyChoco(prices = [3, 5, 8, 6, 5], money = 20)",
        "buyChoco(prices = [5, 7, 6, 4, 1], money = 11)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [3, 1, 4, 2], target = 5)",
        "lengthOfLongestSubsequence([], 0)",
        "lengthOfLongestSubsequence(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6], target = 4)",
        "lengthOfLongestSubsequence(nums = [2,3,1,2,4,2,5,6], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,3,2,4,4,6], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 5, 6, 9], target = 9)",
        "lengthOfLongestSubsequence(nums = [10,2,5,1,5,4], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,4,4,5,5,5,5,5,5,5,5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1,2,1,5,9,2,1,3,2,4], target = 1)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(\"aab\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(\"aaabbbccc\")",
        "longestSemiRepetitiveSubstring(s = \"ababababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(\"aabbb\")",
        "longestSemiRepetitiveSubstring(\"bbbbbbbbbbbbbb\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"tiger\"], x = \"at\")",
        "findWordsContaining(s1 = \"ba\", x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"anana\", \"abc\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"pineapple\", \"apple\", \"orange\"], x = \"app\")",
        "findWordsContaining(words = [\"word\", \"word\", \"word\"], x = \"wo\")",
        "findWordsContaining(words = [\"pale\", \"pear\", \"bark\"], x = \"ea\")",
        "findWordsContaining(words = [\"red\", \"rednoy\", \"reddy\", \"reddy\", \"reddy\"], x = \"red\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(??)",
        "lastVisitedIntegers([\"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers([\"prev\", \"2\", \"1\", \"5\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"pre\", \"prev\", \"pre\", \"pre\", \"pre\", \"pre\", \"pre\", \"pre\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"3\", \"3\", \"4\"])",
        "lastVisitedIntegers([\"prev\", \"post\", \"prev\", \"prev\", \"post\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"2\", \"2\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"bef\", \"ngh\", \"neh\"])",
        "lastVisitedIntegers(words = [\"prev\", \"f\", \"x\", \"y\", \"h\", \"prev\", \"m\", \"q\", \"z\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"an\")",
        "canBeEqual(s1 = \"ba\", s2 = \"anana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nn\")",
        "canBeEqual(s1 = \"aab\", s2 = \"aba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bba\")",
        "canBeEqual(s1 = \"a\", s2 = \"aa\")",
        "canBeEqual(s1 = \"baba\", s2 = \"bba\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum([1,2,3,4])",
        "minimumSum([])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum([2,3,1,5,6,4])",
        "minimumSum(nums = [10, 5, 2, 8])",
        "minimumSum([1,2,3,5,1,2,3,5,1,2,3,5])",
        "minimumSum([4,3,5,1,2,7])",
        "minimumSum([-2, 1, -4, -1, 2, 1, -5, 4])",
        "minimumSum([3, 7, 12, 8, 10, 1, 15, 5, 9, 17, 13])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 5, 6], target = 9)",
        "lengthOfLongestSubsequence(nums = [5, 10, 15, 20], target = 35)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5, 1], target = 9)",
        "lengthOfLongestSubsequence(my_list = [1, 5, 2, 7, 3])",
        "lengthOfLongestSubsequence(nums = [3, 2, 6, 1, 5, 8, 2], target = 8)",
        "lengthOfLongestSubsequence(nums = [10, 25, 13, 5, 3, 22], target = 20)"
    ],
    "sample_368": [
        "sortVowels(s1 = \"banana\", s2 = \"anana\")",
        "sortVowels(s1 = \"a\", s2 = \"b\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s1 = \"leetcode\", s2 = \"CodeLeet\")",
        "sortVowels(s1 = \"abca\", s2 = \"cab\")",
        "sortVowels(\"Hello World\")",
        "sortVowels(s1 = \"hello\", s2 = \"world\")",
        "sortVowels(s1 = \"cat\", s2 = \"ate\")",
        "sortVowels(s1 = \"ball\", s2 = \"cat\")",
        "sortVowels(s = \"na\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1,1],[2,2]])",
        "matrixSum([[1,2,3], [2,3,4], [3,4,5]])",
        "matrixSum(nums = [\n    [1,1,1,1,1],\n    [1,1,1,1,1],\n    [1,1,1,1,1],\n    [1,1,1,1,1],\n    [1,1,1,1,1]\n])",
        "matrixSum(s1 = [[1, 2, 3], [3, 4, 5], [6, 7, 8]], s2 = [[9, 10, 11], [12, 13, 14], [15, 16, 17]])",
        "matrixSum(nums = [[1,3,2], [5,4,8], [9,2,6]])",
        "matrixSum(matrix = [[3,4,1,2,5],[6,8,3,7,1],[2,9,7,1,2],[9,8,7,6,1],[4,2,4,1,3]])"
    ],
    "sample_243": [
        "maximumTripletValue([1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [3, 2, 4, 5])",
        "maximumTripletValue(nums = [1, 5, 3, 4])",
        "maximumTripletValue([-3, 0, 1, -1, 2, -2, 1, -3])",
        "maximumTripletValue(nums = [5, 2, 3, 6, 7])",
        "maximumTripletValue([0, 1, 3, 6, 10])",
        "maximumTripletValue([6, 0, 1, 1, 2, 0])",
        "maximumTripletValue(nums = [4, 1, 2, 3, 5, 2, 3, 1, 5])",
        "maximumTripletValue(nums = [4, 8, 3, 1, 10, 6, 2, 5, 9, 7])"
    ],
    "sample_346": [
        "alternatingSubarray([1,2,3,4,5])",
        "alternatingSubarray([1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,2,1])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 3, 2, 1])",
        "alternatingSubarray([1,3,5,3,2])",
        "alternatingSubarray([1, 0, 0, 1, 0, 1, 0, 1, 0])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 4)",
        "beautifulSubstrings(s = \"banana\", k = 5)",
        "beautifulSubstrings(s1 = \"ab\", s2 = \"ba\")",
        "beautifulSubstrings(s = \"abba\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 4)",
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s1 = \"aaa\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 4)",
        "beautifulSubstrings(s = \"an\", k = 3)",
        "beautifulSubstrings(s = \"mississippi\", k = 3)"
    ],
    "sample_449": [
        "minChanges(\"abc\")",
        "minChanges(\"abc\")",
        "minChanges(\"abcd\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"abca\")",
        "minChanges(\"bb\")",
        "minChanges(s = \"abcdabcd\")",
        "minChanges(\"abcdefg\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"ababcabc\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s1 = \"10\")",
        "minimumSteps(\"101010\")",
        "minimumSteps(\"ab1bc\")",
        "minimumSteps(s1 = \"1\", s2 = \"12\")",
        "minimumSteps(s1 = \"110\", s2 = \"111\")",
        "minimumSteps(s1 = \"1110010\", s2 = \"10100101\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"age 60\", \"age 50\", \"age 55\"])",
        "countSeniors(details = [\"55\", \"55\", \"60\", \"65\", \"70\"])",
        "countSeniors(details = [\"age:34\", \"age:48\", \"age:59\"])",
        "countSeniors(details = [\"hi\", \"old man\", \"how\", \"are\", \"you\"])",
        "countSeniors(details = [\"89-0-0\", \"89-0-1\", \"89-0-2\"])",
        "countSeniors(details = [\"34\", \"47\", \"60\", \"23\", \"70\"])",
        "countSeniors(details = [\"age_21\", \"age_61\", \"age_47\"])",
        "countSeniors(details = [\"hello1\", \"hi2\", \"goodbye3\", \"goodnight4\"])",
        "countSeniors(details = [\"a1a0b1b0c1d1e1f1\", \"a1a2b3c4d5e6f7g8h9\", \"a1a2b3c4d5e6f7g8h9\"])",
        "countSeniors(details = [\"68/12/2019\", \"33/12/2020\", \"50/12/2020\", \"73/12/2020\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(sorted(nums))",
        "minGroupsForValidAssignment(nums = [1,2,3,2,1])",
        "minGroupsForValidAssignment(nums = [3,3,2,2,1])",
        "minGroupsForValidAssignment(nums = [2,3,1,1,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 2, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
        "minGroupsForValidAssignment(nums = [2, 1, 3, 1, 2, 1])",
        "minGroupsForValidAssignment([3,1,4,2,5,7,8,9,6])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 2)",
        "countPairs([[1, 1], [2, 2], [3, 3]], 2)",
        "countPairs(coordinates = [[\"a\", \"b\"], [\"b\", \"c\"], [\"a\", \"c\"]], k = 3)",
        "countPairs([[0,0],[0,1],[1,0],[1,1]], 1)",
        "countPairs(coordinates = [\n    [0, 0], [1, 1], [0, 1]\n], k = 2)",
        "countPairs(coordinates = [[1,0], [1,1], [2,0], [2,1], [3,0], [3,1]], k = 2)",
        "countPairs([[0, 0], [1, 0], [2, 0], [0, 1]], 1)",
        "countPairs([[1, 2], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1], [2, 1]], 2)",
        "countPairs(coordinates = [[2, 4], [5, 7], [1, 3], [5, 9]], k = 2)",
        "countPairs([[2, 3], [2, 3], [3, 3], [4, 4], [4, 4], [1, 1], [1, 1]], 3)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 2, 2, 3], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 5, k = 2)",
        "maxSum(nums = [2,2,1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 1, 4], m = 2, k = 2)",
        "maxSum(nums = [2,3,2,2,4,2], m = 3, k = 2)",
        "maxSum(nums = [2, 1, 3, 2, 2, 4], m = 4, k = 2)",
        "maxSum(nums = [3, 2, 2, 3, 1, 1, 2, 2, 2], m = 3, k = 2)"
    ],
    "sample_452": [
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(\"banana\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(\"abab\")",
        "minChanges(\"ba\")",
        "minChanges(\"baab\")",
        "minChanges(\"abca\")",
        "minChanges(s = \"abccd\")",
        "minChanges(\"mqpxyz\")"
    ],
    "sample_279": [
        "minOperations([1, 2, 3], [4, 5, 6])",
        "minOperations([3, 2, 1], [2, 3, 1])",
        "minOperations(nums1 = [1, 3, 2], nums2 = [1, 3, 3])",
        "minOperations(nums1 = [1, 3, 4], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [1,2,3,4,5,6,7,8,9,0])",
        "minOperations([4, 2, 3, 4], [3, 2, 1, 4])",
        "minOperations(nums1 = [3, 4, 3], nums2 = [3, 3, 4])",
        "minOperations(nums1 = [4,5,6,3], nums2 = [3,6,5,4])",
        "minOperations(nums1 = [4, 5, 6, 7, 8], nums2 = [8, 9, 3, 4, 5])",
        "minOperations(nums1 = [4, 2, 8, 4, 10, 3], nums2 = [4, 3, 2, 10, 4, 1])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"abacabadabacaba\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"bab\", k = 2)",
        "shortestBeautifulSubstring(s = \"ba\", k = 4)",
        "shortestBeautifulSubstring(s = \"0011\", k = 3)",
        "shortestBeautifulSubstring(s = \"abacabadabacaba\", k = 5)",
        "shortestBeautifulSubstring(s1 = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"aba\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"123456789\", k = 3)",
        "shortestBeautifulSubstring(\"1101111011\", 2)",
        "shortestBeautifulSubstring(s = \"ab00bc\", k = 3)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [10, 20, 30, 40])",
        "maximumTripletValue(nums = [3, 2, 1, 0])",
        "maximumTripletValue([1, -2, 3, -1])",
        "maximumTripletValue([1,3,5,2,3,4])",
        "maximumTripletValue(nums = [6,12,3,1,9,1])",
        "maximumTripletValue([2,3,1,-6,5,7,8,9])",
        "maximumTripletValue([0, -3, -1, 2, 1, 0, -1, -3, -3])",
        "maximumTripletValue([4, 10, 13, -3, -1, -5])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 7)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 3, limit = 12)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 10, limit = 9)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(limit = 5, n = 12)",
        "distributeCandies(n = 5, limit = 100)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [0,1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [5,2,4,3,3])",
        "minGroupsForValidAssignment(nums = [6,4,6,6])",
        "minGroupsForValidAssignment(nums = [3,3,4,4,4,5,6])",
        "minGroupsForValidAssignment(nums = [12,4,12,4,12,4,12,4,12])",
        "minGroupsForValidAssignment(nums = [2,4,5,2,1,5,5,2])",
        "minGroupsForValidAssignment(s1 = [1,3,4,2,2], s2 = [5,3,4,2,2])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 0, 0, 0, 0], nums2 = [1, 2, 3, 4, 5])",
        "minSum([1,2,3,4], [3,4,5,6])",
        "minSum(nums1 = [0, 0, 0, 1], nums2 = [0, 0, 0, 0])",
        "minSum([0, 0, 1, 0, 0], [1, 0, 0, 0, 1])",
        "minSum(nums1 = [1,1,1], nums2 = [2,1,1])",
        "minSum(nums1 = [4, 3, 2, 4], nums2 = [1, 2, 3])",
        "minSum(nums1 = [2, 5, 6, 2], nums2 = [4, 2, 0, 2])",
        "minSum([1, 2, -2, 4, -1, 0], [0, -1, 1, -2, -2, 2])"
    ],
    "sample_453": [
        "minChanges(s1 = \"ab\", s2 = \"ba\")",
        "minChanges(s = \"abc\")",
        "minChanges(s1 = \"ab\", s2 = \"ab\")",
        "minChanges(s1 = \"aab\")",
        "minChanges(s1 = \"abcd\", s2 = \"abdc\")",
        "minChanges(s1 = \"abcb\")",
        "minChanges(s1 = \"ab\", s2 = \"aba\")",
        "minChanges(s1 = \"ba\", s2 = \"bna\")",
        "minChanges(s1 = \"aab\", s2 = \"aab\")",
        "minChanges(s1 = \"baa\", s2 = \"aaaa\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s1 = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"bbbbaa\", k = 3)",
        "beautifulSubstrings(\"kitten\",2)",
        "beautifulSubstrings(s = \"abaaaba\", k = 5)",
        "beautifulSubstrings(\"aabcabc\",3)",
        "beautifulSubstrings(\"mqpzx\", 3)"
    ],
    "sample_295": [
        "beautifulSubstrings(s1 = \"banana\", k = 3)",
        "beautifulSubstrings(s1 = \"ab\", k = 2)",
        "beautifulSubstrings(s1 = \"bba\", k = 2)",
        "beautifulSubstrings(s = \"abca\", k = 3)",
        "beautifulSubstrings(s1 = \"aeiou\", k = 2)",
        "beautifulSubstrings(\"a\", 3)",
        "beautifulSubstrings(s1 = \"abc\", s2 = \"bcd\")",
        "beautifulSubstrings(s1 = \"bbb\", k = 3)",
        "beautifulSubstrings(\"abcdef\", 3)",
        "beautifulSubstrings(s1 = \"bac\", k = 3)"
    ],
    "sample_369": [
        "sortVowels(s1 = \"banana\", s2 = \"nana\")",
        "sortVowels(s1 = \"lYmpH\")",
        "sortVowels(s1 = \"aeiou\")",
        "sortVowels(s = \"banana\")",
        "sortVowels(s1 = \"banana\", s2 = \"naanab\")",
        "sortVowels(\"hElLo WoRlD\")",
        "sortVowels(s = \"blah\")",
        "sortVowels(s = \"banana\")",
        "sortVowels(s = 'python')",
        "sortVowels('hahahab')"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [2,2,2,2,2,2])",
        "minimumSeconds(nums = [3,4,2,1])",
        "minimumSeconds([1,1,1,1,1,1,1,1,1,1])",
        "minimumSeconds(nums = [0,3,5,6])",
        "minimumSeconds([9,3,5,2,7,4,1,6,8])"
    ],
    "sample_258": [
        "minimumSum([1, 2, 3])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 3, 5])",
        "minimumSum([3, 2, 1, 4])",
        "minimumSum(nums = [2, 1, 5])",
        "minimumSum([3,2,1,2,4])",
        "minimumSum(nums = [0, 0, 1, 2])",
        "minimumSum(nums = [10, 5, 20, 15, 25])",
        "minimumSum([1, 3, 1, 1, 3, 1, 3, 1])"
    ],
    "sample_417": [
        "minOperations(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k = 2)",
        "minOperations(nums = [1,3,5,7], k = 4)",
        "minOperations(nums = [2,3,1,4,2,5], k = 3)",
        "minOperations(nums = [9,8,7,6,5,4,3,2,1], k = 6)",
        "minOperations(nums = [1, 3, 4, 2, 5], k = 1)",
        "minOperations(nums = [10, 5, 2, 1, 20], k = 5)",
        "minOperations(nums = [1, 5, 10, 20, 40], k = 20)",
        "minOperations(nums = [1, 5, 10, 11, 2], k = 10)",
        "minOperations(nums = [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], k = 5)",
        "minOperations([2,4,4,6,9,9,7,3,3], 7)"
    ],
    "sample_400": [
        "maxSum([1, 2, 3, 4, 5], 2, 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum([1, 2, 3, 4], 4, 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8], m = 2, k = 4)",
        "maxSum(A = [10, 20, 30, 40, 50, 60, 70], m = 4, k = 3)",
        "maxSum([1, 1, 1, 1, 1, 0, 0, 0, 0], 2, 4)",
        "maxSum(A = [1,2,3,2,5,6,3,1], m = 2, k = 4)",
        "maxSum([3, 4, 4, 5, 4, 6], 2, 5)",
        "maxSum(A = [1,2,3,2,5,6,2,9,1,4], m = 3, k = 2)",
        "maxSum([1, 3, 4, -3, 1, 2, 1, 1, 1], 1, 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0001\")",
        "minimumSteps(\"00101\")",
        "minimumSteps(\"0100101\")",
        "minimumSteps(\"b\")",
        "minimumSteps(\"111101\")"
    ],
    "sample_430": [
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays([1, 2, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [2, 3, 3, 4])",
        "maxSubarrays(nums = [2, 3, 1, 4, 5, 1])",
        "maxSubarrays(nums = [3, 5, 1, 1, 6])",
        "maxSubarrays([3, 3, 4, 4, 5])",
        "maxSubarrays(nums = [4, 2, 5, 5, 1])",
        "maxSubarrays([2, 3, 1, -3, 4, -2, 5, 1])",
        "maxSubarrays([2, 4, 5, 2, 4, 6, 2, 2])"
    ],
    "sample_319": [
        "buyChoco(prices = [10, 20, 30], money = 50)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 6)",
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [10, 20, 30], money = 100)",
        "buyChoco(prices = [100, 200, 300], money = 500)",
        "buyChoco(prices = [10, 5, 2, 1], money = 30)",
        "buyChoco(prices = [100, 50, 20], money = 110)",
        "buyChoco(prices = [5, 2, 4, 6], money = 12)",
        "buyChoco(prices = [6, 10, 9, 3], money = 10)",
        "buyChoco(prices = [12, 13, 14, 15, 16, 17, 18, 19], money = 30)"
    ],
    "sample_290": [
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"000000\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"012\")",
        "minimumSteps(s=\"123\")",
        "minimumSteps(s = \"0123\")",
        "minimumSteps(s = \"10011\")",
        "minimumSteps(\"10001\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s=\"ab00c\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals([1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [0,1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 1, 2])",
        "minLengthAfterRemovals(nums = [1,1,2,3,4])",
        "minLengthAfterRemovals(nums = [1, 3, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,1])",
        "minLengthAfterRemovals(nums = [2, 1, 3, 4, 2])",
        "minLengthAfterRemovals(nums = [3,3,4,3,2,2,1])"
    ],
    "sample_420": [
        "minOperations(nums = [2, 3, 1, 2], k = 2)",
        "minOperations(nums = [1, 3, 4, 5, 6], k = 4)",
        "minOperations(nums = [5, 10, 15], k = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [0, 0, 0], k = 2)",
        "minOperations(nums = [2, 2, 2, 2], k = 2)",
        "minOperations(nums = [5,3,7,2,1], k = 3)",
        "minOperations(nums = [1, 2, 3, 5, 6, 10], k = 4)",
        "minOperations([3,4,1,2,5,3], 3)",
        "minOperations(nums = [5, 9, 10, 12, 7, 4, 15, 5], k = 4)"
    ],
    "sample_363": [
        "isGood([??])",
        "isGood([1, 2, 3, 3, 4])",
        "isGood([1,1,1,1])",
        "isGood(nums = [2, 2, 1])",
        "isGood(nums = [2, 2, 2, 2, 2, 2])",
        "isGood(nums = [1,1,1,1,1,1])",
        "isGood(nums = [1, 2, 3, 4, 3])",
        "isGood([3, 2, 3, 3])",
        "isGood(nums = [0, 1, 1, 2])",
        "isGood([1, 3, 2, 2, 3, 1])"
    ],
    "sample_325": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1)",
        "isFascinating(n = 12345)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 0)",
        "isFascinating(n = 123)",
        "isFascinating(n = 42)",
        "isFascinating(n = 9876)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3])",
        "isGood([1,2,3])",
        "isGood(nums = [0,1,2,3])",
        "isGood([0,1,2,3])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [1, 2, 2, 3, 3, 3])",
        "isGood([0, 1, 3, 5, 6])",
        "isGood([2, 3, 4, 1, 2])",
        "isGood(nums = [1,3,2,3,4,5])",
        "isGood(nums = [2, 2, 4, 4, 4, 5])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds(nums = [0, 1, 2])",
        "minimumSeconds(nums = [0, 1, 2, 2, 3, 3, 3])",
        "minimumSeconds(nums = [0,0,0,0,0,0])",
        "minimumSeconds(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minimumSeconds(nums = [1, 2, 3, 5, 4, 2, 1])",
        "minimumSeconds(nums = [2, 1, 0, 2, 1, 0])",
        "minimumSeconds(nums = [0, 0, 0, 1, 2, 2, 2, 2, 3, 3])",
        "minimumSeconds(nums = [0, 4, 5, 1, 3, 6, 3, 7, 8])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 1, 5])",
        "minimumRightShifts(nums = [5,3,2,4,1])",
        "minimumRightShifts([4, 3, 5, 2, 1])",
        "minimumRightShifts(nums = [0, 3, 2, 4, 1, 5])",
        "minimumRightShifts([1, 2, 4, 3, 7])",
        "minimumRightShifts([1, 4, 7, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 3, 5, 6, 7])"
    ],
    "sample_362": [
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1,2,3])",
        "isGood([1, 2, 3])",
        "isGood([])",
        "isGood(my_list = [1, 2, 3, 4])",
        "isGood(s1 = \"ba\", s2 = \"nana\")",
        "isGood(my_list = [1, 3, 4, 5])",
        "isGood(nums = [0, 1, 3, 5, 6, 7])",
        "isGood([1,2,4,5,8,9])",
        "isGood(my_list = [1,2,4,5,6,7,8])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [4, 5, 6, 7, 8])",
        "minOperations(nums1 = [3,4,5], nums2 = [1,2,3])",
        "minOperations(nums1 = [9, 8, 7], nums2 = [8, 7, 6])",
        "minOperations(nums1 = [2, 1, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [2, 2, 2], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [2, 3, 4, 5], nums2 = [1, 5, 4, 6])",
        "minOperations([2, 4, 1], [5, 2, 1])",
        "minOperations(nums1 = [2,3,5,7,1,9], nums2 = [1,2,3,4,5,6])",
        "minOperations(nums1 = [2, 5, 7, 7], nums2 = [3, 4, 1, 9])",
        "minOperations(nums1 = [2, 5, 9, 1, 3, 10, -1], nums2 = [4, 1, 9, 10, 3, 5, 7])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"abcabcabc\", k = 3)",
        "shortestBeautifulSubstring(s1 = \"ba\", k = 2)",
        "shortestBeautifulSubstring(s = \"ba\", k = 3)",
        "shortestBeautifulSubstring(s = \"abcab\", k = 2)",
        "shortestBeautifulSubstring(s = \"abcd\", k = 5)",
        "shortestBeautifulSubstring(s1 = \"abcabcabc\", k = 5)",
        "shortestBeautifulSubstring(s1 = \"abcd\", k = 2)",
        "shortestBeautifulSubstring(s = \"abcdefghij\", k = 4)",
        "shortestBeautifulSubstring(s = \"abac\", k = 4)",
        "shortestBeautifulSubstring(s = \"ba12c\", k = 2)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 3, 4, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 4, 2, 1])",
        "minGroupsForValidAssignment([1,1,2,3,3])",
        "minGroupsForValidAssignment([5, 2, 3, 1])",
        "minGroupsForValidAssignment([3, 4, 5, 5, 3])",
        "minGroupsForValidAssignment(nums = [3, 4, 2, 1, 1])",
        "minGroupsForValidAssignment(my_list = [3, 6, 4, 8, 6, 2, 10])",
        "minGroupsForValidAssignment([3, 2, 6, 1, 5, 6, 3, 8, 7])",
        "minGroupsForValidAssignment(nums = [9, 1, 4, 1, 9, 2, 8, 7, 7, 2, 2])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(\"1001\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"101010\")",
        "minimumSteps(s = \"110110\")",
        "minimumSteps(s = \"0001\")",
        "minimumSteps(s = \"0010101\")",
        "minimumSteps(\"1231212\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [3,2,1,5,6,4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 4, 2, 3], target = 6)",
        "lengthOfLongestSubsequence([1,3,2,4,2], 7)",
        "lengthOfLongestSubsequence([1,3,1,5,9,5], 9)",
        "lengthOfLongestSubsequence([1,0,2,3], 4)",
        "lengthOfLongestSubsequence(nums = [3, 5, 1, 7, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [10, 2, 6, 4, 8, 3, 7, 9, 1, 5], target = 9)",
        "lengthOfLongestSubsequence([3, 5, 4, 6, 8, 4, 3], 12)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 9, 12, 21, 24, 40], target = 47)"
    ],
    "sample_259": [
        "minimumSum(nums = [])",
        "minimumSum([1,3,5])",
        "minimumSum(nums = [3,1,2,3,4])",
        "minimumSum(nums = [3,1,4,2,1,5])",
        "minimumSum([4,3,5,1,4])",
        "minimumSum(nums = [3,9,4,1,2,5])",
        "minimumSum(nums = [0, 0, 1, 2, 3, 5, 8])",
        "minimumSum(nums = [1, 2, 1, -1, -4, 2, 1, -1])",
        "minimumSum([1,1,2,3,4,5,2,1,3,1])",
        "minimumSum([6, 1, 2, 3, 6, 3, 5])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 4, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [9, 9, 9, 9], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1], m = 3, k = 3)",
        "maxSum(nums = [1, 3, 2, 4, 3, 2, 5], m = 3, k = 4)",
        "maxSum(nums = [5,4,3,3,2,2,2,2,1], m = 10, k = 3)",
        "maxSum(nums = [0,1,1,2,1,4,4], m = 3, k = 2)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"anana\", s3 = \"nana\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"bba\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"baz\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ab\", s3 = \"cba\")",
        "findMinimumOperations(\"a\", \"aa\", \"aaa\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apples\", s3 = \"pie\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations([1, 2, 3, 4, 5])",
        "minOperations(nums = [0, 2, 3, 4, 5])",
        "minOperations(nums = [10, 1, 2, 3, 4])",
        "minOperations(nums = [3, 4, 5, 6, 8, 10])",
        "minOperations(nums = [3, 0, 6, 1, 3, 2, 1, 0])",
        "minOperations(nums = [6, 4, 8, 9, 5, 1, 3, 4, 5, 7])",
        "minOperations([3, 0, 2, 1, 5, 3, 2, 0, 1, 2, 5, 1, 3, 4, 1, 5, 0, 4, 2, 3, 3])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [5, 10, 25])",
        "minimumCoins(prices = [4,5,6,7])",
        "minimumCoins(prices = [5, 2, 6, 4])",
        "minimumCoins(prices = [10, 4, 3])",
        "minimumCoins(prices = [10, 4, 5, 8])",
        "minimumCoins(prices = [3, 2, 7, 6, 5, 1])",
        "minimumCoins([5,7,2,1,3,6])",
        "minimumCoins(prices = [12, 15, 18, 8, 6, 10])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0,1,2,3,4,5])",
        "minimumSeconds(nums = [1,5,2,3])",
        "minimumSeconds(nums = [1,2,4,6])",
        "minimumSeconds([1,1,1,2,2,2,3,3,3])",
        "minimumSeconds(nums = [0,1,1,2,3,3])",
        "minimumSeconds([0,1,2,2,3])",
        "minimumSeconds(nums = [20,30,20,10])",
        "minimumSeconds(nums = [2,7,1,5,8])",
        "minimumSeconds(nums = [10,20,30,20,40,20,20,50])"
    ],
    "sample_448": [
        "minChanges(\"abc\")",
        "minChanges(s = \"ab\")",
        "minChanges(s1 = \"abcd\")",
        "minChanges(\"banana\")",
        "minChanges(\"ab\")",
        "minChanges(s = \"aba\")",
        "minChanges(\"aaab\")",
        "minChanges(s = \"ababab\")",
        "minChanges(\"abcde\")",
        "minChanges(s1 = \"hello\", s2 = \"heo\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5], limit = 5)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5], limit = 5)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 15)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 5, 2, 9, 1], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 5, 9, 10, 12, 20], limit = 7)",
        "lexicographicallySmallestArray(nums = [10, 3, 7, 8, 2, 5, 1], limit = 10)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1,2,2,3,3])",
        "sumCounts(nums = [0, 0, 0, 1, 1, 1])",
        "sumCounts(my_list = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3,1])",
        "sumCounts(nums = [1,2,2,3,4,5,5])",
        "sumCounts(nums = [0,1,1,1,2,3,3])",
        "sumCounts([1, 2, 1, 3, 1, 2, 4])",
        "sumCounts(nums = [0,0,1,0,2,1,3,1,2,3,3,3])",
        "sumCounts([3,4,2,2,1,2,1,3,3,4,4,4])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue([-1, -2, -3])",
        "maximumTripletValue(nums = [0, 1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 4, 5, 2, 3])",
        "maximumTripletValue([-1, 0, 1, 2])",
        "maximumTripletValue(nums = [6, 1, 3, 5, 7, 2, 4])",
        "maximumTripletValue(nums = [2, 5, 1, 6, 8, 0, 3, 7, 4])",
        "maximumTripletValue(nums = [2, 3, -4, 4, -1, -8, 7, 8])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"abcd\", k = 3)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s1 = \"ab\", k = 2)",
        "beautifulSubstrings(s1 = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 3)",
        "beautifulSubstrings(s1 = \"aba\", k = 3)",
        "beautifulSubstrings(s1 = \"aab\", k = 3)",
        "beautifulSubstrings(\"aab\", 3)",
        "beautifulSubstrings(s1 = \"beautiful\", k = 3)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,1,1,2,2,3], target = 5)",
        "countPairs(nums = [1,2,3,4,5,6], target = 8)",
        "countPairs(nums = [1,1,2,2], target = 4)",
        "countPairs(nums = [3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 6)",
        "countPairs(nums = [2,1,2,3,2], target = 5)",
        "countPairs(nums = [4,5,2,3,2,4], target = 5)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 100, limit = 10)",
        "distributeCandies(n = 0, limit = 10)",
        "distributeCandies(n = 25, limit = 10)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 10, limit = 7)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [4, 5, 6, 7, 8])",
        "minOperations(m1 = [1, 2, 3], m2 = [3, 2, 1])",
        "minOperations(nums1 = [3, 5, 7], nums2 = [3, 4, 5])",
        "minOperations([5,4,3,2,1], [1,1,1,1,1])",
        "minOperations(nums1 = [3,1,2,4,3], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1, 3, 6, 2, 4, 5], nums2 = [1, 2, 3, 4, 5, 6])",
        "minOperations([1, 3, 5, 2, 4], [3, 1, 3, 5, 2])",
        "minOperations([1,4,4], [5,2,5])",
        "minOperations(nums1 = [6, 2, 3], nums2 = [2, 7, 1, 4])",
        "minOperations(my_list = [10, 5, 2, 8, 10, 20, 30])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations([1,2,3,4,5,6,7,8,9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minOperations(nums = [1, 2, 4, 7, 8, 12, 13, 15])",
        "minOperations(nums = [1, 3, 4, 6, 3, 3, 2])",
        "minOperations(nums = [4, 1, 5, 3, 2, 6, 7, 8, 9, 10])",
        "minOperations(nums = [5, 2, 3, 1, 4, 7, 8])",
        "minOperations(nums = [2,3,1,2,1,1,2])",
        "minOperations(nums = [5,3,8,3,7,6])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"abcd\", k = 2)",
        "shortestBeautifulSubstring(s = \"aab\", k = 2)",
        "shortestBeautifulSubstring(s1 = 'ba', k = 3)",
        "shortestBeautifulSubstring(s = \"ab\", k = 3)",
        "shortestBeautifulSubstring(s = \"aab\", k = 2)",
        "shortestBeautifulSubstring(s = \"12121212\", k = 2)",
        "shortestBeautifulSubstring(s = \"abcde\", k = 2)",
        "shortestBeautifulSubstring(s = \"banana\", k = 1)",
        "shortestBeautifulSubstring(s = \"abcdabc\", k = 3)",
        "shortestBeautifulSubstring(s = \"10000000101\", k = 6)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [2, 1, 2])",
        "minimumSeconds(nums = [2, 4, 5, 7, 9])",
        "minimumSeconds(nums = [9, 2, 3, 5])",
        "minimumSeconds(nums = [1, 5, 3, 7, 2, 8])",
        "minimumSeconds(nums = [5,1,2,3,4,1])",
        "minimumSeconds(nums = [2,1,2,3,2,1,2])",
        "minimumSeconds(nums = [2, 7, 1, 4, 1, 4, 3])",
        "minimumSeconds(nums = [10,15,10,15,10,10,20])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [5, 6, 7])",
        "minOperations(nums = [0,0,0])",
        "minOperations([0,1,2])",
        "minOperations(nums = [4,2,3,3,2,4])",
        "minOperations(nums = [2, 2, 3, 1, 3, 5])",
        "minOperations([3, 4, 4, 3, 1, 2])",
        "minOperations(nums = [6, 7, 6, 6, 6, 6, 6, 6])",
        "minOperations(nums = [2, 5, 1, 5, 3, 1, 3])"
    ],
    "sample_351": [
        "alternatingSubarray([1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7, 8, 9])",
        "alternatingSubarray([1, 2, 3, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [-1, -2, 3, 4, 5])",
        "alternatingSubarray([1, 2, -1, 4, -2])",
        "alternatingSubarray(nums = [1,3,5,7,2,4])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1, 3, 3, 4, 4, 4])",
        "alternatingSubarray(nums = [-1, 0, 0, 0, 1, 0, 0, -1, 0])",
        "alternatingSubarray(nums = [0, 5, 6, 3, 4, 2, 1, 7, 8])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 7, 8, 6, 3, 3, 4, 5])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1,2,3,1])",
        "minLengthAfterRemovals(nums = [5,4,3,2,1])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2])",
        "minLengthAfterRemovals([1,1,2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [2,4,4,1,2,3])",
        "minLengthAfterRemovals(nums = [0, 0, 1, 1, 2, 3, 3, 2, 2, 1, 1, 0, 0])",
        "minLengthAfterRemovals(nums = [3, 2, 1, 4, 1, 5, 6, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 1, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0])",
        "minLengthAfterRemovals([0,2,3,1,2,3,4,0,3,2,1])",
        "minLengthAfterRemovals(nums = [10, 2, 2, 2, 6, 3, 8, 10, 10, 10])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ab\", \"ba\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"c\", \"c\", \"b\", \"a\"])",
        "maximumNumberOfStringPairs(s = [\"abba\", \"abba\", \"abba\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abcd\", \"abab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"bc\", \"ba\", \"cb\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"bacd\", \"cbad\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"bab\", \"baa\", \"aba\", \"abca\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcde\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcde\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"ann\")",
        "canMakeSubsequence(str1 = \"zabcd\", str2 = \"abcde\")",
        "canMakeSubsequence(s1 = \"abcdef\", s2 = \"abac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aabbcc\")",
        "canMakeSubsequence(str1 = \"abccba\", str2 = \"bca\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababababab\")",
        "longestSemiRepetitiveSubstring(\"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaab\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaa\")",
        "longestSemiRepetitiveSubstring(\"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbb\")",
        "longestSemiRepetitiveSubstring(\"zzz\")"
    ],
    "sample_399": [
        "maxSum(nums = [1, 2, 3, 4, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 2, 1, 1, 2], m = 2, k = 3)",
        "maxSum(nums = [2, 3, 1, 2], m = 2, k = 1)",
        "maxSum([1, 2, 3, 4, 5, 6], 4, 1)",
        "maxSum([4, 2, 1], 1, 2)",
        "maxSum(nums = [1,2,1,3,2,4,4,3], m = 5, k = 2)",
        "maxSum(nums = [1, 0, 2, 1, 0, 1, 3, 0, 1], m = 3, k = 2)",
        "maxSum(nums = [4,0,4,3,3,3,2,2,2,1], m = 3, k = 2)",
        "maxSum(nums = [2, 4, 4, 1, 1, 2, 3, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [6,9,1,2,3,4,5,4,3,2,1,6,9,8,7,5,3,2,3,1,6,9,8,7,5,3,2,3,1,6,9,8,7,5,3,2,3,1,6,9,8,7,5,3,2,3,1,6,9,8,7,5,3,2,3,1,6,9,8,7,5,3,2,3,1,6,9,8,7,5,3,2,3,1,6,9,8,7,5,3,2,3,1], m = 12, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"banana\"], x = \"ana\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"ananas\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"zebra\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"ba\", \"nana\"], x = \"nana\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\", \"dog\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"ana\", \"ba\"], x = \"ana\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"in\", \"a\", \"frame\"], x = \"in\")",
        "findWordsContaining(words = [\"blabla\", \"ddd\", \"mooo\"], x = \"l\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,1,2,2,3,3], moveFrom = [1,3], moveTo = [2,3])",
        "relocateMarbles(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3], moveFrom = [0, 2, 4], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [0,1,2,3], moveFrom = [0,2,3], moveTo = [1,2,0])",
        "relocateMarbles(s1 = [1,0,1], moveFrom = [0,1,2], moveTo = [1,2,0])",
        "relocateMarbles(nums = [2,2,1,3], moveFrom = [2,1], moveTo = [3,4])",
        "relocateMarbles(nums = [1,3,2,4], moveFrom = [0,2], moveTo = [1,2])",
        "relocateMarbles(nums = [1, 1, 1, 1, 2], moveFrom = [1, 2, 3, 4], moveTo = [2, 3, 4, 5])",
        "relocateMarbles(nums = [1,0,2,3,0,2,1], moveFrom = [0,2,4], moveTo = [1,3,5])",
        "relocateMarbles(nums = [10,20,30,20,40,20], moveFrom = [1,2,3,4], moveTo = [4,5,6,7])",
        "relocateMarbles(nums = [1,1,2,2,3,4,4,3], moveFrom = [2,1,2,2,2,1,1,1], moveTo = [1,2,3,4,3,1,2,2])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue([1,2,3,4,5])",
        "maximumTripletValue([1, 3, 5])",
        "maximumTripletValue(nums = [4, 5, 6, 3, 2, 1])",
        "maximumTripletValue([2, 1, -3, 4, 2])",
        "maximumTripletValue(nums = [1, 3, -2, 5, 6])",
        "maximumTripletValue(nums = [-10, -2, 0, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 5, 10, -5, 3, 7, -10])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(\"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(\"aaab\")",
        "longestSemiRepetitiveSubstring(\"aaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"bananab\")",
        "longestSemiRepetitiveSubstring(\"aabbcc\")",
        "longestSemiRepetitiveSubstring(\"ababbbab\")",
        "longestSemiRepetitiveSubstring(s = \"AAACCGGTATCATATCCTACAA\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"cdab\", \"bacd\"])",
        "maximumNumberOfStringPairs(s1 = \"abba\", s2 = \"ab\")",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ana\", \"nana\", \"anana\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ab\", \"ac\", \"bc\", \"ba\", \"ab\", \"ac\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abcd\", \"bcab\", \"abcd\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"bbb\", \"abcd\", \"bab\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"baba\", \"baab\", \"abab\", \"abba\", \"bab\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\", \"eacr\", \"arc\", \"carrace\"])"
    ],
    "sample_308": [
        "matrixSum([[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum([[1,2,3],[4,5,6]])",
        "matrixSum(nums = [[1,2,3,4], [5,6,7,8], [9,10,11,12]])",
        "matrixSum(nums = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5]\n])",
        "matrixSum([[3, 0, 1], [0, 3, 2], [2, 2, 3]])",
        "matrixSum([[3, 1, 2], [2, 3, 1], [3, 2, 1]])",
        "matrixSum(nums = [[0, 2, 1], [2, 2, 3], [1, 3, 0]])",
        "matrixSum(nums = [[1, 3, 1], [2, 3, 1], [1, 3, 3]])",
        "matrixSum(nums = [[1, 9, 9], [2, 5, 8], [5, 5, 5]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ab\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"bab\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"bb\")",
        "findMinimumOperations(s1 = \"mq\", s2 = \"px\", s3 = \"zy\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"bb\", s3 = \"bbb\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcabc\", s3 = \"abcabcabc\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ba\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nana\")",
        "findMinimumOperations(\"abc\", \"abd\", \"abc\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"bna\", s3 = \"nab\")",
        "findMinimumOperations(\"abc\", \"def\", \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"dcba\", s3 = \"cba\")",
        "findMinimumOperations(s1 = \"bba\", s2 = \"bbb\", s3 = \"bb\")"
    ],
    "sample_324": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 0)",
        "isFascinating(n = 0)",
        "isFascinating(n = 1234)",
        "isFascinating(??)",
        "isFascinating(n = 4)",
        "isFascinating(n = 1000)",
        "isFascinating(n = 33)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [5,4,3,2,1])",
        "minimumCoins(prices = [1,1,1,1,1,1])",
        "minimumCoins(prices = [1,2,3,4,5,1])",
        "minimumCoins(prices = [10,1,5,3,7,4])",
        "minimumCoins(prices = [20,10,5,2])",
        "minimumCoins(prices = [1,2,5,8,10,15])",
        "minimumCoins(prices = [10,1,5,11,6,7])",
        "minimumCoins([10,11,12,13])",
        "minimumCoins(prices = [5,9,4,1])"
    ],
    "sample_380": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 4)",
        "countPairs(nums = [1,2,3,4], target = 3)",
        "countPairs(nums = [1,2,3,4,5,6], target = 6)",
        "countPairs(nums = [1,2,2,3,4,4], target = 6)",
        "countPairs(nums = [1, 3, 4, 2, 5], target = 7)",
        "countPairs(nums = [10,20,30,20,10], target = 60)",
        "countPairs(nums = [1, 1, 2, 2, 4], target = 2)",
        "countPairs(nums = [1,4,7,8,8], target = 9)",
        "countPairs(nums = [2,3,1,5,5,2], target = 10)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7])",
        "minGroupsForValidAssignment(nums = [2,2,4,4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3])",
        "minGroupsForValidAssignment(nums = [0,0,0,0,0,0])",
        "minGroupsForValidAssignment(nums = [2,3,4,5,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1, 1, 3, 2, 3])",
        "minGroupsForValidAssignment(nums = [10,7,8,2,8,7,10,8,2,10])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 4, 2, 3], target = 6)",
        "countPairs(nums = [1,2,3,4,5,6,7,8], target = 10)",
        "countPairs([1, 2, 3], 3)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], target = 15)",
        "countPairs(nums = [1, 1, 2, 3, 4], target = 5)",
        "countPairs([1, 1, 2, 2, 3, 3], 4)",
        "countPairs(nums = [1, 3, 7, 12], target = 6)",
        "countPairs(nums = [4, 1, 3, 5, 3, 2], target = 5)",
        "countPairs(nums = [2, 3, 1, 6, 7, 4, 2], target = 8)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [100, 200, 300], money = 300)",
        "buyChoco(prices = [3, 5, 4], money = 10)",
        "buyChoco(prices = [3,1,2], money = 7)",
        "buyChoco(prices = [5, 4, 7], money = 10)",
        "buyChoco(prices = [2,3,4,5], money = 6)",
        "buyChoco(prices = [5, 2, 10], money = 15)",
        "buyChoco(prices = [100, 50, 25], money = 75)",
        "buyChoco(prices = [5, 10, 20, 40], money = 50)",
        "buyChoco(prices = [3,1,2,5,7,4], money = 8)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ba\", \"an\", \"na\", \"ba\"])",
        "maximumNumberOfStringPairs(s1 = \"abba\", s2 = \"abba\")",
        "maximumNumberOfStringPairs(s1 = \"aba\", s2 = \"baa\")",
        "maximumNumberOfStringPairs(s1 = \"hello\", s2 = \"world\")",
        "maximumNumberOfStringPairs(words = [\"abba\", \"baab\", \"aaaa\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"nana\", \"ba\", \"na\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"abc\", \"acb\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"baab\", \"abc\", \"aab\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"cdab\", \"ab\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"cbb\", \"acb\", \"bbb\", \"bab\"])"
    ],
    "sample_370": [
        "sortVowels(\"lEtcede\")",
        "sortVowels(s = 'leetcode')",
        "sortVowels(s1 = 'abcde', s2 = 'cba')",
        "sortVowels(s1 = 'A', s2 = 'E')",
        "sortVowels(s1 = 'banana', s2 = 'e')",
        "sortVowels(s1 = \"abcdefghijklmnopqrstuvwxyz\", s2 = \"AEIOU\")",
        "sortVowels(s1 = 'lEle', s2 = 'oEtcede')",
        "sortVowels(s1 = \"apple\", s2 = \"leet\")",
        "sortVowels(s1 = \"Abcd\", s2 = \"eia\")",
        "sortVowels(\"sEeEeTdEdE\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts([1,2,3,1,2,3])",
        "sumCounts(s1 = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "sumCounts(nums = [2,3,1,2,3,1])",
        "sumCounts(nums = [2,3,4,5,5,5])",
        "sumCounts(nums = [2, 3, 2, 5, 5, 6, 6])",
        "sumCounts(nums = [1, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "sumCounts(nums = [2, 3, 5, 2, 1, 3, 3])",
        "sumCounts(nums = [4, 3, 3, 2, 1, 1, 2, 2, 3, 3])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [10, 1, 5, 10, 5])",
        "minimumCoins(prices = [1,3,2,1])",
        "minimumCoins(prices = [1, 2, 3, 5])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 20])",
        "minimumCoins(prices = [20, 50, 100, 200])",
        "minimumCoins(prices = [10, 5, 15, 25, 10, 15])",
        "minimumCoins(prices = [1, 4, 7, 3, 5])",
        "minimumCoins(prices = [6, 5, 3, 2, 10, 20])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 1, m = 1)",
        "differenceOfSums(n = 1, m = 4)"
    ],
    "sample_307": [
        "countSeniors(details = [\"45-60\", \"30-40\", \"20-50\"])",
        "countSeniors(details = [\"qw\", \"xw\", \"yz\"])",
        "countSeniors(details = [\"25%\", \"59%\"])",
        "countSeniors(details = [\"John\", \"Jack\", \"John\", \"Jack\", \"John\"])",
        "countSeniors(details = [\"Alice - 55\", \"Bob - 65\", \"Charlie - 28\"])",
        "countSeniors(details = [\"bob:70\", \"bob:60\", \"bob:70\", \"bob:60\", \"bob:70\"])",
        "countSeniors(details = [\"abc\", \"1234\", \"5678\", \"qwer\", \"9999\"])",
        "countSeniors(details = [\"??\", \"17\", \"55\", \"76\", \"12\"])",
        "countSeniors(details = [\"32m\", \"64m\", \"32s\", \"3s\", \"64s\"])",
        "countSeniors(details = [\"52a0\", \"45b1\", \"45b1\", \"45b1\", \"45b1\", \"52a0\"])"
    ],
    "sample_323": [
        "isFascinating(n = 0)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 4)",
        "isFascinating(n = 12345)",
        "isFascinating(n = 6)",
        "isFascinating(n = 6)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 2520)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minimumBeautifulSubstrings(s = \"abababab\")",
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"abcabcabc\")",
        "minimumBeautifulSubstrings(s = \"banana\")",
        "minimumBeautifulSubstrings(s = \"abababab\")",
        "minimumBeautifulSubstrings(s = \"ababcbacadefegdehijhklij\")",
        "minimumBeautifulSubstrings(\"Hello world\")",
        "minimumBeautifulSubstrings(s = \"aabccccddddeeeee\")",
        "minimumBeautifulSubstrings(\"cbaabcdabca\")"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 3, limit = 4)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 6, limit = 10)",
        "distributeCandies(n = 12, limit = 10)",
        "distributeCandies(n = 20, limit = 20)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 4, limit = 5)"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [3, 1, 4, 2], k = 3)",
        "minOperations(nums = [2,1,1,2], k = 2)",
        "minOperations(nums = [2,3,4,5,6,7,8,9], k = 5)",
        "minOperations(nums = [5,3,6,4], k = 2)",
        "minOperations(nums = [4, 2, 2, 4], k = 3)",
        "minOperations(nums = [2,4,3,1,4,1], k = 2)",
        "minOperations(nums = [4,4,1,1,5,5], k = 4)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 5, 5])",
        "sumCounts(nums = [1, 2, 2, 1, 1, 1])",
        "sumCounts(nums = [4, 4, 4, 4])",
        "sumCounts(nums = [2, 2, 3, 3, 4])",
        "sumCounts([2,4,6])",
        "sumCounts(nums = [1, 1, 3, 2, 2, 2, 4, 4, 4, 4])",
        "sumCounts(nums = [3,5,1,2,6,1,4])"
    ],
    "sample_437": [
        "lastVisitedIntegers(s1 = \"ba\", s2 = \"nana\")",
        "lastVisitedIntegers(words = [\"prev1\", \"prev2\", \"prev3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"first\", \"last\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"3\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers([\"visited\", \"int\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"4\", \"prev\", \"5\", \"6\", \"prev\"])",
        "lastVisitedIntegers(?? = [\"p\", \"a\", \"n\", \"a\", \"n\"])",
        "lastVisitedIntegers(words = [\"prev\", \"mq\", \"px\", \"zy\", \"prevs\", \"z\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 1)",
        "minOperations(nums = [5, 3, 1, 2, 4], k = 4)",
        "minOperations(nums = [2, 1, 3, 4], k = 3)",
        "minOperations([1, 3, 5, 7, 9], 2)",
        "minOperations(nums = [4, 2, 2, 2], k = 3)",
        "minOperations(nums = [3,1,4,1,5,9,2,6,5], k = 2)",
        "minOperations([3, 4, 1, 2, 3], 3)",
        "minOperations(nums = [1, 3, 2, 6, 1, 5], k = 4)",
        "minOperations(nums = [4, 4, 3, 3, 5], k = 5)",
        "minOperations(nums = [0, 0, 1, 2, 4, 5, 8, 9, 16], k = 1)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(\"abab\")",
        "longestSemiRepetitiveSubstring(\"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(\"abcdeabcde\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbb\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1,2,3,4,5,6])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1, 2, 2, 3, 4, 4, 4, 5])",
        "sumCounts(nums = [1,2,2,3,3,3,4,4,4,4])",
        "sumCounts(nums = [0, 0, 0, 1, 1, 2])",
        "sumCounts(nums = [0, 1, 2, 2, 1, 0, 1, 1, 1, 2])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s1 = \"ba\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"abc\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"ab\", k = 2)",
        "shortestBeautifulSubstring(s = \"11\", k = 3)",
        "shortestBeautifulSubstring(s1 = \"ba\", k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"abacaba\", k = 2)",
        "shortestBeautifulSubstring(s = \"01\", k = 2)",
        "shortestBeautifulSubstring(s1 = \"ba\", s2 = \"nana\", k = 2)",
        "shortestBeautifulSubstring(\"a\", 3)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"ba\")",
        "minimumBeautifulSubstrings(s = \"aab\")",
        "minimumBeautifulSubstrings(s = \"banana\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(\"abcabcabc\")",
        "minimumBeautifulSubstrings(s = \"abcabcabc\")",
        "minimumBeautifulSubstrings(s = \"abba\")",
        "minimumBeautifulSubstrings(s = \"abcabcabcabc\")",
        "minimumBeautifulSubstrings(\"bab\")"
    ],
    "sample_341": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "longestString(x = 9, y = 8, z = 7)",
        "longestString(x = 2, y = 1, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 10, y = 7, z = 4)",
        "longestString(x = 12, y = 23, z = 0)"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n])",
        "findChampion(grid = [[0, 1], [2, 0]])",
        "findChampion(grid = [\n    [0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0]\n])",
        "findChampion(grid = [\n    [1, 3, 6, 1],\n    [3, 3, 6, 1],\n    [3, 6, 6, 1],\n    [1, 1, 1, 1]\n])",
        "findChampion(grid = [[0, 3, 5], [5, 5, 1], [1, 0, 9]])",
        "findChampion(grid = [[1, 3, 0, 0, 5], [9, 2, 0, 7, 5], [0, 0, 3, 6, 3], [0, 0, 0, 0, 0], [2, 5, 0, 0, 0]])",
        "findChampion(grid = [[5,2,1,0],[4,0,0,1],[0,1,5,2],[0,0,0,0],[2,1,2,2]])",
        "findChampion(grid = [[2, 7, 1, 0, 5, 4],\n                           [3, 4, 2, 6, 7, 9],\n                           [3, 5, 6, 8, 9, 6],\n                           [4, 9, 5, 2, 0, 8],\n                           [4, 3, 1, 0, 9, 8],\n                           [5, 1, 9, 0, 1, 7]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"ab\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"aabb\", k = 2)",
        "beautifulSubstrings(s = \"cbaebabacd\", k = 3)",
        "beautifulSubstrings(s = \"abacabadabacaba\", k = 3)",
        "beautifulSubstrings(s = \"aeiouy\", k = 4)",
        "beautifulSubstrings(s = \"aabbcccc\", k = 3)",
        "beautifulSubstrings(s = \"an\", k = 4)",
        "beautifulSubstrings(s = \"bbaabcccc\", k = 3)"
    ],
    "sample_304": [
        "countSeniors(details = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])",
        "countSeniors(s1 = \"0123456789\", s2 = \"0123456789\")",
        "countSeniors(details = [\"age is 60\", \"age is 55\"])",
        "countSeniors(details = [\"1,000,000\", \"200,000\", \"33,333\"])",
        "countSeniors(details = [\"ab11\", \"11ab\", \"12ab\"])",
        "countSeniors(s1 = \"f55\", s2 = \"39\")",
        "countSeniors(details = [\"1706\", \"1718\", \"1719\", \"1719\", \"1720\", \"1720\", \"1721\", \"1722\"])",
        "countSeniors(details = [\"john-29\", \"jane-34\", \"mike-41\", \"mary-62\"])",
        "countSeniors(details = [\"hello\", \"11/10/2018\", \"hello\", \"17/04/2019\"])",
        "countSeniors(details = [\"age,id\", \"21,12\", \"22,11\", \"23,12\", \"24,12\"])"
    ],
    "sample_240": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [0, 1, 2, 3])",
        "maximumTripletValue(nums = [4, 3, 2, 1])",
        "maximumTripletValue([1, 2, 3, 2, 1])",
        "maximumTripletValue([10, 20, 30, 40])",
        "maximumTripletValue([0, 1, 2, 3, 4])",
        "maximumTripletValue([1, -2, 3, -4, 5])",
        "maximumTripletValue(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5])",
        "maximumTripletValue(nums = [4, 3, 1, 2, 7])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"ba\")",
        "minimumBeautifulSubstrings(s = \"ba\")",
        "minimumBeautifulSubstrings(\"abcabcabc\")",
        "minimumBeautifulSubstrings(s = \"abb\")",
        "minimumBeautifulSubstrings(\"aaaab\")",
        "minimumBeautifulSubstrings(s = \"ababcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbab",
        "minimumBeautifulSubstrings(\"abcb\")",
        "minimumBeautifulSubstrings(\"abcb\")",
        "minimumBeautifulSubstrings(s1 = \"a\", s2 = \"ba\")",
        "minimumBeautifulSubstrings(\"aaaaaaaaaaaaaa\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [0, 0, 0, 0])",
        "maxSubarrays([0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [0,1,0,1,0,1,0,1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays([1, -1, 2, 1, -1])",
        "maxSubarrays(nums = [0,1,0,0,0,0,0])",
        "maxSubarrays(nums = [1,0,0,0,1,0,1,0])",
        "maxSubarrays(nums = [1, 5, 1, 5, 6, 5])"
    ],
    "sample_281": [
        "minOperations(my_list = [3, 2, 1])",
        "minOperations(a = [0, 1, 2], b = [3, 4, 5])",
        "minOperations(a = [1, 2, 3, 5], b = [4, 3, 2, 1])",
        "minOperations(a = [1, 3, 5, 7, 9], b = [1, 3, 5, 7, 9])",
        "minOperations(a = [3, 2, 3], b = [1, 1, 2])",
        "minOperations(a = [3, 2, 5], b = [4, 4, 4])",
        "minOperations(??, [9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "minOperations(a = [4, 2, 9, 1], b = [3, 5, 8, 1])",
        "minOperations(a = [1, 10, 3, 5], b = [5, 2, 6, 1])",
        "minOperations([5,3,1,3,3], [3,1,5,2,3])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"mq\", \"px\", \"zy\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"an\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"pear\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"mq\", \"px\", \"zy\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"ac\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"ana\", \"pq\"])",
        "minimizeConcatenatedLength(words = [\"ban\", \"an\", \"ba\"])"
    ],
    "sample_371": [
        "sortVowels(s1 = \"a\", s2 = \"b\")",
        "sortVowels(\"zyxwvutsrqponmlkjihgfedcba\")",
        "sortVowels(\"moo\")",
        "sortVowels(s1 = \"la\", s2 = \"mp\")",
        "sortVowels(s1 = \"abc\", s2 = \"bcb\")",
        "sortVowels(s1 = 'BA', s2 = 'NANA')",
        "sortVowels(\"hAshaD\")",
        "sortVowels(s = \"Bye, bye, bye bye\")",
        "sortVowels(s1 = \"HeLlOo\", s2 = \"EaLyIo\")",
        "sortVowels(s1 = \"quicci\", s2 = \"hjklmn\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,2,3,3,3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1,2,3,1,2,3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 2, 3, 4, 5, 5, 5])",
        "sumCounts(nums = [4, 4, 4, 2, 2, 4, 4])",
        "sumCounts([1, 2, 2, 2, 2, 3, 3, 4, 5, 5])",
        "sumCounts(nums = [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSum([1,2,3,4])",
        "minimumSum([1, 2, 3])",
        "minimumSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSum(nums = [1, 5, 4, 1, 2])",
        "minimumSum([2,1,5,6,4])",
        "minimumSum([3, 1, 2, 4, 1, 5, 9, 2, 6, 5])",
        "minimumSum(nums = [4, -1, 2, 1, -5])",
        "minimumSum(nums = [1, -5, 2, -6, 3, -4, 6])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1,2,3], [4,5,6], [7,8,9]])",
        "findChampion(grid = [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]])",
        "findChampion(grid = [[\"x\"], [\"x\"], [\"x\"]])",
        "findChampion(grid = [[\"o\", \"o\", \"o\"], [\"o\", \"o\", \"o\"], [\"o\", \"o\", \"o\"]])",
        "findChampion(grid = [\n[0, 0, 0, 0, 0],\n[0, 1, 0, 0, 0],\n[0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 2, 3], [0, 1, 1], [2, 0, 1]])",
        "findChampion(grid = [\n    [0, 0, 0, 0],\n    [0, 0, 1, 0],\n    [0, 1, 1, 0],\n    [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 2, 0], [0, 2, 0], [3, 2, 0]])"
    ],
    "sample_372": [
        "sortVowels(s1 = \"leetcode\")",
        "sortVowels(s1 = 'banana')",
        "sortVowels(s1 = \"banana\")",
        "sortVowels(s = \"banana\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"lEtCeD\")",
        "sortVowels(s1 = \"bAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAiAi",
        "sortVowels(s1 = \"axcbz\")",
        "sortVowels(\"aEeAnAnAnAnaAnaAna\")",
        "sortVowels(s = \"pYtThoEmE\")"
    ],
    "sample_292": [
        "minimumSteps(??)",
        "minimumSteps(\"1101\")",
        "minimumSteps(\"101\")",
        "minimumSteps(s = \"1110\")",
        "minimumSteps(s = \"1211\")",
        "minimumSteps(\"110\")",
        "minimumSteps(s = \"11\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s1 = \"00101\", s2 = \"11010\")",
        "minimumSteps(s1 = \"10101\", s2 = \"1\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [5, 3, 1, 4, 2])",
        "minimumRightShifts(sorted(nums) + [-1])",
        "minimumRightShifts([4, 5, 6, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [3, 4, 1, 2, 5, 0, 1, 3])",
        "minimumRightShifts(nums = [5,3,4,7,3,1])",
        "minimumRightShifts(nums = [3, 1, 2, 1, 0, 5, 6, 4, 7, 6])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minOperations(nums = [3, 1, 2, 4, 3])",
        "minOperations(nums = [3, 1, 3, 1])",
        "minOperations(nums = [6, 7, 8, 9])",
        "minOperations([4,4,4,4,4,4])",
        "minOperations(nums = [1, 4, 1, 4, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [2, 1, 1, 1, 2, 2, 3, 4, 4, 4])",
        "minOperations(nums = [2, 3, 4, 6, 8, 10, 9, 10, 11])"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s1 = \"banana\")",
        "sortVowels(s1 = \"LYMPH\")",
        "sortVowels(\"hello world\")",
        "sortVowels(s = \"leetCode\")",
        "sortVowels(s1 = \"Lypgh\")",
        "sortVowels(s = \"Mississippi\")",
        "sortVowels(s = \"gkc\")",
        "sortVowels(s = \"llbmmnohqq\")",
        "sortVowels(s = 'LmnoPX!j$b#')"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion([[0, 1, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0], [0, 1], [0, 0]])",
        "findChampion([[1,0,0],[0,0,1],[0,0,0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [ [0,1,1], [0,0,0], [0,0,0] ])",
        "findChampion(grid = [[0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 0, 0], [1, 1, 1, 0]])",
        "findChampion(grid = [\n  [1, 0, 0, 1, 0, 0],\n  [0, 0, 0, 0, 1, 0],\n  [0, 0, 0, 1, 0, 0],\n  [1, 1, 0, 1, 0, 0],\n  [0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0]\n])"
    ],
    "sample_267": [
        "minSum([1, 2, 3], [3, 2, 1])",
        "minSum(nums1 = [1,2,3,4], nums2 = [5,6,7,8])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 3])",
        "minSum([1, 2, 3], [5, 4, 6])",
        "minSum([1, 1, 2, 2], [2, 1, 1, 2])",
        "minSum([1,2,3,4,5], [4,2,3,1,5])",
        "minSum([1, -1, 3, -3], [1, 2, -3, 4])",
        "minSum(nums1 = [5,4,3,4,5], nums2 = [1,2,3,4])",
        "minSum(nums1 = [4, 4, 1], nums2 = [4, 3, 0])",
        "minSum(nums1 = [3, -1, 0, -5, 2], nums2 = [0, 3, -2, 2, 1])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7], k = 2)",
        "minOperations(nums = [1, 2, 4, 5, 6], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [3, 4, 5, 6, 1, 2], k = 4)",
        "minOperations(nums = [4, 3, 4, 2], k = 5)",
        "minOperations(s1 = [5, 2, 1, 8, 3], k = 4)",
        "minOperations(nums = [1, 3, 4, 4, 2, 1, 1, 1, 3, 2, 2, 1], k = 4)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [2, 1, 3], moveFrom = [1, 3], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [0,1,2], moveTo = [1,3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [0, 4, 8], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5], moveTo = [2, 4])",
        "relocateMarbles(nums = [3,5,7,8], moveFrom = [0,1], moveTo = [1,2])",
        "relocateMarbles(nums = [1, 3, 5, 6, 7, 9], moveFrom = [2, 4], moveTo = [4, 5])",
        "relocateMarbles(nums = [2,3,1,4,1,2,3], moveFrom = [1,2], moveTo = [5])",
        "relocateMarbles(nums = [3, 1, 2, 2, 1, 2, 1, 2, 3], moveFrom = [2, 1], moveTo = [2, 3])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [2, 4, 5], moveTo = [2, 5, 6])",
        "relocateMarbles(nums = [5, 7, 3, 7, 2, 4, 6, 5], moveFrom = [0, 2], moveTo = [4, 6])"
    ],
    "sample_402": [
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [1,1,1,2,2,2], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 5, k = 2)",
        "maxSum([1,2,3,4,5,6], 3, 2)",
        "maxSum([10, 10, 10], 2, 3)",
        "maxSum(nums = [3, 3, 2, 4], m = 2, k = 2)",
        "maxSum(nums = [1,1,3,4,2], m = 2, k = 2)",
        "maxSum(nums = [0, 4, 3, 2, 5], m = 3, k = 2)",
        "maxSum(nums = [3, 4, 5, 4, 6, 7], m = 4, k = 2)",
        "maxSum(nums = [0,1,2,0,2,0,1], m = 3, k = 1)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"ba\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"zab\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bcd\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"aaa\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"aba\", s2 = \"cab\")",
        "canMakeSubsequence(s1 = \"zb\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"bba\", s2 = \"zaz\")",
        "canMakeSubsequence(s1 = \"ban\", s2 = \"ane\")"
    ],
    "sample_270": [
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 0])",
        "minSum([0, 1], [0, 1, 2])",
        "minSum(nums1 = [1,0], nums2 = [1,0])",
        "minSum(nums1 = [0, 2, 0, 1], nums2 = [1, 0, 1, 2])",
        "minSum(nums1 = [1,0,1,1,1], nums2 = [1,1,0,0,1])",
        "minSum(nums1 = [0, 1, 2, 0], nums2 = [1, 0, 3, 1])",
        "minSum(nums1 = [0, 5, 9], nums2 = [2, 3, 0])",
        "minSum(nums1 = [0, 3, 5, 0, 0, 0], nums2 = [1, 0, 2, 0, 0, 0])",
        "minSum([3, 4, -2, -3, -6], [1, 2, 3])",
        "minSum(nums1 = [0, 2, 1, -3, 4, -5, 5, -3, -2, 4], nums2 = [1, 0, -1, 0, -1, 0, 1, -1, 1, 0])"
    ],
    "sample_435": [
        "lastVisitedIntegers(??)",
        "lastVisitedIntegers(words = [\"previous\", \"visited\", \"integers\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"3\", \"4\"])",
        "lastVisitedIntegers(??)",
        "lastVisitedIntegers(words = [\"prev\", \"mq\", \"px\", \"zy\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"first\", \"last\", \"second\", \"third\"])",
        "lastVisitedIntegers(words = [\"prev\", \"pa\", \"po\", \"pre\", \"pa\", \"po\"])",
        "lastVisitedIntegers(words = [\"previous\", \"2\", \"visited\", \"1\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"3\", \"2\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"12\", \"abc\", \"abdc\"])"
    ],
    "sample_366": [
        "isGood([1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([i + 1 for i in range(len(nums) - 1)])",
        "isGood([1,2,3])",
        "isGood([1,2,3,4])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [])",
        "isGood(sorted(??))",
        "isGood(s1 = [1,2,3,4], s2 = [4,3,2,1])",
        "isGood([0, 2, 2, 4, 4, 6, 7, 8, 9])"
    ],
    "sample_424": [
        "minOperations(nums = [3,3,3,3])",
        "minOperations(nums = [1,1,2])",
        "minOperations(nums = [2,2,2])",
        "minOperations(nums = [2,2,2,3,3,3])",
        "minOperations(nums = [1, 3, 2, 2, 1])",
        "minOperations(nums = [1,2,3,4,5,6,7,8])",
        "minOperations(nums = [1, 1, 1, 1, 0, 0, 0, 0])",
        "minOperations(nums = [1,2,3,3,4,4,5,5,5])",
        "minOperations(nums = [1, 1, 2, 2, 1, 1])",
        "minOperations(nums = [5,3,5,4,4])"
    ],
    "sample_451": [
        "minChanges(\"abab\")",
        "minChanges(s1 = \"abc\", s2 = \"abd\")",
        "minChanges(s1 = \"abcb\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s1 = \"banana\", s2 = \"bana\")",
        "minChanges(s1 = \"aaab\")",
        "minChanges(s1 = \"abcd\", s2 = \"abed\")",
        "minChanges(s = \"abac\")",
        "minChanges(\"mqx\")",
        "minChanges(s = \"abxab\")"
    ],
    "sample_461": [
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 7)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 12, limit = 4)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 9, limit = 2)"
    ],
    "sample_271": [
        "minSum([0,0,0],[0,0,0])",
        "minSum([1,2,3], [4,5,6])",
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [2,3,4,5,6])",
        "minSum([0,1,0,1], [0,1,0,1])",
        "minSum(nums1 = [1,0,0,1], nums2 = [0,0,1,1])",
        "minSum([1,2,3,0],[0,2,3,1])",
        "minSum([1,0,2,0,3,0], [2,0,1,0,0,1])",
        "minSum([0, 2, -5], [1, 0, -5])",
        "minSum(nums1 = [3,1,2,4,5], nums2 = [5,3,1,2])"
    ],
    "sample_406": [
        "minimumRightShifts([])",
        "minimumRightShifts(nums = [3, 2, 1, 3, 2, 1])",
        "minimumRightShifts(nums = [0,1,2,3,4,5,6,7,8])",
        "minimumRightShifts([3,2,1,4,5,6,7])",
        "minimumRightShifts([0, 0, 1, 1, 2])",
        "minimumRightShifts([-1, 1, -2])",
        "minimumRightShifts(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [3, 4, 1, 2, 5, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 2, 2, 2, 2, 3, 3, 3])",
        "minimumRightShifts(nums = [7,9,7,9,7,9])"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(nums = [1,2,3,4,5,6], t = 7)",
        "countPairs(nums = [1, 2, 3, 4], t = 6)",
        "countPairs(nums = [1,2,3,4,5,6], t = 10)",
        "countPairs(nums = [1,5,2,3,4], t = 7)",
        "countPairs(nums = [1,2,1,3,3], t = 6)",
        "countPairs(nums = [3,1,4,1,5,9,2,6,5,3,5], t = 8)",
        "countPairs(nums = [1,2,4,3,2,2], t = 6)",
        "countPairs([3,4,5,8], 10)",
        "countPairs([4,2,7,1,5], 9)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])",
        "lastVisitedIntegers(s1 = \"ba\", s2 = \"nana\")",
        "lastVisitedIntegers(words = [\"apple\", \"banana\", \"orange\", \"pear\"])",
        "lastVisitedIntegers(words = [\"pale\", \"light\", \"blue\"])",
        "lastVisitedIntegers([\"p\", \"b\", \"a\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"])",
        "lastVisitedIntegers(words = [\"apple\", \"banana\", \"pineapple\", \"apricot\"])",
        "lastVisitedIntegers(words = [\"pq\", \"px\", \"p\", \"q\"])",
        "lastVisitedIntegers(words = [\"hello\", \"world\", \"python\", \"you\", \"algorithms\"])",
        "lastVisitedIntegers(words = [\"ab\",\"pq\",\"xy\",\"dc\",\"db\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"abcde\")",
        "canMakeSubsequence(s1 = \"zab\", s2 = \"abc\")",
        "canMakeSubsequence(str1 = \"baz\", str2 = \"zab\")",
        "canMakeSubsequence(\"abc\", \"ab\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"zenana\")",
        "canMakeSubsequence(str1 = \"zaz\", str2 = \"za\")",
        "canMakeSubsequence(s1 = \"zyx\", s2 = \"xyza\")",
        "canMakeSubsequence(str1 = \"abca\", str2 = \"abcabc\")"
    ],
    "sample_268": [
        "minSum([0, 0, 0], [0, 0, 0])",
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 0, 0], nums2 = [0, 1, 0])",
        "minSum(nums1 = [0, 0, 0, 0, 1], nums2 = [0, 0, 1, 1, 0])",
        "minSum([1,0,1,0,1], [0,0,1,0,1])",
        "minSum([1,2,3],[5,6,7])",
        "minSum([4, 1, 1], [1, 2, 3])",
        "minSum([-1, 0, 2, 0], [0, -1, 2, -1])",
        "minSum(nums1 = [3, 0, 1, 5], nums2 = [1, 0, 1, 9])",
        "minSum([2,4,5], [2,0,0,0,3,4])"
    ],
    "sample_416": [
        "countPairs(coordinates = [(0, 0), (0, 1), (1, 0), (1, 1)], k = 2)",
        "countPairs(coordinates = [\n    [0, 0],\n    [0, 1],\n    [1, 0],\n    [1, 1],\n], k = 2)",
        "countPairs(coordinates = [\n    [0, 0],\n    [0, 1],\n    [1, 0],\n    [1, 1],\n], k = 1)",
        "countPairs(coordinates = [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2)], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 0]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4]], k = 3)",
        "countPairs([[0, 0], [0, 1], [1, 0], [1, 1], [0, 2], [2, 0], [2, 1], [1, 2], [2, 2]], 2)",
        "countPairs(coordinates = [[\"x\", \"y\"], [\"x\", \"x\"], [\"x\", \"x\"], [\"y\", \"y\"]], k = 2)",
        "countPairs(coordinates = [\n    [1, 0], [1, 1], [0, 1], [1, 0], [0, 0]\n], k = 3)",
        "countPairs(coordinates = [[\"mq\", \"px\"], [\"px\", \"z\"], [\"zy\", \"xy\"]], k = 1)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"cba\", \"bacd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ba\", \"ab\", \"ba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"racecar\", \"civic\", \"civic\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abba\", \"aba\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"abc\", \"abba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"bca\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"abba\", \"caba\"])",
        "maximumNumberOfStringPairs(words = [\"kitten\", \"sitting\", \"bitten\"])"
    ],
    "sample_321": [
        "maxStrength([1, -2, 3, -4, 5])",
        "maxStrength([-3, -2, -1, 0, 1, 2, 3])",
        "maxStrength(nums = [1, -2, 3])",
        "maxStrength(nums = [5, 2, -1, 4])",
        "maxStrength(nums = [2, 0, 1])",
        "maxStrength(nums = [2, -1, 2, -3, 4])",
        "maxStrength([4, 5, 3, 6])",
        "maxStrength([3, -2, -1, 5, -7])",
        "maxStrength(nums = [3, -1, -2, 3, 4, -1, -5])",
        "maxStrength(nums = [4, 2, 5, 6, 1, 8, 7, 3])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1, 10, 5])",
        "minimumCoins(prices = [2, 1, 5, 8, 4])",
        "minimumCoins(prices = [20,10,5,2])",
        "minimumCoins(prices = [1, 3, 5, 4, 6])",
        "minimumCoins(prices = [6, 3, 2, 4, 1])",
        "minimumCoins(prices = [3, 3, 5, 6, 10])",
        "minimumCoins(prices = [1,2,5,9,11])",
        "minimumCoins(prices = [1, 5, 10, 4, 8, 3])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 2])",
        "minLengthAfterRemovals([1,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3])",
        "minLengthAfterRemovals([1,2,3,3,3])",
        "minLengthAfterRemovals([1, 2, 2, 3, 4, 4, 4, 5])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,3,3,4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 1, 4])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [10, 20, 30, 40], money = 50)",
        "buyChoco(prices = [10, 20, 30], money = 50)",
        "buyChoco(prices = [3, 1, 4, 2], money = 7)",
        "buyChoco(prices = [1,2,3,4,5,6,7,8], money = 10)",
        "buyChoco(prices = [10, 5, 1], money = 10)",
        "buyChoco(prices = [3,5,1,2,2], money = 10)",
        "buyChoco(prices = [5, 1, 6, 7], money = 14)",
        "buyChoco(prices = [12, 6, 3], money = 50)"
    ],
    "sample_436": [
        "lastVisitedIntegers(??)",
        "lastVisitedIntegers(words = [\"prev\", \"cur\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"mq\", \"px\", \"zy\"])",
        "lastVisitedIntegers(words = [\"prev\", \"visit\", \"prev\", \"visit\", \"visit\"])",
        "lastVisitedIntegers(words = [\"prev\", \"cnt\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"a\", \"prev\", \"b\", \"prev\", \"c\"])",
        "lastVisitedIntegers(s1 = \"0\", s2 = \"1\", s3 = \"2\")",
        "lastVisitedIntegers(words = [\"prev\", \"this\", \"is\", \"some\", \"text\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"4\", \"5\", \"prev\", \"6\", \"7\"])",
        "lastVisitedIntegers(words = [\"previous\", \"prev\", \"prev\", \"prev\", \"prev\", \"previous\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 1])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5])",
        "sumCounts(nums = [0,0,0,0,0,1,1,1,1])",
        "sumCounts(nums = [4,2,1,1,2,4])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1, 2], moveTo = [3, 4, 5])",
        "relocateMarbles(moveFrom = [5, 6, 8], moveTo = [9, 8, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [3, 4], moveTo = [1, 2])",
        "relocateMarbles(nums = [5, 6, 8, 9, 11, 12], moveFrom = [0, 1], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 5], moveTo = [4, 6])",
        "relocateMarbles(nums = [5, 8, 9, 6, 7], moveFrom = [0, 2, 4], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [5, 4, 3, 2, 1, 6, 7, 8, 9], moveFrom = [0, 2, 6, 8], moveTo = [1, 5, 7])",
        "relocateMarbles(nums = [2, 3, 1, 4, 5, 6], moveFrom = [3, 2], moveTo = [6, 4])",
        "relocateMarbles(moveFrom = [2, 5], moveTo = [1, 3], nums = [1, 4, 5, 6, 3, 2, 4])",
        "relocateMarbles(nums = [4, 3, 3, 4, 2, 3, 4, 5, 5, 4], moveFrom = [1, 3, 6, 7], moveTo = [2, 5, 8, 9])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"banana\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abdc\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"abcda\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"abcabc\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"mango\", \"kiwi\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"bat\", \"cat\"], x = \"an\")",
        "findWordsContaining(words = [\"ab\", \"cd\", \"ef\", \"gh\"], x = \"cd\")",
        "findWordsContaining(words = [\"banana\", \"an\", \"nana\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pink\"], x = \"nana\")",
        "findWordsContaining(words = [\"ba\", \"an\", \"a\"], x = \"b\")",
        "findWordsContaining(words = [\"banana\", \"anana\", \"mang\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cav\"], x = \"an\")",
        "findWordsContaining(words = [\"bam\", \"lama\", \"tam\", \"nya\"], x = \"lama\")"
    ],
    "sample_311": [
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[0,0,0], [0,0,0], [0,0,0]])",
        "matrixSum(matrix = [\n    [1, 2],\n    [3, 4]\n])",
        "matrixSum([[2, 3], [1, 2]])",
        "matrixSum(nums = [[1, 2, 3], [0, 5, 3], [1, 2, 3]])",
        "matrixSum(nums = [[\"a\",\"b\",\"c\",\"d\"],[\"a\",\"b\",\"c\",\"d\"],[\"a\",\"b\",\"c\",\"d\"]])",
        "matrixSum(nums = [[2, 1, 0], [0, 2, -1], [-1, -2, -2]])",
        "matrixSum([[2, 7, 9], [4, 8, 9], [5, 6, 7]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [10, 20, 30], money = 100)",
        "buyChoco(a = [1, 2, 3], money = 8)",
        "buyChoco(a = [3, 1, 2], money = 5)",
        "buyChoco(a = [1, 1, 3], money = 4)",
        "buyChoco(a = [100, 200], money = 400)",
        "buyChoco(a = [2,1,3], money = 5)",
        "buyChoco(a = [1, 5, 3, 2], money = 10)",
        "buyChoco(a = [2, 10, 3, 4, 1], money = 12)",
        "buyChoco(a = [9,2,4,6], money = 10)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment([1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [4, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [5, 6, 7, 8])",
        "minGroupsForValidAssignment(nums = [0, 1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 3, 2, 4, 1, 5])",
        "minGroupsForValidAssignment(nums = [4, 1, 6, 3, 5])",
        "minGroupsForValidAssignment(nums = [1, 3, 5, 2, 2, 5])"
    ],
    "sample_404": [
        "minimumRightShifts([1,2,3,4])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [0, 0, 1, 2, 3])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5, 6])",
        "minimumRightShifts([1, 3, 5, 7, 9, 11])",
        "minimumRightShifts([3, 2, 1, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 3, 4, 5, 5, 5, 5])",
        "minimumRightShifts([3, 4, 1, 2, 3, 2])",
        "minimumRightShifts(nums = [5, 3, 7, 2, 1, 6])",
        "minimumRightShifts(nums = [0, 1, 1, 2, 3, 4, 5, 5, 5])"
    ],
    "sample_320": [
        "maxStrength([1, 2, 3])",
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength([1, 2, 3, 4])",
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength([1, 2, 3, 4, 5, 6])",
        "maxStrength(nums = [1,2,3,4])",
        "maxStrength([1, 2, 3, 4])",
        "maxStrength([4, 5, 6, 7])",
        "maxStrength([3, 5, 1, 9])",
        "maxStrength(nums = [10, 5, 1, 2, 3, 6, 9])"
    ],
    "sample_464": [
        "distributeCandies(n = 3, limit = 4)",
        "distributeCandies(n = 5, limit = 6)",
        "distributeCandies(n = 3, limit = 6)",
        "distributeCandies(n = 5, limit = 7)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 7, limit = 10)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 5, limit = 5)",
        "distributeCandies(n = 9, limit = 15)",
        "distributeCandies(n = 5, limit = 7)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals([1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [0, 1, 2, 3, 2, 1, 0])",
        "minLengthAfterRemovals(nums = [0,1,2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,3,3,4,5,6,7,7,7])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"avocado\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"apple\"], x = \"o\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"kiwi\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"bana\", \"banana\"], x = \"a\")",
        "findWordsContaining(s1 = [\"cat\", \"bat\"], x = \"at\")",
        "findWordsContaining(words = [\"a\", \"banana\", \"cat\", \"dog\"], x = \"an\")",
        "findWordsContaining(words = [\"Hello\", \"World\", \"Python\"], x = \"l\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"carrot\"], x = \"an\")",
        "findWordsContaining(words = [\"coffee\", \"tea\", \"orange\", \"apple\"], x = \"ea\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1,0,1],[1,0,1],[1,0,1]])",
        "findChampion(grid = [[0, 1, 2], [1, 2, 3], [2, 3, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 1, 1]])",
        "findChampion([[2, 3], [1, 4]])",
        "findChampion(grid = [[0,0,0],[1,1,0],[1,1,0]])",
        "findChampion(grid = [[0, 0, 1, 1], [0, 1, 0, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1,1,0,0], [1,1,0,0], [0,0,0,1], [0,0,0,1]])",
        "findChampion(grid = [\n    [1, 0, 1, 1],\n    [1, 0, 1, 1],\n    [1, 0, 1, 1],\n    [1, 1, 1, 0],\n])",
        "findChampion(grid = [[2,4,6], [4,6,4], [4,6,4]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays([1,2,3,4])",
        "maxSubarrays([1,2,3,4])",
        "maxSubarrays([1, 2, 3])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8])",
        "maxSubarrays(nums = [1,2,3,0,0,0,1])",
        "maxSubarrays(nums = [-4, -2, -1, 1, 2, 3])",
        "maxSubarrays(nums = [6,2,3,4,6])",
        "maxSubarrays(nums = [3, 5, 4, 2, 1, 3, 4])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 3)",
        "beautifulSubstrings(s = \"abab\", k = 4)",
        "beautifulSubstrings(s = \"abracadabra\", k = 5)",
        "beautifulSubstrings(\"abba\", 2)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(\"apple\", 3)",
        "beautifulSubstrings(s1 = \"abacaba\", k = 2)",
        "beautifulSubstrings(s = \"aaab\", k = 2)",
        "beautifulSubstrings(s1 = \"papaya\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4])",
        "minimumSeconds(nums = [4, 3, 2, 1, 5])",
        "minimumSeconds(nums = [1, 1, 2, 2])",
        "minimumSeconds(nums = [0, 2, 1, 4, 3, 5])",
        "minimumSeconds([1,2,3,3,4,4,5,5])",
        "minimumSeconds(nums = [1, 5, 2, 7, 1, 4, 3])",
        "minimumSeconds([1, 3, 3, 4, 3, 6])"
    ],
    "sample_327": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 9)",
        "isFascinating(n = 9)",
        "isFascinating(n = 1)",
        "isFascinating(n = 0)",
        "isFascinating(n = 2)",
        "isFascinating(n = 10)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 333)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1,2,2,3], target = 3)",
        "lengthOfLongestSubsequence(nums = [2, 1, 3, 4, 2], target = 5)",
        "lengthOfLongestSubsequence([3,1,4,2], 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 1, 3, 2, 1, 2], target = 5)",
        "lengthOfLongestSubsequence(nums = [3, 5, 8, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 1, 4, 2, 5, 2, 3, 6], target = 9)",
        "lengthOfLongestSubsequence(nums = [4, 3, 2, 5, 1, 2], target = 4)",
        "lengthOfLongestSubsequence(nums = [6, 5, 3, 2, 4, 1], target = 4)",
        "lengthOfLongestSubsequence(nums = [3, 3, 4, 4, 5, 5, 6, 6], target = 8)",
        "lengthOfLongestSubsequence(nums = [2, 4, 1, 6, 2], target = 10)"
    ],
    "sample_309": [
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6]])",
        "matrixSum([[1,3], [2,4]])",
        "matrixSum([[1, 3, 2], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1,2,3,4], [5, 6, 7, 8], [9,10,11,12]])",
        "matrixSum(nums = [[1, 3, 5], [9, 11, 13], [17, 19, 21]])",
        "matrixSum(nums = [[0, 2, 1], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,3,5,7,9], [2,4,6,8,10], [11,13,15,17,19]])",
        "matrixSum([[1, 3], [1, 4], [1, 2], [3, 2], [2, 1]])"
    ],
    "sample_326": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 9)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 0)",
        "isFascinating(n = 3)",
        "isFascinating(n = 24)",
        "isFascinating(n = 3)",
        "isFascinating(n = 10001)",
        "isFascinating(n = 2020)",
        "isFascinating(n = 1212121212121212)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 0, 0], [0, 2, 0], [0, 0, 0]])",
        "findChampion(grid = [[\"0\"], [\"0\"], [\"0\"]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0,0,0],[0,0,1],[0,0,0]])",
        "findChampion(grid = [[\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[\"banana\", \"banana\", \"banana\"], [\"banana\", \"banana\", \"banana\"], [\"banana\", \"banana\", \"banana\"]])",
        "findChampion([[3, 0, 0, 0, 0],\n                    [0, 1, 0, 0, 0],\n                    [0, 0, 1, 0, 0],\n                    [0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0]])",
        "findChampion(grid = [ [1,1,1], [1,2,3], [0,1,0] ])",
        "findChampion(grid = [[\"b\",\"e\",\"e\"],[\"c\",\"c\",\"c\"],[\"a\",\"a\",\"a\"]])"
    ],
    "sample_260": [
        "minimumSum([1, 2, 3])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum([1, 2, 3])",
        "minimumSum([1, 2, 3, 4, 5, 6, 7])",
        "minimumSum([0,0,0,0,0])",
        "minimumSum([3,1,4,2])",
        "minimumSum([3,4,1,2])",
        "minimumSum([5,10,3,2,8])",
        "minimumSum([4, 5, 1, 5, 3])"
    ],
    "sample_450": [
        "minChanges(\"abab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s1 = \"ba\", s2 = \"nana\")",
        "minChanges(\"abcdd\")",
        "minChanges(s1 = \"baba\")",
        "minChanges(s1 = \"caba\")",
        "minChanges(s1 = \"abcbcdab\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 5)",
        "minOperations(s1 = \"ba\", s2 = \"nana\", x = 4)",
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"nn\", x = 3)",
        "minOperations(s1 = \"ba\", s2 = \"ba\", x = 3)",
        "minOperations(s1 = \"001\", s2 = \"101\", x = 2)",
        "minOperations(\"ab\", \"ab\", 0)",
        "minOperations(s1 = \"11\", s2 = \"11\", x = 0)",
        "minOperations(s1 = \"ab\", s2 = \"bb\", x = 5)",
        "minOperations(s1 = \"bba\", s2 = \"nnn\", x = 7)"
    ],
    "sample_342": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 4, y = 3, z = 2)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 7, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 10, y = 10, z = 5)",
        "longestString(x = 10, y = 15, z = 7)",
        "longestString(x = 8, y = 5, z = 4)",
        "longestString(x = \"abcd\", y = \"1234\", z = \"asdf\")"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays([1, 2, 3, 4])",
        "maxSubarrays([1, 2, 3, 1])",
        "maxSubarrays(nums = [1, 2, 2, 3, 3])",
        "maxSubarrays(nums = [9,9,9])",
        "maxSubarrays(nums = [5, 3, 1, 2, 4])",
        "maxSubarrays(nums = [1, 5, 1, 1, 1])",
        "maxSubarrays([0, 0, 1, 2, 5, 8])",
        "maxSubarrays(nums = [3,4,1,3,5,2,2,1])",
        "maxSubarrays(nums = [10,4,10,4,1,1])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John\", \"55\", \"Bob\", \"68\"])",
        "countSeniors(details = [\"I am 55\", \"I am 60\", \"I am 61\"])",
        "countSeniors(details = [\"69 years old\", \"32 years old\", \"21 years old\"])",
        "countSeniors(details = [\"My name is John\", \"I am 45 years old\", \"I will be 60 years old\"])",
        "countSeniors(details = [\"James\", \"32\", \"Peter\", \"57\"])",
        "countSeniors(details = [\"00011234\", \"23456789\", \"567890\"])",
        "countSeniors(details = [\"John is 65\", \"Susan is 65\", \"Paul is 70\"])",
        "countSeniors(details = [\"John is 55\", \"Emma is 59\", \"Tom is 68\"])",
        "countSeniors(details = [\"mqnkdjk\", \"nkjsdjk\", \"jkqnkjj\"])",
        "countSeniors(s1 = \"movda\", s2 = \"mwjk\", s3 = \"dzae\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [0,0,1])",
        "maxSubarrays(nums = [1, -3, 2, -1, 1])",
        "maxSubarrays([-4, -2, -1])",
        "maxSubarrays(nums = [4, 4, 3, 3, 2, 1])",
        "maxSubarrays(nums = [2, -5, 1, -10, 4])",
        "maxSubarrays([5,1,3,5,4,8,5])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 3], moveTo = [2])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [2, 3], moveTo = [1, 0])",
        "relocateMarbles(nums = [5, 6, 8, 9, 2, 3, 1], moveFrom = [0, 1], moveTo = [2, 3])",
        "relocateMarbles(nums = [3, 5, 6, 9], moveFrom = [2, 0], moveTo = [1, 3])",
        "relocateMarbles(nums = [5, 6, 8, 9, 2, 1, 3, 4, 7], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 5, 5, 5, 5, 5], moveFrom = [0, 1, 3, 4], moveTo = [1, 2, 3, 5])",
        "relocateMarbles(nums = [5, 8, 9, 6, 3, 4], moveFrom = [2, 3], moveTo = [1, 0])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [4, 1, 3], moveTo = [2, 5, 8])",
        "relocateMarbles(nums = [2, 4, 5, 6, 8], moveFrom = [2, 4, 8], moveTo = [6, 8, 5])"
    ],
    "sample_286": [
        "findMinimumOperations(\"abc\", \"abc\", \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"aa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(\"abc\", \"bcd\", \"cde\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(\"ba\", \"bab\", \"baba\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"anana\", s3 = \"bba\")",
        "findMinimumOperations(\"A\", \"A\", \"A\")",
        "findMinimumOperations(s1 = \"abba\", s2 = \"ababab\", s3 = \"aaaaaaaa\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals([])",
        "minLengthAfterRemovals([2,1,2])",
        "minLengthAfterRemovals(nums = [1,2,3,3,4])",
        "minLengthAfterRemovals(nums = [1,2,1,3,4,2])",
        "minLengthAfterRemovals(nums = [0,1,2,2,2,3])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [3,4,3,3,4,4])",
        "minLengthAfterRemovals([2,2,3,1,3,4])",
        "minLengthAfterRemovals(nums = [1,1,2,3,3,3,4,4,5,5,5,5])",
        "minLengthAfterRemovals([3,3,4,1,5,5])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 4]])",
        "maximizeTheProfit(n = 3, offers = [(1, 2, 3), (4, 5, 6), (7, 8, 9)])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 5], [2, 4, 6], [7, 8, 9]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 3], [2, 3, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [2, 1, 3], [2, 2, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 1, 3], [1, 1, 4], [2, 2, 3]])",
        "maximizeTheProfit(n = 5, offers = [\n    [0, 3, 2],\n    [1, 3, 1],\n    [2, 3, 2],\n    [3, 3, 2],\n    [4, 3, 2],\n])",
        "maximizeTheProfit(n = 4, offers = [\n    [1, 2, 3],\n    [1, 3, 4],\n    [2, 3, 4],\n    [3, 4, 5],\n])",
        "maximizeTheProfit(n = 3, offers = [(0, 3, 5), (0, 4, 10), (2, 6, 12)])",
        "maximizeTheProfit(n = 5, offers = [\n    [1, 2, 3],\n    [1, 2, 4],\n    [1, 3, 1],\n    [1, 4, 2],\n    [2, 3, 3],\n    [2, 4, 3],\n    [3, 4, 4],\n])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1,1,1,1], m = 2)",
        "canSplitArray(nums = [0,1,2,3,4], m = 3)",
        "canSplitArray(nums = [10, 20, 30], m = 10)",
        "canSplitArray(nums = [1, 3, 5, 7, 9], m = 2)",
        "canSplitArray(nums = [1,3,6], m = 2)",
        "canSplitArray(nums = [3,3,4,2], m = 4)",
        "canSplitArray(nums = [2,5,10], m = 8)",
        "canSplitArray(nums = [5,5,5,5,5,5,5,5,5], m = 10)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray([1, 2, 3, 4, 5], 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "checkArray(nums = [1, 3, 4], k = 2)",
        "checkArray([1, 4, 5], 3)",
        "checkArray(nums = [2, 6, 4, 5, 1, 3], k = 3)",
        "checkArray([3, 4, 5, 4, 2], 5)",
        "checkArray(nums = [-1, 1, 2, -3, 4, 5, -6, 7], k = 1)",
        "checkArray(nums = [3,1,2,5,0,8,4,0,1], k = 3)",
        "checkArray([1,2,4,8,9,9,10,11,13], 3)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 6, 8], k = 3)",
        "maximumBeauty(nums = [3, 2, 4, 2, 4, 2], k = 2)",
        "maximumBeauty(nums = [1, 0, 1, 1, 1, 1], k = 2)",
        "maximumBeauty(nums = [2, 5, 1, 5, 6, 2], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 5, 7, 9, 11, 12], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 8, 9, 10, 20, 30, 40, 50, 100, 200, 400, 600, 1000], k = 8)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"this\", \"is\", \"a\", \"sentence\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello world\", \"how are you\", \"good morning\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"abcd\", \"e\", \"fgh\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"ab-c-d-e\", \"f-g-h-i\", \"j-k-l-m\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"abracadabra\", \"na\", \"r\"], separator = \"a\")"
    ],
    "sample_226": [
        "countWays(nums = [1,2,3])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0, 1, 0, 0])",
        "countWays(nums = [1, 2, 3, 3, 4, 4, 4])",
        "countWays(s1 = [1, 2, 3, 4, 5])",
        "countWays(nums = [2,1,3,4])",
        "countWays(nums = [5, 5, 1, 2])",
        "countWays(nums = [4, 6, 7, 5, 2])",
        "countWays(nums = [2,5,10,13,15])",
        "countWays(nums = [3, 3, 3, 1, 1, 1, 5, 5])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,3,4,5,6])",
        "minimumIndex(nums = [1,1,1,2,2,2,2,2,3,3,3,3])",
        "minimumIndex(nums = [3,2,4,4,3,2,3])",
        "minimumIndex(nums = [2,1,2,4,2,3])",
        "minimumIndex(nums = [2,3,2,4,1,5,1])",
        "minimumIndex([0,1,2,0,0,1,1,0,1,0])",
        "minimumIndex([3,4,3,2,2,1,1,1,2,2,3])",
        "minimumIndex(my_list = [5,2,2,1,2,5,5,5])",
        "minimumIndex(nums = [3, 2, 4, 6, 5, 7, 8, 2, 1])",
        "minimumIndex(nums = [4,2,6,3,6,9,3,9,1])"
    ],
    "sample_215": [
        "numberOfPoints(??)",
        "numberOfPoints([[1,2],[3,4]])",
        "numberOfPoints([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "numberOfPoints(nums = [[1,2], [2,3], [3,4], [4,5], [5,6], [6,7], [7,8]])",
        "numberOfPoints([[1,1], [2,2], [1,2]])",
        "numberOfPoints(nums = [[1, 4], [3, 6], [2, 5]])",
        "numberOfPoints(nums = [[0,1],[1,3],[2,3]])",
        "numberOfPoints(nums = [[2,3], [4,2], [2,1]])",
        "numberOfPoints([[0, 3], [1, 3], [2, 1], [2, 4]])",
        "numberOfPoints(nums = [[\"l\",\"e\"], [\"m\",\"a\"], [\"q\",\"n\"], [\"n\",\"a\"], [\"f\",\"l\"], [\"a\",\"s\"], [\"m\",\"e\"]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation([1,2,3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [0,1,2,3])",
        "semiOrderedPermutation([0,1,2])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2,1,3,2])",
        "semiOrderedPermutation(s1 = [1, 2, 3, 4], s2 = [5, 6, 7, 8])",
        "semiOrderedPermutation(s1 = [3,2,1], s2 = [4,2,1])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 10, target = 9)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 6, target = 13)",
        "minimumPossibleSum(n = 5, target = 13)",
        "minimumPossibleSum(n = 0, target = 0)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 4, 1])",
        "minimumIndex(nums = [1, 2, 3, 2, 2, 4])",
        "minimumIndex(nums = [2, 2, 4, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 4, 4, 4, 5, 5])",
        "minimumIndex(nums = [4,1,1,2,4,4])",
        "minimumIndex(nums = [2, 4, 7, 8, 10, 12, 15])",
        "minimumIndex(nums = [5,3,2,2,2,2,2,2,2,1])",
        "minimumIndex(nums = [1, 2, 2, 4, 4, 4, 5, 6, 7, 9, 9])"
    ],
    "sample_176": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 7, k = 3)",
        "minimumSum(n = 6, k = 3)",
        "minimumSum(n = 12, k = 5)",
        "minimumSum(n = 100, k = 7)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints([[1,2], [2,3], [3,4]])",
        "numberOfPoints(nums = [[0, 2], [2, 4], [4, 6], [6, 8]])",
        "numberOfPoints([[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [??, ??, ??, ??, ??, ??, ??])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [6, 9]])",
        "numberOfPoints(nums = [[0, 1], [0, 2], [0, 3], [0, 4], [1, 5]])",
        "numberOfPoints(nums = [[0,1],[1,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[0, 0], [3, 0], [4, 0]])",
        "numberOfPoints([[0, 3], [1, 5], [2, 6], [3, 7], [4, 10], [5, 11], [6, 12]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "maximumJumps([2, 1, 1, 4], 2)",
        "maximumJumps(nums = [5, 2, 1, 5, 3], target = 2)",
        "maximumJumps(nums = [1, 2, 1, 1, 2, 3, 3, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 1, 2, 4, 3, 1], target = 5)",
        "maximumJumps([2,1,1,2,1,4], 2)",
        "maximumJumps(nums = [1, 2, 3, 1, 0, 0, 4, 1, 1], target = 3)",
        "maximumJumps([1, 2, 3, 1, 2, 4, 5, 6, 7], 3)",
        "maximumJumps(nums = [1, 4, 1, 1, 3, 2, 0, 1, 2], target = 3)",
        "maximumJumps(nums = [0, 3, 5, 2, 5, 8, 4, 3], target = 5)"
    ],
    "sample_173": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 10, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(k = 3, n = 10)",
        "minimumSum(k = 3, n = 6)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5], m = 4)",
        "canSplitArray(nums = [0,1,2,3], m = 4)",
        "canSplitArray(nums = [2, 3, 5], m = 5)",
        "canSplitArray(nums = [1,3,4,3,7], m = 6)",
        "canSplitArray(nums = [1,5,2,3,4,2], m = 12)",
        "canSplitArray(nums = [2,4,5,6,8,10,11,12,13,14], m = 13)",
        "canSplitArray(nums = [2,4,7,2,2,2,9], m = 10)",
        "canSplitArray(nums = [4,8,10,11,13,18,19], m = 11)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [1, 3, 2], [2, 3, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 6], [3, 6, 7]])",
        "maximizeTheProfit(n = 10, offers = [[5,3,4],[2,4,7]])",
        "maximizeTheProfit(n = 100, offers = [[10, 20, 30], [5, 10, 15], [10, 20, 30], [10, 20, 30]])",
        "maximizeTheProfit(n = 3, offers = [[2, 5, 10], [1, 7, 20], [6, 10, 30]])",
        "maximizeTheProfit(n = 5, offers = [[0, 4, 4], [1, 2, 3], [2, 3, 3], [3, 4, 2], [4, 0, 0]])",
        "maximizeTheProfit(n = 7, offers = [[4, 2, 9], [3, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 1], [1, 5, 10], [10, 1, 1], [10, 1, 10], [10, 10, 1]])",
        "maximizeTheProfit(n = 6, offers = [[3, 3, 3], [1, 1, 2], [5, 5, 5], [2, 5, 4], [3, 6, 3], [5, 6, 6]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [0, 0, 0, 0], k = 3)",
        "checkArray(nums = [1,2,3], k = 3)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [1, -1, -3, 4], k = 2)",
        "checkArray(nums = [3,5,3,3,4], k = 4)",
        "checkArray(nums = [4, 2, 0, 4, 2, 1], k = 2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,3,3,3,4,4,4,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,3,4,3], k = 2)",
        "longestEqualSubarray(nums = [3,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,1,4,2], k = 3)",
        "longestEqualSubarray(nums = [3, 1, 4, 2, 2, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [10, 2, 20, 6], k = 2)",
        "longestEqualSubarray(nums = [0, 2, 1, 1, 2, 0, 2, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [4, 7, 6, 8, 4, 6, 4, 6, 7], k = 2)"
    ],
    "sample_8": [
        "colorTheArray(n = 5, queries = [[1, 0], [2, 0], [3, 0]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 0], [1, 1], [1, 0], [1, 1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [0, 0], [1, 0], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1, 0], [2, 0, 2], [2, 1, 2]])",
        "colorTheArray(n = 10, queries = [[1, 0], [3, 0], [2, 1], [0, 2]])",
        "colorTheArray(n = 6, queries = [[0, 0], [1, 1], [1, 1], [1, 0], [0, 0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1,1], [0,1], [0,0], [2,1], [3,0]])",
        "colorTheArray(n = 3, queries = [[1,0],[2,1],[1,2],[0,1],[0,2],[1,2],[2,2]])"
    ],
    "sample_55": [
        "smallestString(s1 = \"abcd\")",
        "smallestString(s1 = \"a\", s2 = \"b\")",
        "smallestString(\"aabcd\")",
        "smallestString(\"kddzbd\")",
        "smallestString(\"abcd\")",
        "smallestString(s1 = 'abbc')",
        "smallestString(\"hello\")",
        "smallestString('abca')",
        "smallestString(s1 = \"aardvark\")",
        "smallestString(s1 = \"aaabd\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 3)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5], 3)",
        "longestAlternatingSubarray(nums = [10,20,30,40,50,60], threshold = 3)",
        "longestAlternatingSubarray([1, 2, 4, 8, 16, 32, 64, 128], 8)",
        "longestAlternatingSubarray(nums = [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], threshold = 1)",
        "longestAlternatingSubarray(nums = [3, 1, 2, 4, 2, 5, 1, 1, 6, 3], threshold = 6)",
        "longestAlternatingSubarray([1,2,4,6,8,9,12,14,15,16], 5)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 5)",
        "longestAlternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,4,3,2,1], threshold = 2)",
        "longestAlternatingSubarray(nums = [9, 10, 11], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 3, 3, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,3,2,5,7,6,9,4], threshold = 2)",
        "longestAlternatingSubarray(nums = [4,2,6,7,3,1,5,9,8], threshold = 2)",
        "longestAlternatingSubarray([-1, -2, 2, 3, -4, 4, -5], 1)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 7, 4, 9, 6, 3, 2], threshold = 6)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 4, 3])",
        "distinctDifferenceArray([0, 0, 0, 0, 0])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4, 5, 5, 5])",
        "distinctDifferenceArray(nums = [1,2,3,2,1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 5, 6, 7, 8, 9, 10])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [2, 3, 5, 6, 1, 2, 8])"
    ],
    "sample_22": [
        "minLength(s1 = \"AB\", s2 = \"CD\")",
        "minLength(s1 = \"AB\", s2 = \"CD\")",
        "minLength(s1 = \"AB\", s2 = \"CD\")",
        "minLength(s1 = \"AB\", s2 = \"CD\")",
        "minLength(\"aab\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"abc\")",
        "minLength(s = \"abc\")",
        "minLength(\"abcde\")",
        "minLength(s = \"BCD\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(\"banana\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(\"abcd\")",
        "minimumCost(s = \"abcb\")",
        "minimumCost(s = \"\")",
        "minimumCost(s = \"baab\")",
        "minimumCost(\"bba\")",
        "minimumCost(\"abcbde\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7], m = 12)",
        "canSplitArray(nums = [1, 3, 5, 6], m = 9)",
        "canSplitArray(nums = [1,2,3,4,5,6,7], m = 12)",
        "canSplitArray(nums = [3, 6, 9], m = 10)",
        "canSplitArray(nums = [4, 1, 2], m = 3)",
        "canSplitArray(nums = [2, 1, 3, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 4, 7, 8], m = 5)",
        "canSplitArray(nums = [3, 1, 1, 2, 2, 4], m = 6)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1,0,1,0])",
        "doesValidArrayExist(derived = [0, 0, 1, 0])",
        "doesValidArrayExist(s1 = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0,0,0,0,0,0,0,0,0])",
        "doesValidArrayExist(derived = [0, 2, 3])",
        "doesValidArrayExist(derived = [0, 1, 2, 2, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [2, 5, 1, 8, 4, 7])"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 1)",
        "checkArray(nums = [1, 3, 5], k = 2)",
        "checkArray([1,2,3,4,5,6], 2)",
        "checkArray([1,2,3,4,5], 1)",
        "checkArray(nums = [1,3,4,3,2,3,1], k = 2)",
        "checkArray(nums = [5, 3, 1, 7, 10], k = 2)",
        "checkArray(nums = [3, 2, 3, 1, 2, 1], k = 1)",
        "checkArray(nums = [3, 7, 13, 17, 23], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(??)",
        "numberOfEmployeesWhoMetTarget(??)",
        "numberOfEmployeesWhoMetTarget(??, 7)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 20)",
        "numberOfEmployeesWhoMetTarget(??, target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 7, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 10, 10, 12], target = 5)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [??], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 0, 1, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0], k = 0)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8], k = 3)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty([1, 2, 3, 4, 5], 3)",
        "maximumBeauty(nums = [1, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1,3,6,7], k = 1)",
        "maximumBeauty(nums = [3, 10, 15, 20], k = 3)",
        "maximumBeauty(nums = [3,2,1,5,4,6,7], k = 4)",
        "maximumBeauty(nums = [10, 5, 2, 8, 5], k = 1)",
        "maximumBeauty(nums = [1, 5, 8, 10, 13, 15], k = 4)"
    ],
    "sample_205": [
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(\"000\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"5\")",
        "minimumOperations(num = \"abcd\")",
        "minimumOperations(s1 = \"12525\", s2 = \"12525\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s1 = \"00\", s2 = \"25\")",
        "minimumOperations(s1 = \"00\", s2 = \"25\")",
        "minimumOperations(s = \"0\")",
        "minimumOperations(s = \"00\")",
        "minimumOperations(s = \"001\")",
        "minimumOperations(\"0025255075\")",
        "minimumOperations(s = \"11\")",
        "minimumOperations(s1 = \"01\", s2 = \"22\")",
        "minimumOperations('abacab')"
    ],
    "sample_44": [
        "semiOrderedPermutation([1,2,3,4,5])",
        "semiOrderedPermutation(nums = [0,1,2,3])",
        "semiOrderedPermutation(nums = [0, 0, 1, 1])",
        "semiOrderedPermutation([1,2,3])",
        "semiOrderedPermutation(nums = [3, 1, 2, 1])",
        "semiOrderedPermutation([0, 1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [0,0,1,0,0])",
        "semiOrderedPermutation(nums = [2,1,3,2,1])",
        "semiOrderedPermutation(s1 = [1,0,0,0,0,0,0,0], s2 = [0,1,0,0,0,0,0,0])",
        "semiOrderedPermutation([1,0,2,0,0,3])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LRLL\")",
        "furthestDistanceFromOrigin(\"LR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRRLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLL\")",
        "furthestDistanceFromOrigin(s1 = \"abc\", s2 = \"def\")",
        "furthestDistanceFromOrigin(moves = \"RLLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLL\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"NASA\"], s = \"NASA\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hlelo\")",
        "isAcronym(words = [\"John\", \"Doe\"], s = \"JD\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"aPpLe\")",
        "isAcronym(s1 = \"Mr\", s2 = \"by\")",
        "isAcronym(words = [\"i\", \"t\"], s = \"it\")",
        "isAcronym(words = [\"SOS\"], s = \"SSO\")",
        "isAcronym(s1 = \"bc\", s2 = \"ca\")",
        "isAcronym(words = [\"help\", \"me\", \"through\"], s = \"htmi\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [0, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays([1,2,3], 1, 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 3)",
        "countInterestingSubarrays([], 5, 4)",
        "countInterestingSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], 3, 2)",
        "countInterestingSubarrays([2, 1, 4, 1, 5], 2, 3)",
        "countInterestingSubarrays(nums = [5,3,2,4,7,8,10], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [2, 5, 7, 11, 16, 17, 23, 31], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [10, 7, 15, 3, 20, 12, 18, 4, 9], modulo = 3, k = 3)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3])",
        "countBeautifulPairs(nums = [1, 0, 2, 1, 0, 1])",
        "countBeautifulPairs(nums = [20, 20, 10, 10])",
        "countBeautifulPairs(nums = [3, 3, 5, 5, 5])",
        "countBeautifulPairs(nums = [10, 21, 30, 42, 50])",
        "countBeautifulPairs(nums = [123, 918, 918, 918])",
        "countBeautifulPairs(nums = [10, 5, 0, 2, 8, 10])",
        "countBeautifulPairs(nums = [23, 12, 47, 68, 31])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [3, 2, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 10)",
        "maximumJumps(nums = [1,2,3,1,2], target = 0)",
        "maximumJumps(nums = [1,3,1,1,2,4], target = 5)",
        "maximumJumps(nums = [10,9,2,1,5,8,3,7,4,6], target = 10)",
        "maximumJumps(nums = [1,5,8,2,3], target = 8)",
        "maximumJumps(nums = [1, 3, -1, 1, 5, 9, -2, -3, 4], target = 8)",
        "maximumJumps(nums = [3,5,2,1,5,8,9], target = 7)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [2, 4, 6])",
        "countBeautifulPairs(nums = [2,4,6,8])",
        "countBeautifulPairs([1,2,3,4,5,6])",
        "countBeautifulPairs([2,3,5])",
        "countBeautifulPairs(nums = [2, 7, 13])",
        "countBeautifulPairs(nums = [0, 2, 4, 8, 16])",
        "countBeautifulPairs(nums = [1,3,4,8])",
        "countBeautifulPairs(nums = [121, 19, 3])"
    ],
    "sample_18": [
        "minLength(\"ABC\")",
        "minLength(s = \"AB\")",
        "minLength(\"CD\")",
        "minLength(\"ABC\")",
        "minLength(s1 = \"AB\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"cd\")",
        "minLength(s = \"AAB\")",
        "minLength(\"ABBA\")",
        "minLength(\"BAB\")"
    ],
    "sample_150": [
        "finalString(\"hi\")",
        "finalString(s1 = \"rtsng\", s2 = \"ng\")",
        "finalString(s = 'rtsng')",
        "finalString(\"madam\")",
        "finalString(s1 = \"ba\", s2 = \"nana\")",
        "finalString(s1 = 'si', s2 = 'ng')",
        "finalString(\"siim\")",
        "finalString(s1 = \"hi\", s2 = \"li\")",
        "finalString(s = \"kikkn\")",
        "finalString(s1 = \"trstng\", s2 = \"aaa\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist(my_list = [0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [3, 2, 3, 4, 0])",
        "doesValidArrayExist(derived = [0,0,1,1,1,1,0,1])",
        "doesValidArrayExist(s1 = [2, 5, 10, 2, 6])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition([0, 1, 2, 3, 4, 5])",
        "findValueOfPartition([1, 2, 3, 4, 5, 6, 7, 8])",
        "findValueOfPartition(nums = [4, 4, 4, 4, 4])",
        "findValueOfPartition(nums = [5, 8, 2, 3, 7])",
        "findValueOfPartition(nums = [6, 5, 2, 1, 3, 4])",
        "findValueOfPartition(nums = [9, 10, 9, 10])"
    ],
    "sample_7": [
        "colorTheArray(n = 5, queries = [[0, 2], [2, 0]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 0], [0, 1]])",
        "colorTheArray(n = 5, queries = [[0, 2], [0, 3], [1, 3]])",
        "colorTheArray(n = 4, queries = [[0,1], [1,1], [2,0], [3,2]])",
        "colorTheArray(n = 4, queries = [[2, 1], [2, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1,0],[0,1],[1,1],[1,0],[0,1],[0,0]])",
        "colorTheArray(n = 5, queries = [[1,3],[0,3],[1,2],[2,3],[3,1]])",
        "colorTheArray(n = 5, queries = [[3,4],[1,3],[3,0],[0,2]])",
        "colorTheArray(n = 4, queries = [ [1,0], [0,2], [0,1], [1,1], [1,0], [2,0], [2,1] ])",
        "colorTheArray(n = 7, queries = [[2, 6], [5, 6], [6, 5], [3, 2], [4, 1], [6, 5], [5, 3]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 24)",
        "minimumPossibleSum(n = 8, target = 13)",
        "minimumPossibleSum(n = 3, target = 11)",
        "minimumPossibleSum(target = 20, n = 7)"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 6, k = 3)",
        "minimumSum(n = 6, k = 9)",
        "minimumSum(k = 3, n = 4)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(??, 10)",
        "numberOfEmployeesWhoMetTarget(??, 4)",
        "numberOfEmployeesWhoMetTarget(??, 2)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5,6,7,8], target = 7)",
        "numberOfEmployeesWhoMetTarget([2, 3, 5, 7], 4)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 5, 7, 5, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 11, 15, 18], target = 17)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 5, 7, 8, 9, 7, 6, 9, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 12, 10, 7], target = 12)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 7)",
        "canSplitArray(nums = [1,2,3,4,5], m = 9)",
        "canSplitArray(nums = [1, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [3, 4, 6], m = 5)",
        "canSplitArray(nums = [3, 3, 4, 4, 5], m = 9)",
        "canSplitArray(nums = [2, 3, 4, 4, 4], m = 5)",
        "canSplitArray(nums = [0, 1, 2, 5, 8], m = 12)",
        "canSplitArray(nums = [3, 6, 3, 1, 6], m = 10)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 0, 0, 1, 1, 0], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 2, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [0, 0, 0, 0], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [3, 2, 1, 1, 1], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [0, 0, 1, 1, 0, 0, 0, 0, 0, 0], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [4, 0, 1, 2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,1,1,0], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,1,1,1,0,0,0,0,0,1,1,1,1,1,1], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [3,1,0,3,2,2], m = 2, k = 1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 6)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], t = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], t = 1)",
        "longestAlternatingSubarray(nums = [4,5,6,7,8,9,10], t = 5)",
        "longestAlternatingSubarray(nums = [0,0,0,0,1,2,3], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,1,4,1,2,3,1], t = 3)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits([1,1,0,0,1])",
        "numberOfGoodSubarraySplits([1, 0, 1, 0, 0, 1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,1,0,0])",
        "numberOfGoodSubarraySplits([0, 0, 0, 1, 1, 1, 0, 1, 1, 0])"
    ],
    "sample_33": [
        "removeTrailingZeros(??)",
        "removeTrailingZeros('512301')",
        "removeTrailingZeros(num = '0')",
        "removeTrailingZeros(??)",
        "removeTrailingZeros(num = \"1230\")",
        "removeTrailingZeros(num = \"1234\")",
        "removeTrailingZeros(num = \"123456\")",
        "removeTrailingZeros(num = 'abc000')",
        "removeTrailingZeros(num = \"000000000012301\")",
        "removeTrailingZeros(s1 = \"00\", s2 = \"12301\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 0, b = 10)",
        "makeTheIntegerZero(a = 1, b = 3)",
        "makeTheIntegerZero(a = -1, b = 3)",
        "makeTheIntegerZero(a = 11, b = 3)",
        "makeTheIntegerZero(a = 0, b = 5)",
        "makeTheIntegerZero(a = 0, b = 9)",
        "makeTheIntegerZero(a = 123, b = 46)",
        "makeTheIntegerZero(a = 50000, b = 100)",
        "makeTheIntegerZero(??? = 4, ??? = 5)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1,2,3], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 10)",
        "canSplitArray(nums = [1, 2, 5, 7], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 5, 7], m = 12)",
        "canSplitArray(nums = [0, 1, 4], m = 7)",
        "canSplitArray(nums = [1, 5, 7, 2], m = 7)"
    ],
    "sample_161": [
        "maxSum([1, 2, 3])",
        "maxSum([1, 2, 3])",
        "maxSum([1, 2, 3, 2, 1])",
        "maxSum(nums = [1, 12, 123, 1234])",
        "maxSum(nums = [2, 2, 2, 2, 2, 2])",
        "maxSum(nums = [3, 7, -2, 0, 5, 9])",
        "maxSum([2,3,-1,2,1,4,3,2])",
        "maxSum(nums = [1, 5, 9, 2, 8, 3, 1, 4, 2])",
        "maxSum(nums = [10, 10, 1, 3, 2, 3, 5, 7, 8, 9])",
        "maxSum([3, 8, 1, 7, 6, 7, 10, 2])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(??)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 5, target = 12)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 8, target = 3)",
        "minimumPossibleSum(n = 6, target = 1)",
        "minimumPossibleSum(n = 7, target = 19)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1,2,3,4,5,6])",
        "findValueOfPartition(nums = [1,2,3,4,5,6,7])",
        "findValueOfPartition(nums = [1,3,5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findValueOfPartition(nums = [10, 5, 3, 2, 1])",
        "findValueOfPartition(nums = [1, 2, 3, 6, 8])",
        "findValueOfPartition([2,4,6,8,10,12,14,16,18,20])",
        "findValueOfPartition(nums = [1, 2, 5, 7, 11, 15, 19, 23])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints([[1,2], [3,4], [5,6]])",
        "numberOfPoints([[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[1,2]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints([[0, 100], [100, 200], [200, 300]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]])",
        "numberOfPoints(nums = [[1,5], [4,3], [1,3], [2,2], [3,1]])",
        "numberOfPoints(nums = [[0, 3], [1, 3], [2, 3], [2, 4], [4, 4], [3, 6]])",
        "numberOfPoints(nums = [ [1,3],[3,4],[2,5],[5,6],[6,7],[7,8],[8,10],[10,11],[11,12],[12,13],[13,14],[14,15]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints([[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 6], [4, 7]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [1, 2], [5, 6]])",
        "numberOfPoints(nums = [\n    [1, 2],\n    [1, 3],\n    [2, 3],\n    [4, 5]\n])",
        "numberOfPoints(nums = [[1,2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[0,1,2],[2,3,4],[3,4,5]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [3, 4], [5, 6], [6, 7]])",
        "numberOfPoints(nums = [[0, 2], [1, 2], [0, 3], [2, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 5], [3, 6], [5, 7], [7, 9], [9, 10]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(s1 = \"one\", s2 = \"two\", s3 = \"three\", s4 = \"four\", s5 = \"five\", s6 = \"six\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \":\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"orange\"], separator = \" \")",
        "splitWordsBySeparator(??, ',')"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [3, 3, 3], target = 6)",
        "minOperations(nums = [1, 3, 5, 7, 9], target = 10)",
        "minOperations(nums = [2, 4, 6, 8, 10], target = 10)",
        "minOperations(nums = [3, 2, 1], target = 8)",
        "minOperations(nums = [3, 3, 4], target = 8)",
        "minOperations(nums = [1,2,4,8,16,32], target = 20)",
        "minOperations(nums = [1, 2, 4, 8, 16, 32], target = 31)",
        "minOperations(nums = [4, 8, 10, 16], target = 2)",
        "minOperations(nums = [1, 2, 3, 6, 6, 6, 7], target = 8)"
    ],
    "sample_107": [
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [1, 2, 3], k = 3)",
        "checkArray(nums = [1, 2, 3, 2, 1], k = 3)",
        "checkArray(nums = [0, 1, 2, 3, 4], k = 3)",
        "checkArray(nums = [1, 2, 3, 1, 2, 3], k = 3)",
        "checkArray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 3)",
        "checkArray(nums = [1, 3, 1, 1, 2, 1], k = 4)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0,1,1,0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1,1])",
        "doesValidArrayExist([0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0])",
        "doesValidArrayExist([0,1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 1, 1, 0, 0, 0])"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [20,10,30,40,50])",
        "maxSum([3, 4, 5, 4])",
        "maxSum([123, 456, 789])",
        "maxSum(nums = [1,1,1,0,0])",
        "maxSum([5,7,3,7,9])",
        "maxSum(nums = [4, 2, 6, 9, 7, 3, 1, 5, 8])",
        "maxSum(nums = [12, 20, 31, 41, 1, 9, 21, 30])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 2, 3, 3, 3])",
        "continuousSubarrays(A = [1,1,1,2,2,2])",
        "continuousSubarrays(A = [3, 2, 3])",
        "continuousSubarrays(A = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(A = [1, 1, 1, 1, 1, 1, 1, 1, 2, 2])",
        "continuousSubarrays([3, 1, 3])",
        "continuousSubarrays([1, 2, 1, 3, 1, 4])",
        "continuousSubarrays(A = [0,1,2,3,4,5,6])",
        "continuousSubarrays([3, 1, 2, 2, 2, 2, 3, 1, 1, 1, 1])",
        "continuousSubarrays([0,2,3,4,5,6,6,7,8])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 1, 2, 3])",
        "distinctDifferenceArray([1,2,3,4,4,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 4, 4])",
        "distinctDifferenceArray(nums = [0,0,0,1,1,1,2,2,2,3,3,3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])",
        "distinctDifferenceArray(my_list = [3, 2, 4, 1, 4, 5, 2, 5])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(??)",
        "maxNonDecreasingLength([1, 2, 3, 4], [4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 3, 2, 5, 4])",
        "maxNonDecreasingLength(a = [3, 4, 5], b = [1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 1, 1, 2, 2, 2], b = [2, 2, 2, 2, 2, 2])",
        "maxNonDecreasingLength(a = [0,0,0,0,0,0], b = [1,0,0,0,0,0])",
        "maxNonDecreasingLength(a = [1, 2, 3, 5], b = [0, 4, 2, 5])",
        "maxNonDecreasingLength(a = [3, 1, 2, 3, 4], b = [4, 5, 3, 5, 6])",
        "maxNonDecreasingLength([1, 2, 3, 5, 5, 6, 7], [1, 3, 5, 6, 8, 10, 12])",
        "maxNonDecreasingLength(a = [2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2], b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 4)",
        "distanceTraveled(mainTank = 0, additionalTank = 10)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 20)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 4, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 4)",
        "distanceTraveled(mainTank = 8, additionalTank = 9)"
    ],
    "sample_160": [
        "maxSum([1,2,3])",
        "maxSum([1,2,3,4,5,6,7,8,9,10])",
        "maxSum([1,3,2])",
        "maxSum([1, 3, 6, 4, 2, 5])",
        "maxSum(nums = [3,4,3,4,2,1])",
        "maxSum([1, 1, 2, 3, 4, 5, 6, 8, 9, 10])",
        "maxSum([3, 5, -1, 8, 0, 9, -5])",
        "maxSum([-12, 4, 2, -7, 8])",
        "maxSum([-1, 9, 4, -9, 8, 3, 4, -9])",
        "maxSum(nums = [19, 5, 11, 7, 17, 12, 4, 4])"
    ],
    "sample_52": [
        "smallestString(\"abc\")",
        "smallestString(s1 = \"abcd\", s2 = \"a\")",
        "smallestString(\"abc\")",
        "smallestString(s1 = \"aaa\", s2 = \"abc\")",
        "smallestString(s = \"ba\")",
        "smallestString(s = \"abcde\")",
        "smallestString(s = 'aabbb')",
        "smallestString(s = \"abczab\")",
        "smallestString(\"abzab\")",
        "smallestString(s1 = \"kddsbd\", s2 = \"dsb\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition([1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 5, 9])",
        "findValueOfPartition(nums = [5, 10, 15, 20])",
        "findValueOfPartition(nums = [5, 4, 3, 2, 1])",
        "findValueOfPartition(nums = [1, 2, 4, 5, 6, 10])",
        "findValueOfPartition(nums = [5, 3, 2, 6, 1])",
        "findValueOfPartition(nums = [0, 1, 1, 3, 3, 3])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(\"abcd\")",
        "makeSmallestPalindrome(s1 = \"abcd\")",
        "makeSmallestPalindrome(s1 = \"ab\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s1 = \"ab\")",
        "makeSmallestPalindrome(s1 = \"bab\", s2 = \"baa\")",
        "makeSmallestPalindrome(s1 = \"bba\", s2 = \"aab\")",
        "makeSmallestPalindrome('abcdef')",
        "makeSmallestPalindrome(s1 = \"banana\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 4)",
        "makeTheIntegerZero(num1 = 5, num2 = 7)",
        "makeTheIntegerZero(??,??)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 6)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(num1 = 100, num2 = 5)",
        "makeTheIntegerZero(num1 = 22, num2 = 99)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "numberOfPoints(nums = [[1,2],[2,1]])",
        "numberOfPoints([[0,1],[0,2],[1,2]])",
        "numberOfPoints(nums = [[1,2,3], [2,3,4], [1,2,3]])",
        "numberOfPoints([[1,3], [2,3], [2,3]])",
        "numberOfPoints([[1,2,3,4], [3,4,5,6], [5,6,7,8]])",
        "numberOfPoints(nums = [[1,2], [2,3], [3,4], [4,5], [5,6], [6,7], [7,8], [8,9], [9,10]])",
        "numberOfPoints(nums = [\n    [0,1],\n    [1,2],\n    [2,3],\n    [0,2],\n    [2,0]\n])",
        "numberOfPoints(nums = [[2,3], [5,4], [2,3], [3,4], [2,3], [4,5], [2,3]])",
        "numberOfPoints(nums = [\n    [1,3],\n    [2,3],\n    [3,4],\n    [1,2],\n    [2,2],\n    [1,1],\n    [2,1],\n    [2,2],\n    [1,1],\n])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 0, 1, 0, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [4, 4, 4, 4, 4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 2, 3, 3, 4, 5], m = 1, k = 2)",
        "countInterestingSubarrays(nums = [3,2,1,4,5,6,7,8,9,10], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [5, 6, 2, 0, 3, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [7, 0, 1, 0, 0], m = 0, k = 2)"
    ],
    "sample_40": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(\"abab\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s1 = \"ab\", s2 = \"ab\")",
        "minimumCost(s = \"abacabadabacaba\")",
        "minimumCost(\"abacab\")",
        "minimumCost(\"aaabbb\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"bbbb\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [0,0,0])",
        "doesValidArrayExist(derived = [0,0,1])",
        "doesValidArrayExist([0, 1, 2, 3])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 0, 1, 0])",
        "doesValidArrayExist([3,3,2,2,1])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "distinctDifferenceArray(nums = [1, 2, 4, 6, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 4, 8])",
        "distinctDifferenceArray(nums = [2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4, 5])",
        "distinctDifferenceArray(nums = [4, 2, 6, 1, 3, 5])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 50, 30, 20], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 1, 3, 5, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 6, 4, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 8, 2, 0, 9], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 11, 12, 14, 15, 18], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 4, 6, 2, 7, 8, 2, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 5, 2, 6, 1, 1, 7, 8, 9], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [23, 33, 45, 56, 63, 75, 87], target = 55)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s1 = \"ab\")",
        "makeSmallestPalindrome(\"banana\")",
        "makeSmallestPalindrome(\"abc\")",
        "makeSmallestPalindrome(s1 = \"abc\", s2 = \"defg\")",
        "makeSmallestPalindrome(s = \"jal\")",
        "makeSmallestPalindrome('anaceann')"
    ],
    "sample_30": [
        "removeTrailingZeros(??)",
        "removeTrailingZeros(??)",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(s1 = \"123\", s2 = \"0\")",
        "removeTrailingZeros(s1 = '102301')",
        "removeTrailingZeros(s1 = '0123000')",
        "removeTrailingZeros(s1 = \"5612301\", s2 = \"5\")",
        "removeTrailingZeros(num = '0011111111')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,1,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10,11,12], m=3, k=3)",
        "countInterestingSubarrays(nums = [0,2,1,2,0], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0",
        "countInterestingSubarrays(nums = [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [5,9,1,2,5,2,5], m=5, k=2)",
        "countInterestingSubarrays(nums = [4, 3, 2, 6, 7, 8, 9, 7, 7, 9, 9, 10, 10, 10], m = 5, k = 9)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 3)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 4)",
        "distanceTraveled(mainTank = 6, additionalTank = 4)",
        "distanceTraveled(mainTank = 10, additionalTank = 8)",
        "distanceTraveled(main = 3, additional = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4, 5, 6], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 3)",
        "minCost(A = [0,1,2,3,4,5,6,7,8,9], x = 3)",
        "minCost(A = [2, 1, 3], x = 2)",
        "minCost(A = [1,2,3,4,5,6,7], x = 2)",
        "minCost(A = [1, 4, 2, 7], x = 2)",
        "minCost(A = [9, 2, 4, 3, 7, 6], x = 2)",
        "minCost(A = [4, 5, 6, 3, 1, 4], x = 3)",
        "minCost(A = [5, 2, 3, 4, 7, 8, 9], x = 3)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups(u = [2, 3, 4, 5, 6])",
        "maxIncreasingGroups(u = [1,2,3,5,6,7])",
        "maxIncreasingGroups([1, 2, 3, 5, 6, 8, 9])",
        "maxIncreasingGroups(u = [1,2,3,4,5,6,7,8,9,0])",
        "maxIncreasingGroups(my_list = [1, 3, 2, 4, 5, 6, 7, 8])",
        "maxIncreasingGroups(u = [2, 6, 2, 6, 4, 4, 4])",
        "maxIncreasingGroups(u = [1, 3, 4, 7, 3, 4, 6, 5, 9, 6, 7, 8, 2])",
        "maxIncreasingGroups(u = [5, 8, 4, 1, 2, 3, 10, 2, 1, 2, 10, 7, 10, 10])"
    ],
    "sample_110": [
        "checkArray(nums = [0, 0, 0, 0], k = 1)",
        "checkArray(nums = [0, 0, 0], k = 1)",
        "checkArray(nums = [3,2,1,0], k = 2)",
        "checkArray(nums = [0,0,0], k = 0)",
        "checkArray(nums = [3, 2, 1, 3, 2, 1], k = 2)",
        "checkArray(nums = [1, 4, 3, 2, 1], k = 2)",
        "checkArray(nums = [0, 1, 2, 3, -1, -2], k = 3)",
        "checkArray(nums = [2, -1, 0, -2, 3], k = 2)",
        "checkArray(nums = [3, -1, -3, -4], k = 2)",
        "checkArray(nums = [3, 3, 3, 3, 2, 2, 2, 1, 1], k = 3)"
    ],
    "sample_19": [
        "minLength(\"abcd\")",
        "minLength(s = \"AB\")",
        "minLength(\"CD\")",
        "minLength(s1 = \"abc\")",
        "minLength(s = \"ABB\")",
        "minLength(s = \"a\")",
        "minLength(s = \"BACD\")",
        "minLength('ABab')",
        "minLength('AABBCC')",
        "minLength(\"CAA\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 2, 3, 4], target = 5)",
        "minOperations(nums = [1,2,3,4,5], target = 8)",
        "minOperations(nums = [3, 1, 2], target = 6)",
        "minOperations(nums = [2, 2, 2], target = 5)",
        "minOperations(nums = [5,3,2], target = 10)",
        "minOperations(nums = [3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minOperations(nums = [10,5,3,4,2], target = 20)",
        "minOperations(nums = [20, 10, 30, 40, 50, 60, 70], target = 25)",
        "minOperations(nums = [3, 4, 1, 2, 4, 1, 2, 3, 4, 1], target = 7)",
        "minOperations(nums = [2, 1, 4, 2, 2, 1, 2, 2, 2, 2, 2, 2], target = 4)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"the\", \"quick\", \"brown\", \"fox\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"this\", \"is\", \"a\", \"sentence\"], separator = \" \")",
        "splitWordsBySeparator(s1 = \"ab\", s2 = \"cd\")",
        "splitWordsBySeparator(words = [\"Hello\", \"world\", \"Python\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello world\", \"python\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"mango\"], separator = \"m\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\", \"foo\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"bana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"Banana\", \"Mango\", \"Orange\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\", \"hello\", \"\", \"world\"], separator = \" \")"
    ],
    "sample_54": [
        "smallestString(s = \"ba\")",
        "smallestString(s1 = \"abc\", s2 = \"bcd\")",
        "smallestString(s1 = 'ba', s2 = 'nana')",
        "smallestString(s1 = \"bb\", s2 = \"dd\")",
        "smallestString(s1 = \"kddsbncd\", s2 = \"abc\")",
        "smallestString(s1 = \"da\", s2 = \"dcb\")",
        "smallestString(s = \"aaaaaaaa\")",
        "smallestString(s1 = \"abcd\", s2 = \"zbc\")",
        "smallestString(s1 = 'cba', s2 = 'acb')",
        "smallestString(s1 = \"pqr\", s2 = \"kj\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LR_R\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLR\")",
        "furthestDistanceFromOrigin
        "furthestDistanceFromOrigin(moves = \"LRLRLLRL\")",
        "furthestDistanceFromOrigin
        "furthestDistanceFromOrigin(moves = \"LLRRRLRLRLL\")",
        "furthestDistanceFromOrigin(s = \"LR_R_LR_R\")",
        "furthestDistanceFromOrigin(s1 = \"_\", s2 = \"_\", s3 = \"_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLRL_LL\")",
        "furthestDistanceFromOrigin(s = \"LR_LL_R_LR_LL_RL_RL_RL_LR_LL\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(??)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(??, 0)",
        "makeTheIntegerZero(num1 = 6, num2 = 8)",
        "makeTheIntegerZero(??, 4)",
        "makeTheIntegerZero(num1 = 0, num2 = 12)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 28, num2 = 5)",
        "makeTheIntegerZero(num1 = 123, num2 = 0)",
        "makeTheIntegerZero(num1 = 25, num2 = 27)"
    ],
    "sample_51": [
        "smallestString(s = 'abc')",
        "smallestString(s1 = \"ba\", s2 = \"ab\")",
        "smallestString(s1 = \"kddb\", s2 = \"bncd\")",
        "smallestString('d')",
        "smallestString('aaaa')",
        "smallestString(\"s\")",
        "smallestString(s = 'abd')",
        "smallestString(s = \"abde\")",
        "smallestString(s1 = \"z\", s2 = \"ab\")",
        "smallestString(\"hannna\")"
    ],
    "sample_146": [
        "finalString(s1 = 'ponter', s2 = 'e')",
        "finalString('ponter')",
        "finalString(s1 = 'ponter', s2 = 'nana')",
        "finalString(s1 = \"iponter\")",
        "finalString(s = \"bai\")",
        "finalString(s = \"poi\")",
        "finalString(\"aaa\")",
        "finalString(s = \"piert\")",
        "finalString(\"pen-pen\")",
        "finalString(\"I have a red cat\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 2, 2, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1], k = 3)",
        "longestEqualSubarray(nums = [0,0,0,0,0], k = 3)",
        "longestEqualSubarray(nums = [1,1,2,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1,1,2], k = 2)",
        "longestEqualSubarray(nums = [2, 1, 2, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [4,3,2,1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1, 0, 0, 1, 0, 0, 0], k = 1)",
        "longestEqualSubarray([3, 5, 4, 3, 5], 3)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 15)",
        "canSplitArray(nums = [0, 1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8], m = 13)",
        "canSplitArray(nums = [2,3,5], m = 6)",
        "canSplitArray(nums = [1,2,4,5,7,9], m = 13)",
        "canSplitArray(nums = [1,2,4,10,11,12], m = 12)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits([1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [2,2,2,2,2,2])",
        "numberOfGoodSubarraySplits(nums = [2,3,4,4])",
        "numberOfGoodSubarraySplits([1, 0, 1, 0, 1, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 0, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits([3, 3, 2, 2, 2, 1, 1, 1, 1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"ab\", \"cd\", \"ef\"], separator = \"\")",
        "splitWordsBySeparator(s1 = \"1a2b3c4d5e6f\", s2 = \"\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(??)",
        "numberOfEmployeesWhoMetTarget(??, 5)",
        "numberOfEmployeesWhoMetTarget(??)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8, 9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [3,3,3,3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 8, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 7, 4, 10], target = 6)"
    ],
    "sample_168": [
        "isAcronym(words = [\"World\", \"Health\", \"Organization\"], s = \"WHO\")",
        "isAcronym(words = [\"NASA\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"AU\"], s = \"NASA\")",
        "isAcronym(words = [\"Mr\", \"Mrs\"], s = \"Mrs\")",
        "isAcronym(s1 = \"LOL\", s2 = \"world\")",
        "isAcronym(words = [\"Foo\", \"Bar\"], s = \"Fof\")",
        "isAcronym(words = [\"A\", \"R\", \"N\", \"G\", \"M\", \"A\"], s = \"ARNA\")",
        "isAcronym(words = [\"Sun\", \"Orion\", \"Saturn\"], s = \"SATURN\")",
        "isAcronym(words = [\"Banana\", \"PYTHON\", \"Java\"], s = \"BananaPYTHON\")",
        "isAcronym(s1 = \"US\", words = [\"US\" , \"Canada\", \"Mexico\"])"
    ],
    "sample_170": [
        "isAcronym(words = [\"NASA\"], s = \"National Aeronautics and Space Administration\")",
        "isAcronym(words = [\"abc\", \"def\"], s = \"abcdef\")",
        "isAcronym(words = [\"the\", \"quick\", \"brown\"], s = \"thequickbrown\")",
        "isAcronym(words = [\"banana\", \"abc\"], s = \"abc\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"bannap\")",
        "isAcronym(words = [\"Ban\", \"Na\", \"An\"], s = \"Banana\")",
        "isAcronym(words = [\"flower\", \"flow\", \"flight\"], s = \"flio\")",
        "isAcronym(words = [\"bob\", \"jerry\", \"jim\"], s = \"jimmy\")",
        "isAcronym(words = [\"Remy\", \"Bob\", \"Bob's\"], s = \"Bob\")",
        "isAcronym(words = [\"nina\", \"anima\", \"piano\"], s = \"ninaa\")"
    ],
    "sample_41": [
        "minimumCost(\"abab\")",
        "minimumCost(\"ab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(\"aaaa\")",
        "minimumCost(s1 = \"abcd\", s2 = \"aab\")",
        "minimumCost(\"bba\")",
        "minimumCost(s1 = \"ab\", s2 = \"bca\")",
        "minimumCost(\"xyzz\")",
        "minimumCost(s = \"baxb\")",
        "minimumCost(s = \"babcabcd\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist([0,1,0])",
        "doesValidArrayExist([0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist([0,1,0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0,1,1,0,1])",
        "doesValidArrayExist(derived = [2, 1, 0, 1, 2])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1, 1, 0])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(\"abcd\")",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(\"abab\")",
        "makeSmallestPalindrome(s1 = \"ab\")",
        "makeSmallestPalindrome(\"abcd\")",
        "makeSmallestPalindrome(s1 = \"abcbba\")",
        "makeSmallestPalindrome(s1 = \"ba\", s2 = \"aa\")",
        "makeSmallestPalindrome(\"bananas\")"
    ],
    "sample_50": [
        "smallestString(s1 = \"a\", s2 = \"b\")",
        "smallestString(\"a\")",
        "smallestString(\"aa\")",
        "smallestString(\"ab\")",
        "smallestString(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "smallestString(\"aaaaa\")",
        "smallestString(s = \"aabaa\")",
        "smallestString(s1 = \"ab\")",
        "smallestString(s1 = \"abc\", s2 = \"bcd\")",
        "smallestString(\"abab\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,1,0,0,0], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 2, 6, 3, 7], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 6, 7, 5, 8, 2], k = 3)"
    ],
    "sample_20": [
        "minLength(\"abcd\")",
        "minLength(\"abcd\")",
        "minLength(\"ABBA\")",
        "minLength(s = \"abcd\")",
        "minLength(s1 = \"ABC\", s2 = \"CD\")",
        "minLength(s1 = \"ABD\")",
        "minLength(\"AABB\")",
        "minLength(\"CDCDCD\")",
        "minLength(s1 = \"abcd\", s2 = \"e\")",
        "minLength(s = \"DDAB\")"
    ],
    "sample_158": [
        "maxSum([1, 2, 3])",
        "maxSum(nums = [10, 10, 10])",
        "maxSum([1, 5, 3, 4])",
        "maxSum([1, 5, 7, 3])",
        "maxSum(nums = [2, 3, 3, 2, 2])",
        "maxSum([123, 9, 321])",
        "maxSum([7, 5, 3, 2, 4, 5, 6, 7])",
        "maxSum(nums = [3, 5, 4, 3, 6, 5, 4, 3, 3, 5])",
        "maxSum([-12, -19, -4, -5, -4, -19, -5, -12])",
        "maxSum([0, 3, 6, 12, -17, -1, -6, -9, -13, -15])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 1, 2])",
        "semiOrderedPermutation(nums = [3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [4,5,6,7,8])",
        "semiOrderedPermutation(nums = [1, 2, 4, 1, 3, 5, 2, 4, 6, 1, 2])"
    ],
    "sample_162": [
        "maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum([3, 1, 2, 4])",
        "maxSum([10, 10, 20, 20, 30, 30])",
        "maxSum([5, 10, 3, 6])",
        "maxSum([1, 2, 3, 4, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 9])",
        "maxSum([89, 12, 3, 7])",
        "maxSum(nums = [88, 22, 77, 44, 11])",
        "maxSum(nums = [18, 9, -5, 17, -3])",
        "maxSum([5, 10, 12, 16, 20, 25, 30, 34, 40])",
        "maxSum([7, 9, 2, 5, 7, 7, 2, 3, 2, 9, 6])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"0101\")",
        "maximumOddBinaryNumber(s = \"10011\")",
        "maximumOddBinaryNumber(s = \"01010101\")",
        "maximumOddBinaryNumber(s = \"0111\")",
        "maximumOddBinaryNumber(s = \"ab\")",
        "maximumOddBinaryNumber(s = \"ab\")",
        "maximumOddBinaryNumber(s1 = \"ba\", s2 = \"na\")",
        "maximumOddBinaryNumber(s = 'abcd')",
        "maximumOddBinaryNumber(\"10\")",
        "maximumOddBinaryNumber('aaaa')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 4, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8, 9, 10, 11], target = 4)",
        "numberOfEmployeesWhoMetTarget(\n    hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    target = 6\n)"
    ],
    "sample_166": [
        "isAcronym(words = [\"NASA\"], s = \"National Aeronautics and Space Administration\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"physics\"], s = \"physics\")",
        "isAcronym(words = [\"banana\", \"ant\", \"apple\"], s = \"banan\")",
        "isAcronym(words = [\"Welcome\", \"to\", \"Python\"], s = \"wtc\")",
        "isAcronym(words = [\"al\", \"art\"], s = \"art\")",
        "isAcronym(words = [\"Mississippi\", \"Minnie\", \"Martin\"], s = \"MISS\")",
        "isAcronym(words = [\"Hey\", \"What's\", \"Up\"], s = \"What's U\")",
        "isAcronym(words = [\"lol\", \"faa\", \"zoo\"], s = \"lala\")",
        "isAcronym(words = [\"enjoy\", \"gadget\"], s = \"EGD\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 0, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 4)",
        "distanceTraveled(mainTank=3, additionalTank=4)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank=10, additionalTank=2)",
        "distanceTraveled(mainTank = 9, additionalTank = 2)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1, 3, 2, 4, 5])",
        "maxIncreasingGroups(A = [9, 9, 9])",
        "maxIncreasingGroups(A = [1, 3, 4, 6, 5])",
        "maxIncreasingGroups(A = [2, 3, 1, 2, 5, 6])",
        "maxIncreasingGroups([1, 4, 2, 2, 2])",
        "maxIncreasingGroups(A = [5, 7, 2, 1, 3, 6, 8])",
        "maxIncreasingGroups(A = [3, 5, 8, 8, 9, 11])",
        "maxIncreasingGroups(A = [1, 2, 4, 2, 1, 1, 1, 3])",
        "maxIncreasingGroups(A = [7, 1, 3, 3, 3, 2, 6])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [0, 0, 1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [0, 1, 1, 0, 2])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 0, additionalTank = 3)",
        "distanceTraveled(??)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 20)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 25, additionalTank = 5)",
        "distanceTraveled(mainTank = 4, additionalTank = 7)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [0,0,0,0])",
        "countCompleteSubarrays(nums = [1, 1, 1])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 4])",
        "countCompleteSubarrays([1, 1, 2, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 4, 5, 5, 6, 6, 6])",
        "countCompleteSubarrays(nums = [0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0b00, 0b10, 0b01, 0b11], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 8, 5, 3, 7], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(\"abc\")",
        "minimizedStringLength(\"abc\")",
        "minimizedStringLength(\"abc\")",
        "minimizedStringLength(s = \"ba\")",
        "minimizedStringLength(s = \"ab\")",
        "minimizedStringLength(\"abab\")",
        "minimizedStringLength(\"abcabc\")",
        "minimizedStringLength(s1 = \"ab\", s2 = \"cd\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"an\")",
        "minimizedStringLength(\"abcdefg\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,4,4,4,5,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [0,0,0,0,0,0,0,0,0,0], k = 0)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,9,9,9,9,9,9], k = 9)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [2,3,5,5,6,6,6,6,7], k = 2)",
        "longestEqualSubarray(nums = [4,5,4,3,5,4,6,7,6,4,2,1], k = 1)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2]])",
        "colorTheArray(n = 4, queries = [[0, 0], [1, 1], [0, 1], [1, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 3], [2, 2], [2, 3], [3, 3]])",
        "colorTheArray(??, queries = [[0, 1], [1, 0], [1, 1], [0, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [0, 1], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 3], [1, 2]])",
        "colorTheArray(n = 3, queries = [[1, 0], [0, 2], [1, 2], [1, 0]])",
        "colorTheArray(n = 3, queries = [[0, 0, 0], [1, 1, 1], [0, 0, 1], [1, 1, 1], [2, 2, 2]])",
        "colorTheArray(n = 10, queries = [[0, 3], [5, 1], [2, 4], [6, 2]])",
        "colorTheArray(n = 4, queries = [\n    [2, 3],\n    [3, 4],\n    [3, 3],\n    [4, 4],\n    [2, 3],\n    [2, 2],\n    [2, 3],\n    [4, 4],\n    [3, 4],\n])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(??, 9)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget([5, 5, 5, 5], 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 8, 5], target = 7)",
        "numberOfEmployeesWhoMetTarget([0,1,2,3], 1)",
        "numberOfEmployeesWhoMetTarget(h = [40, 20, 10, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 15, 8, 4, 3, 2, 11], target = 10)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [2, 4, 6, 8])",
        "countBeautifulPairs(nums = [1,2,3,4,5,6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(s1 = \"ab\", s2 = \"cd\")",
        "countBeautifulPairs(s1 = \"ab\", s2 = \"bc\")",
        "countBeautifulPairs(nums = [3, 6, 10])",
        "countBeautifulPairs([1, 1, 2, 3])",
        "countBeautifulPairs(a = [1, 2, 4], b = [1, 3, 4])",
        "countBeautifulPairs(nums = [0, 10, 20])",
        "countBeautifulPairs(nums = [17, 2, 28, 12, 30])"
    ],
    "sample_229": [
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [3,2,1])",
        "countWays(nums = [1,2,2,3,3,3])",
        "countWays(nums = [1, 1, 1, 2, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [1, 3, 4, 5, 10])",
        "countWays(nums = [3,3,3,4,4,4,4])",
        "countWays([3,1,2,3])",
        "countWays(nums = [3,5,6,4,1,2])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"110101\")",
        "maximumOddBinaryNumber(\"???\")",
        "maximumOddBinaryNumber(s = \"10\")",
        "maximumOddBinaryNumber(\"1000101\")",
        "maximumOddBinaryNumber(s1 = \"11\", s2 = \"01\")",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = \"1234\")",
        "maximumOddBinaryNumber(s = \"10111010\")",
        "maximumOddBinaryNumber(\"ab1c\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty([1, 2, 3, 4], 3)",
        "maximumBeauty(nums = [0, 0, 0], k = 2)",
        "maximumBeauty(nums = [0, 1, 1, 2], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 5, 9, 10, 12, 15, 20], k = 3)",
        "maximumBeauty(nums = [4,5,2,3,3,4,1], k = 3)",
        "maximumBeauty(nums = [5, 8, 11, 15, 18, 22, 24, 26], k = 3)",
        "maximumBeauty([2, 5, 2, 10, 1, 6, 8, 3, 7, 9], 2)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [2, 3, 1, 4, 5])",
        "maximumTripletValue(nums = [4, 2, 6, 1, 8])",
        "maximumTripletValue([1, 3, -4, 2, 1])",
        "maximumTripletValue([3, 5, 2, 4, 6])",
        "maximumTripletValue([1,3,7,4])",
        "maximumTripletValue(nums = [6, -1, 3, -2, 0, -6])",
        "maximumTripletValue([2, 3, -4, 1, -1, 7, 0, -1])",
        "maximumTripletValue(nums = [2, 5, 6, 3, 1, 7, 3, 6, 1])",
        "maximumTripletValue(nums = [12, 25, 3, 30, 15, 18, 25])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1,2,3,4], target = 1)",
        "maximumJumps(nums = [1,3,1,1,4,2], target = 3)",
        "maximumJumps(nums = [3, 2, 1, 0], target = 2)",
        "maximumJumps(nums = [5,3,1,4,2], target = 1)",
        "maximumJumps(nums = [3, 3, -1, -2, 4], target = 1)",
        "maximumJumps([1, 5, 2, -4], 6)",
        "maximumJumps(nums = [2, 3, 1, 1, 2, 4, 5, 1, 3, 7], target = 1)",
        "maximumJumps(nums = [0,1,2,1,3,5,4,2], target = 1)",
        "maximumJumps(nums = [2,5,4,2,5,6], target = 7)"
    ],
    "sample_149": [
        "finalString(\"hi\")",
        "finalString(\"abc\")",
        "finalString(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "finalString(\"ri\")",
        "finalString(s = \"i\"*1000)",
        "finalString(s = \"I am a test.\")",
        "finalString(s = \"trsne\")",
        "finalString(s = \"imem\")",
        "finalString(s1 = \"hi\", s2 = \"stack\")",
        "finalString('x'*100 + 'y'*50 + 'z'*200)"
    ],
    "sample_93": [
        "continuousSubarrays([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "continuousSubarrays(A = [1,2,3,4])",
        "continuousSubarrays(A = [1,1,1,2,2,2,3,3,3,4,4,4,4])",
        "continuousSubarrays(A = [4, 3, 2, 1])",
        "continuousSubarrays([1,2,3,1,2,3,4,1,2])",
        "continuousSubarrays(A = [0,0,0,0,1,1,1,1,2])",
        "continuousSubarrays([3, 1, 2, 4])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 3, 3, 3, 3, 3])",
        "continuousSubarrays(A = [1, 1, 1, 2, 1, 1, 3, 3, 3])",
        "continuousSubarrays(A = [5, 2, 3, 5, 4, 3, 5])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays([1, 2, 2, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [0, 0, 1, 2])",
        "countCompleteSubarrays(nums = [4, 4, 4, 4, 4])",
        "countCompleteSubarrays(nums = [2, 5, 3, 4, 6])",
        "countCompleteSubarrays(nums = [1, 2, 2, 2, 3, 4, 5, 5, 5, 6])",
        "countCompleteSubarrays(nums = [0, 0, 0, 1, 1, 0, 0, 0, 1, 1])",
        "countCompleteSubarrays(nums = [2,2,3,4,4,4,4,4,5,5,6,7,7,7,7])"
    ],
    "sample_228": [
        "countWays(nums = [0,1,2])",
        "countWays([1, 2, 3])",
        "countWays(nums = [0,0,0,1,1,1])",
        "countWays(nums = [0, 0, 0, 0, 1, 1, 1])",
        "countWays(nums = [0,0,1,1,2])",
        "countWays([1,0,1,1])",
        "countWays(my_list = [0,0,0,0,0])",
        "countWays(nums = [0,2,5,8])",
        "countWays(nums = [1, 0, 0, 0, 0, 1, 1, 0, 1])",
        "countWays(nums = [3, 2, 0, 1, 1, 0, 0])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [3, 4, 5, 1, 2], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [3, 2, 1, 0, 5], k = 2)",
        "maximumBeauty(nums = [3, 1, 4, 2, 6, 5], k = 2)",
        "maximumBeauty(nums = [5, 4, 3, 3, 3, 3, 2, 2, 2, 2], k = 2)",
        "maximumBeauty(nums = [5, 1, 6, 3, 7, 9], k = 2)",
        "maximumBeauty(nums = [3,2,3,2,1], k = 2)",
        "maximumBeauty(nums = [4, 7, 10, 12], k = 2)",
        "maximumBeauty(nums = [5, 3, 7, 1, 4, 6, 2, 8], k = 2)",
        "maximumBeauty(nums = [3, 6, 9, 12, 13, 20], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1,2,3,4,5])",
        "distinctDifferenceArray(a = [1, 2, 3, 3, 4])",
        "distinctDifferenceArray(a = [0, 1, 2, 3, 4, 5, 6, 7, 8])",
        "distinctDifferenceArray(a = [3, 1, 2, 3, 3])",
        "distinctDifferenceArray(a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(s1 = [1, 1, 1, 1, 1, 1, 1, 1], s2 = [2, 2, 2, 2, 2, 2, 2, 2])",
        "distinctDifferenceArray([3,2,2,3])",
        "distinctDifferenceArray(a = [1,2,2,4,5,6,6])",
        "distinctDifferenceArray(a = [0, 2, 0, 5, 1, 5, 3, 5, 2])",
        "distinctDifferenceArray(s1 = [3, 4, 1, 1, 2], s2 = [1, 3, 3, 5, 5])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])",
        "continuousSubarrays(a = [1,1,1,1,1,2,2,2,3,3,3])",
        "continuousSubarrays([1, 0, 0, 1, 1, 0, 0, 0, 0])",
        "continuousSubarrays([1,2,3,4,5,5,5,5,5,5,5])",
        "continuousSubarrays(s1 = [1,1,1,1,1,1,2,2,3])",
        "continuousSubarrays([1,3,2,1,2,1,2,1,2])",
        "continuousSubarrays(my_list = [3, 1, 3, 5, 3, 6, 7, 8])",
        "continuousSubarrays(s1 = \"bbbababaa\", s2 = \"babab\")"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [1, 2, 1, 2, 1])",
        "continuousSubarrays(nums = [1, 1, 2, 2, 2, 3, 3])",
        "continuousSubarrays(nums = [0,1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays([1, 2, 3, 1])",
        "continuousSubarrays(nums = [1, 2, 2, 1])",
        "continuousSubarrays(nums = [1, 1, 1, 2, 2, 3, 3])",
        "continuousSubarrays(nums = [1,1,2,2,2,3,3,4,4,5])",
        "continuousSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3])",
        "continuousSubarrays(nums = [1, 3, 4, 2, 2, 6, 6, 7, 1])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countBeautifulPairs(nums = [12, 15, 18, 20, 22])",
        "countBeautifulPairs(nums = [24, 9, 18, 6, 12])",
        "countBeautifulPairs(my_list = [2, 5, 7, 10, 15, 20])",
        "countBeautifulPairs(nums = [13, 15, 17, 19, 23, 29])",
        "countBeautifulPairs(nums = [13, 19, 31, 18])",
        "countBeautifulPairs(nums = [60, 10, 30, 50, 20, 25])",
        "countBeautifulPairs(nums = [3, 15, 2, 2, 2, 2, 2, 2])",
        "countBeautifulPairs(nums = [6, 7, 3, 4, 9, 12, 3])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [3,2,1])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [5,3,4,2,1])",
        "semiOrderedPermutation(nums = [4,1,5,3,2])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation([3,4,2,1,5])",
        "semiOrderedPermutation([4,6,2,1])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation([1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [2, 1, 2, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5, 6, 7, 8, 9, 0])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 0, 0, 0])",
        "numberOfGoodSubarraySplits([1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits([0, 0, 0, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "numberOfGoodSubarraySplits(nums = [2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"0011\")",
        "maximumOddBinaryNumber(??)",
        "maximumOddBinaryNumber(s = \"0101010101\")",
        "maximumOddBinaryNumber(s1 = \"101\")",
        "maximumOddBinaryNumber(s = \"10\")",
        "maximumOddBinaryNumber(s = \"aab\")",
        "maximumOddBinaryNumber(s = '0')"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [0, 0, 0, 0])",
        "countCompleteSubarrays([1, 2, 2])",
        "countCompleteSubarrays([1, 2, 3])",
        "countCompleteSubarrays([1,1,1,1])",
        "countCompleteSubarrays(nums = [4, 5, 5, 5, 4, 4, 5, 5])",
        "countCompleteSubarrays(nums = [3, 2, 2, 5, 5, 5, 3, 3, 3, 3])"
    ],
    "sample_23": [
        "minLength(\"abcd\")",
        "minLength(\"ABC\")",
        "minLength(\"abcd\")",
        "minLength(s = \"abcdef\")",
        "minLength(s = \"aab\")",
        "minLength(s1 = \"ABCD\")",
        "minLength(s = \"ADC\")",
        "minLength(\"aaab\")",
        "minLength(\"aABc\")",
        "minLength(s = \"ABBDCCC\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,2,3,3,3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,1,1,2,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [1,1,2,2,3])",
        "countCompleteSubarrays([1,1,1,2,2,2,3,3,3])",
        "countCompleteSubarrays(nums = [1,1,2,3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [0,1,2,3,3,3])",
        "countCompleteSubarrays(nums = [5,5,4,4,5,3,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_78": [
        "makeTheIntegerZero(??)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 5)",
        "makeTheIntegerZero(num1 = 100, num2 = 3)",
        "makeTheIntegerZero(num1 = 100, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 8, num2 = 4)",
        "makeTheIntegerZero(num1 = 5, num2 = 5)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)"
    ],
    "sample_100": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps([1, 2, 3, 4, 5], 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 1, 2, 1], target = 2)",
        "maximumJumps([3, 2, 1, 1, 4], 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 8)",
        "maximumJumps(nums = [2,3,1,1,4,1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 5, 8, 9], target = 5)",
        "maximumJumps(nums = [3, 2, 1, 0, 5], target = 3)",
        "maximumJumps(nums = [3,5,2,1,5], target = 2)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1,2,3,4,5])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 4, 8, 16, 32])",
        "maxIncreasingGroups(x = [5, 10, 20])",
        "maxIncreasingGroups(x = [4,2,3,1,5,2])",
        "maxIncreasingGroups(x = [2, 5, 1, 3, 3, 5])",
        "maxIncreasingGroups(x = [5, 5, 6, 5, 7])",
        "maxIncreasingGroups(x = [1, 2, 1, 5, 3, 2, 1, 4, 4, 3, 2, 3])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LR_LL_R\")",
        "furthestDistanceFromOrigin(\"L_R_R_L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRLL_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RL_LR_RL\")",
        "furthestDistanceFromOrigin(\"LLR_LLL\")",
        "furthestDistanceFromOrigin(\"L_LR_R_\")",
        "furthestDistanceFromOrigin(moves = \"LRLR_RLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRLRLLRLLLLLLLLLLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LR_LL_LR_R_LL_L_LL_R_LL_LR_LR_LR_LR_LR_LL_LR_L_L_L\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"10001\")",
        "maximumOddBinaryNumber(s = \"abcd\")",
        "maximumOddBinaryNumber(s = \"abcd\")",
        "maximumOddBinaryNumber('011')",
        "maximumOddBinaryNumber(\"mq\")",
        "maximumOddBinaryNumber(s = \"00001\")",
        "maximumOddBinaryNumber(s = 'ab')",
        "maximumOddBinaryNumber('2')",
        "maximumOddBinaryNumber(s1 = '1010101', s2 = '0010101')",
        "maximumOddBinaryNumber(\"x1101\")"
    ],
    "sample_6": [
        "colorTheArray(n = 2, queries = [[0,1],[1,0],[1,1]])",
        "colorTheArray(n = 5, queries = [[0,0], [1,0], [1,1]])",
        "colorTheArray(n = 5, queries = [ [1, 1], [1, 2], [2, 2] ])",
        "colorTheArray(n = 5, queries = [[0,3], [1,4]])",
        "colorTheArray(n = 4, queries = [[1,2],[2,1],[3,2],[1,3]])",
        "colorTheArray(n = 5, queries = [[1,2],[3,4],[5,3],[4,5]])",
        "colorTheArray(n = 10, queries = [[0,2],[1,3]])",
        "colorTheArray(n = 5, queries = [\n    [1, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0],\n    [1, 1, 0, 0, 1],\n    [0, 0, 1, 0, 1],\n    [0, 0, 0, 1, 0]])",
        "colorTheArray(n = 5, queries = [[1,1], [1,2], [1,3], [1,4], [2,2], [2,3], [3,3], [4,4], [4,5]])",
        "colorTheArray(n = 5, queries = [[2,0,1,1,0], [1,2,0,0,1], [0,0,1,0,2], [1,0,2,2,2]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition([1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "findValueOfPartition(nums = [10, 20, 30, 40, 50])",
        "findValueOfPartition(nums = [1, 2, 4, 5, 7])",
        "findValueOfPartition([1, 3, 4, 7])",
        "findValueOfPartition(nums = [2, 5, 7])",
        "findValueOfPartition(nums = [1, 2, 5, 6])",
        "findValueOfPartition(nums = [10, 3, 4, 1, 2])",
        "findValueOfPartition(my_list = [1, 3, 5, 10])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,0])",
        "numberOfGoodSubarraySplits([1,0,0,0,0,0,0])",
        "numberOfGoodSubarraySplits([0, 1, 0, 1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits([1, 2, 2, 3, 3, 3, 4, 5, 5])",
        "numberOfGoodSubarraySplits(nums = [2, 0, 1, 2, 3, 5, 4, 3])"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6])",
        "minimumIndex(nums = [1,1,2,1,1])",
        "minimumIndex(my_list = [2,1,3])",
        "minimumIndex([3,2,2,1,3,3])",
        "minimumIndex(nums = [5, 3, 2, 4, 1])",
        "minimumIndex(nums = [\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"c\"])",
        "minimumIndex(nums = [6,6,6,6,6,6])",
        "minimumIndex(nums = [\"a\", \"b\", \"a\", \"c\", \"b\", \"a\", \"d\"])",
        "minimumIndex(nums = [10, 20, 20, 40, 40, 40, 40])",
        "minimumIndex(nums = [1, 4, 5, 9, 2, 2, 9])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 0, 1, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 4)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 1, 1, 0, 1, 1, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 2, 6, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], k = 1)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 6], [1, 2, 3], [2, 3, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 1], [2, 1, 1], [1, 3, 1]])",
        "maximizeTheProfit(n = 6, offers = [[0, 3, 3], [1, 2, 4], [2, 6, 6]])",
        "maximizeTheProfit(n = 6, offers = [[0, 3, 2], [1, 3, 2], [1, 2, 3]])",
        "maximizeTheProfit(n = 7, offers = [[0, 8, 1], [1, 9, 2], [2, 10, 3]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 20], [4, 5, 50]])",
        "maximizeTheProfit(n = 4, offers = [\n    [1, 2, 5],\n    [1, 3, 2],\n    [2, 2, 2],\n    [2, 3, 3]\n])",
        "maximizeTheProfit(n = 4, offers = [[1, 6, 0], [2, 6, 1], [3, 5, 2], [3, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [ [1,3,2], [2,4,3], [5,2,1], [3,2,1], [2,4,3] ])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"002575\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(\"001\")",
        "minimumOperations(\"1\")",
        "minimumOperations(\"23\")",
        "minimumOperations(num = \"00257520\")",
        "minimumOperations(num = \"123321\")",
        "minimumOperations(\"xxxxx\")",
        "minimumOperations(s1 = \"24\", s2 = \"3\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(\"01\")",
        "minimumOperations(num = \"05\")",
        "minimumOperations(num = \"0012\")",
        "minimumOperations(\"2025\")",
        "minimumOperations(s = \"123\")",
        "minimumOperations(num = \"7325\")",
        "minimumOperations(num = \"12\" )"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 2, offers = [[0,1,10],[2,3,20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 1], [2, 3, 1], [2, 2, 4]])",
        "maximizeTheProfit(n = 5, offers = [[2,2,4],[1,5,7]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 3], [1, 3, 5], [3, 4, 3]])",
        "maximizeTheProfit(n = 6, offers = [ [1, 2, 3], [3, 4, 5], [5, 6, 7], [7, 8, 9], [8, 9, 10], [10, 11, 12]])",
        "maximizeTheProfit(n = 10, offers = [[2,6,10],[1,5,10],[4,9,10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 5], [4, 5, 7], [1, 4, 3]])",
        "maximizeTheProfit(n=4, offers = [\n    [3, 2, 3],\n    [2, 1, 4],\n    [1, 2, 2],\n    [1, 2, 3],\n    [2, 1, 3]\n])",
        "maximizeTheProfit(n = 20, offers = [ [1, 5, 2], [2, 5, 4], [3, 6, 2], [4, 6, 1], [5, 7, 2], [6, 8, 2], [7, 8, 3], [8, 9, 3], [9, 10, 3], [10, 11, 3], [11, 12, 3], [12, 13, 3], [13, 14, 3], [14, 15, 3], [15, 16, 3], [16, 17, 3], [17, 18, 3], [18, 19, 3]])",
        "maximizeTheProfit(n = 6, offers = [[2, 3, 4], [1, 6, 10], [0, 8, 5], [5, 2, 7], [1, 4, 7], [4, 0, 9]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,3,2,3,4], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 3, 3, 4, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [5, 6, 7, 2, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 2, 4, 2, 5, 6, 7, 8], threshold = 2)",
        "longestAlternatingSubarray(nums = [3, 5, 4, 2, 7, 8, 5, 1, 9], threshold = 3)"
    ],
    "sample_203": [
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(??)",
        "minimumOperations(??)",
        "minimumOperations(num = \"12\")",
        "minimumOperations(\"000\")",
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"0012\")",
        "minimumOperations(\"002575\")",
        "minimumOperations('aab')"
    ],
    "sample_11": [
        "colorTheArray(n = 4, queries = [])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n = 3, queries = [[1, 2], [0, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [0, 2], [0, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 3], [2, 3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 0], [1, 2], [0, 0]])",
        "colorTheArray(n = 6, queries = [[3,4], [5,5]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 3], [2, 3]])",
        "colorTheArray(n = 7, queries = [[3, 6], [3, 4], [3, 2]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1,2,3,2,3,4])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 3])",
        "minimumIndex(nums = [0,0,1,2,3,3,3])",
        "minimumIndex(nums = [0,2,0,1])",
        "minimumIndex(my_list = [\"ba\", \"na\", \"az\"])",
        "minimumIndex(nums = [4,1,4,2,2,5])",
        "minimumIndex([1, 3, 4, 2, 5, 2, 6, 7])",
        "minimumIndex(nums = [4, 4, 3, 4, 5, 6, 7])"
    ],
    "sample_102": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps([1, 2, 3, 2, 1], 2)",
        "maximumJumps([3, 1, 1, 4, 2], 4)",
        "maximumJumps([1, 2, 3, 4, 5, 6], 2)",
        "maximumJumps([1,2,3,4,5,6,7,8,9,10], 4)",
        "maximumJumps([1, 2, 3, -1, 2, 1], 2)",
        "maximumJumps(nums = [-1, -2, -3, -4, -5, -6], target = 1)",
        "maximumJumps(nums = [1, 3, -1, -3, 2, -2], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 2, 8, 1, 7, 9, 2, 3, 5], target = 2)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(??)",
        "removeTrailingZeros(num = '0')",
        "removeTrailingZeros(num = '0')",
        "removeTrailingZeros(??)",
        "removeTrailingZeros(s1 = '512301', s2 = '00')",
        "removeTrailingZeros(s1 = \"12345\", s2 = \"5\")",
        "removeTrailingZeros('512301')",
        "removeTrailingZeros(num = '012301')",
        "removeTrailingZeros(num = \"123\", result = \"123\")"
    ],
    "sample_57": [
        "distanceTraveled(a = 3, b = 5)",
        "distanceTraveled(a = 3, b = 5)",
        "distanceTraveled(a = 0, b = 0)",
        "distanceTraveled(a = 5, b = 4)",
        "distanceTraveled(a = 7, b = 3)",
        "distanceTraveled(a = 5, b = 3)",
        "distanceTraveled(a = 1, b = 4)",
        "distanceTraveled(??)",
        "distanceTraveled(a = 2, b = 3)",
        "distanceTraveled(a = 10, b = 4)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(my_list = [1, 2, 3, 4, 5])",
        "findValueOfPartition([1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 4, 6])",
        "findValueOfPartition(a = [1, 3, 4, 6])",
        "findValueOfPartition(a = [2, 3, 4, 5, 6])",
        "findValueOfPartition(a = [2, 3, 4, 5, 6])",
        "findValueOfPartition(a = [1, 2, 3, 5, 7, 8, 10, 11, 12, 13, 15])",
        "findValueOfPartition(a = [2, 8, 11, 15, 23, 9, 4, 13, 2])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray([1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray([1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray([5,3,1,2,4])",
        "distinctDifferenceArray([4, 3, 4, 4, 4, 3])",
        "distinctDifferenceArray(nums = [2,5,1,3,5,5,2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 4, 4])"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex([2, 2, 3, 3])",
        "minimumIndex(my_list = [1, 2, 3, 2, 2])",
        "minimumIndex([0,1,2,2,1])",
        "minimumIndex(nums = [0, 0, 0, 1, 1, 2, 3, 3])",
        "minimumIndex(nums = [2, 0, 2, 2, 3, 1])",
        "minimumIndex(nums = [2, 3, 1, 2, 4, 4, 2, 3])",
        "minimumIndex(nums = [3, 4, 1, 4, 5, 1, 2, 3])",
        "minimumIndex([2, 2, 1, 3, 3, 2, 1, 2, 1])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLLR\")",
        "furthestDistanceFromOrigin(moves=\"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLR\")",
        "furthestDistanceFromOrigin(moves=\"LRRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRRLLLL\")",
        "furthestDistanceFromOrigin(s1 = \"LLR\", s2 = \"RR\")",
        "furthestDistanceFromOrigin(moves=\"LRLLLLLLRLR\")"
    ],
    "sample_42": [
        "minimizedStringLength(\"abc\")",
        "minimizedStringLength(\"ab\")",
        "minimizedStringLength(\"ab\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"nana\")",
        "minimizedStringLength(\"aab\")",
        "minimizedStringLength(s1 = \"ab\", s2 = \"ba\")",
        "minimizedStringLength(\"baab\")",
        "minimizedStringLength(s1 = \"ba\", s2 = \"an\")",
        "minimizedStringLength(\"bab\")",
        "minimizedStringLength(s1 = \"abc\", s2 = \"bca\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [5, 4, 3, 2, 1], k = 3)",
        "checkArray([1, 2, 3], 3)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1, 2, 3, 2, 1], k = 2)",
        "checkArray([0, 0, 0, 0], 1)",
        "checkArray(nums = [1, 0, 1], k = 3)",
        "checkArray(nums = [5,2,1,4], k = 3)",
        "checkArray(nums = [1, 5, 3, 6, 7, 2], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [3, 1, 4, 2])",
        "maxIncreasingGroups([2, 3, 1, 4, 5])",
        "maxIncreasingGroups([1,2,3,4,5,6,7,8])",
        "maxIncreasingGroups(usageLimits = [10, 30, 25])",
        "maxIncreasingGroups(usageLimits = [5, 6, 4, 2, 8, 7])",
        "maxIncreasingGroups(count = [5,3,4,6,9,8])",
        "maxIncreasingGroups(count = [3, 7, 1, 2, 4, 7, 1, 2, 4])",
        "maxIncreasingGroups(usageLimits = [3, 5, 7, 10, 10, 12, 20, 21])",
        "maxIncreasingGroups(my_list = [3, 6, 9, 2, 3, 7, 8, 1, 2, 4, 5])"
    ],
    "sample_206": [
        "minimumOperations(??)",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(??)",
        "minimumOperations(s1 = \"00\", s2 = \"25\")",
        "minimumOperations(s1 = \"0025\")",
        "minimumOperations(\"0000\")",
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"abc\")",
        "minimumOperations(num = \"25252525\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 2])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0,0,0])",
        "doesValidArrayExist(derived = [1,2,3])",
        "doesValidArrayExist(derived = [0, 0, 0, 1])",
        "doesValidArrayExist([1,2,3])",
        "doesValidArrayExist(derived = [0,1,2,3,4])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0, 0])",
        "doesValidArrayExist(s1 = [0, 1, 0], s2 = [1, 0, 0])"
    ],
    "sample_38": [
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(\"banana\")",
        "minimumCost(s1 = \"ba\", s2 = \"nana\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(\"ab\")",
        "minimumCost(\"\")",
        "minimumCost(s = \"numb\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 40])",
        "maxIncreasingGroups(usageLimits = [5, 7, 9])",
        "maxIncreasingGroups(usageLimits = [2, 4, 6, 8])",
        "maxIncreasingGroups([3, 2, 1])",
        "maxIncreasingGroups([3, 5, 7, 10])",
        "maxIncreasingGroups(usageLimits = [4, 3, 2, 1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [5, 1, 6, 2])",
        "maxIncreasingGroups(usageLimits = [3, 5, 2, 7, 4, 9, 8, 6, 1, 3])"
    ],
    "sample_53": [
        "smallestString(\"banana\")",
        "smallestString(s1 = \"abc\")",
        "smallestString(s1 = \"abc\", s2 = \"bca\")",
        "smallestString(s1 = \"ba\", s2 = \"bab\")",
        "smallestString(s = \"ab\")",
        "smallestString(s1 = \"abc\")",
        "smallestString(\"ba\")",
        "smallestString(s1 = \"baa\", s2 = \"aaab\")",
        "smallestString(\"zoo\")",
        "smallestString(?? = 'abracadabra')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1, 2, 3, 4], x = 3)",
        "minAbsoluteDifference(nums = [1,4,2,3], x = 2)",
        "minAbsoluteDifference(nums = [4, 5, 6], x = 3)",
        "minAbsoluteDifference([1,5,3,2,6,4], 2)",
        "minAbsoluteDifference(nums = [4,7,10,12,13], x = 4)",
        "minAbsoluteDifference(nums = [2, 4, 5, 1, 2], x = 2)",
        "minAbsoluteDifference(nums = [3, 1, 1, 5, 9, 2, 6], x = 3)",
        "minAbsoluteDifference(nums = [3,1,-4,2,-1,-5,6], x = 2)",
        "minAbsoluteDifference(nums = [4,5,1,2,1,3,1,1,2], x = 3)",
        "minAbsoluteDifference(nums = [10,11,8,12,4,6,10,2], x = 7)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[0, 1, 2], [1, 0, 3], [2, 3, 0]])",
        "maximizeTheProfit(N = 5, offers = [[1,3,5],[2,4,6]])",
        "maximizeTheProfit(N = 2, offers = [[1, 4, 5], [2, 3, 6]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 3], [1, 2, 4], [2, 3, 5]])",
        "maximizeTheProfit(N = 3, offers = [\n    (1, 2, 3), (2, 3, 4), (3, 4, 5),\n    (4, 5, 6), (5, 6, 7), (6, 7, 8)\n])",
        "maximizeTheProfit(N = 3, offers = [(1, 2, 2), (2, 1, 3), (1, 1, 1)])",
        "maximizeTheProfit(N = 3, offers = [[1,2,2],[2,3,1],[1,3,1]])",
        "maximizeTheProfit(N = 5, offers = [(0, 0, 20), (0, 1, 30), (1, 0, 10), (1, 1, 15), (2, 0, 10)])",
        "maximizeTheProfit(N = 3, offers = [(4, 3, 4), (2, 1, 4), (2, 2, 4)])",
        "maximizeTheProfit(N = 5, offers = [[2, 3, 5], [4, 5, 6], [2, 5, 6], [2, 6, 4], [6, 7, 9]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(s1 = \"banana\", s2 = \"ana\")",
        "splitWordsBySeparator(s1 = \"banana\", s2 = \"ana\")",
        "splitWordsBySeparator(a = [\"this\", \"is\", \"a\", \"sentence\"], b = \" \")",
        "splitWordsBySeparator(a = [\"ab\", \"bc\", \"cd\"], b = \"c\")",
        "splitWordsBySeparator(s1 = \"ba\", s2 = \"nana\", sep = \" \")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\", \"pear\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"abc\", \"def\", \"ghi\"], b = \"d\")",
        "splitWordsBySeparator(s1 = \"babcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcbabcb",
        "splitWordsBySeparator(??)",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"mango\", \"grapes\"], separator = \"a\")"
    ],
    "sample_34": [
        "removeTrailingZeros(s1 = '123', s2 = '5')",
        "removeTrailingZeros(s1 = '0', s2 = '512301')",
        "removeTrailingZeros(s1 = '012345', s2 = '0')",
        "removeTrailingZeros(a = '1000000')",
        "removeTrailingZeros(a = '10001')",
        "removeTrailingZeros(s1 = \"555\")",
        "removeTrailingZeros(s1 = \"abc\", s2 = \"001\")",
        "removeTrailingZeros(s1 = \"530101\")",
        "removeTrailingZeros(s1 = 'ab00', s2 = 'ab')",
        "removeTrailingZeros(s1 = \"512301\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(\"banana\")",
        "makeSmallestPalindrome(s = \"bob\")",
        "makeSmallestPalindrome(s1 = \"banana\", s2 = \"nana\")",
        "makeSmallestPalindrome(\"abcba\")",
        "makeSmallestPalindrome(s1 = \"abcde\", s2 = \"abced\")",
        "makeSmallestPalindrome(s1 = \"ab\", s2 = \"a\")",
        "makeSmallestPalindrome(\"apple\")",
        "makeSmallestPalindrome(??)",
        "makeSmallestPalindrome(??)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 4], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [0, 0, 0, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 0, 0, 0, 1, 0, 1], k = 2)",
        "longestEqualSubarray(nums = [2,2,3,3,3,4,4,4], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 4, 5, 6, 6, 6], k = 2)",
        "longestEqualSubarray(nums = [1,3,1,5,6,8,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 1, 1, 3], k = 4)",
        "longestEqualSubarray(nums = [2, 5, 7, 6, 2, 7, 9, 4], k = 4)",
        "longestEqualSubarray(nums = [1, 2, 2, 1, 2, 1, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9], k = 2)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1, 2, 2, 3, 3, 4, 4, 4, 4], k = 4)",
        "maximumBeauty(nums = [3,1,2,2,1,3], k = 2)",
        "maximumBeauty(nums = [3,5,1,2,4,7], k = 2)",
        "maximumBeauty(nums = [2,3,1,3,2], k = 3)",
        "maximumBeauty(nums = [2,5,1,4,3], k = 1)",
        "maximumBeauty(nums = [1, 5, 4, 6, 7], k = 5)",
        "maximumBeauty(nums = [1, 10, 10, 3, 3, 3, 10, 10], k = 0)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6, 6, 7, 8, 9, 9, 9, 10, 11, 12], k = 4)"
    ],
    "sample_163": [
        "maxSum([1,2,3,4,5,6,7,8,9,10])",
        "maxSum([1, 2, 4])",
        "maxSum([1, 2, 3, 5])",
        "maxSum([2, 2, 1])",
        "maxSum(nums = [1,2,5,1])",
        "maxSum([1, 2, 3, 4, 4, 5, 6, 7])",
        "maxSum([2, 9, 5, 1, 5])",
        "maxSum([3,3,3,4,5,5,5,5])",
        "maxSum([-1,2,3,3,4,5,5,5,4,4])",
        "maxSum(nums = [12, 4, 15, -6, 5, -7, 16])"
    ],
    "sample_151": [
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s = \"abcd\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString(s1 = \"trs\", s2 = \"ng\")",
        "finalString(s1 = \"abcdefg\", s2 = \"hi\")",
        "finalString(s1 = \"hi\", s2 = \"there\")",
        "finalString('rtsng')",
        "finalString(??)",
        "finalString(s1 = \"abc\", s2 = \"d\")",
        "finalString(s1 = \"abcde\", s2 = \"cde\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(??)",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(num = \"12301\")",
        "removeTrailingZeros(s1 = \"512301\", s2 = \"512301\")",
        "removeTrailingZeros(num = \"000456\")",
        "removeTrailingZeros(?? = '123450000')",
        "removeTrailingZeros(num = '35')",
        "removeTrailingZeros(s1 = '00101', s2 = '5')",
        "removeTrailingZeros(s1 = \"12000001\", s2 = \"12000001\")"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(??)",
        "maximumOddBinaryNumber(s = \"ba\")",
        "maximumOddBinaryNumber(\"ba\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"100100\")",
        "maximumOddBinaryNumber(\"101010\")",
        "maximumOddBinaryNumber(s1 = \"10101\", s2 = \"01010\")",
        "maximumOddBinaryNumber(s = \"01110111\")",
        "maximumOddBinaryNumber(\"13579\")",
        "maximumOddBinaryNumber(s = \"1101010101010101\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = ' ')",
        "splitWordsBySeparator(words = [\"the\", \"quick\", \"brown\", \"fox\"], separator = \" \")",
        "splitWordsBySeparator(words = ['apple', 'banana', 'cherry'], separator = 'a')",
        "splitWordsBySeparator(words = ['easy', 'problem', 'test'], separator = ' ')",
        "splitWordsBySeparator(s1 = \"apple,banana,orange\", separator = \", \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\", \"with\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"red\", \"blue\", \"green\", \"yellow\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easy', 'problem', 'beautiful'], separator = 'e')",
        "splitWordsBySeparator(words = [\"apple\",\"banana\",\"orange\",\"kiwi\"], separator = \",\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,2,3,3,3], K = 2)",
        "longestEqualSubarray(A = [1,2,1,2,1], K = 3)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3,1], K = 2)",
        "longestEqualSubarray(my_list = [1,1,1,2,2,2])",
        "longestEqualSubarray(A = [1,2,2,2,2,2,2,2,2,2], K = 2)",
        "longestEqualSubarray(A = [1,2,2,2,3,3,3,3,3], K = 1)",
        "longestEqualSubarray(A = [3,3,1,2,2,2,3,3], K = 2)",
        "longestEqualSubarray(A = [0,0,1,1,0,0,0,1,1,0,0,0,0,1], K = 3)",
        "longestEqualSubarray(A = [1,2,1,3,5,6,2,5], K = 1)",
        "longestEqualSubarray([0, 0, 1, 0, 2, 1, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0], 4)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 2, 3])",
        "countWays(s1 = [1, 2, 3], s2 = [2, 3, 4])",
        "countWays(nums = [0, 0, 1, 0])",
        "countWays(nums = [3,4,2,2,1])",
        "countWays(nums = [3, 2, 2, 4, 1])",
        "countWays(nums = [3, 1, 2, 5])",
        "countWays(nums = [2,3,4,5,5])",
        "countWays(nums = [1, 3, 4, 4, 4])",
        "countWays(nums = [2,3,1,4,5,6])",
        "countWays(nums = [3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 0, 1, 0, 0, 0, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7, 10, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [6, 5, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 5, 8, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 3, 3, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 2, 3, 1, 1, 4, 3, 5, 4, 6], k = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(??)",
        "removeTrailingZeros(s1 = '512301')",
        "removeTrailingZeros(s1 = \"5\", s2 = \"12301\")",
        "removeTrailingZeros(??)",
        "removeTrailingZeros(num = '1000000000000')",
        "removeTrailingZeros(num = \"59\")",
        "removeTrailingZeros(s1 = \"ba00\", s2 = \"nana\")",
        "removeTrailingZeros(num = '950030')",
        "removeTrailingZeros(num = \"0020000\")",
        "removeTrailingZeros(s1 = \"b00\", s2 = \"b05\")"
    ],
    "sample_167": [
        "isAcronym(words = [\"abc\", \"def\"], s = \"abcdef\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cherry\"], s = \"AB\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"Mississippi\"], s = \"Missisipi\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bat\"], s = \"cba\")",
        "isAcronym(words = [\"American\", \"government\"], s = \"AG\")",
        "isAcronym(s1 = \"science\", s2 = \"is\")",
        "isAcronym(words = [\"banana\", \"xylophone\"], s = \"bxylophone\")",
        "isAcronym(words = [\"FAIL\"], s = \"failing\")",
        "isAcronym(words = [\"In\", \"art\"], s = \"A-R-T\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3])",
        "countCompleteSubarrays([1, 1, 2])",
        "countCompleteSubarrays(nums = [2, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4, 4])",
        "countCompleteSubarrays(nums = [1,1,1,2,2,2,2])",
        "countCompleteSubarrays(nums = [0, 0, 1, 2, 2, 0])",
        "countCompleteSubarrays(nums = [0, 1, 0, 2, 1, 1, 3, 2, 0])",
        "countCompleteSubarrays([1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 4, target = 4)",
        "minimumPossibleSum(n = 7, target = 9)",
        "minimumPossibleSum(n = 7, target = 3)",
        "minimumPossibleSum(n = 7, target = 10)",
        "minimumPossibleSum(n = 10, target = 0)",
        "minimumPossibleSum(n = 6, target = 3)",
        "minimumPossibleSum(n = 12, target = 20)",
        "minimumPossibleSum(n = 15, target = 1)"
    ],
    "sample_147": [
        "finalString(s1 = \"hi\", s2 = \"hi\")",
        "finalString(s1 = 'i', s2 = 'n')",
        "finalString(s1 = \"ba\", s2 = \"rtsng\")",
        "finalString(s = \"abc\")",
        "finalString('abracadabra')",
        "finalString(s1 = 'rtsng', s2 = 'tng')",
        "finalString(s1 = \"banana\", s2 = \"ba\")",
        "finalString(s1 = \"hi\", s2 = \"hello\")",
        "finalString(\"bnn\")",
        "finalString(s1 = \"abcdefghijklmnopqrstuvwxyz\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome('abcd')",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s1 = \"ab\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(\"abcde\")",
        "makeSmallestPalindrome('abcdabcd')",
        "makeSmallestPalindrome(s = \"bb\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"acdba\")",
        "makeSmallestPalindrome(\"ddgdddd\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [4, 5, 6]])",
        "maximizeTheProfit(n = 3, offers = [[1,1,1],[2,2,2],[3,3,3]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 0], [1, 0, 1], [0, 1, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 2], [2, 3, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [1, 2, 3], [1, 3, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [3, 4, 6], [4, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1,1,3], [1,2,2], [1,3,2], [2,2,1], [2,3,1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 3, 8], [2, 5, 3], [4, 6, 7]])",
        "maximizeTheProfit(n = 9, offers = [ [2, 1, 6], [5, 3, 2], [1, 7, 2] ])",
        "maximizeTheProfit(n=3, offers = [[1, 3, 6], [2, 3, 5], [2, 1, 4], [1, 3, 3]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 2, 1], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4, 2], target = 3)",
        "maximumJumps([1, 3, 2, 1], 3)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 4, 2], target = 1)",
        "maximumJumps(nums = [1, 2, 3, -1, -2], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 5, 9, 2, 3, 4, 4], target = 3)",
        "maximumJumps(nums = [1, 3, 1, 1, 5, 9, 2, 6, 5, 3, 4], target = 1)",
        "maximumJumps(nums = [10, 2, 1, 0, 5, 9, 2, 4, 6, 7], target = 3)",
        "maximumJumps(nums = [3,2,1,0,4,1,2,1,5,9,2,6,7,3,4,5,6], target = 0)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,2,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,0,1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [2,4,6])",
        "numberOfGoodSubarraySplits(nums = [2,1,3,2,3,1])",
        "numberOfGoodSubarraySplits(nums = [3,4,1,0,2])",
        "numberOfGoodSubarraySplits(my_list = [4, 2, 1, 3])",
        "numberOfGoodSubarraySplits(indexs = [2, 5, 7])",
        "numberOfGoodSubarraySplits(nums = [2, 1, 1, 3, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,1,5,3,6,7,1,5])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(??)",
        "maximumOddBinaryNumber(\"ab\")",
        "maximumOddBinaryNumber(s = \"1110101\")",
        "maximumOddBinaryNumber(\"abc\")",
        "maximumOddBinaryNumber(\"010\")",
        "maximumOddBinaryNumber(s = \"010101010101010\")",
        "maximumOddBinaryNumber('banana')",
        "maximumOddBinaryNumber(s1 = \"10\", s2 = \"100\")",
        "maximumOddBinaryNumber(\"00000\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 5, k = 12)",
        "minimumSum(n = 10, k = 15)",
        "minimumSum(n = 10, k = 15)",
        "minimumSum(k = 3, n = 5)",
        "minimumSum(n = 9, k = 16)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 0, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(??, 2)",
        "makeTheIntegerZero(num1 = -1, num2 = 2)",
        "makeTheIntegerZero(num1 = 0, num2 = 4)",
        "makeTheIntegerZero(num1 = 0b10101010, num2 = 0b01010101)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 0b01010101, num2 = 0b11)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 5, target = 12)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 5, target = 6)",
        "minimumPossibleSum(n = 10, target = 15)",
        "minimumPossibleSum(n = 9, target = 12)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 2, 3, 4, 5, 6], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [0,0,0,1,1,1,1,1,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [2, 1, 0, 3, 2], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 5, 7], modulo = 13, k = 7)",
        "countInterestingSubarrays(nums = [4, 3, 5, 6, 6, 7], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [12, 5, 8, 3], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [17,3,15,2,17,13,17,4], modulo = 5, k = 2)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "maximumBeauty(nums = [0, 1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 3, 1], k = 3)",
        "maximumBeauty(nums = [6, 8, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 5, 3, 6, 2, 4, 3], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 8, 10, 12], k = 7)",
        "maximumBeauty(nums = [0, 2, 6, 3, 1, 4, 5], k = 1)",
        "maximumBeauty(nums = [2, 7, 8, 4, 9, 10, 2], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 5, 8, 9, 8, 7, 8, 8, 6, 5, 4, 2, 1, 8, 8, 8, 6, 8, 8], k = 2)"
    ],
    "sample_148": [
        "finalString(s = \"ponter\")",
        "finalString('ponter')",
        "finalString(\"ponter\")",
        "finalString('pi')",
        "finalString(s1 = \"banana\", s2 = \"anana\")",
        "finalString(s1 = \"banana\")",
        "finalString(s = \"Ponter\")",
        "finalString(s = \"baba\")",
        "finalString(\"pie\")",
        "finalString(\"abcdefghij\")"
    ],
    "sample_231": [
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1,3,4])",
        "countWays(nums = [3, 2, 1, 2])",
        "countWays(s1 = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [4, 3, 1, 2])",
        "countWays(nums = [1,3,2,4])",
        "countWays(sorted_nums = [3, 0, 1, 4])",
        "countWays(nums = [5, 3, 3, 5, 2, 1])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [2,4,6,8])",
        "countBeautifulPairs(my_list = [1,3,5])",
        "countBeautifulPairs(nums = [3, 4, 6, 8])",
        "countBeautifulPairs(nums = [0, 1, 1, 0, 0])",
        "countBeautifulPairs(nums = [2,7,8,1,1])",
        "countBeautifulPairs(nums = [2,3,5,5,5,8,8,9])",
        "countBeautifulPairs(nums = [4,7,13,4,2,5,14])",
        "countBeautifulPairs(s1 = [1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4])",
        "countBeautifulPairs(nums = [1,2,4,8,9,12,16,24,35,8])",
        "countBeautifulPairs(nums = [12, 22, 13, 2, 4, 6, 9, 10, 15])"
    ],
    "sample_77": [
        "makeTheIntegerZero(??)",
        "makeTheIntegerZero(num1 = 0, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(??)",
        "makeTheIntegerZero(num1 = 5, num2 = 15)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = -1, num2 = 0)",
        "makeTheIntegerZero(num1 = 16, num2 = 4)",
        "makeTheIntegerZero(x = 0, y = 1000)",
        "makeTheIntegerZero(num1 = 56, num2 = 34)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(??)",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s1 = \"abcd\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome('abac')",
        "makeSmallestPalindrome(\"abcdefg\")",
        "makeSmallestPalindrome(s1 = \"abcd\", s2 = \"abdc\")",
        "makeSmallestPalindrome(s1 = \"dab\", s2 = \"cba\")",
        "makeSmallestPalindrome(\"abccdeff\")",
        "makeSmallestPalindrome(s = \"vowels\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"HW\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"ab\")",
        "isAcronym(words = [\"I\", \"Love\", \"Python\"], s = \"ILP\")",
        "isAcronym(words = [\"lol\"], s = \"lololo\")",
        "isAcronym(words = [\"apple\", \"pen\"], s = \"apple\")",
        "isAcronym(words = [\"xyz\"], s = \"xyz\")",
        "isAcronym(words = [\"NASA\", \"AMERICA\", \"UN\"])",
        "isAcronym(s1 = \"CO2\", s2 = \"COOKIE\")",
        "isAcronym(words = [\"a\", \"r\", \"c\", \"e\"], s = \"aerocenter\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,2,3,4,5,6,7,8,9])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0])",
        "numberOfGoodSubarraySplits([0,1,1,0,1])",
        "numberOfGoodSubarraySplits([1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,1,0,1,1,0,0])",
        "numberOfGoodSubarraySplits([2,2,3,3])",
        "numberOfGoodSubarraySplits(nums = [2,4,3,1,5])",
        "numberOfGoodSubarraySplits(nums = [4,3,3,2,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [3,5,4,4,3,5,2,1,5,4,3,2,5,5,3,2,3,5,2,5,4,5,5,4])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 0, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 0, 1, 1, 0, 0, 1, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 5, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 7, 11, 16, 22, 28, 37, 44], k = 3)"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 4, k = 1)",
        "minimumSum(k = 2, n = 5)"
    ],
    "sample_227": [
        "countWays(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "countWays(nums = [3, 1, 2])",
        "countWays(nums = [0x3f3f3f3f, -0x3f3f3f3f])",
        "countWays(nums = [-3, -2, -1, 1, 2, 3])",
        "countWays(nums = [1, 2, 3, 5, 6, 7])",
        "countWays(nums = [1, 2, 3, -4])",
        "countWays(nums = [1, 2, 1, 3, 4, 2])",
        "countWays(nums = [5, 2, 1, 5])",
        "countWays(nums = [1, 3, 5, 4, 7, 8, 6, 2, 9, 10])",
        "countWays([-1, 0, 2, -4, -4, -4, 2, 0, 0, 0])"
    ],
    "sample_39": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"baab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s1 = \"ab\", s2 = \"cd\")",
        "minimumCost(s = \"abacada\")",
        "minimumCost(s1 = \"abbb\")",
        "minimumCost(\"bcabc\")",
        "minimumCost(s = \"mqaz\")",
        "minimumCost(s = \"hoor\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LR_R_L\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_R\")",
        "furthestDistanceFromOrigin(\"LR_RL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(\"LR_LL\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"R_LL_LRL\")",
        "furthestDistanceFromOrigin(s1 = \"RR_LR_LL_RR\", s2 = \"L_R_LL_RR\")"
    ],
    "sample_58": [
        "distanceTraveled(??)",
        "distanceTraveled(m = 3, a = 4)",
        "distanceTraveled(m = 5, a = 10)",
        "distanceTraveled(mainTank = 0, additionalTank = 3)",
        "distanceTraveled(m = 8, a = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 5)",
        "distanceTraveled(m = 5, a = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(m = 2, a = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 7)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [2, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 2, 3, 3, 3])",
        "countCompleteSubarrays([1, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "countCompleteSubarrays(nums = [0, 0, 1, 1, 2])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,4,4,5,5,6,6])",
        "countCompleteSubarrays(nums = [4,2,2,1,4,2,2,1])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,2,4,2,1,3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 3, 3, 3, 4, 4, 5, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,2,2,2,3,3,3,3,3], threshold = 5)",
        "longestAlternatingSubarray([-1,-2,-3,-4,-5], 1)",
        "longestAlternatingSubarray(nums = [2, 1, 1, 2, 1, 3, 1, 2, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 5, 10, 4, 7, 6, 3, 8, 9], threshold = 6)"
    ],
    "sample_216": [
        "numberOfPoints([[0, 1], [2, 3], [4, 5]])",
        "numberOfPoints(l = [1, 2], r = [3, 4])",
        "numberOfPoints(nums = [[1,2],[4,5]])",
        "numberOfPoints(nums = [ [1, 2], [3, 4], [5, 6], [7, 8], [9, 10] ])",
        "numberOfPoints(nums = [[1, 5], [6, 9], [2, 4]])",
        "numberOfPoints(nums = [[1, 6], [4, 7], [3, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [5, 7], [10, 12]])",
        "numberOfPoints([[1, 3], [1, 5], [1, 7], [2, 4], [2, 7], [3, 6], [4, 6]])",
        "numberOfPoints([[0, 2], [1, 4], [0, 2], [1, 3], [0, 3]])",
        "numberOfPoints(nums = [\n    [0, 3],\n    [2, 1],\n    [1, 2],\n    [1, 3],\n    [2, 4],\n    [2, 5],\n    [0, 5]\n])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 3])",
        "countBeautifulPairs(my_list = [1, 2, 3])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [10, 15, 20])",
        "countBeautifulPairs(nums = [3, 6, 7])",
        "countBeautifulPairs(nums = [12, 15, 14, 18])",
        "countBeautifulPairs(nums = [2, 3, 5, 12, 13, 21, 24])"
    ],
    "sample_87": [
        "longestAlternatingSubarray([1,2,3,4,5,6], 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 6)",
        "longestAlternatingSubarray(nums = [0,1,2,3,4,5,6,7,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "longestAlternatingSubarray(nums = [0,1,0,1,1,0,1,1,0,1], t = 1)",
        "longestAlternatingSubarray(nums = [0,2,3,4,5,7,8,9], t = 2)",
        "longestAlternatingSubarray(nums = [1,3,5,7,2,5,4,6], t = 2)",
        "longestAlternatingSubarray([3, 5, 4, 3, 8, 9, 4, 3], 6)",
        "longestAlternatingSubarray(nums = [1,3,1,3,2,2,1,4,3,2,2,3,1], t = 1)"
    ],
    "sample_36": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"banana\")",
        "minimumCost(s1 = \"ba\", s2 = \"ab\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aaaa\")",
        "minimumCost(s1 = \"aaab\")",
        "minimumCost(s1 = \"abd\", s2 = \"ab\")",
        "minimumCost(s1 = \"aaabaa\", s2 = \"aabbb\")"
    ],
    "sample_21": [
        "minLength(\"abcde\")",
        "minLength(s1 = \"ABCD\")",
        "minLength(s1 = \"ABCD\")",
        "minLength(s1 = \"ABBA\")",
        "minLength(\"BCD\")",
        "minLength(s1 = \"CD\")",
        "minLength(\"AABBCCD\")",
        "minLength(s = \"ABDC\")",
        "minLength(s = \"A1B2C3\")",
        "minLength
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 1, k = 2)",
        "countInterestingSubarrays(nums = [10, 20, 30, 40, 50], modulo = 10, k = 5)",
        "countInterestingSubarrays([1,2,3,4,5,6,7,8,9], 2, 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [0,1,0,1,1,0], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [2, 4, 6, 4], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,3,2,4,3,3], modulo = 3, k = 2)"
    ],
    "sample_9": [
        "colorTheArray(n = 3, queries = [[0, 0], [1, 1], [2, 0]])",
        "colorTheArray(n = 5, queries = [[0, 2], [0, 3], [1, 4]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 0], [1, 1], [0, 0]])",
        "colorTheArray(n = 5, queries = [[1, 0], [3, 1], [4, 0]])",
        "colorTheArray(n = 10, queries = [[1, 1], [2, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]])",
        "colorTheArray(n = 8, queries = [[3, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[0, 0], [0, 2], [0, 4], [1, 2], [1, 4], [2, 4], [3, 4]])",
        "colorTheArray(n = 6, queries = [[1, 1], [1, 2], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1,1],[0,0],[0,1],[0,2],[1,3]])",
        "colorTheArray(n = 6, queries = [[1,0], [0,3], [1,0], [0,3], [2,2], [0,1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [3, 2, 1, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [3, 1, 2])",
        "maxNonDecreasingLength(nums1 = [1, 5, 2], nums2 = [3, 2, 1])",
        "maxNonDecreasingLength(s1 = [1, 3, 5], s2 = [3, 5, 1])",
        "maxNonDecreasingLength([2, 3, 4, 5], [1, 3, 5, 7])",
        "maxNonDecreasingLength([1, 2, 1, 4], [2, 1, 1, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 3, 4, 4, 5, 5, 5, 5], nums2 = [2, 3, 4, 5, 5, 5, 6, 7, 8, 9])",
        "maxNonDecreasingLength(nums1 = [3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 1,",
        "maxNonDecreasingLength(nums1 = [1, 5, 4, 3, 7, 2], nums2 = [2, 4, 5, 7, 7, 9])",
        "maxNonDecreasingLength(\n    nums1 = [1, 3, 5, 5, 6, 8],\n    nums2 = [3, 2, 5, 6, 6, 8]\n)"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 13)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 7, target = 12)",
        "minimumPossibleSum(n = 10, target = 21)",
        "minimumPossibleSum(n = 10, target = 100)",
        "minimumPossibleSum(n = 9, target = 10)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition([1,2,3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1,3,5,6])",
        "findValueOfPartition(nums = [1,1,2,2,3,3])",
        "findValueOfPartition([1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [2, 5, 9, 12])",
        "findValueOfPartition(nums = [3, 4, 6, 7])",
        "findValueOfPartition(nums = [0, 1, 2, 4, 5, 7, 8, 11, 12])",
        "findValueOfPartition([9,1,1,6,1,2,1])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRRR\")",
        "furthestDistanceFromOrigin(\"LR_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LLR_R_RL_RR\")",
        "furthestDistanceFromOrigin(moves = \"ll_rr__-\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR_L_R_L_R_L_L\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_RR_LL_R_LL_LL_R\")",
        "furthestDistanceFromOrigin(moves = \"LLLLR_RLRL_LR_RL\")",
        "furthestDistanceFromOrigin(moves = \"LLR_RRR_LL_L_RLR\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [1,2,3,4,5])",
        "minimumIndex(nums = [0, 0, 0, 0, 0])",
        "minimumIndex(nums = [2,1,3])",
        "minimumIndex(nums = [3,4,3,2,1])",
        "minimumIndex(nums = [4, 2, 1, 5, 3])",
        "minimumIndex(my_list = [1, 2, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 1, 3, 1, 4, 1, 5, 1])",
        "minimumIndex(nums = [2, 5, 1, 3, 5])",
        "minimumIndex(nums = [2, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minimumIndex(nums = [3, 3, 5, 2, 2, 1])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [4, 1, 3])",
        "semiOrderedPermutation([5, 3, 1, 2, 0])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 7, k = 5)",
        "minimumSum(n = 20, k = 10)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n = 5, k = 6)",
        "minimumSum(n = 8, k = 5)"
    ]
}