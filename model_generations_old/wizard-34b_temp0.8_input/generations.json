{
    "sample_348": [
        "alternatingSubarray(nums = [4, 6, 7, 8, 9, 1])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 9, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 2, 1, 3, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 2, 1, 3, 5, 6])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 2, 3, 1, 5])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 2, 3, 4, 1])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 2, 3, 4, 5, 6, 7, 8, 2, 3, 4])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(a = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(a = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[2, 1], [3, 4], [5, 6]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion([[0, 1, 0], [1, 0, 1], [0, 1, 0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1,2],[3,4]])",
        "matrixSum(a = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum([[1]])",
        "matrixSum(a = [[0, 1], [1, 1]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"orange\", \"grape\"], x=\"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"dates\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"grape\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"cherry\", \"ban\"], x=\"an\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"fedcba\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"defabc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dabc\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"zbxdyc\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"badcfel\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 3)",
        "lengthOfLongestSubsequence(nums = [3, 4, 7, 2, 2], target = 5)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dabc\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays(nums = [1,2,4,8])",
        "maxSubarrays(nums = [2, 4, 6, 8])"
    ],
    "sample_315": [
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [5, 3, 2], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [10, 20, 5], money = 25)",
        "buyChoco(prices = [10, 4, 5], money = 19)",
        "buyChoco(prices = [10, 5, 20, 50], money = 20)",
        "buyChoco(prices = [5, 3, 1, 7], money = 10)",
        "buyChoco(prices = [5, 3, 10, 6], money = 11)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 5, r = 10)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 5)",
        "countSubMultisets(nums = [1,2,3], l = 2, r = 5)",
        "countSubMultisets(nums = [1, 2, 3], l = 5, r = 10)",
        "countSubMultisets(nums = [1,2,3], l = 4, r = 5)",
        "countSubMultisets(nums = [1, 2], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 2, r = 6)",
        "countSubMultisets(nums = [1, 2, 3, 4], l = 5, r = 10)"
    ],
    "sample_322": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 45)",
        "isFascinating(n = 9)",
        "isFascinating(n = 12)",
        "isFascinating(n = 153)",
        "isFascinating(n = 153)",
        "isFascinating(n = 48)",
        "isFascinating(n = 32)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"fedcba\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edabc\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edabc\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edabc\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edabc\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"fghij\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edcba\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"fdbac\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"defabc\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 5, 1, 2, 3])",
        "minimumCoins(prices = [4, 2, 5, 1, 3])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 30)",
        "accountBalanceAfterPurchase(p = 19)",
        "accountBalanceAfterPurchase(p = 110)",
        "accountBalanceAfterPurchase(p = 110)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 1, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 4, 4])",
        "minOperations(nums = [2, 4, 4, 3])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums=[1,2,3,4,5,6,7,8,9])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n=3, limit=1)",
        "distributeCandies(n=5, limit=2)"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"abd\", x = 10)",
        "minOperations(s1 = \"abcda\", s2 = \"adcba\", x = 2)",
        "minOperations(s1 = \"abcda\", s2 = \"deefb\", x = 3)",
        "minOperations(s1 = \"abcda\", s2 = \"adcbc\", x = 1)",
        "minOperations(s1 = \"abcde\", s2 = \"axcye\", x = 1)",
        "minOperations(s1 = \"abcda\", s2 = \"fbcac\", x = 2)",
        "minOperations(s1 = \"abcda\", s2 = \"dea\", x = 2)",
        "minOperations(s1 = \"aaaa\", s2 = \"bbbb\", x = 1)",
        "minOperations(s1 = \"abcde\", s2 = \"ebcda\", x = 3)",
        "minOperations(s1 = \"abcde\", s2 = \"abcxy\", x = 3)"
    ],
    "sample_340": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 3)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 3, y = 2, z = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums=[1, 2, 3, 4, 5], k=2)",
        "minOperations(nums = [2, 2, 2, 3, 1], k = 2)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(\"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcbaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"abcddddd\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 4, 4])",
        "isGood(a = [0, 1, 2, 3, 4, 4])",
        "isGood(a = [0, 1, 2, 2])",
        "isGood(a = [1, 2, 3, 4, 4, 5, 6])",
        "isGood(a = [1, 2, 3, 4, 4, 5, 6, 7])",
        "isGood(a = [0, 2, 2, 1, 3, 4])",
        "isGood(a = [0, 2, 3, 1, 1, 4, 5])",
        "isGood(a = [2, 1, 0, 2])",
        "isGood(a = [0, 2, 2, 1, 4, 4])",
        "isGood(a = [0, 1, 1, 2, 3, 4, 5, 5, 6, 7, 7])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 3, 3])",
        "minGroupsForValidAssignment(nums = [4, 3, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 5, 6, 7, 8])",
        "minGroupsForValidAssignment(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"9\", \"prev\", \"4\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"9\", \"prev\", \"1\", \"prev\", \"7\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yxy\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\", \"yy\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"ba\", \"ab\", \"aba\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"11001100\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101001\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101010\", k = 3)",
        "shortestBeautifulSubstring(s = \"1110001100011\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010101110000\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011111001101111011\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011001011110\", k = 2)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6, 7])",
        "minimumRightShifts(nums=[1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 1])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1111111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"111000111\")",
        "minimumSteps(s = \"10011\")",
        "minimumSteps(s = \"10011\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"0111\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"fgh\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdab\", s3 = \"abef\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdab\", s3 = \"abef\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abdf\", s3 = \"abxyz\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"acdf\", s3 = \"acde\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abfde\", s3 = \"aqqde\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"abde\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"acd\")",
        "canMakeSubsequence(str1 = \"abcc\", str2 = \"abcde\")",
        "canMakeSubsequence(str1 = \"xyzz\", str2 = \"xzzy\")"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0,1,2,3,4])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums=[0,1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5,6,7])",
        "isGood(nums = [3, 0, 1, 2, 4])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [10, 11])",
        "relocateMarbles(nums = [5, 8, 9, 6, 5, 6], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [10, 11])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [6, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 2, 9], moveFrom = [2, 6], moveTo = [1, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [4, 5, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8], moveTo = [7])",
        "relocateMarbles(nums=[5, 6, 8, 9], moveFrom=[6, 8], moveTo=[1, 3])",
        "relocateMarbles(nums=[5, 6, 7, 8, 9], moveFrom=[7, 6, 5], moveTo=[8, 9, 5])",
        "relocateMarbles(nums = [5, 3, 9, 6, 8, 5, 3], moveFrom = [3, 9], moveTo = [4, 6])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [3,1,1,2,2,4])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [3,1,2,3,2,1,3])"
    ],
    "sample_303": [
        "countSeniors(details = [\"age: 50\", \"age: 65\", \"age: 70\", \"age: 45\"])",
        "countSeniors(details = [\"John Doe 700101\", \"Jane Smith 550801\"])",
        "countSeniors(details = [\"John, 72, M\", \"Mary, 55, F\", \"David, 68, M\"])",
        "countSeniors(details = [\"John, 75\", \"Emily, 50\", \"Bob, 62\"])",
        "countSeniors(details = [\"John, 71\", \"Jane, 65\", \"Bob, 22\", \"Alice, 78\"])",
        "countSeniors(details = [\"abc101def\", \"uvw23jklm\", \"nop56qrs\", \"tuv78wxyz\"])",
        "countSeniors(details = [\"John,Doe,10/01/1955\", \"Jane,Doe,12/12/1945\", \"Bob,Smith,05/15/1990\"])",
        "countSeniors(details = [\"name,age,city,75\", \"name2,age2,city2,55\"])",
        "countSeniors(details = [\"Joe, 75, M\", \"Amy, 62, F\", \"Bob, 42, M\", \"Karen, 78, F\"])",
        "countSeniors(details = [\"John Smith, 72, Developer\", \"Mary Johnson, 58, Teacher\", \"Mark Taylor, 42, Lawyer\", \"Emily Nguyen, 83, Doctor\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"aabcbdbd\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaad\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabc\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaadc\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"adc\")",
        "canBeEqual(s1 = \"aabc\", s2 = \"abca\")",
        "canBeEqual(s1 = \"aac\", s2 = \"bbd\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xzy\", s3 = \"yxy\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"dog\", s3 = \"fish\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 1)"
    ],
    "sample_257": [
        "minimumSum(nums = [4, 2, 1, 6, 7])",
        "minimumSum(nums = [1, 3, 5, 7, 9])",
        "minimumSum(nums = [4, 2, 1, 3])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSum(nums = [4, 2, 5, 1, 3])",
        "minimumSum(nums = [2, 4, 7, 9])",
        "minimumSum(nums = [4, 2, 1, 6, 1, 2, 4])",
        "minimumSum(nums = [5, 4, 2, 2, 2])",
        "minimumSum(nums = [3, 2, 1, 4])",
        "minimumSum(nums = [3, 5, 7, 2, 8, 4])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"catdog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"catdog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"banana\", \"dog\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\", \"cc\"])",
        "minimizeConcatenatedLength(words = [\"c\", \"b\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"c\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"aa\", \"a\", \"cd\", \"c\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"111000111\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"00011000\", k = 2)",
        "shortestBeautifulSubstring(s = \"0001001\", k = 2)",
        "shortestBeautifulSubstring(s = \"001011010\", k = 3)",
        "shortestBeautifulSubstring(s = \"001011000\", k = 3)",
        "shortestBeautifulSubstring(s = \"0000101001\", k = 2)",
        "shortestBeautifulSubstring(s = \"00101000111\", k = 2)",
        "shortestBeautifulSubstring(s = \"000000011111000001\", k = 3)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"cat\",\"banana\",\"dog\",\"nana\"])",
        "minimizeConcatenatedLength(words = [\"aa\",\"bb\",\"cc\"])",
        "minimizeConcatenatedLength(words = [\"aa\",\"bb\",\"cc\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\", \"god\", \"act\"])",
        "minimizeConcatenatedLength(words = [\"short\", \"longer\", \"longest\"])",
        "minimizeConcatenatedLength(words = [\"aa\",\"bbb\",\"cccc\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"mango\"])",
        "minimizeConcatenatedLength(words = [\"hello\", \"world\", \"hi\", \"greetings\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"bcd\",\"cde\",\"def\"])",
        "minimizeConcatenatedLength(words = [\"short\", \"long\", \"c\", \"p\", \"a\", \"t\", \"s\", \"e\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums=[1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums=[1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums=[1,2,3,4,5,6,7])",
        "alternatingSubarray(nums = [4,5,6,7,8,1,2,3])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "findMaximumLength(nums = [1,3,2,5])",
        "findMaximumLength(nums = [1,3,2,4,5,6])",
        "findMaximumLength(nums = [2, 1, 5, 3, 6])",
        "findMaximumLength(nums = [2, 2, 3, 4, 5, 6, 7])"
    ],
    "sample_302": [
        "countSeniors(details = [\"1990-01-01\", \"1980-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"age:45\", \"age:65\", \"age:75\"])",
        "countSeniors(details = [\"1990-12-12\", \"1950-09-01\"])",
        "countSeniors(details = [\"John,1980\", \"Jane,1970\", \"Bob,1960\"])",
        "countSeniors(details = [\"Ms. Alice, born in 1945\", \"Mr. Bob, born in 1999\"])",
        "countSeniors(details = [\"John 1978\", \"Mary 1955\", \"David 1982\"])",
        "countSeniors(details = [\"John,1990-01-01\", \"Mary,1955-05-30\", \"David,2000-03-14\"])",
        "countSeniors(details = [\"1990-10-21\", \"1950-09-05\", \"1985-11-25\"])",
        "countSeniors(details = [\"2000-11-25\", \"1950-08-16\", \"2001-12-05\"])",
        "countSeniors(details = [\"19951201\", \"19891125\", \"19700915\", \"20000520\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dabc\")",
        "canBeEqual(s1 = \"123\", s2 = \"321\")",
        "canBeEqual(s1 = \"aaz\", s2 = \"zaz\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [2, 3, 1, 4, 2])",
        "minimumCoins(prices = [1, 2, 5, 3, 6, 8])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5])",
        "minimumSeconds(A = [0,1,2,3,4])",
        "minimumSeconds(A = [1,1,1])",
        "minimumSeconds(A = [4, 2, 2, 5, 1, 5, 3])",
        "minimumSeconds(A = [1, 3, 5, 7])",
        "minimumSeconds(A = [1, 2, 2, 3, 3])",
        "minimumSeconds(A = [3, 2, 1, 2, 3, 4, 2, 1, 2, 3, 4])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"yx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yx\", \"kk\", \"kk\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yx\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyxy\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yyx\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yx\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\", \"abba\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6, 7])",
        "minSum(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 0])",
        "minSum(nums1 = [1, 3, 5, 0], nums2 = [8, 2, 4, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 6])",
        "minSum(nums1 = [1, 2, 3, 4, 0], nums2 = [4, 5, 6, 7])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"x\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"z\")",
        "findWordsContaining(words = [], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"x\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"x\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"z\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 4)",
        "maxSum(nums = [-1, -2, 3, 4, -2], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 1, k = 3)",
        "maxSum(nums = [-1, -2, 3, -4, 5, -6], m = 2, k = 2)",
        "maxSum(nums = [3, 1, 5, 2, 4], m = 3, k = 3)",
        "maxSum(nums = [2, 4, 1, 7, 5, 3], m = 3, k = 3)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2], moveFrom = [2], moveTo = [])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [4, 2, 1, 3])",
        "minimumRightShifts(nums = [2, 4, 1, 3, 5])"
    ],
    "sample_314": [
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [3, 2, 5], money = 5)",
        "buyChoco(prices = [5, 3, 7], money = 10)",
        "buyChoco(prices = [5, 3, 7], money = 10)",
        "buyChoco(prices = [4, 5, 6, 7], money = 10)",
        "buyChoco(prices = [4, 5, 3, 2], money = 10)",
        "buyChoco(prices = [10, 20, 5], money = 25)",
        "buyChoco(prices = [4, 5, 2, 9], money = 10)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 100)",
        "lengthOfLongestSubsequence(nums = [3, 1, 5, 2, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 1, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [3, 4, 5, 6], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 24)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abacdfgdcaba\")",
        "longestSemiRepetitiveSubstring(s = \"abacab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbaabbb\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"beautiful\"], x = \"o\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words=[\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=[\"prev\", \"prev\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"3\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcbc\")"
    ],
    "sample_255": [
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3,5,1,2,4])",
        "minimumSum(nums = [3,2,1,5,6,4])",
        "minimumSum(nums = [3,2,5,4,7])",
        "minimumSum(nums = [3, 4, 7, 5, 2, 1])",
        "minimumSum(nums = [5, 8, 1, 3, 2])",
        "minimumSum(nums=[3,4,5,6,7])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 2, 4], target = 5)"
    ],
    "sample_368": [
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"apple\")",
        "sortVowels(s = \"imply\")",
        "sortVowels(s = \"imply\")",
        "sortVowels(s = \"HiLumpY\")",
        "sortVowels(s = \"liMpH\")",
        "sortVowels(s = \"hEllo\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6]])",
        "matrixSum(nums = [[1,2,3],[4,5,6]])",
        "matrixSum(nums = [[1,3,5],[2,4,6]])",
        "matrixSum(nums = [[1,3,2],[4,5,6],[7,8,9]])",
        "matrixSum(nums=[[1,2],[3,4]])",
        "matrixSum(nums = [[1,3],[5,7]])",
        "matrixSum([[1, 5, 3], [4, 2, 6], [7, 8, 9]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [3, 2, 5, 0, 4])",
        "maximumTripletValue(nums = [1, 5, 3, 9])",
        "maximumTripletValue(nums = [2, 5, 1, 9, 3])",
        "maximumTripletValue(nums = [2, 1, 3, 2, 2, 2, 2, 2])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 6, 1, 7])",
        "alternatingSubarray(nums = [4, 2, 4, 4, 2, 2])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7])",
        "alternatingSubarray(nums = [4, 2, 2, 4, 2, 2, 4])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 5)",
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 12)",
        "beautifulSubstrings(s = \"abababa\", k = 3)",
        "beautifulSubstrings(s = \"bella\", k = 2)",
        "beautifulSubstrings(s = \"aaa\", k = 3)"
    ],
    "sample_449": [
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"abcabc\")",
        "minChanges(s = \"abcabc\")",
        "minChanges(s = \"abcabc\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"aabbcc\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"101010\")",
        "minimumSteps(s = \"0010111\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"2010-01-01\"])",
        "countSeniors(details = [\"ABC123456789\", \"DEF123456789\", \"GHI123456789\"])",
        "countSeniors(details = [\"19900101\", \"20000101\", \"20100101\"])",
        "countSeniors(details = [\"20010101John\", \"19500101Alice\", \"19900101Bob\"])",
        "countSeniors(details = [\"19980101A1234\",\"19990202B5678\",\"20000303C9012\"])",
        "countSeniors(details = [\"SMITHJ01011990\", \"JOHNSM02021970\"])",
        "countSeniors(details = [\"John20y\", \"Mary30n\", \"Peter50y\"])",
        "countSeniors(details = [\"2001-01-01_25_abc\", \"2002-02-02_60_xyz\"])",
        "countSeniors(details = [\"John 75 25000\",\"Mary 65 30000\",\"Bob 45 40000\"])",
        "countSeniors(details = [\"19981020A01\", \"19981010B60\", \"19981001C01\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 2])",
        "minGroupsForValidAssignment(nums = [4, 3, 3, 4, 4, 4, 3, 3])",
        "minGroupsForValidAssignment(nums = [3,2,1,2,3,4,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [3, 4, 5, 5, 8, 9, 2, 6, 8, 8, 9, 10])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], k = 5)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]], k = 5)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]], k = 5)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 3)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], k = 5)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], k = 3)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1], [3, 0], [3, 1], [4, 0], [4, 1]], k = 2)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, -2, 0, 3], m = 2, k = 2)",
        "maxSum(nums = [-1, -2, -3], m = 1, k = 2)",
        "maxSum(nums = [2, 4, 2, 8, 0, 0], m = 2, k = 3)",
        "maxSum(nums = [-1, 3, 5, 2, 4], m = 2, k = 3)",
        "maxSum(nums = [2, 1, 4, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, -2, 3, -2, 5, 4, -2], m = 2, k = 2)"
    ],
    "sample_452": [
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbb\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 4, 3])",
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 1, 2])",
        "minOperations(nums1 = [1, 2], nums2 = [3, 4])",
        "minOperations(nums1 = [1, 3, 5, 2, 4], nums2 = [2, 4, 1, 3, 5])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 5, 4])",
        "minOperations(nums1 = [1, 3, 5, 2], nums2 = [2, 3, 1, 5])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 1, 4])",
        "minOperations(nums1=[1, 2, 3, 4], nums2=[2, 1, 4, 3])",
        "minOperations(nums1 = [1, 2], nums2 = [3, 4])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"01101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11001100\", k = 2)",
        "shortestBeautifulSubstring(s = \"000111000\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"001100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101001101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011001001\", k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums=[1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums=[1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [5, 1, -3, 7, -1, 9])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n=3, limit=1)",
        "distributeCandies(n=6, limit=2)",
        "distributeCandies(n=4, limit=1)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums=[1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [4,3,3,1])",
        "minGroupsForValidAssignment(nums = [3,2,5,4,7])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6, 7])",
        "minSum(nums1 = [1,2,3,4], nums2 = [5,6,7,8])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 1, 2])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 0, 4])",
        "minSum(nums1 = [1,2,3,4], nums2 = [2,3,4,5])"
    ],
    "sample_453": [
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abcdef\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"abcba\", k = 2)",
        "beautifulSubstrings(s = \"xyz\", k = 2)",
        "beautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\", k = 5)",
        "beautifulSubstrings(s = \"vowels\", k = 2)",
        "beautifulSubstrings(s = \"abacdfg\", k = 3)",
        "beautifulSubstrings(s = \"xyzaiu\", k = 2)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abstemious\", k = 4)",
        "beautifulSubstrings(s = \"abstemious\", k = 3)",
        "beautifulSubstrings(s = \"abaebi\", k = 4)",
        "beautifulSubstrings(s = \"abcdeio\", k = 5)",
        "beautifulSubstrings(s = \"aei\", k = 5)"
    ],
    "sample_369": [
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"YlmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"Hippo\")",
        "sortVowels(s = \"Limp\")",
        "sortVowels(s = \"pYmphL\")",
        "sortVowels(s = 'phlYmp')"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 2])",
        "minimumSeconds(nums = [1,2,2])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [2, 3, 1, 5, 4])",
        "minimumSeconds(nums = [2, 3, 1, 5, 4])",
        "minimumSeconds(nums = [2, 3, 5, 7])",
        "minimumSeconds(nums = [2, 3, 1, 2])",
        "minimumSeconds(nums = [2, 3, 1, 2, 2, 4])",
        "minimumSeconds(nums = [2, 1, 4, 3, 2, 4, 1])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 4, 5, 6, 7])",
        "minimumSum(nums = [2, 3, 5, 7, 9])",
        "minimumSum(nums = [2, 3, 5, 7, 9])",
        "minimumSum(nums = [2, 3, 5, 6, 8])",
        "minimumSum(nums = [4, 2, 1, 6, 5])",
        "minimumSum(nums = [2, 3, 5, 7])",
        "minimumSum(nums = [4, 2, 1, 3, 5])",
        "minimumSum(nums = [3, 5, 2, 9, 1])",
        "minimumSum(nums = [4, 3, 2, 1, 5, 6])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 6)",
        "minOperations(nums = [2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [4, 3, 2, 6, 7, 5], k = 3)",
        "minOperations(nums = [7, 3, 5, 2, 8, 1, 4], k = 2)",
        "minOperations(nums = [5, 6, 1, 3, 2, 4, 2, 1], k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 1, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 4)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(A = [3, 4, 7, 6, 4], m = 2, k = 3)",
        "maxSum(A = [3, 4, 3, 2, 4], m = 1, k = 2)",
        "maxSum(A = [0, 0, 1, 1, 1, 0, 0, 1], m = 2, k = 4)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"00100\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays(nums = [1, 2, 4, 8, 16])",
        "maxSubarrays(nums = [1, 2, 4, 8, 16])",
        "maxSubarrays(nums = [1, 2, 4, 8, 16])",
        "maxSubarrays(nums = [1, 2, 4, 8, 16])",
        "maxSubarrays(nums=[1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [2, 3, 4, 1, 6, 7, 1, 3, 7])",
        "maxSubarrays(nums = [3, 4, 5, 2, 1, 8, 9, 6, 5, 4, 7])"
    ],
    "sample_319": [
        "buyChoco(prices = [10, 20], money = 30)",
        "buyChoco(prices = [10, 20], money = 30)",
        "buyChoco(prices = [10, 20], money = 30)",
        "buyChoco(prices = [10, 20], money = 30)",
        "buyChoco(prices = [3, 2], money = 5)",
        "buyChoco(prices = [4, 5], money = 9)",
        "buyChoco(prices = [10, 5], money = 15)",
        "buyChoco(prices = [5, 3], money = 10)",
        "buyChoco(prices = [5, 3], money = 10)",
        "buyChoco(prices = [10, 5, 20], money = 15)"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 2, 1, 1, 4, 4])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums=[1, 2, 3, 4, 5], k=3)",
        "minOperations(nums=[1, 2, 3, 4, 5], k=3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 4], k = 3)",
        "minOperations(nums = [4, 3, 2, 6], k = 2)",
        "minOperations(nums = [4, 3, 2, 6, 7, 1], k = 3)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6], k=3)"
    ],
    "sample_363": [
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 1, 3, 4, 5])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 2)",
        "isFascinating(n = 9)",
        "isFascinating(n = 9)",
        "isFascinating(n = 15)",
        "isFascinating(n = 987654)",
        "isFascinating(n = 98)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3,4,4])",
        "isGood(nums = [1,2,3,4,5,5])",
        "isGood(nums = [1,2,3,4,5,5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 3, 2, 2])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10,10])",
        "isGood(nums = [1,2,3,4,5,6,7,7])",
        "isGood(nums = [2, 3, 3, 4, 5])",
        "isGood(nums = [2, 1, 3, 4, 4])",
        "isGood(nums = [2, 3, 4, 5, 5, 6])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [2, 3, 5, 7])",
        "minimumSeconds(nums = [2, 3, 5, 7])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [2, 3, 5, 7, 9])",
        "minimumSeconds(nums = [2, 3, 5, 1, 2])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumSeconds(nums = [2, 3, 5, 7, 11])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [0])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4])",
        "minimumRightShifts(nums = [1, 0, 0])",
        "minimumRightShifts(nums=[0, 1, 2, 3, 4, 5])",
        "minimumRightShifts(nums=[1])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 6])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 3, 4, 2])",
        "isGood(nums = [4, 3, 2, 1])",
        "isGood(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "isGood(nums = [1, 3, 2, 4])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2], nums2 = [3, 4])",
        "minOperations(nums1 = [2, 3, 1], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2], nums2 = [3])",
        "minOperations(nums1 = [2, 3], nums2 = [2, 3])",
        "minOperations([1,2,3,4,5], [6,7,8,9,10])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [2,4,6,8,10])",
        "minOperations(nums1 = [3, 3, 1], nums2 = [2, 4, 3])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1100110\", k = 3)",
        "shortestBeautifulSubstring(s = \"1100110\", k = 3)",
        "shortestBeautifulSubstring(s = \"111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11001100\", k = 3)",
        "shortestBeautifulSubstring(s = \"11001100\", k = 3)",
        "shortestBeautifulSubstring(s = \"1234567890\", k = 3)",
        "shortestBeautifulSubstring(s = \"1234567890\", k = 3)",
        "shortestBeautifulSubstring(s = \"11001101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101011\", k = 3)",
        "shortestBeautifulSubstring(s = \"123456789\", k = 5)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 3, 5, 7, 9, 11])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 2, 1])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 4, 5, 6, 7])",
        "minGroupsForValidAssignment(nums = [2, 5, 4, 2, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 5, 7, 4, 8, 3])"
    ],
    "sample_289": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"10111\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"0011\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 2)",
        "lengthOfLongestSubsequence(nums = [4, 2, 6, 1, 9, 5, 8, 10, 3, 12], target = 1)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [2,3,1,5,4])",
        "minimumSum(nums = [1,2,3,4,5,6,7])",
        "minimumSum(nums = [2,3,4,5,1])",
        "minimumSum(nums = [2,4,7,3,5,1])",
        "minimumSum(nums = [8,4,5,2,10])",
        "minimumSum(nums = [8, 4, 6, 9])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, -1, -2, 3], m = 2, k = 2)",
        "maxSum(nums = [2, 3, 4, 5, 6], m = 2, k = 2)",
        "maxSum(nums = [2, 4, 7, 5, 3, 8], m = 3, k = 3)",
        "maxSum(nums = [-2, 1, 0, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, -10, 5, 7, 2, 3], m = 3, k = 4)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abef\", s3 = \"abcf\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")"
    ],
    "sample_427": [
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [3, 1, 4, 1, 5, 9])",
        "minOperations(nums = [3, 6, 3, 4, 4])",
        "minOperations(nums = [1,2,3,4,5,6,7])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [2, 4, 1, 5, 8, 3])",
        "minOperations(nums = [1, 2, 2, 4, 4, 4, 7])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 1, 2, 5, 1, 2, 5])",
        "minimumCoins(prices = [2, 5, 1, 3, 4])",
        "minimumCoins(prices = [2, 4, 7, 1, 5, 3])",
        "minimumCoins(prices = [2, 3, 1, 2, 4])",
        "minimumCoins(prices = [2, 4, 5, 6, 8])",
        "minimumCoins(prices = [2, 3, 1, 2, 5])",
        "minimumCoins(prices = [2, 3, 5, 6, 8])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minimumSeconds(nums=[1,2,2,3,4,5])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [2, 2, 1, 2, 4])",
        "minimumSeconds(nums = [3, 2, 1, 2, 4, 5, 2, 3])",
        "minimumSeconds(nums = [5, 2, 3, 1, 6, 4])",
        "minimumSeconds(nums = [1,1,1,2,3,4,5,6])",
        "minimumSeconds(nums = [1,2,2,3,3,4])"
    ],
    "sample_448": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abba\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [4, 2, 1, 5, 3], limit = 3)",
        "lexicographicallySmallestArray(nums = [4, 2, 1, 5, 3], limit = 2)",
        "lexicographicallySmallestArray(nums = [4, 2, 1, 5, 3], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [5, 3, 1, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [5, 3, 8, 1, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [4, 2, 1, 3, 5], limit = 3)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums=[1,2,3])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts(nums = [1,1,1])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [-1, -2, -3, -4, -5, -6])",
        "maximumTripletValue(nums = [3, 7, 4, 5])",
        "maximumTripletValue(nums = [-1, -2, 0, 3, 100])",
        "maximumTripletValue(nums = [-3, -5, 2, 5])",
        "maximumTripletValue(nums = [-3, 1, 3, 4, -1, -2, 0, 2])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcdefgh\", k = 3)",
        "beautifulSubstrings(s = \"rhythm\", k = 2)",
        "beautifulSubstrings(s = \"abstemious\", k = 10)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"python\", k = 4)",
        "beautifulSubstrings(s = \"abababa\", k = 3)",
        "beautifulSubstrings(s = \"abcdea\", k = 5)",
        "beautifulSubstrings(s = \"xyzzazzy\", k = 2)"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)"
    ],
    "sample_462": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n=10, limit=2)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [2, 3, 4], nums2 = [1, 5, 6])",
        "minOperations(nums1 = [2, 3, 4], nums2 = [1, 5, 6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [2, 3, 1], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [2, 3, 1], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 3], nums2 = [2, 4])",
        "minOperations(nums1 = [1, 3], nums2 = [2, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])"
    ],
    "sample_426": [
        "minOperations(nums = [2, 2, 2, 3, 3, 1, 1])",
        "minOperations(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minOperations(nums = [2, 2, 2, 4, 4, 4, 4])",
        "minOperations(nums = [2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [3, 8, 6, 1, 5, 9, 2, 7])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"101001101\", k = 3)",
        "shortestBeautifulSubstring(s = \"011011011\", k = 3)",
        "shortestBeautifulSubstring(s = \"011011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"10110111\", k = 2)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [2, 3, 1, 5, 4])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [1, 3, 5, 7, 9])",
        "minimumSeconds(nums = [2, 5, 1, 3, 4])",
        "minimumSeconds(nums = [5, 2, 3, 1, 4])",
        "minimumSeconds(nums = [0, 0, 0, 0, 0, 0])",
        "minimumSeconds(nums = [1,2,2,3,3,4,5,6])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [3, 1, 4, 1, 5, 9])",
        "minOperations(nums = [3, 1, 4, 1, 5])",
        "minOperations(nums=[1,2,3,4,5,6])",
        "minOperations(nums = [3, 4, 5, 6, 7])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [6, 3, 5, 2, 1, 8])",
        "minOperations(nums=[2, 4, 1, 3, 5, 6, 2, 4, 1, 3, 5, 6])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 1, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 4, 7, 11])",
        "alternatingSubarray(nums = [1, 3, 5, 3, 1, 4, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 4, 3, 1, 4, 2, 1, 3, 5, 4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [3,3,3,3,3])",
        "minLengthAfterRemovals(nums=[1,1,1,2,2,2])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 2])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"yxz\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bcd\", \"dcb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"a\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"a\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xy\", \"yx\", \"zy\", \"zzy\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"abcf\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabbccddeeff\")",
        "longestSemiRepetitiveSubstring(s = \"abccba\")",
        "longestSemiRepetitiveSubstring(s = \"abccbaabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbb\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5,6,7], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 1)",
        "maxSum(nums = [3, 1, 5, 2, 6, 4], m = 2, k = 3)",
        "maxSum(nums = [3,2,1,5,4], m = 2, k = 2)",
        "maxSum(nums = [3,2,1,2,4,5,6,7,8,9], m = 3, k = 4)",
        "maxSum(nums = [2,5,1,3,6,4,8,9,10], m = 3, k = 4)",
        "maxSum(nums = [2,3,1,4,5,2], m = 2, k = 3)",
        "maxSum(nums = [2,5,1,4,9,3], m = 2, k = 3)",
        "maxSum(nums = [1, -2, 1, 2], m = 3, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"cherry\"], x=\"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [2,3,4])",
        "relocateMarbles(nums=[1,2,3], moveFrom=[1,2], moveTo=[2,3])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,3], moveTo = [2,4])",
        "relocateMarbles(nums=[1,2,3,4], moveFrom=[1,2], moveTo=[3,4])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [3,2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 3], moveTo = [1, 4])",
        "relocateMarbles(nums=[1,2,2], moveFrom=[1,2], moveTo=[2,1])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [3, 1, 5, 7, 9])",
        "maximumTripletValue(nums = [3, 4, 5, 6, 7])",
        "maximumTripletValue(nums = [3, 5, 2, 1, 7])",
        "maximumTripletValue(nums = [3, 2, 1, 2])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababaa\")",
        "longestSemiRepetitiveSubstring(s = \"abccbcbbbcc\")",
        "longestSemiRepetitiveSubstring(\"bananas\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"tac\", \"god\", \"act\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zxy\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyxy\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"tac\", \"dog\", \"god\", \"act\"])",
        "maximumNumberOfStringPairs(words = [\"apple\", \"pear\", \"banana\", \"orange\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"hij\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"hij\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"fgh\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdab\", s3 = \"abac\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"dog\", s3 = \"fish\")",
        "findMinimumOperations(s1 = \"abx\", s2 = \"axx\", s3 = \"ayx\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"aef\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"adc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"dog\", s3 = \"doa\")"
    ],
    "sample_324": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 100)",
        "isFascinating(n = 1)",
        "isFascinating(n = 123456)",
        "isFascinating(n = 3)",
        "isFascinating(n = 1234)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1,2,5,10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9])",
        "minimumCoins(prices = [1,2,3,4,5,6])",
        "minimumCoins(prices = [1,2,3,4,5,6])",
        "minimumCoins(prices = [2,5,3,6])",
        "minimumCoins(prices=[2, 4, 3, 1, 5])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7])",
        "minGroupsForValidAssignment(nums = [3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [4,3,4,3,2,4,4,4])",
        "minGroupsForValidAssignment(nums=[3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [4,3,4,3,1,1,1,2,2,2,1,1,2])",
        "minGroupsForValidAssignment(nums = [5,2,6,5,5,4,2,7,1,2,6,5])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [5, 3, 2], money = 5)",
        "buyChoco(prices = [2, 3, 5], money = 5)",
        "buyChoco(prices = [2, 3, 5, 6], money = 5)",
        "buyChoco(prices = [2, 5, 1], money = 7)",
        "buyChoco(prices = [4, 5, 1, 3], money = 7)",
        "buyChoco(prices = [1, 3, 5, 7], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xa\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"ss\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"ss\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"tac\", \"god\", \"act\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ba\", \"cba\", \"cbba\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\", \"xx\", \"yy\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"yxz\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xa\", \"aa\", \"ac\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"llo\", \"l\", \"lo\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"olleh\", \"world\", \"lorem\", \"tema\", \"act\", \"fact\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"leotced\")",
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"letcode\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"tEcedlo\")",
        "sortVowels(s = \"ElEctrician\")",
        "sortVowels(s = \"tEStIng\")",
        "sortVowels(s = \"tEcediL\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 1, 1])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [2, 3, 5, 7])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_307": [
        "countSeniors(details = [\"abc1980\", \"def2021\", \"ghi1970\", \"jkl2000\"])",
        "countSeniors(details = [\"john1970\", \"mary1980\", \"jane1965\"])",
        "countSeniors(details = [\"19900101\", \"19910102\", \"19800103\"])",
        "countSeniors(details = [\"age:70,name:Alice\", \"age:65,name:Bob\", \"age:30,name:Charlie\"])",
        "countSeniors(details = [\"age:70,name:John\", \"age:65,name:Mary\", \"age:25,name:Jane\"])",
        "countSeniors(details = [\"a23456\", \"b56789\", \"c89123\"])",
        "countSeniors(details = [\"age-25-city-NY\", \"age-75-city-LA\", \"age-65-city-SF\", \"age-55-city-CH\"])",
        "countSeniors(details = [\"SMITH, AARON 900101\", \"JOHNSON, JANE 700201\"])",
        "countSeniors(details = [\"19901010001\", \"198012310002\", \"197001010003\", \"196012010004\"])",
        "countSeniors(details = [\"19821215\", \"20000101\", \"19500515\", \"19600930\"])"
    ],
    "sample_323": [
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 7)",
        "isFascinating(n = 6)",
        "isFascinating(n = 34)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(\"abcde\")",
        "minimumBeautifulSubstrings(s = \"0123456789abcdef\")",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx",
        "minimumBeautifulSubstrings(\"abaabaa\")",
        "minimumBeautifulSubstrings(s = \"aabbbbaabaaaabbbaaab\")",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n=4, limit=3)",
        "distributeCandies(n = 4, limit = 3)"
    ],
    "sample_419": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [2, 3, 1, 5, 4], k = 3)",
        "minOperations(nums = [1, 2, 2, 1, 1, 3, 4, 5], k = 3)",
        "minOperations(nums = [2, 3, 1, 5, 4], k = 2)",
        "minOperations(nums = [2, 3, 4, 1, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [10, 4, 6, 8, 9, 10, 4, 4, 6, 8, 9], k = 5)",
        "minOperations(nums = [3, 4, 2, 3, 4, 4, 4, 4], k = 3)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"4\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"3\", \"prev\", \"prev\", \"2\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6, 7], k=3)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6, 7], k=3)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcbabcb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbccddddee\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1, 2, 3, 4])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"000111000\", k = 2)",
        "shortestBeautifulSubstring(s = \"000111000\", k = 2)",
        "shortestBeautifulSubstring(s = \"000110011\", k = 2)",
        "shortestBeautifulSubstring(s = '101101', k = 2)",
        "shortestBeautifulSubstring(s = '101101', k = 2)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"0001111000\", k = 3)",
        "shortestBeautifulSubstring(s = '100110001', k = 2)",
        "shortestBeautifulSubstring(s = \"101011001\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010101010\", k = 3)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"aba\")",
        "minimumBeautifulSubstrings(s = \"0123456789\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(s = \"abaabaaa\")",
        "minimumBeautifulSubstrings(s = \"abaa\")",
        "minimumBeautifulSubstrings(s = \"abaa\")",
        "minimumBeautifulSubstrings(s = \"01101101\")",
        "minimumBeautifulSubstrings(s = \"bbbabb\")",
        "minimumBeautifulSubstrings(s = \"bbbbbb\")"
    ],
    "sample_341": [
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 5, z = 3)",
        "longestString(x = 2, y = 5, z = 3)",
        "longestString(x = 2, y = 4, z = 3)",
        "longestString(x = 1, y = 3, z = 5)",
        "longestString(x = 3, y = 5, z = 6)",
        "longestString(x = 5, y = 7, z = 4)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 0], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 0], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 2, 3], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0], [0, 1, 0, 1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"abstemious\", k = 3)",
        "beautifulSubstrings(s = \"xyz\", k = 2)",
        "beautifulSubstrings(s = \"python\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"abcdefg\", k = 3)",
        "beautifulSubstrings(s = \"codewars\", k = 3)",
        "beautifulSubstrings(s = \"codeforces\", k = 4)",
        "beautifulSubstrings(s = \"xyzt\", k = 3)",
        "beautifulSubstrings(s = \"yogurt\", k = 4)",
        "beautifulSubstrings(s = \"asdqwe\", k = 2)"
    ],
    "sample_304": [
        "countSeniors(details = [\"DOB: 01/01/1950\", \"DOB: 01/01/2000\", \"DOB: 01/01/1980\"])",
        "countSeniors(details = [\"1990-01-01-01-10\", \"1990-01-01-02-20\", \"1990-01-01-03-50\"])",
        "countSeniors(details = [\"20010101John Doe\", \"19990101Jane Smith\"])",
        "countSeniors(details = [\"2000-01-01 00:00:00 18\", \"2000-01-01 00:00:00 65\", \"2000-01-01 00:00:00 25\", \"2000-01-01 00:00:00 70\"])",
        "countSeniors(details = [\"19950101A1234\", \"20001231B5678\", \"20050202C9101\"])",
        "countSeniors(details = [\"1990-01-01T00:00:00+00:00-60\", \"1990-01-01T00:00:00+00:00-50\", \"1990-01-01T00:00:00+00:00-70\"])",
        "countSeniors(details = [\"age:25,height:170\", \"age:70,height:180\", \"age:45,height:165\", \"age:67,height:175\"])",
        "countSeniors(details = [\"Ms. Smith, age: 75\", \"Mr. Brown, age: 55\", \"Ms. Johnson, age: 82\"])",
        "countSeniors(details = [\"age=32, name=John\", \"age=75, name=Jane\", \"age=45, name=Jill\"])",
        "countSeniors(details = [\"2001-01-15-30-15-18\", \"2002-02-16-31-16-19\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [3, 2, 1, 4, 5, 6])",
        "maximumTripletValue(nums = [1, 5, 3, 1, 6, 4])",
        "maximumTripletValue(nums = [5, 2, 9, 3, 6])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(\"105\")",
        "minimumBeautifulSubstrings(s = \"1011101\")",
        "minimumBeautifulSubstrings(\"123456\")",
        "minimumBeautifulSubstrings(s = \"bbbaacdaae\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 0, 1, 1])",
        "maxSubarrays(nums = [2, 1, 4, 3, 5])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2], b = [3, 4])",
        "minOperations(a = [1, 2], b = [3, 4])",
        "minOperations(a = [1, 2], b = [2, 1])",
        "minOperations(a = [2, 3, 4, 5], b = [3, 4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [2, 1, 3])",
        "minOperations(a = [2, 3, 4, 5], b = [1, 2, 3, 5])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"catdog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"catdog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"catdog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\", \"god\", \"act\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"bird\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\", \"orange\", \"grape\"])",
        "minimizeConcatenatedLength(words = [\"leet\", \"code\", \"play\", \"skill\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"hello\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2, 2])"
    ],
    "sample_256": [
        "minimumSum(nums = [3, 4, 7, 6, 4])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSum(nums = [8, 4, 12, 2, 10, 11])",
        "minimumSum(nums = [2, 3, 1, 4, 2])",
        "minimumSum(nums = [5, 3, 1, 4, 2])",
        "minimumSum(nums = [9, 7, 8, 3, 4])",
        "minimumSum(nums = [9, 7, 8, 3, 4, 1, 6, 5])",
        "minimumSum(nums = [8, 3, 6, 1, 7])",
        "minimumSum(nums = [2, 3, 4, 5, 1, 5])",
        "minimumSum(nums = [8, 4, 2, 1, 3])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0], [1, 0, 1], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 1], [1, 0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0]])"
    ],
    "sample_372": [
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"leotce\")",
        "sortVowels(s = \"ElOtcede\")",
        "sortVowels(s = \"teacher\")",
        "sortVowels(s = \"ElOtcde\")",
        "sortVowels(s = \"let's eat candy\")",
        "sortVowels(s = \"LEOtced\")",
        "sortVowels(s = \"tElOcdE\")",
        "sortVowels(s = \"LedceOT\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"011101\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [5, 1, 2, 3, 4])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [3,3,3,3,3])",
        "minOperations(nums = [1,1,1,2,2,2,3,3,3])",
        "minOperations(nums = [2, 2, 2])",
        "minOperations(nums = [3,3,1,1,2,2])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11,12])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4])",
        "minOperations(nums = [2, 4, 1, 2, 4, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_367": [
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"HUmPhy\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hippo\")"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 2], [3, 4, 0], [6, 7, 8]])",
        "findChampion(grid = [[1, 1, 0], [1, 0, 1], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [0, 1, 1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 3, 5], nums2 = [8, 2, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [4, 5, 6, 7])",
        "minSum(nums1 = [2, 3, 4], nums2 = [1, 5, 2])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 2, 1, 1], k = 3)",
        "minOperations(nums = [1, 2, 2, 1, 1], k = 3)",
        "minOperations(nums = [1, 2, 2, 1, 1], k = 3)",
        "minOperations(nums = [1, 2, 2, 1, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6, 7], k=3)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [3, 1])",
        "relocateMarbles(nums=[1, 2, 3], moveFrom=[1, 2], moveTo=[2, 1])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 3, k = 3)",
        "maxSum(nums = [1, -2, 3, -4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, -2, 3, -4, 5, -6], m = 2, k = 2)",
        "maxSum(nums = [1, -2, 3, 4, -5, 8], m = 3, k = 4)",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], m = 5, k = 6)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"def\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bcd\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bac\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bca\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"adbzc\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"abdc\")",
        "canMakeSubsequence(s1 = \"aabcc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"aqw\", s2 = \"az\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 5, 6])",
        "minSum(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 0, 2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1,2,3,4], nums2 = [4,3,2,1])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=[\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words=[\"prev\", \"4\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words=[\"prev\", \"prev\", \"2\", \"1\"])",
        "lastVisitedIntegers(words=[\"prev\", \"3\", \"prev\", \"prev\", \"2\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 3, 5, 7, 9])",
        "isGood(nums = [1, 3, 5, 7, 9])"
    ],
    "sample_424": [
        "minOperations(nums = [3,1,3,4,2])",
        "minOperations(nums = [3,1,3,4,2])",
        "minOperations(nums = [3, 1, 3, 4, 3])",
        "minOperations(nums = [3,1,2,3,4,5,6])",
        "minOperations(nums = [3, 4, 3, 2, 3, 4, 6, 4])",
        "minOperations(nums = [3,1,2,4,3])",
        "minOperations(nums=[3,1,3,4,3,3,3,3,3])",
        "minOperations(nums=[3,1,3,4,3,3,3,4,4,4,4])",
        "minOperations(nums = [4,4,1,4,1,1,2,2])",
        "minOperations(nums=[5,2,3,3,1,5,4])"
    ],
    "sample_451": [
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aba\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n=6, limit=2)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1,2,3,4], nums2 = [4,3,2,1])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4, 5, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [2, 3, 4, 1, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])"
    ],
    "sample_381": [
        "countPairs(nums = [1, 3, 5, 7], t = 10)",
        "countPairs(nums = [1, 3, 5, 7], t = 10)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 3, 5, 7], t = 8)",
        "countPairs(nums = [1, 3, 5, 7], t = 8)",
        "countPairs(nums = [1,2,3,4], t = 5)",
        "countPairs(nums = [1, 3, 4, 2], t = 6)",
        "countPairs(nums = [1, 3, 4, 5, 6], t = 7)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"push\", \"3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push 1\", \"push 2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push 1\", \"push 2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words=[\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p1\", \"p3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"1\", \"p\", \"2\", \"p\", \"p\", \"p\"])",
        "lastVisitedIntegers(words=[\"p\", \"2\", \"p\", \"p\", \"1\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"1\", \"2\", \"p2\", \"p1\"])",
        "lastVisitedIntegers(words=[\"push\",\"push\",\"pop\",\"push\",\"pop\",\"push\",\"pop\",\"push\",\"pop\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abz\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"yz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"zbcd\")",
        "canMakeSubsequence(str1 = \"apple\", str2 = \"aplz\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"zbc\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"bcdz\", str2 = \"bedazzled\")",
        "canMakeSubsequence(str1 = \"bcdy\", str2 = \"abcf\")",
        "canMakeSubsequence(str1 = \"zx\", str2 = \"ayb\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6, 0])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4, 0, 0, 5])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3,4])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]], k = 3)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [3, 3], [3, 4], [4, 3], [4, 4]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2], [2, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0,0], [0,1], [1,0], [1,1], [2,2], [3,3], [3,4], [4,3], [4,4], [5,5], [5,6], [6,5], [6,6]], k = 3)",
        "countPairs(coordinates = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], k = 3)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [0, 1], [1, 2], [0, 2], [2, 0], [2, 1]], k = 1)",
        "countPairs(coordinates = [[0, 1], [1, 2], [2, 3], [0, 4], [2, 5], [1, 6], [3, 7], [4, 6], [5, 4], [3, 5]], k = 2)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xa\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yxy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yxy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yxy\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yyx\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"yx\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"tac\", \"dog\", \"god\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [2, -3, 1, -5, 4])",
        "maxStrength(nums = [1, 2, 3, -4, -5, -6])",
        "maxStrength(nums = [1, 2, 3, -4, -5, -6])",
        "maxStrength(nums = [-10, -10, 5, 2])",
        "maxStrength(nums = [1, 2, 3, -4, 5, 6, -7])",
        "maxStrength(nums = [2, 3, -1, 5, -4, 3, 2])",
        "maxStrength(nums = [2, 3, -1, -5, -6, 1, 4])",
        "maxStrength(nums = [4, 2, -3, 1, 6])",
        "maxStrength(nums = [3, 1, 5, -2, 4, -3, 6])",
        "maxStrength(nums = [1,2,3,4,5,-6,-7,-8,-9,10,-11,-12,-13])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 3, 5, 7])",
        "minimumCoins(prices = [1, 3, 5, 7])",
        "minimumCoins(prices = [1, 3, 5, 7, 9])",
        "minimumCoins(prices = [2, 5, 1, 3, 4])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 5, 2])",
        "minimumCoins(prices = [2, 4, 3, 7, 1, 5, 5])",
        "minimumCoins(prices=[1, 4, 5, 2, 4, 3])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [3, 1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minLengthAfterRemovals(nums = [3, 1, 2, 3, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [2, 3, 1, 2, 3, 1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 1, 5, 7, 2, 6, 4])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [2, 3, 5, 8], money = 10)",
        "buyChoco(prices = [10, 2, 5], money = 9)",
        "buyChoco(prices = [10, 20, 30, 40], money = 50)",
        "buyChoco(prices = [1, 1], money = 1)",
        "buyChoco(prices = [1, 2], money = 4)",
        "buyChoco(prices = [1, 1, 1], money = 2)",
        "buyChoco(prices = [5, 4, 3, 2], money = 10)",
        "buyChoco(prices = [5, 3, 2, 8, 4], money = 10)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"99\", \"prev\", \"prev\", \"95\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"99\", \"prev\", \"prev\", \"1\", \"prev\", \"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [5, 8], moveTo = [9, 6])",
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [6], moveTo = [9])",
        "relocateMarbles(nums = [1, 2, 3, 5, 8, 9], moveFrom = [1, 2, 3], moveTo = [4, 6, 7])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [1, 3])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [6, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [1])",
        "relocateMarbles(nums = [5, 8, 9], moveFrom = [9], moveTo = [5])",
        "relocateMarbles(nums = [1, 2, 4, 5, 8, 9], moveFrom = [1, 4, 5], moveTo = [3, 7, 9])",
        "relocateMarbles(nums = [3, 4, 5, 6, 8], moveFrom = [4, 3], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [9, 6], moveTo = [1, 2])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acdf\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adcb\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"abcd\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\", \"grape\"], x = \"a\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])"
    ],
    "sample_316": [
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [3, 5], money = 8)",
        "buyChoco(a = [10, 20, 30], money = 30)",
        "buyChoco(a = [4, 5], money = 10)",
        "buyChoco(a = [2, 4], money = 6)",
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [10, 10], money = 20)",
        "buyChoco(a = [2, 3, 5], money = 6)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [4, 3, 3, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7])",
        "minGroupsForValidAssignment(nums=[1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [3, 4, 5, 6, 7, 8])",
        "minGroupsForValidAssignment(nums = [3, 2, 1, 2, 2])",
        "minGroupsForValidAssignment(nums = [3, 3, 1, 1, 3])",
        "minGroupsForValidAssignment(nums = [5, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 1])",
        "minimumRightShifts(nums=[1, 3, 2])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 5, 6])",
        "minimumRightShifts(nums = [4, 5, 1, 2, 3])",
        "minimumRightShifts(nums=[5, 3, 1, 2, 4])",
        "minimumRightShifts(nums=[4, 3, 2, 1])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 5, 7])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [4, 6, 2, 5, 1, 3])"
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n=5, limit=3)",
        "distributeCandies(n=3, limit=3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 5)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [2, 3, 1, 5, 2])",
        "minLengthAfterRemovals(nums = [2, 4, 3, 2, 2, 4])",
        "minLengthAfterRemovals(nums = [5, 3, 1, 2, 4, 3, 2])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hackerearth\"], x = \"h\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1,0,0],[0,0,1],[1,0,0]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 1], [1, 1, 0, 1], [0, 1, 1, 1], [0, 1, 0, 1]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1, 0, 0, 1, 1, 0])",
        "maxSubarrays(nums = [2, 1, 4, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maxSubarrays(nums = [2, 1, 4, 3, 6])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"ababac\", k = 3)",
        "beautifulSubstrings(s = \"abaebi\", k = 2)",
        "beautifulSubstrings(s = \"abaebi\", k = 2)",
        "beautifulSubstrings(s = \"abababa\", k = 3)",
        "beautifulSubstrings(s = \"abacdfgdc\", k = 3)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [2, 3, 5, 7, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 3, 5, 7, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [7, 6, 5, 4, 3, 2, 1])",
        "minimumSeconds(nums = [2, 3, 9, 2, 4])",
        "minimumSeconds(nums = [3, 2, 1, 2, 3, 3, 1])",
        "minimumSeconds(nums = [4,3,2,1,5,5,6])",
        "minimumSeconds(nums = [9,3,6,12,8])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 100)",
        "isFascinating(n = 1)",
        "isFascinating(n = 7)",
        "isFascinating(n=153)",
        "isFascinating(n=45)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [4, 2, 3, 1, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [3, 10, 4, 2, 6], target = 12)",
        "lengthOfLongestSubsequence(nums = [3, 10, 4, 2, 8], target = 20)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 3, 5], [2, 4, 6]])",
        "matrixSum(nums = [[1, 5, 3], [6, 2, 8], [9, 4, 7]])",
        "matrixSum(nums = [[1, 5, 3], [3, 1, 7], [4, 4, 1]])"
    ],
    "sample_326": [
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(145)",
        "isFascinating(145)",
        "isFascinating(145)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [3, 5, 1, 2, 4])",
        "minimumSum(nums = [3, 5, 1, 2, 4])",
        "minimumSum(nums = [3, 5, 1, 2, 4])",
        "minimumSum(nums = [4, 2, 1, 3])",
        "minimumSum(nums = [4, 2, 1, 3, 5])",
        "minimumSum(nums = [4, 2, 1, 3, 5])",
        "minimumSum(nums = [3, 5, 8, 10])",
        "minimumSum(nums = [3, 5, 1, 2, 6, 4])",
        "minimumSum(nums = [5, 8, 1, 3, 2])",
        "minimumSum(nums = [3, 1, 9, 2])"
    ],
    "sample_450": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aaabb\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"010\", s2 = \"110\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"101\", x = 1)",
        "minOperations(s1 = \"10101\", s2 = \"10101\", x = 3)",
        "minOperations(s1 = \"101\", s2 = \"000\", x = 1)",
        "minOperations(s1 = \"10110\", s2 = \"01011\", x = 3)",
        "minOperations(s1 = \"00101\", s2 = \"11100\", x = 2)",
        "minOperations(s1 = \"10101\", s2 = \"1111\", x = 3)",
        "minOperations(s1 = \"00001\", s2 = \"00001\", x = 1)",
        "minOperations(s1 = \"10001\", s2 = \"00101\", x = 2)",
        "minOperations(s1 = \"1110\", s2 = \"1011\", x = 2)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 2, z = 4)",
        "longestString(x = 2, y = 2, z = 4)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 3, y = 2, z = 2)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1, 2, 4, 8, 16])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John Doe, 55\", \"Jane Smith, 75\", \"Bob Johnson, 67\"])",
        "countSeniors(details = [\"name:John,age:55\", \"name:Mary,age:67\", \"name:Bob,age:42\"])",
        "countSeniors(details = [\"John Doe, 45\", \"Jane Smith, 65\", \"Jim Brown, 70\"])",
        "countSeniors(details = [\"John Doe 101 65\", \"Jane Smith 203 55\", \"Bob Johnson 302 72\"])",
        "countSeniors(details = [\"name: John age: 50\", \"name: Mary age: 65\", \"name: Alice age: 45\"])",
        "countSeniors(details = [\"John, 55, Developer\", \"Mary, 67, Retired\", \"Tom, 28, Student\"])",
        "countSeniors(details = [\"John Doe - 56\", \"Jane Smith - 67\", \"Alex Johnson - 78\"])",
        "countSeniors(details = [\"Praveen,1995\", \"Sarah,1980\", \"David,1970\"])",
        "countSeniors(details = [\"Mr.John 35 M\", \"Ms.Jane 62 F\", \"Dr.David 28 M\", \"Mrs.Emily 75 F\"])",
        "countSeniors(details = [\"John Smith 12/01/1959\", \"Jane Brown 24/05/1945\", \"Mark Johnson 07/10/1980\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1, 0, 0, 1, 1, 0])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [8, 5], moveTo = [9, 6])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [8, 5], moveTo = [9, 6])",
        "relocateMarbles(nums = [5, 8, 9], moveFrom = [8, 9], moveTo = [10, 11])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 8], moveTo = [7, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 9], moveTo = [7, 4])",
        "relocateMarbles(nums = [5, 8, 9, 10], moveFrom = [10, 9], moveTo = [1, 6])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"dog\", s3 = \"bird\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"abb\", s3 = \"abb\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ab\", s3 = \"ca\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [2, 3, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1, 3])",
        "minLengthAfterRemovals(nums = [3,2,3,1,3])",
        "minLengthAfterRemovals(nums = [5,2,2,3,4,5,6,7,8,9])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [2, 3, 1], [3, 4, 3], [1, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 1], [2, 4, 2], [3, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 10], [3, 4, 5], [4, 5, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [2, 3, 3], [3, 4, 2]])",
        "maximizeTheProfit(n=5, offers=[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)])",
        "maximizeTheProfit(n = 5, offers = [(1, 2, 5), (2, 3, 5), (3, 4, 5), (4, 5, 5)])",
        "maximizeTheProfit(n = 5, offers = [(1, 2, 5), (2, 3, 6), (3, 5, 1), (1, 4, 8), (4, 5, 2)])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 3], [3, 5, 4], [2, 4, 5]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 4], [3, 4, 6], [5, 6, 10]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [2, 1, 2], m = 3)",
        "canSplitArray(nums = [2, 1, 2, 1, 2], m = 2)",
        "canSplitArray(nums = [1,2,3,4], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 2)",
        "canSplitArray(nums = [2, 2, 1], m = 3)",
        "canSplitArray(nums = [2,3,12,1,10,4], m = 10)",
        "canSplitArray(nums = [2, 1, 1, 1, 2, 2], m = 2)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 3, 5, 7, 9], k = 2)",
        "checkArray(nums = [2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [3, 2, 1, 2, 4, 2], k = 2)",
        "checkArray(nums = [4, 3, 2, 6, 5, 4, 3], k = 2)",
        "checkArray(nums = [3, 2, 1, 2, 1, 1], k = 3)",
        "checkArray(nums = [0, 1, 1, 2, 2], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 3)",
        "checkArray(nums = [3, 2, 1, 2, 4, 4, 5, 3, 2, 1], k = 4)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \".\")",
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"orange\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"apple,banana,orange\", \"grape,strawberry,blueberry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"applesauce\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\", \"dog,cat,fish\"], separator = \",\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 4, 5])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [1, 3, 4])",
        "countWays(nums = [2, 3, 5])"
    ],
    "sample_122": [
        "minimumIndex(nums = [3,1,3,3,2,1,3])",
        "minimumIndex(nums = [3,1,2,3,4])",
        "minimumIndex(nums = [4, 5, 1, 2, 3])",
        "minimumIndex(nums = [2, 2, 3, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [2, 2, 3, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2])",
        "minimumIndex(nums = [3,4,1,2,3])",
        "minimumIndex(nums = [1,2,3,2,2,3])",
        "minimumIndex(nums = [2, 3, 5, 7, 2, 3, 5, 7])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2, 3, 4, 5, 5, 6])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,3],[3,5],[7,9]])",
        "numberOfPoints(nums = [[1,3],[3,5],[7,9]])",
        "numberOfPoints(nums = [[1,3],[3,5],[7,9]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,5]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 5]])",
        "numberOfPoints(nums = [[1,3],[3,5],[7,9],[2,6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 9], [1, 1]])",
        "numberOfPoints(nums = [[1,3],[1,7],[3,4],[5,8],[7,8],[8,9],[9,10],[11,12]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [4, 2, 1, 5, 3])",
        "semiOrderedPermutation(nums = [2,3,1,4,5])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4, 6, 7])",
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(nums = [3, 2, 4, 5, 1])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)"
    ],
    "sample_118": [
        "minimumIndex(nums = [3, 1, 3, 3, 2, 3])",
        "minimumIndex(nums = [4, 5, 6, 7, 6, 5, 4])",
        "minimumIndex(nums = [2, 2, 3, 1, 2, 2, 2])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2, 2, 2, 3, 4, 5])",
        "minimumIndex(nums = [4, 5, 2, 2, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 5, 6])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 2, 2, 2])",
        "minimumIndex(nums = [2, 1, 2, 2, 2, 2, 3, 4, 2])",
        "minimumIndex(nums = [3, 4, 5, 5, 6, 6, 7, 7, 7])",
        "minimumIndex(nums = [2, 4, 5, 6, 4, 4, 4])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 5, k = 10)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1,3],[3,6],[4,5]])",
        "numberOfPoints(nums = [[1,3],[3,6],[4,5]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1,3],[3,7],[5,8],[9,12]])",
        "numberOfPoints(nums = [[1,3],[3,6],[4,5],[9,12],[11,13]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 4)",
        "maximumJumps(nums = [6, 3, 5, 1], target = 2)",
        "maximumJumps(nums = [6, 3, 5, 1], target = 2)"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n=3, k=2)",
        "minimumSum(n=2, k=2)",
        "minimumSum(n=2, k=2)",
        "minimumSum(n = 5, k = 3)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1,2,3], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 7)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [2, 1, 3, 5, 2], m = 5)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [2,1,3], m = 2)",
        "canSplitArray(nums = [3,5,8,10], m = 3)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [3, 4, 2], [2, 4, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 10], [2, 5, 15], [3, 6, 20]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 2], [2, 5, 1], [3, 9, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 1], [2, 4, 1], [3, 5, 1], [1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 4, 3], [1, 3, 2], [4, 5, 1], [3, 5, 4]])",
        "maximizeTheProfit(n=5, offers=[[1, 3, 5], [2, 3, 10], [3, 4, 15], [4, 5, 30]])",
        "maximizeTheProfit(n = 5, offers = [[3, 4, 1], [2, 3, 3], [4, 5, 2]])",
        "maximizeTheProfit(n=10, offers=[[1, 3, 1], [2, 5, 2], [3, 8, 3], [4, 10, 4]])",
        "maximizeTheProfit(n = 10, offers = [[5, 8, 3], [2, 5, 4], [4, 10, 5], [1, 3, 1]])",
        "maximizeTheProfit(n=5, offers=[(1,2,5), (2,3,1), (0,4,4)])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [3, 4, 3, 2, 1, 2], k = 3)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 1, 4, 4, 4, 4], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4,1,2,3,4], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,1,4,4], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 1, 4, 4, 4, 4, 4, 4, 4], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4,5,6,7,8,1,2,3,4], k = 4)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n=1, queries=[])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4],[4,5]])",
        "colorTheArray(n=2, queries=[[0, 1], [1, 2]])",
        "colorTheArray(n = 3, queries = [[0,1], [1,2], [2,3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4]])"
    ],
    "sample_55": [
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbfcd\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = 'kddsbfcd')",
        "smallestString(s = \"kddsbnbcd\")",
        "smallestString(s = \"abcdz\")",
        "smallestString(s = \"kddsbcod\")",
        "smallestString(s = 'kdebcnncd')",
        "smallestString(s = \"kdebcdfghij\")",
        "smallestString(s = \"abckzzzzzz\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [3, 5, 2, 1, 6], threshold = 2)",
        "longestAlternatingSubarray(nums = [0, 1, 0, 1, 1, 0], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 6, 1, 2], threshold = 4)",
        "longestAlternatingSubarray(nums = [4, 2, 7, 5, 8, 6, 1, 3, 9, 0], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 3, 1, 2, 4, 1, 6], threshold = 4)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 15)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 8)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 2, 4], threshold = 7)",
        "longestAlternatingSubarray(nums = [10, 11, 12, 13, 14, 15], threshold = 14)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 3, 3, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2, 2, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 5, 3, 6, 7, 2, 4], threshold = 9)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABBCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDB\")",
        "minLength(s = \"ABAACD\")",
        "minLength(s = \"ACBDCABD\")",
        "minLength(s = \"ABCB\")",
        "minLength(s = \"AABBC\")",
        "minLength(s = \"ACDE\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abbaca\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [2, 1, 3, 5, 4], m = 5)",
        "canSplitArray(nums = [2, 1, 3, 5, 4], m = 5)",
        "canSplitArray(nums = [2, 1, 3, 5], m = 4)",
        "canSplitArray(nums = [1, 5, 11], m = 2)",
        "canSplitArray(nums = [2, 3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [5, 3, 1, 2, 4], m = 3)",
        "canSplitArray(nums = [2, 2, 3, 5, 5, 6], m = 4)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3, 6])",
        "doesValidArrayExist(derived = [1,2,3,6])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [2, 3, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0,1,2,3])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1,1,0,1,0,0,1])",
        "doesValidArrayExist(derived = [4, 2, 4, 2])"
    ],
    "sample_109": [
        "checkArray(nums = [10, 2, 3, 7, 2], k = 3)",
        "checkArray(nums = [10, 20, 30, 40], k = 2)",
        "checkArray(nums = [10, 4, 6, 8, 1, 9], k = 3)",
        "checkArray(nums = [3, 2, 1, 5, 6], k = 2)",
        "checkArray(nums = [10, 2, 2, 4], k = 2)",
        "checkArray(nums = [5, 2, 4, 3, 1], k = 2)",
        "checkArray(nums = [2,2,2,1,2,2,2], k = 2)",
        "checkArray(nums = [3, 2, 1, 2, 4], k = 2)",
        "checkArray(nums = [3, 2, 5, 1, 4, 7], k = 3)",
        "checkArray(nums = [10, 2, 3, 1, 5, 2, 1, 8, 2], k = 2)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 7, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 4, 3, 2, 1], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 7, 2, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 8, 10], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 6, 10, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 9, 5, 6], target = 8)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 3], k = 1)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 9, 11], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)"
    ],
    "sample_205": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"0\")",
        "minimumOperations(num = \"0\")",
        "minimumOperations(num = \"0\")",
        "minimumOperations(num = \"0125\")",
        "minimumOperations(num = \"10\")",
        "minimumOperations(\"0025\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"005025\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"02550\")",
        "minimumOperations(s = \"01\")",
        "minimumOperations(s = \"0250\")",
        "minimumOperations(s = \"10001\")",
        "minimumOperations(s = \"001\")",
        "minimumOperations(s = \"2500\")",
        "minimumOperations(s = \"01250075\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRAL\")",
        "furthestDistanceFromOrigin(moves = \"LRAL\")",
        "furthestDistanceFromOrigin(moves = \"LRRAL\")",
        "furthestDistanceFromOrigin(moves = \"RLR\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hweolrld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hweolrld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwolrld\")",
        "isAcronym(words = [\"Google\", \"Facebook\", \"Amazon\"], s = \"GFA\")",
        "isAcronym(words = [\"Air\", \"Force\", \"Elephant\", \"Base\"], s = \"AFEB\")",
        "isAcronym(words = [\"home\", \"work\", \"car\"], s = \"hwc\")",
        "isAcronym(words = [\"Air\", \"Beautiful\", \"Car\", \"Danger\"], s = \"ABC\")",
        "isAcronym(words = [\"Mission\", \"Academy\", \"Performance\"], s = \"MAP\")",
        "isAcronym(words = [\"Laser\", \"Optics\", \"AI\"], s = \"LOA\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 2, 4], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 2, 4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 2, 2, 4, 4], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2,3,5,7], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [3, 1, 3, 4], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [4, 1, 4, 3, 1], modulo = 3, k = 1)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 24, 6, 18])",
        "countBeautifulPairs(nums = [12, 24, 6, 18])",
        "countBeautifulPairs(nums = [12, 25, 36, 48])",
        "countBeautifulPairs(nums = [12, 24, 6, 9])",
        "countBeautifulPairs(nums = [12, 24, 6, 9])",
        "countBeautifulPairs(nums = [12, 21, 45, 64])",
        "countBeautifulPairs(nums = [12, 24, 6, 8, 18])",
        "countBeautifulPairs(nums = [12, 25, 90, 55, 36])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [6, 1, 9], target = 3)",
        "maximumJumps(nums = [6, 1, 9], target = 3)",
        "maximumJumps(nums = [6,1,9], target = 3)",
        "maximumJumps(nums = [3, 2, 5, 1, 1, 9, 3, 4], target = 2)",
        "maximumJumps(nums = [5,1,3,4,2], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [3, 2, 1, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 0)",
        "maximumJumps(nums=[3,2,4,1,1,4,4,5,2,5,1,1,5,3,5], target=2)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 25, 36, 48])",
        "countBeautifulPairs(nums = [12, 24, 6, 8])",
        "countBeautifulPairs(nums = [12, 24, 6, 8])",
        "countBeautifulPairs(nums = [12, 23, 34, 45])",
        "countBeautifulPairs(nums = [12, 25, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 28, 46, 64, 82])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCABD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABACDABCD\")",
        "minLength(s = \"ACDABACDAB\")"
    ],
    "sample_150": [
        "finalString(s = \"this is a string\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"thisisit\")",
        "finalString(s = 'this is a string')",
        "finalString(s = \"string\")",
        "finalString(s = 'thisisit')",
        "finalString(s = 'sitting')",
        "finalString(s = \"lion\")",
        "finalString(s = \"isn't it great\")",
        "finalString(s = \"isn't there anything else?\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "doesValidArrayExist(derived = [1, 3, 2, 6, 5, 4])",
        "doesValidArrayExist(derived = [1,2,3,4,5,6,7,8,9])",
        "doesValidArrayExist(derived = [2, 3, 1, 6, 7, 5, 4])",
        "doesValidArrayExist(derived = [2, 3, 1, 6])",
        "doesValidArrayExist(derived = [3, 3, 1, 1])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [5, 1, 3, 4, 2])",
        "findValueOfPartition(nums = [3, 5, 2, 1, 4])",
        "findValueOfPartition(nums = [5, 1, 3, 2, 4])",
        "findValueOfPartition(nums = [5, 1, 3, 2])",
        "findValueOfPartition(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 5])",
        "findValueOfPartition(nums = [4, 6, 1, 3, 2])",
        "findValueOfPartition(nums = [4, 1, 3, 6, 2])"
    ],
    "sample_7": [
        "colorTheArray(n=1, queries=[])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 3, queries = [[1,1],[2,2]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,3]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [1, 1]])",
        "colorTheArray(n=3, queries=[[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n=3, queries=[[1,2], [2,3], [1,1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 3], [1, 3], [2, 1]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 12)",
        "minimumPossibleSum(n = 3, target = 12)",
        "minimumPossibleSum(n=3, target=10)",
        "minimumPossibleSum(n = 4, target = 13)",
        "minimumPossibleSum(n=4, target=10)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n = 1, k = 1)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 8, 6, 12, 2], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 6, 7, 5], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 5, 8, 3], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 8, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15], target = 15)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [2, 1, 3, 5, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 8)",
        "canSplitArray(nums = [2, 3, 1, 1], m = 2)",
        "canSplitArray(nums = [2, 1, 1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [2, 3, 12, 2, 3, 2, 3], m = 7)",
        "canSplitArray(nums = [3, 1, 5, 3], m = 6)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 2, 4, 5, 6], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 5, k = 3)",
        "countInterestingSubarrays(nums=[1, 2, 3], m=3, k=0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5, 6], m = 7, k = 5)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], t = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], t = 10)",
        "longestAlternatingSubarray(nums = [0,1,2,3,4,5], t = 3)",
        "longestAlternatingSubarray(nums = [0,1,2,2,0,4,4,4,4], t = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,1,6,7,8,10], t = 5)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 1, 1, 1, 3, 3, 2, 2], t = 2)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 5, 8, 6, 7], t = 5)",
        "longestAlternatingSubarray(nums = [2,1,3,1], t = 1)",
        "longestAlternatingSubarray(nums = [2, 3, 1, 2, 4, 3, 7, 1, 8, 5], t = 4)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"51230000\")",
        "removeTrailingZeros(num = \"51230000\")",
        "removeTrailingZeros(\"5123000001\")",
        "removeTrailingZeros(num = \"51230000000000001\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 15, b = 5)",
        "makeTheIntegerZero(a = 7, b = 2)",
        "makeTheIntegerZero(a = 31, b = 2)",
        "makeTheIntegerZero(a = 31, b = 2)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 123, b = 45)",
        "makeTheIntegerZero(a = 30, b = 10)",
        "makeTheIntegerZero(a = 33, b = 5)",
        "makeTheIntegerZero(a = 1000, b = 2)",
        "makeTheIntegerZero(a = 33, b = 3)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [2, 3, 5, 7, 9], m = 5)",
        "canSplitArray(nums = [2, 3, 5, 7, 9], m = 5)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [2, 1, 2], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [2, 1, 2, 7, 1, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 4)",
        "canSplitArray(nums = [2, 1, 3, 2], m = 4)"
    ],
    "sample_161": [
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [123, 456, 789])",
        "maxSum(nums = [123, 456, 789])",
        "maxSum(nums = [10, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [123, 456, 789, 135])",
        "maxSum(nums = [1, 10, 100, 1000])",
        "maxSum(nums = [123, 253, 321])",
        "maxSum(nums = [4, 5, 1, 2, 3])",
        "maxSum(nums = [123, 3456, 12345])",
        "maxSum(nums = [123, 456, 789, 432])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n=2, target=4)",
        "minimumPossibleSum(n=2, target=4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n=2, target=5)",
        "minimumPossibleSum(n = 2, target = 7)",
        "minimumPossibleSum(n=2, target=3)",
        "minimumPossibleSum(n = 2, target = 3)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 6])",
        "findValueOfPartition(nums = [1,2,4,6,8])",
        "findValueOfPartition(nums = [3,4,7,10,11])",
        "findValueOfPartition(nums = [3,4,5,8,10,12])",
        "findValueOfPartition(nums = [2, 3, 7, 9, 12])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 6, 7, 8])",
        "findValueOfPartition(nums = [3, 4, 6, 10, 11])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2],[2,3],[4,5],[6,7]])",
        "numberOfPoints(nums = [[1,3],[1,7],[3,4],[5,7]])",
        "numberOfPoints(nums = [[1,5],[3,7],[2,3],[4,6]])",
        "numberOfPoints(nums = [[1, 3], [1, 7], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 3], [4, 4], [4, 5]])",
        "numberOfPoints(nums = [[1,3],[1,5],[2,4],[4,4]])",
        "numberOfPoints(nums = [[1,3],[2,6],[3,10],[15,18]])",
        "numberOfPoints(nums = [[1,3],[3,6],[10,12],[15,18]])",
        "numberOfPoints(nums = [[1, 5], [1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1,3],[1,4],[4,5],[6,7],[8,9]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 4], [2, 5], [3, 5]])",
        "numberOfPoints(nums = [[1,3],[3,6],[4,6],[1,6]])",
        "numberOfPoints(nums = [[1,3],[2,5],[4,6]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 3], [4, 4], [5, 5], [3, 6]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words=['one', 'two', 'three', 'four', 'five', 'six'], separator=' ')",
        "splitWordsBySeparator(words=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator=\",\")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one two', 'three', 'four five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\", \"\", \"\", \"four\", \"five\", \"\", \"six\"], separator = \",\")"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 6)",
        "minOperations(nums = [2, 2, 2, 2], target = 7)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 13)",
        "minOperations(nums = [1, 1, 1, 2, 3], target = 6)",
        "minOperations(nums = [2, 3, 5, 8, 10], target = 20)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 20)",
        "minOperations(nums = [2, 4, 7], target = 10)",
        "minOperations(nums = [2, 4, 10], target = 24)",
        "minOperations(nums = [2, 4, 7, 10], target = 21)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 2, 1, 2, 3, 4], k = 3)",
        "checkArray(nums = [1, 2, 3, 2, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [2, 3, 1, 2, 3, 1, 2, 3], k = 2)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 1, 0])"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [12,23,34,45,56])",
        "maxSum(nums = [123,456,789])",
        "maxSum(nums = [1,2,3,4,5,6])",
        "maxSum(nums = [10, 11, 12, 13, 14, 15])",
        "maxSum(nums = [123,234,345])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums=[2,3,4,5,6])",
        "maxSum(nums = [12,23,34,45,56,67,78,89,13])",
        "maxSum(nums = [22,27,10,23,34])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7])",
        "continuousSubarrays(A = [2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(A = [1, 2, 2, 1, 3, 4, 1])",
        "continuousSubarrays(A = [1, 2, 3, 1, 4, 5, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 1, 4, 5, 1, 2, 3, 1, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 7, 8, 8])",
        "continuousSubarrays(A = [2, 1, 2, 1, 1, 3, 2, 1, 2])",
        "continuousSubarrays(A = [1, 2, 3, 1, 0, 2, 1, 2, 3, 2, 3, 2, 1])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 5, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 2, 1, 4], b = [1, 1, 2, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 1, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 2, 1, 4, 5, 6], b = [0, 2, 3, 1, 6, 4, 5, 6])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 20, additionalTank = 1)",
        "distanceTraveled(mainTank=2, additionalTank=1)"
    ],
    "sample_160": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [10,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [3,5,7,9])",
        "maxSum(nums = [9, 8, 7, 6, 5])",
        "maxSum(nums = [3,2,1,4,5,6,7,8,9])",
        "maxSum(nums = [10, 2, 5, 9, 12, 14])",
        "maxSum(nums = [100, 200, 300, 10, 20, 3])",
        "maxSum(nums = [4, 7, 9, 3, 2, 8, 9, 6, 4, 5])",
        "maxSum(nums = [98, 23, 74, 15, 76, 41, 10, 85])",
        "maxSum(nums = [10, 29, 43, 74, 59, 113, 73, 82])"
    ],
    "sample_52": [
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kdedbncd\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbncde\")",
        "smallestString(s = \"kddscndd\")",
        "smallestString(s = \"kdeeabcd\")",
        "smallestString(s = \"kdeebzcd\")",
        "smallestString(s = \"kdbsaccd\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "findValueOfPartition(nums = [1, 2, 4, 7, 10])",
        "findValueOfPartition(nums = [5, 4, 3, 2, 1])",
        "findValueOfPartition(nums = [2, 3, 7, 9])",
        "findValueOfPartition(nums = [2, 4, 1, 3, 5])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"baba\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 4)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 12, num2 = 7)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[2,5],[4,6]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1,3],[3,6],[5,8]])",
        "numberOfPoints(nums = [[1,3],[3,5],[7,8]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,10],[5,8]])",
        "numberOfPoints(nums = [[1,5],[3,7],[9,12],[2,4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [4, 5], [5, 6], [6, 7]])",
        "numberOfPoints(nums=[(1, 3), (2, 5), (4, 6), (7, 8)])",
        "numberOfPoints(nums = [[1,3],[1,7],[3,6],[4,6],[6,9]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 2, 4, 5, 6], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], m=2, k=0)",
        "countInterestingSubarrays(nums = [2, 2, 2, 4, 5, 6], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 2, 1, 2, 2], m = 2, k = 0)"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abcbaca\")",
        "minimumCost(s = \"abcbaca\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1, 0, 1, 0, 0, 0])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 5, 4], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 5, 4], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 7, 5, 4], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 7, 6, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 5, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 12, 9, 11], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 12, 4], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 6, 5, 4], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 12, 11], target = 10)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"venen\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"512301000000\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = \"5123010000000\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], m=2, k=0)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], m=2, k=0)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], m=3, k=0)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1,2,3], m=2, k=0)",
        "countInterestingSubarrays(nums=[2,2,2,1,2,2,1,2,2,2], m=2, k=1)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 20, additionalTank = 5)",
        "distanceTraveled(mainTank = 20, additionalTank = 3)",
        "distanceTraveled(mainTank = 20, additionalTank = 10)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 3)",
        "minCost(A = [2, 5, 1, 3, 4], x = 3)",
        "minCost(A = [2, 3, 4], x = 2)",
        "minCost(A = [4, 2, 6, 3], x = 2)",
        "minCost(A = [4, 2, 6, 1], x = 2)",
        "minCost(A = [4, 2, 1], x = 2)",
        "minCost(A = [4, 2, 4, 3], x = 2)",
        "minCost(A = [3, 5, 1, 2], x = 4)",
        "minCost(A = [2, 4, 7, 1, 5, 3], x = 2)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(u = [1, 3, 5, 7, 9, 11])",
        "maxIncreasingGroups(u = [1, 3, 5, 7, 9, 11])",
        "maxIncreasingGroups(u = [1, 3, 4, 5, 7, 9])",
        "maxIncreasingGroups(u = [1, 3, 5, 2, 4])",
        "maxIncreasingGroups(u = [1, 2, 4, 6, 10])",
        "maxIncreasingGroups(u = [2, 1, 3, 1, 2])",
        "maxIncreasingGroups(u = [1, 2, 5, 12, 13])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 1, 2], k = 2)",
        "checkArray(nums = [4, 3, 2, 6], k = 1)",
        "checkArray(nums = [1, 1, 1, 0, 1], k = 2)",
        "checkArray(nums = [1, 2, 1], k = 2)",
        "checkArray(nums = [1, 0, 1, 0, 1, 0, 1], k = 2)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDBA\")",
        "minLength(s = \"ACBABCD\")",
        "minLength(s = \"ACCDABABBABCD\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1, 2, 4, 8], target = 10)",
        "minOperations(nums = [1,2,4,8], target = 10)",
        "minOperations(nums = [1,2,4,8], target = 23)",
        "minOperations(nums = [1,2,3,4,5], target = 13)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], target = 28)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 100)",
        "minOperations(nums = [2,3,5,6,8], target = 12)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \".\")",
        "splitWordsBySeparator(words = [], separator = \".\")",
        "splitWordsBySeparator(words = [\"apples\", \"bananas\", \"cherries\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple,banana\", \"cherry,date\"], separator = \",\")"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbcnd\")",
        "smallestString(s = \"kddsbncde\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = 'kddsbcnd')",
        "smallestString(s = \"kddsbnca\")",
        "smallestString(s = \"kddscbncd\")",
        "smallestString(s = \"abcdkddsbcncd\")",
        "smallestString(s = \"kddscndcb\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"RLL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LR__R\")",
        "furthestDistanceFromOrigin(moves = \"LLL_RRR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR__RLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRLRL_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_R_R_R_L_L_L\")",
        "furthestDistanceFromOrigin(moves = \"RLLRLLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRRR_RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRRLRRLLRRRRRLR\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)"
    ],
    "sample_51": [
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbzcd\")",
        "smallestString(s = 'kddscncd')",
        "smallestString(s = \"kdbsbcd\")",
        "smallestString(s = \"kcdsabncd\")",
        "smallestString(s = \"kddsbabc\")",
        "smallestString(s = \"kddsbzdcd\")",
        "smallestString(s = 'kdaacdbd')"
    ],
    "sample_146": [
        "finalString(s = \"pintire\")",
        "finalString(s = \"pintuor\")",
        "finalString(s = \"ritponter\")",
        "finalString(s = \"ritponter\")",
        "finalString(s = \"roseti\")",
        "finalString(s = \"xpintro\")",
        "finalString(s = \"xpniotre\")",
        "finalString(s = \"ptinir\")",
        "finalString(s = 'xpintbr')",
        "finalString(s = \"ptnoir\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,2,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,4,4,4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 2, 1, 1, 1, 1], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,2,1,2], k = 2)",
        "longestEqualSubarray(nums=[1,2,3,1,2,3,1,2,3,1,2,3], k=2)",
        "longestEqualSubarray(nums = [1,2,2,2,1,3,2,4,5,2,2,3], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [2, 3, 1, 2, 4, 3], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 5)",
        "canSplitArray(nums = [2, 3, 1, 1, 2], m = 3)",
        "canSplitArray(nums = [10, 10, 10, 10, 10], m = 3)",
        "canSplitArray(nums = [100, 200, 300], m = 3)",
        "canSplitArray(nums = [5, 1, 3, 2, 4], m = 2)",
        "canSplitArray(nums = [10, 20, 5, 25], m = 30)",
        "canSplitArray(nums = [5, 5, 5, 5, 5, 5, 5], m = 3)",
        "canSplitArray(nums = [2, 3, 1, 5, 2, 4, 6], m = 7)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one,two', 'three,four,five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three', 'four,five,six'])",
        "splitWordsBySeparator(words = ['one,two,three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words=[\"one,two,three\", \"four,five,six\"], separator=\",\")",
        "splitWordsBySeparator(words = ['one,two', 'three, four, five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one/two\", \"three/four/five\", \"six\"], separator = \"/\")",
        "splitWordsBySeparator(words = ['one,two', 'three, four', 'five ,six'])"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15, 20], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 3, 10, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 1], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 8, 3, 2, 1], target = 6)"
    ],
    "sample_168": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Python\", \"Java\", \"Ruby\"], s = \"PJR\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"h\")",
        "isAcronym(words = [\"Python\", \"Programming\", \"Language\"], s = \"PPL\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"BNC\")",
        "isAcronym(words = [\"Television\", \"Astronomy\", \"Radio\", \"Physics\"], s = \"TARP\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcbacadefegdehijhklij\")",
        "minimumCost(s = \"caaabbb\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = 'aabba')",
        "makeSmallestPalindrome(s = \"babb\")"
    ],
    "sample_50": [
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abaac\")",
        "smallestString(s = \"abac\")",
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"abaaab\")",
        "smallestString(s = \"baab\")",
        "smallestString(s = \"ababbb\")",
        "smallestString(s = \"abababa\")",
        "smallestString(s = \"abbaa\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 2, 8, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 5, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,1,5,4], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(\"ABCDABCDABCD\")",
        "minLength(s = \"ABCDCDABCD\")",
        "minLength(s = \"ABAABCDABACD\")",
        "minLength(s = \"ABCABCDABCD\")",
        "minLength(\"ABCDBABCD\")",
        "minLength(s = \"ABCDCDCDABABAB\")",
        "minLength(s = \"ABCACDABABCD\")",
        "minLength(\"AABBABCDABC\")"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [10, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [10, 2, 3, 4, 5, 6, 7, 8, 9, 100])",
        "maxSum(nums = [12, 13, 15, 16, 18])",
        "maxSum(nums = [1, 5, 3, 6, 7])",
        "maxSum(nums = [3, 1, 5, 8, 2])",
        "maxSum(nums = [1, 9, 8, 3, 5])",
        "maxSum(nums = [2, 23, 45, 67, 89])",
        "maxSum(nums = [4, 3, 5, 9, 1])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [3, 2, 4, 1])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])"
    ],
    "sample_162": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88])",
        "maxSum(nums = [10, 19, 28, 37, 46, 55, 64, 73, 82, 91])",
        "maxSum(nums = [10, 7, 8, 9, 2, 5, 3, 6, 1, 4])",
        "maxSum(nums = [10, 8, 88, 90, 50])",
        "maxSum(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 88, 88])",
        "maxSum(nums = [8, 2, 4, 9, 12, 6, 7])",
        "maxSum(nums = [99, 9, 98, 88, 2, 8])",
        "maxSum(nums = [40, 27, 63, 28, 81, 90, 11, 61, 18, 97, 30])",
        "maxSum(nums = [34, 23, 8, 29, 59, 83, 31, 28, 15, 88, 44, 17])",
        "maxSum(nums = [49, 26, 88, 51, 16, 94, 36, 45, 12, 34, 90, 53, 27, 97, 65])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '101001')",
        "maximumOddBinaryNumber(s = '110011')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 5, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 7, 6, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 6, 5, 4], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 11], target = 8)"
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwe\")",
        "isAcronym(words = [\"Air\", \"Traffic\", \"Control\", \"Tower\"], s = \"ATT\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bat\"], s = \"COB\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank=2, additionalTank=1)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank=2, additionalTank=0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3, 3, 3, 3])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank=2, additionalTank=1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 5, 12, 43, 22], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"hello\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"aaabbbcc\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [0,1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,4,5,6,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [0,1,2,3,4,5,6,7,8,9], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,3,4,5,6,7], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 4)",
        "longestEqualSubarray(nums = [1,2,3,3,2,1,1,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 1, 4, 4, 4, 4, 4], k = 3)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 1], [2, 1], [3, 1]])",
        "colorTheArray(n=5, queries=[(1, 1), (2, 1), (3, 2), (4, 2), (5, 1)])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [3, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [4, 2], [1, 3], [3, 1], [0, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [1, 2], [2, 2], [2, 3]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 30], target=40)",
        "numberOfEmployeesWhoMetTarget(hours=[], target=100)",
        "numberOfEmployeesWhoMetTarget(hours=[], target=5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6, 8, 10], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 20, 10, 30], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 8, 3, 1], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 4, 5], target = 5)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "countBeautifulPairs(nums = [12, 15, 17, 20, 30, 33])",
        "countBeautifulPairs(nums = [12, 15, 17, 20, 25, 30])"
    ],
    "sample_229": [
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [3, 2, 1, 4])",
        "countWays(nums = [2, 4, 6])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countWays(nums = [3, 2, 5, 1])",
        "countWays(nums = [2, 4, 5, 6])",
        "countWays(nums = [3, 2, 1, 4, 2, 4, 1])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"10\")",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s = \"0\")",
        "maximumOddBinaryNumber(s = '101010')",
        "maximumOddBinaryNumber(s = \"0\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [3, 1, 5, 4, 2])",
        "maximumTripletValue(nums = [5, 1, 3])",
        "maximumTripletValue(nums = [3, 6, 1, 5])"
    ],
    "sample_98": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 3)",
        "maximumJumps(nums = [3, 4, 2, 1, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [5, 1, 3, 4, 2], target = 3)",
        "maximumJumps(nums = [5, 2, 4, 1, 3], target = 3)",
        "maximumJumps(nums = [5, 3, 4, 2, 5, 1, 2, 3, 4], target = 3)"
    ],
    "sample_149": [
        "finalString(s = \"rotator\")",
        "finalString(s = \"rotator\")",
        "finalString(s = \"rotor\")",
        "finalString(s = \"ratings\")",
        "finalString(s = \"rsiyng\")",
        "finalString(s = \"sirotng\")",
        "finalString(s = \"hating\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"kriti\")",
        "finalString(s = \"thisnirts\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [4, 2, 2, 2, 4, 4])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [2, 1, 2, 1, 1, 2, 2, 2])",
        "continuousSubarrays(A = [1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5])",
        "continuousSubarrays(A = [2, 1, 2, 1, 2, 2])",
        "continuousSubarrays(A = [2, 1, 2, 2, 2, 1, 1, 2, 2, 2])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 4, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 2, 1, 1, 3, 3, 4, 4, 4, 2, 2])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 4, 5, 2, 1, 5, 6])"
    ],
    "sample_228": [
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1,2,4,5,6])",
        "countWays(nums = [0, 2, 2])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "maximumBeauty(nums = [2, 3, 5, 6, 8, 9], k = 3)",
        "maximumBeauty(nums = [4, 3, 2, 1], k = 1)",
        "maximumBeauty(nums = [2, 4, 5, 7, 10, 11, 12], k = 3)",
        "maximumBeauty(nums = [1, 5, 1, 8, 9, 9, 4, 5, 2, 8], k = 3)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(a = [1, 1, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(a = [1, 1, 2, 3, 4])",
        "distinctDifferenceArray(a = [1, 1, 1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(a = [1, 1, 1, 2, 2, 3, 3, 3, 3])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(a = [2, 2, 2, 2, 2])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(a = [1, 2, 3, 3, 2, 1])",
        "continuousSubarrays(a = [2, 1, 2, 1, 2, 2, 1])",
        "continuousSubarrays(a = [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0])",
        "continuousSubarrays(a = [1,2,2,2,3,4,4,4,5,5])",
        "continuousSubarrays(a = [2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [4, 2, 1, 6])",
        "continuousSubarrays(nums = [4, 2, 2, 2, 4, 4, 2, 2])",
        "continuousSubarrays(nums = [2, 1, 4, 7, 6, 5, 3])",
        "continuousSubarrays(nums = [1, 0, 3, 3, 2, 1, 2])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 13, 31, 23])",
        "countBeautifulPairs(nums = [12, 21, 13, 31, 23])",
        "countBeautifulPairs(nums = [12, 15, 20, 25, 30])",
        "countBeautifulPairs(nums = [12, 28, 46, 64])",
        "countBeautifulPairs(nums = [12, 28, 16, 4])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2,3,1,5,4])",
        "semiOrderedPermutation(nums = [2,3,1,5,4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])",
        "semiOrderedPermutation(nums=[2, 3, 1, 5, 4])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"01101\")",
        "maximumOddBinaryNumber(s = \"101110\")"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDACDAB\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(\"ABCDACDAB\")",
        "minLength(s = \"ABCABCDABC\")",
        "minLength(s = \"ABCABCDABC\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 1])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 11, num2 = 4)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)"
    ],
    "sample_100": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [3, 4, 2, 1, 2, 3, 7], target = 2)",
        "maximumJumps(nums = [4, 3, 3, 2, 2, 1, 1], target = 2)",
        "maximumJumps(nums=[6, 1, 9], target=4)",
        "maximumJumps(nums = [3, 2, 5, 1, 1, 9, 3, 4], target = 3)",
        "maximumJumps(nums=[2, 1, 5, 3, 6, 7, 6, 8, 9], target=3)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 3, 5, 7, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 3, 5, 9, 11, 13])",
        "maxIncreasingGroups(x = [2, 5, 1, 8, 3])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLRRRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LR_L_RRR\")",
        "furthestDistanceFromOrigin(moves = \"R_LLL_RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRRLRLLD\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRUULDD\")",
        "furthestDistanceFromOrigin(moves = \"R_RRRLLL_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRUULRDDD\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLRR_LLRRRR\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"1000\")",
        "maximumOddBinaryNumber(s = \"010101010\")"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n=1, queries=[])",
        "colorTheArray(n=1, queries=[])",
        "colorTheArray(n=1, queries=[])",
        "colorTheArray(n = 1, queries = [[0, 0]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 6, 7])",
        "findValueOfPartition(nums = [5, 1, 3, 2, 4])",
        "findValueOfPartition(nums = [4, 6, 1, 3, 2])",
        "findValueOfPartition(nums = [2, 1, 3, 6, 4, 5])",
        "findValueOfPartition(nums = [2, 2, 1, 1])",
        "findValueOfPartition(nums = [4, 6, 8, 10, 12, 14])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[0,0,1,0,1,0,1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [3,1,3,6,3])",
        "minimumIndex(nums = [3,1,3,6,3])",
        "minimumIndex(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minimumIndex(nums = [3,1,4,1,5,9,2,6,5,3,5])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 1, 2])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 8, 9])",
        "minimumIndex(nums = [3, 2, 5, 2, 4, 2])",
        "minimumIndex(nums = [3, 2, 5, 1, 4, 7, 6])",
        "minimumIndex(nums = [4, 3, 5, 2, 8, 7, 5, 4, 4, 5, 3, 4])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 7, 9, 12], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 10], [3, 5, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 7], [3, 5, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 5, 3], [3, 7, 1], [2, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 2], [3, 5, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 5], [3, 5, 3], [2, 4, 2], [4, 6, 1]])",
        "maximizeTheProfit(n=3, offers=[[1, 3, 5], [2, 4, 10], [3, 5, 15]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 5], [2, 4, 3], [4, 5, 2], [2, 4, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [2, 5, 3], [3, 7, 10], [4, 6, 8]])",
        "maximizeTheProfit(n = 2, offers = [[1, 3, 1], [2, 5, 2], [3, 6, 3], [4, 7, 4]])",
        "maximizeTheProfit(n=5, offers=[(1, 3, 10), (2, 4, 5), (3, 5, 15), (4, 6, 3), (5, 7, 10)])"
    ],
    "sample_202": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"0075\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"50\")",
        "minimumOperations(num = \"0050\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(\"75000\")",
        "minimumOperations(\"1234567890\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"105\")",
        "minimumOperations(num = \"105\")",
        "minimumOperations(num = \"105\")",
        "minimumOperations(num = \"105\")",
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"010\")",
        "minimumOperations(num = \"123005\")",
        "minimumOperations(num = \"0101\")",
        "minimumOperations(num = \"2515\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1,2,1],[2,3,2],[3,4,3],[4,5,4]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,1],[2,4,2],[3,5,3]])",
        "maximizeTheProfit(n=3, offers=[(1,2,1),(2,3,1)])",
        "maximizeTheProfit(n=3, offers=[(1,2,1),(2,3,1)])",
        "maximizeTheProfit(n=3, offers=[])",
        "maximizeTheProfit(n=3, offers=[[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n=5, offers=[[1,3,2],[3,5,1],[2,4,3]])",
        "maximizeTheProfit(n=3, offers=[[1,3,1],[2,3,2],[3,4,4]])",
        "maximizeTheProfit(n=3, offers=[[1, 2, 50], [2, 3, 100], [3, 4, 200]])",
        "maximizeTheProfit(n=5, offers=[[2,3,5],[1,2,4],[3,4,7]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 5, 3, 6, 8, 9, 12], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 1, 2, 4, 3, 1, 2, 2, 4], threshold = 4)"
    ],
    "sample_203": [
        "minimumOperations(num = \"50\")",
        "minimumOperations(num = \"50\")",
        "minimumOperations(num = \"50\")",
        "minimumOperations(num = \"15\")",
        "minimumOperations(num = \"15\")",
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"1\")",
        "minimumOperations(num = \"010\")",
        "minimumOperations(num = \"205\")",
        "minimumOperations(num = \"8008\")"
    ],
    "sample_11": [
        "colorTheArray(n=5, queries=[(1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 3]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 2], [5, 3], [4, 1], [2, 2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [1, 1]])",
        "colorTheArray(n=3, queries=[(1, 1), (2, 1), (3, 0), (1, 0)])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [3, 1], [1, 2], [3, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [3, 1], [2, 2], [4, 2]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [2, 1, 3, 1, 2])",
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2, 2, 2])",
        "minimumIndex(nums = [3, 4, 5, 5, 5, 5, 5, 5, 5])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6])",
        "minimumIndex(nums = [3, 4, 5, 5, 6, 6, 7])",
        "minimumIndex(nums = [1, 3, 5, 2, 4, 6, 5])",
        "minimumIndex(nums = [3, 2, 5, 2, 4, 2])",
        "minimumIndex(nums = [2, 1, 3, 1, 2, 4, 4, 4, 4])",
        "minimumIndex(nums = [3, 5, 1, 2, 3, 4, 5, 1, 2, 3])"
    ],
    "sample_102": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [3, 2, 5, 1, 1, 9, 3, 4], target = 2)",
        "maximumJumps(nums = [3, 4, 2, 1, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [5, 1, 3, 4, 2], target = 3)",
        "maximumJumps(nums = [2, 1, 3, 1, 2], target = 1)",
        "maximumJumps(nums = [2, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [6, 5, 4, 3, 2, 1], target = 3)",
        "maximumJumps(nums = [2, 1, 4, 7, 9], target = 3)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')"
    ],
    "sample_57": [
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 2)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [4, 3, 2, 1])",
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [5, 4, 3, 2, 1])",
        "findValueOfPartition(a = [5, 3, 1, 4])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5, 6, 7])",
        "findValueOfPartition(a = [4, 1, 3, 2])",
        "findValueOfPartition(a = [3, 2, 1, 4, 6])",
        "findValueOfPartition(a = [1, 2, 4, 7, 10, 13])",
        "findValueOfPartition(a = [4, 6, 2, 8])",
        "findValueOfPartition(a = [9, 10, 8, 7, 6, 5])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [5, 2, 3, 2, 1, 4])",
        "distinctDifferenceArray(nums = [5, 2, 3, 2, 1, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [3, 2, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [5, 2, 1, 3, 4, 5])",
        "distinctDifferenceArray(nums = [5, 3, 1, 5, 4])",
        "distinctDifferenceArray(nums = [5, 2, 2, 3, 3, 1, 1, 4, 4, 4])",
        "distinctDifferenceArray(nums = [5, 2, 4, 3, 2, 4, 1])",
        "distinctDifferenceArray(nums = [5, 2, 4, 4, 2, 4, 5, 3, 4])"
    ],
    "sample_120": [
        "minimumIndex(nums = [4, 5, 1, 2, 3])",
        "minimumIndex(nums = [4, 5, 6, 7, 0, 1, 2, 3])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 3, 5])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4, 5])",
        "minimumIndex(nums = [3, 5, 1, 2, 4])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 3, 4, 5])",
        "minimumIndex(nums = [3, 1, 5, 2, 4])",
        "minimumIndex(nums = [3, 1, 2, 3, 4, 2, 2])",
        "minimumIndex(nums = [3, 5, 1, 2, 3, 4, 3])",
        "minimumIndex(nums = [2, 4, 3, 1, 2, 5, 2, 4])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"RLR\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"RLLR\")",
        "furthestDistanceFromOrigin(moves = \"LRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLLR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLDLL\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"hello\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"apple\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"abcadef\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [4, 3, 2, 6, 5, 1], k = 3)",
        "checkArray(nums = [4, 3, 2, 6, 5, 1], k = 3)",
        "checkArray(nums = [5, 2, 4, 1, 3], k = 3)",
        "checkArray(nums = [3, 3, 2, 1, 3], k = 3)",
        "checkArray(nums = [3, 1, 5, 2, 4], k = 3)",
        "checkArray(nums = [3, 3, 1, 2, 2, 1], k = 3)",
        "checkArray(nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], k = 3)",
        "checkArray(nums = [3, 2, 1, 2, 4, 5, 1, 1], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 3])",
        "maxIncreasingGroups(usageLimits = [10, 50, 20, 80, 30])",
        "maxIncreasingGroups(usageLimits = [6, 4, 5, 1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [5, 1, 4, 3, 2])",
        "maxIncreasingGroups(usageLimits = [2, 4, 1, 3, 6, 5])",
        "maxIncreasingGroups(usageLimits = [4, 2, 3, 1, 1])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 4, 5, 2, 9])",
        "maxIncreasingGroups(usageLimits = [20, 30, 50, 60, 80, 90, 100])",
        "maxIncreasingGroups(usageLimits = [4, 1, 2, 6, 2, 4, 5, 3, 1])"
    ],
    "sample_206": [
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"135\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(num = \"5075\")",
        "minimumOperations(num = \"1025\")",
        "minimumOperations(num = \"555\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"402\")",
        "minimumOperations(\"7525\")",
        "minimumOperations(num = \"725\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [0, 2, 1, 4, 3])"
    ],
    "sample_38": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abca\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 3, 5, 7, 9])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [2, 4, 6])",
        "maxIncreasingGroups(usageLimits = [2, 3, 1, 5])",
        "maxIncreasingGroups(usageLimits = [4, 6, 10])",
        "maxIncreasingGroups(usageLimits = [4, 6, 10, 20])",
        "maxIncreasingGroups(usageLimits = [4, 6, 10, 15])"
    ],
    "sample_53": [
        "smallestString(s = \"bcd\")",
        "smallestString(s = \"bbbac\")",
        "smallestString(s = \"bccc\")",
        "smallestString(s = \"bccc\")",
        "smallestString(s = \"bac\")",
        "smallestString(s = \"bcaabc\")",
        "smallestString(s = \"bcaaaz\")",
        "smallestString(s = 'babcd')",
        "smallestString(s = \"bbbccc\")",
        "smallestString(s = \"bzczc\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1, 3, 15, 11, 2], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 1, 3], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7], x = 2)",
        "minAbsoluteDifference(nums = [1, 3, 15, 11, 2], x = 3)",
        "minAbsoluteDifference(nums=[1,3,15,11,2], x=5)",
        "minAbsoluteDifference(nums=[1,2,3,4,5,6,7], x=3)",
        "minAbsoluteDifference(nums = [2, 4, 7, 2, 11, 26], x = 3)",
        "minAbsoluteDifference(nums = [5, 2, 4, 9, 11, 17, 20], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 4, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 1], [2, 5, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 1], [2, 5, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 3, offers = [(1, 3, 1), (2, 3, 2), (3, 3, 3)])",
        "maximizeTheProfit(N = 3, offers = [(1, 2, 1), (2, 3, 2), (1, 3, 3)])",
        "maximizeTheProfit(N=4, offers=[[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 3], [2, 3, 5], [3, 4, 2]])",
        "maximizeTheProfit(N = 3, offers = [(1, 2, 1), (2, 3, 1), (1, 3, 2)])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \",\")",
        "splitWordsBySeparator(a = [], b = \"\")",
        "splitWordsBySeparator(a = [], b = \"\")",
        "splitWordsBySeparator(a = [\"apple\", \"banana\", \"cherry\"], b = \"a\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = \"512301000\")",
        "removeTrailingZeros(a = \"512301000000\")",
        "removeTrailingZeros(a = '512300')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"odd\")",
        "makeSmallestPalindrome(s = \"oddeven\")",
        "makeSmallestPalindrome(s = \"venn\")",
        "makeSmallestPalindrome(s = \"nevvn\")",
        "makeSmallestPalindrome(s = \"ven\")",
        "makeSmallestPalindrome(s = \"evolve\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 3, 4, 5, 6], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,3,4,5,6], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,4,5,6], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 3, 3, 2], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,4,3,4,1], k = 1)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5,6], k = 2)",
        "maximumBeauty(nums = [2, 3, 5, 7, 11], k = 4)"
    ],
    "sample_163": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 34, 56, 78])",
        "maxSum(nums = [123, 234, 345])",
        "maxSum(nums = [1, 7, 3, 2, 8])",
        "maxSum(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "maxSum(nums = [2, 2, 2])"
    ],
    "sample_151": [
        "finalString(s = \"this is a string\")",
        "finalString(s = \"this is a test\")",
        "finalString(s = \"thisisazng\")",
        "finalString(s = \"thisisazng\")",
        "finalString(s = 'thisiscool')",
        "finalString(s = \"radar\")",
        "finalString(s = 'rotors')",
        "finalString(s = \"initial\")",
        "finalString(s = 'rtsnfig')",
        "finalString(s = 'rigitstn')"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '5123000001')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"101010\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"01010\")",
        "maximumOddBinaryNumber(s = '101010')",
        "maximumOddBinaryNumber(s = '10101')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy\", \"medium\", \"hard\"], separator = \"m\")",
        "splitWordsBySeparator(words = ['easy', 'medium', 'hard'], separator = 'm')",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = '')"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,2,3,3,3,4,4,4,4], K = 3)",
        "longestEqualSubarray(A = [1,2,2,3,3,3,4,4,4,4], K = 3)",
        "longestEqualSubarray(A = [1,2,2,3,3,3,4,4,4,4], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], K = 3)",
        "longestEqualSubarray(A = [1,2,2,3,4,4,4,5], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9], K = 5)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9], K = 1)",
        "longestEqualSubarray(A = [1,2,3,2,3,4,5,6], K = 3)",
        "longestEqualSubarray(A = [0,0,0,0,0,0,0,0,0,0], K = 1)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [2, 3, 1])",
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [2, 4, 6, 8])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 6, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = \"512301000000\")"
    ],
    "sample_167": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwo\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwo\")",
        "isAcronym(words = [\"abc\", \"def\", \"ghi\"], s = \"adg\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)"
    ],
    "sample_147": [
        "finalString(s = \"thisisazng\")",
        "finalString(s = \"sings\")",
        "finalString(s = \"this is a test\")",
        "finalString(s = \"thisisazig\")",
        "finalString(s = \"happy\")",
        "finalString(s = \"spring\")",
        "finalString(s = \"spring\")",
        "finalString(s = \"siri\")",
        "finalString(s = \"sting\")",
        "finalString(s = 'lorem ipsum dolor sit amet')"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"odd\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'event')"
    ],
    "sample_177": [
        "maximizeTheProfit(n=3, offers=[(1, 2, 5), (2, 3, 10), (3, 4, 5)])",
        "maximizeTheProfit(n=3, offers=[(1, 2, 5), (2, 3, 10)])",
        "maximizeTheProfit(n=3, offers=[[1, 2, 3], [2, 3, 5], [3, 4, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 3, 10], [3, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 4], [2, 3, 1], [3, 4, 2], [4, 5, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 4, 5], [3, 1, 1], [4, 3, 2]])",
        "maximizeTheProfit(n=5, offers=[(0, 1, 1), (1, 3, 5), (2, 4, 3)])",
        "maximizeTheProfit(n=5, offers=[[1, 2, 4], [2, 3, 5], [3, 4, 8], [4, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 1], [1, 3, 2], [2, 4, 3], [3, 5, 4], [4, 5, 5]])",
        "maximizeTheProfit(n=10, offers=[(0, 2, 5), (1, 4, 8), (3, 6, 1)])"
    ],
    "sample_99": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 4)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 4)",
        "maximumJumps(nums = [6, 3, 5, 1, 1], target = 2)",
        "maximumJumps(nums = [3, 2, 5, 1, 2, 4, 5], target = 2)",
        "maximumJumps(nums = [6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6], target = 3)",
        "maximumJumps(nums = [100, 2, 3, 2, 1, 100], target = 2)",
        "maximumJumps(nums = [6, 2, 8, 4, 3, 9], target = 3)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0,1,0,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"11001\")",
        "maximumOddBinaryNumber(s = \"000110\")"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n=3, k=5)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 9, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 12, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 9, num2 = 1)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 1)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3], modulo=3, k=0)",
        "countInterestingSubarrays(nums = [2, 2, 2, 4, 4, 4], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [4, 5, 7, 1, 3, 5], modulo = 3, k = 1)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 5, 9, 2, 6, 10], k = 4)"
    ],
    "sample_148": [
        "finalString(s = \"pintori\")",
        "finalString(s = \"pintire\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = 'xpiont')",
        "finalString(s = 'pintori')",
        "finalString(s = \"python\")",
        "finalString(s = \"rotip\")"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [3, 1, 2])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [2, 3, 1, 0])",
        "countWays(nums = [1, 4, 2, 3])",
        "countWays(nums = [2, 1, 4, 3])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums = [2, 4, 1, 6])",
        "countWays(nums = [2,3,1,4,7,5])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 25, 36, 48])",
        "countBeautifulPairs(nums = [12, 15, 17, 20])",
        "countBeautifulPairs(nums = [12, 15, 17, 20])",
        "countBeautifulPairs(nums = [12, 25, 36, 48, 60])",
        "countBeautifulPairs(nums=[12, 21, 13, 31])",
        "countBeautifulPairs(nums=[12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 27, 65, 43])",
        "countBeautifulPairs(nums = [12, 25, 7, 36])",
        "countBeautifulPairs(nums=[12, 15, 17, 20])",
        "countBeautifulPairs(nums = [12, 25, 10, 40])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 9, num2 = 2)",
        "makeTheIntegerZero(num1 = 17, num2 = 5)",
        "makeTheIntegerZero(num1 = 17, num2 = 5)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 100, num2 = 3)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"odd\")",
        "makeSmallestPalindrome(s = \"reven\")",
        "makeSmallestPalindrome(s = \"nevvn\")",
        "makeSmallestPalindrome(s = \"nevene\")",
        "makeSmallestPalindrome(s = \"levin\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwo\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"Air\", \"Traffic\", \"Control\"], s = \"ATC\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwol\")",
        "isAcronym(words = [\"Natural\", \"Language\", \"Processing\"], s = \"NLP\")",
        "isAcronym(words = [\"Data\", \"Science\", \"Python\"], s = \"DSP\")",
        "isAcronym(words = [\"Practice\", \"Makes\", \"Perfect\"], s = \"PMP\")",
        "isAcronym(words = [\"South\", \"East\", \"West\", \"North\"], s = \"SEWN\")",
        "isAcronym(words = [\"hurry\", \"the\", \"turtle\", \"is\", \"late\"], s = \"HtttL\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,0])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 5, 8, 10], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 11)"
    ],
    "sample_227": [
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [2, 3, 4, 5])",
        "countWays(nums = [-1, 0, 2, 3])",
        "countWays(nums = [-1, 0, 1, 3, 5])",
        "countWays(nums = [-3, 0, 1, 2, 3])"
    ],
    "sample_39": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"caaab\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"R__L_\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"RL_R_\")",
        "furthestDistanceFromOrigin(moves = \"RL__R\")",
        "furthestDistanceFromOrigin(moves = \"__LRL\")",
        "furthestDistanceFromOrigin(moves = \"LR_R\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 3, 2, 1])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [10, 11, 12], threshold = 15)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 1, 3, 5], threshold = 6)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 9)",
        "longestAlternatingSubarray(nums = [0, 1, 0, 1, 0, 1, 0], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 3, 3, 3, 4, 5, 5, 5], threshold = 6)",
        "longestAlternatingSubarray(nums = [4, 2, 7, 5, 8, 3], threshold = 8)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,6]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1,3],[3,7],[2,5]])",
        "numberOfPoints(nums = [[1,3],[2,4],[4,7]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 5], [3, 5]])",
        "numberOfPoints(nums=[[1,3],[3,6],[5,8],[9,12],[12,15]])",
        "numberOfPoints(nums = [[1,3],[3,6],[5,8],[10,12],[12,14]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 15, 17, 20])",
        "countBeautifulPairs(nums = [12, 25, 36, 48])",
        "countBeautifulPairs(nums = [12, 25, 36, 48])",
        "countBeautifulPairs(nums = [12, 15, 10, 20])",
        "countBeautifulPairs(nums = [12, 21, 11, 14, 13])",
        "countBeautifulPairs(nums = [12, 21, 11, 14, 13])",
        "countBeautifulPairs(nums = [12, 21, 11, 13])",
        "countBeautifulPairs(nums = [12, 15, 20, 25])",
        "countBeautifulPairs(nums = [12, 15, 11, 18, 19])",
        "countBeautifulPairs(nums = [12, 15, 20, 30, 45])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], t = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7, 8, 9], t = 10)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 6)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4, 5], t=2)",
        "longestAlternatingSubarray(nums=[5,2,6,3,9], t=7)",
        "longestAlternatingSubarray(nums = [2, 3, 1, 2, 4, 1, 5, 6, 4], t = 3)"
    ],
    "sample_36": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcbacadefegdehijhklij\")",
        "minimumCost(s = \"abcb\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCABD\")",
        "minLength(s = \"ABAABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCAD\")",
        "minLength(s = \"ABCCDDEF\")",
        "minLength(s = \"ABCDBACDBDCDC\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], modulo=3, k=0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 2, 4, 5, 7], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [4, 5, 7, 1, 3, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 5, 7, 9], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 5, 2, 3, 7, 5], modulo = 3, k = 1)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n=1, queries=[[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n=1, queries=[])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [3, 1]])",
        "colorTheArray(n=2, queries=[[0, 1], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1], [1, 2], [2, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [3, 1], [1, 2], [2, 1], [3, 2]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "maxNonDecreasingLength(nums1=[1, 2, 3, 4, 5], nums2=[6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [2, 3, 1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 2, 2])",
        "maxNonDecreasingLength(nums1=[1, 2, 3, 2, 1], nums2=[2, 4, 3, 2, 5])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1, 1, 1, 1, 1])",
        "findValueOfPartition(nums = [1, 2, 4, 8, 16])",
        "findValueOfPartition(nums = [2, 2, 1, 1])",
        "findValueOfPartition(nums = [1, 1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 3, 4, 5, 7])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LLRRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLRLRLRR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRRR_LL\")",
        "furthestDistanceFromOrigin(moves = \"LR_LR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLRLRLRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLLRRRLRR\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [4, 5, 1, 2, 7, 8, 3])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 8, 3])",
        "minimumIndex(nums = [4, 5, 1, 1, 5])",
        "minimumIndex(nums = [3, 1, 3, 4, 2, 2])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 3, 4, 5])",
        "minimumIndex(nums = [4, 5, 1, 1, 5, 4])",
        "minimumIndex(nums = [3, 4, 5, 2, 2])",
        "minimumIndex(nums = [3, 4, 3, 2, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 6])",
        "minimumIndex(nums = [3, 4, 2, 1, 3, 1, 3, 3])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [4, 2, 1, 3, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n=1, k=3)",
        "minimumSum(n=1, k=3)",
        "minimumSum(n=1, k=3)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n=1, k=1)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 1, k = 2)"
    ]
}