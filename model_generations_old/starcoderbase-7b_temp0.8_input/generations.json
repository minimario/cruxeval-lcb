{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 2, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,2,4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 7])",
        "alternatingSubarray(nums = [2, 1, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 2, 5, 2, 2, 7])",
        "alternatingSubarray(nums = [3, 2, 7, 4, 1, 3])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[0, 1, 0], [0, 1, 0], [0, 1, 0]])",
        "matrixSum(a = [[2], [3], [1, 2]])",
        "matrixSum(a = [[0], [2], [1], [3], [4]])",
        "matrixSum(a = [[1, 1, 3], [1, 3, 3], [3, 1, 1], [3, 3, 3]])",
        "matrixSum(a = [[3, 8, 4, 7], [4, 5, 6, 2], [1, 2, 9, 5]])",
        "matrixSum(a=[[3,4,5],[3,1,3],[2,3,4]])",
        "matrixSum(a = [[5,2,1,4],[3,7,1,0],[8,4,0,3]])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 0], [1, 1, 0]])",
        "findChampion(grid = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 0]])",
        "findChampion(grid = [[1,0,1], [1,1,0], [0,0,0]])",
        "findChampion(grid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 0, 11, 12], [13, 14, 15, 16]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1]])",
        "findChampion(grid = [[3, 0, 0, 2, 0], [2, 0, 0, 1, 2], [1, 0, 0, 1, 0], [0, 1, 0, 0, 2], [0, 0, 1, 0, 2]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])",
        "matrixSum(a = [[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11], [10, 11, 12, 13, 14], [13, 14, 15, 16, 17]])",
        "matrixSum(a = [[1, 2], [0, 1], [-1, 0]])",
        "matrixSum(a = [[1, 2, 3], [10, 10, 10], [1, 2, 3]])",
        "matrixSum(a = [[1, 3, 3], [4, 5, 6]])",
        "matrixSum(a = [[2, 3], [1, 2], [1, 3]])",
        "matrixSum(a = [[2, 6, 5], [3, 4, 7], [1, 8, 9]])",
        "matrixSum(a = [[2, 4, 1, 5], [1, 3, 4, 2]])",
        "matrixSum(a = [[2, 3, 1], [1, 3, 4], [0, 3, 3]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 2, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 5])",
        "alternatingSubarray(nums = [1,2,2,3])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 4, 5])",
        "alternatingSubarray(nums = [2, -1, 1, -2])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 5, 5])",
        "alternatingSubarray(nums = [3, 4, 2, 4, 3])",
        "alternatingSubarray(nums = [4, 4, 1, 1, 0, -1, -1])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"word1\", \"word2\", \"word3\"], x = \"ord\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"ap\")",
        "findWordsContaining(words = [\"this\", \"is\", \"a\", \"test\", \"string\"], x = \"test\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"apple\"], x = \"ap\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"cow\", \"doggy\"], x = \"dog\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cow\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"watermelon\", \"peach\"], x = \"melon\")",
        "findWordsContaining(words = [\"cat\", \"fox\", \"dog\", \"lion\"], x = \"o\")",
        "findWordsContaining(words = [\"I\", \"wonder\", \"what\", \"the\", \"fuck\"], x = \"fuck\")",
        "findWordsContaining(words = [\"butter\", \"ox\", \"butter\", \"panther\"], x = \"butter\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"apple\", s2 = \"aple\")",
        "canBeEqual(s1 = \"qwerty\", s2 = \"qwerty\")",
        "canBeEqual(s1 = \"mango\", s2 = \"papaya\")",
        "canBeEqual(s1 = \"abac\", s2 = \"aabb\")",
        "canBeEqual(s1 = \"ca\", s2 = \"cat\")",
        "canBeEqual(s1 = \"abccba\", s2 = \"cabab\")",
        "canBeEqual(s1 = \"xyxyxyxy\", s2 = \"yxxyxyxy\")",
        "canBeEqual(s1 = \"7654\", s2 = \"4576\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums=[10,9,2,5,3,7,101,18], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [5,1,3,2,3], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,4,5,3,6,7,9], target = 13)",
        "lengthOfLongestSubsequence(nums = [1,1,4,2,4,4,4,3], target = 5)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5,10,12,13], target=24)",
        "lengthOfLongestSubsequence(nums = [2,2,4,5,7,3], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,5,4,6,8,9,10,11], target = 10)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"aaa\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"baa\")",
        "canBeEqual(s1 = \"banana\", s2 = \"abana\")",
        "canBeEqual(s1 = \"ba\", s2 = \"bana\")",
        "canBeEqual(s1 = \"aaaa\", s2 = \"aaaa\")",
        "canBeEqual(s1 = \"ball\", s2 = \"llaa\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1,1,0,1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0])",
        "maxSubarrays(nums = [3, 1, 4, 2])",
        "maxSubarrays(nums = [1, 1, 1, 1])",
        "maxSubarrays(nums = [3,1,4,2])",
        "maxSubarrays(nums = [3, 2, 1, 5, 2, 6])",
        "maxSubarrays(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 4, 2, 5, 6, 3, 2, 1, 2])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [3, 2, 4], money = 5)",
        "buyChoco(prices=[1,2,3], money=4)",
        "buyChoco(prices=[1, 2, 3, 4], money=5)",
        "buyChoco(prices = [3, 1, 2], money = 0)",
        "buyChoco(prices = [10, 5, 1], money = 5)",
        "buyChoco(prices = [1, 1, 2, 3], money = 1)",
        "buyChoco(prices = [10, 2, 5, 7, 8], money = 10)",
        "buyChoco(prices = [2, 5, 10, 10], money = 25)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [2,2,2,2,2], l = 0, r = 4)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 0, r = 4)",
        "countSubMultisets(nums = [2, 4], l = 0, r = 2)",
        "countSubMultisets(nums = [1,2,3,4], l = 2, r = 4)",
        "countSubMultisets(nums = [2, 3, 4, 5], l = 1, r = 3)",
        "countSubMultisets(nums = [2,2,1,1,1,1,1], l = 3, r = 5)",
        "countSubMultisets(nums = [1, 5, 2, 10], l = 1, r = 2)",
        "countSubMultisets(nums=[1,2,3,4], l = 0, r = 2)",
        "countSubMultisets(nums = [3, 5, 1, 5, 4], l = 1, r = 3)",
        "countSubMultisets(nums = [2, 3, 4], l = 0, r = 2)"
    ],
    "sample_322": [
        "isFascinating(n = 3)",
        "isFascinating(n = 123)",
        "isFascinating(n = 7)",
        "isFascinating(n = 1234)",
        "from typing import *\n\nfrom math import *\n\n\ndef isFascinating(n: int) -> bool:\n    x = str(n) + str(2 * n) + str(3 * n)\n    return len(set(x))",
        "isFascinating(n = 1000)",
        "isFascinating(n = 111111111)",
        "from typing import *\n\nfrom math import *\n\n\ndef isFascinating(n: int) -> bool:\n    x = str(n) + str(2 * n) + str(3 * n)\n    return len(set(x))",
        "from typing import *\n\nfrom math import *\n\n\ndef isFascinating(n: int) -> bool:\n    x = str(n) + str(2 * n) + str(3 * n)\n    return len(set(x))",
        "from typing import *\n\nfrom math import *\n\n\ndef isFascinating(n: int) -> bool:\n    x = str(n) + str(2 * n) + str(3 * n)\n    return len(set(x))"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"abba\", s2 = \"baba\")",
        "canBeEqual(s1 = \"bana\", s2 = \"banana\")",
        "canBeEqual(s1 = \"hi\", s2 = \"ih\")",
        "canBeEqual(s1 = \"zzz\", s2 = \"zyy\")",
        "canBeEqual(s1 = \"mbc\", s2 = \"ma\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 3, 4])",
        "minimumCoins(prices = [1, 3, 4])",
        "minimumCoins(prices = [1, 3, 5, 6])",
        "minimumCoins(prices = [2, 4, 1, 3])",
        "minimumCoins(prices = [2, 4, 1, 3])",
        "minimumCoins(prices=[1, 3, 2, 4])",
        "minimumCoins(prices = [5, 1, 2, 3])",
        "minimumCoins(prices = [3, 1, 5, 8, 7])",
        "minimumCoins(prices = [2, 3, 1, 2, 4])",
        "minimumCoins(prices = [1, 3, 4, 7, 9, 2, 6])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 120)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 150)",
        "accountBalanceAfterPurchase(p = 40)",
        "accountBalanceAfterPurchase(p = 55)",
        "accountBalanceAfterPurchase(p = 60)",
        "accountBalanceAfterPurchase(p = 98)",
        "accountBalanceAfterPurchase(p = 900)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 5])",
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [1, 1, 1, 3, 3])",
        "minOperations(nums = [5, 1, 3])",
        "minOperations(nums = [6, 2])",
        "minOperations(nums = [2, 3, 3, 2])",
        "minOperations(nums = [1, 2, 9, 3, 4, 2, 3, 8])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6])",
        "minOperations(nums = [5, 3, 2, 5, 5, 3, 1, 3, 2, 5, 2, 3, 5, 4, 5, 1, 2, 5, 4, 1, 2, 1, 5, 3, 1, 5, 5, 5, 4, 1, 5, 4, 1, 1, 1, 1, 3, 5, 1, 3, 4, 4, 3, 4, 2, 3, 5, 1, 2, 3, 4, 3, 1, 1, 5, 5, 3, 5, 5, 4, 1, 3, 2, 3, 4, 2, 4, 2, 5, 5, 4, 2, 2, 4, 2, 2, 4, 4, 5, 4, 5, 5, 5, 4, 2, 3, 4, 4, 3, 4, 5, 1, 3, 4, 4, 3, 4, 3, 4, 4, 2, 1, 5, 1, 5, 3, 2, 5, 5, 3, 1, 2, 1, 5, 3, 1, 5, 5, 5, 4, 1, 5, 4, 1, 1, 1, 1, 3, 5, 1, 3, 4, 4, 3, 4, 2, 3, 5, 1, 2, 3, 4, 3, 1, 1, 5, 5, 3, 5, 5, 4, 1, 3, 2, 3, 4, 2, 4, 2, 5, 5, 4, 2, 2, 4, 2, 2, 4, 4, 5, 4, 5, 5, 5, 4, 2, 3, 4, 4, 3, 4, 5, 1, 3, 4, 4, 3, 4, 3, 4, 4, 2, 1, 5, 1, 5, 3, 2, 5, 5, 3, 1, 2, 1, 5, 3, 1, 5, 5, 5"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 2, 5, 3, 7])",
        "alternatingSubarray(nums = [1,2,2,4])",
        "alternatingSubarray(nums = [3,1,2,4])",
        "alternatingSubarray(nums = [1, 2, 2, 4])",
        "alternatingSubarray(nums = [3, 1, 2, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 5, 3, 7, 2])",
        "alternatingSubarray(nums=[1, 2, 3, 3, 4, 4, 5])",
        "alternatingSubarray(nums = [2,1,3,5,3,2,4,1,2])",
        "alternatingSubarray(nums = [3,1,4,2,3,5,4,5,6,7])",
        "alternatingSubarray(nums = [5, 7, 2, 1, 5, 7, 4, 1])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 10)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 15, limit = 5)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 12, limit = 3)"
    ],
    "sample_247": [
        "minOperations(s1 = \"xx\", s2 = \"yy\", x = 2)",
        "minOperations(s1 = \"a\", s2 = \"b\", x = 1)",
        "minOperations(s1 = \"abdc\", s2 = \"acbd\", x = 1)",
        "minOperations(s1 = \"z\", s2 = \"z\", x = 3)",
        "minOperations(s1 = \"aba\", s2 = \"baa\", x = 1)",
        "minOperations(s1 = \"aba\", s2 = \"baa\", x = 2)",
        "minOperations(s1 = \"xyx\", s2 = \"xyx\", x = 4)",
        "minOperations(s1 = \"xxx\", s2 = \"yy\", x = 2)",
        "minOperations(s1 = \"abacaba\", s2 = \"baacab\", x = 1)",
        "minOperations(s1 = \"1112\", s2 = \"0022\", x = 3)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x=1, y=2, z=3)",
        "longestString(x = 4, y = 2, z = 6)",
        "longestString(x = 5, y = 10, z = 15)",
        "longestString(x = 3, y = 3, z = 4)",
        "longestString(x = 6, y = 8, z = 10)",
        "longestString(x=3, y=6, z=9)",
        "longestString(x=5, y=8, z=3)"
    ],
    "sample_418": [
        "minOperations(nums = [3, 1, 3, 4, 2], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 3, 6, 4, 1, 2], k = 2)",
        "minOperations(nums = [3,1,4,2], k = 1)",
        "minOperations(nums = [2, 3, 1, 5, 4], k = 5)",
        "minOperations(nums = [4,2,5,1,10], k = 5)",
        "minOperations(nums = [1, 3, 9, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 5], k = 3)",
        "minOperations(nums = [5, 1, 2, 3, 2, 3], k = 3)",
        "minOperations(nums = [3, 1, 3, 2, 5, 4, 1, 2], k = 4)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abcac\")",
        "longestSemiRepetitiveSubstring(s = \"abaabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabcdeee\")",
        "longestSemiRepetitiveSubstring(s=\"aaaaabbbbb\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 4])",
        "isGood(a = [1,2,3])",
        "isGood(a = [3, 1, 4, 1, 5])",
        "isGood(a = [1, 2, 3, 3, 1])",
        "isGood(a = [0, 1, 2])",
        "isGood(a = [1, 2, 3, 4, 4, 3, 2, 1])",
        "isGood(a = [2, 2, 1, 3])",
        "isGood(a = [1, 3, 5, 2, 4, 1])",
        "isGood(a = [1, 1, 3, 3, 1, 3])",
        "isGood(a = [1, 1, 2, 3, 5, 7, 6])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 100, m = 5)",
        "differenceOfSums(n = 9, m = 3)",
        "differenceOfSums(n = 6, m = 5)",
        "differenceOfSums(n = 1000, m = 3)",
        "differenceOfSums(n = 30, m = 3)",
        "differenceOfSums(n = 2, m = 7)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,3,2,1])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 3, 2, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 4, 4, 6, 7, 8, 8])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,2,3,1,4,2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1])",
        "minGroupsForValidAssignment(nums = [3,3,3,4,4,4,4,5,5,6,6,7,7,7,8,8,9,10,10,11,11,12,13,14,14,14])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"4\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"2\", \"1\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"3\", \"prev\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"next\", \"1\", \"prev\", \"2\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\", \"2\", \"prev\", \"3\", \"next\", \"3\"])",
        "lastVisitedIntegers(words = [\"5\", \"next\", \"2\", \"3\", \"4\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"1\", \"4\", \"5\", \"3\", \"4\", \"5\", \"2\"])",
        "lastVisitedIntegers(words = [\"5\", \"4\", \"5\", \"2\", \"6\", \"3\", \"2\", \"5\", \"1\", \"6\", \"2\", \"prev\", \"4\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"ant\", \"ant\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"acb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"acb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aba\", \"bbb\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"bcd\", \"cd\", \"d\", \"abcd\"])",
        "maximumNumberOfStringPairs(words = [\"one\",\"two\",\"three\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bca\", \"abca\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"meet\", \"eat\", \"car\", \"tan\", \"eat\", \"banana\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101011\", k = 2)",
        "shortestBeautifulSubstring(s = \"11000\", k = 1)",
        "shortestBeautifulSubstring(s = '1100111', k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101111\", k = 1)",
        "shortestBeautifulSubstring(s = '101111010111', k = 2)",
        "shortestBeautifulSubstring(s = \"110100101001\", k = 2)",
        "shortestBeautifulSubstring(s = \"001100001011111000\", k = 2)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6, 8])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6, 8])",
        "minimumRightShifts(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 0])",
        "minimumRightShifts(nums = [1, 3, 4, 2])",
        "minimumRightShifts(nums = [1, 3, 4, 0, 2])",
        "minimumRightShifts(nums = [1, 0, -1, -1])",
        "minimumRightShifts(nums = [2, 1, 2, 4, 1])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 3, 1, 1, 2, 0])"
    ],
    "sample_294": [
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"110101\")",
        "minimumSteps(s = \"1011111\")",
        "minimumSteps(s = \"1100110011\")",
        "minimumSteps(s=\"0111010\")",
        "minimumSteps(s = \"100100100101010010110101001\")",
        "minimumSteps(s
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"abba\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"baa\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdab\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"axxx\", s2 = \"abxx\", s3 = \"azxx\")",
        "findMinimumOperations(s1 = \"abbb\", s2 = \"bbbb\", s3 = \"bba\")",
        "findMinimumOperations(s1 = \"1123123\", s2 = \"1122123\", s3 = \"1233123\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"wxyz\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"eidbaooo\")",
        "canMakeSubsequence(str1 = \"cat\", str2 = \"cats\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"aa\")",
        "canMakeSubsequence(str1 = \"geeks\", str2 = \"geeksforgeeks\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"bb\")",
        "canMakeSubsequence(str1 = \"cdefg\", str2 = \"ad\")",
        "canMakeSubsequence(str1=\"abcdef\", str2=\"xy\")",
        "canMakeSubsequence(str1 = \"bcd\", str2 = \"zzz\")"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums=[1,2,3,4])",
        "isGood(nums = [2,3,1])",
        "isGood(nums=[1, 2, 3])",
        "isGood(nums = [1, 4, 2, 3])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [2,4,1,3])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 4, 2, 3], target = 6)",
        "countPairs(nums = [1, 4, 2, 3], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 6], target = 7)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 2, 2, 2, 3], target = 4)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [3, 5, 7, 9], target = 12)",
        "countPairs(nums = [4, 5, 6], target = 10)",
        "countPairs(nums = [1, 3, 2, 4, 2], target = 5)",
        "countPairs(nums = [1, 2, 2, 2, 4, 5, 6], target = 10)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [3, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [2, 3, 5, 6, 8, 9], moveFrom = [3, 5], moveTo = [2, 6])",
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [8, 5, 6], moveTo = [9, 6, 5])",
        "relocateMarbles(nums = [2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [5, 6], moveTo = [3, 4])",
        "relocateMarbles(nums = [2, 5, 6, 8, 9], moveFrom = [3, 6], moveTo = [5, 8])",
        "relocateMarbles(nums = [1, 3, 5, 7, 9, 8, 6], moveFrom = [1, 9, 8], moveTo = [5, 7, 6])",
        "relocateMarbles(nums = [4,5,6,7,8,9], moveFrom = [4,6,8], moveTo = [5,7,9])",
        "relocateMarbles(nums = [2, 2, 4, 5, 5, 6, 7, 8, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9, 10, 11], moveFrom = [0, 2, 4], moveTo = [3, 7, 9])",
        "relocateMarbles(nums = [3, 1, 5, 2, 8, 6, 4, 9], moveFrom = [3, 8], moveTo = [6, 9])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 6], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 10)",
        "countPairs(nums = [3, 1, 5, 7], target = 10)",
        "countPairs(nums = [0, 2, 1, -6, 6, -7, 9, 1, 2], target = 0)",
        "countPairs(nums = [-2, 0, 10, 5, -8], target = 10)",
        "countPairs(nums = [1, 1, 2, 2, 3, 5], target = 3)",
        "countPairs(nums = [3, 1, 2, 4, 1, 1], target = 3)",
        "countPairs(nums = [1, 2, 5, 11], target = 9)",
        "countPairs(nums = [2, 4, 5, 7, 9, 10], target = 12)",
        "countPairs(nums = [4, 2, 5, 3, 6], target = 7)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals(nums = [1,1,3,3,3])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 1, 1, 3])",
        "minLengthAfterRemovals(nums = [1,1,3,3,2,2,4,4,4])",
        "minLengthAfterRemovals(nums = [1,1,3,2,2,3])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 3, 3, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 4, 5, 6])"
    ],
    "sample_303": [
        "countSeniors(details = [\"<NAME>\", \"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details = [\"<NAME> 1970\", \"<NAME> 1937\"])",
        "countSeniors(details = [\"99 years old\", \"66 years old\", \"12 years old\", \"15 years old\"])",
        "countSeniors(details=[\"0012345678999\", \"1111111111111\"])",
        "countSeniors(details = [\"Fred,50,M\", \"Wilma,70,F\", \"Betty,80,F\"])",
        "countSeniors(details = [\"<NAME>, 62\", \"Karen, 19\", \"Susan, 64\"])",
        "countSeniors(details = [\"199111222355\", \"199709202355\", \"199111232355\"])",
        "countSeniors(details = [\"<NAME>\", \"29-11-1970\", \"F\", \"24-10-1970\", \"M\", \"30-11-1970\"])",
        "countSeniors(details = [\"42-83-1987\", \"78-43-1979\", \"29-92-1998\"])",
        "countSeniors(details = [\"<NAME> 1964 1778 474\", \"Pauline Smith 1994 1847 319\", \"<NAME> 1989 1921 727\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcaa\")",
        "longestSemiRepetitiveSubstring(s = \"abracadabra\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abcccdddda\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaabbbbcccccddddd\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbaacccbbba\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1=\"abc\", s2=\"bca\")",
        "canBeEqual(s1 = \"abba\", s2 = \"aabb\")",
        "canBeEqual(s1=\"dog\", s2=\"god\")",
        "canBeEqual(s1 = \"xx\", s2 = \"xy\")",
        "canBeEqual(s1 = \"aa\", s2 = \"aaba\")",
        "canBeEqual(s1 = \"xyb\", s2 = \"xya\")",
        "canBeEqual(s1 = \"mq\", s2 = \"zz\")",
        "canBeEqual(s1 = \"I am a student\", s2 = \"A student from I\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"xyx\", s2 = \"xyx\", s3 = \"xyx\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"abc\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"naza\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"cdc\", s3 = \"wxy\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 9)",
        "lengthOfLongestSubsequence(nums=[10,9,2,5,3,7,101,18], target=9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,4,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,3,6,7,5,6], target = 10)",
        "lengthOfLongestSubsequence(nums = [5,4,7,2,1], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 4, 2, 2, 5, 2, 1], target = 5)",
        "lengthOfLongestSubsequence(nums = [3,1,4,1,5,9], target = 6)",
        "lengthOfLongestSubsequence(nums = [0,0,0,0,0,0], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,4,2,3,0,5,6,7,0,9,8], target = 5)"
    ],
    "sample_257": [
        "minimumSum(nums = [3, 1, 2, 4, 3])",
        "minimumSum(nums = [-1, -2, -3, -4, -5])",
        "minimumSum(nums = [-2, -3, 4, -1, -2])",
        "minimumSum(nums = [-2, -1, 1, 2])",
        "minimumSum(nums = [2, 3, 1, 2, 5, 7, 2])",
        "minimumSum(nums = [4, 2, 1, 3])",
        "minimumSum(nums = [3, 4, 10, 9, 8])",
        "minimumSum(nums = [5, 4, 9, 8])",
        "minimumSum(nums = [4, 6, 2, 7, 8, 3])",
        "minimumSum(nums = [5, 4, 7, 9, 5])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"xy\", \"yx\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"banana\"])",
        "minimizeConcatenatedLength(words = [\"x\", \"y\", \"z\"])",
        "minimizeConcatenatedLength(words=[\"a\", \"bb\", \"ccc\", \"dddd\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"cdc\", \"aaa\", \"aaa\", \"cdc\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"cat\", \"aaa\", \"a\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"abba\", \"ba\", \"cabba\", \"abba\", \"ba\", \"abba\"])",
        "minimizeConcatenatedLength(words = [\"bq\", \"aw\", \"pq\", \"ow\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"cd\", \"xyz\", \"axy\", \"bbb\", \"aa\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"0001111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"0001100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0100110110110110010011011011011001001101101101100100110110110110010011011011011001001101101101100100110110110110010011011011011001001101101101100100110110110110010011011011011001001101101101100100110110110110010011011011011001001101101101100100110110110110010011011011011001001101101101100100110110110110010011011011011001001101101101100100110110110110010011011011011001001101101101100100110110110110010011011011011001001101101101100100110110110110010011011011011001001101101101100100110110110110010011011011011001001101101101100100110110110110010011011011011001001101101",
        "shortestBeautifulSubstring(s = \"0111001100110011001110011001100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1100010011000101110001100010111000110001011100010111000110001011100011000101110001100010111000110001011100011000101110001100010111000110001011100011000101110001100010111000110001011100011000101110001100010111000110001011100011000101110001100010111000110001011100011000101110001100010111000110001011100011000101110001100010111000110001011100011000101110001100010111000110001011100011000101110001100010111000110001011100011000101110001100010111000110001011100011000101110001100010111000110001011100011000101110001100010111000110001011100011000101110001100010111000110001011",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"0110101001100111101000111111110001001111111111101101000110011011001100111100010000111101101111001111111110101001001101010011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"])",
        "minimizeConcatenatedLength(words = [\"aba\",\"bab\",\"bba\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"cats\",\"dog\",\"dogs\",\"horse\",\"horseshoe\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"horse\", \"banana\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"a\", \"xyz\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"dogcat\",\"1dog2cat\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"zbcx\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"cats\", \"dog\", \"dogs\", \"horse\", \"rat\", \"rats\", \"ratty\", \"yak\"])",
        "minimizeConcatenatedLength(words=[\"catastrophe\", \"fly\",\"goose\",\"guest\",\"grove\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 100, m = 5)",
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 100, m = 4)",
        "differenceOfSums(n = 1000, m = 3)",
        "differenceOfSums(n=5, m=3)",
        "differenceOfSums(n = 1000000, m = 4)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,2,4,5])",
        "alternatingSubarray(nums = [4,2,5,1,6])",
        "alternatingSubarray(nums = [2,1,3])",
        "alternatingSubarray(nums=[2,1,3,4])",
        "alternatingSubarray(nums=[4,2,5,1,3])",
        "alternatingSubarray(nums = [1,2,4,2,5])",
        "alternatingSubarray(nums=[1, 2, 2, 3])",
        "alternatingSubarray(nums = [1,2,2,4,2,2])",
        "alternatingSubarray(nums = [4,2,5,1,7,8])",
        "alternatingSubarray(nums = [1,2,2,4,5,5,7])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6])",
        "findMaximumLength(nums = [1, 3, 6, 10, 15])",
        "findMaximumLength(nums = [1,3,6,10,15])",
        "findMaximumLength(nums=[1,2,3,5])",
        "findMaximumLength(nums = [3,4,6,5])",
        "findMaximumLength(nums = [1,1,1,2,2,3])",
        "findMaximumLength(nums = [3,5,7,1,8])",
        "findMaximumLength(nums= [2,3,1,5,7,2])",
        "findMaximumLength(nums = [1,1,1,2,2,2,3,4,4,4,4,4,4,4])"
    ],
    "sample_302": [
        "countSeniors(details = [\"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details = [\"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details = [\"7894561230\", \"9876543210\", \"1234567890\"])",
        "countSeniors(details = [\"1001000000001111111122222222222233333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333",
        "countSeniors(details = [\"Tom, 23, M\", \"John, 34, F\", \"John, 67, M\"])",
        "countSeniors(details = [\"24-06-198406-2021202-1000\", \"24-06-198406-2021202-1000\"])",
        "countSeniors(details = [\"210621010001000101000100000000100100000000000000000000000000000\", \"210621020001000101000100000000100100000000000000000000000000000\"])",
        "countSeniors(details = [\"Bruce\", \"Eldridge\", \"65\", \"36\", \"65\", \"77\", \"52\"])",
        "countSeniors(details = [\"25-12-1980-15-07-1234567890-Mr. S\", \"19-07-1990-14-02-9876543210-Mrs. D\"])",
        "countSeniors(details = [\"2727140597\", \"8041935257\", \"2668505657\", \"1275090812\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"a\", s2 = \"bb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"hello\", s2 = \"helo\")",
        "canBeEqual(s1 = \"123\", s2 = \"421\")",
        "canBeEqual(s1 = \"zx\", s2 = \"yx\")",
        "canBeEqual(s1 = \"gbg\", s2 = \"g\")",
        "canBeEqual(s1 = \"abcdefghijklmnop\", s2 = \"ghijklmnopabc\")",
        "canBeEqual(s1 = \"xxyyxxyyxxxyxyyyxxxyyy\", s2 = \"yyyxxxyyxxyxxyyxxyxyy\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices = [2, 4, 1])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [1,2,3,4,5,6])",
        "minimumCoins(prices = [1, 4, 2])",
        "minimumCoins(prices = [1, 2, 1, 2])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices=[1, 2, 3])",
        "minimumCoins(prices = [4, 1, 1, 3, 2])",
        "minimumCoins(prices = [1, 3, 6, 4, 5, 2])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [30, 15, 60])",
        "minimumSeconds(A = [1, 1, 4, 2, 1, 3])",
        "minimumSeconds(A = [30, 15, 60, 75, 45, 15])",
        "minimumSeconds(A = [30, 15, 60, 75, 45, 15])",
        "minimumSeconds(A = [0, 1, 1, 1])",
        "minimumSeconds(A = [1,2,1,2,1])",
        "minimumSeconds(A = [2,3,1,2,2,2])",
        "minimumSeconds(A = [1,2,3,4,1,1])",
        "minimumSeconds(A = [0, 60, 75, 120, 114])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words=[\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"cde\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ab\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\"])"
    ],
    "sample_272": [
        "minSum(nums1=[1, 2, 3], nums2=[4, 5, 6])",
        "minSum(nums1 = [1, 4, 2, 3], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 7, 3])",
        "minSum(nums1 = [1, 2, 3, 5], nums2 = [4, 2, 1, 7])",
        "minSum(nums1=[1, 2, 3, 4], nums2=[2, 2, 1, 2])",
        "minSum(nums1 = [3, 1, 5, 10, 6], nums2 = [2, 1, 7, 6])",
        "minSum(nums1 = [0, 2, 1, 5, 7, 4], nums2 = [3, 8, 6])",
        "minSum(nums1 = [2,3,2], nums2 = [3,1,1])",
        "minSum(nums1 = [3, 2, 20, 1], nums2 = [1, 1, 4, 1])",
        "minSum(nums1 = [3, 1, 4, 2], nums2 = [5, 7, 8])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"t\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"one\", \"two\", \"three\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"foo\", \"bar\"], x = \"b\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grapes\"], x = \"e\")",
        "findWordsContaining(words = [\"what\", \"is\", \"this\"], x = \"is\")",
        "findWordsContaining(words = [\"a\", \"ab\", \"b\"], x = \"x\")",
        "findWordsContaining(words = [\"guinea\", \"panda\", \"zebra\"], x = \"na\")",
        "findWordsContaining(words = [\"t\", \"e\", \"c\", \"h\", \"o\", \"o\", \"k\"], x = \"o\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 4, k = 3)",
        "maxSum(nums = [3, 5, -9, 1, 3, -2, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [2, 1, 5, 1, 3, 5, 1, 2, 1], m = 3, k = 3)",
        "maxSum(nums = [3,4,5,1,5], m = 1, k = 3)",
        "maxSum(nums = [2,1,3,10,1], m = 2, k = 2)",
        "maxSum(nums = [2, -1, 2, -1, 6, 1, 5], m = 2, k = 3)",
        "maxSum(nums = [2,1,3,5,2,6,4], m = 2, k = 3)",
        "maxSum(nums = [3, 5, -9, 8, -2, 4, -10], m = 2, k = 3)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [3], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [0, 1, 0, 3, 12], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [3, 4, 5], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 3, 2, 5, 4], moveFrom = [3, 1, 5], moveTo = [2, 4, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [5, 6], moveTo = [4, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 3], moveTo = [2])",
        "relocateMarbles(nums = [3, 8, 9, 7, 2, 5], moveFrom = [8, 3], moveTo = [2, 7])",
        "relocateMarbles(nums = [0,1,2,3,4,5,6,7,8], moveFrom = [3,5], moveTo = [1,7])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 3, 5, 4, 2])",
        "minimumRightShifts(nums = [1,2,3,4])",
        "minimumRightShifts(nums = [4,3,2,1,0])",
        "minimumRightShifts(nums = [4, 3, 5, 2, 1])",
        "minimumRightShifts(nums = [1, 1, 0, 2, 0])",
        "minimumRightShifts(nums = [2, 3, 1, 1, 4, 0])",
        "minimumRightShifts(nums = [7, 9, 9, 9, 9, 10])",
        "minimumRightShifts(nums=[4, 4, 5, 2, 7])"
    ],
    "sample_314": [
        "buyChoco(prices = [2, 3, 5], money = 10)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [2, 4, 1], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 0)",
        "buyChoco(prices = [1,2,3,4], money = 2)",
        "buyChoco(prices = [1, 2, 5], money = 2)",
        "buyChoco(prices = [1, 5, 3, 10], money = 7)",
        "buyChoco(prices = [1, 5, 6, 8], money = 3)",
        "buyChoco(prices=[10, 3, 4], money=11)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 9)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 2, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [2, 1, 2, 4, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 0, 0, 0, 1, 1, 1, 1, 1], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 2, 4, 5, 4, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [5, 2, -4, 8, -10], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,3,4,5,10,11,15], target = 20)",
        "lengthOfLongestSubsequence(nums = [3,5,7,11,13,17,19,23,29], target = 11)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"ababc\")",
        "longestSemiRepetitiveSubstring(s = \"abacad\")",
        "longestSemiRepetitiveSubstring(s = \"abaabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbcda\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbbbbbbbbbbbbbbbbbbb\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"nana\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"abc\")",
        "findWordsContaining(words = [\"dog\", \"apple\", \"cat\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"abcf\"], x = \"abc\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"bye\", \"goodbye\", \"yo\"], x = \"bye\")",
        "findWordsContaining(words = [\"ant\", \"ant\", \"cat\", \"dog\", \"dog\", \"eagle\"], x = \"a\")",
        "findWordsContaining(words = [\"baba\", \"abab\", \"barabas\"], x = \"ba\")",
        "findWordsContaining(words=[\"cat\", \"dog\", \"zombies\", \"flying\", \"banana\"], x = \"b\")",
        "findWordsContaining(words=[\"cat\", \"xmas\", \"cats\", \"scat\"], x = \"c\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"5\", \"3\", \"5\", \"3\", \"4\", \"3\", \"1\", \"5\", \"5\", \"2\"])",
        "lastVisitedIntegers(words = [\"2\", \"next\", \"1\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"3\", \"1\", \"4\", \"1\", \"5\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"2\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"7\", \"prev\", \"5\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"3\", \"5\", \"6\", \"1\", \"1\", \"2\", \"4\"])",
        "lastVisitedIntegers(words = [\"5\", \"4\", \"3\", \"2\", \"1\", \"next\", \"5\", \"4\", \"prev\", \"5\", \"4\", \"next\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"haha\", s2 = \"haha\")",
        "canBeEqual(s1 = \"pqr\", s2 = \"qrp\")",
        "canBeEqual(s1 = \"zzz\", s2 = \"zza\")",
        "canBeEqual(s1 = \"i\", s2 = \"ii\")",
        "canBeEqual(s1 = \"haha\", s2 = \"aha\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [2,3,4,5])",
        "minimumSum(nums = [2,3,4,1,5])",
        "minimumSum(nums = [2,4,3])",
        "minimumSum(nums = [2,2,2,5,5,5,8])",
        "minimumSum(nums = [2,4,5,6,8,11])",
        "minimumSum(nums=[2,1,5,6,9])",
        "minimumSum(nums = [-100, -3, -2, -1, -2, -3])",
        "minimumSum(nums = [10,11,21,7])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 7], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 4, 2, 6, 2, 5, 1], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1,1,1,1], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 5, 8, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 5, 2, 7, 8, 4, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 2, 3, 3, 4, 4, 6, 6, 6], target = 11)",
        "lengthOfLongestSubsequence(nums = [5, 2, 7, 1, 4, 8, 6, 3], target = 12)",
        "lengthOfLongestSubsequence(nums = [1, 2, 10, 7, 8, 10, 9, 4, 6], target = 5)"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'LymPh')",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Banana\")",
        "sortVowels(s = 'Lamps')",
        "sortVowels(s = 'aabc')",
        "sortVowels(s = 'Hello World!')",
        "sortVowels(s=\"mlPH\")",
        "sortVowels(s=\"AyYyYyA\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2],[3,4],[5,6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3],[4, 5, 6]])",
        "matrixSum(nums = [[1,2], [2,1]])",
        "matrixSum(nums = [[1,2], [3,4], [2,1]])",
        "matrixSum(nums = [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]])",
        "matrixSum(nums=[[1,2,3,4],[2,3,4,5],[3,4,5,6],[4,5,6,7]])",
        "matrixSum(nums = [[3,2,1], [1,1,1], [0,1,2]])",
        "matrixSum(nums = [[2, 4], [0, 6], [4, 5]])",
        "matrixSum(nums = [[2,1,10],[0,3,6],[1,1,2]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [3, 4, 5, 2])",
        "maximumTripletValue(nums = [2, 1, 5, 0, 4, 6])",
        "maximumTripletValue(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "maximumTripletValue(nums = [-3, 0, 1, 2])",
        "maximumTripletValue(nums = [-2, 0, 1, -3])",
        "maximumTripletValue(nums = [3, 2, 1, 5, 6])",
        "maximumTripletValue(nums = [5, 5, 10, 10])",
        "maximumTripletValue(nums = [-100, -34, 56, -78, -23, -90])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1,2,2,4])",
        "alternatingSubarray(nums = [5, 1, 2, 4, 3])",
        "alternatingSubarray(nums = [1, 2, 4, 6])",
        "alternatingSubarray(nums = [1,2,4,5])",
        "alternatingSubarray(nums = [5, 7, 1, 2, 4])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 5, 1, 6])",
        "alternatingSubarray(nums = [2, 4, 0, 5, 1, 6])",
        "alternatingSubarray(nums = [2, 1, 1, 1, 2])",
        "alternatingSubarray(nums = [2, 1, 1, 3])",
        "alternatingSubarray(nums = [2, 1, 2, 3, 3, 3, 3, 3, 4, 4, 2, 1, 5, 5])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"bana\", k = 3)",
        "beautifulSubstrings(s = \"abba\", k = 7)",
        "beautifulSubstrings(s = \"babba\", k = 2)",
        "beautifulSubstrings(s = \"abacba\", k = 2)",
        "beautifulSubstrings(s = \"lovelylovely\", k = 3)",
        "beautifulSubstrings(s = \"abeint\", k = 4)"
    ],
    "sample_449": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"ba\")",
        "minChanges(s = \"a\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aa\")",
        "minChanges(s=\"banana\")",
        "minChanges(s = \"aabaab\")",
        "minChanges(s = \"zyx\")"
    ],
    "sample_291": [
        "minimumSteps(s
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"11100\")",
        "minimumSteps(s = \"1111111111111111111111111111111\")",
        "minimumSteps(s = \"10011\")",
        "minimumSteps(s = \"100100\")",
        "minimumSteps(s = \"10111001\")",
        "minimumSteps(s = \"100110001\")",
        "minimumSteps(s
    ],
    "sample_305": [
        "countSeniors(details = [\"s1\", \"s2\", \"s3\", \"s4\", \"s5\", \"s6\", \"s7\", \"s8\", \"s9\", \"s10\", \"s11\", \"s12\", \"s13\", \"s14\", \"s15\", \"s16\", \"s17\", \"s18\", \"s19\", \"s20\", \"s21\", \"s22\", \"s23\", \"s24\", \"s25\", \"s26\", \"s27\", \"s28\", \"s29\", \"s30\"])",
        "countSeniors(details = [\"123-456-7890x1234567x60\",\"123-456-7890x1234567x70\"])",
        "countSeniors(details = [\"1000-12-10 05:30:15\", \"1000-12-10 05:30:15\", \"1000-12-10 05:30:15\"])",
        "countSeniors(details = [\"10001019201929\", \"9001019201929\", \"8001019201929\"])",
        "countSeniors(details = [\"<NAME>, 46, <EMAIL>, 6000000000, 1996-04-23, 2020-04-23\", \"<NAME>, 21, <EMAIL>, 6000000000, 1996-04-23, 2020-04-23\", \"<NAME>, 39, <EMAIL>, 6000000000, 1996-04-23, 2020-04-23\"])",
        "countSeniors(details=[\"<NAME>\", \"21-02-1995\", \"160\", \"199\", \"M\", \"2005-06-20\", \"180\", \"201\"])",
        "countSeniors(details = [\"<NAME> 16061300011 60 2020\", \"<NAME> 16061300012 70 2020\", \"<NAME> 16061300013 65 2020\", \"<NAME> 16061300014 80 2020\", \"<NAME> 16061300015 75 2020\", \"<NAME> 16061300016 70 2020\", \"<NAME> 16061300017 63 2020\", \"<NAME> 16061300018 62 2020\"])",
        "countSeniors(details = [\"<NAME>, 1999, 178cm, 73kg, single, black, 607-251-2052, <EMAIL>, San Francisco\"])",
        "countSeniors(details = [\"2522100001,Dick,35,21,1975-04-21,M,Seniors\", \"2522100002,Wanda,30,3,1980-08-03,F,Seniors\", \"2522100003,Kevin,34,18,1985-02-18,M,Juniors\"])",
        "countSeniors(details=[\n    '1558545084000,347112000,20101000,1655,1778,1754,1654,1658,1654,1854,0,0,0,1558545084000,20101000,0,1854,1658,1654,1654,1754,1778,1655,347112000,1558545084000',\n    '1558545084000,347112000,20101000,1655,1778,1754,1654,1658,1654,1854,0,0,0,1558545084000,20101000,0,1854,1658,1654,1654,1754,1778,1655,347112000,1558545084000',\n    '1558545084000,347112000,20101000,1655,1778,1754,1654,1658,1654,1854,0,0,0,1558545084000,20101000,0,1854,1658,1654,1654,1754,1778,1655,347112000,1558545084000',\n    '1558545084000,347112000,20101000,1655,1778,1754,1654,1658,1654,1854,0,0,0,1558545084000,20101000,0,1854,1658,1654,1654,1754,1778,1655,347112000,1558545084000',\n    '1558545084000,347112000,20101000"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,6])",
        "minGroupsForValidAssignment(nums = [1,3,3,3,3,6,6])",
        "minGroupsForValidAssignment(nums=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minGroupsForValidAssignment(nums=[1,3,3,2,2,1,2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,4,5,6,6,7,8,9,10])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [3, 4], [4, 3]], k = 1)",
        "countPairs(coordinates = [[2,1], [1,2], [1,1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [2, 7], [3, 8], [4, 9]], k = 3)",
        "countPairs(coordinates = [[1, 2], [3, 4], [2, 2], [2, 3], [2, 4]], k = 2)",
        "countPairs(coordinates = [[1, 2], [1, 2], [1, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]], k = 2)",
        "countPairs(coordinates = [[1, 3], [2, 5], [3, 6], [1, 2]], k = 2)",
        "countPairs(coordinates = [[1,2], [3,4], [1,4], [0,4], [3,0]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 1], [3, 4], [3, 6], [2, 3], [1, 4], [2, 5], [3, 5]], k = 4)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 3, 5, 7, 9], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 4, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1], m = 4, k = 1)",
        "maxSum(nums = [2, 5, 7, 1], m = 1, k = 1)",
        "maxSum(nums = [3, 5, 2, 6, 2, 7, 1, 8], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 2, 5, 5, 6, 3, 5, 5, 7, 6, 6, 7], m = 3, k = 4)"
    ],
    "sample_452": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"zzz\")",
        "minChanges(s = \"axb\")",
        "minChanges(s = \"1234\")",
        "minChanges(s = \"de\")",
        "minChanges(s = \"zazz\")",
        "minChanges(s = \"kjjkf\")",
        "minChanges(s = \"abcbcbccbbcc\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [1, 2, 3, 7])",
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [1, 2, 3, 7])",
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [1, 2, 3, 7])",
        "minOperations(nums1 = [1,3,5,7], nums2 = [1,2,3,7])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 2, 1])",
        "minOperations(nums1 = [4, 1, 3, 2], nums2 = [5, 0, 2, 1])",
        "minOperations(nums1 = [4, 3, 1, 1, 2], nums2 = [1, 3, 2, 2, 3])",
        "minOperations(nums1 = [2, 3, 4, 7, 5], nums2 = [4, 3, 1, 2, 2])",
        "minOperations(nums1 = [7, 1, 5, 8, 9, 5], nums2 = [9, 4, 6, 2, 1, 7])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"11011\", k = 2)",
        "shortestBeautifulSubstring(s = '1111111111', k = 2)",
        "shortestBeautifulSubstring(s = \"111001\", k = 3)",
        "shortestBeautifulSubstring(s = \"101010\", k = 2)",
        "shortestBeautifulSubstring(s=\"110001\", k=3)",
        "shortestBeautifulSubstring(s=\"010101\", k=2)",
        "shortestBeautifulSubstring(s = '0110110010101100000', k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [3,4,5,2])",
        "maximumTripletValue(nums = [1,1,1])",
        "maximumTripletValue(nums = [3, 2, 3])",
        "maximumTripletValue(nums = [3, 5, 10, 2, 1, 5, 8])",
        "maximumTripletValue(nums = [5, 1, 2, 3, 0, 4])",
        "maximumTripletValue(nums = [-5, 2, 3, 1])",
        "maximumTripletValue(nums = [2, 0, -3, 0, -2])",
        "maximumTripletValue(nums = [3, 9, 12, 5, 18, 1, 10])"
    ],
    "sample_465": [
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n=5, limit=10)",
        "distributeCandies(n = 3, limit = 9)",
        "distributeCandies(n = 5, limit = 20)",
        "distributeCandies(n = 23, limit = 100)",
        "distributeCandies(n = 14, limit = 7)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,3,3,3,2,1,4,2])",
        "minGroupsForValidAssignment(nums=[4,3,1,2])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "minGroupsForValidAssignment(nums = [1,1,0,0,0,0,0,0,1])",
        "minGroupsForValidAssignment(nums = [4, 5, 3, 4])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minSum(nums1 = [1, 2, 0, 0, 0], nums2 = [1, 2, 1, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 5, 6, 7])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 5, 2, 1])",
        "minSum(nums1 = [1, 2, 3, 0, 0, 0], nums2 = [10, 10, 0, 0, 0, 0])",
        "minSum(nums1 = [3, 1, 2, 4], nums2 = [9, 0, 5, 2])",
        "minSum(nums1 = [2, 2, 3, 4, 5], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 0, 0, 0], nums2 = [6, 2, 1, 5, 7, 5])",
        "minSum(nums1 = [5, 10, 20], nums2 = [3, 5, 10])"
    ],
    "sample_453": [
        "minChanges(s = \"banana\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aabaab\")",
        "minChanges(s = \"aabab\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abcdefgh\")",
        "minChanges(s = \"zxzxzx\")",
        "minChanges(s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\")",
        "minChanges(s = \"crkdd\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"a\", k = 3)",
        "beautifulSubstrings(s = \"abba\", k = 2)",
        "beautifulSubstrings(s = \"abacab\", k = 2)",
        "beautifulSubstrings(s = \"aaaiiiiee\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 3)",
        "beautifulSubstrings(s = \"aibanana\", k = 2)",
        "beautifulSubstrings(s = \"abdc\", k = 1)",
        "beautifulSubstrings(s = \"aaaiiiooooo\", k = 2)",
        "beautifulSubstrings(s = \"aiueosdkaoeu\", k = 2)",
        "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa=[]\n    for c in s:\n        if c in \"aiueo\":\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i=defaultdict(list)\n    a2i[0].append(0)\n    ans=s=0\n    for i,a in enumerate(aa):\n        s+=a\n        for j in a2i[s]:\n            if (((i+1-j)//2)**2)%k"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiouaeiouaeiou\", k = 3)",
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"abracadabra\", k = 4)",
        "beautifulSubstrings(s = \"b\", k = 2)",
        "beautifulSubstrings(s = \"bab\", k = 2)",
        "beautifulSubstrings(s = \"abacbebea\", k = 3)",
        "beautifulSubstrings(s = \"voda\", k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = \"Lumpy\")",
        "sortVowels(s = \"apple\")",
        "sortVowels(s = \"Lumpy\")",
        "sortVowels(s = \"Apple\")",
        "sortVowels(s = \"abracadabra\")",
        "sortVowels(s = \"Hello!\")",
        "sortVowels(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "sortVowels(s = \"humpy\")",
        "sortVowels(s = 'I am a string!')",
        "sortVowels(s = \"ZampHa\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 2, 1])",
        "minimumSeconds(nums = [30,15,60,75,45,15,15])",
        "minimumSeconds(nums = [2, 2, 3, 4])",
        "minimumSeconds(nums = [30,29,4])",
        "minimumSeconds(nums = [3, 2, 3, 4, 1, 5, 8, 3, 2])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSum(nums = [3, 2, 4, 1, 5])",
        "minimumSum(nums = [1, 5, 10])",
        "minimumSum(nums = [3, 4, 5, 1, 10, 6])",
        "minimumSum(nums = [1, 7, 2, 4, 5, 8])",
        "minimumSum(nums = [1, 5, 2, 10, 2, 3])",
        "minimumSum(nums=[1, -2, 1, -3, 4, -1, 2, 1, -5, 4])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 1, 4, 2, 3], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [4,2,4,5,6], k = 10)",
        "minOperations(nums = [3, 1, 4, 1, 5], k = 3)",
        "minOperations(nums = [1, 4, 10], k = 5)",
        "minOperations(nums = [1, 5, 10], k = 15)",
        "minOperations(nums = [3, 1, 2, 2, 3], k = 3)",
        "minOperations(nums = [3,1,2,5,1], k = 7)",
        "minOperations(nums = [3, 4, 5, 1, 10], k = 10)",
        "minOperations(nums = [3, 2, 2, 4, 2, 4, 4, 5, 6], k = 1)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 1, 2, 6, 7, 5], m = 2, k = 4)",
        "maxSum(A = [1, 2, 1, 2, 6, 7, 5], m = 4, k = 3)",
        "maxSum(A = [1, 2, 3, 1, 2, 3], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8], m = 4, k = 2)",
        "maxSum(A= [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(A = [3, 2, 1, 2, 3, 1], m = 2, k = 2)",
        "maxSum(A = [3, 4, 6, 2, 5, 1, 6], m = 3, k = 2)",
        "maxSum(A = [3, 6, 1, 0, 10, 12], m = 2, k = 4)",
        "maxSum(A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 5, 5, 6, 7, 7], m = 3, k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"01110\")",
        "minimumSteps(s = \"010000\")",
        "minimumSteps(s = \"100100010000\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1,1,0,1])",
        "maxSubarrays(nums = [1,1,0,1])",
        "maxSubarrays(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [3, 1, 4, 2])",
        "maxSubarrays(nums = [2,3,1,2,4,3])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 3, 4, 2, 3, 5, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 0)",
        "buyChoco(prices = [2, 5, 3], money = 8)",
        "buyChoco(prices = [2, 5], money = 10)",
        "buyChoco(prices = [3, 1, 2], money = 4)",
        "buyChoco(prices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "buyChoco(prices = [2, 4, 1, 3], money = 6)",
        "buyChoco(prices = [2, 5, 10, 12], money = 6)",
        "buyChoco(prices=[2, 5, 8], money=6)",
        "buyChoco(prices = [5, 10, 15, 20, 25], money = 40)",
        "buyChoco(prices = [2, 5, 10, 15, 20, 30, 40, 50, 60, 70], money = 10)"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s=\"00000\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s
        "minimumSteps(s = \"110011\")",
        "minimumSteps(s = \"101011\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [0, 0, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,3,1,2,1])",
        "minLengthAfterRemovals(nums = [3,1,1,3,3,2,2,2])",
        "minLengthAfterRemovals(nums = [0,0,0,0,0,0])",
        "minLengthAfterRemovals(nums = [1,2,2,1,3,4,5])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 1, 4, 2, 3], k = 5)",
        "minOperations(nums = [3, 2, 2, 4, 2], k = 2)",
        "minOperations(nums = [1, 2, 4, 2, 5, 1], k = 5)",
        "minOperations(nums = [2, 2, 2, 1], k = 1)",
        "minOperations(nums = [1, 2, 7, 5], k = 3)",
        "minOperations(nums = [3,2,9,6,5], k = 5)",
        "minOperations(nums = [3, 1, 3, 6, 2], k = 5)",
        "minOperations(nums = [1, 2, 3, 2, 3, 2, 1, 3], k = 3)",
        "minOperations(nums = [3, 1, 2, 3, 3, 3, 2, 2, 1], k = 4)",
        "minOperations(nums = [10, 20, 20, 20, 10, 10, 10, 10], k = 20)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 1, 2, 2, 3])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 3, 2, 4])",
        "isGood(nums = [2,2,2,1])",
        "isGood(nums = [2, 2, 3, 3, 4])",
        "isGood(nums = [1,1,3,3,2,2,3])",
        "isGood(nums = [2, 3, 5, 4, 5, 3, 2])"
    ],
    "sample_325": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 5)",
        "isFascinating(n = 3)",
        "isFascinating(n = 7)",
        "isFascinating(n = 7)",
        "isFascinating(n=4)",
        "isFascinating(n = 22)",
        "isFascinating(n=100)",
        "isFascinating(n = 445)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1,3,2,4])",
        "isGood(nums = [2,1,4])",
        "isGood(nums = [2,4,6])",
        "isGood(nums = [4,1,3])",
        "isGood(nums=[2,1,4])",
        "isGood(nums = [2,3,1,2])",
        "isGood(nums = [1,2,5,3,5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [30, 15, 60])",
        "minimumSeconds(nums = [0, 2, 3])",
        "minimumSeconds(nums=[1, 3, 2, 0])",
        "minimumSeconds(nums = [30, 21, 4, 5, 25, 20])",
        "minimumSeconds(nums = [1, 2, 3, 4, 10, 30])",
        "minimumSeconds(nums = [100, 60, 15])",
        "minimumSeconds(nums = [4, 2, 2, 6, 2, 4, 5, 9, 3])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1,2,3,4,5,6,7])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [5, 3, 1, 2])",
        "minimumRightShifts(nums = [5, 6, 1, 2, 3])",
        "minimumRightShifts(nums = [1,3,5,2])",
        "minimumRightShifts(nums = [1, 4, 2, 4, 1])",
        "minimumRightShifts(nums = [1000, 100])",
        "minimumRightShifts(nums = [1, 4, 2, 5, 3, 4])",
        "minimumRightShifts(nums = [2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "minimumRightShifts(nums = [5, 1, 1, 5, 3, 3, 6, 1, 2, 2, 2, 2, 0])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [2, 5, 1])",
        "isGood(nums = [3, 1, 4, 2])",
        "isGood(nums = [4, 2, 3])",
        "isGood(nums=[1, 2, 3, 4, 5, 6])",
        "isGood(nums = [3,2,5,4])",
        "isGood(nums = [1, 2, 3, 4, 5, 4, 3, 2])",
        "isGood(nums = [4,5,6,7,3])",
        "isGood(nums=[3,2,5,4,1])",
        "isGood(nums = [1, 4, 4, 6, 9])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 3], nums2 = [2])",
        "minOperations(nums1 = [10,20,30], nums2 = [30,20,10])",
        "minOperations(nums1 = [1, 10, 10, 1], nums2 = [2, 2, 2, 2])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,1,1])",
        "minOperations(nums1 = [1,4,2,3], nums2 = [1,5,3,4])",
        "minOperations(nums1 = [7,2,4], nums2 = [5,8,4])",
        "minOperations(nums1 = [1,3,4,5], nums2 = [2,4,6,8])",
        "minOperations(nums1 = [3, 1, 2, 2], nums2 = [2, 2, 3, 3])",
        "minOperations(nums1 = [4, 8, 2], nums2 = [4, 2, 1])",
        "minOperations(nums1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"13211\", k = 3)",
        "shortestBeautifulSubstring(s = \"112211\", k = 3)",
        "shortestBeautifulSubstring(s = \"1234567890\", k = 10)",
        "shortestBeautifulSubstring(s = \"113322\", k = 6)",
        "shortestBeautifulSubstring(s = \"110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"132\", k = 2)",
        "shortestBeautifulSubstring(s = \"11\", k = 3)",
        "shortestBeautifulSubstring(s = \"111000111111\", k = 11)",
        "shortestBeautifulSubstring(s = \"322251\", k = 10)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 10])",
        "minGroupsForValidAssignment(nums = [1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 3, 2, 5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12])",
        "minGroupsForValidAssignment(nums = [1,3,3,3,3,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 3, 3, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 3, 2, 5, 2, 1, 4, 1, 7])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"110011\")",
        "minimumSteps(s = \"011000\")",
        "minimumSteps(s = \"101010\")",
        "minimumSteps(s = \"0101010\")",
        "minimumSteps(s = \"1111000000\")",
        "minimumSteps(s = \"00001111\")",
        "minimumSteps(s
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1,2,3,2,1], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [0,1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 4, 3, 5, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [3,1,4,1,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 2, 2, 4, 5, 6], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 5, 7, 7, 3, 4], target = 9)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minimumSum(nums = [1, 2, 3, 1])",
        "minimumSum(nums = [1,2,3,4,10])",
        "minimumSum(nums = [3,2,1,2,3])",
        "minimumSum(nums = [1,5,3,6,2])",
        "minimumSum(nums = [5,3,6,8,10])",
        "minimumSum(nums = [-3,-1,2,1,5])",
        "minimumSum(nums = [4,6,10,9])",
        "minimumSum(nums = [-10, 8, -2, 7, -9, 15, -1, 3])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [2, 3, 1, 2, 4, 3], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 2, k = 3)",
        "maxSum(nums = [3, 1, 2, 4, 3], m = 2, k = 3)",
        "maxSum(nums = [9, 1, 2, 3, 9], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 4, k = 2)",
        "maxSum(nums = [1, -1, 0, 1, -1, 0, 1, -1], m = 3, k = 3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"bb\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"dcba\", s3 = \"bacd\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"bb\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"ab\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"baba\", s3 = \"abba\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"cdc\", s3 = \"abc\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 9])",
        "minOperations(nums = [1, 1, 4, 2, 3])",
        "minOperations(nums = [1,2,9])",
        "minOperations(nums = [2, 2, 2, 3])",
        "minOperations(nums = [1, 3, 5])",
        "minOperations(nums = [1, 3, 9])",
        "minOperations(nums = [3, 1, 3, 6])",
        "minOperations(nums = [1,2,1,2,1])",
        "minOperations(nums = [10, 2, 3])",
        "minOperations(nums = [1, 3, 2, 3, 3, 2, 2])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 3, 2])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1, 3, 7, 10])",
        "minimumCoins(prices = [1, 2, 3, 5])",
        "minimumCoins(prices = [1, 3, 5, 9])",
        "minimumCoins(prices = [1, 5, 7, 10])",
        "minimumCoins(prices = [2, 5, 3, 4, 6])",
        "minimumCoins(prices = [3, 1, 5, 8, 7, 1, 9, 2, 4])",
        "minimumCoins(prices = [1, 1, 1, 1, 2, 2, 3, 4, 7, 10])",
        "minimumCoins(prices = [4, 6, 11, 13, 12, 16, 18, 20, 25])"
    ],
    "sample_377": [
        "minimumSeconds(nums=[30,20,150,100,40])",
        "minimumSeconds(nums = [30,20,150,100,40])",
        "minimumSeconds(nums = [1, 3, 2])",
        "minimumSeconds(nums=[1,2,3,2])",
        "minimumSeconds(nums=[1,2,3,4,6])",
        "minimumSeconds(nums=[1, 1, 4, 2, 1, 3])",
        "minimumSeconds(nums = [1,3,5,2])",
        "minimumSeconds(nums=[2, 3, 2, 2, 3])",
        "minimumSeconds(nums=[0,1,1,2,3,4,5,6,6])",
        "minimumSeconds(nums=[1,1,3,3,4,4,5,6,6])"
    ],
    "sample_448": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abca\")",
        "minChanges(s = \"aaabbbccc\")",
        "minChanges(s = \"babad\")",
        "minChanges(s = \"axbycz\")",
        "minChanges(s = \"ppq\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 5, 3, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 9, 8], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 8, 5, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [8, 1, 5, 9, 3], limit = 20)",
        "lexicographicallySmallestArray(nums = [4, 5, 6, 7, 8], limit = 3)",
        "lexicographicallySmallestArray(nums = [2, 1, 3, 4, 5, 8, 9], limit = 5)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9, 10, 11, 12, 15], limit = 3)",
        "lexicographicallySmallestArray(nums = [2, 6, 5, 9, 1], limit = 11)"
    ],
    "sample_445": [
        "sumCounts(nums=[1,2,3])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums=[1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,2,3])",
        "sumCounts(nums = [1,2,1])",
        "sumCounts(nums = [2,2,2])",
        "sumCounts(nums=[1,2,3,1,2,3])",
        "sumCounts(nums = [2, 2, 2])",
        "sumCounts(nums=[1,2,3,1,2,1])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0,0,0])",
        "maximumTripletValue(nums = [5, 2, 3])",
        "maximumTripletValue(nums = [-1, -2, -3])",
        "maximumTripletValue(nums = [-3, 1, 2, -2, 5, 1, -9])",
        "maximumTripletValue(nums = [3, 2, 6, 5, 10])",
        "maximumTripletValue(nums = [1, 4, 3, 5])",
        "maximumTripletValue(nums = [0, -3, 2, -5, 4, -1, 6])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"abacaba\", k = 3)",
        "beautifulSubstrings(s = \"b\", k = 2)",
        "beautifulSubstrings(s = \"xyz\", k = 2)",
        "beautifulSubstrings(s = \"bear\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 11)",
        "beautifulSubstrings(s = \"abefcdg\", k = 2)",
        "beautifulSubstrings(s = \"abab\", k = 1)",
        "beautifulSubstrings(s = \"bdffdhghh\", k = 2)"
    ],
    "sample_385": [
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1, 4, 2, 3], target = 7)",
        "countPairs(nums = [2, 5, 9, 11], target = 13)",
        "countPairs(nums = [5,4,3,2,1], target = 8)",
        "countPairs(nums = [1, 5, 4, 6], target = 7)",
        "countPairs(nums = [1, 3, 5, 7, 9, 12], target = 11)",
        "countPairs(nums = [2, 5, 2, -2, 3], target = 3)",
        "countPairs(nums = [2,5,9,8], target = 10)",
        "countPairs(nums = [4, 5, 2, 3, 1], target = 7)",
        "countPairs(nums = [5, 10, 25, 75], target = 150)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 5, limit = 5)",
        "distributeCandies(n = 9, limit = 2)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 3], nums2 = [2, 4])",
        "minOperations(nums1 = [1, 5, 7, 9], nums2 = [2, 4, 8, 10])",
        "minOperations(nums1 = [4, 2], nums2 = [5, 6])",
        "minOperations(nums1 = [1, 5, 7], nums2 = [9, 8, 7])",
        "minOperations(nums1 = [1, 3, 6], nums2 = [1, 1, 1])",
        "minOperations(nums1 = [1, 10, 20, 30], nums2 = [1, 10, 20, 30])",
        "minOperations(nums1 = [1, 5, 2, 4, 6], nums2 = [1, 5, 2, 4, 6])",
        "minOperations(nums1=[2, 1, 5, 2, 4], nums2=[3, 2, 6, 5, 1])",
        "minOperations(nums1 = [3, 7, 5], nums2 = [3, 9, 7])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [10, 20, 30])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 3])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [2, 1])",
        "minOperations(nums = [1, 1, 1, 3, 3])",
        "minOperations(nums=[1,3])",
        "minOperations(nums=[1, 1, 1, 1, 3])",
        "minOperations(nums = [2, 2, 1, 2, 5, 2])",
        "minOperations(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minOperations(nums=[3, 4, 5, 10])",
        "minOperations(nums = [1,2,5,2,2,2,3,4,2])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101\", k = 1)",
        "shortestBeautifulSubstring(s = '110101', k = 2)",
        "shortestBeautifulSubstring(s = \"1100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"110010101\", k = 2)",
        "shortestBeautifulSubstring(s = '1111111010', k = 1)",
        "shortestBeautifulSubstring(s = \"110000101011\", k = 1)",
        "shortestBeautifulSubstring(s = \"110011110011111111110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"111010001111111111101\", k = 1)",
        "shortestBeautifulSubstring(s
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [30,20,150,100,40])",
        "minimumSeconds(nums = [1, 3, 2, 4])",
        "minimumSeconds(nums = [2, 5, 1])",
        "minimumSeconds(nums = [2,3,2,3])",
        "minimumSeconds(nums = [1, 3, 2, 5, 4])",
        "minimumSeconds(nums = [10, 20, 30])",
        "minimumSeconds(nums = [5,6,7,10,9])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 4, 2, 3])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 2, 1, 3])",
        "minOperations(nums = [1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 2, 2, 2])",
        "minOperations(nums = [3, 3, 3, 4, 2])",
        "minOperations(nums = [2, 3, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 2, 1])",
        "minOperations(nums = [1, 2, 3, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 0, 0, 0, 1, 1, 1, 0, 0])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 2, 4])",
        "alternatingSubarray(nums = [1, -1, 4, -4])",
        "alternatingSubarray(nums = [2, 1, -1, -3, 3])",
        "alternatingSubarray(nums = [3, -1, -2, -3, 1])",
        "alternatingSubarray(nums = [1, 2, -1, -4, -2, -5, 4, 1])",
        "alternatingSubarray(nums = [1, -2, 1, 2, -3, 4])",
        "alternatingSubarray(nums = [1, 2, -2, -3, 1, 5, 2])",
        "alternatingSubarray(nums = [0, 2, 2, 1, -2])",
        "alternatingSubarray(nums = [1, -3, 5, -2, 3, 1, 6, -2, 5, 7])",
        "alternatingSubarray(nums = [5, -4, -4, -1, 1, 3])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [3,2,2,3])",
        "minLengthAfterRemovals(nums = [1,1,3,3,0,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 2, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 1, 1, 1, 1, 1, 0])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,5])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"])",
        "maximumNumberOfStringPairs(words = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"god\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xy\", \"yx\"])",
        "maximumNumberOfStringPairs(words=[\"aa\", \"ba\", \"ab\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"c\", \"cc\", \"cd\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"def\", \"ijk\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"1212\", \"xyxz\", \"xyx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"apple\", \"ple\", \"aple\", \"le\", \"applee\", \"applee\", \"apple\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aba\", \"ccc\", \"baa\", \"ac\", \"bbc\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"wxyz\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"eidbaooo\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"zyx\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"zab\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"axyz\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"zxyza\", str2 = \"za\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcde\")",
        "longestSemiRepetitiveSubstring(s = \"lalala\")",
        "longestSemiRepetitiveSubstring(s = \"abcbabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbc\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abbbabbbbaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"mlpmallpm\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,1], m = 2, k = 1)",
        "maxSum(nums = [1,3,5], m = 2, k = 2)",
        "maxSum(nums = [0,0,0,0], m = 4, k = 1)",
        "maxSum(nums = [2,2,2], m = 2, k = 1)",
        "maxSum(nums=[0,1,2,1,0,1,0,1], m=2, k=3)",
        "maxSum(nums = [1,4,6,2,5,4,8,6,6,1], m = 2, k = 5)",
        "maxSum(nums = [2, 7, 1, 6, 1, 7, 5], m = 2, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"hello\", \"world\", \"hello world\"], x = \"hello\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hi\"], x = \"h\")",
        "findWordsContaining(words = [\"apple\", \"cherry\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"world\"], x = \"world\")",
        "findWordsContaining(words = [\"aaa\", \"aaaa\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"laptop\"], x = \"na\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"red\"], x = \"ed\")",
        "findWordsContaining(words = [\"python\", \"java\", \"c++\", \"javascript\"], x = \"py\")",
        "findWordsContaining(words = [\"car\", \"dark\", \"dog\", \"potato\"], x = \"a\")",
        "findWordsContaining(words = [\"rhubarb\", \"jim\", \"cabbage\", \"mango\", \"cupcakes\"], x = \"ab\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1], moveTo = [4])",
        "relocateMarbles(nums = [2, 1, 3], moveFrom = [0, 1, 2], moveTo = [1, 0, 2])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [2,5], moveTo = [3,4])",
        "relocateMarbles(nums = [2, 2, 1], moveFrom = [0,1,2], moveTo = [2,0,1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [0,1], moveTo = [3, 4])",
        "relocateMarbles(nums = [1,2,2,3,3,4], moveFrom = [1,2,3], moveTo = [4,3,3])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,2,3], moveTo = [1,3,4])",
        "relocateMarbles(nums = [2, 3, 2, 1], moveFrom = [0, 1, 2, 3], moveTo = [0, 4, 2, 1])",
        "relocateMarbles(nums = [1, 2, 4, 4, 5], moveFrom = [0,2], moveTo = [1])",
        "relocateMarbles(nums = [1,2,1,3,2,4,4,3], moveFrom = [3,4], moveTo = [1,2])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0, 0])",
        "maximumTripletValue(nums = [2, 2, 3])",
        "maximumTripletValue(nums = [3, 2, 4])",
        "maximumTripletValue(nums = [3, 2, 1, 5])",
        "maximumTripletValue(nums = [0, -1, 2, 3])",
        "maximumTripletValue(nums = [3, 2, 1, 5, 4])",
        "maximumTripletValue(nums = [2, 4, 6])",
        "maximumTripletValue(nums = [1, 3, 2, 5, 4, 10])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababc\")",
        "longestSemiRepetitiveSubstring(s = \"abac\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaabb\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abacca\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabbbbbccccc\")",
        "longestSemiRepetitiveSubstring(s = \"abaxxxaxxaxx\")",
        "longestSemiRepetitiveSubstring(s = \"11223344556677889900\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"aa\", \"aaa\", \"aaaa\"])",
        "maximumNumberOfStringPairs(words = [\"cat\",\"bat\",\"rat\"])",
        "maximumNumberOfStringPairs(words = [\"c\", \"c\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\"])",
        "maximumNumberOfStringPairs(words = [\"dog\", \"cat\", \"tac\", \"god\", \"at\"])",
        "maximumNumberOfStringPairs(words = [\"b\", \"a\", \"na\", \"na\", \"ana\"])",
        "maximumNumberOfStringPairs(words=[\"abcd\",\"defg\",\"hijk\",\"lmno\",\"pqrs\",\"tuv\",\"wxyz\"])",
        "maximumNumberOfStringPairs(words = [\"bob\", \"cat\", \"dog\", \"pig\", \"I\", \"like\", \"bob\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1,2,3],[4,5,6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])",
        "matrixSum(nums = [[1], [1, 2], [1, 2, 3]])",
        "matrixSum(nums = [[4, 3, 2], [1, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1], [2, 3], [1]])",
        "matrixSum(nums = [[4], [3], [6, 5]])",
        "matrixSum(nums = [[1, 2, 4], [2, 5, 6], [3, 1, 1]])",
        "matrixSum(nums = [[1, 3, 2], [0, 1, 2], [1, 1, 4]])",
        "matrixSum(nums = [[1, 2, 3, 4], [5, 10, 2, 4]])",
        "matrixSum(nums=[[5, 5, 5, 5, 5], [5, 3, 5, 2, 5], [5, 4, 5, 3, 5], [5, 5, 5, 5, 5], [5, 5, 5, 5, 5]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1=\"aa\", s2=\"bb\", s3=\"cc\")",
        "findMinimumOperations(s1=\"abc\", s2=\"abc\", s3=\"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1=\"aa\", s2=\"bbb\", s3=\"ccc\")",
        "findMinimumOperations(s1=\"abcde\", s2=\"defgh\", s3=\"hijkl\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"xbba\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"bb\", s3 = \"cc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"acb\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bc\", s3 = \"abc\")",
        "findMinimumOperations(s1=\"abcd\", s2=\"abcd\", s3=\"abcd\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"cba\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cba\", s3 = \"zba\")",
        "findMinimumOperations(s1 = \"bbbc\", s2 = \"bbbc\", s3 = \"bbbc\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"defghi\", s3 = \"gbcdef\")"
    ],
    "sample_324": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 12)",
        "isFascinating(n = 6)",
        "isFascinating(n = 6)",
        "isFascinating(n=1)",
        "isFascinating(n = 11)",
        "isFascinating(n=10)",
        "isFascinating(n = 113)",
        "isFascinating(n = 98)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1,3,5])",
        "minimumCoins(prices = [1, 5, 8, 9])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20, 24, 30])",
        "minimumCoins(prices = [1,3,5,10,20])",
        "minimumCoins(prices = [2, 4, 6, 1, 3])",
        "minimumCoins(prices = [1,3,4,7,9])",
        "minimumCoins(prices=[2,1,5])",
        "minimumCoins(prices = [1,2,4,7,9])",
        "minimumCoins(prices = [4,1,5,2,10])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,6], target = 5)",
        "countPairs(nums = [1, 5, 3, 4, 2], target = 9)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7], target = 9)",
        "countPairs(nums = [1, 2, 3, 4, 6], target = 6)",
        "countPairs(nums = [1,2,3,4,6,7], target = 8)",
        "countPairs(nums = [2,7,9], target = 10)",
        "countPairs(nums = [2, 1, 3, 2], target = 4)",
        "countPairs(nums=[-2,0,10,-19,4,6,-8,1], target=5)",
        "countPairs(nums = [3, 1, 5, 7, 4, 2], target = 8)",
        "countPairs(nums = [5, 1, 2, 7, 6, 9], target = 10)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,3,2,1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,2,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,3,2,1,1])",
        "minGroupsForValidAssignment(nums = [2,2,4,3])",
        "minGroupsForValidAssignment(nums = [2,3,4,5,10])",
        "minGroupsForValidAssignment(nums = [2,1,3,3,3,2,2,4,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,4,5,6,7,8,9,10,11,12])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 6], target = 5)",
        "countPairs(nums = [1,2,3], target = 5)",
        "countPairs(nums = [1, 2, 3, 9], target = 5)",
        "countPairs(nums = [1,2,3], target = 2)",
        "countPairs(nums = [1, 5, 10], target = 15)",
        "countPairs(nums = [1, 3, 5, 2, 4, 6], target = 8)",
        "countPairs(nums = [2, 1, 1, 2], target = 4)",
        "countPairs(nums = [1, 5, 3, 6, 7], target = 10)",
        "countPairs(nums = [0, 2, 4, 2, 2, 4], target = 6)",
        "countPairs(nums = [2,4,8,9,13,15,20,30], target = 10)"
    ],
    "sample_317": [
        "buyChoco(prices = [1,2,3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [2, 5, 10], money = 15)",
        "buyChoco(prices = [2,5,10], money = 15)",
        "buyChoco(prices = [2, 5, 3, 1], money = 8)",
        "buyChoco(prices=[1,2,3], money=4)",
        "buyChoco(prices = [2,5,7], money = 9)",
        "buyChoco(prices = [10, 2, 5], money = 10)",
        "buyChoco(prices = [1,3,4,5], money = 7)",
        "buyChoco(prices = [2, 4, 2, 4, 6, 3], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"cde\"])",
        "maximumNumberOfStringPairs(words=[\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"cba\", \"xyz\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"x\", \"y\", \"xy\", \"xyx\", \"yx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abd\", \"def\", \"abd\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"rabbit\", \"camel\"])",
        "maximumNumberOfStringPairs(words = [\"kucing\", \"konco\", \"bau\", \"fuss\", \"konco\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"cat\")",
        "sortVowels(s = \"Leotcede\")",
        "sortVowels(s = 'leOtcede')",
        "sortVowels(s=\"Hello World!\")",
        "sortVowels(s = \"cede\")",
        "sortVowels(s = \"Ottcede\")",
        "sortVowels(s = \"word\")",
        "sortVowels(s = \"iLoveMyInstructor\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 2, 3, 4, 4, 5])",
        "sumCounts(nums = [1,1,2])",
        "sumCounts(nums = [1,1,2,2])",
        "sumCounts(nums = [1, 2, 2, 2, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 3, 5, 6])",
        "sumCounts(nums = [1, 2, 2, 2, 4, 5, 6])",
        "sumCounts(nums = [1,2,2,3,4,4,6,8,9])",
        "sumCounts(nums = [0,1,1,1,2,2,2,3,3,3,3])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 3, 4])",
        "minimumCoins(prices = [1, 3, 5, 7, 9])",
        "minimumCoins(prices = [1, 3, 5, 7])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 3, 5, 7, 9, 11])",
        "minimumCoins(prices=[1, 3, 2, 4])",
        "minimumCoins(prices = [3, 4, 6, 9, 1])",
        "minimumCoins(prices=[3, 6, 1, 1, 4])",
        "minimumCoins(prices = [4, 2, 3, 8, 1, 5])",
        "minimumCoins(prices = [2, 3, 6, 1, 9, 8, 6, 1, 5, 3, 6, 1, 1, 4, 5, 9, 7, 7, 8, 8, 1, 7, 8, 1, 7, 6, 6, 1, 3, 2, 8, 9, 3, 7, 5, 8, 9, 2, 4, 9, 8, 7, 6, 2, 1, 8, 3, 3, 1, 1, 3, 1, 2, 2, 6, 3, 8, 6, 3, 1, 3, 8, 8, 6, 5, 5, 4, 9, 8, 7, 1, 8, 2, 1, 7, 3, 6, 8, 4, 3, 9, 3, 6, 6, 5, 3, 1, 2, 2, 3, 6, 3, 4, 1, 8, 7, 3, 2, 6, 3, 5, 7, 7, 5, 2, 3, 8, 6, 3, 6, 3, 5, 9, 2, 6, 7, 8, 6, 1, 5, 9, 7, 5, 4, 9, 9, 2, 1, 6, 3, 3, 5, 1, 8, 6, 6, 6, 9, 1, 8, 8, 4, 7, 1, 4, 3, 4, 4, 9, 3, 4, 7, 5, 4, 2, 9, 9, 8, 5, 8, 8, 8, 3, 8, 2, 7, 5, 2, 9, 1, 2, 4, 2, 9, 2, 2, 3, 6, 2, 4, 1, 9, 6, 9, 1, 9, 8, 9, 2, 8, 8, 7, 7,"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 4, m = 2)",
        "differenceOfSums(n = 6, m = 5)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 20, m = 7)"
    ],
    "sample_307": [
        "countSeniors(details = [\"1234567890\", \"1234567891\"])",
        "countSeniors(details = [\"1234567890\", \"9876543210\"])",
        "countSeniors(details = [\"Mr. <NAME>\", \"Ms. <NAME>\", \"Mr. <NAME>\"])",
        "countSeniors(details = [\"<NAME> 19941005\", \"<NAME> 19961115\"])",
        "countSeniors(details = [\"Ashley\", \"Michael\", \"Lisa\", \"Thomas\", \"Michael\", \"Lisa\"])",
        "countSeniors(details = [\"Rishi49\", \"Harsh79\", \"Sarath12\", \"Rishi49\"])",
        "countSeniors(details = [\"1999-10-10, 1970-08-20, 1991-05-24\", \"1998-10-10, 1998-08-20, 1998-05-24\"])",
        "countSeniors(details = [\"margaret, 1984, 20\", \"susy, 1992, 22\", \"rebecca, 1993, 23\"])",
        "countSeniors(details = [\"12518980779\", \"12895889506\", \"12896177684\"])",
        "countSeniors(details = [\"<NAME> 62\", \"810-453-1993 <EMAIL>\", \"<NAME> 79\", \"650-413-1844 <EMAIL>\"])"
    ],
    "sample_323": [
        "isFascinating(n = 4)",
        "isFascinating(n = 4)",
        "isFascinating(n = 5)",
        "isFascinating(n = 7)",
        "isFascinating(n = 10)",
        "isFascinating(n = 6)",
        "isFascinating(n = 23)",
        "isFascinating(n = 11)",
        "isFascinating(n = 30)",
        "isFascinating(n = 40)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"abaac\")",
        "minimumBeautifulSubstrings(s = \"ababcd\")",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx",
        "minimumBeautifulSubstrings(s = \"00110\")",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx",
        "minimumBeautifulSubstrings(s = \"aabbaaabbbaaa\")",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 9, limit = 2)",
        "distributeCandies(n=7, limit=4)",
        "distributeCandies(n=6, limit=3)",
        "distributeCandies(n = 6, limit = 1)"
    ],
    "sample_419": [
        "minOperations(nums = [10,5,2,6], k = 10)",
        "minOperations(nums = [10, 5, 2, 7], k = 10)",
        "minOperations(nums = [3,2,2,4], k = 5)",
        "minOperations(nums = [2, 3, 4, 5], k = 1)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8], k = 2)",
        "minOperations(nums = [2,4,1,1,4], k = 5)",
        "minOperations(nums=[3,1,4,2], k = 2)",
        "minOperations(nums = [1, 2, 9, 10, 2, 3], k = 2)",
        "minOperations(nums = [10, 10, 9, 8, 7, 6, 5, 4, 3, 2], k = 4)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 1, 1, 2])",
        "sumCounts(nums=[1, 2, 3, 4])",
        "sumCounts(nums = [3, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 1, 2, 3, 4, 3, 4])",
        "sumCounts(nums = [2,2,1,2,1,2,1])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"5\", \"4\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"2\", \"prev\", \"3\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"4\", \"3\", \"2\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\",\"2\",\"prev\",\"3\",\"4\",\"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"9\", \"4\", \"1\", \"9\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"5\", \"7\", \"1\", \"7\", \"5\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = ['5', '3', '4', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"5\", \"prev\", \"3\", \"4\", \"5\", \"prev\", \"9\"])",
        "lastVisitedIntegers(words
    ],
    "sample_421": [
        "minOperations(nums = [1, 1, 4, 2, 3], k = 5)",
        "minOperations(nums = [1, 1, 4, 2, 3], k = 5)",
        "minOperations(nums = [1, 1, 4, 2, 3], k = 5)",
        "minOperations(nums = [1, 5, 2, 4, 3], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [1, 3, 5], k = 6)",
        "minOperations(nums = [1, 2, 2, 3], k = 2)",
        "minOperations(nums = [1, 2, 5, 7, 11], k = 11)",
        "minOperations(nums = [2, 10, 5, 8, 9, 4], k = 10)",
        "minOperations(nums = [5, 2, 3, 4, 2, 3, 4, 5, 6, 7], k = 4)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abacabad\")",
        "longestSemiRepetitiveSubstring(s = \"abaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbbcccd\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbcdbcd\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbac\")",
        "longestSemiRepetitiveSubstring(s = \"mnnmm\")",
        "longestSemiRepetitiveSubstring(s = \"aaccctt\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 3, 2])",
        "sumCounts(nums = [2, 2])",
        "sumCounts(nums = [2, 4, 6])",
        "sumCounts(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "sumCounts(nums = [1, 2, 2, 2, 2])",
        "sumCounts(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "sumCounts(nums = [1, 2, 1, 3, 4])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"1001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1001\", k = 1)",
        "shortestBeautifulSubstring(s = \"1101\", k = 1)",
        "shortestBeautifulSubstring(s = \"11011000\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"0100110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"11010010010111101\", k = 1)",
        "shortestBeautifulSubstring(s = \"110111111111111110110101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11010101111010011110100110111010101010101111110011110101101111010110110111101111110111111101010101010101110111101101101110101111010111010010111101101101101111010110110111101110110111101111111011111101111011111110111101101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"z\")",
        "minimumBeautifulSubstrings(s = \"abba\")",
        "minimumBeautifulSubstrings(s = \"baabaaab\")",
        "minimumBeautifulSubstrings(s = \"ababaab\")",
        "minimumBeautifulSubstrings(s = \"abbab\")",
        "minimumBeautifulSubstrings(s = \"aabababa\")",
        "minimumBeautifulSubstrings(s = \"b4a\")",
        "minimumBeautifulSubstrings(s = \"baabbaabbabbab\")",
        "minimumBeautifulSubstrings(s = \"zulru\")",
        "minimumBeautifulSubstrings(s = \"xxyxxxyxyyxyxyxyxyxyxyxyxyyxyyxyyxyyxyxyxyyyxyxyyxyyxyxyyxyxyxyyyxyxyyxyxyyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyxyyyxyxyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyxyyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyyxyxyy"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 5, z = 7)",
        "longestString(x = 1, y = 3, z = 5)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 7, z = 5)",
        "longestString(x = 2, y = 5, z = 6)",
        "longestString(x = 3, y = 4, z = 7)",
        "longestString(x = 6, y = 8, z = 10)",
        "longestString(x=1, y=2, z=4)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0, 0], [0, 0, 1, 1], [1, 0, 1, 0], [0, 1, 1, 0]])",
        "findChampion(grid = [[0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 4, 3], [0, 5, 2], [6, 0, 8]])",
        "findChampion(grid = [[5, 4, 3], [4, 3, 2], [2, 1, 4]])",
        "findChampion(grid = [[1, 2, 3, 4], [1, 1, 1, 2], [1, 3, 3, 1], [2, 3, 3, 2]])",
        "findChampion(grid = [[1,0,0,1,1,1], [1,0,0,1,1,1], [1,0,1,1,1,1], [1,0,0,0,1,1], [1,1,1,1,1,1], [1,0,0,0,0,1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"ba\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"ab\", k = 2)",
        "beautifulSubstrings(s = \"baba\", k = 2)",
        "beautifulSubstrings(s = \"abccba\", k = 5)",
        "beautifulSubstrings(s = \"zyy\", k = 3)",
        "beautifulSubstrings(s = \"abdbca\", k = 3)",
        "beautifulSubstrings(s = \"ababcbacadefegdehijhklij\", k = 11)"
    ],
    "sample_304": [
        "countSeniors(details = [\"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details = [\"123456789123456789123456789123456\", \"012345678901234567890123456789012\", \"11111111111111111111111111111111\", \"123456789123456789123456789123456\", \"012345678901234567890123456789012\", \"1111111111111111111111111111111\", \"123456789123456789123456789123456\", \"012345678901234567890123456789012\", \"1111111111111111111111111111111\"])",
        "countSeniors(details = [\"689-9999\", \"688-4444\", \"690-5555\"])",
        "countSeniors(details = [\"1602000001 033222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222",
        "countSeniors(details = [\"1990-02-15 11:20:00, 22, 10, 0, 0, 30, 60, 0\"])",
        "countSeniors(details = [\"james,12,21,1998,85,m\",\"john,23,10,1976,88,f\"])",
        "countSeniors(details = [\"2456648, 11, 1993, 65, <NAME>, <EMAIL>, 555-5555\", \"3452284, 11, 1989, 67, <NAME>, <EMAIL>, 555-5555\"])",
        "countSeniors(details = [\"0000001, 1988-08-06, <NAME>, 2000, 2, 5, 500, 1995-03-09, 9999999999, 0, 0, 0\"])",
        "countSeniors(details = [\"01703023651,000001,Mr. John,Doe,25,1990,1983,1983-01-06,0894444444,email.com,A,10\", \"01703023651,000002,Mr. Jane,Doe,28,1980,1979,1979-02-01,0988888888,email2.com,B,25\"])",
        "countSeniors(details = [\"<NAME>, 59, 816790891, 10/26/2002, 11:05:42 AM, 12/01/1993, 12:30:00 PM\", \"<NAME>, 22, 912873757, 01/16/2014, 4:30:00 AM, 03/12/1987, 9:45:00 AM\", \"<NAME>, 76, 513541789, 01/20/2011, 6:45:00 AM, 09/12/1979, 11:20:00 PM\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [4, 2, 1, 3])",
        "maximumTripletValue(nums = [0,0,0,0,0])",
        "maximumTripletValue(nums = [2, 0, 0])",
        "maximumTripletValue(nums = [-2, 0, 3, 4])",
        "maximumTripletValue(nums = [100, 20, 1])",
        "maximumTripletValue(nums = [5, 12, 10, 6])",
        "maximumTripletValue(nums = [3,2,6,5,10,4])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"z\")",
        "minimumBeautifulSubstrings(s = \"b\")",
        "minimumBeautifulSubstrings(s = \"baab\")",
        "minimumBeautifulSubstrings(s = \"abccba\")",
        "minimumBeautifulSubstrings(s = \"babgbag\")",
        "minimumBeautifulSubstrings(s = \"13\")",
        "minimumBeautifulSubstrings(s = \"666\")",
        "minimumBeautifulSubstrings(s = \"babaabcbb\")",
        "minimumBeautifulSubstrings(s = \"aabbbbcaaabbb\")",
        "minimumBeautifulSubstrings(s
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [2, 3, 1, 2, 4, 3])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [3, 1, 4, 2])",
        "maxSubarrays(nums = [3, 1, 4, 2, 1, 3])",
        "maxSubarrays(nums=[1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 3, 2, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 0, 1])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [2, 4, 6])",
        "minOperations(a = [1, 2, 3], b = [1, 3, 2])",
        "minOperations(a=[1, 3], b=[2, 5])",
        "minOperations(a = [3, 3, 3], b = [3, 3, 3])",
        "minOperations(a = [1, 4, 2, 5, 3], b = [3, 5, 4, 2, 1])",
        "minOperations(a = [3, 5, 2, 1], b = [2, 4, 6, 3])",
        "minOperations(a = [1, 5, 3, 4, 2], b = [4, 5, 6, 3, 2])",
        "minOperations(a = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], b = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minOperations(a = [1, 2, 5, 3, 2, 1], b = [3, 2, 3, 1, 1, 1])",
        "minOperations(a = [4, 2, 7, 1, 5, 10, 6, 1, 3, 9], b = [3, 6, 9, 1, 4, 2, 10, 7, 6, 8])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"un\", \"iq\", \"ue\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\", \"god\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"aa\", \"aaa\", \"aaaa\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"banana\", \"dog\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ba\", \"bb\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"ab\", \"abd\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"act\", \"god\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"car\",\"dog\",\"cog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"ac\", \"ab\", \"dog\", \"god\", \"cab\", \"can\", \"dog\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'Lumpy')",
        "sortVowels(s = 'Lily')",
        "sortVowels(s = 'lompH')",
        "sortVowels(s = 'Anna')",
        "sortVowels(s = \"I'm a good boy\")",
        "sortVowels(s = \"the best is yet to come\")",
        "sortVowels(s = \"Baker's\")",
        "sortVowels(s = \"my name is Saiyam\")",
        "sortVowels(s=\"THEWELL\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [3, 3, 3])",
        "sumCounts(nums = [1,2,1,3,2])",
        "sumCounts(nums = [3, 1, 1, 3])",
        "sumCounts(nums = [1,2,2,3,2])",
        "sumCounts(nums = [3,2,3])",
        "sumCounts(nums = [1,1,2,2,3,3,4,4,5,5,5,6,6,6,6,7,7,7,8])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [3, 1, 2, 4, 5])",
        "minimumSum(nums = [1, 3, 5, 7, 9, 11])",
        "minimumSum(nums=[1, 2, 4, 8, 16])",
        "minimumSum(nums = [7, 2, 4, 6, 2, 5, 1])",
        "minimumSum(nums = [10, 2, 3, 100])",
        "minimumSum(nums = [-6, -3, 0, 2, 3, 4])",
        "minimumSum(nums = [1, -3, 4, -2, 10, -2])",
        "minimumSum(nums = [5, 6, 2, 7, 9, 2, 3, 8, 7, 9])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1, 1], [0, 1, 0, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 1], [1, 0, 1, 1], [0, 0, 0, 1]])",
        "findChampion(grid=[[0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[0,0,1,0],[0,1,0,0],[0,0,0,0],[0,0,0,0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 1], [1, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[2, 3, 1, 2], [1, 2, 3, 1], [1, 1, 1, 3]])"
    ],
    "sample_372": [
        "sortVowels(s = \"python\")",
        "sortVowels(s = \"LOtcede\")",
        "sortVowell(s = 'lEOtcede')",
        "sortVowels(s = \"LEtcede\")",
        "sortVowels(s = 'LeOtCeDE')",
        "sortVowels(s = \"let's sort this\")",
        "sortVowels(s = \"Vexodus\")",
        "sortVowels(s = \"LOve, tCoDe\")",
        "sortVowels(s = 'MaLToM')",
        "sortVowels(s = \"bLsdrhzvy\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"11101\")",
        "minimumSteps(s = \"11100\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s
        "minimumSteps(s = \"1011110\")",
        "minimumSteps(s=\"11100\")",
        "minimumSteps(s = \"1110010\")",
        "minimumSteps(s=\"1111010\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 3])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0])",
        "minimumRightShifts(nums = [1, 2, 3, 3, 3, 4, 5])",
        "minimumRightShifts(nums = [5, 2, 1, 3, 4, 8])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1, 3])",
        "minOperations(nums = [1, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [3, 5])",
        "minOperations(nums = [1, 1, 1, 3, 2])",
        "minOperations(nums = [6, 3, 5])",
        "minOperations(nums = [2,2,1,2,5,2,1])",
        "minOperations(nums = [1, 3, 1, 1, 3])",
        "minOperations(nums = [2,2,1,2,5,2,2])",
        "minOperations(nums = [6, 3, 9, 7])"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Liam\")",
        "sortVowels(s = \"pears\")",
        "sortVowels(s = 'Lima')",
        "sortVowels(s = 'Lithium')",
        "sortVowels(s = 'iluv')",
        "sortVowels(s = \"A man, a plan, a canal: Panama\")"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1], [1, 0], [0, 0]])",
        "findChampion(grid = [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0]])",
        "findChampion(grid = [[0,0,1,0], [0,1,0,0], [1,1,0,0], [0,1,0,0]])",
        "findChampion(grid = [[1,0,0,0,1],[0,1,0,0,0],[1,0,0,1,0],[0,0,0,0,1],[0,0,0,0,0]])",
        "findChampion(grid = [[0, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1], nums2 = [1])",
        "minSum(nums1 = [1, 1], nums2 = [1, 1])",
        "minSum(nums1 = [1, 1], nums2 = [2, 2])",
        "minSum(nums1 = [2, 4], nums2 = [1, 3, 5])",
        "minSum(nums1 = [1, 2, 4], nums2 = [2, 6, 2])",
        "minSum(nums1 = [2, 4, 6], nums2 = [1, 3, 5, 7])",
        "minSum(nums1 = [1, 4, 6], nums2 = [4, 5, 6])",
        "minSum(nums1 = [3, 4, 3], nums2 = [1, 2, 4, 3, 3])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 5, 5, 10])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [3, 5, 10, 11])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 4)",
        "minOperations(nums = [3, 2, 3, 4, 2], k = 3)",
        "minOperations(nums = [1, 1, 1, 1], k = 3)",
        "minOperations(nums = [1, 2, 3, 2, 3, 1], k = 3)",
        "minOperations(nums = [1, 3, 4, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 10)",
        "minOperations(nums = [1, 2, 9, 3, 4, 5, 6, 7, 8], k = 5)",
        "minOperations(nums = [3, 2, 2, 4, 2], k = 2)",
        "minOperations(nums = [7, 1, 5, 4], k = 5)",
        "minOperations(nums = [7,1,5,9,2,5,4], k = 3)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [3, 2, 1], moveFrom = [0, 1], moveTo = [2, 2])",
        "relocateMarbles(nums = [0, 1, 2], moveFrom = [0, 2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7], moveFrom = [1, 3, 5], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [3], moveTo = [4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [3,5], moveTo = [1,4])",
        "relocateMarbles(nums = [0, 1, 3, 4, 2], moveFrom = [0, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [3, 4], moveTo = [6, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6, 8], moveTo = [3, 5, 7, 9])",
        "relocateMarbles(nums = [3, 2, 4, 1], moveFrom = [0, 1, 3], moveTo = [2, 0, 1])",
        "relocateMarbles(nums = [3, 2, 1, 5, 4], moveFrom = [3, 1], moveTo = [4, 2])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [3,1,2,4,3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 4, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 4, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 6)",
        "maxSum(nums = [3, 5, 4, 7], m = 2, k = 2)",
        "maxSum(nums = [4,2,1,5,6], m = 2, k = 3)",
        "maxSum(nums = [2, 2, 1, 1, 3], m = 2, k = 1)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"az\", s2 = \"zza\")",
        "canMakeSubsequence(s1=\"az\", s2=\"za\")",
        "canMakeSubsequence(s1=\"az\", s2=\"za\")",
        "canMakeSubsequence(s1=\"az\", s2=\"banana\")",
        "canMakeSubsequence(s1 = \"zzaz\", s2 = \"banana\")",
        "canMakeSubsequence(s1 = \"zzza\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"time\", s2 = \"metime\")",
        "canMakeSubsequence(s1 = \"zzz\", s2 = \"zzxaz\")",
        "canMakeSubsequence(s1=\"azzzzzz\", s2=\"zzaaaz\")",
        "canMakeSubsequence(s1=\"zzaaaabaaacca\", s2=\"bbab\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2], nums2 = [3, 4, 0, 0, 0])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4, 0, 1])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [2,4,6,8,10])",
        "minSum(nums1 = [1,3,4], nums2 = [0,1,2])",
        "minSum(nums1 = [1,2,3,0,0], nums2 = [2,5,9,0,0])",
        "minSum(nums1 = [1, 2, 3, 0, 4], nums2 = [1, 2, 4, 5])",
        "minSum(nums1 = [1, 3, 4, 2], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 4, 2, 5, 3], nums2 = [2, 3, 1, 4])",
        "minSum(nums1 = [4, 5, 6, 7, 0, 0, 0, 1], nums2 = [0, 0, 0, 0, 3])",
        "minSum(nums1 = [1, 4, 0, 0, 0, 0, 0, 7], nums2 = [0, 0, 6])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"5\", \"2\", \"prev\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"9\", \"4\", \"1\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"1\",\"2\",\"prev\",\"3\",\"4\",\"5\",\"prev\",\"6\"])",
        "lastVisitedIntegers(words = [\"5\", \"1\", \"9\", \"prev\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"5\", \"1\", \"9\", \"prev\", \"5\", \"9\", \"prev\", \"9\", \"5\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"9\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words=[\"2\", \"1\", \"prev\", \"3\", \"5\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"1\", \"2\", \"next\", \"4\", \"1\", \"3\", \"1\", \"2\", \"next\", \"4\"])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [2, 1, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [1, 2, 3, 5, 6, 7])",
        "isGood(nums = [2, 3, 1, 4])",
        "isGood(nums = [1, 2, 3, 4, 6, 5])",
        "isGood(nums = [3, 1, 2, 4, 5])"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,3,4])",
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums=[1,2,3])",
        "minOperations(nums = [3,2,2,4])",
        "minOperations(nums = [2,2,1,2,1,2,2])",
        "minOperations(nums = [1,2,1,2,3])",
        "minOperations(nums = [2,2,3,4])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1,2,2,3,2])",
        "minOperations(nums = [2,2,2,3,4,4])"
    ],
    "sample_451": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"aaca\")",
        "minChanges(s = \"xyab\")",
        "minChanges(s = \"xyxxyxyxx\")",
        "minChanges(s = \"abcbdab\")",
        "minChanges(s = \"dgd\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 1, limit = 5)",
        "distributeCandies(n = 2, limit = 5)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 10, limit = 15)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1,2,3,4], nums2 = [3,4,5,6])",
        "minSum(nums1=[1,2,3],nums2=[4,5,6])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [0, 6, 2, 2, 7])",
        "minSum(nums1 = [1,1,1,1,1,1], nums2 = [0,0,0,0,1,0])",
        "minSum(nums1 = [3, 4, 7, 1, 2], nums2 = [9, 6, 7, 1, 2])",
        "minSum(nums1=[4,3,2,1,5,6], nums2=[1,2,3])",
        "minSum(nums1 = [0, 0, 0, 4, 5, 6], nums2 = [0, 2, 0, 3, 0, 0])",
        "minSum(nums1=[1,1,2,4,5,6],nums2=[-1,0,2,3,5,6])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5,6])",
        "minimumRightShifts(nums = [3, 1, 2, 4, 0])",
        "minimumRightShifts(nums = [4, 3, 2, 1, 0])",
        "minimumRightShifts(nums = [1,1,2,2,3])",
        "minimumRightShifts(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "minimumRightShifts(nums = [1, 3, 5, 2, 10])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 9])",
        "minimumRightShifts(nums = [0, 3, 1, 1, 1])"
    ],
    "sample_381": [
        "countPairs(nums = [1, 5, 3, 4, 2], t = 7)",
        "countPairs(nums = [1, 5, 3, 4, 2], t = 7)",
        "countPairs(nums = [1, 4, 2, 3], t = 5)",
        "countPairs(nums = [3,1,4,1,5], t = 5)",
        "countPairs(nums = [3, 5, -4, 8, 11, 1, -1, 6], t = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 8)",
        "countPairs(nums=[1, 4, 45, 6, 10, 8], t=50)",
        "countPairs(nums = [2,3,4,5], t = 7)",
        "countPairs(nums=[2, 3, 5], t=10)",
        "countPairs(nums = [2, 3, 1, 1, 4, 1, 3], t = 6)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"2p\", \"4p\"])",
        "lastVisitedIntegers(words = [\"p3\", \"2\", \"1\", \"3\", \"2\"])",
        "lastVisitedIntegers(words = [\"p2\", \"p3\", \"p5\", \"x2\", \"x3\", \"x5\"])",
        "lastVisitedIntegers(words = [\"px\", \"px\", \"py\", \"pz\", \"py\", \"px\", \"pz\", \"px\"])",
        "lastVisitedIntegers(words = [\"si\", \"two\", \"eight\", \"me\", \"four\", \"seven\"])",
        "lastVisitedIntegers(words=[\"pvv\", \"pxx\", \"pyy\", \"pyz\"])",
        "lastVisitedIntegers(words = [\"pin\", \"to\", \"heaven\", \"4\"])",
        "lastVisitedIntegers(words = [\"pbga\", \"xhth\", \"ebii\", \"havc\", \"ktlj\", \"fwft\", \"owie\", \"uxts\", \"anuv\", \"jptl\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"az\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"cat\", str2 = \"dog\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"zzzzzz\", str2 = \"zzzzzz\")",
        "canMakeSubsequence(str1 = \"hello\", str2 = \"aeiou\")",
        "canMakeSubsequence(str1 = \"zaaaz\", str2 = \"zzzzz\")",
        "canMakeSubsequence(str1 = \"elvis\", str2 = \"elvis\")",
        "canMakeSubsequence(str1 = \"naa\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"zxzxzxzx\", str2 = \"z\")"
    ],
    "sample_268": [
        "minSum(nums1 = [2, 3, 1, 5], nums2 = [1, 2, 3, 7])",
        "minSum(nums1 = [0, 2, 1, 5], nums2 = [3, 2, 1])",
        "minSum(nums1 = [3, 1, 2, 4], nums2 = [6, 3, 5])",
        "minSum(nums1 = [0, 3, 4], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3, 4, 0, 0, 0, 0, 5], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minSum(nums1 = [2, 0, 4], nums2 = [1, 5, 6])",
        "minSum(nums1 = [0,0,0,0,0,0], nums2 = [2,3,4])",
        "minSum(nums1 = [0, 2, 3], nums2 = [2, 1, 1])",
        "minSum(nums1 = [0, 3, 4], nums2 = [2, 3, 5])",
        "minSum(nums1 = [0, 1, 4, 4, 0], nums2 = [4, 4, 1, 0, 0])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5]], k = 1)",
        "countPairs(coordinates = [[0, 1], [1, 0], [2, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [0, 2], [1, 2], [2, 2]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 1], [3, 1], [1, 2], [2, 2], [3, 2]], k = 3)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2], [2, 1], [2, 3], [3, 2]], k = 3)",
        "countPairs(coordinates = [[1, 2], [2, 1], [2, 2], [1, 1], [2, 0], [0, 2], [0, 1], [1, 0], [0, 0]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8]], k = 3)",
        "countPairs(coordinates = [[2, 0], [0, 2], [1, 1], [2, 2], [1, 0], [0, 1], [0, 0], [2, 1]], k = 3)",
        "countPairs(coordinates = [[1, 0], [2, 3], [3, 1], [4, 0], [1, 4]], k = 3)",
        "countPairs(coordinates = [[1, 1], [1, 1], [3, 4], [5, 5], [4, 2], [2, 4], [4, 4], [5, 3], [1, 2], [1, 1]], k = 2)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"cat\",\"bat\",\"rat\",\"rat\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abd\", \"abc\"])",
        "maximumNumberOfStringPairs(words=[\"abc\", \"bcd\", \"bcd\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"bcde\", \"acbd\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"orange\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dbca\", \"a\", \"bc\", \"ab\", \"c\", \"cab\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [10, 10, -10, -10])",
        "maxStrength(nums = [2, 3, -4, 5, 6])",
        "maxStrength(nums = [-20, -10, 0, 5, 10])",
        "maxStrength(nums = [-2, -3, -4, -5, -6, -1])",
        "maxStrength(nums = [3, 4, 10, -5, -1])",
        "maxStrength(nums = [10, 1, -5, 20, 40, -30])",
        "maxStrength(nums = [-20, -40, -60, 8, 10, 12])",
        "maxStrength(nums = [-1, 2, 3, 4, -2, -1, -2, -2])",
        "maxStrength(nums = [-20, 3, -1, 4, -5, 2, -10])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices=[1, 3, 5])",
        "minimumCoins(prices = [1,3,5,6])",
        "minimumCoins(prices = [1, 3, 2, 8, 4])",
        "minimumCoins(prices = [1, 5, 6, 9])",
        "minimumCoins(prices = [0, 2, 3, 4])",
        "minimumCoins(prices = [1, 3, 4, 2, 5, 8, 6])",
        "minimumCoins(prices = [1, 3, 4, 10, 2, 3, 5])",
        "minimumCoins(prices = [1, 3, 5, 10, 20])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1,1,3,3,3,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,2,1,3])",
        "minLengthAfterRemovals(nums = [3,2,2,3,3,4,2,3,1,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 1, 3, 2, 1, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 2, 5, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"
    ],
    "sample_318": [
        "buyChoco(prices = [2, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [2, 3, 4], money = 7)",
        "buyChoco(prices = [2, 4, 1, 2], money = 10)",
        "buyChoco(prices = [1,2,3,4], money = 5)",
        "buyChoco(prices = [2,3,5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices=[2, 5, 3, 10], money=5)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"3\", \"4\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"4\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"next\", \"1\", \"prev\", \"5\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"0\", \"prev\", \"1\", \"9\", \"9\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"next\", \"3\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"next\", \"1\", \"prev\", \"2\", \"next\"])",
        "lastVisitedIntegers(words = [\"5\",\"3\",\"1\",\"3\",\"5\",\"1\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums=[1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 3, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 1])",
        "sumCounts(nums = [1, 3, 4, 5])",
        "sumCounts(nums=[1, 3, 5, 7])",
        "sumCounts(nums = [2, 2, 2, 2, 3, 4])",
        "sumCounts(nums = [1, 4, 16, 25, 16, 1])",
        "sumCounts(nums = [1, 2, 2, 3, 1, 4, 3])",
        "sumCounts(nums = [0, 1, 2, 2, 3, 4, 4, 5, 5, 5])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [3, 6], moveTo = [5, 8])",
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [8, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 6], moveTo = [4, 8])",
        "relocateMarbles(nums = [2, 4, 5, 6, 8, 9], moveFrom = [4, 5], moveTo = [6, 7])",
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [0, 1], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [2, 3, 4], moveTo = [5, 6, 7])",
        "relocateMarbles(nums = [2, 3, 5, 7, 8, 9], moveFrom = [2, 8], moveTo = [3, 5])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9, 10], moveFrom = [1, 8, 9], moveTo = [6, 5])",
        "relocateMarbles(nums = [2, 8, 5, 9, 5, 6], moveFrom = [1, 3, 4], moveTo = [0, 3, 4])",
        "relocateMarbles(nums = [3, 5, 6, 8, 9, 10, 11, 15], moveFrom = [10, 11], moveTo = [15, 16])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"hello\", str2 = \"world\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"xy\", str2 = \"xz\")",
        "canMakeSubsequence(str1 = \"axyz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"baz\")",
        "canMakeSubsequence(str1 = \"axc\", str2 = \"aaz\")",
        "canMakeSubsequence(str1 = \"zzabyycdxx\", str2 = \"zx\")",
        "canMakeSubsequence(str1 = \"aac\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"hello\", str2 = \"zlc\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"a\", \"b\", \"c\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"cat\"], x = \"cat\")",
        "findWordsContaining(words = [\"bread\", \"butter\", \"cheese\"], x = \"eat\")",
        "findWordsContaining(words = [\"cherry\", \"apple\", \"blueberry\", \"apricot\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"python\", \"pythons\", \"phython\"], x = \"thon\")",
        "findWordsContaining(words = [\"rain\", \"rainy\", \"rainmen\"], x = \"ain\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"man\", \"fox\", \"cow\"], x = \"c\")",
        "findWordsContaining(words = [\"a\", \"xxz\", \"x\", \"xx\"], x = \"x\")",
        "findWordsContaining(words = [\"bad\", \"pest\", \"bad\", \"kind\"], x = \"bad\")",
        "findWordsContaining(words = [\"victory\", \"kill\", \"obey\"], x = \"bey\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])",
        "matrixSum(nums = [[1, 2, 3, 4], [5, 6, 7, 8]])",
        "matrixSum(nums = [[1,2,3], [1,2,3], [1,2,3]])",
        "matrixSum(nums = [[1, 2, 3], [3, 2, 1], [4, 5, 6]])",
        "matrixSum(nums=[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "matrixSum(nums = [[1, 1, 1, 0, 1], [1, 0, 1, 1, 0], [1, 1, 1, 1, 1], [1, 0, 0, 1, 1], [1, 1, 1, 1, 1]])",
        "matrixSum(nums = [[2, 1, 9, 5], [3, 5, 7, 4], [1, 0, 3, 8], [5, 6, 1, 2]])",
        "matrixSum(nums = [[1, 3, 11], [2, 5, 13], [4, 8, 16]])"
    ],
    "sample_316": [
        "buyChoco(a = [2, 5], money = 10)",
        "buyChoco(a = [10, 20], money = 15)",
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [2, 3, 5], money = 10)",
        "buyChoco(a = [5, 3], money = 10)",
        "buyChoco(a = [4, 2], money = 6)",
        "buyChoco(a = [1, 3, 4], money = 5)",
        "buyChoco(a= [2, 3], money= 5)",
        "buyChoco(a = [4, 6], money = 10)",
        "buyChoco(a = [1, 3, 4], money = 7)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 10])",
        "minGroupsForValidAssignment(nums = [1, 2])",
        "minGroupsForValidAssignment(nums = [1,3,2])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 3, 3, 6])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 3, 3, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 2, 5, 2, 1, 6])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [3,2,5,4,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,5,5,5,7])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 3, 5, 2, 4])",
        "minimumRightShifts(nums = [1, 3, 5, 4, 2])",
        "minimumRightShifts(nums = [2,1])",
        "minimumRightShifts(nums = [0, 1, 1, 2, 3])",
        "minimumRightShifts(nums=[3, 5, 9])",
        "minimumRightShifts(nums = [1,2,3,1,2,2])",
        "minimumRightShifts(nums = [2, 3, 1, 1, 2, 0, 2])",
        "minimumRightShifts(nums = [3, 5, 9, 10, 12])",
        "minimumRightShifts(nums = [4, 10, 3, 7, 6])",
        "minimumRightShifts(nums = [9, 11, 10, 9, 11])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1,2,3,4])",
        "maxStrength(nums = [1, 2, 4, 8, 16])",
        "maxStrength(nums = [5, 10, 15, 20])",
        "maxStrength(nums = [3, 4, 5, 6, 7])",
        "maxStrength(nums = [10, 2, 5, 6, 3])",
        "maxStrength(nums = [3, 5, 9])",
        "maxStrength(nums = [2, 5, 4, 3])",
        "maxStrength(nums = [1, 5, 10, 20])",
        "maxStrength(nums = [2, 5, 7, 11])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n = 5, limit = 5)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n=10, limit=10)",
        "distributeCandies(n = 3, limit = 10)",
        "distributeCandies(n=3, limit=5)",
        "distributeCandies(n = 2, limit = 10)",
        "distributeCandies(n = 20, limit = 5)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minLengthAfterRemovals(nums = [1,1,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,2,2,2,1])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,2])",
        "minLengthAfterRemovals(nums = [3,1,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [3,4,3,3,3,3,3,3])",
        "minLengthAfterRemovals(nums = [4,4,4,1,1,1,3,3,3])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"n\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"how\", \"are\", \"you\"], x = \"lo\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pineapple\"], x = \"e\")",
        "findWordsContaining(words = [\"A\", \"B\", \"C\", \"D\"], x = \"C\")",
        "findWordsContaining(words = [\"apple\", \"apple\", \"banana\", \"apple\"], x = \"apple\")",
        "findWordsContaining(words = [\"cat\", \"catnip\", \"bat\"], x = \"cat\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"peach\"], x = \"cherry\")",
        "findWordsContaining(words = [\"be\", \"banana\", \"pear\"], x = \"na\")",
        "findWordsContaining(words = [\"rabbit\", \"cow\", \"dog\"], x = \"e\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 1, 1], [0, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 2, 3], [2, 2, 3], [3, 2, 3]])",
        "findChampion(grid = [[0,1,1], [1,1,0], [0,1,1]])",
        "findChampion(grid = [[1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 0, 1, 0], [1, 1, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[2, 3, 4], [5, 6, 7], [8, 10, 12]])",
        "findChampion(grid=[[3, 2, 4], [5, 3, 1], [2, 1, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1,1,0,1])",
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [2, 1, 3, 4])",
        "maxSubarrays(nums = [4,1,0,1,0,1])",
        "maxSubarrays(nums = [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"azcbobobegghakl\", k = 1)",
        "beautifulSubstrings(s = \"abaac\", k = 4)",
        "beautifulSubstrings(s = \"abaabaaab\", k = 3)",
        "beautifulSubstrings(s = \"eggy\", k = 2)",
        "beautifulSubstrings(s = \"bvc\", k = 2)",
        "beautifulSubstrings(s = \"laiii\", k = 3)",
        "beautifulSubstrings(s = \"sowkvev\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2])",
        "minimumSeconds(nums = [1, 2])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8])",
        "minimumSeconds(nums = [30, 15, 60, 75, 45, 15, 15])",
        "minimumSeconds(nums = [2, 5, 9, 3, 4, 7, 10, 6])",
        "minimumSeconds(nums=[2, 4, 5])",
        "minimumSeconds(nums = [2, 3, 6, 7, 9, 11, 13])",
        "minimumSeconds(nums = [2,1,2,4,2,5,0,4])"
    ],
    "sample_327": [
        "isFascinating(n = 3)",
        "isFascinating(n = 2)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 10)",
        "isFascinating(n = 12345)",
        "isFascinating(n = 14)",
        "isFascinating(n=23)",
        "isFascinating(n=100)",
        "isFascinating(n = 213456789)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,2,2,2], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 9, 3, 4, 2], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,2,5,2,1,7], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,6,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [4,3,5,7], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 4, 7, 3, 8], target = 9)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])",
        "matrixSum(nums = [\n    [1, 2, 3], \n    [4, 5, 6], \n    [7, 8, 9]\n])",
        "matrixSum(nums = [[4, 5], [1, 2], [7, 8]])",
        "matrixSum(nums=[[5, 1], [2, 3], [4, 6]])",
        "matrixSum(nums = [[2, 2, 2, 2], [1, 2, 2, 1]])",
        "matrixSum(nums = [[5, 6, 3], [4, 5, 7], [3, 5, 1]])",
        "matrixSum(nums = [[-10, -20, -30], [0, 10, 20], [20, 30, 40]])",
        "matrixSum(nums = [[2, 3, 4, 6, 10], [5, 8], [12, 1, 5], [7, 9, 3]])"
    ],
    "sample_326": [
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 12)",
        "isFascinating(n = 5)",
        "isFascinating(n = 1)",
        "isFascinating(n = 23)",
        "isFascinating(n = 25)",
        "isFascinating(n = 123456)",
        "isFascinating(n = 2222)",
        "isFascinating(n = 352)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 1]])",
        "findChampion(grid=[[0, 0], [0, 0]])",
        "findChampion(grid = [[1,0,0],[0,0,0],[0,0,0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 2, 0], [3, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSum(nums = [10, 2, 5, 2, 8, 1, 5])",
        "minimumSum(nums = [2, 6, 8, 10])",
        "minimumSum(nums = [1,2,1,3,4])",
        "minimumSum(nums=[1, 7, 5, 2, 1, 4])",
        "minimumSum(nums = [6, -3, -8, 1, 5, -1, 0])"
    ],
    "sample_450": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aaab\")",
        "minChanges(s = \"aaab\")",
        "minChanges(s = \"abacaba\")",
        "minChanges(s = \"abacaba\")",
        "minChanges(s=\"abaac\")",
        "minChanges(s = \"abccca\")",
        "minChanges(s=\"adbaac\")",
        "minChanges(s = \"00010010\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"1101\", s2 = \"0010\", x = 2)",
        "minOperations(s1 = \"1110\", s2 = \"0001\", x = 2)",
        "minOperations(s1 = \"01100\", s2 = \"00011\", x = 2)",
        "minOperations(s1 = \"111\", s2 = \"011\", x = 3)",
        "minOperations(s1 = \"0100\", s2 = \"0111\", x = 5)",
        "minOperations(s1 = \"100110\", s2 = \"10101001\", x = 2)",
        "minOperations(s1 = \"11011101\", s2 = \"11101011\", x = 5)",
        "minOperations(s1 = \"1100010000\", s2 = \"0111000011\", x = 2)",
        "minOperations(s1 = \"101111011001010111\", s2 = \"111111100000100110\", x = 4)",
        "minOperations(s1 = \"01010101101101000111\", s2 = \"10110100011101101001\", x = 15)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 1, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 1, y = 2, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 2, y = 6, z = 2)",
        "longestString(x = 3, y = 6, z = 10)",
        "longestString(x = 5, y = 6, z = 1)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [3, 1, 2, 4])",
        "maxSubarrays(nums = [0, 1, 0])",
        "maxSubarrays(nums = [2, 1, 2, 4, 3])",
        "maxSubarrays(nums = [1, 1, 1, 2, 3])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1, 0, 0])",
        "maxSubarrays(nums = [1, 0, 0, 1, 1, 1, 0, 0, 0, 1])"
    ],
    "sample_306": [
        "countSeniors(details = [\"My name is xyz and my age is 17\", \"My name is abc and my age is 16\"])",
        "countSeniors(details = [\"<NAME>, 1969, 23, 34\", \"<NAME>, 1958, 35, 30\"])",
        "countSeniors(details = [\"13300010500104000\", \"13300010500105000\"])",
        "countSeniors(details = [\"<NAME>, 1987-01-11\", \"<NAME>, 1984-04-16\", \"<NAME>, 1980-07-16\", \"<NAME>, 1985-05-17\"])",
        "countSeniors(details = [\"<NAME>,55,1800\",\"<NAME>,35,1900\",\"<NAME>,45,1900\",\"<NAME>,25,1960\",\"<NAME>,25,1960\"])",
        "countSeniors(details = [\"Name,Father,Mother,Age,Sex,Address,City,State,Country,Mobile,Email,Nationality,Education,Occupation,Income,MaritalStatus,FamilyType,FamilyValue,Children\"])",
        "countSeniors(details = [\"143-45-8787\", \"45-36-6793\", \"28-15-4452\"])",
        "countSeniors(details = [\"Mary, 1987-10-10, F, 22, Male, 1980-05-28, 4455551234\", \"James, 1999-03-01, M, 45, Male, 1978-12-09, 5555551234\"])",
        "countSeniors(details = [\"[name], [age], [city], [state], [postalcode], [country], [phone], [fax], [email], [password], [id]\", \"Wang, 61, Buffalo, NY, 14202, USA, (716) 782-0900, (716) 782-0900, <EMAIL>, password, <PASSWORD>\", \"Jin, 65, Houston, TX, 77060, USA, (832) 854-1212, (832) 854-1213, <EMAIL>, password, <PASSWORD>\"])",
        "countSeniors(details = [\"<NAME> 836-837-6363 2004-07-05 65 415267744554 2010-02-01 65 515267744554 2004-07-05\", \"<NAME> 999-888-7777 2014-11-25 20 415267744554 2014-11-25 20 515267744554 2014-11-25\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 0, 1, 0, 1, 1])",
        "maxSubarrays(nums = [0, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1, 0, 0, 0, 0, 0])",
        "maxSubarrays(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [3, 8, 9, 5, 6], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [3, 5, 6, 8, 9], moveFrom = [3, 6], moveTo = [5, 8])",
        "relocateMarbles(nums = [3, 8, 9, 7, 6, 5], moveFrom = [0, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [3, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 3, 2, 5, 4, 6, 8, 7, 9], moveFrom = [3, 4], moveTo = [9, 8])",
        "relocateMarbles(nums = [3, 4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [5, 9])",
        "relocateMarbles(nums = [5, 9, 8, 6], moveFrom = [2, 1], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 3, 5, 7, 8, 6], moveFrom = [5, 8], moveTo = [7, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 5, 8, 9], moveTo = [8, 6, 5, 9])",
        "relocateMarbles(nums = [5, 3, 7, 2, 6, 4, 8, 9], moveFrom = [2, 4], moveTo = [9, 3])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xyz\", s3 = \"xyz\")",
        "findMinimumOperations(s1=\"abc\", s2=\"def\", s3=\"ghi\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"n\", s3 = \"a\")",
        "findMinimumOperations(s1=\"abcd\", s2=\"dcba\", s3=\"cdba\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"dog\", s3 = \"chair\")",
        "findMinimumOperations(s1 = \"aabbcc\", s2 = \"ababab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"axyz\", s2 = \"abc\", s3 = \"zyx\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nzb\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,2,2,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7])",
        "minLengthAfterRemovals(nums = [4,2,4,5,6])",
        "minLengthAfterRemovals(nums = [1,1,1,3,3,3,7])",
        "minLengthAfterRemovals(nums = [1,1,1,1,2])",
        "minLengthAfterRemovals(nums = [0,0,0,0,0,0])",
        "minLengthAfterRemovals(nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,",
        "minLengthAfterRemovals(nums = [0,1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [2,2,1,2,1,2,1])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 2], [4, 5, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 4, 5], [3, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 50], [3, 4, 100]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [2, 4, 3], [3, 4, 6], [1, 2, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 20], [2, 4, 10], [3, 4, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 5, 7], [3, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 50], [2, 4, 70], [3, 5, 10], [1, 5, 100]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 10], [1, 3, 20], [2, 4, 15], [3, 4, 25]])",
        "maximizeTheProfit(n = 5, offers = [[0, 4, 1], [1, 3, 2], [1, 2, 5], [2, 5, 10], [3, 4, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2], [2, 4, 5], [1, 3, 2], [5, 6, 7], [2, 4, 6], [3, 5, 7]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5], m = 9)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5,6,7], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 10], m = 9)",
        "canSplitArray(nums = [5, 2, 1, 2, 5, 2, 1, 2, 5], m = 10)",
        "canSplitArray(nums = [2,1,5,1,2,2], m = 4)",
        "canSplitArray(nums=[2,1,4], m = 3)",
        "canSplitArray(nums = [2, 1, 2, 5, 2, 1, 2, 4], m = 9)",
        "canSplitArray(nums = [3, 1, 1, 3, 3, 1, 1], m = 4)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5, 0, 0, 0, 0], k = 3)",
        "checkArray(nums = [1, 5, 0, -3], k = 3)",
        "checkArray(nums = [2, 3, 1, -6, 8], k = 3)",
        "checkArray(nums = [3, 2, 1, 5, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], k = 5)",
        "checkArray(nums = [1, 3, 2, 1, 2, 3], k = 3)",
        "checkArray(nums = [5, 3, 6, 7, 4, 2], k = 3)",
        "checkArray(nums = [3,1,1,2,3,1,1,2,3], k = 2)",
        "checkArray(nums = [5, -7, 8, 2], k = 4)",
        "checkArray(nums = [2, 5, 0, -1, 6, 10], k = 5)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "maximumBeauty(nums = [5, 4, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [1, 1, 4, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 6, 7], k = 3)",
        "maximumBeauty(nums = [4, 1, 3, 2], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 3)",
        "maximumBeauty(nums = [2, 1, 4, 6, 3], k = 1)",
        "maximumBeauty(nums = [1,2,4,2,5,7,8], k = 1)",
        "maximumBeauty(nums = [2, 4, 8, 16, 19], k = 2)",
        "maximumBeauty(nums = [1, 5, 3, 6, 7, 10, 8], k = 2)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"abc\", \"abc\", \"abc\"], separator = \"abc\")",
        "splitWordsBySeparator(words = [\"\", \"a\", \"b\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"abc,def\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"b\", \"a\", \"n\", \"a\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"Apple\", \"Banana\", \"Orange\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"abc\"], separator = \"bc\")",
        "splitWordsBySeparator(words = [\"\", \"a\", \"bc\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"is\", \"this\", \"a\", \"test\"], separator = \"i\")",
        "splitWordsBySeparator(words = [\"py\", \"100\", \"1000\"], separator = \"0\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [2, 3, 4])",
        "countWays(nums=[3,2,1])",
        "countWays(nums = [1, 10, 5])",
        "countWays(nums = [2, 3, 4, 5, 6, 8])",
        "countWays(nums = [1,2,2,4,5,6])",
        "countWays(nums = [5, 5, 3, 3, 1])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,3,1])",
        "minimumIndex(nums = [1, 3, 2])",
        "minimumIndex(nums = [1,1,1,1,1])",
        "minimumIndex(nums = [1, 3, 2, 2, 3, 1])",
        "minimumIndex(nums = [1,2,3,4,1,2,3,4,1,2,3,4])",
        "minimumIndex(nums=[1, 2, 1, 2, 3, 1])",
        "minimumIndex(nums = [2,2,2,3,1])",
        "minimumIndex(nums = [1,2,1,1,3,4])",
        "minimumIndex(nums = [1,1,3,1,3,1,1])",
        "minimumIndex(nums = [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,3]])",
        "numberOfPoints(nums = [[0,2],[5,10],[13,23],[24,25]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[2,5],[1,6]])",
        "numberOfPoints(nums = [[1,3],[5,6]])",
        "numberOfPoints(nums = [[0, 1], [1, 1], [1, 0]])",
        "numberOfPoints(nums = [[1, 1], [3, 10], [1, 1], [2, 2], [3, 3]])",
        "numberOfPoints(nums = [[2, 5], [2, 4], [2, 3]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,0])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [1,2,1,3,2,5])",
        "semiOrderedPermutation(nums = [3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [2, 1, 2, 2, 2, 1])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8,9,10,11,12])",
        "semiOrderedPermutation(nums = [2, 6, 3, 8, 1, 5])",
        "semiOrderedPermutation(nums = [1,1,1,0,0,0,1,1,0,1,1,1,1,0,1])",
        "semiOrderedPermutation(nums = [5,3,2,6,7,4])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 2)",
        "minimumPossibleSum(n = 1, target = 10)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 6, target = 11)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [3, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 1, 3, 4, 5])",
        "minimumIndex(nums = [2, 2, 1, 2, 3, 2])",
        "minimumIndex(nums = [0, 1, 0, 0])",
        "minimumIndex(nums = [1, 1, 1, 1, 2, 3, 3])",
        "minimumIndex(nums = [1, 0, 0, 0, 1, 2, 1, 2, 3])",
        "minimumIndex(nums = [4, 4, 2, 4, 2, 2, 4, 2, 1])",
        "minimumIndex(nums = [10, 12, 12, 3, 4, 10, 10])",
        "minimumIndex(nums = [4, 1, 4, 1, 3, 3, 4, 1, 3, 3, 3, 3, 2, 2, 3, 4, 1, 2])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n=4, k=6)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[3, 10], [2, 5], [7, 12]])",
        "numberOfPoints(nums = [[1, 2], [1, 5], [3, 4], [3, 6], [7, 8]])",
        "numberOfPoints(nums = [[-2, 0], [0, 0], [2, 0]])",
        "numberOfPoints(nums = [[1, 2], [3, 3], [5, 7], [8, 8]])",
        "numberOfPoints(nums = [[0, 2], [1, 3], [3, 5], [4, 6], [5, 7]])",
        "numberOfPoints(nums = [[2, 10], [3, 20], [21, 21], [1, 1], [20, 20]])",
        "numberOfPoints(nums = [[-5, 20], [10, 25], [3, 20], [5, 20], [12, 23], [11, 18]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [4, 2, 3, 0, 3, 1, 2], target = 3)",
        "maximumJumps(nums = [4, 2, 3, 0, 3, 1, 2], target = 3)",
        "maximumJumps(nums = [4, 2, 1, 0, 3], target = 1)",
        "maximumJumps(nums = [3, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [3, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [4, 2, 1, 0, 3, 5, 6, 7], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 1, 4], target = 4)"
    ],
    "sample_173": [
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 10, k = 10)",
        "minimumSum(n = 6, k = 5)",
        "minimumSum(n=4, k=6)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3], m = 4)",
        "canSplitArray(nums = [1,2,3], m = 6)",
        "canSplitArray(nums = [1, 5, 7], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1,1], m = 2)",
        "canSplitArray(nums = [1,5,11], m = 22)",
        "canSplitArray(nums = [2,3,5,6], m = 8)",
        "canSplitArray(nums = [1,4,4,5,6], m = 10)",
        "canSplitArray(nums = [3,5,6,7], m = 12)",
        "canSplitArray(nums = [2,1,4,1,0,5], m = 4)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [2, 4, 3]])",
        "maximizeTheProfit(n = 2, offers = [[1, 2, 5], [2, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 2], [3, 5, 3], [1, 5, 5], [5, 5, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 2], [3, 6, 5], [2, 8, 4]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 6], [5, 9, 7], [3, 6, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 4, 10], [3, 5, 20], [1, 7, 40], [2, 6, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [3, 5, 20], [4, 4, 5], [5, 6, 15], [6, 8, 15]])",
        "maximizeTheProfit(n = 8, offers = [[5, 8, 20], [1, 6, 13], [2, 3, 10], [8, 8, 15]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 4], [1, 5, 7], [3, 5, 7], [2, 4, 6], [2, 6, 9], [4, 6, 11], [1, 10, 20]])",
        "maximizeTheProfit(n = 10, offers = [[5, 8, 3], [4, 9, 6], [2, 10, 1], [1, 11, 10], [3, 12, 8], [5, 15, 15], [6, 14, 9]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, -1, 1, -1], k = 1)",
        "checkArray(nums = [2, -1, 1, 2, 2, -1], k = 2)",
        "checkArray(nums = [-3, 1, 2, -3, 4], k = 3)",
        "checkArray(nums = [1,2,3,4,5,1], k = 3)",
        "checkArray(nums = [2, -1, -2, 1], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [-1, -1, 1], k = 2)",
        "checkArray(nums = [-2, 5, -1, 0, -3], k = 4)",
        "checkArray(nums = [5, 7, -2, -3, 4], k = 3)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [3,2,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 1, 3, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1, 1, 1, 1], k = 1)",
        "longestEqualSubarray(nums = [0,1,0,1,0,1,0], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 4, 1, 3, 2], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,3,4,4,5,5,4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 3, 4, 2, 1, 1, 3, 2], k = 5)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [3, 1]])",
        "colorTheArray(n = 3, queries = [[1, 0], [0, 1], [0, 1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[0,0]])",
        "colorTheArray(n = 2, queries = [[1, 0], [0, 0]])",
        "colorTheArray(n=3, queries=[[0, 0], [1, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [3, 4], [3, 2], [1, 3]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 1], [0, 1], [1, 1], [2, 1], [3, 1]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[0,3],[2,4],[2,1]])",
        "colorTheArray(n = 5, queries = [[3, 2], [1, 3], [0, 4], [1, 2], [2, 3], [3, 3]])"
    ],
    "sample_55": [
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"aaaab\")",
        "smallestString(s = \"aaabb\")",
        "smallestString(s = 'c')",
        "smallestString(s = 'aabbcc')",
        "smallestString(s = \"abacadae\")",
        "smallestString(s = \"aba\")",
        "smallestString(s=\"kdsbnc\")",
        "smallestString(s = \"adad\")",
        "smallestString(s = \"ycm\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1,2,2,4,2,2], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 4, 2, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 4, 2, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 6, 4, 5, 9, 8], threshold = 5)",
        "longestAlternatingSubarray(nums = [9,2,3,4], threshold = 6)",
        "longestAlternatingSubarray(nums = [1,2,4,2,5,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [4,2,5,3], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,17,5,10,13,15,10,5,16,8], threshold = 11)",
        "longestAlternatingSubarray(nums = [4,2,5,3,1], threshold = 0)",
        "longestAlternatingSubarray(nums = [2, 4, 7, 2, 5, 10], threshold = 1)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,4,7], threshold = 4)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 3, 2, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 3, 2, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 6, 4, 10, 9, 7], threshold = 5)",
        "longestAlternatingSubarray(nums = [3, 5, 1, 4], threshold = 10)",
        "longestAlternatingSubarray(nums = [5,2,4,5,6,7], threshold = 4)",
        "longestAlternatingSubarray(nums = [9, 9, 9, 1, 1, 1, 1, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [0, 2, 0, 2, 0, 1, 0], threshold = 2)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 1, 2])",
        "distinctDifferenceArray(nums = [1, 3, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 4, 2, 3, 5])",
        "distinctDifferenceArray(nums = [3, 1, 2, 1, 4, 3])",
        "distinctDifferenceArray(nums = [1, 4, 1, 1, 3, 2])",
        "distinctDifferenceArray(nums = [3, 3, 1, 4, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4, 5, 3, 2, 1])"
    ],
    "sample_22": [
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABABAB\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABACDABA\")",
        "minLength(s = \"A\")",
        "minLength(s = \"ABCABD\")",
        "minLength(s = \"AAAB\")",
        "minLength(s = \"ABBCDCDC\")",
        "minLength(s = \"xyAABBBCCCDDEEE\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"banana\")",
        "minimumCost(s = \"banana\")",
        "minimumCost(s = \"abaca\")",
        "minimumCost(s = \"aabccbb\")",
        "minimumCost(s=\"abc\")",
        "minimumCost(s=\"abc\")",
        "minimumCost(s = \"baa\")",
        "minimumCost(s = \"abbca\")",
        "minimumCost(s = \"hari\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 5, 11, 5], m = 20)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 7], m = 6)",
        "canSplitArray(nums = [2, 3, 5], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7], m = 5)",
        "canSplitArray(nums = [2, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 1, 2, 2, 3], m = 4)",
        "canSplitArray(nums = [3, 5, 2, 1, 6, 4], m = 7)",
        "canSplitArray(nums = [1, 5, 8, 12, 15, 16, 21], m = 22)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 0])",
        "doesValidArrayExist(derived = [3, 2, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [2, 1, 2, 0])",
        "doesValidArrayExist(derived = [1,2,3,4,5,6,7,8,8])",
        "doesValidArrayExist(derived = [2,1,3,4,4])"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3,4,5,6,7], k = 3)",
        "checkArray(nums = [1, 1, 1], k = 0)",
        "checkArray(nums = [1, 1, 1], k = 0)",
        "checkArray(nums = [5, 4, 3, 2, 1], k = 1)",
        "checkArray(nums = [1,3,1,2,4,3], k = 3)",
        "checkArray(nums = [1, 10, 4, 4, 2], k = 5)",
        "checkArray(nums = [1, 4, 5, 2, 3], k = 3)",
        "checkArray(nums = [1,2,10], k = 5)",
        "checkArray(nums = [1,2,10,5,11], k = 2)",
        "checkArray(nums = [1, 10, 4, 4, 5, 9, 2], k = 2)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 4, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 8, 9, 10], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 8, 0], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 6, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 1, 0, 0, 1, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 3, 0, 1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 13], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours=[4, 5, 6, 7, 8], target=10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 13, 14, 15, 16, 16, 17, 17, 18, 19, 20], target = 16)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 0, 0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 0, 0, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 2, 3, 5, 5, 7], k = 4)",
        "sumIndicesWithKSetBits(nums = [1,1,0,1,1,1,0,1,1], k = 2)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8], k = 5)",
        "maximumBeauty(nums = [1,2,2,3,4,5,6], k = 2)",
        "maximumBeauty(nums = [1, 11, 2, 9], k = 3)",
        "maximumBeauty(nums = [2,3,4,1], k = 2)",
        "maximumBeauty(nums = [1,2,4,5,6,7,8], k = 4)",
        "maximumBeauty(nums = [1,2,2,2,10], k = 1)",
        "maximumBeauty(nums = [3,1,4,2,2,2,1,2], k = 3)",
        "maximumBeauty(nums = [2, 2, 2, 2, 10, 3, 4, 4, 5, 5, 5, 6], k = 1)",
        "maximumBeauty(nums = [5, 1, 3, 3, 3, 5, 6, 10, 12, 3, 5], k = 4)"
    ],
    "sample_205": [
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"7\")",
        "minimumOperations(num = \"25000\")",
        "minimumOperations(num = \"100100\")",
        "minimumOperations(num = \"220\")",
        "minimumOperations(num
        "minimumOperations(num = \"403\")",
        "minimumOperations(num = \"2512500000000000000000\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"0110\")",
        "minimumOperations(s = \"00110011\")",
        "minimumOperations(s = \"002500\")",
        "minimumOperations(s = \"00000000000000000000\")",
        "minimumOperations(s = \"010101\")",
        "minimumOperations(s = \"01001000\")",
        "minimumOperations(s = \"111125\")",
        "minimumOperations(s = \"1000200\")",
        "minimumOperations(s = \"000011001\")",
        "minimumOperations(s = \"00001025507575\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [1, 2, 3, 2, 1])",
        "semiOrderedPermutation(nums = [1,3,2,4,5,6,7])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 1])",
        "semiOrderedPermutation(nums = [4, 5, 1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 1, 3, 1])",
        "semiOrderedPermutation(nums = [1, 3, 5, 6, 7])",
        "semiOrderedPermutation(nums = [1,3,2,4,2])",
        "semiOrderedPermutation(nums = [1, 1, 0, 1, 1, 0, 1, 0, 1, 1])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LURDL\")",
        "furthestDistanceFromOrigin(moves = \"LURDLU\")",
        "furthestDistanceFromOrigin(moves = \"UD\")",
        "furthestDistanceFromOrigin(moves = \"LL\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"UDDDUDUU\")",
        "furthestDistanceFromOrigin(moves = \"R\")",
        "furthestDistanceFromOrigin(moves = \"RRDDD\")",
        "furthestDistanceFromOrigin(moves = \"LRLLLRLLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"RRURD\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"b\", \"a\", \"n\"], s = \"banana\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"m\", \"q\", \"p\", \"z\"], s = \"mqz\")",
        "isAcronym(words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], s = \"abcdefg\")",
        "isAcronym(words = [\"app\", \"apple\", \"apple\"], s = \"app\")",
        "isAcronym(words = [\"Python\", \"Programming\", \"Is\", \"Fun\"], s = \"PIF\")",
        "isAcronym(words = [\"banana\", \"blue\"], s = \"b\")",
        "isAcronym(words = [\"apple\", \"melons\"], s = \"AP\")",
        "isAcronym(words = ['mercury', 'pluto', 'neptune'], s = 'mer')",
        "isAcronym(words = [\"Abc\", \"Coo\", \"Xyza\", \"Coo\"], s = \"CooXyza\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [3, 1, 2, 3], modulo = 5, k = 3)",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 1000000007, k = 5)",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [12, 28, 46, 32])",
        "countBeautifulPairs(nums = [2, 4, 6, 8, 10, 3])",
        "countBeautifulPairs(nums = [11, 22, 33, 44, 55, 66, 77, 88, 99])",
        "countBeautifulPairs(nums = [3, 1, 2, 4])",
        "countBeautifulPairs(nums = [1,1,1])",
        "countBeautifulPairs(nums = [1,2,3,4,5,11,12,13,14])",
        "countBeautifulPairs(nums = [1111111, 2233445])",
        "countBeautifulPairs(nums = [24, 39, 44, 78])",
        "countBeautifulPairs(nums = [12,34,56,23,10,98,32,11])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [1,1,1,1,1], target = 3)",
        "maximumJumps(nums = [1, 3, 5, 8, 9], target = 2)",
        "maximumJumps(nums = [0,1,2,3,4], target = 5)",
        "maximumJumps(nums = [4, 2, 3], target = 1)",
        "maximumJumps(nums = [1,2,3,5,6,1,2], target = 3)",
        "maximumJumps(nums = [-5,0,1,0,-1], target = 2)",
        "maximumJumps(nums=[-3,0,2,4,5,1,4], target=1)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 2, 1, 3, 2])",
        "countBeautifulPairs(nums = [1, 17, 57, 100, 111])",
        "countBeautifulPairs(nums = [1,2,3,4,5,6])",
        "countBeautifulPairs(nums = [1, 2, 4, 7, 8, 14, 16])",
        "countBeautifulPairs(nums = [2, 5, 6, 3, 1])",
        "countBeautifulPairs(nums = [1, 2, 4, 5, 7, 8, 12, 16, 17, 24])",
        "countBeautifulPairs(nums = [12, 3, 2, 5, 7, 8, 6, 1, 4])",
        "countBeautifulPairs(nums = [11, 24, 36, 72])",
        "countBeautifulPairs(nums = [12, 34, 15, 111])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABACDABA\")",
        "minLength(s = \"ABCDABCDABCDABCDABCDABCD\")",
        "minLength(s = \"ABABABCDABABAB\")",
        "minLength(s = \"ABAAABABCD\")"
    ],
    "sample_150": [
        "finalString(s = \"banana\")",
        "finalString(s = \"something\")",
        "finalString(s = \"rithmschool\")",
        "finalString(s = 'giraffes')",
        "finalString(s = \"forgeeksskeegfor\")",
        "finalString(s = \"I am awesome!\")",
        "finalString(s = \"i like i like i like this\")",
        "finalString(s = \"feeling\")",
        "finalString(s = \"stiilei\")",
        "finalString(s = \"i like to live in a world where i can do anything\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [0, 1, 2])",
        "doesValidArrayExist(derived = [0,1,1,0])",
        "doesValidArrayExist(derived = [1, 2, 4])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [2, 3, 7])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1, 1, 0, 0, 1])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [4, 5, 1, 2, 3])",
        "findValueOfPartition(nums = [4, 1, 2, 3])",
        "findValueOfPartition(nums = [0, 1, 1, 1])",
        "findValueOfPartition(nums = [0, 1, 0, 1])",
        "findValueOfPartition(nums = [5, 2, 4, 6])",
        "findValueOfPartition(nums = [3, 4, 5, 7, 8])",
        "findValueOfPartition(nums = [5, 1, 6, 3, 2])",
        "findValueOfPartition(nums = [1, 15, 10, 13, 11])",
        "findValueOfPartition(nums = [3, 2, 6, 5, 4, 8, 10])",
        "findValueOfPartition(nums = [1, 2, 5, 8, 10, 30])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[1,2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [0, 1]])",
        "colorTheArray(n = 3, queries = [[1, 0], [1, 1], [1, 1], [1, 0], [2, 1], [3, 0]])",
        "colorTheArray(n = 4, queries = [[1,0],[2,2],[3,1],[3,2]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,1],[2,1],[0,1],[0,1],[0,1],[2,1],[2,1],[2,1],[2,1],[2,1],[2,1]])",
        "colorTheArray(n = 10, queries = [[1,2], [2,1], [3,1], [4,1], [5,1], [6,2]])",
        "colorTheArray(n=5, queries=[[1,0],[1,1],[1,0],[1,1],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [0, 0], [4, 0], [3, 0], [3, 1], [4, 1], [0, 1], [0, 1], [4, 1], [3, 2], [3, 1], [3, 2]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 2, target = 5)"
    ],
    "sample_171": [
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 15)",
        "minimumSum(n = 10, k = 15)",
        "minimumSum(n=3, k=7)",
        "minimumSum(n = 3, k = 13)",
        "minimumSum(n=5, k=7)",
        "minimumSum(n=6, k=5)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 3, 6, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 10, 10, 10], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 12, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 4, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 1, 2, 1], target = 1)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 7)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [4, 3, 2, 3, 5, 2, 1], m = 7)",
        "canSplitArray(nums = [2, 1], m = 1)",
        "canSplitArray(nums = [2, 3, 5, 7], m = 12)",
        "canSplitArray(nums = [2, 5, 10], m = 15)",
        "canSplitArray(nums = [2, 3, 1, 4], m = 6)",
        "canSplitArray(nums = [3,5,10,1], m = 9)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [2,4,3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 2, 6, 1], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 7], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 2, 4, 5, 6], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 2, 4, 5, 6], m = 2, k = 4)",
        "countInterestingSubarrays(nums = [1, 2, 2, 2, 3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 2, 1, 4, 2], m = 5, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 3, 6, 3, 2, 5, 5], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 3, 4, 7], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [4,2,2,6,6,6,3], m = 4, k = 1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], t = 1)",
        "longestAlternatingSubarray(nums = [10,9,2,5,3,7,101,18], t = 9)",
        "longestAlternatingSubarray(nums = [3,5,2,4,6], t = 1)",
        "longestAlternatingSubarray(nums = [5,4,1,2,3], t = 5)",
        "longestAlternatingSubarray(nums = [3,5,7,4,2], t = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 2, 4, 2], t = 2)",
        "longestAlternatingSubarray(nums = [3, 5, 7, 4], t = 3)",
        "longestAlternatingSubarray(nums = [2, 6, 4, 3], t = 1)",
        "longestAlternatingSubarray(nums = [3,2,3,4,4,1,5,5,5,5], t = 2)",
        "longestAlternatingSubarray(nums = [9,2,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5], t = 3)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"51230000\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 10)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 3, b = 1)",
        "makeTheIntegerZero(a = 7, b = 6)",
        "makeTheIntegerZero(a = 23, b = 4)",
        "makeTheIntegerZero(a = 100, b = 9)",
        "makeTheIntegerZero(a=3, b=10)",
        "makeTheIntegerZero(a = 43, b = 12)",
        "makeTheIntegerZero(a = 453, b = 22)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 5, 11, 5], m = 16)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 5, 11, 5], m = 20)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1, 2, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 5, 3, 4, 2], m = 10)",
        "canSplitArray(nums = [3, 5, 2, 6, 8, 1, 9], m = 10)",
        "canSplitArray(nums = [5, 4, 7, 3, 9, 8], m = 12)",
        "canSplitArray(nums = [1, 2, 5, 10, 11, 21], m = 13)"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6])",
        "maxSum(nums = [1, 10, 2])",
        "maxSum(nums = [1, 2, 4, 7, 9, 10])",
        "maxSum(nums = [1, 2, 3, 5, 7, 6, 8])",
        "maxSum(nums = [-9, 1, 3, 5, -3])",
        "maxSum(nums = [1, 2, 3, 4, 10, 20, 30, 40, 5, 6, 7, 8])",
        "maxSum(nums = [-1, 2, -1, 1, -2, 3, 1])",
        "maxSum(nums = [2, 5, -5, 1, 4, 2, 2])",
        "maxSum(nums = [12, 3, 5, 1, 2, 1, 7, 5])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n = 5, target = 15)",
        "minimumPossibleSum(n=4, target=4)",
        "minimumPossibleSum(n=4, target=7)",
        "minimumPossibleSum(n=3, target=10)",
        "minimumPossibleSum(n=2, target=6)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,4,3,2,5,2])",
        "findValueOfPartition(nums = [1, 1, 1, 2, 2, 3])",
        "findValueOfPartition(nums = [1, 5, 4, 3])",
        "findValueOfPartition(nums = [1,5,6,2,3])",
        "findValueOfPartition(nums = [2,1,5,1,1,6,2])",
        "findValueOfPartition(nums = [2,4,5,10,12])",
        "findValueOfPartition(nums = [10, 10, 20, 5, 15])",
        "findValueOfPartition(nums = [10, 3, 10, 4, 20, 1, 30, 2])",
        "findValueOfPartition(nums=[5, 10, 25, 50, 100, 200])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,3]])",
        "numberOfPoints(nums=[[1,3],[2,6],[8,10],[15,18]])",
        "numberOfPoints(nums = [[1,2],[3,5],[1,2]])",
        "numberOfPoints(nums = [[1, 3], [5, 6], [3, 1]])",
        "numberOfPoints(nums = [[1,2],[2,4],[3,5],[1,4]])",
        "numberOfPoints(nums = [[1, 2, 1], [1, 5, 1], [3, 1, 1]])",
        "numberOfPoints(nums = [[0, 10], [2, 5], [11, 20]])",
        "numberOfPoints(nums = [[3,10],[21,21],[2,2]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[2,3],[2,2],[3,4],[2,3],[3,4]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums=[[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [1, 7]])",
        "numberOfPoints(nums=[[0, 2], [5, 10], [13, 23], [24, 25]])",
        "numberOfPoints(nums=[[3,6],[2,2],[8,10],[15,18]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [3, 4], [4, 8]])",
        "numberOfPoints(nums = [[3, 10], [2, 5], [1, 10], [2, 3], [2, 1], [4, 2]])",
        "numberOfPoints(nums = [[1, 4], [5, 9], [10, 19], [20, 21], [22, 23], [33, 36]])",
        "numberOfPoints(nums = [[0, 0], [1, 0], [2, 0], [3, 0], [0, 1], [2, 1], [0, 2], [1, 2], [2, 2], [3, 2], [3, 3], [0, 3], [1, 3], [2, 3], [3, 3], [3, 4], [0, 4], [1, 4], [2, 4], [3, 4], [3, 5], [0, 5], [1, 5], [2, 5], [3, 5], [3, 6], [0, 6], [1, 6], [2, 6], [3, 6], [3, 7], [0, 7], [1, 7], [2, 7], [3, 7], [3, 8], [0, 8], [1, 8], [2, 8], [3, 8], [3, 9], [0, 9], [1, 9], [2, 9], [3, 9]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one two\", \"three four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two\", \"three four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ', ')",
        "splitWordsBySeparator(words = [\"one two\", \"three\", \"four five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\",\"two\",\"three four\", \"five\", \"six\"], separator = \" \")"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 4, 2, 3], target = 5)",
        "minOperations(nums = [1, 3], target = 5)",
        "minOperations(nums = [4, 2, 3], target = 6)",
        "minOperations(nums = [1, 1, 4, 2, 5], target = 7)",
        "minOperations(nums = [3, 3, 4, 6, 6], target = 12)",
        "minOperations(nums = [3,7,9], target = 13)",
        "minOperations(nums = [2, 4, 8, 16], target = 20)",
        "minOperations(nums = [1,2,3,4,5], target = 7)",
        "minOperations(nums = [4, 2, 1], target = 4)",
        "minOperations(nums = [5, 2, 3, 2, 5, 3], target = 6)"
    ],
    "sample_107": [
        "checkArray(nums = [2, -1, 1, 2, 2, 3], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 1)",
        "checkArray(nums = [1, 1, 1, 2, 3], k = 2)",
        "checkArray(nums = [2, 1, 5, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 1, 2, 6, 7, 5], k = 4)",
        "checkArray(nums = [10, 20, 30, 30, 20, 10], k = 3)",
        "checkArray(nums = [1, 5, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 3, 5, 1], k = 2)",
        "checkArray(nums = [5, 5, 4, 4], k = 1)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1, 0, 1, 0, 0, 0])"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [-2, -1, 1, 2])",
        "maxSum(nums = [1, 1, 2, 2, 3, 3])",
        "maxSum(nums = [-1, 1, 2, 3, 4])",
        "maxSum(nums = [-4, -2, -1, 0, 1, 2, 4])",
        "maxSum(nums=[2,4,6,2,5,1])",
        "maxSum(nums = [-2,2,2,3,1])",
        "maxSum(nums = [99, 102, 105, 99, 101])",
        "maxSum(nums = [-1000,-1000,3,-999,-999,7,8,9,10,10,10,10])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 1, 2, 3])",
        "continuousSubarrays(A = [1,2,1,2,3,1,4,2])",
        "continuousSubarrays(A = [1,1,1,1,1,1])",
        "continuousSubarrays(A = [1,2,1,2,3,1,4,1])",
        "continuousSubarrays(A = [1,2,1,2,3,4,4,5,6,7])",
        "continuousSubarrays(A = [1,2,1,2,3,4,3,1,2,1,2,3])",
        "continuousSubarrays(A = [2, 1, 3, 3, 2, 4, 2, 1, 3, 5, 4])",
        "continuousSubarrays(A = [1, 3, 5, 5, 5, 5, 5, 5, 5, 5])",
        "continuousSubarrays(A = [1, 3, 5, 7, 9, 10, 11])",
        "continuousSubarrays(A = [2, 2, 2, 2, 5, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [4, 1, 1, 1, 2])",
        "distinctDifferenceArray(nums = [-2, 0, 1, 3, 4])",
        "distinctDifferenceArray(nums = [-1, 3, -2, 4, -3])",
        "distinctDifferenceArray(nums = [1, 3, 5, 1, 2])",
        "distinctDifferenceArray(nums = [-5, 1, 1, -5, 5, 5, -5])",
        "distinctDifferenceArray(nums=[1, 3, 1, 5, 1, 3, 4, 4])",
        "distinctDifferenceArray(nums = [-2, 5, 2, 6, 4, -1, 1, 3])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [2, 5, 3, 1], b = [1, 4, 6, 3])",
        "maxNonDecreasingLength(a = [1, 2, 4, 1, 3], b = [1, 3, 4, 2, 3])",
        "maxNonDecreasingLength(a = [1, 3, 2, 4, 5], b = [2, 4, 10])",
        "maxNonDecreasingLength(a = [1, 3, 2, 0, 5], b = [0, 1, 1, 1, 1])",
        "maxNonDecreasingLength(a = [3, 1, 2, 4, 2], b = [1, 5, 3, 2, 4])",
        "maxNonDecreasingLength(a = [4,3,2,1,2], b = [3,4,5,2,1])",
        "maxNonDecreasingLength(a = [1, 1, 3, 4, 1, 1], b = [2, 1, 3, 4, 1, 4])",
        "maxNonDecreasingLength(a = [3,2,3,1,4], b = [5,2,1,3,4])",
        "maxNonDecreasingLength(a = [5, 6, 2, 4, 5, 1], b = [5, 2, 4, 5, 7, 8])",
        "maxNonDecreasingLength(a = [1, 4, 10, 2, 6, 3, 6], b = [9, 10, 3, 2, 3, 8, 7])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 20, additionalTank = 10)",
        "distanceTraveled(mainTank = 20, additionalTank = 5)",
        "distanceTraveled(mainTank = 15, additionalTank = 5)",
        "distanceTraveled(mainTank = 6, additionalTank = 3)"
    ],
    "sample_160": [
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum(nums = [34, 23, 1, 24, 75, 33, 54, 8])",
        "maxSum(nums = [12, 34, 23, 10])",
        "maxSum(nums = [1, 9, 11, 2, 4, 1, 5])",
        "maxSum(nums = [2, 1, 4, 5, 1, 6, 1, 4, 1, 1])",
        "maxSum(nums = [2,21,16,1,28,30,21])",
        "maxSum(nums = [987, 675, 124, 826])",
        "maxSum(nums = [22,2,12,4,4,5,14,5,11,9])",
        "maxSum(nums = [192, 13, 15, 1, 12, 4, 2, 7, 192, 15, 1])"
    ],
    "sample_52": [
        "smallestString(s = 'aaaaaa')",
        "smallestString(s = \"az\")",
        "smallestString(s = \"aaaaaaaaa\")",
        "smallestString(s = 'abcda')",
        "smallestString(s = 'aaaabaa')",
        "smallestString(s = \"kddsa\")",
        "smallestString(s = \"aaaabbbbccccdddd\")",
        "smallestString(s = 'aaaaabb')",
        "smallestString(s = \"aabaabacba\")",
        "smallestString(s = 'dddddaaaaa')"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 1, 1, 1, 1])",
        "findValueOfPartition(nums = [1, 10, 5])",
        "findValueOfPartition(nums = [1, 10, 5, 2, 7])",
        "findValueOfPartition(nums = [1, 2, 4, 8, 16, 32, 64])",
        "findValueOfPartition(nums = [4, 2, 3, 1])",
        "findValueOfPartition(nums = [1, 9, 5, 3, 6, 4])",
        "findValueOfPartition(nums = [10, 8, 5, 3])",
        "findValueOfPartition(nums = [3, 3, 2, 5])",
        "findValueOfPartition(nums = [2, 1, 5, 10, 2, 5, 1])",
        "findValueOfPartition(nums = [1, 3, 7, 10, 15, 20, 25])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = \"abcba\")",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = \"ba\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = 'aba')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = \"cabb\")",
        "makeSmallestPalindrome(s=\"aabb\")",
        "makeSmallestPalindrome(s=\"bb\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 0, num2 = 0)",
        "makeTheIntegerZero(num1 = 1, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1=15, num2=23)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,3]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,2]])",
        "numberOfPoints(nums = [[1,3],[2,6],[8,10],[15,18]])",
        "numberOfPoints(nums=[[2,3],[5,10],[13,23],[24,25]])",
        "numberOfPoints(nums = [[2, 10], [3, 20], [4, 30]])",
        "numberOfPoints(nums=[[5,10],[2,5],[1,10]])",
        "numberOfPoints(nums = [[1,2,3],[4,5],[7]])",
        "numberOfPoints(nums = [[1,1],[1,1],[2,2],[2,2],[1,1],[1,1]])",
        "numberOfPoints(nums=[[2,2],[3,10],[1,10],[1,3],[3,3]])",
        "numberOfPoints(nums = [[1,3],[1,3],[2,3],[2,4],[5,5],[5,5]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [2,4,3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,4,2,5,3], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 2], m = 1, k = 3)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 3], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [4, 6], m = 1, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 2, 2, 5, 5, 7], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,4,3,3,5,4,5], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 2, 1, 2, 2, 2, 1, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [3,4,5], m = 1, k = 3)",
        "countInterestingSubarrays(nums = [1,2,2,2,4,4,6,6], m = 4, k = 1)"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"abacab\")",
        "minimumCost(s = \"abbc\")",
        "minimumCost(s = \"aaabbc\")",
        "minimumCost(s = \"aabbb\")",
        "minimumCost(s = \"abcbba\")",
        "minimumCost(s = \"aeioulnr\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,1,1])",
        "doesValidArrayExist(derived = [1,0,0,1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0,0,1,1,0,1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,1,1,0,0,0,1,1,1])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 3, 2, 2, 5])",
        "distinctDifferenceArray(nums = [3, 1, 2, 4, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "distinctDifferenceArray(nums = [2, 3, 1, 1, 3])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [4, 5, 7, 9])",
        "distinctDifferenceArray(nums = [2, 4, 7, 3, 2, 5, 6, 9, 4])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 3, 1], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 4, 5, 9], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 4, 6, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 1, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 7, 5], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 6, 10], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 5, 7, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 8, 6, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 30, 60, 80, 120, 140], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 40, 5, 10, 6], target = 15)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = 'banana')",
        "makeSmallestPalindrome(s = 'banana')",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"cat\")",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = \"ana\")",
        "makeSmallestPalindrome(s = \"java\")",
        "makeSmallestPalindrome(s = \"cnap\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = \"0000512301\")",
        "removeTrailingZeros(num = '512300000')",
        "removeTrailingZeros(num=\"5123010\")",
        "removeTrailingZeros(num = '0051230100')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2,4,3,5,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,4,3,5,1], m = 2, k = 3)",
        "countInterestingSubarrays(nums= [1,2,3,4,5], m=2, k=3)",
        "countInterestingSubarrays(nums= [1, 2, 3, 4, 5], m=1, k=3)",
        "countInterestingSubarrays(nums= [1,2,3,4,5,6,8], m=2, k=4)",
        "countInterestingSubarrays(nums = [1,2,2,4,3,3,5,4,5], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [3,4,5,6,7,8,9,10,11,12,13,14,15], m = 4, k = 3)",
        "countInterestingSubarrays(nums = [2,4,3,3,5,3,3,3,6,7,2,10,1,15,16,23,5,12,11,4,1,1,1,1,1], m = 5, k = 3)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 100, additionalTank = 50)",
        "distanceTraveled(mainTank = 100, additionalTank = 50)",
        "distanceTraveled(mainTank = 1, additionalTank = 5)",
        "distanceTraveled(mainTank = 2, additionalTank = 5)",
        "distanceTraveled(mainTank = 13, additionalTank = 0)",
        "distanceTraveled(mainTank = 1000, additionalTank = 100)",
        "distanceTraveled(mainTank = 50, additionalTank = 6)"
    ],
    "sample_56": [
        "minCost(A = [1, 3, 2, 4, 3], x = 2)",
        "minCost(A = [4, 2, 3], x = 1)",
        "minCost(A = [1, 3, 10, 10, 1], x = 5)",
        "minCost(A = [1, 6, 10], x = 3)",
        "minCost(A = [1, 1, 1, 2, 2], x = 2)",
        "minCost(A = [1, 5, 2, 7, 4], x = 1)",
        "minCost(A = [6, 1, 10, 15], x = 1)",
        "minCost(A = [1, 6, 2, 3, 9], x = 4)",
        "minCost(A = [9, 4, 6, 6, 9], x = 3)",
        "minCost(A = [1, 11, 15, 2, 6, 9], x = 2)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 3, 2])",
        "maxIncreasingGroups(u = [1, 2, 3, 4])",
        "maxIncreasingGroups(u = [1, 4, 4, 4, 5])",
        "maxIncreasingGroups(u = [1, 4, 4, 6, 10, 11])",
        "maxIncreasingGroups(u = [1, 3, 5, 4, 6, 7])",
        "maxIncreasingGroups(u = [1, 1, 2, 3, 3, 3])",
        "maxIncreasingGroups(u = [5, 4, 2, 3, 1])",
        "maxIncreasingGroups(u = [1, 3, 5, 4, 3])",
        "maxIncreasingGroups(u = [2, 4, 4, 7, 5])",
        "maxIncreasingGroups(u = [1, 5, 10, 15, 30, 20])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [2, -1, 1, 2, 2], k = 2)",
        "checkArray(nums = [1, 2, 2, 1], k = 2)",
        "checkArray(nums = [1, 3, 6, 4, 1], k = 1)",
        "checkArray(nums = [5, 2, 4, 0, 3], k = 1)",
        "checkArray(nums = [3, 1, 4, 2], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 0, 0, 0, 0, 5], k = 3)",
        "checkArray(nums = [5, -2, -5, -2], k = 3)",
        "checkArray(nums = [-1, -1, -1, 2, 2, 2, 3, 4, 5, 6], k = 1)",
        "checkArray(nums = [1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1], k = 10)"
    ],
    "sample_19": [
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCDABCD\")",
        "minLength(s = \"ABABABCDABAB\")",
        "minLength(s = \"ABABABABABABCD\")",
        "minLength(s = \"ABABCABCD\")",
        "minLength(s = \"ABABCDABABCDABABCDABABCDABABCD\")",
        "minLength(s = \"ABCDABDABCDABDE\")",
        "minLength(s = \"ABCABAC\")",
        "minLength(s = \"ABAAABAAAABABCDA\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 1, 4, 2, 3], target = 5)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1,1,1,1,1,1], target = 3)",
        "minOperations(nums = [1,2,3,2], target = 5)",
        "minOperations(nums = [1, 2, 3, 4], target = 5)",
        "minOperations(nums = [1,2,3,4,5], target = 5)",
        "minOperations(nums = [3,1], target = 10)",
        "minOperations(nums = [5,3,4], target = 17)",
        "minOperations(nums=[1, 5, 11], target=17)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\", \"d\", \"e\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"a\", \"a\", \"a\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"abc\", \"pqrs\", \"xyz\"], separator = \"y\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"javascript\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\", \"a\", \"an\", \"apple\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"cherry\", \"orange\", \"raspberry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"1212\", \"1212312\", \"121232\"], separator = \"2\")"
    ],
    "sample_54": [
        "smallestString(s = \"aaaaa\")",
        "smallestString(s = \"z\")",
        "smallestString(s = \"abcdefg\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"aaaabaaaa\")",
        "smallestString(s = 'g')",
        "smallestString(s = \"aaaaa\")",
        "smallestString(s = \"aa\")",
        "smallestString(s = \"abaaaaabaaaaaab\")",
        "smallestString(s = \"kkkddsdz\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRRR\")",
        "furthestDistanceFromOrigin(moves = \"R_L__R_\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLRLL\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L___\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRRRLRRL\")",
        "furthestDistanceFromOrigin(moves = \"R__LLL_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRRLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"L___L__RRRL_L\")",
        "furthestDistanceFromOrigin(moves = \"_R__L_R_L___R_\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 100, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 8)",
        "makeTheIntegerZero(num1 = 3, num2 = 7)",
        "makeTheIntegerZero(num1 = 3, num2 = 6)",
        "makeTheIntegerZero(num1 = 9, num2 = 1)",
        "makeTheIntegerZero(num1 = 21, num2 = 1)",
        "makeTheIntegerZero(num1 = 100000000, num2 = 3)",
        "makeTheIntegerZero(num1 = 909090, num2 = 909090)"
    ],
    "sample_51": [
        "smallestString(s = \"z\")",
        "smallestString(s = \"ab\")",
        "smallestString(s = 'abcdefg')",
        "smallestString(s = \"j\")",
        "smallestString(s = 'cad')",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"baz\")",
        "smallestString(s = 'lemonade')",
        "smallestString(s = \"abcfgh\")",
        "smallestString(s = 'edkzb')"
    ],
    "sample_146": [
        "finalString(s = \"ponter\")",
        "finalString(\"ponter\")",
        "finalString(s = \"iter\")",
        "finalString(s = \"poner\")",
        "finalString(s = \"ponting\")",
        "finalString(s = \"pitcher\")",
        "finalString(s = \"program\")",
        "finalString(s = \"poni\")",
        "finalString(s = \"please reverse me\")",
        "finalString(\"ponin\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [2,3,1,2,4,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2], k = 2)",
        "longestEqualSubarray(nums = [3,1,4,1,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 4, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [3,1,4,1,5,9,2,6,5,3], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 3, 5, 5, 6, 8, 10], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 3, 4, 1, 2, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [2,4,4,4,4,4,4,2,2,2], k = 1)",
        "longestEqualSubarray(nums = [3, 5, 6, 7, 1, 2, 1, 3, 4, 6, 8], k = 3)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,2], m = 3)",
        "canSplitArray(nums = [1,2], m = 1)",
        "canSplitArray(nums = [1,2,3,4], m = 4)",
        "canSplitArray(nums = [1,2,3,4], m = 4)",
        "canSplitArray(nums = [1,1,1], m = 4)",
        "canSplitArray(nums = [2,1], m = 2)",
        "canSplitArray(nums = [1,2,3,3,4], m = 5)",
        "canSplitArray(nums = [3,2,3,2], m = 6)",
        "canSplitArray(nums = [4, 6, 1, 2], m = 6)",
        "canSplitArray(nums = [5,4,3,2,1,10,11], m = 7)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1, 1, 0, 1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two,three,four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one two three four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = 'e')",
        "splitWordsBySeparator(words = [\"one two three four\", \"five six seven eight\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two,three', 'four', 'five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"], separator = ' ')",
        "splitWordsBySeparator(words = ['o', 'ne two', 'three four', 'five', 'six'], separator = ' ')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3,4,5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours=[2, 4, 3], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 15, 40], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,4,8,15], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 7, 9, 15, 2], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 4, 6, 8, 12, 18, 24, 36], target = 24)"
    ],
    "sample_168": [
        "isAcronym(words = [\"m\", \"q\", \"p\"], s = \"p\")",
        "isAcronym(words = [\"hi\", \"there\", \"guys\"], s = \"htg\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bird\"], s = \"tacdog\")",
        "isAcronym(words = [\"mouse\", \"mice\", \"nose\"], s = \"mns\")",
        "isAcronym(words = [\"need\", \"code\"], s = \"NCD\")",
        "isAcronym(words = [\"apple\", \"banana\", \"grape\", \"pear\"], s = \"pyap\")",
        "isAcronym(words = [\"i\", \"love\", \"banana\", \"and\", \"cat\"], s = \"ibc\")",
        "isAcronym(words = [\"bat\", \"batman\", \"man\", \"batsman\"], s = \"batman\")",
        "isAcronym(words = [\"dad\", \"mom\", \"dad\", \"dad\", \"dad\"], s = \"ab\")",
        "isAcronym(words = [\"ant\", \"jaguar\", \"anthony\", \"york\"], s = \"jryan\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"x\")",
        "isAcronym(words = [\"hello\", \"bye\"], s = \"he\")",
        "isAcronym(words = [\"apple\", \"bear\"], s = \"abr\")",
        "isAcronym(words = [\"ac\", \"bc\"], s = \"ab\")",
        "isAcronym(words = [\"b\", \"an\", \"na\", \"n\", \"a\"], s = \"banana\")",
        "isAcronym(words = [\"happy\", \"birthday\", \"joke\"], s = \"h\")",
        "isAcronym(words = [\"abc\", \"aba\", \"aba\"], s = \"baa\")",
        "isAcronym(words = [\"step\", \"steps\", \"stepper\"], s = \"s\")",
        "isAcronym(words = [\"dsa\", \"apple\", \"b\"], s = \"aba\")",
        "isAcronym(words = [\"Matrix\", \"R2D2\", \"Extraordinary\"], s = \"MRD\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcdef\")",
        "minimumCost(s = \"xxxyyy\")",
        "minimumCost(s = \"g\")",
        "minimumCost(s = \"abcabd\")",
        "minimumCost(s = \"aababb\")",
        "minimumCost(s=\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minimumCost(s=\"ababaa\")",
        "minimumCost(s = \"eevv\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [2, 1, 0])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"baa\")",
        "makeSmallestPalindrome(s = 'aaa')",
        "makeSmallestPalindrome(s = \"abbb\")",
        "makeSmallestPalindrome(s=\"bananas\")"
    ],
    "sample_50": [
        "smallestString(s = \"ab\")",
        "smallestString(s = \"abba\")",
        "smallestString(s=\"abaabb\")",
        "smallestString(s = 'abaaac')",
        "smallestString(s = \"aabaac\")",
        "smallestString(s = 'abcaaaa')",
        "smallestString(s = \"abba\")",
        "smallestString(s = \"abbabbabb\")",
        "smallestString(s = \"abcaab\")",
        "smallestString(s=\"babbbbabbbbabbbaabababbabbbbbba\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 4)",
        "sumIndicesWithKSetBits(nums = [0,1,1,1,1], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 0, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 3, 4, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 0, 3, 1, 4, 0, 3, 1], k = 3)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABABABACD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")",
        "minLength(s = \"AAAAAB\")",
        "minLength(s = \"ABACABA\")",
        "minLength(s = \"ABACDE\")",
        "minLength(s = \"ABACDD\")",
        "minLength(s = \"ABABCDACD\")",
        "minLength(s = \"AABCDEAA\")"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [10, 9, 2, 5, 3, 7, 101, 18])",
        "maxSum(nums = [3, 4, 5, 1, 2])",
        "maxSum(nums = [1, 9, 3, 8, 2, 7, 4, 6])",
        "maxSum(nums = [12, 21, 30, 40])",
        "maxSum(nums = [2,3,5,8,12,4])",
        "maxSum(nums = [-234567, 11, 234567])",
        "maxSum(nums = [1000, 900, 100, 99, 98, 101, 102, 103, 104])",
        "maxSum(nums = [-3, 3, -3, 2, -3, 5, -3, 1, -3, 4, 2, -3, 0, -3, 3, 2, 3, -3, -3, 3, 5])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8])",
        "semiOrderedPermutation(nums = [1, 2, 3, 5, 4, 6])",
        "semiOrderedPermutation(nums = [1,2,3,1,2,3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])",
        "semiOrderedPermutation(nums = [1, 3, 2, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13, 14, 15])",
        "semiOrderedPermutation(nums = [1, 2, 2, 4, 1, 1, 3])"
    ],
    "sample_162": [
        "maxSum(nums = [1, 3, 5, 7, 9])",
        "maxSum(nums = [4, 44, 444])",
        "maxSum(nums = [1, 2, 3, 4, 2, 5, 6, 7, 8, 9])",
        "maxSum(nums = [42, 41, 43])",
        "maxSum(nums = [1, 99, 88, 66, 55])",
        "maxSum(nums = [12, 15, 17, 19, 4])",
        "maxSum(nums = [2, 3, 7, 4, 8, 10, 4])",
        "maxSum(nums=[111,13,4,10,99,121])",
        "maxSum(nums = [12, 25, 99, 151, 245, 180, 10, 90, 33, 145])",
        "maxSum(nums = [14, 40, 74, 13, 52, 19, 27, 49, 38, 73, 48, 89, 18, 25, 73, 19, 47, 7, 14, 75, 35, 18, 99, 14, 26, 74, 67, 92, 78, 12, 77, 43, 39, 14, 60, 72, 72, 13, 72, 41, 86, 32, 47, 10, 47, 35, 93, 1, 53, 40, 28, 82, 21, 79, 59, 57, 60, 49, 54, 32, 32, 76, 31, 8, 94, 74, 77, 87, 6, 9, 71, 48, 32, 80, 14, 64, 61, 99, 69, 71, 60, 79, 25, 2, 25, 76, 45, 31, 23, 27, 82, 31, 83, 25, 57, 16, 57, 59, 61, 9, 54, 2, 92, 6, 17, 29, 41, 26, 53, 87, 73, 60, 39, 35, 29, 98, 33, 83, 65, 86, 44, 44, 25, 15, 82, 56, 2, 49, 23, 11, 32, 53, 54, 12, 94, 76, 43, 96, 15, 79, 81, 34, 98, 80, 46, 34, 83, 96, 63, 73, 65, 44, 54, 13, 89, 48, 7, 44, 87, 8"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10001\")",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"11101\")",
        "maximumOddBinaryNumber(s = \"100001\")",
        "maximumOddBinaryNumber(s = '10100')",
        "maximumOddBinaryNumber(s = \"01010\")",
        "maximumOddBinaryNumber(s = \"100110\")",
        "maximumOddBinaryNumber(s = \"100111\")",
        "maximumOddBinaryNumber(s = '10011001')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 0], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 7, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 12, 15], target = 16)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 6, 8, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 2, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 2, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 21, 10, 30], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 4, 5, 6, 7, 4, 8, 4], target = 5)"
    ],
    "sample_166": [
        "isAcronym(words = [\"apple\", \"banana\"], s = \"b\")",
        "isAcronym(words = [\"alpha\", \"beta\", \"gamma\"], s = \"g\")",
        "isAcronym(words = [\"banana\", \"pen\"], s = \"banana\")",
        "isAcronym(words = [\"Data\", \"Science\", \"Machine\", \"Learning\"], s = \"D\")",
        "isAcronym(words = [\"hello\", \"world\", \"this\", \"is\", \"acronym\"], s = \"isacronym\")",
        "isAcronym(words = [\"banana\", \"anna\"], s = \"anb\")",
        "isAcronym(words = [\"b\", \"i\", \"g\", \"i\"], s = \"bingi\")",
        "isAcronym(words = [\"banana\", \"raspberry\", \"eggs\"], s = \"rasp\")",
        "isAcronym(words=[\"name\", \"nothing\"], s = \"n\")",
        "isAcronym(words = [\"ma\", \"kathleen\"], s = \"ma\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank=5, additionalTank=1)",
        "distanceTraveled(mainTank=5, additionalTank=1)",
        "distanceTraveled(mainTank=2, additionalTank=3)",
        "distanceTraveled(mainTank = 15, additionalTank = 3)",
        "distanceTraveled(mainTank = 6, additionalTank = 2)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 5, 4])",
        "maxIncreasingGroups(A = [1, 2, 1, 5])",
        "maxIncreasingGroups(A = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30])",
        "maxIncreasingGroups(A = [1, 10, 12, 13])",
        "maxIncreasingGroups(A = [4, 6, 10, 12, 18])",
        "maxIncreasingGroups(A = [2, 3, 2, 3, 3, 3])",
        "maxIncreasingGroups(A = [3, 4, 5, 7, 10, 3])",
        "maxIncreasingGroups(A = [2, 5, 3, 10, 20, 1, 10])",
        "maxIncreasingGroups(A = [1, 10, 13, 22, 33, 12, 23, 34])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [-1, 1, 3, 5, -3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 4, 4, 7, 8])",
        "distinctDifferenceArray(nums = [5, 2, 1, 4, 3])",
        "distinctDifferenceArray(nums = [-2, 3, -3, 4, -1, 2, 1, -5, 4])",
        "distinctDifferenceArray(nums = [3, 5, 2, 1, 2])",
        "distinctDifferenceArray(nums = [-3, -1, 1, 5, 3, 6, 7, 9])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 3)",
        "distanceTraveled(mainTank = 30, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 110, additionalTank = 11)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 0, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 4, 2, 5, 3])",
        "countCompleteSubarrays(nums = [2, 4, 1, 2, 5, 2, 1, 6])",
        "countCompleteSubarrays(nums = [2, 4, 1, 3, 5, 7])",
        "countCompleteSubarrays(nums = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,1,1,0,1,1,1,0])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [2,3,1,5,4], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [3,1,2,2,4], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 3, 2], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"aaa\")",
        "minimizedStringLength(s = \"aaabb\")",
        "minimizedStringLength(s = \"abcdef\")",
        "minimizedStringLength(s = \"a\")",
        "minimizedStringLength(s = \"abcabcbb\")",
        "minimizedStringLength(s = \"mississippi\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 3)",
        "longestEqualSubarray(nums=[1,2,3,2,1], k=3)",
        "longestEqualSubarray(nums = [1,1,1,1,1,1,1,2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,5,5,5,5,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,1,1,2,3,2], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,2,5,5,5,1], k = 3)",
        "longestEqualSubarray(nums = [4,5,3,6,2,1], k = 3)",
        "longestEqualSubarray(nums = [2,4,2,4,2,2,4,2,4], k = 4)",
        "longestEqualSubarray(nums = [1,3,5,8,7,10,3,5,5], k = 6)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 0], [2, 0], [3, 1], [4, 1], [5, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 0], [2, 1], [3, 1], [4, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 0]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 0], [3, 1], [3, 2], [4, 0]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,3],[3,4],[4,5],[5,1]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [0,2], [0,0], [2,3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [3, 1], [2, 4], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1,0], [2,1], [3,2], [4,0], [1,0]])",
        "colorTheArray(n = 5, queries = [[1,1],[1,2],[1,3],[3,3],[3,4],[4,4],[4,5]])",
        "colorTheArray(n = 5, queries = [[1, 0], [3, 1], [1, 0], [0, 0], [2, 1]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,1,1,1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours=[1,2,3], target=4)",
        "numberOfEmployeesWhoMetTarget(hours=[4,5,6], target=7)",
        "numberOfEmployeesWhoMetTarget(hours = [1,3,6,10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours=[8,4,2,1], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 8, 9, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 41, 38, 40], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 2, 24, 4], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours=[9, 10, 20, 18], target=12)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [2, 4, 6, 8, 10])",
        "countBeautifulPairs(nums = [1, 2, 4, 7, 8, 10])",
        "countBeautifulPairs(nums = [1, 5, 7, 9, 3, 2, 6, 8])",
        "countBeautifulPairs(nums = [1, 6, 3, 2, 10, 100])",
        "countBeautifulPairs(nums = [111, 11, 22, 33, 44, 55, 66, 111])",
        "countBeautifulPairs(nums = [256, 1024, 1337])",
        "countBeautifulPairs(nums = [12, 1, 17, 18, 6, 8, 9, 6, 10])",
        "countBeautifulPairs(nums = [12, 34, 56, 23, 11, 45, 78, 89, 99, 33])",
        "countBeautifulPairs(nums = [15434, 34, 665, 777, 900, 870, 666, 450, 666, 123, 90, 50, 87])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 1, 2])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [2, 4, 6])",
        "countWays(nums = [1,1,1])",
        "countWays(nums=[1, 2, 3, 4])",
        "countWays(nums = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,",
        "countWays(nums = [3,2,1,5,7])",
        "countWays(nums = [5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = \"01001\")",
        "maximumOddBinaryNumber(s = '1000')",
        "maximumOddBinaryNumber(s = \"11001\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10111\")",
        "maximumOddBinaryNumber(s = '001001')",
        "maximumOddBinaryNumber(s = \"101010111\")",
        "maximumOddBinaryNumber(s = \"11111101100\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "maximumBeauty(nums = [3, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 3, 3, 5, 5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,2,3,1], k = 3)",
        "maximumBeauty(nums = [1, 4, 2, 3, 3], k = 1)",
        "maximumBeauty(nums = [1, 1, 3, 3, 4, 4], k = 2)",
        "maximumBeauty(nums = [2, 4, 1, 1, 3, 5, 7, 9, 8], k = 2)",
        "maximumBeauty(nums = [3, 2, 2, 4, 5, 1, 5, 2, 5, 2, 5], k = 1)",
        "maximumBeauty(nums = [2,4,6,1,9,8,2,6,4,8,2,1], k = 1)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-3, 0, 1, 2])",
        "maximumTripletValue(nums = [2, 3, -2, 4])",
        "maximumTripletValue(nums = [2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 3, 5])",
        "maximumTripletValue(nums = [-3, 0, 2, -5, 1, 3])",
        "maximumTripletValue(nums = [1000, 100, 10])",
        "maximumTripletValue(nums = [5,2,3,2,1])",
        "maximumTripletValue(nums=[-2, 1, 1, 0, -4])",
        "maximumTripletValue(nums = [9, 2, 5, -1, -5, -3])"
    ],
    "sample_98": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [3,2,1,0,4], target = 3)",
        "maximumJumps(nums = [1,3,6,1,0,9], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [5,4,3,2,1,0], target = 2)",
        "maximumJumps(nums = [0, 0, 0, 0, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 2, 1, 2], target = 4)"
    ],
    "sample_149": [
        "finalString(s = \"banana\")",
        "finalString(s = 'hello')",
        "finalString(s = \"thequickbrownfoxjumpsoverthelazydog\")",
        "finalString(s = \"programing\")",
        "finalString(s = \"abcdefg\")",
        "from typing import *\n\nfrom math import *\n\ndef finalString(s: str) -> str:\n    a = \"\"\n    for i in s:\n        if i",
        "finalString(s = \"ginger\")",
        "finalString(s = 'lili')",
        "finalString(s = \"panda\")",
        "finalString(s = 'raiip')"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "continuousSubarrays(A = [1,2,3,2,1,4,2])",
        "continuousSubarrays(A = [1, 1, 0, 1, 1, 1])",
        "continuousSubarrays(A = [1,1,2,1,1])",
        "continuousSubarrays(A = [1,1,1,1,1,1,1])",
        "continuousSubarrays(A = [2, 1, 2, 1, 1, 2])",
        "continuousSubarrays(A = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2])",
        "continuousSubarrays(A = [2, 1, 2, 1, 1, 2, 3, 3])",
        "continuousSubarrays(A = [1, 4, 1, 5, 9, 2, 6, 5, 3])",
        "continuousSubarrays(A = [1, 3, 2, 2, 2, 3, 4, 4, 5, 5, 5])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [2, 4, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 7])",
        "countCompleteSubarrays(nums = [3, 2, 1, 5, 2, 3, 7])",
        "countCompleteSubarrays(nums = [2,4,1,2,3])",
        "countCompleteSubarrays(nums = [4, 1, 2, 3, 6])",
        "countCompleteSubarrays(nums = [2, 4, 1, 6, 8, 10])",
        "countCompleteSubarrays(nums = [0,2,1,5,2,7])",
        "countCompleteSubarrays(nums = [4, 2, 3, 6, 3, 1])"
    ],
    "sample_228": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums=[1,2,3])",
        "countWays(nums=[1, 2, 4])",
        "countWays(nums = [1, 3, 5, 0])",
        "countWays(nums = [1, 1, 3, 3, 5, 6])",
        "countWays(nums=[1, 4, 3, 4])",
        "countWays(nums = [1, 4, 1, 0, 2])",
        "countWays(nums=[1, 2, 2, 3, 3, 4, 0])",
        "countWays(nums = [1, 2, 0, 5, 3, 7])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 2, 2, 2, 3], k = 1)",
        "maximumBeauty(nums = [4, 5, 6, 7, 8], k = 1)",
        "maximumBeauty(nums = [2, 2, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 5, 4, 1], k = 1)",
        "maximumBeauty(nums = [3, 1, 2, 3, 2, 2, 3], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 5, 4, 7, 6, 8], k = 1)",
        "maximumBeauty(nums = [1, 1, 3, 3, 3, 3, 3, 5, 5, 5], k = 3)",
        "maximumBeauty(nums = [4, 4, 3, 1, 5, 4, 5], k = 2)",
        "maximumBeauty(nums = [5, 5, 4, 6, 6, 6, 7, 7, 9, 9], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1,2,3,4,5])",
        "distinctDifferenceArray(a = [-3, -1, 1, 2, 3, 5])",
        "distinctDifferenceArray(a = [1,1,3,3,5])",
        "distinctDifferenceArray(a = [-3, -1, 1, 3, 1, 5])",
        "distinctDifferenceArray(a = [1,1,2,3,4,5,6])",
        "distinctDifferenceArray(a = [1, 3, 1, 5, 6, 2])",
        "distinctDifferenceArray(a = [5, -3, 1, 3, -1])",
        "distinctDifferenceArray(a=[1, 1, 2, 3, 4, 4, 7, 7, 7, 8, 8, 9, 10])",
        "distinctDifferenceArray(a = [3, 1, 5, 4, 2, 8, 7, 6, 5, 5, 9])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 1, 1, 1, 1])",
        "continuousSubarrays(a = [1,2,1,2,3,1,4,2])",
        "continuousSubarrays(a = [1,2,1,2,3,4,5,6])",
        "continuousSubarrays(a = [1, 2, 1, 1])",
        "continuousSubarrays(a = [1, 0, 1, 1, 1, 0])",
        "continuousSubarrays(a = [1,2,3,1,2,2])",
        "continuousSubarrays(a = [2, 2, 1, 2, 1, 1, 2])",
        "continuousSubarrays(a = [1, 1, 2, 3, 3, 1, 4])",
        "continuousSubarrays(a = [2, 5, 4, 2, 5, 1, 5])",
        "continuousSubarrays(a = [1, 2, 1, 2, 3, 1, 4, 4, 1, 3, 2, 1, 1, 3, 1, 2])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [2, 1, 4, 3])",
        "continuousSubarrays(nums = [2, 1, 1, 2, 3])",
        "continuousSubarrays(nums = [2, 1, 1, 2, 3, 3])",
        "continuousSubarrays(nums = [2, 1, 3, 5, 2, 6, 7])",
        "continuousSubarrays(nums = [2,2,2,2,5,5])",
        "continuousSubarrays(nums = [1,2,3,4,5])",
        "continuousSubarrays(nums = [2, 2, 2, 2, 5, 5, 5, 8])",
        "continuousSubarrays(nums = [1,2,2,2,5,3,5])",
        "continuousSubarrays(nums = [1,1,1,2,2,2,3,3])",
        "continuousSubarrays(nums = [1,2,3,3,2,3,4,4,2,2])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [2,4,6,8,10])",
        "countBeautifulPairs(nums = [11, 12, 13, 14, 15])",
        "countBeautifulPairs(nums = [2, 1, 1, 3])",
        "countBeautifulPairs(nums = [3,2,1,4])",
        "countBeautifulPairs(nums = [10, 9, 2, 5, 3])",
        "countBeautifulPairs(nums = [15,2,6,3])",
        "countBeautifulPairs(nums=[21, 36, 10, 28])",
        "countBeautifulPairs(nums = [121, 11, 2, 4])",
        "countBeautifulPairs(nums = [17, 27, 1, 100])",
        "countBeautifulPairs(nums = [121, 12, 15, 63, 144])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums=[1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [1, 1, 0, 0, 1])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5, 1])",
        "semiOrderedPermutation(nums = [1, 1, 0, 1, 0, 0, 1])",
        "semiOrderedPermutation(nums=[1,2,3,1,3])",
        "semiOrderedPermutation(nums = [1, 4, 3, 2, 5, 1])",
        "semiOrderedPermutation(nums=[1, 2, 3, 4, 5, 0, 6, 7, 8, 9])",
        "semiOrderedPermutation(nums=[1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [5, 4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [2, 4, 5, 3])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 3, 3, 2, 2, 2])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 2, 1, 1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"100001\")",
        "maximumOddBinaryNumber(s = '100100')",
        "maximumOddBinaryNumber(s = \"1000110\")",
        "maximumOddBinaryNumber(s = \"000111100\")",
        "maximumOddBinaryNumber(s = \"010100100101\")",
        "maximumOddBinaryNumber(s = \"011100111001\")",
        "maximumOddBinaryNumber(s = \"110010010001010100001101101011\")",
        "maximumOddBinaryNumber(s
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "countCompleteSubarrays(nums = [2, 4, 4, 4, 4])",
        "countCompleteSubarrays(nums=[3,1,2,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 3, 4, 5])",
        "countCompleteSubarrays(nums = [2,4,4,6,6])",
        "countCompleteSubarrays(nums = [2, 2, 2, 1, 4, 2])"
    ],
    "sample_23": [
        "minLength(s = \"ABABCDABAB\")",
        "minLength(s = \"ABABCDABAB\")",
        "minLength(s = \"ABCAB\")",
        "minLength(s = \"ABABCDABABD\")",
        "minLength(s = \"ABCDABA\")",
        "minLength(s = \"ABABABCDABABCD\")",
        "minLength(s = \"ABAA\")",
        "minLength(s = \"AABBCCDDEE\")",
        "minLength(s = \"ABCABDABE\")",
        "minLength(s = \"ABABCABCBACDA\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [4,2,3,6,1,5])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [2, 4, 4, 6, 8, 8])",
        "countCompleteSubarrays(nums = [4,1,2,3])",
        "countCompleteSubarrays(nums = [0,1,0,1,0,1])",
        "countCompleteSubarrays(nums = [2, 4, 1, 4])",
        "countCompleteSubarrays(nums = [2,4,1,5,6])",
        "countCompleteSubarrays(nums = [1,1,0,1,0,1,1,0,0,0])",
        "countCompleteSubarrays(nums = [0,2,3,3,4])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 5)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 0, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 10)",
        "makeTheIntegerZero(num1 = 15, num2 = 7)",
        "makeTheIntegerZero(num1 = 30, num2 = 3)"
    ],
    "sample_100": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], target = 2)",
        "maximumJumps(nums = [10, 13, 12, 14, 15], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [5, 2, 1, 0, 1, 0, 1], target = 3)",
        "maximumJumps(nums = [5, 2, 1, 0, 1, 0, 1], target = 3)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 2, 3])",
        "maxIncreasingGroups(x = [1, 3, 5, 4, 7, 6])",
        "maxIncreasingGroups(x = [1, 3, 5, 4, 2, 2, 1])",
        "maxIncreasingGroups(x = [2, 3, 4, 7, 8, 10])",
        "maxIncreasingGroups(x = [1, 3, 6, 7])",
        "maxIncreasingGroups(x = [3, 4, 4, 6, 8, 10])",
        "maxIncreasingGroups(x = [1,3,1,3,1,3,1,3])",
        "maxIncreasingGroups(x = [2, 1, 4, 5, 8, 7])",
        "maxIncreasingGroups(x = [3, 1, 5, 7, 9, 8, 6, 4])",
        "maxIncreasingGroups(x = [2, 1, 5, 2, 1, 2, 4, 2, 3, 5, 5, 5, 5])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"UD\")",
        "furthestDistanceFromOrigin(moves = \"UDDDUDUU\")",
        "furthestDistanceFromOrigin(moves = \"UD\")",
        "furthestDistanceFromOrigin(moves = \"RURDL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"L\")",
        "furthestDistanceFromOrigin(moves = \"L\")",
        "furthestDistanceFromOrigin(moves = \"LLL_RRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LURDDLU\")",
        "furthestDistanceFromOrigin(moves = \"RRURDDLLL\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = \"11001\")",
        "maximumOddBinaryNumber(s = \"10001\")",
        "maximumOddBinaryNumber(s = \"1100111\")",
        "maximumOddBinaryNumber(s = \"1100111100\")",
        "maximumOddBinaryNumber(s=\"11101000\")",
        "maximumOddBinaryNumber(s = '01010100100101001')",
        "maximumOddBinaryNumber(s
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0,0]])",
        "colorTheArray(n = 5, queries = [[0,0],[1,2],[2,1],[3,2],[4,0]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [0, 3], [3, 4], [3, 0]])",
        "colorTheArray(n = 5, queries = [[0,0],[1,0],[3,1],[3,0],[4,1]])",
        "colorTheArray(n = 3, queries=[[0,1], [1,2], [0,0], [1,1]])",
        "colorTheArray(n = 5, queries=[[2, 2], [2, 2], [3, 1]])",
        "colorTheArray(n = 5, queries = [[3,1],[1,2],[0,0],[1,2],[0,3]])",
        "colorTheArray(n=3, queries=[[0,0], [1,1], [2,2], [3,3], [4,4], [5,5], [6,6], [7,7], [8,8], [9,9]])",
        "colorTheArray(n=5, queries=[[1,1],[1,1],[1,1],[2,1],[3,1],[1,1],[3,1],[3,1],[3,1],[3,1]])",
        "colorTheArray(n = 6, queries = [[0, 1], [1, 1], [0, 1], [0, 1], [2, 1], [0, 1], [3, 1], [1, 1], [2, 1], [3, 1]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [2, 1, 4, 3])",
        "findValueOfPartition(nums = [4, 2, 1, 3])",
        "findValueOfPartition(nums = [1, 2, 5, 4])",
        "findValueOfPartition(nums = [1, 2, 1])",
        "findValueOfPartition(nums = [1, 10, 3])",
        "findValueOfPartition(nums = [2, 5, 7, 10])",
        "findValueOfPartition(nums = [1, 10, 5, 2, 7, 15, 2, 8])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,0,1,0,1,1,1,0,1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [1,2,3,4,5,6,7])",
        "minimumIndex(nums = [3, 2, 1, 4])",
        "minimumIndex(nums = [1,2,1,3,1,1,1])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,8,9])",
        "minimumIndex(nums = [2, 4, 5, 6, 7])",
        "minimumIndex(nums = [1, 1, 2, 1, 3])",
        "minimumIndex(nums = [4, 4, 4, 3, 4, 4])",
        "minimumIndex(nums=[3,3,2,2,2,3,1,1,2,1])",
        "minimumIndex(nums = [3, 4, 1, 1, 0, 0, 2, 0, 0, 0, 1, 4, 0, 0])",
        "minimumIndex(nums = [0, 1, 3, 4, 5, 6, 1, 6, 4, 5, 6, 0])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 4)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 4, 4, 8, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 7, 11, 15], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 3, 1, 2], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 0, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 3, 4, 5, 5, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 5, 6, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 4, 4, 6, 7, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [3,2,7,14,18], k = 3)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 4, 1]])",
        "maximizeTheProfit(n = 2, offers = [[1, 2, 2], [3, 2, 1]])",
        "maximizeTheProfit(n = 2, offers = [[1,2,1],[2,3,1]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 2], [2, 4, 2], [3, 5, 5], [4, 6, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 4], [1, 4, 2], [3, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,4],[3,4,5],[1,5,20]])",
        "maximizeTheProfit(n = 6, offers = [[0, 2, 100], [1, 4, 100], [2, 5, 100], [3, 6, 100]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 3], [3, 6, 10], [2, 10, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 4], [1, 2, 10], [2, 3, 6], [4, 5, 7], [3, 5, 8]])",
        "maximizeTheProfit(n = 5, offers = offers)"
    ],
    "sample_202": [
        "minimumOperations(num = \"1000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"11000\")",
        "minimumOperations(num = \"121\")",
        "minimumOperations(num = \"10207\")",
        "minimumOperations(num
        "minimumOperations(num = \"11011101\")",
        "minimumOperations(num = \"012300000000000\")",
        "minimumOperations(num
        "minimumOperations(num = \"27000010000\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"142\")",
        "minimumOperations(num = \"9250\")",
        "minimumOperations(num = \"1254\")",
        "minimumOperations(num = \"231\")",
        "minimumOperations(num = \"25752575\")",
        "minimumOperations(num = \"625531\")",
        "minimumOperations(num = \"4025574\")",
        "minimumOperations(num = \"525355525\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1,2,100],[2,5,100],[3,4,100],[4,10,100]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 4, 2], [3, 6, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,2],[1,5,3],[2,4,2]])",
        "maximizeTheProfit(n=5, offers=[[1,2,100],[3,5,80],[2,4,90]])",
        "maximizeTheProfit(n = 10, offers = [[2,10,4],[3,5,6],[4,7,10]])",
        "maximizeTheProfit(n=4,offers=[[1,3,2],[3,1,1],[2,1,2],[3,3,1]])",
        "maximizeTheProfit(n = 4, offers = [[2,4,10], [1,1,10], [2,3,7], [3,2,5]])",
        "maximizeTheProfit(n = 7, offers = [[2,7,10],[4,5,9],[7,6,8]])",
        "maximizeTheProfit(n=10, offers=[[1,4,10], [2,1,1], [3,5,20]])",
        "maximizeTheProfit(n = 100, offers = [[5,10,3],[10,20,2],[5,5,4],[15,10,2]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 2, 5, 4], threshold = 4)",
        "longestAlternatingSubarray(nums=[4,2,5,7], threshold=4)",
        "longestAlternatingSubarray(nums = [2, 6, 2, 5, 1, 4, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,3,2,1,2,3,1,4,2], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,4,5,3,5,3,2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,5,3,1,4,2,5,3,5,1,2,4], threshold = 4)"
    ],
    "sample_203": [
        "minimumOperations(num = \"5\")",
        "minimumOperations(num = \"1000\")",
        "minimumOperations(num = \"60\")",
        "minimumOperations(num = \"54\")",
        "minimumOperations(num = \"01000\")",
        "minimumOperations(num = \"2450\")",
        "minimumOperations(num = \"9925\")",
        "minimumOperations(num = \"75500\")",
        "minimumOperations(num = \"25050\")",
        "minimumOperations(num = \"2416\")"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[2, 1], [1, 2], [1, 1], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 0], [4, 0], [1, 1], [3, 1], [3, 2]])",
        "colorTheArray(n=6, queries=[[1,0], [2,1], [3,2], [4,2], [5,3]])",
        "colorTheArray(n = 3, queries = [[1, 0], [0, 0], [0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n=5, queries=[[1, 1], [3, 2], [2, 4], [4, 1]])",
        "colorTheArray(n = 7, queries = [[1, 2], [1, 7], [1, 4], [2, 3], [2, 5], [2, 6]])",
        "colorTheArray(n = 10, queries = [[1, 0], [10, 0], [9, 0], [9, 1], [7, 0]])",
        "colorTheArray(n = 6, queries = [[3, 1],[1, 2],[2, 6],[3, 4],[4, 5],[3, 3],[4, 1]])",
        "colorTheArray(n = 6, queries = [[3, 0], [1, 1], [0, 3], [3, 2], [0, 4], [2, 2]])",
        "colorTheArray(n=10, queries=[[2,0],[3,0],[1,0],[0,0],[4,1],[3,1],[3,2],[4,0],[2,1],[2,2],[3,0]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 1])",
        "minimumIndex(nums = [1, 3, 1, 1, 3])",
        "minimumIndex(nums = [0, 1, 1, 0, 1])",
        "minimumIndex(nums=[1, 2, 1, 3])",
        "minimumIndex(nums = [2, 1, 3, 5, 6, 4, 0])",
        "minimumIndex(nums = [3, 4, 5, 6, 1, 2])",
        "minimumIndex(nums = [1,1,3,3,5,5,6,7,7])",
        "minimumIndex(nums = [4, 1, 3, 5, 6, 0])"
    ],
    "sample_102": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 3)",
        "maximumJumps(nums = [3, 3, 3, 1, 2, 2], target = 3)",
        "maximumJumps(nums = [1, 0, 2, 3], target = 3)",
        "maximumJumps(nums = [100, -23, -23, -23, 123], target = 5)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num=\"512301\")",
        "removeTrailingZeros(num = \"000512301\")",
        "removeTrailingZeros(num = \"0000000000000512301\")",
        "removeTrailingZeros(num = \"0000000000512301\")"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 10, b = 1)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 10, b = 3)",
        "distanceTraveled(a = 10, b = 0)",
        "distanceTraveled(a = 1, b = 5)",
        "distanceTraveled(a = 7, b = 1)",
        "distanceTraveled(a=2, b=2)",
        "distanceTraveled(a=3, b=2)",
        "distanceTraveled(a=11, b=1)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [0, 1, 2, 3, 4, 5, 6])",
        "findValueOfPartition(a = [3, 2, 5, 1, 4])",
        "findValueOfPartition(a = [1, 3, 2, 6])",
        "findValueOfPartition(a = [10, 1, 2, 3])",
        "findValueOfPartition(a = [0, 2, 3, 7])",
        "findValueOfPartition(a=[1, 2, 5, 6, 3])",
        "findValueOfPartition(a=[1,2,3,4,1,3,4,3,3,1])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 4, 4, 5])",
        "distinctDifferenceArray(nums = [-1, 2, 3, 1])",
        "distinctDifferenceArray(nums=[1, 1, 3, 2, 3])",
        "distinctDifferenceArray(nums = [-2, -3, 4, 3, 2, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 4, 4, 5, 7, 8, 8])",
        "distinctDifferenceArray(nums = [3, 1, 1, 3, 2, 1])",
        "distinctDifferenceArray(nums = [5, 1, 3, 5, 1, 4, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 4, 6, 8, 8, 8, 10])",
        "distinctDifferenceArray(nums = [7, 2, 4, 10, 6, 8, 9, 12, 3, 11, 15, 5, 13, 14])"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 3, 2, 4, 2])",
        "minimumIndex(nums = [2, 2, 1, 2, 0, 2, 1])",
        "minimumIndex(nums = [1,2,3,4,3])",
        "minimumIndex(nums = [2, 2, 2, 3, 3])",
        "minimumIndex(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "minimumIndex(nums = [5, 7, 5, 9, 8])",
        "minimumIndex(nums = [3, 4, 5, 2, 4, 9, 8])",
        "minimumIndex(nums = [1, 3, 5, 2, 1, 2, 5, 7, 7])",
        "minimumIndex(nums = [0, 3, 4, 5, 3, 1, 6, 7, 8, 9])",
        "minimumIndex(nums = [2, 2, 2, 2, 1, 3, 4, 4, 4, 5, 6, 7, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"L\")",
        "furthestDistanceFromOrigin(moves=\"LLL\")",
        "furthestDistanceFromOrigin(moves = \"RURD\")",
        "furthestDistanceFromOrigin(moves=\"LL\")",
        "furthestDistanceFromOrigin(moves=\"L\")",
        "furthestDistanceFromOrigin(moves=\"RUD\")",
        "furthestDistanceFromOrigin(moves = \"RRDDRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLLLRLLR\")",
        "furthestDistanceFromOrigin(moves = \"L, L, R, R\")",
        "furthestDistanceFromOrigin(moves = \"LULLLLLLRRR\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abcd\")",
        "minimizedStringLength(s = \"aaa\")",
        "minimizedStringLength(s = \"abb\")",
        "minimizedStringLength(s = \"aaaa\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"bbb\")",
        "minimizedStringLength(s = \"a\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [2, -1, 1, 2, 2], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 4)",
        "checkArray(nums = [1,2,3,4], k = 1)",
        "checkArray(nums = [2, 4, 1, 2, 5, 7], k = 3)",
        "checkArray(nums = [3, 2, 1, 2, 3], k = 2)",
        "checkArray(nums = [1,2,3,4,5,2], k = 3)",
        "checkArray(nums = [1, 0, 3, -2], k = 1)",
        "checkArray(nums = [1, 0, 2, 1, -6, 5], k = 3)",
        "checkArray(nums = [5, 3, 5, 3, 2, 3, 1], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [100, 100, 100])",
        "maxIncreasingGroups(usageLimits = [1, 3, 2, 4])",
        "maxIncreasingGroups(usageLimits = [1, 2, 1, 2, 1, 2, 1, 2])",
        "maxIncreasingGroups(usageLimits = [2, 3, 3, 3, 2])",
        "maxIncreasingGroups(usageLimits = [0, 1, 2, 4, 3])",
        "maxIncreasingGroups(usageLimits = [1,1,2,3,4,4,5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 4, 5, 4])",
        "maxIncreasingGroups(usageLimits = [2,1,5,10,20])",
        "maxIncreasingGroups(usageLimits = [3,3,3,3,1,3])",
        "maxIncreasingGroups(usageLimits = [1, 3, 2, 2, 2, 3, 3])"
    ],
    "sample_206": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"5\")",
        "minimumOperations(num = \"555\")",
        "minimumOperations(num = \"112\")",
        "minimumOperations(num
        "minimumOperations(num = \"457\")",
        "minimumOperations(num = \"5250\")",
        "minimumOperations(num = \"9912\")",
        "minimumOperations(num = \"4121\")",
        "minimumOperations(num = \"4242424242424242\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1])"
    ],
    "sample_38": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"aaabbbccc\")",
        "minimumCost(s = \"abacab\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s=\"aab\")",
        "minimumCost(s = \"baaabaaac\")",
        "minimumCost(s = \"abacadefedefeg\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2])",
        "maxIncreasingGroups(usageLimits = [1, 3, 6, 10, 15, 21])",
        "maxIncreasingGroups(usageLimits = [9, 10, 11, 12])",
        "maxIncreasingGroups(usageLimits = [3, 4, 6, 10, 12])",
        "maxIncreasingGroups(usageLimits = [1, 4, 5, 10, 15])",
        "maxIncreasingGroups(usageLimits = [3, 4, 10, 11])",
        "maxIncreasingGroups(usageLimits = [5, 3, 10, 20])",
        "maxIncreasingGroups(usageLimits = [10, 15, 20, 20, 30])",
        "maxIncreasingGroups(usageLimits = [1, 1, 3, 2, 3, 1, 2, 2])"
    ],
    "sample_53": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"aaa\")",
        "smallestString(s = \"cab\")",
        "smallestString(s = \"baabaa\")",
        "smallestString(s = \"zzzzz\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7], x = 3)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 2)",
        "minAbsoluteDifference(nums = [2,3,4,1], x = 1)",
        "minAbsoluteDifference(nums = [2,3,10,6,4,8,1], x = 5)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 3], x = 2)",
        "minAbsoluteDifference(nums = [1, 5, 7, 9], x = 3)",
        "minAbsoluteDifference(nums = [3, 6, -1, 10, 12], x = 3)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 7, 10], x = 2)",
        "minAbsoluteDifference(nums = [1,2,10,4,5], x = 5)",
        "minAbsoluteDifference(nums = [2, 4, 7, 1, 3], x = 2)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 4, offers = [[1, 2, 3], [2, 3, 2], [3, 4, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 3, 100], [2, 4, 60], [3, 2, 120], [1, 4, 80]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 20], [2, 4, 10], [4, 5, 70]])",
        "maximizeTheProfit(N = 5, offers = [[2, 3, 20], [2, 5, 10], [3, 5, 15]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 2], [2, 4, 3], [1, 5, 4], [4, 5, 6]])",
        "maximizeTheProfit(N = 5, offers = [\n  [1, 3, 2],\n  [2, 5, 3],\n  [3, 5, 5],\n  [4, 6, 1]\n])",
        "maximizeTheProfit(N = 7, offers = [[1, 3, 100], [2, 4, 80], [3, 5, 60], [2, 1, 15]])",
        "maximizeTheProfit(N = 4, offers = [[1, 3, 20], [2, 4, 25], [2, 2, 20], [4, 1, 25]])",
        "maximizeTheProfit(N = 5, offers = [[2, 1, 100], [4, 2, 100], [5, 2, 100], [3, 3, 100]])",
        "maximizeTheProfit(N = 4, offers = [[1, 10, 20], [1, 5, 10], [2, 10, 20], [2, 10, 50]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"a\", \"bb\", \"ccc\"], b = \"c\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\", \"d\"], b = \"c\")",
        "splitWordsBySeparator(a = [\"aaa\", \"bbb\", \"ccc\"], b = \"_\")",
        "splitWordsBySeparator(a = [\"ba\", \"nana\", \"z\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"a\", \"bb\", \"ccc\", \"d d\"], b = \" \")",
        "splitWordsBySeparator(a = [\"z\", \"x\", \"y\", \"a\", \"b\", \"c\"], b = \"ab\")",
        "splitWordsBySeparator(a = [\"x\", \"y\", \"z\", \"za\", \"ya\"], b = \"z\")",
        "splitWordsBySeparator(a = [\"a\", \"bc\", \"def\", \"ghi\", \"jklmn\", \"opq\"], b = \"l\")",
        "splitWordsBySeparator(a = [\"cat\", \"rabbit\", \"cow\", \"turtle\"], b = \"x\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512300')",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a = '5123001')",
        "removeTrailingZeros(a = '5123000000')",
        "removeTrailingZeros(a = '0000000000000000512301')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"nneven\")",
        "makeSmallestPalindrome(s = \"nevene\")",
        "makeSmallestPalindrome(s = \"abcc\")",
        "makeSmallestPalindrome(s = \"level\")",
        "makeSmallestPalindrome(s = \"abccccd\")",
        "makeSmallestPalindrome(s = \"geeksforgeeks\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 5, 2, 3, 7], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 5, 2, 6, 7], k = 1)",
        "longestEqualSubarray(nums = [3,2,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 3], k = 0)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 3, 3, 5, 5, 7, 7, 9], k = 2)",
        "longestEqualSubarray(nums = [0, 3, 2, 4, 5, 3, 1, 6, 2], k = 1)",
        "longestEqualSubarray(nums = [1,2,1,2,3,4,5,6,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1,2,3,3,3], k = 1)",
        "maximumBeauty(nums=[1, 2, 3, 4], k=1)",
        "maximumBeauty(nums = [1, 1, 4, 2, 1, 3], k = 2)",
        "maximumBeauty(nums = [3, 2, 4, 1, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1,2,4,2,5,7,2,4,9,0], k = 3)",
        "maximumBeauty(nums = [5,6,7,9,10], k = 1)",
        "maximumBeauty(nums = [1,3,1,3,2,2,2], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,2,1,7,7,4,8,9], k = 1)"
    ],
    "sample_163": [
        "maxSum(nums = [1,2,3])",
        "maxSum(nums=[1,2,3,4,5])",
        "maxSum(nums = [-1, 2])",
        "maxSum(nums = [555555, 555555, 555555])",
        "maxSum(nums = [0, 4, 2, 1, 9])",
        "maxSum(nums = [12, 34, 6, 5, 9, 10])",
        "maxSum(nums = [1,3,4,5,4,1])",
        "maxSum(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "maxSum(nums = [2, -1, 3, -4, 5, 1, 3])",
        "maxSum(nums = [124, 324, 54, 12, 4, 32, 1, 2, 3])"
    ],
    "sample_151": [
        "finalString(s = \"banana\")",
        "finalString(s = \"banana\")",
        "finalString(s = \"banana\")",
        "finalString(s = 'this is a string')",
        "finalString(s = \"astring\")",
        "finalString(s = \"Heeellooo\")",
        "finalString(s = \"i like to solve problems\")",
        "finalString(s = \"rabbiittiid\")",
        "finalString(s = \"qrcyizl\")",
        "finalString(s = \"o_O_O_O_o_O_o_O_O_O_O_o_O_O_O_o\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num=\"51230100\")"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = '00110011')",
        "maximumOddBinaryNumber(s = '010110')",
        "maximumOddBinaryNumber(s = \"1011100\")",
        "maximumOddBinaryNumber(s = \"000110\")",
        "maximumOddBinaryNumber(s = \"1001100110011\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s=\"0101001001\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-\", \"problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"Easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easy-problem', 'banana-problem'], separator = '-')",
        "splitWordsBySeparator(words = ['easy', 'problem', 'high'], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy, problem\", \"sure\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\", \"horse\", \"horse\", \"horse\"], separator = \"o\")",
        "splitWordsBySeparator(words = ['apple', 'banana', 'watermelon', 'orange'], separator = \"m\")",
        "splitWordsBySeparator(words = ['this is an easy problem', 'i', 'think', 'it', 'is'], separator = ' ')",
        "splitWordsBySeparator(words = [\"easy\", \"problem\", \"with\", \"bob\", \"the\", \"bobcat\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"this-is-a-string-with-\", \"a-separator-in-it\"], separator = \"-\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 2, 1, 2, 3], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 1, 4, 2], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6], K = 2)",
        "longestEqualSubarray(A = [1,2,3,3,3,4,5], K = 3)",
        "longestEqualSubarray(A=[1, 2, 3, 2, 1], K=0)",
        "longestEqualSubarray(A = [1, 2, 3, 3, 3, 4, 4, 4, 5], K = 1)",
        "longestEqualSubarray(A=[1,2,3,4,5,6,7,8,9], K=2)",
        "longestEqualSubarray(A = [4, 1, 4, 2, 5, 8], K = 0)",
        "longestEqualSubarray(A = [5, 10, 15, 20, 20, 25], K = 1)",
        "longestEqualSubarray(A = [0, 1, 2, 0, 1, 2, 0, 1, 2, 3], K = 2)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums=[1, 2, 3])",
        "countWays(nums = [5, 4, 3, 2, 1])",
        "countWays(nums = [3, 4, 5])",
        "countWays(nums = [1, 1, 1])",
        "countWays(nums = [2, 3, 5, 7])",
        "countWays(nums = [5, 3, 1, 2])",
        "countWays(nums=[10, 2, 5, 3])",
        "countWays(nums=[10, 5, 3, 8])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 4, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "sumIndicesWithKSetBits(nums = [2, 2, 2, 2, 5, 5, 7], k = 4)",
        "sumIndicesWithKSetBits(nums = [1, 2, 1, 3], k = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num=\"51230100\")",
        "removeTrailingZeros(num = '512300000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"Apple\", \"Banana\", \"Car\"], s = \"ABC\")",
        "isAcronym(words = [\"the\", \"horse\"], s = \"thr\")",
        "isAcronym(words = [\"apple\", \"bat\"], s = \"aepbl\")",
        "isAcronym(words = [\"raymond\", \"william\", \"jennifer\"], s = \"william\")",
        "isAcronym(words = [\"b\", \"aa\", \"baaa\"], s = \"a\")",
        "isAcronym(words = [\"c\", \"h\", \"a\", \"r\", \"s\", \"t\"], s = \"cheers\")",
        "isAcronym(words = [\"over\", \"here\", \"yes\"], s = \"yho\")",
        "isAcronym(words = [\"mac\", \"code\", \"code\"], s = \"macoc\")",
        "isAcronym(words = [\"html\", \"python\", \"ruby\", \"c++\"], s = \"python\")",
        "isAcronym(words = [\"mate\", \"dance\", \"dans\"], s = \"mad\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 4])",
        "countCompleteSubarrays(nums = [2, 4, 4, 6, 8, 8])",
        "countCompleteSubarrays(nums = [2,4,3,3,5,4])",
        "countCompleteSubarrays(nums = [2, 4, 6, 8, 10])",
        "countCompleteSubarrays(nums = [2, 4, 6, 8, 9])",
        "countCompleteSubarrays(nums = [1, 1, 1])",
        "countCompleteSubarrays(nums = [2, 4, 6, 8, 8, 10])",
        "countCompleteSubarrays(nums = [2, 4, 3, 3, 5, 4, 1])",
        "countCompleteSubarrays(nums = [4,1,2,1,2])",
        "countCompleteSubarrays(nums=[0, 1, 1, 1, 1])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 4, target = 2)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 2, target = 11)",
        "minimumPossibleSum(n = 6, target = 3)"
    ],
    "sample_147": [
        "finalString(s = \"banana\")",
        "finalString(s = \"this is a sample string\")",
        "finalString(s = \"ciao\")",
        "finalString(s = 'abcdefghi')",
        "finalString(s = \"i love ice cream\")",
        "finalString(s = \"icpc\")",
        "finalString(s = \"mynameisjohn\")",
        "finalString(s = \"pys\")",
        "finalString(s = 'cater')",
        "finalString(s = \"yatisixyac\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"nne\")",
        "makeSmallestPalindrome(s = \"nine\")",
        "makeSmallestPalindrome(s = \"aacecaaa\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"smash\")",
        "makeSmallestPalindrome(s = 'aeiou')"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 5, 3], [2, 10, 2], [5, 15, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 2], [2, 4, 1], [3, 6, 7], [2, 5, 3]])",
        "maximizeTheProfit(n = 3, offers = [[2, 10, 4], [1, 5, 3], [4, 1, 1]])",
        "maximizeTheProfit(n = 2, offers = [[1, 3, 20], [2, 4, 10], [3, 6, 70], [4, 8, 80], [5, 12, 100]])",
        "maximizeTheProfit(n = 10, offers = [[2, 3, 100], [5, 6, 90], [1, 2, 50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 2], [3, 6, 7], [1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 2, offers = [[0, 3, 20], [2, 5, 30], [1, 4, 80]])",
        "maximizeTheProfit(n = 4, offers = [\n    [1, 3, 2],\n    [2, 4, 2],\n    [2, 5, 2],\n    [3, 4, 1],\n    [4, 5, 3],\n    [5, 6, 1],\n])",
        "maximizeTheProfit(n = 5, offers = [[0, 3, 1], [1, 2, 0], [0, 3, 2], [1, 2, 1], [0, 4, 1], [1, 2, 2], [1, 4, 0]])",
        "maximizeTheProfit(n = 100, offers = [[10, 11, 10], [2, 2, 1], [3, 1, 2], [5, 1, 1], [1, 1, 10]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [3, 2, 1, 0, 4], target = 3)",
        "maximumJumps(nums = [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "maximumJumps(nums = [2, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [2, 1, 1, 0, 1, 0, 1], target = 2)",
        "maximumJumps(nums = [3, 2, 2, 1], target = 2)",
        "maximumJumps(nums = [1, 2, 5, 3, 4, 8, 2, 9, 6, 4, 1], target = 4)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,1,0,1,1,0,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,1,0,1,1,1,0,0,1,1,0,1,1,0,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,0,1,0,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,1,0,1,1,1,0,1,0,1,0,0,0,1,1,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,1,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,0,0,0,1,1,1,1,1,0,0,1,0,1,1,1,1,1,0,0,1,1,0,0,1,0,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,0,1,0,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"110111\")",
        "maximumOddBinaryNumber(s = '010010')",
        "maximumOddBinaryNumber(s = '010011')",
        "maximumOddBinaryNumber(s = '1000100')",
        "maximumOddBinaryNumber(s = '0000011')",
        "maximumOddBinaryNumber(s = \"11010110111\")",
        "maximumOddBinaryNumber(s = '01011010100')",
        "maximumOddBinaryNumber(s = '100111101100')",
        "maximumOddBinaryNumber(s = \"1101110000110001001101010111001\")"
    ],
    "sample_175": [
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 4, k = 11)",
        "minimumSum(n = 6, k = 4)",
        "minimumSum(n = 10, k = 20)",
        "minimumSum(n = 1, k = 4)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 0, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 4)",
        "makeTheIntegerZero(num1 = -2, num2 = 2)",
        "makeTheIntegerZero(num1 = -1, num2 = 5)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n=5, target=10)",
        "minimumPossibleSum(n = 3, target = 15)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [4, 2, 4, 5, 6], modulo = 10, k = 4)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 4)",
        "countInterestingSubarrays(nums = [2, 4, 3], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [2, 4, 5, 2, 6], modulo = 10, k = 5)",
        "countInterestingSubarrays(nums = [2,4,3,3,5,4,9], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 2], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 4, 3, 5], modulo = 7, k = 1)",
        "countInterestingSubarrays(nums = [1, 0, 0, 1, 0, 0, 0, 1, 0], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [0, 2, 2, 6, 8], modulo = 10, k = 5)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 4, 3, 2], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 4, 3], k = 3)",
        "maximumBeauty(nums = [1, 4, 5, 6, 2, 3], k = 2)",
        "maximumBeauty(nums = [2, 1, 3, 4, 5, 2], k = 2)",
        "maximumBeauty(nums = [4, 5, 0, -1], k = 3)",
        "maximumBeauty(nums = [2, 1, 7, 4, 8], k = 3)",
        "maximumBeauty(nums = [3,2,2,1,5], k = 2)",
        "maximumBeauty(nums = [3,1,2,4,1,6], k = 2)",
        "maximumBeauty(nums = [2, 7, 4, 1, 1, 8, 1, 7], k = 4)"
    ],
    "sample_148": [
        "finalString(s = \"ponter\")",
        "finalString(s = \"ponter\")",
        "finalString(s = \"python\")",
        "finalString(s = \"inter\")",
        "finalString(s = \"ponies\")",
        "finalString(s = 'pontier')",
        "finalString(s = 'poni')",
        "finalString(s = \"abcdefg\")",
        "finalString(s = 'ponita')",
        "finalString(s = \"My name is ponter\")"
    ],
    "sample_231": [
        "countWays(nums = [1, 1, 1])",
        "countWays(nums = [1, 2, 2, 3])",
        "countWays(nums = [0, 1, 3, 5])",
        "countWays(nums = [1,2,4])",
        "countWays(nums = [0, 1, 1, 2, 3, 5])",
        "countWays(nums = [1, 3, 1, 3])",
        "countWays(nums = [3, 6, 8, 10])",
        "countWays(nums = [2, 4, 6, 11])",
        "countWays(nums = [0, 4, 8, 12])",
        "countWays(nums = [5, 4, 1, 6, 5])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums=[1,2,3,4,5,6])",
        "countBeautifulPairs(nums = [3,5,1,4])",
        "countBeautifulPairs(nums=[1,3,2,4,6])",
        "countBeautifulPairs(nums=[5,17,8])",
        "countBeautifulPairs(nums = [2,6,4,9,8,1,3,5])",
        "countBeautifulPairs(nums = [32,16,2,8,6])",
        "countBeautifulPairs(nums = [48,34,20,14])",
        "countBeautifulPairs(nums = [156, 3, 12, 4, 16, 10, 2])",
        "countBeautifulPairs(nums=[101, 153, 210, 202, 103, 101])",
        "countBeautifulPairs(nums = [1728,151,462,121,14,15,30,20])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 1, num2 = 3)",
        "makeTheIntegerZero(num1 = 1, num2 = 3)",
        "makeTheIntegerZero(num1 = 1, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 7)",
        "makeTheIntegerZero(num1 = 10, num2 = 20)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 5, num2 = -3)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"apple\")",
        "makeSmallestPalindrome(s = \"bananas\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = \"aaabb\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"abbc\")",
        "makeSmallestPalindrome(s = 'bana')",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = 'eenne')"
    ],
    "sample_165": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"A\", \"B\", \"C\", \"D\"], s = \"ABC\")",
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\", \"n\"], s = \"banan\")",
        "isAcronym(words = [\"pandas\"], s = \"pd\")",
        "isAcronym(words = [\"apple\", \"grape\"], s = \"APPLE\")",
        "isAcronym(words = [\"test\", \"to\", \"be\", \"or\", \"not\", \"to\", \"be\", \"that\"], s = \"t\")",
        "isAcronym(words = ['con', 'teu'], s = 'cte')",
        "isAcronym(words = [\"monkey\", \"zen\", \"quick\"], s = \"qzy\")",
        "isAcronym(words = ['c', 's', 'd', 'm', 'r'], s = 'cm')",
        "isAcronym(words = [\"coat\", \"mow\", \"car\"], s = \"COT\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 0, 0, 0, 0, 1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 0, 1, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 1, 0, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,3,5,6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 3, 5, 6], k = 4)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 4, k = 8)",
        "minimumSum(n=4, k=6)",
        "minimumSum(n = 6, k = 20)",
        "minimumSum(n = 4, k = 16)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [-1, 0, 1, 2, 3])",
        "countWays(nums = [2, 4, 7])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 10])",
        "countWays(nums = [4, 2, 1, 5])",
        "countWays(nums = [1, 2, 5, 4])",
        "countWays(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6])",
        "countWays(nums = [5, 3, 2, 1, 5])",
        "countWays(nums = [4, -1, 2, -4])",
        "countWays(nums = [2, 6, 4, -5, -7])"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aaabbbccc\")",
        "minimumCost(s = \"ccc\")",
        "minimumCost(s = \"abacad\")",
        "minimumCost(s = \"bbba\")",
        "minimumCost(s = \"abracadabra\")",
        "minimumCost(s = \"abcbbc\")",
        "minimumCost(s = \"caaaabac\")",
        "minimumCost(s = \"abcbdbdab\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LLL\")",
        "furthestDistanceFromOrigin(moves = \"LLL\")",
        "furthestDistanceFromOrigin(moves = \"R_______\")",
        "furthestDistanceFromOrigin(moves = \"L__R___\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"_R__R_\")",
        "furthestDistanceFromOrigin(moves = \"L__R__LL__RR\")",
        "furthestDistanceFromOrigin(moves = \"RRR_R__L__RR\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 1)",
        "distanceTraveled(mainTank = 15, additionalTank = 3)",
        "distanceTraveled(mainTank = 8, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 3)",
        "distanceTraveled(mainTank = 21, additionalTank = 0)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [2, 4, 3, 5, 7])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [2, 4, 3, 6, 2, 5, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 0])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [2,4,6,2,5,1])",
        "countCompleteSubarrays(nums = [1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [2,2,2,2,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 1, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [9, 8, 4, 2, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,2,3,1], threshold = 0)",
        "longestAlternatingSubarray(nums = [9,2,4,8,1,10], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2, 2, 2, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [3,5,7,4,1,9], threshold = 4)",
        "longestAlternatingSubarray(nums = [6, 1, 4, 2, 5, 6], threshold = 1)",
        "longestAlternatingSubarray(nums = [9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7",
        "longestAlternatingSubarray(nums = [4, 10, 9, 12, 3, 100, 3, 9, 11, 6, 8], threshold = 5)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[0, 2], [5, 10], [13, 23], [24, 25]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 2]])",
        "numberOfPoints(nums = [[0, 10], [5, 12]])",
        "numberOfPoints(nums = [[1,2], [2,3], [3,4], [2,3]])",
        "numberOfPoints(nums = [[0,2], [1,2], [2,3]])",
        "numberOfPoints(nums = [[2, 2], [4, 5], [7, 9], [9, 12]])",
        "numberOfPoints(nums = [[2, 3], [1, 2], [3, 4], [3, 3]])",
        "numberOfPoints(nums = [[2, 3], [7, 11], [7, 12], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[0, 10], [0, 5], [2, 5], [0, 4]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [2, 1, 3, 4, 1, 2])",
        "countBeautifulPairs(nums = [2,4,6,8,10,34,56])",
        "countBeautifulPairs(nums=[12, 11, 13, 13])",
        "countBeautifulPairs(nums = [1,2,3,4,6,8,9,10,12,14,15])",
        "countBeautifulPairs(nums = [3, 1, 7, 9, 2, 8])",
        "countBeautifulPairs(nums = [45, 44, 46])",
        "countBeautifulPairs(nums = [21, 22, 23, 24, 25, 5, 6, 7, 8, 12, 13, 14, 15])",
        "countBeautifulPairs(nums = [3, 4, 1, 5, 2, 3, 4, 5, 3, 4, 1, 5, 2, 3, 4, 5, 3, 4, 1, 5, 2, 3, 4, 5])",
        "countBeautifulPairs(nums=[12,14,16,18,20,21,22,25,27,29,30,32,33,34,36,39,40,41,42,43,44,46,48,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99])",
        "countBeautifulPairs(nums = [1771, 5779, 4951, 4423, 4437, 3009, 3443, 2883, 3673, 3627, 4687, 3059, 3527, 3051, 4609, 2419, 3239, 3071, 3141, 2727, 3819, 2951, 3241, 4469, 3447, 4867, 2219, 4901, 3493, 4177, 2351, 3841, 2123, 4751, 2957, 4327, 3031, 2111, 3473, 4033, 3269, 3667, 2837, 2251, 2533, 2499, 2801, 4011, 2911, 4959, 3477, 2989, 2803, 4321, 3833, 3723, 2529, 4963, 3611, 3193, 2483, 3149, 2397, 4779, 2327, 4893, 4499, 2493, 3543, 2263, 3173, 3377, 3813, 3013, 2057, 2659, 3773, 3537, 2227, 4039, 2511, 3807, 4059, 2471, 4267, 2917, 2711, 4861, 4303, 3397, 2017, 4987, 4167, 4833, 2703, 4027, 2163, 2867, 358"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,2,4,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 1], t = 1)",
        "longestAlternatingSubarray(nums = [10,9,2,5,3,7,101,18], t = 100)",
        "longestAlternatingSubarray(nums=[1,0,1,1,0,1], t=1)",
        "longestAlternatingSubarray(nums = [3, 5, 1, 2, 3], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,2,3,1,4,2,3,3], t = 1)",
        "longestAlternatingSubarray(nums = [2,2,2,4,2], t = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,1], t = 1)",
        "longestAlternatingSubarray(nums=[5, 2, 4, 1, 3], t=1)",
        "longestAlternatingSubarray(nums = [3, 1, 1, 3, 2, 5, 5, 4], t = 5)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"aaabcc\")",
        "minimumCost(s = \"aaabcc\")",
        "minimumCost(s = \"pqrst\")",
        "minimumCost(s = \"catcowcat\")",
        "minimumCost(s = \"baaabaa\")",
        "minimumCost(s = \"abcaaaab\")"
    ],
    "sample_21": [
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABEF\")",
        "minLength(s = \"ABAACD\")",
        "minLength(s = \"ABABCDD\")",
        "minLength(s = \"ABABCDCDEF\")",
        "minLength(s = \"ABABABCDABABABAB\")",
        "minLength(s = \"ABD\")",
        "minLength(s = \"abCDab\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [2, 4, 3], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [2,4,3,3], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 3, 2, 1], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 3], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums=[5, 2, 6, 4], modulo=10, k=3)",
        "countInterestingSubarrays(nums=[1, 2, 2, 4, 3, 5], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [0,2,4,0], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [2, 2, 2, 4, 3], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [3,4,7,8,1], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [4,6,4,4,4,2,6,2,6,4,2,4,2], modulo = 10, k = 2)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[1, 0]])",
        "colorTheArray(n=1, queries=[[0, 0]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n = 3, queries = [[0, 0], [0, 0], [0, 0]])",
        "colorTheArray(n = 2, queries = [[1, 2], [0, 0]])",
        "colorTheArray(n = 3, queries = [[1, 2], [1, 3], [3, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 0], [0, 1], [0, 0]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [0, 1], [1, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [0, 1], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [3, 1], [1, 1], [1, 2], [2, 2], [3, 3], [3, 4]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2], nums2 = [2, 3])",
        "maxNonDecreasingLength(nums1 = [10, 9, 2, 5, 3, 7, 101, 18], nums2 = [2, 3, 1, 2, 4])",
        "maxNonDecreasingLength(nums1 = [1,2,3,4], nums2 = [5,6,7,8])",
        "maxNonDecreasingLength(nums1 = [2, 1], nums2 = [2, 3])",
        "maxNonDecreasingLength(nums1 = [0, 1, 0], nums2 = [1, 0, 1])",
        "maxNonDecreasingLength(nums1 = [2, 4, 8], nums2 = [1, 3, 6])",
        "maxNonDecreasingLength(nums1 = [3, 4, 5, 1, 2], nums2 = [6, 2, 5, 4, 5])",
        "maxNonDecreasingLength(nums1 = [0, 3, 7, 10, 11], nums2 = [1, 2, 11, 15])",
        "maxNonDecreasingLength(nums1 = [1, 5, 3, 1, 1, 6, 4],\n                            nums2 = [1, 3, 2, 1, 4, 3, 2])",
        "maxNonDecreasingLength(nums1 = [10, 20, 10, 10, 10], nums2 = [5, 25, 15, 15])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 4, target = 3)",
        "minimumPossibleSum(n = 4, target = 100)",
        "minimumPossibleSum(n=3, target=8)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [3, 1, 2, 5, 4])",
        "findValueOfPartition(nums = [1, 5, 4, 3, 2])",
        "findValueOfPartition(nums = [1,2,3,4,6,8])",
        "findValueOfPartition(nums = [-1, 0, 1, 2, 3])",
        "findValueOfPartition(nums = [1,4,5,7,10])",
        "findValueOfPartition(nums = [1, 5, 2, 10, 7])",
        "findValueOfPartition(nums = [5, 3, 2, 8, 12, 13])",
        "findValueOfPartition(nums = [5, 3, 2, 1, 7, 2, 3, 4])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"UD\")",
        "furthestDistanceFromOrigin(moves = \"L\")",
        "furthestDistanceFromOrigin(moves = \"LRLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"RURDLU\")",
        "furthestDistanceFromOrigin(moves = \"L__RR__LLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRRLLRRL\")",
        "furthestDistanceFromOrigin(moves = \"L___R___L__R___\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLL_RRRRR_R_L_L_LL_RLLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"UDLURDLURRDUULRDUULULUR\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 3, 2, 3])",
        "minimumIndex(nums = [0, 3, 1, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 1])",
        "minimumIndex(nums = [3, 1, 2, 4, 0])",
        "minimumIndex(nums = [1, 1, 1, 2, 2])",
        "minimumIndex(nums = [3, 4, 2, 5, 1, 6])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 7, 8])",
        "minimumIndex(nums = [1, 3, 2, 2, 2, 4, 5, 5])",
        "minimumIndex(nums = [1, 3, 5, 5, 1, 2, 3, 3])",
        "minimumIndex(nums = [4, 1, 3, 3, 3, 1, 2, 2])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "semiOrderedPermutation(nums = [3, 1, 5, 4, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums=[1,2,3,4,5,6,7])",
        "semiOrderedPermutation(nums = [4, 1, 2, 5])",
        "semiOrderedPermutation(nums = [4, 1, 2, 5])",
        "semiOrderedPermutation(nums = [0, 1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 3, 5, 6, 2])"
    ],
    "sample_172": [
        "minimumSum(n=3, k=2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n = 6, k = 2)",
        "minimumSum(n = 10, k = 3)",
        "minimumSum(n=10, k=5)",
        "minimumSum(n=2, k=11)"
    ]
}