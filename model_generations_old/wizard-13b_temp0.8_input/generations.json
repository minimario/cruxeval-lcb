{
    "sample_178": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [1, 1, 5], [2, 3, 15]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [5, 6, 50]])",
        "maximizeTheProfit(n=5, offers=[(1, 2, 3), (2, 3, 4), (3, 4, 5)])",
        "maximizeTheProfit(n = 6, offers = [[2, 3, 1], [1, 2, 3], [3, 4, 2], [5, 6, 4]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 1], [1, 2, 5], [3, 4, 3], [2, 3, 2], [1, 5, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 5], [1, 2, 3], [2, 2, 4], [3, 3, 6]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 100], [1, 1, 75], [2, 3, 150]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 1], [1, 2, 3], [3, 4, 2], [4, 5, 5], [5, 1, 4]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 1], [3, 2, 3], [1, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 5], [1, 4, 8], [3, 5, 7], [3, 5, 7], [2, 3, 10], [1, 2, 5], [1, 4, 8], [3, 5, 7]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 3)",
        "canSplitArray(nums = [7,2,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 3)",
        "canSplitArray(nums=[1,2,3,4,5], m=10)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [2, 3, 1, 2, 4, 3], k = 3)",
        "checkArray(nums = [1, 2, 3, 2, 1], k = 3)",
        "checkArray(nums = [1, 1, 2, 2, 2], k = 2)",
        "checkArray(nums = [2, 2, 2, 1, 1, 1, 1], k = 3)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 5, 3], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 8, 16], k = 3)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"apple,orange,banana\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\", \"kiwi,mango,orange\"], separator = \",\")",
        "splitWordsBySeparator(words=[\"apple,banana,cherry\"], separator=\",\")",
        "splitWordsBySeparator(words = [\"apple|banana|cherry\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"apple,banana\", \"orange\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,b\", \"c,d\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,orange,grape\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a;b;c\", \"d;e;f\", \"g;h;i\"], separator = \";\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words=[\"a,b,c\", \"d;e;f\"], separator=\",\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 2, 3, 4, 4, 5])",
        "countWays(nums = [1, 2, 2, 3, 4, 4])",
        "countWays(nums = [1,1,2,2,3,3])",
        "countWays(nums = [1, 3, 2, 2, 1, 1, 3])",
        "countWays(nums = [1, 3, 2, 2, 1, 4])",
        "countWays(nums = [0, 0, 0])",
        "countWays(nums = [1,2,2,3,3,4,4,5])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minimumIndex(nums = [1,2,3,4,5,5,4,3,2,1])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "minimumIndex(nums = [1,2,3,3,4,4,5,5,6,6])",
        "minimumIndex(nums = [3,1,2,2,3])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 4, 4, 4, 4, 5])",
        "minimumIndex(nums = [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minimumIndex(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])",
        "minimumIndex(nums = [3, 2, 1, 3, 4, 3, 2, 1, 3])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,3],[6,7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [5, 7], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 6]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,9]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [1, 5], [4, 6]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,7]])",
        "numberOfPoints(nums = [[1,3], [2,4], [5,6], [4,5]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5])",
        "semiOrderedPermutation(nums = [4,1,3,2])",
        "semiOrderedPermutation(nums = [4,2,1,5,3])",
        "semiOrderedPermutation(nums = [5, 1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [5, 3, 2, 4, 1])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n=3, target=2)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 4, target = 5)"
    ],
    "sample_118": [
        "minimumIndex(nums = [0, 1, 0, 1, 1])",
        "minimumIndex(nums = [3, 4, 3, 2, 3, 1, 3, 4, 5])",
        "minimumIndex(nums = [3, 2, 1, 3, 3])",
        "minimumIndex(nums = [3, 1, 3, 3, 3, 1, 3])",
        "minimumIndex(nums = [3, 1, 3, 2, 3, 1, 3, 2, 3, 1, 3, 2, 3])",
        "minimumIndex(nums = [2, 3, 1, 2, 1, 2, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 4, 3, 1])",
        "minimumIndex(nums = [4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2])",
        "minimumIndex(nums = [1, 2, 3, 3, 4, 5, 6, 6, 7, 7, 7, 8, 9])",
        "minimumIndex(nums = [3, 4, 1, 2, 3, 1, 1, 2, 3, 3, 3])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 3)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1,3],[6,8],[2,4]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [10, 15]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [2, 4], [4, 6]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 2, 3], target = 0)"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 7)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 7)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [1,2,3,4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1,2,3], m = 3)",
        "canSplitArray(nums = [10, 15, 20, 25], m = 50)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [1, 1, 10], [2, 2, 15]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 2, 15], [3, 2, 20]])",
        "maximizeTheProfit(n = 6, offers = [[2, 3, 4], [4, 2, 5], [3, 3, 6]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [2, 3, 6], [1, 3, 4]])",
        "maximizeTheProfit(n=5, offers=[[2, 3, 4], [2, 1, 5], [3, 1, 7]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [2, 2, 2, 2, 2], k = 1)",
        "checkArray(nums = [1, 0, 1, 1, 0], k = 3)",
        "checkArray(nums = [2, 3, 3, 4, 4], k = 2)",
        "checkArray(nums = [2, 5, 5, 5, 4], k = 3)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,1,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 4, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,4,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,2,1,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,2,1,2], k = 2)",
        "longestEqualSubarray(nums=[1,2,1,3,2,1,4,1,5], k=3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,1,5,3], k = 3)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n=1, queries=[[0, 0]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 2]])",
        "colorTheArray(n=2, queries=[[1, 1], [0, 2]])"
    ],
    "sample_55": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kkddsbncd\")",
        "smallestString(s = \"kddsbncde\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kdsdcd\")",
        "smallestString(s = \"kdndsbcdd\")",
        "smallestString(s = \"zdsdcncd\")",
        "smallestString(s = \"kkddssbncdd\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 2, 4, 6], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 2, 4], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 1, 2, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], threshold = 3)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], threshold = 3)",
        "longestAlternatingSubarray(nums = [4, 2, 6, 5, 3, 7], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 2, 3, 3], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 2, 1, 2, 2, 2], threshold = 2)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 4])"
    ],
    "sample_22": [
        "minLength(s = \"ABCBD\")",
        "minLength(s = \"ABCBDAC\")",
        "minLength(s = \"ABCBDAC\")",
        "minLength(s = \"ABCBDAC\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ACCD\")",
        "minLength(s = \"AABBCC\")",
        "minLength(\"ADCB\")",
        "minLength(\"ABACD\")",
        "minLength(s = \"AABCDDCD\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abaacaba\")",
        "minimumCost(s = \"abaacaba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(\"ababa\")",
        "minimumCost(\"aba\")",
        "minimumCost(\"aabbccdd\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived=[1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 3, 1, 4, 5, 6])",
        "doesValidArrayExist(derived=[0, 1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [2, 3, 1, 4, 2, 1])",
        "doesValidArrayExist(derived=[0, 1, 1, 1, 1, 0, 0, 0])"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [2, 3, 1, 2, 4, 3], k = 3)",
        "checkArray(nums = [2, 3, 1, 2, 4, 3], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [3, 2, 1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums=[1,2,3,4,5], k=2)",
        "checkArray(nums = [2, 1, 3], k = 1)",
        "checkArray(nums = [1, 10, 5, 2], k = 2)",
        "checkArray(nums = [1, 1, 1, 1], k = 3)",
        "checkArray(nums = [3, 1, 3, 1, 3, 1], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 7, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 2, 1], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 8, 4, 3], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 6, 4], target = 5)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3], k=1)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5], k=1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4], k=1)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)"
    ],
    "sample_205": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"0100\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"22\")",
        "minimumOperations(num = \"225\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"9009\")",
        "minimumOperations(num = \"3141592653589793\")",
        "minimumOperations(num = \"100100\")",
        "minimumOperations(num = \"10234\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"001010\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"00101101\")",
        "minimumOperations(s = \"11001010\")",
        "minimumOperations(s = \"0010010011\")",
        "minimumOperations(s = \"251002\")",
        "minimumOperations(s = \"00110021\")",
        "minimumOperations(s = \"0100101011010110\")",
        "minimumOperations(s = \"10110001\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5, 6])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "semiOrderedPermutation(nums = [n for n in range(1, 5)])",
        "semiOrderedPermutation(nums = [n-i for i in range(n+1)])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 1, 5, 3])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRRLA\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"RLR\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLRLRLRRR\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"United\", \"Nations\", \"Organization\"], s = \"UNO\")",
        "isAcronym(words = [\"Portable\", \"Analyzer\", \"Notation\"], s = \"PAN\")",
        "isAcronym(words = [\"Portable\", \"Annotations\", \"for\", \"Java\"], s = \"PANA\")",
        "isAcronym(words = [\"radar\", \"sonar\", \"lidar\"], s = \"radarsonarlidar\")",
        "isAcronym(words = [\"port\", \"Aire\", \"Television\"], s = \"PAAT\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [4, 2, 3, 1], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [4, 2, 6, 5, 3, 2, 6], modulo = 9, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [2, 2, 4, 5, 2, 2], modulo = 3, k = 2)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48])",
        "countBeautifulPairs(nums = [12, 24, 36, 48])",
        "countBeautifulPairs(nums = [12, 24, 26, 32])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 55, 66, 78, 87])",
        "countBeautifulPairs(nums = [34, 56, 78, 90, 123, 456])",
        "countBeautifulPairs(nums = [32, 57, 89, 91])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1,1,1,1,1], target = 3)",
        "maximumJumps(nums = [1,2,3], target = 0)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 72])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 67])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 55, 66])",
        "countBeautifulPairs(nums = [2, 7, 4, 1])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABABCDABCD\")",
        "minLength(s = \"ACBD\")",
        "minLength(s = \"ABCDBD\")",
        "minLength(s = \"ABCDAC\")"
    ],
    "sample_150": [
        "finalString(s = \"python\")",
        "finalString(s = \"python\")",
        "finalString(s = \"python\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"this is a test\")",
        "finalString(s = \"program\")",
        "finalString(s = \"program\")",
        "finalString(s = \"rotate\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10])",
        "findValueOfPartition(nums = [1, 5, 3, 10])",
        "findValueOfPartition(nums = [1, 5, 3, 10])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 8])",
        "findValueOfPartition(nums = [1, 5, 10, 20, 30])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n=1, queries=[[0, 1]])",
        "colorTheArray(n=1, queries=[[0, 1]])",
        "colorTheArray(n = 1, queries = [[1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n=4, queries=[[2, 1], [1, 2], [3, 1], [3, 3]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 9)",
        "minimumPossibleSum(n = 3, target = 8)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 6, k = 5)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 3, 4, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 7, 8, 9, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 8, 9, 10, 12, 14], target = 10)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 7)",
        "canSplitArray(nums = [2, 3, 4, 5], m = 6)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [6, 1, 5, 6], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 6)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12], t = 6)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 2, 1], t = 2)",
        "longestAlternatingSubarray(nums=[1,2,3,4,5,6,7,8,9], t=5)",
        "longestAlternatingSubarray(nums = [0,1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray(nums = [2,2,2,2,2], t = 1)",
        "longestAlternatingSubarray(nums = [2,1,2,1,2,1,2], t = 2)",
        "longestAlternatingSubarray(nums = [1, 1, 0, 0, 1, 1, 0, 0], t = 1)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512300100\")",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '5123000100')"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 15, b = 5)",
        "makeTheIntegerZero(a = 15, b = 5)",
        "makeTheIntegerZero(a = 12, b = 4)",
        "makeTheIntegerZero(a = 7, b = 2)",
        "makeTheIntegerZero(a = 7, b = 2)",
        "makeTheIntegerZero(a = 12, b = 3)",
        "makeTheIntegerZero(a = 15, b = 6)",
        "makeTheIntegerZero(a = 20, b = 5)",
        "makeTheIntegerZero(a=12, b=4)",
        "makeTheIntegerZero(a = 20, b = 4)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [2, 3, 5], m = 6)"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [12, 23, 34, 45, 56])",
        "maxSum(nums = [3, 30, 34, 5, 9])",
        "maxSum(nums = [2, 3, 4, 5, 6, 7])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n=3, target=4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n=3, target=6)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 4, target = 10)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 5, 3, 9, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1,5,3,10,7,8])",
        "findValueOfPartition(nums = [1,5,3,9])",
        "findValueOfPartition(nums = [1, 5, 3, 9])",
        "findValueOfPartition(nums = [1,5,3,2,4])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findValueOfPartition(nums = [1, 5, 2, 3, 7])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [7, 8]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [7, 8]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [7, 8]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 9]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1,3],[2,5],[4,8]])",
        "numberOfPoints(nums = [[1,3],[2,4],[7,8]])",
        "numberOfPoints(nums = [[1,2], [3,5], [6,8], [10,10]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7], [1, 5], [6, 9]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 8]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 7]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [1, 5], [2, 6], [3, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 5]])",
        "numberOfPoints(nums = [[1, 3], [5, 6], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 4], [2, 4], [1, 5], [2, 5]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [2, 4], [5, 6]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one', 'two', 'three,four,five,six'], separator = ',')",
        "splitWordsBySeparator(words=[\"one\",\"two\",\"three,four,five,six\"], separator=\",\")",
        "splitWordsBySeparator(words=[\"one\",\"two\",\"three,four,five,six\"], separator=\",\")"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 100)",
        "minOperations(nums = [1, 2, 3], target = 4)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums=[1, 2, 3, 4, 5], k=3)",
        "checkArray(nums=[1, 2, 3, 4, 5], k=3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1, 0, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1"
    ],
    "sample_159": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1,2,3,4,5,6])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [12, 23, 34, 45, 56])",
        "maxSum(nums = [1,2,3,4,5,6,7])",
        "maxSum(nums = [2, 3, 4, 5, 6, 7])",
        "maxSum(nums = [2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [12, 23, 34, 45, 56, 67, 78])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,1,2,1,2,1])",
        "continuousSubarrays(A = [1,2,3,4,1,2,3])",
        "continuousSubarrays(A = [1,2,3,1,2,3,3])",
        "continuousSubarrays(A = [1, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(A = [1,1,1,2,1,1,3,3])",
        "continuousSubarrays(A = [1,2,3,4,1,2,3,4])",
        "continuousSubarrays(A = [1,2,3,4,1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(A = [1,1,2,2,3,1,1])",
        "continuousSubarrays(A = [2, 2, 2, 3, 3, 1, 1, 2, 2, 2])",
        "continuousSubarrays(A = [1,1,1,2,1,2,1,1,2,1,2,1,1,2,1,2])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 1])",
        "distinctDifferenceArray(nums = [1,2,3,1,2,3,4,4,4])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7, 9], b = [2, 4, 6, 8, 10])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 3, 2, 5], b = [2, 1, 4, 6])",
        "maxNonDecreasingLength(a = [1, 3, 5, 6, 7], b = [2, 4, 8, 9, 10])",
        "maxNonDecreasingLength(a = [1, 3, 5, 6, 8], b = [2, 4, 6, 8, 10])",
        "maxNonDecreasingLength(a = [1, 3, 5, 2, 4], b = [3, 5, 6, 7, 8])",
        "maxNonDecreasingLength(a = [1, 2, 3, 2, 1, 0, 3, 4, 5, 6], b = [1, 2, 3, 2, 1, 0, 3, 4, 5, 6])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank=10, additionalTank=0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)"
    ],
    "sample_160": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [10, 11, 12, 13, 14, 15])",
        "maxSum(nums = [2, 2, 2, 2, 2])",
        "maxSum(nums = [3, 2, 6, 5, 4])",
        "maxSum(nums = [3, 7, 2, 5, 1, 9])",
        "maxSum(nums = [2, 1, 5, 4, 3])",
        "maxSum(nums = [22, 33, 44, 55, 66])",
        "maxSum(nums = [3, 2, 1, 2, 1, 1, 1, 1, 1, 1])",
        "maxSum(nums = [10, 23, 2, 45, 67, 89])",
        "maxSum(nums = [17, 24, 36, 19, 15, 42])"
    ],
    "sample_52": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kkddsbncd\")",
        "smallestString(s = \"kkddsbncd\")",
        "smallestString(s = \"ddsbncd\")",
        "smallestString(s = \"kddsbndcd\")",
        "smallestString(s = \"kdcdsbncd\")",
        "smallestString(s = \"kdsdncd\")",
        "smallestString(s = \"kdksncd\")",
        "smallestString(s = \"kddebncd\")",
        "smallestString(s = \"kkddbbnncd\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 9])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 9])",
        "findValueOfPartition(nums = [1, 4, 5, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 3, 8, 6, 2])",
        "findValueOfPartition(nums = [2, 3, 5, 9])",
        "findValueOfPartition(nums = [1, 4, 10, 2, 8])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 7)",
        "makeTheIntegerZero(num1 = 3, num2 = 4)",
        "makeTheIntegerZero(num1 = 7, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 11)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,9]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,9]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [7, 8]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,7]])",
        "numberOfPoints(nums = [[1,3],[2,5],[7,8]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [1, 5], [5, 6]])",
        "numberOfPoints(nums = [[1, 5], [3, 7], [2, 6], [4, 8]])",
        "numberOfPoints(nums = [[1,2],[3,5],[6,7],[8,9],[10,11],[12,13]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 6], [5, 6], [5, 7], [6, 8], [7, 9]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 2)"
    ],
    "sample_40": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaacaba\")",
        "minimumCost(s = \"abaacaba\")",
        "minimumCost(s = \"abaacd\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived=[1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived=[0, 0, 0, 0, 1])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 3])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 3, 3, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 3, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 3, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 3, 4, 4, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4, 3, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 8, 5, 9], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 2, 7, 4, 6, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 5, 8, 6], target = 5)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"debitcard\")",
        "makeSmallestPalindrome(s = \"abba\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num='5123010000')",
        "removeTrailingZeros(num = '5123000')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,1,2,3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,1,2,3,4,5,6,1,2,3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,1,2,3,4,5,6,1,2,3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 5, k = 0)",
        "countInterestingSubarrays(nums = [4, 5, 0, -2, -3, 1], m = 5, k = 2)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 7)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 7, additionalTank = 3)",
        "distanceTraveled(mainTank=1, additionalTank=2)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [3, 1, 2, 4, 3], x = 2)",
        "minCost(A = [3, 5, 7, 9], x = 2)",
        "minCost(A = [3, 2, 6, 5, 4], x = 3)",
        "minCost(A = [2, 5, 1, 4], x = 2)",
        "minCost(A = [2, 5, 1, 8, 4], x = 2)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 3, 5, 7])",
        "maxIncreasingGroups(u = [1, 2, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [2, 3, 4, 5, 6, 7])",
        "maxIncreasingGroups(u = [2, 3, 3, 5, 5, 5, 6, 7])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, -1, 0, 1], k = 3)",
        "checkArray(nums = [3, 2, 2, 4], k = 2)",
        "checkArray(nums = [1, 1, 1, 0, 0, 0], k = 3)",
        "checkArray(nums = [2, 2, 1, 1, 0, 0], k = 3)",
        "checkArray(nums = [1, 0, 1, 0, 1, 0, 1], k = 3)",
        "checkArray(nums = [2, 1, 3, 5], k = 3)",
        "checkArray(nums = [1, 0, 0, 1, 1, 0, 1, 1], k = 3)",
        "checkArray(nums=[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], k=3)",
        "checkArray(nums = [1, 0, 2, 0, 3, 2, 1], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ADOBECAT\")",
        "minLength(s = \"ADOBECODEBANC\")",
        "minLength(s = \"ABCDBCDA\")",
        "minLength(s = \"AABBCD\")",
        "minLength(s = \"ADCDCBA\")",
        "minLength(s = \"ABAZCDXEFGCDAB\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4], target = 10)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 2, 3], target = 2)",
        "minOperations(nums = [1, 2, 3], target = 20)",
        "minOperations(nums = [1,2,3,4,5], target = 100)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 20)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello,world\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello,world\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello,world\", \"test\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello,world\", \"foo\", \"bar\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana\", \"cherry,orange\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello,world\", \"I'm\", \"here\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello-world\", \"goodbye-moon\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"hello, world\", \"I\", \"am\", \"a\", \"function\"], separator = \",\")"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbndcd\")",
        "smallestString(s = \"kddsbndcd\")",
        "smallestString(s = \"ddsbncd\")",
        "smallestString(s = \"kdsdncd\")",
        "smallestString(s = \"kdnsdbcd\")",
        "smallestString(s = \"dkdscbcd\")",
        "smallestString(s = \"ddssbncdkkd\")",
        "smallestString(s = \"abcdssdd\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"R_RLL_RRR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRRRR_L_\")",
        "furthestDistanceFromOrigin(moves = \"RL__RR__RL_\")",
        "furthestDistanceFromOrigin(moves = \"L_RR_LL__L_R_\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRLR_RRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RR_RR_LL__\")",
        "furthestDistanceFromOrigin(moves = \"LLR__RRR_L_RR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLRR__LLRRRL\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 100, num2 = 5)",
        "makeTheIntegerZero(num1 = 55, num2 = 1)"
    ],
    "sample_51": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbndcd\")",
        "smallestString(s = \"kdsdncd\")",
        "smallestString(s = 'kddsbndcd')",
        "smallestString(s = 'kddsbcd')",
        "smallestString(s = \"kdcdsbncd\")",
        "smallestString(s = \"dkhcddbsbncd\")"
    ],
    "sample_146": [
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello\")",
        "finalString(s = \"hello\")",
        "finalString(s = \"pinter\")",
        "finalString(s = \"hello, world\")",
        "finalString(s = 'painter')",
        "finalString(s = \"notebook\")",
        "finalString(s = \"inverse\")",
        "finalString(s=\"banana\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,1,3,4,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,1,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,2,1,1,1,1,1], k = 3)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 1)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums=[10, 10, 10], m=15)",
        "canSplitArray(nums = [1,2,2,4,4,5], m = 7)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 2, 1, 2])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [2, 5, 6, 7, 4, 2])",
        "numberOfGoodSubarraySplits(nums = [2, 2, 2, 1, 0, 0, 1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one:two:three', 'four:five', 'six'], separator = ':')",
        "splitWordsBySeparator(words = ['one#two', 'three##', 'four', 'five', 'six'], separator = '#')",
        "splitWordsBySeparator(words = ['one.two', 'three.four', 'five', 'six'], separator = '.')",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,,,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words=['one,two', 'three,,', 'four,,,five', 'six'], separator=',')",
        "splitWordsBySeparator(words = [\"one#two#three\", \"four\", \"five##six\"], separator = \"#\")",
        "splitWordsBySeparator(words = [\"one;two\", \"three,four\", \"five\", \"six\"], separator = \";,\")",
        "splitWordsBySeparator(words = [\"one-two-three\", \"four,five;six\"], separator = \",-;\")",
        "splitWordsBySeparator(words=[\"one|two\", \"three|\", \"|four|five|\", \"six\"], separator=\"|\")",
        "splitWordsBySeparator(words=[\"one,two,,,three,,four,,\", \"five,,,,six\"], separator=\",\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4,5,6,7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 3, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5,6,8,9], target = 9)"
    ],
    "sample_168": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words=[\"hello\", \"world\"], s=\"hww\")",
        "isAcronym(words = [\"Python\", \"Is\", \"Awesome\"], s = \"PIA\")",
        "isAcronym(words=[\"United\", \"States\", \"of\", \"America\"], s=\"USA\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"bppao\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"he\", \"is\", \"a\", \"boy\"], s = \"hbs\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hww\")",
        "isAcronym(words = [\"Hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"boss\", \"office\", \"security\"], s = \"bos\")",
        "isAcronym(words = [\"john\", \"doe\"], s = \"jdoe\")",
        "isAcronym(words = [\"elephant\", \"rattlesnake\", \"python\"], s = \"erp\")",
        "isAcronym(words = [\"port\", \"able\", \"of\", \"red\", \"yellow\"], s = \"pyre\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 3, 2, 5, 4])",
        "doesValidArrayExist(derived = [1, 3, 2, 4, 3])",
        "doesValidArrayExist(derived=[1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 1, 1])",
        "doesValidArrayExist(derived = [1, 3, 6, 10, 4, 2])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 2, 3, 1, 4, 0, 0])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abbac\")",
        "makeSmallestPalindrome(s = \"abbac\")",
        "makeSmallestPalindrome(s = \"abbac\")"
    ],
    "sample_50": [
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"zaaaab\")",
        "smallestString(s = \"zbab\")",
        "smallestString(s = \"zzaz\")",
        "smallestString(s = \"zzaz\")",
        "smallestString(s = \"abaabb\")",
        "smallestString(s = \"zzz\")",
        "smallestString(s = \"aaabaa\")",
        "smallestString(s = \"aaabaab\")",
        "smallestString(s = \"abaabba\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDCBA\")",
        "minLength(s = \"ABACCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ACDCDCBAA\")",
        "minLength(\"ACBCD\")",
        "minLength(s = \"ACBACD\")",
        "minLength(\"ABCDBACDC\")",
        "minLength(s = \"ADCBDA\")",
        "minLength(s = \"ACDBDACDCDACDA\")",
        "minLength(s = \"ACBDACDACDCDC\")"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [12, 23, 34, 45, 56])",
        "maxSum(nums = [12, 23, 34, 45, 56])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2, 5])",
        "semiOrderedPermutation(nums = [n for n in range(1,6)])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])"
    ],
    "sample_162": [
        "maxSum(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "maxSum(nums = [10, 7, 2, 8, 1])",
        "maxSum(nums = [10, 7, 2, 8, 1])",
        "maxSum(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0])",
        "maxSum(nums = [17, 23, 29, 53, 57, 71, 83, 97])",
        "maxSum(nums = [1, 10, 2, 20, 3, 30])",
        "maxSum(nums = [10, 100, 1000, 10000])",
        "maxSum(nums = [11, 71, 83, 99, 101])",
        "maxSum(nums = [3, 2, 9, 7, 5, 4, 6, 8, 1])",
        "maxSum(nums = [42, 11, 7, 87, 43, 29, 50, 63, 99, 48, 84, 83, 49, 61, 68, 56, 69, 35, 62, 65, 76, 27, 45, 54, 85, 60, 2, 52, 95, 64, 44, 6, 26, 19, 5, 36, 90, 41, 33, 34, 46, 89, 28, 39, 79, 94, 13, 25, 96, 98, 97, 59, 17, 15, 55, 75, 16, 8, 4, 38, 92, 86, 58, 93, 30, 12, 67, 72, 21, 74, 70, 91, 23, 71, 22, 10, 18, 31, 3, 78, 77, 80, 14, 53, 73, 40, 20, 24, 57, 37, 82, 51, 9, 66, 47, 32, 1, 78, 77, 80, 14, 53, 73, 40, 20, 24, 57, 37, 82, 51, 9, 66, 47, 32, 1, 78, 77, 80, 14, 53, 73, 40, 20, 24, 57, 37, 82, 51, 9, 66, 47, 32, 1, 78, 77, 80, 14, 53, 73, 40, 20, 24, 57, 37, 82, 51, 9, 66,"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1110\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = \"111011\")",
        "maximumOddBinaryNumber(s = '1111')",
        "maximumOddBinaryNumber(s = '0100')",
        "maximumOddBinaryNumber(s = \"11100011\")",
        "maximumOddBinaryNumber(s = \"111001\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 8, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 9, 9, 10, 10], target = 9)"
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words=[\"hello\", \"world\"], s=\"hw\")",
        "isAcronym(words=[\"hello\", \"world\"], s=\"hw\")",
        "isAcronym(words = [\"com\", \"puter\", \"science\"], s = \"cps\")",
        "isAcronym(words = [\"Portable\", \"Analyzer\", \"for\", \"Languages\"], s = \"PAL\")",
        "isAcronym(words=[\"programming\", \"language\"], s=\"pl\")",
        "isAcronym(words = [\"little\", \"big\", \"tasty\"], s = \"lbti\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank=5, additionalTank=1)",
        "distanceTraveled(mainTank=5, additionalTank=1)",
        "distanceTraveled(mainTank=10, additionalTank=2)",
        "distanceTraveled(mainTank=10, additionalTank=2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank=10, additionalTank=0)",
        "distanceTraveled(mainTank=10, additionalTank=1)",
        "distanceTraveled(mainTank=2, additionalTank=1)",
        "distanceTraveled(mainTank=4, additionalTank=1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(A = [1, 3, 5, 7, 9])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(A = [1, 3, 2, 5, 4])",
        "maxIncreasingGroups(A = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 5, 1])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank=10, additionalTank=2)",
        "distanceTraveled(mainTank = 7, additionalTank = 3)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 2, 1, 2, 1, 2, 2, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 5, 7, 9, 10], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abcd\")",
        "minimizedStringLength(s = \"aabbbccde\")",
        "minimizedStringLength(s = \"aaabbbb\")",
        "minimizedStringLength(s = \"abbccc\")",
        "minimizedStringLength(s = \"abbccc\")",
        "minimizedStringLength(s = \"treeabctree\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,1,3,4,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,5,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,1,2,1,2,1,2,1,2], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,2,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,5,3,2,1,3,1,4,5], k = 3)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n=5, queries=[[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]])",
        "colorTheArray(n=5, queries=[[1, 2], [2, 1], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 1], [4, 2], [5, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 1], [3, 2], [4, 2], [5, 2]])",
        "colorTheArray(n=5, queries=[[1, 2], [2, 1], [3, 3], [4, 2], [5, 1]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4,5,6,7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 3, 5, 1], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours=[4, 5, 6, 7], target=5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 1], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours=[3, 4, 2, 1, 4], target=4)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65])",
        "countBeautifulPairs(nums = [12, 21, 31, 42])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 32, 43])",
        "countBeautifulPairs(nums = [12, 21, 312, 4321])",
        "countBeautifulPairs(nums = [12, 21, 123, 442])",
        "countBeautifulPairs(nums = [12, 21, 12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 24, 35, 41, 53])",
        "countBeautifulPairs(nums = [22, 26, 89, 55, 43])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [2, 3, 2, 1])",
        "countWays(nums = [2, 1, 3, 2])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"00110\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"01010\")",
        "maximumOddBinaryNumber(s = \"110111\")",
        "maximumOddBinaryNumber(s = \"000101100\")",
        "maximumOddBinaryNumber(s = \"011001100110\")",
        "maximumOddBinaryNumber(s = \"000110100\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maximumTripletValue(nums = [1, -2, 3])",
        "maximumTripletValue(nums = [-3, -2, 0, 1, 2])",
        "maximumTripletValue(nums = [1, -5, 2, 3, 4])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [1,2,3,4], target = 3)",
        "maximumJumps(nums = [1, 2, 3], target = 0)"
    ],
    "sample_149": [
        "finalString(s = \"hello world\")",
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"instructions\")",
        "finalString(s = \"print\")",
        "finalString(s = \"rithtgns\")",
        "finalString(s = \"rtsn\")",
        "finalString(s = \"instruments\")",
        "finalString(s = \"hishab\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(A = [1, 1, 2, 2, 3])",
        "continuousSubarrays(A = [1,2,1,2,3,2,1])",
        "continuousSubarrays(A = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "continuousSubarrays(A = [1, 3, 1, 3, 2])",
        "continuousSubarrays(A = [1,2,3,4,5,6,7,8])",
        "continuousSubarrays(A = [1, 2, 1, 2, 1, 3, 4])",
        "continuousSubarrays(A = [1,2,3,4,1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(A = [1, 1, 1, 3, 3, 2, 2, 1, 2, 1, 2, 2])",
        "continuousSubarrays(A = [1,1,1,2,3,3,2,1,1,1,1,1,2,3,3,2,1,1,1])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 4, 4, 5, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 4, 5, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 4, 5, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 3, 2, 1, 2, 3])"
    ],
    "sample_228": [
        "countWays(nums = [1,2,3])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [0,1,3,4,5])",
        "countWays(nums = [1,1,2,3])",
        "countWays(nums=[0,1,2,3,4])",
        "countWays(nums=[0,1,2,3,4,5,6,7,8,9])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countWays(nums = [0, 2, 2, 1, 1])",
        "countWays(nums = [2, 3, 2, 2, 1, 1])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 4])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 4])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1,1,2,2,3,3])",
        "continuousSubarrays(a = [1,2,1,2,1])",
        "continuousSubarrays(a = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(a = [1, 2, 3, 4, 3, 2, 1])",
        "continuousSubarrays(a = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "continuousSubarrays(a = [2, 1, 2, 2, 2, 1])",
        "continuousSubarrays(a = [1,1,1,2,2,2,3,3,3,4,4,4])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 3, 2, 2, 1, 2, 2, 2])",
        "continuousSubarrays(nums = [1, 3, 2, 2, 1, 2, 2, 1])",
        "continuousSubarrays(nums = [1, 3, 2, 2, 1])",
        "continuousSubarrays(nums = [1, 3, 2, 1, 2, 2, 1])",
        "continuousSubarrays(nums = [1,2,3,4,5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1,2,3,1,2,3])",
        "continuousSubarrays(nums = [1, 1, 1, 1])",
        "continuousSubarrays(nums = [1,2,1,2,3,2,1,1,2,3])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 72, 84, 96])",
        "countBeautifulPairs(nums = [23, 45, 67, 89])",
        "countBeautifulPairs(nums = [12, 15, 20, 21, 28])",
        "countBeautifulPairs(nums = [12, 18, 20])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums=[1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"0001\")",
        "maximumOddBinaryNumber(s = \"010101\")",
        "maximumOddBinaryNumber(s = \"000111010\")",
        "maximumOddBinaryNumber(s = \"0001010\")",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = \"00100101\")",
        "maximumOddBinaryNumber(s = '00110100')",
        "maximumOddBinaryNumber(s = '10101010')",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"000101010110100\")"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,1,3,2])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1,4,4])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCDDABCDABCD\")",
        "minLength(\"ABCD\")",
        "minLength(s = \"ABABCDCDAB\")",
        "minLength(s = \"AABBCD\")",
        "minLength(s=\"ABCD\")",
        "minLength(s = \"ABCDABC\")",
        "minLength(s=\"ABCDABCDCD\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1,4,2,1,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 1, 4, 1])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 6)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 27, num2 = 9)",
        "makeTheIntegerZero(num1 = 16, num2 = 8)",
        "makeTheIntegerZero(num1 = 16, num2 = 4)",
        "makeTheIntegerZero(num1 = 18, num2 = 9)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [1, 2, 3], target = 1)",
        "maximumJumps(nums = [1,2,3,4], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maxIncreasingGroups(x = [1, 3, 2, 5, 4])",
        "maxIncreasingGroups(x = [3, 1, 4, 2, 5])",
        "maxIncreasingGroups(x = [4, 1, 3, 2, 5])",
        "maxIncreasingGroups(x = [2, 6, 4, 8, 10])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"RRRR_LLLL\")",
        "furthestDistanceFromOrigin(moves = \"R_L_RR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_L_R\")",
        "furthestDistanceFromOrigin(moves = \"R_RRLLL_R\")",
        "furthestDistanceFromOrigin(moves = \"R_RRRRLLLUUUU\")",
        "furthestDistanceFromOrigin(moves = \"RRR_L_L\")",
        "furthestDistanceFromOrigin(moves = \"RLR_RRR\")",
        "furthestDistanceFromOrigin(moves = \"LR__RLRR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRR__RLL_L\")",
        "furthestDistanceFromOrigin(moves = \"RLLL_RR_L\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"001011\")",
        "maximumOddBinaryNumber(s = \"1110\")",
        "maximumOddBinaryNumber(s = \"110111\")",
        "maximumOddBinaryNumber(s = \"1100010\")",
        "maximumOddBinaryNumber(s = \"00111010\")",
        "maximumOddBinaryNumber(s = \"00110010101010110110\")",
        "maximumOddBinaryNumber(s = \"010101111001010111\")"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n=5, queries=[[0,1],[1,2],[2,1],[3,2],[4,1]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n=3, queries=[[0, 1], [1, 0], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,1],[2,2]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 1], [1, 1], [2, 2]])",
        "colorTheArray(n=3, queries=[[0, 1], [1, 2], [0, 1], [2, 1], [1, 1]])",
        "colorTheArray(n=5, queries=[[1,2],[2,2],[1,1],[2,1],[1,1]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 9])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [1, 3, 5, 9, 11])",
        "findValueOfPartition(nums = [1, 5, 3, 8, 6])",
        "findValueOfPartition(nums = [1, 4, 6, 8, 2])",
        "findValueOfPartition(nums = [1, 3, 5, 9, 10, 14])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minimumIndex(nums = [1, 3, 5, 5, 7, 12, 14, 11])",
        "minimumIndex(nums = [2, 1, 2, 1, 1, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3])",
        "minimumIndex(nums = [1, 3, 5, 5, 7, 10, 10])",
        "minimumIndex(nums = [3, 3, 1, 2, 2, 2])",
        "minimumIndex(nums = [3,1,2,3,1,2])",
        "minimumIndex(nums = [1, 3, 5, 2, 6, 8, 9, 11])",
        "minimumIndex(nums = [1, 3, 5, 5, 7, 7, 8, 8, 9, 9, 9])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 6, 8, 9, 10, 12], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,4],[3,4,5],[4,5,6]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [1, 3, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 4, 5], [3, 6, 7], [4, 8, 9]])",
        "maximizeTheProfit(n=4, offers=[[1,3,2],[2,4,3],[3,5,4]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,2],[2,5,1],[3,1,3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 5, 3], [3, 7, 4], [4, 9, 5], [5, 11, 6]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,5],[2,3,4],[3,4,3]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"010101\")",
        "minimumOperations(num = \"225\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"1234567890\")",
        "minimumOperations(num = \"000000001\")",
        "minimumOperations(num = \"000000001\")",
        "minimumOperations(num = \"12245\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"123456789\")",
        "minimumOperations(num = \"150\")",
        "minimumOperations(num = \"1357\")",
        "minimumOperations(num = \"02550\")",
        "minimumOperations(num = \"100001\")",
        "minimumOperations(num = \"010101010101010101\")",
        "minimumOperations(num = \"121212121212\")",
        "minimumOperations(num = \"3453\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [2, 3, 200], [3, 4, 300]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n=3, offers=[[1, 1, 100], [2, 2, 200]])",
        "maximizeTheProfit(n=3, offers=[[1, 1, 5], [2, 2, 10], [3, 3, 15]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 100], [2, 2, 200], [3, 2, 300]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 100], [1, 2, 50], [3, 2, 40]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 100], [2, 2, 200], [3, 1, 100]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 100], [2, 1, 150], [3, 1, 200]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 2], [2, 1, 1], [3, 2, 3]])",
        "maximizeTheProfit(n=5, offers=[ [2,1,3], [3,2,5], [1,1,1] ])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12], threshold = 4)",
        "longestAlternatingSubarray(nums = [4, 2, 2, 6, 4, 4], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 2, 4, 6, 8], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 2, 2, 2, 1], threshold = 3)"
    ],
    "sample_203": [
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"9999\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"55\")",
        "minimumOperations(num = \"012345\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"345\")",
        "minimumOperations(num = \"001010\")",
        "minimumOperations(num = \"11111111111111111111111111111111111111111\")",
        "minimumOperations(num = \"99988877\")"
    ],
    "sample_11": [
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 3], [4, 4]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n=4, queries=[[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n=5, queries=[[1, 1], [2, 2], [3, 1], [4, 2], [5, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 3], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 1], [2, 2], [1, 1]])",
        "colorTheArray(n=5, queries=[[1, 1], [2, 1], [3, 1], [4, 2], [5, 2]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 2], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [4, 2], [5, 1], [3, 1]])",
        "colorTheArray(n=5, queries=[[1,1],[2,2],[3,3],[1,2],[4,4],[5,5],[4,3],[2,3]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [3, 3, 1, 3, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3])",
        "minimumIndex(nums = [4, 3, 2, 1, 1, 1, 2, 3, 4])",
        "minimumIndex(nums = [1, 1, 1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 2, 2, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 5, 5, 5])",
        "minimumIndex(nums = [1, 1, 3, 2, 2, 2, 3, 1])",
        "minimumIndex(nums = [3, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [2, 3, 1], target = 1, f = [-1] * 3)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '5123010000000')"
    ],
    "sample_57": [
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a=2, b=1)",
        "distanceTraveled(a=3, b=1)",
        "distanceTraveled(a=1, b=1)",
        "distanceTraveled(a = 4, b = 2)",
        "distanceTraveled(a = 10, b = 0)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 5, 3, 10, 7])",
        "findValueOfPartition(a = [1, 5, 3, 7])",
        "findValueOfPartition(a = [3, 1, 2, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4])",
        "findValueOfPartition(a = [1, 3, 5, 7, 9])",
        "findValueOfPartition(a = [1, 4, 10, 20, 50])",
        "findValueOfPartition(a = [10, 50, 15, 20, 30])",
        "findValueOfPartition(a = [3, 7, 2, 1, 5, 4])",
        "findValueOfPartition(a = [3, 4, 5, 7])",
        "findValueOfPartition(a = [5, 1, 3, 7, 9, 11])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,1,2,3,4,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 4, 3, 5, 4])"
    ],
    "sample_120": [
        "minimumIndex(nums = [0, 1, 0, 1, 1])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 2, 3, 4])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3])",
        "minimumIndex(nums = [4, 3, 2, 1, 4, 4, 4])",
        "minimumIndex(nums = [3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 1, 1, 3, 3, 3, 3, 3, 3, 3])",
        "minimumIndex(nums = [2, 2, 2, 2, 3, 3])",
        "minimumIndex(nums = [4, 5, 5, 4, 5, 6, 7, 8, 8])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves=\"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRLR\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"abca\")",
        "minimizedStringLength(s = \"abcabcdef\")",
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"aabccd\")",
        "minimizedStringLength(s = \"aabccddee\")",
        "minimizedStringLength(s = \"abcccc\")",
        "minimizedStringLength(s = \"leetcoder\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 1)",
        "checkArray(nums = [10, 5, 15], k = 3)",
        "checkArray(nums = [2, 3, 1, 2, 4, 3], k = 3)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [3, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, -1, 0, 0, 1], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 40, 50])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 2])",
        "maxIncreasingGroups(usageLimits = [5, 3, 1, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [10, 1, 15, 25, 5])",
        "maxIncreasingGroups(usageLimits = [3, 1, 1, 2, 2, 1, 3])",
        "maxIncreasingGroups(usageLimits = [10, 10, 1, 1])",
        "maxIncreasingGroups(usageLimits = [4, 6, 2, 8, 1])",
        "maxIncreasingGroups(usageLimits = [10, 2, 5, 6, 8, 1, 4])"
    ],
    "sample_206": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"2525\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"2250\")",
        "minimumOperations(num=\"2500\")",
        "minimumOperations(num = \"75502500\")",
        "minimumOperations(num = \"010011\")",
        "minimumOperations(num=\"5500\")",
        "minimumOperations(num
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 2, 2])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 3, 1, 4, 5, 0])",
        "doesValidArrayExist(derived = [3, 5, 2, 6, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1])"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(\"abaacd\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [10, 5, 20])",
        "maxIncreasingGroups(usageLimits = [2, 3, 7, 1])",
        "maxIncreasingGroups(usageLimits = [4, 6, 9, 12])"
    ],
    "sample_53": [
        "smallestString(s = \"zaabc\")",
        "smallestString(s = \"zbaabc\")",
        "smallestString(s = \"zyxwvutsrqponmlkjihgfedcba\")",
        "smallestString(s = \"cba\")",
        "smallestString(s = \"baabd\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"baab\")",
        "smallestString(s = \"baab\")",
        "smallestString(s = \"zabcd\")",
        "smallestString(s = \"zaaac\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 2)",
        "minAbsoluteDifference(nums=[1,2,3,4,5], x=2)",
        "minAbsoluteDifference(nums = [4,2,8,10], x = 3)",
        "minAbsoluteDifference(nums = [4,2,8,10], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 8, 10], x = 3)",
        "minAbsoluteDifference(nums = [4,2,7,1,5], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 7, 1, 5], x = 2)",
        "minAbsoluteDifference(nums = [4, 1, 10, 5, 3, 2], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[2, 3, 1], [3, 2, 2], [1, 5, 3]])",
        "maximizeTheProfit(N = 5, offers = [[2, 3, 1], [3, 4, 2], [4, 5, 3], [5, 6, 4]])",
        "maximizeTheProfit(N = 2, offers = [[1, 2, 3], [1, 3, 5], [1, 4, 7]])",
        "maximizeTheProfit(N = 5, offers = [[4, 2, 1], [3, 3, 2], [4, 3, 3]])",
        "maximizeTheProfit(N = 3, offers = [[3, 2, 1], [1, 2, 3], [3, 3, 2]])",
        "maximizeTheProfit(N = 5, offers = [[3, 5, 2], [1, 2, 3], [1, 3, 4], [2, 3, 5]])",
        "maximizeTheProfit(N = 5, offers = [[2, 3, 1], [3, 2, 2], [2, 5, 3], [1, 1, 1], [5, 3, 4], [4, 3, 2]])",
        "maximizeTheProfit(N = 4, offers = [[2,3,5],[1,4,7],[3,2,6]])",
        "maximizeTheProfit(N = 4, offers = [[3, 2, 10], [3, 1, 3], [3, 3, 4]])",
        "maximizeTheProfit(N = 5, offers = [[3, 2, 10], [2, 3, 20], [2, 3, 40], [1, 1, 5]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"apple,banana,cherry\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apple,banana,cherry\"], b = \",\")",
        "splitWordsBySeparator(a = [\"a,b,c\", \"d,e,f\"], b = \",\")",
        "splitWordsBySeparator(a = [\"hello,world\", \"goodbye\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apple, banana, orange\"], b = \", \")",
        "splitWordsBySeparator(a = [\"banana\", \"orange\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"hello world\", \"python\"], b = \" \")",
        "splitWordsBySeparator(a = [\"hello\", \"world\", \"how\", \"are\", \"you\"], b = \"o\")",
        "splitWordsBySeparator(a = [\"Hello, world!\", \"Goodbye, world!\"], b = \",\")",
        "splitWordsBySeparator(a = [\"Hello.World\", \"Hello,World\"], b = \".\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(\"512301000\")",
        "removeTrailingZeros(a = '5123001')",
        "removeTrailingZeros(a = \"512301000\")",
        "removeTrailingZeros(a = \"5123010\")",
        "removeTrailingZeros(a = '512301000000')",
        "removeTrailingZeros(a = '51230001000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,3,2,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,3,4,5,6,7,8], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,3,4,5,6,5,7,8,7], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,5,5,5,5,5,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,5,3,4,1,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,3,4,1,5,1], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums=[1,2,3,4,5], k=1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_163": [
        "maxSum(nums = [12, 23, 34, 45, 56])",
        "maxSum(nums = [])",
        "maxSum(nums = [12, 23, 34])",
        "maxSum(nums = [12, 23, 34])",
        "maxSum(nums = [3, 30, 34, 5, 9])",
        "maxSum(nums = [1, 3, 5, 7, 9, 11])",
        "maxSum(nums = [12345, 67890])",
        "maxSum(nums = [123, 456, 789, 234, 999, 555])",
        "maxSum(nums = [3, 5, 8, 1, 2, 7])",
        "maxSum(nums = [112, 987, 654, 321, 101, 99, 97, 86, 75])"
    ],
    "sample_151": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"python\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"reverse this\")",
        "finalString(s = \"istrng\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '5123001000')",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = \"5123001000\")",
        "removeTrailingZeros(num = '512300000001')",
        "removeTrailingZeros(num = \"51230000100000\")"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"001010\")",
        "maximumOddBinaryNumber(s = '00101')",
        "maximumOddBinaryNumber(s = \"0001110\")",
        "maximumOddBinaryNumber(s = \"111111\")",
        "maximumOddBinaryNumber(s = \"001111\")",
        "maximumOddBinaryNumber(s = \"0000011100111010\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = ['easy_problem'], separator = '_')",
        "splitWordsBySeparator(words = ['easy.problem'], separator = '.')",
        "splitWordsBySeparator(words = [\"easy|problem\"], separator = \"|\")",
        "splitWordsBySeparator(words = ['easy;problem'], separator = ';')"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,2,1], K = 1)",
        "longestEqualSubarray(A = [1,2,3,2,1], K = 2)",
        "longestEqualSubarray(A = [1,2,1,2,1,2,1], K = 0)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9], K = 2)",
        "longestEqualSubarray(A = [1,2,1,2,1,2,1], K = 1)",
        "longestEqualSubarray(A = [1,2,3,2,1,5,6,1,2,3,4], K = 3)",
        "longestEqualSubarray(A = [1,2,3,2,2,2,3], K = 1)",
        "longestEqualSubarray(A = [1,2,3,2,1,5,2,3,2,1], K = 3)",
        "longestEqualSubarray(A = [1,2,1,2,3,4,3,2,1], K = 3)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [2, 4, 6, 8])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [2, 3, 4, 5, 6])",
        "countWays(nums = [1, 1, 1, 2, 3, 4, 5])",
        "countWays(nums = [3,2,2,2,1,1])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8, 10, 12, 14], k = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512300100')",
        "removeTrailingZeros(num = '5123001000')",
        "removeTrailingZeros(num = '5123010000000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hello\", \"World\", \"Python\"], s = \"HWPy\")",
        "isAcronym(words = [\"apple\", \"pie\", \"orange\"], s = \"apoe\")",
        "isAcronym(words = [\"I\", \"Love\", \"Python\"], s = \"ILovePython\")",
        "isAcronym(words = [\"hey\", \"how\", \"are\", \"you\"], s = \"heyhareyou\")",
        "isAcronym(words = [\"S\", \"t\", \"a\", \"t\", \"e\"], s = \"State\")",
        "isAcronym(words = [\"cool\", \"office\", \"team\"], s = \"coot\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 1, target = 2)"
    ],
    "sample_147": [
        "finalString(s = \"python\")",
        "finalString(s = \"python\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"interesting\")",
        "finalString(s = \"interesting\")",
        "finalString(s = \"interview\")",
        "finalString(s = \"this is string example....wow!!!\")",
        "finalString(s = \"it's a dog eat dog world\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"level\")",
        "makeSmallestPalindrome(s = \"level\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])",
        "maximizeTheProfit(n=3, offers=[[1, 1, 10], [2, 2, 20], [3, 3, 30]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 3, 4], [3, 5, 10]])",
        "maximizeTheProfit(n=3, offers=[[1,2,3],[2,3,4],[3,4,5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 5], [2, 2, 8], [3, 3, 10]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [1, 3, 5], [2, 3, 4]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 1], [1, 2, 2], [3, 4, 3]])",
        "maximizeTheProfit(n=3, offers=[\n        [1, 2, 100],\n        [2, 3, 200],\n        [3, 4, 300]\n    ])",
        "maximizeTheProfit(n=6, offers=[[1, 2, 3], [2, 4, 5], [3, 5, 6]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3, dfs = cache(dfs))"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,1,2,3])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"01010\")",
        "maximumOddBinaryNumber(s = \"0011\")",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"00011010\")",
        "maximumOddBinaryNumber(s = '00101001')",
        "maximumOddBinaryNumber(s = \"11001100110011\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n=3, k=6)",
        "minimumSum(n=4, k=5)",
        "minimumSum(n=5, k=6)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 5)",
        "makeTheIntegerZero(num1 = 28, num2 = 6)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 4, target = 7)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,1,1,2,3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 1], modulo = 2, k = 1)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)"
    ],
    "sample_148": [
        "finalString(s = \"hello\")",
        "finalString(s = \"hello\")",
        "finalString(s = \"python\")",
        "finalString(s = \"potter\")",
        "finalString(s = \"pintor\")",
        "finalString(s = \"pinater\")",
        "finalString(s = \"hello, world!\")",
        "finalString(s = \"Hello World\")",
        "finalString(s = \"hellopointer\")",
        "finalString(s = \"ritter\")"
    ],
    "sample_231": [
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [0, 2, 3, 4])",
        "countWays(nums = [2, 0, 1])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34])",
        "countBeautifulPairs(nums = [12, 24, 36, 48])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 72])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 72, 84, 96])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65, 78, 87])",
        "countBeautifulPairs(nums = [12, 21, 23, 34, 45])",
        "countBeautifulPairs(nums = [12, 24, 26, 38, 49, 51])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 2)",
        "makeTheIntegerZero(num1 = 21, num2 = 7)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"global\", \"positioning\", \"system\"], s = \"gps\")",
        "isAcronym(words = [\"Ba\", \"na\", \"na\"], s = \"BANANA\")",
        "isAcronym(words = [\"polymerization\", \"molecular\", \"organic\"], s = \"moo\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,4,5,1,2,3,4,5])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 0)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5], k=1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13], k = 1)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 3, k = 3)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [-1, 0, 1, 2, 3, 4, 5, 6, 7])",
        "countWays(nums = [1, 3, 2, 3, 1])",
        "countWays(nums = [1, 3, 2, 2, 1])",
        "countWays(nums = [0, 1, 3, 5, 7])",
        "countWays(nums = [1, 3, 2, 3, 1, 2])",
        "countWays(nums = [1, 3, 6, 1, 2, 5, 1])"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"abaacaba\")",
        "minimumCost(\"aba\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"R_L\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LR__L_R\")",
        "furthestDistanceFromOrigin(moves = \"RLL_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_RR_R\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank=5, additionalTank=1)",
        "distanceTraveled(mainTank=10, additionalTank=2)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 20, additionalTank = 1)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 4, 5, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1,4,2,1])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1,4,4,4])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 2, 4, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 4, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 3, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [4, 2, 2, 6, 4, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12], threshold = 20)",
        "longestAlternatingSubarray(nums = [4, 3, 5, 7], threshold = 6)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [1, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1,3],[2,5],[3,4]])",
        "numberOfPoints(nums = [[-2, 2], [1, 4], [-3, 1]])",
        "numberOfPoints(nums = [[1,3],[2,3],[1,2]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [2, 6], [5, 6]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 72])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [23, 45, 67, 89])",
        "countBeautifulPairs(nums = [4, 6, 8, 10])",
        "countBeautifulPairs(nums = [12, 21, 31])",
        "countBeautifulPairs(nums = [22, 33, 44, 55])",
        "countBeautifulPairs(nums = [12, 24, 15, 10, 20, 30])",
        "countBeautifulPairs(nums = [2, 12, 4, 9, 4, 10])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], t = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 2, 2, 2, 3, 4], t = 2)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 5, 2, 6], t = 4)",
        "longestAlternatingSubarray(nums = [1, 5, 7, 2, 3, 6, 4, 5], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 2, 3, 3, 5, 5], t = 2)",
        "longestAlternatingSubarray(nums=[2, 6, 4, 1, 8, 10], t=5)",
        "longestAlternatingSubarray(nums = [1, 5, 7, 3, 9, 11, 5, 7, 3], t = 5)"
    ],
    "sample_36": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaacaba\")",
        "minimumCost(s = \"abaacaba\")",
        "minimumCost(s = \"abaacaba\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDBACD\")",
        "minLength(s = \"ABABCDCDAB\")",
        "minLength(s = \"ACBDABCD\")",
        "minLength(s = \"ABCDBD\")",
        "minLength(s = \"ABCDABCDDABCDCD\")",
        "minLength(s = \"ABABCDCDCDCD\")",
        "minLength(s = \"ABCDACCDA\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,1,1,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[1,2,3,2,1], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,1,1,1,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[1,2,3,1,2,3], modulo=2, k=1)",
        "countInterestingSubarrays(nums = [1,2,3,1,1,1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,1,1,2,2,2,2,3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 5, 7, 8], modulo = 3, k = 2)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n=1, queries=[[0, 1]])",
        "colorTheArray(n=1, queries=[[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 3]])",
        "colorTheArray(n=2, queries=[[0, 1], [1, 2]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7, 9], nums2 = [2, 4, 6, 8, 10])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7, 9], nums2 = [2, 4, 6, 8, 10])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 5], nums2 = [4, 6, 7, 9])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5], nums2 = [4, 6, 8])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 5], nums2 = [4, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 5], nums2 = [6, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 4, 7], nums2 = [2, 5, 3, 8, 6])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n=2, target=2)",
        "minimumPossibleSum(n=3, target=3)",
        "minimumPossibleSum(n=3, target=3)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1,3,5,7,9])",
        "findValueOfPartition(nums = [1, 5, 3, 10])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findValueOfPartition(nums = [1,5,3,10,7,8])",
        "findValueOfPartition(nums = [1, 3, 5, 9])",
        "findValueOfPartition(nums = [3, 4, 6, 9, 10])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"L_RRL_\")",
        "furthestDistanceFromOrigin(moves = \"RLL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"R_RR_RR_\")",
        "furthestDistanceFromOrigin(moves = \"LLLL_RRRRR\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L\")",
        "furthestDistanceFromOrigin(moves = \"RL_RLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRL_RLR_L_R\")",
        "furthestDistanceFromOrigin(moves = \"R_R_RRRRR_L_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"_RLRLR__RLR_R\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [3, 3, 1, 3, 3])",
        "minimumIndex(nums = [3, 3, 1, 3, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5])",
        "minimumIndex(nums = [1, 3, 5, 5, 7, 10])",
        "minimumIndex(nums = [1, 2, 3, 3, 4, 5, 5, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 1, 3, 2, 2, 2, 3, 1])",
        "minimumIndex(nums = [3, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [1, 1, 1, 3, 3, 3, 3, 3, 3])",
        "minimumIndex(nums = [3, 2, 2, 1, 3, 2, 2, 2, 1])",
        "minimumIndex(nums = [2, 3, 1, 2, 1, 3, 4, 3, 4])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n=3, k=1)",
        "minimumSum(n = 5, k = 6)"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,5,5])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 5, 7, 8, 8])",
        "alternatingSubarray(nums = [1, 3, 2, 4])",
        "alternatingSubarray(nums = [2, 2, 2, 1, 2, 2, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 2, 1, 2, 2, 1, 2])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(a = [[1, 3], [2, 4]])",
        "matrixSum(a = [[1, 5, 3], [2, 6, 4], [7, 8, 9]])",
        "matrixSum(a=[[0, 1, 2], [2, 3, 4]])",
        "matrixSum(a = [[4, 5, 2], [6, 2, 5], [7, 1, 8]])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0, 0, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 0, 0, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [0, 1, 1, 0], [1, 0, 0, 1]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a=[[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 3, 5], [2, 4, 6], [3, 6, 9]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1,2,3,4,5])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hi\"], x = \"o\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"cherry\", \"date\"], x=\"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"banana\"], x = \"an\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"a1b2\", s2 = \"b2a1\")",
        "canBeEqual(s1 = \"egiv\", s2 = \"levl\")",
        "canBeEqual(s1 = \"egivjy\", s2 = \"xyvjwi\")",
        "canBeEqual(s1 = \"egivpnyt\", s2 = \"typtnivge\")",
        "canBeEqual(s1 = \"eghbcd\", s2 = \"cdeghb\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"bdeca\")",
        "canBeEqual(s1 = \"lano\", s2 = \"ano\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 3, 1, 4, 1, 5])",
        "maxSubarrays(nums = [1, 3, 1, 4, 1, 5])",
        "maxSubarrays(nums = [1, 3, 1, 4, 1, 5])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 2)",
        "buyChoco(prices = [2, 4, 10], money = 8)",
        "buyChoco(prices = [1, 2, 5], money = 3)",
        "buyChoco(prices = [10, 20, 30, 40], money = 10)",
        "buyChoco(prices = [1, 3, 5], money = 5)",
        "buyChoco(prices = [2, 4, 6, 8], money = 3)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 2)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 2)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 2, r = 3)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2], l = 1, r = 2)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 1, r = 4)",
        "countSubMultisets(nums = [1,2,2,3], l = 2, r = 4)"
    ],
    "sample_322": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(123)",
        "isFascinating(n = 3)",
        "isFascinating(n = 6)",
        "isFascinating(n = 123456789)",
        "isFascinating(21)",
        "isFascinating(n = 100)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"aabcc\", s2 = \"abcabc\")",
        "canBeEqual(s1 = \"aab\", s2 = \"bbc\")",
        "canBeEqual(s1 = \"egivenn\", s2 = \"levin\")",
        "canBeEqual(s1 = \"egivpnyo\", s2 = \"hmticwzso\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [2, 3, 5, 6])",
        "minimumCoins(prices = [2, 5, 1, 3, 2])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 70)",
        "accountBalanceAfterPurchase(p = 40)",
        "accountBalanceAfterPurchase(p = 125)",
        "accountBalanceAfterPurchase(p = 125)",
        "accountBalanceAfterPurchase(p = 77)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [3, 2, 2, 3, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1,2,2,3,3,4,5])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7])",
        "minOperations(nums = [3, 2, 2, 3, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 3, 3])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,4,4])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1,2,1,2,1,2,1,2,1,2,1,2])",
        "alternatingSubarray(nums = [1,2,1,2,1,2,1,2,1])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5])"
    ],
    "sample_460": [
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)"
    ],
    "sample_247": [
        "minOperations(s1 = \"aba\", s2 = \"bcb\", x = 1)",
        "minOperations(s1 = \"aba\", s2 = \"bcb\", x = 1)",
        "minOperations(s1 = \"aba\", s2 = \"aba\", x = 1)",
        "minOperations(s1 = \"nneon\", s2 = \"nnnnee\", x = 2)",
        "minOperations(s1 = \"bacd\", s2 = \"bcda\", x = 2)",
        "minOperations(s1 = \"nnt\", s2 = \"nnt\", x = 2)",
        "minOperations(s1 = \"010\", s2 = \"101\", x = 1)",
        "minOperations(s1 = \"nnsn\", s2 = \"nssn\", x = 2)",
        "minOperations(s1 = \"xzzzzyyy\", s2 = \"xyyyyyyy\", x = 2)",
        "minOperations(s1 = \"xxxxyyyyzzzzyyy\", s2 = \"xyyyzzzzyxxxyyy\", x = 3)"
    ],
    "sample_340": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 4, y = 5, z = 3)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 5, y = 7, z = 3)",
        "longestString(x=3, y=5, z=2)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [2, 3, 4, 5, 1], k = 3)",
        "minOperations(nums=[1, 2, 3, 4, 5], k=3)",
        "minOperations(nums = [1, 2, 2, 2, 3], k = 2)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"ababcdc\")",
        "longestSemiRepetitiveSubstring(s = \"bbabcddbca\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 4, 5])",
        "isGood(a = [1, 2, 3, 4, 5])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(a = [1, 2, 2, 3, 3, 3])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10])",
        "isGood(a = [1, 2, 3, 4, 5, 1])",
        "isGood(a = [1, 2, 2, 3, 4, 4, 5, 5])",
        "isGood(a = [1, 1, 2, 3, 4, 4, 5, 5])",
        "isGood(a = [1, 1, 2, 3, 2, 4, 5, 4, 6])",
        "isGood(a = [1, 2, 3, 4, 5, 2, 6, 7, 8, 2, 9])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 20, m = 4)",
        "differenceOfSums(n = 15, m = 4)",
        "differenceOfSums(n = 30, m = 7)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024])",
        "minGroupsForValidAssignment(nums = [3, 2, 4, 1, 5, 1, 3, 2, 4, 1, 5])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"1\", \"2\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"acb\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"aa\", \"ba\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"baa\", \"bab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"ccb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbda\", \"cbad\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"ef\", \"dc\", \"ab\", \"xy\", \"yz\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"00111010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"01101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"001100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"001110101\", k = 2)",
        "shortestBeautifulSubstring(s = '011011011', k = 2)",
        "shortestBeautifulSubstring(s = \"1000111001\", k = 2)",
        "shortestBeautifulSubstring(s = \"01010101010101\", k = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 1, 3])",
        "minimumRightShifts(nums = [3, 1, 5, 4, 2])",
        "minimumRightShifts(nums = [3, 2, 1, 0, 4])",
        "minimumRightShifts(nums = [2, 3, 1, 4, 5, 6])",
        "minimumRightShifts(nums = [3, 2, 1])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"011010\")",
        "minimumSteps(s = \"1111000011110000\")",
        "minimumSteps(s = \"0001110101\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"aba\", s2 = \"bcb\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"acd\")",
        "findMinimumOperations(s1 = \"geek\", s2 = \"eke\", s3 = \"keek\")",
        "findMinimumOperations(s1 = \"geekforgeeks\", s2 = \"geeksquiz\", s3 = \"geek\")",
        "findMinimumOperations(s1 = \"cab\", s2 = \"ca\", s3 = \"bac\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"bac\", s3 = \"bad\")",
        "findMinimumOperations(s1 = \"car\", s2 = \"bar\", s3 = \"tar\")",
        "findMinimumOperations(s1 = \"dab\", s2 = \"abd\", s3 = \"abcd\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcz\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"aba\")",
        "canMakeSubsequence(str1=\"ab\", str2=\"abc\")",
        "canMakeSubsequence(str1 = \"zebra\", str2 = \"ba\")"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [2, 1, 3])",
        "isGood(nums = [1, 3, 2, 4, 5])",
        "isGood(nums = [4, 1, 2, 3])",
        "isGood(nums = [3,1,2,4])",
        "isGood(nums = [2, 4, 1, 3, 5])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 8], moveTo = [9, 6])",
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [5, 8], moveTo = [6, 9])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom=[1, 2], moveTo=[3, 4])",
        "relocateMarbles(nums=[1,2,3,4,5,6,7,8,9], moveFrom=[1,3,5,7], moveTo=[8,6,4,2])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [3, 4], moveTo = [4, 5])",
        "relocateMarbles(nums = [5, 8, 9, 6, 5], moveFrom = [8], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 5, 6, 8, 9, 8], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])",
        "relocateMarbles(nums = [8, 6, 9, 5, 8], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums=[5, 8, 6, 5, 9], moveFrom=[1, 3, 4], moveTo=[3, 2, 5])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 7)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 4, 4])",
        "minLengthAfterRemovals(nums = [1,1,3,3,5,5,7,7])",
        "minLengthAfterRemovals(nums = [1,1,3,3,5,5,7,7])",
        "minLengthAfterRemovals(nums = [3,3,3,7,2,2,7])",
        "minLengthAfterRemovals(nums = [1,1,3,3,5,5])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 4, 4, 6, 6])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,3,3,7,2,2,2])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5])",
        "minLengthAfterRemovals(nums = [2,2,2,3,3,3,4,4,4,5,5])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Alice 35\", \"Bob 25\", \"Charlie 70\", \"David 65\"])",
        "countSeniors(details = [\"John Doe 30\", \"Jane Doe 45\", \"Bob Smith 72\", \"Alice Johnson 55\"])",
        "countSeniors(details = [\"John Doe1980\", \"Jane Smith1990\", \"Tom Johnson1970\", \"Mary Johnson65\", \"Bob Johnson70\"])",
        "countSeniors(details = [\"John Doe (65)\", \"Jane Smith (55)\", \"Adam Jones (70)\"])",
        "countSeniors(details = [\"John Smith,62\", \"Jane Doe,65\", \"Bob Johnson,51\"])",
        "countSeniors(details=[\"John, 20\", \"Mary, 35\", \"Jane, 70\", \"Peter, 85\"])",
        "countSeniors(details=[\"John Doe 65\", \"Jane Doe 45\", \"Jack Frost 78\", \"Mary Poppins 80\"])",
        "countSeniors(details = [\"John Smith,23,M,1998\", \"Jane Doe,55,F,1967\", \"John Smith,23,M,2001\"])",
        "countSeniors(details = [\"John Doe 1992\", \"Jane Doe 1980\", \"Bob Smith 1979\", \"Mary Lee 1960\", \"Mark Johnson 1970\"])",
        "countSeniors(details = [\"John Smith-45\", \"Sarah Lee-70\", \"Tom Baker-35\", \"Megan Fox-80\", \"Clive Owen-55\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abacabad\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abacccab\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabab\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bab\")",
        "canBeEqual(s1 = \"a1b2\", s2 = \"b2a1\")",
        "canBeEqual(s1 = \"aaab\", s2 = \"abba\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"bb\", s3 = \"cc\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aac\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"b\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aab\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"aaaaa\", s2 = \"bbbbb\", s3 = \"ccccc\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 8, 9, 11], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 3, 1, 5, 4, 2, 6, 8], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 9, 3, 5, 5], target = 7)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 1])",
        "minimumSum(nums = [1, 2, 3, 4, 1])",
        "minimumSum(nums = [1, 3, 1])",
        "minimumSum(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])",
        "minimumSum(nums = [4, 2, 8, 5, 10])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"code\", \"for\", \"fun\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"orange\", \"banana\", \"grape\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"ananas\", \"ananab\", \"bananan\"])",
        "minimizeConcatenatedLength(words = [\"hello\", \"world\", \"example\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"bird\", \"sheep\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"xyz\", \"qwe\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"pie\", \"b\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"10101\", k = 3)",
        "shortestBeautifulSubstring(s = \"0110110\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = '000111000111', k = 3)",
        "shortestBeautifulSubstring(s = '0000111110000', k = 4)",
        "shortestBeautifulSubstring(s = '0010101010', k = 3)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101100111\", k = 3)",
        "shortestBeautifulSubstring(s = \"0011000101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011101100101000111011\", k = 3)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"hello\", \"world\", \"banana\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\"])",
        "minimizeConcatenatedLength(words=[\"apple\", \"banana\", \"orange\"])",
        "minimizeConcatenatedLength(words=[\"apple\", \"pie\", \"banana\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"pq\", \"hello\", \"world\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"cart\"])",
        "minimizeConcatenatedLength(words=[\"cat\", \"dog\", \"bird\", \"chicken\", \"elephant\"])",
        "minimizeConcatenatedLength(words=[\"aba\",\"cb\",\"ad\"])",
        "minimizeConcatenatedLength(words = [\"bcde\",\"abcd\",\"cde\",\"bcdef\"])",
        "minimizeConcatenatedLength(words = [\"cold\", \"door\", \"lamp\", \"moon\", \"wind\", \"wish\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 20, m = 7)",
        "differenceOfSums(n = 12, m = 3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,5,5])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,5,5])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,5,5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6])",
        "alternatingSubarray(nums = [1,2,1,2,3,2,1])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums=[1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [2, 3, 1, 4, 5])",
        "findMaximumLength(nums = [3, 1, 5, 2, 6])"
    ],
    "sample_302": [
        "countSeniors(details = [\"1990-01-01\", \"1970-02-01\", \"1980-12-31\"])",
        "countSeniors(details = [\"19900101\", \"20010101\", \"19800101\"])",
        "countSeniors(details = [\"John1990\", \"Sarah1970\", \"David1980\"])",
        "countSeniors(details = [\"19950720\", \"19960720\", \"19970720\", \"19980720\"])",
        "countSeniors(details = [\"1990-12-25T12:30:00Z\", \"1980-06-30T12:30:00Z\"])",
        "countSeniors(details = [\"19980101\", \"20040202\", \"19950303\"])",
        "countSeniors(details = [\"9123456789012\", \"9123456789034\", \"9123456789056\", \"9123456789078\", \"9123456789090\"])",
        "countSeniors(details = [\"Senior 1900\", \"Junior 1980\", \"Senior 1990\", \"Junior 2000\"])",
        "countSeniors(details = [\"19990101\", \"20030101\", \"20050101\", \"19880101\", \"20010101\"])",
        "countSeniors(details = [\"199005010000\", \"199907010000\", \"200005010000\", \"200105010000\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"a1b2\", s2 = \"b2a1\")",
        "canBeEqual(s1 = \"123\", s2 = \"321\")",
        "canBeEqual(s1 = \"123\", s2 = \"321\")",
        "canBeEqual(s1 = \"123\", s2 = \"132\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bba\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"5a1y\", s2 = \"5b1z\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 3, 5, 7, 9])",
        "minimumCoins(prices = [1, 3, 5, 7, 9])",
        "minimumCoins(prices = [3, 5, 7, 2, 10])",
        "minimumCoins(prices = [2, 5, 1, 1, 3])",
        "minimumCoins(prices = [1, 3, 2, 6, 1, 7])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(A = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(A = [1,1,1,1])",
        "minimumSeconds(A = [1,1,2,2,3,3,4,4])",
        "minimumSeconds(A = [3, 1, 1, 2, 2, 2])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"ghi\", \"jkl\", \"abc\", \"def\", \"ghi\", \"jkl\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"def\", \"ghi\", \"jkl\", \"abc\", \"def\", \"ghi\", \"jkl\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\", \"aaa\", \"bbb\", \"ccc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"abcc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"cd\", \"ef\", \"gh\", \"ab\", \"cd\", \"ef\", \"gh\", \"ab\", \"cd\", \"ef\", \"gh\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\", \"foo\", \"oof\", \"bar\", \"rab\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\", \"aca\", \"bca\", \"cab\", \"abc\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [0, 1, 3], nums2 = [2, 4, 6])",
        "minSum(nums1 = [1,2], nums2 = [3,4])",
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 1])",
        "minSum(nums1 = [0,1,2,3], nums2 = [1,2,3,4])",
        "minSum(nums1 = [0, 0, 1, 1], nums2 = [1, 1, 1, 0])",
        "minSum(nums1 = [1, 0, 1], nums2 = [1, 0, 1])",
        "minSum(nums1 = [0, 3, 0, 2, 0], nums2 = [1, 1, 1, 1, 1])"
    ],
    "sample_470": [
        "findWordsContaining(words = [], x = \"a\")",
        "findWordsContaining(words = [], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [], x = \"b\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"java\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"java\"], x = \"p\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"na\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hi\", \"python\"], x = \"p\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"cherry\", \"date\"], x=\"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"orange\"], x = \"a\")"
    ],
    "sample_397": [
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,2,1,2,1], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,3,2,1,4,2], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4], m = 1, k = 2)",
        "maxSum(nums = [2, 2, 2, 2, 2], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,3,2,1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2], m = 3, k = 2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2], moveTo = [4])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [], moveTo = [])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3, 5], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2], moveTo = [4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [4, 2])",
        "relocateMarbles(nums = [2], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [2, 1, 1, 2, 2, 3], moveFrom = [1, 2, 3], moveTo = [6, 5, 4])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [2, 1, 3, 4])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [2, 3, 1, 4])",
        "minimumRightShifts(nums = [3, 1, 5, 4, 2])",
        "minimumRightShifts(nums = [3, 1, 2, 4, 5, 6])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [2, 3, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 9)",
        "buyChoco(prices = [1, 2, 3], money = 10)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 8, 9, 10], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 8, 9], target = 10)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abccbaabccba\")",
        "longestSemiRepetitiveSubstring(s = \"abacdfgdcaba\")",
        "longestSemiRepetitiveSubstring(s = \"bananabanana\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbbcccc\")",
        "longestSemiRepetitiveSubstring(s = \"abcbbcbbb\")",
        "longestSemiRepetitiveSubstring(s = \"bbbaaacbbaa\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hello world\"], x = \"l\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"pineapple\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"java\", \"kotlin\"], x = \"on\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\", \"4\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"hello\", s2 = \"hola\")",
        "canBeEqual(s1 = \"xyxy\", s2 = \"xzxz\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)"
    ],
    "sample_368": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"LYmph\")",
        "sortVowels(s = \"LYmph\")",
        "sortVowels(s = \"LympH\")",
        "sortVowels(s = \"YmLPh\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"LYmpH\")",
        "sortVowels(s = \"yYmPhL\")",
        "sortVowels(s = 'LeYmPh')"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 4, 7], [2, 5, 8], [3, 6, 9]])",
        "matrixSum([[3, 2, 1], [4, 5, 6]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "maximumTripletValue(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [2, 1, 3, 4, 1])",
        "maximumTripletValue(nums = [1, 3, 2, 4, 5])",
        "maximumTripletValue(nums = [2, 1, 3, -1, 4])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 1, 2, 2])",
        "alternatingSubarray(nums = [1, 1, 2, 2])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 5, 7])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 1, 2, 2])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 5, 3, 2, 2, 1])",
        "alternatingSubarray(nums = [1,2,2,1,2,1,2,2,1])",
        "alternatingSubarray(nums = [1,2,1,2,2,2,1])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 7, 8])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"banana\", k = 5)",
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 3)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 10)",
        "beautifulSubstrings(s = \"aeiaaioooaaeaa\", k = 3)",
        "beautifulSubstrings(s = \"aeiouaeiouaeiou\", k = 3)",
        "beautifulSubstrings(s = \"ioiisoue\", k = 7)",
        "beautifulSubstrings(s = \"bbaaeeeeaae\", k = 3)"
    ],
    "sample_449": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aaaabb\")",
        "minChanges(s = \"aaaabbc\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"01010101010101\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"19900101\", \"19991231\", \"20000101\"])",
        "countSeniors(details = [\"name12345678901\", \"name12345678902\"])",
        "countSeniors(details = [\"1990-01-01\", \"1965-02-02\", \"1970-12-31\"])",
        "countSeniors(details=[\"0000000000001996\", \"0000000000001999\"])",
        "countSeniors(details = [\"1995-01-01T00:00:00\", \"1965-01-01T00:00:00\", \"1985-01-01T00:00:00\"])",
        "countSeniors(details = [\"19950601\", \"20010701\", \"20050801\"])",
        "countSeniors(details = [\"19851201T100000Z\", \"19861201T100000Z\"])",
        "countSeniors(details=[\"19980505231245\"])",
        "countSeniors(details = [\"1985-09-19\", \"1999-12-25\", \"2000-06-30\"])",
        "countSeniors(details=[\"95122112345678\", \"1995123112345678\", \"1996022812345678\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,4,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,1])",
        "minGroupsForValidAssignment(nums = [3, 1, 4, 2, 6, 5, 7])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [1, 1], [0, 1], [1, 0]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,1],[2,2]], k = 1)",
        "countPairs(coordinates = [[0,0], [1,1], [2,2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [2, 2], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [0, 1], [1, 0], [1, 2], [2, 1]], k = 1)",
        "countPairs(coordinates = [[0,0], [1,1], [0,1], [1,0], [0,2], [1,2], [2,0], [2,1], [2,2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 0], [3, 2], [4, 3], [5, 2], [6, 1], [7, 0]], k = 3)",
        "countPairs(coordinates = [[1, 2], [2, 2], [3, 1], [1, 1], [2, 1], [3, 2], [1, 3], [2, 3], [3, 3]], k = 3)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)"
    ],
    "sample_452": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"baab\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,3,5,7], nums2 = [2,4,6,8])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,3,4,2])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,2,3,5])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,2,3,5])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 5])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,3,2,4])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [3,1,4,2,5])",
        "minOperations(nums1 = [1, 3, 5, 2], nums2 = [2, 1, 3, 4])",
        "minOperations(nums1 = [2,3,5,1,4], nums2 = [2,4,5,1,3])",
        "minOperations(nums1 = [2, 3, 1, 5], nums2 = [5, 1, 2, 3])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"0110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"10111011\", k = 3)",
        "shortestBeautifulSubstring(s = \"001110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"001100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"00111001101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1112233\", k = 2)",
        "shortestBeautifulSubstring(s = \"001100\", k = 1)",
        "shortestBeautifulSubstring(s = \"1001111110\", k = 3)",
        "shortestBeautifulSubstring(s = \"0010110010111\", k = 3)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [1,2,3,-1,-2,-3])",
        "maximumTripletValue(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "maximumTripletValue(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maximumTripletValue(nums = [0, 1, 2])",
        "maximumTripletValue(nums=[1,2,3,-1,-2,-3,4,5,6])",
        "maximumTripletValue(nums = [2, 3, 5, 6, 8, 9])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n=3, limit=3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 2, limit = 2)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [4,3,2,1])",
        "minGroupsForValidAssignment(nums = [2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums=[1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [2, 4, 6, 8, 10])",
        "minGroupsForValidAssignment(nums = [2,2,1,3,3,5])",
        "minGroupsForValidAssignment(nums = [2,1,3,1,2])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1,2,3,4], nums2 = [5,6,7,8])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [6, 5, 4, 3, 2, 1])",
        "minSum(nums1 = [1, 1, 0], nums2 = [1, 0, 1])",
        "minSum(nums1 = [1,2,3], nums2 = [2,3,5])",
        "minSum(nums1 = [0, 3, 5], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 1, 2, 3, 4, 5], nums2 = [3, 4, 5, 6, 7, 8])",
        "minSum(nums1 = [0, 7, 2], nums2 = [1, 9, 5])"
    ],
    "sample_453": [
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"abbab\")",
        "minChanges(s = \"abbab\")",
        "minChanges(s = \"babab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abbc\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"ab\", k = 2)",
        "beautifulSubstrings(s = \"ab\", k = 2)",
        "beautifulSubstrings(s = \"loveleetcode\", k = 3)",
        "beautifulSubstrings(s = \"alex\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 5)",
        "beautifulSubstrings(s = \"cacb\", k = 2)",
        "beautifulSubstrings(s = \"ihqgndor\", k = 1)",
        "beautifulSubstrings(s=\"baaebdaiaadee\", k=3)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiouuoui\", k = 2)",
        "beautifulSubstrings(s = \"aeiouuoui\", k = 2)",
        "beautifulSubstrings(s = \"ioiou\", k = 3)",
        "beautifulSubstrings(s = \"abaeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiouuu\", k = 5)",
        "beautifulSubstrings(s = \"abaiouee\", k = 3)",
        "beautifulSubstrings(s = \"iiaazoob\", k = 2)",
        "beautifulSubstrings(s = \"aaiueoiiieooaauuou\", k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"YmpL\")",
        "sortVowels(s = \"yellow\")",
        "sortVowels(s = \"Hello world!\")",
        "sortVowels(s = \"Hello world!\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [2, 1, 2, 1, 2, 2, 1])",
        "minimumSeconds(nums = [3, 1, 4, 2, 6, 5])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [4, 2, 8, 5, 3, 1], k = 3)",
        "minOperations(nums = [4, 2, 8, 5, 3], k = 3)",
        "minOperations(nums = [2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [2, 7, 4, 9, 2, 1], k = 3)",
        "minOperations(nums = [3, 2, 2, 3, 2, 5, 1, 2], k = 3)",
        "minOperations(nums = [2, 3, 5, 5, 5, 6, 7], k = 3)",
        "minOperations(nums = [2, 4, 2, 9, 5, 1, 3], k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 4, k = 3)",
        "maxSum(A = [1, 2, 1, 2, 1, 2, 1], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6], m = 1, k = 2)"
    ],
    "sample_293": [
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"00010101\")",
        "minimumSteps(s = \"11101000\")",
        "minimumSteps(s = \"0010100010\")",
        "minimumSteps(s = \"01101001010\")",
        "minimumSteps(s = \"1100101100\")",
        "minimumSteps(s = \"001001110000\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 5], money = 3)",
        "buyChoco(prices = [10, 20, 30], money = 10)",
        "buyChoco(prices=[1, 2], money=1)",
        "buyChoco(prices = [1, 3, 5, 7], money = 10)",
        "buyChoco(prices = [2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 3, 5, 9], money = 4)",
        "buyChoco(prices=[10, 5, 3], money=10)"
    ],
    "sample_290": [
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s
        "minimumSteps(s = \"10101010101\")",
        "minimumSteps(s = \"111000101\")",
        "minimumSteps(s
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [3, 3, 7, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1,1,3,3,5,5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [2,3,2,1,2,2,3])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [3, 2, 2, 3], k = 3)",
        "minOperations(nums = [2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [2, 3, 4, 5], k = 2)",
        "minOperations(nums = [2, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [2, 5, 3, 1], k = 3)",
        "minOperations(nums = [3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2], k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 1, 2, 2, 3, 3])",
        "isGood(nums = [1, 2, 3, 2, 1])",
        "isGood(nums = [1, 2, 3, 3, 4, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 3, 4, 4, 5, 5])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 5])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood(nums = [1, 1, 2, 3, 4, 4, 5, 5])",
        "isGood(nums = [3, 2, 1, 2, 3])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 9)",
        "isFascinating(n = 9)",
        "isFascinating(n = 21)",
        "isFascinating(n = 21)",
        "isFascinating(n = 1)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 7])",
        "isGood(nums = [2, 3, 4, 5, 6, 7])",
        "isGood(nums = [2, 3, 4, 5])",
        "isGood(nums = [1, 3, 2, 4, 2, 5])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7])",
        "minimumSeconds(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minimumSeconds(nums = [3, 2, 1])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [2, 3, 1, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [2, 3, 1, 4, 2, 5])",
        "minimumRightShifts(nums = [3, 5, 1, 2, 6, 4])",
        "minimumRightShifts(nums = [3, 1, 5, 4, 2])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [1, 2, 3, 4, 6, 7])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 1, 1], nums2 = [1, 1, 1])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [1, 2], nums2 = [1, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 3, 2])",
        "minOperations(nums1 = [2, 3, 5], nums2 = [5, 5, 5])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"123456789\", k = 10)",
        "shortestBeautifulSubstring(s = \"0011\", k = 2)",
        "shortestBeautifulSubstring(s = \"001122\", k = 3)",
        "shortestBeautifulSubstring(s = \"10101010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"122345\", k = 3)",
        "shortestBeautifulSubstring(s = '011011111', k = 3)",
        "shortestBeautifulSubstring(s = \"12233345566\", k = 2)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [4, 3, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 4, 3, 1, 5])"
    ],
    "sample_289": [
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"1000000000\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"10000001\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 0, 1, 6, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [1,3,2,4,5])",
        "minimumSum(nums = [3,5,7,9,11,13,15])",
        "minimumSum(nums = [3,1,5,2,4])"
    ],
    "sample_398": [
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1], m = 2, k = 3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeksforgeeks\", s3 = \"geeksforgeeks\")",
        "findMinimumOperations(s1 = \"rabbbit\", s2 = \"rabbit\", s3 = \"rabit\")",
        "findMinimumOperations(s1 = \"geeks\", s2 = \"geeks\", s3 = \"geeks\")",
        "findMinimumOperations(s1 = \"s1\", s2 = \"s2\", s3 = \"s3\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aac\", s3 = \"bbc\")",
        "findMinimumOperations(s1 = \"aaaaaa\", s2 = \"aaaaaa\", s3 = \"aaaaaa\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"a\", s3 = \"n\")",
        "findMinimumOperations(s1 = \"geeks\", s2 = \"forge\", s3 = \"geeksforgeeks\")",
        "findMinimumOperations(s1 = \"abcdefg\", s2 = \"abcdefgh\", s3 = \"abcdefgi\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 3, 3])",
        "minOperations(nums = [0, 1, 2, 3, 2, 1, 0])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1,2,2,4,4,4,4])",
        "minOperations(nums = [1, 1, 1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 6, 6, 6])",
        "minOperations(nums = [3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 3, 2, 2, 2, 2])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100, 200])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7])",
        "minimumCoins(prices = [1, 3, 5, 9, 12, 15, 18])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [5, 1, 2, 3, 4])",
        "minimumSeconds(nums = [3, 2, 1, 2, 1, 3])",
        "minimumSeconds(nums = [0,1,2,3,4])",
        "minimumSeconds(nums = [1,3,5,2,4])",
        "minimumSeconds(nums = [2, 3, 1, 1, 4, 2, 1, 3])",
        "minimumSeconds(nums = [1,3,6,1,2,2,4,1,5,3])"
    ],
    "sample_448": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcdef\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [9, 8, 5, 3, 1], limit = 3)",
        "lexicographicallySmallestArray(nums = [5, 3, 8, 1, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [9, 5, 8, 3, 1], limit = 4)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 3, 8, 5, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 5, 8, 9, 3, 5, 2], limit = 3)",
        "lexicographicallySmallestArray(nums = [3, 1, 5, 8, 9, 2], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 5, 3, 9, 8], limit = 2)",
        "lexicographicallySmallestArray(nums = [9, 1, 8, 3, 5, 2], limit = 4)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,2,3,3,3,4,4,4,4])",
        "sumCounts(nums=[1,2,2,3,3,3])",
        "sumCounts(nums=[1,2,3,4,5,6,7])",
        "sumCounts(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 3, -1, -2, -3])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [2, 3, 4, 5, 6, 7])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"yogurt\", k = 2)",
        "beautifulSubstrings(s = \"ioiiff\", k = 5)",
        "beautifulSubstrings(s = \"yuiaoe\", k = 3)",
        "beautifulSubstrings(s = \"yamaha\", k = 2)",
        "beautifulSubstrings(s = \"iueo\", k = 4)",
        "beautifulSubstrings(s = \"cacao\", k = 1)",
        "beautifulSubstrings(s = \"uabduoue\", k = 2)",
        "beautifulSubstrings(s = \"abcbdbcdbcaacdbabccdbadb\", k = 2)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,3,5,7,9], target = 10)",
        "countPairs(nums = [1,2,3,4], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10)",
        "countPairs(nums = [1,3,5,7], target = 6)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 5, 4, 3, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 5, 4, 3, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 2, 1, 5, 6])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 2, 1, 5, 4])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [3,2,1,5,6])",
        "minOperations(nums1 = [5, 6, 7, 8, 9], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [5, 6, 7], nums2 = [3, 2, 2])",
        "minOperations(nums1 = [3, 2, 2, 3], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [3, 5, 7], nums2 = [1, 1, 2])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 2, 4, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 1, 1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 4, 4, 4, 5, 6, 6, 6])",
        "minOperations(nums = [1, 2, 4, 4, 4, 5, 5, 5, 6, 6, 6])",
        "minOperations(nums = [1, 2, 2, 4, 4, 4, 8, 8])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"00101110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"00101110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"10101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101110\", k = 3)",
        "shortestBeautifulSubstring(s = \"10101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1001101\", k = 3)",
        "shortestBeautifulSubstring(s = \"0010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11100011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0010110100\", k = 1)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [2, 1, 2, 1, 2, 1, 2, 1])",
        "minimumSeconds(nums = [2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "minimumSeconds(nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [2, 4, 6, 8, 10])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1,2,2,3,3,4,4,4,5,5])",
        "minOperations(nums = [1, 2, 2, 3, 3, 4, 5, 5])",
        "minOperations(nums = [3, 2, 2, 4, 2])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 3, 2, 1])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4, 4, 5])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 4, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"lls\", \"sll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"xyzz\", \"zzyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"book\", \"quiz\", \"racecar\", \"racecar\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"book\", \"quiz\", \"goal\", \"world\", \"eon\", \"devil\", \"mice\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"zba\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"zaa\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"cdc\")",
        "canMakeSubsequence(str1 = \"xxyyzz\", str2 = \"xxyyzz\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"ababbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaabbbbcccc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbcdddd\")",
        "longestSemiRepetitiveSubstring(s = \"abcbbcbbdabca\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,2,1,2,1], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,2,1,2,1], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 2)",
        "maxSum(nums = [1,2,1,2,1,2,1,2,1,2], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,2,1,2,1,2,1,2], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 1, 2, 1], m = 2, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"lo\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\", \"orange\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"helloworld\"], x = \"h\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [1,2], moveTo = [3,3])",
        "relocateMarbles(nums = [1, 1, 2, 2, 3], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [2, 3], moveTo = [1, 2])",
        "relocateMarbles(nums = [1,1,2,2,2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [2], moveFrom = [0], moveTo = [1])",
        "relocateMarbles(nums = [1,2,2,3,3,3,4,4,4,4], moveFrom = [2,3], moveTo = [4,5])",
        "relocateMarbles(nums = [2,1,1,1,1,1,2,1,1], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1, 2, 3, 1, 1, 3, 3], moveFrom = [1, 3], moveTo = [3, 1])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [1, 2, 3, -1, -5, 4])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababbb\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"bbab\")",
        "longestSemiRepetitiveSubstring(s = \"abacbade\")",
        "longestSemiRepetitiveSubstring(s = \"aababca\")",
        "longestSemiRepetitiveSubstring(s = \"aababb\")",
        "longestSemiRepetitiveSubstring(s = \"bbcbbbccd\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"engine\", \"ecaf\", \"time\", \"timer\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"ceoc\", \"love\", \"le\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\", \"bac\", \"cbb\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"engine\", \"time\", \"timer\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"ecar\", \"rcae\", \"car\", \"racecar\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"poor\", \"pane\", \"reca\", \"pear\", \"care\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aabbcc\", \"bbccaa\", \"cdc\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"feed\", \"poke\", \"coke\", \"rope\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"jock\", \"tiff\", \"tac\", \"kick\", \"kip\", \"sic\", \"cip\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[3, 2, 1], [4, 3, 2], [1, 2, 3]])",
        "matrixSum(nums = [[3, 2, 1], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[3, 2, 1], [4, 3, 2], [5, 4, 3]])",
        "matrixSum(nums = [[1,2], [3,4]])",
        "matrixSum(nums=[[3, 2, 1], [4, 3, 2]])",
        "matrixSum(nums = [[2, 3], [1, 2], [3, 1]])",
        "matrixSum(nums = [[3, 10, 5], [10, 5, 3], [5, 3, 10]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"foo\", s2 = \"bar\", s3 = \"baz\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"bb\", s3 = \"cc\")",
        "findMinimumOperations(s1=\"banana\", s2=\"banana\", s3=\"banana\")",
        "findMinimumOperations(s1 = \"apple\", s2 = \"banana\", s3 = \"orange\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abdc\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"geek\", s2 = \"geeks\", s3 = \"geeks\")",
        "findMinimumOperations(s1 = \"cba\", s2 = \"abac\", s3 = \"cabc\")",
        "findMinimumOperations(s1=\"hello\", s2=\"world\", s3=\"worldhello\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abf\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abef\", s3 = \"abgh\")",
        "findMinimumOperations(s1 = \"hello\", s2 = \"world\", s3 = \"hello\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bbb\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"foo\", s2 = \"bar\", s3 = \"foobar\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"ca\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"defgh\", s3 = \"defgh\")"
    ],
    "sample_324": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 21)",
        "isFascinating(n = 9)",
        "isFascinating(12)",
        "isFascinating(n=21)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5,10])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [3, 1, 1, 4, 1])",
        "minimumCoins(prices = [3, 1, 1, 4, 1, 1, 5, 3, 2])",
        "minimumCoins(prices = [3, 1, 1, 4, 1, 1, 1])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1,2,3,4,5,6], target = 10)",
        "countPairs(nums=[1,2,3,4,5], target=7)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [4, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [4,3,2])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [4, 3, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [2,2,2,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6])",
        "minGroupsForValidAssignment(nums = [4, 2, 8, 5, 3, 1, 7])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 6)",
        "buyChoco(prices = [1, 2, 3, 4], money = 6)",
        "buyChoco(prices = [2, 4, 5], money = 7)",
        "buyChoco(prices=[2, 4, 5, 7], money=10)",
        "buyChoco(prices = [5, 4, 3], money = 7)",
        "buyChoco(prices=[2, 3, 5], money=7)",
        "buyChoco(prices = [5, 7, 1, 3], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"acb\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"foo\", \"bar\", \"baz\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"le\", \"olleh\", \"dlrow\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"abcd\", \"cd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"doce\", \"frame\", \"edoc\", \"ecof\"])",
        "maximumNumberOfStringPairs(words = [\"p\", \"p\", \"q\", \"q\", \"p\", \"q\", \"q\", \"p\", \"q\"])",
        "maximumNumberOfStringPairs(words = [\"twice\", \"ert\", \"minutes\", \"time\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"hello world\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = \"leotedce\")",
        "sortVowels(s = \"hello world\")",
        "sortVowels(s = \"lected\")",
        "sortVowels(s = \"LeoTcede\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 2, 1])",
        "sumCounts(nums = [1, 2, 3, 2, 1])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "sumCounts(nums = [1, 2, 3, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "sumCounts(nums = [1, 2, 3, 2])",
        "sumCounts(nums = [1, 2, 2, 3, 4, 4, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "sumCounts(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 3, 5, 7, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [3, 4, 1, 2, 2, 1, 3, 4])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 100, m = 10)",
        "differenceOfSums(n = 30, m = 4)"
    ],
    "sample_307": [
        "countSeniors(details = [\"1990-01-01\", \"1980-02-02\", \"1970-03-03\", \"1960-04-04\"])",
        "countSeniors(details = [\"1980\", \"1990\", \"2000\", \"1965\", \"1970\"])",
        "countSeniors(details = [\"1990-12-31\", \"1980-06-30\", \"2000-01-01\"])",
        "countSeniors(details = [\"1985\", \"1964\", \"2002\"])",
        "countSeniors(details = [\"John Doe, 1985\", \"Jane Smith, 1990\", \"John Smith, 2000\", \"Jane Doe, 1975\"])",
        "countSeniors(details = [\"2000John\", \"1990Jane\", \"2005Bob\", \"1960Sue\"])",
        "countSeniors(details=[\"John Smith 25\", \"Mary Johnson 65\", \"Bob Smith 40\", \"Alice Johnson 75\"])",
        "countSeniors(details = [\"19850801\", \"19830620\", \"20000101\", \"19901231\"])",
        "countSeniors(details = [\"1990-12-30\", \"2001-01-30\", \"1958-12-31\", \"1969-12-31\", \"2010-01-31\"])",
        "countSeniors(details = [\"1995-23-06\", \"1965-03-24\", \"1979-12-01\", \"2000-10-15\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 1)",
        "isFascinating(n=3)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "minimumBeautifulSubstrings(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "minimumBeautifulSubstrings(s = \"abcd\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(\"abcde\")",
        "minimumBeautifulSubstrings(s = \"01101010111\")",
        "minimumBeautifulSubstrings(s = \"010101010101\")",
        "minimumBeautifulSubstrings(s = \"0101010101010\")",
        "minimumBeautifulSubstrings(\"aaaaaaaaaaaa\")",
        "minimumBeautifulSubstrings(s = \"0110010101110111001110101111110010001010111010011001101011100111001101100011100101111000010001011011111110101110110101110110010001111011101010011000100111111110111010110000000001011011111101010101000010001011010011100101010010111111010111110111110110001010101110011010111111001101100110010001101010110110100110110111110110101100011010101001011001111010011001010111001011000100111000011101000100111111101101110010110000111001111110101100100011101110011111101100010101011001111001110000111011110101010111011100"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 6, limit = 2)"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [3,2,2,3], k = 3)",
        "minOperations(nums = [2,3,4,5,6], k = 3)",
        "minOperations(nums=[1,2,3,4,5,6,7,8,9], k=3)",
        "minOperations(nums = [5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [3, 2, 2, 3, 2, 4, 5], k = 2)",
        "minOperations(nums = [2, 5, 6, 8, 10], k = 3)",
        "minOperations(nums = [5,6,8,9,3,1,4,2], k = 5)",
        "minOperations(nums = [2,5,7,5,1,2,8,5], k = 3)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1, 1, 2, 2, 3])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = ['2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', '2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = ['2', '1', 'prev', 'prev', 'prev', '1', 'prev'])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev', '1', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['2', 'prev', 'prev', '1', '2'])",
        "lastVisitedIntegers(words = ['prev', 'prev', '1', 'prev', '2', 'prev', '3', 'prev', '4'])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 1], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1,2,3,4], k = 3)",
        "minOperations(nums = [1, 3, 4, 2], k = 4)",
        "minOperations(nums = [1, 3, 5, 2, 4, 6], k = 5)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"ababbb\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbbcccc\")",
        "longestSemiRepetitiveSubstring(s = \"bananabatata\")",
        "longestSemiRepetitiveSubstring(s = \"bbab\")",
        "longestSemiRepetitiveSubstring(s = \"abacbc\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1,2,3])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"10101\", k = 3)",
        "shortestBeautifulSubstring(s = \"01011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"00111100\", k = 3)",
        "shortestBeautifulSubstring(s = \"1110011011\", k = 3)",
        "shortestBeautifulSubstring(s = \"011011110\", k = 3)",
        "shortestBeautifulSubstring(s = \"00111001101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10010101\", k = 2)",
        "shortestBeautifulSubstring(s = '00111000', k = 3)",
        "shortestBeautifulSubstring(s = \"1100110011001100\", k = 3)",
        "shortestBeautifulSubstring(s = '1110011100', k = 3)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"101010\")",
        "minimumBeautifulSubstrings(s = \"1010101\")",
        "minimumBeautifulSubstrings(s = \"1010101\")",
        "minimumBeautifulSubstrings(s = \"aba\")",
        "minimumBeautifulSubstrings(s = \"01010101\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"abababab\")",
        "minimumBeautifulSubstrings(s = \"1010111\")",
        "minimumBeautifulSubstrings(s = \"01001001001001001001001\")",
        "minimumBeautifulSubstrings(s = \"0100101011010110101101000000101010110101101011010001010101101011010110010101101011010110010101101011010110\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x=2, y=3, z=1)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 3, y = 2, z = 5)",
        "longestString(x = 2, y = 4, z = 1)",
        "longestString(x = 3, y = 5, z = 4)",
        "longestString(x=4, y=3, z=2)"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [1, 0, 1]])",
        "findChampion(grid = [[1,2,3],[0,0,0],[1,1,1]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"loveleetcode\", k = 3)",
        "beautifulSubstrings(s = \"abababab\", k = 2)",
        "beautifulSubstrings(s = \"google\", k = 3)",
        "beautifulSubstrings(s = \"aabbcdd\", k = 3)",
        "beautifulSubstrings(s = \"aieoia\", k = 3)",
        "beautifulSubstrings(s = \"aabbbccddee\", k = 2)",
        "beautifulSubstrings(s = \"ioiioiiyaiii\", k = 3)",
        "beautifulSubstrings(s = \"sxbnfvbk\", k = 3)"
    ],
    "sample_304": [
        "countSeniors(details = [\"1969-01-01\", \"1999-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"12/20/1980\", \"12/20/1981\", \"12/20/1982\"])",
        "countSeniors(details = [\"19960725T123000Z\", \"19950625T123000Z\"])",
        "countSeniors(details = [\"Name1: 1999-06-25\", \"Name2: 1999-06-30\", \"Name3: 2000-06-25\"])",
        "countSeniors(details=[\"1990-12-01T00:00:00Z\", \"1995-01-01T00:00:00Z\", \"2005-01-01T00:00:00Z\"])",
        "countSeniors(details = [\"1992-02-29\", \"1962-08-10\", \"2000-12-31\"])",
        "countSeniors(details=[\"20030101T010101Z\", \"20040202T020202Z\"])",
        "countSeniors(details = [\"1999-12-15\", \"2001-06-21\", \"1999-07-05\"])",
        "countSeniors(details = [\"199809231234\", \"197505123456\", \"198706123456\"])",
        "countSeniors(details = [\"001B199216A\", \"002B069216B\", \"003B059216C\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "maximumTripletValue(nums = [1, 3, 2])",
        "maximumTripletValue(nums = [3, 2, 5, 1, 6, 4])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"0123456789\")",
        "minimumBeautifulSubstrings(s = \"1010101\")",
        "minimumBeautifulSubstrings(s = \"abcd\")",
        "minimumBeautifulSubstrings(s = \"111\")",
        "minimumBeautifulSubstrings(s = \"011010101\")",
        "minimumBeautifulSubstrings(s
        "minimumBeautifulSubstrings(s = \"111001\")",
        "minimumBeautifulSubstrings(s
        "minimumBeautifulSubstrings(s = \"10010101010010101000101001\")",
        "minimumBeautifulSubstrings(s = \"22232123121213\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 2, 1])",
        "maxSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [3, 2, 1, 5, 4])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [3, 2, 1, 5, 4])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [3, 2, 1, 5, 4])",
        "minOperations(a = [1, 2, 3], b = [1, 3, 2])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"hello\", \"world\", \"python\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\"])",
        "minimizeConcatenatedLength(words=[\"banana\", \"apple\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"abcd\", \"efg\"])",
        "minimizeConcatenatedLength(words = [\"code\", \"monkey\", \"banana\"])",
        "minimizeConcatenatedLength(words = [\"axb\", \"cxd\", \"exy\"])",
        "minimizeConcatenatedLength(words=[\"cat\", \"dog\", \"tiger\", \"lion\", \"elephant\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"LympH\")",
        "sortVowels(s = \"LYmph\")",
        "sortVowels(s = \"YmLPh\")",
        "sortVowels(s = \"YmpHl\")",
        "sortVowels(s = \"YmpHl\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 1, 2, 3, 4, 4])",
        "sumCounts(nums = [1, 1, 1, 2, 3])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 3, 2, 4, 5])",
        "minimumSum(nums = [1, 3, 4, 2, 2, 3, 10, 5])",
        "minimumSum(nums = [2, 3, 5, 1, 4])",
        "minimumSum(nums = [4, 2, 5, 1, 7])",
        "minimumSum(nums = [4, 2, 7, 3, 5])",
        "minimumSum(nums = [4, 2, 1, 3, 5])",
        "minimumSum(nums = [1, 3, 1, 4, 2, 2, 1])",
        "minimumSum(nums = [8, 4, 6, 3, 2])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1,2,3], [4,5,6], [7,8,9]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 2, 0], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 1, 0, 0], [0, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 1], [0, 0, 0, 0]])"
    ],
    "sample_372": [
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"hello world\")",
        "sortVowels(s = \"leetcodeed\")",
        "sortVowels(s = \"Leetcode\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"00111000\")",
        "minimumSteps(s = \"011010\")",
        "minimumSteps(s = \"11100010101\")",
        "minimumSteps(s = \"1110000111\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [5, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [2, 3, 1, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 1, 4, 2])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20])",
        "minOperations(nums = [0, 2, 1, 1, 3])",
        "minOperations(nums = [3, 4, 5, 5, 5, 5, 6, 7, 7])"
    ],
    "sample_367": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"LympH\")",
        "sortVowels(s = \"LyMpH\")",
        "sortVowels(s = \"LympH\")",
        "sortVowels(s = \"yMpHl\")",
        "sortVowels(s = \"YLmPh\")",
        "sortVowels(s = \"LMnOpQrST\")",
        "sortVowels(s = \"LeMmYpH\")"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [2, 2, 2]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]])",
        "findChampion(grid = [[0,0,0],[1,0,0],[1,0,0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [-1, -2, -3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 3, 2])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [0, 1], nums2 = [0, 1])",
        "minSum(nums1 = [-2, 1, -3], nums2 = [3, -1, 2])",
        "minSum(nums1=[1, 2, 3, 4, 5], nums2=[5, 6, 7, 8, 9])",
        "minSum(nums1 = [2, 3, -1, 4, -2], nums2 = [1, 2, 3, 4, 5])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [4, 3, 2, 1, 5], k = 3)",
        "minOperations(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [3, 1, 5, 2, 6, 4], k = 3)",
        "minOperations(nums = [1, 3, 4, 2, 5, 2], k = 3)",
        "minOperations(nums = [2, 5, 1, 4, 1, 2], k = 3)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums=[1, 2, 3], moveFrom=[1], moveTo=[2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [3,2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 4], moveTo = [3, 5])",
        "relocateMarbles(nums = [2, 1, 2, 1, 2, 3, 3, 4, 4], moveFrom = [1, 3, 5], moveTo = [2, 4, 6])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7], m = 3, k = 3)",
        "maxSum(nums = [1,2,-1,3,4], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 5)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"azca\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"azb\")",
        "canMakeSubsequence(s1=\"bac\", s2=\"abcd\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"abdc\")",
        "canMakeSubsequence(s1 = \"ba\", s2 = \"anana\")",
        "canMakeSubsequence(s1 = \"ba\", s2 = \"nab\")",
        "canMakeSubsequence(s1 = \"zzz\", s2 = \"azzz\")",
        "canMakeSubsequence(s1 = \"azb\", s2 = \"ba\")",
        "canMakeSubsequence(s1 = \"bac\", s2 = \"bcd\")",
        "canMakeSubsequence(s1 = \"ba\", s2 = \"abz\")"
    ],
    "sample_270": [
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 0, 4])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 0, 4, 5])",
        "minSum(nums1 = [0, 0, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [0, 2, 3], nums2 = [0, 0, 1])",
        "minSum(nums1 = [0, 0, 1, 1], nums2 = [1, 1, 1, 0])",
        "minSum(nums1 = [0, 2, 3], nums2 = [0, 0, 4])",
        "minSum(nums1 = [2,3,5], nums2 = [1,2,4])",
        "minSum(nums1 = [0, 0, 1, 1], nums2 = [0, 2, 1, 1])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = ['2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = ['prev', '2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '2', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'prev', 'prev', '1', '2', '3'])",
        "lastVisitedIntegers(words = ['2', 'prev', 'prev', '1', 'prev', '2'])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [3, 1, 4, 2, 5])",
        "isGood(nums = [4, 3, 2, 1])",
        "isGood(nums = [3, 1, 2])",
        "isGood(nums = [2, 1, 3, 4])"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,2,2,3,3,3,4,4,4,5,5])",
        "minOperations(nums = [1,2,2,3,3,3,4,4,4,5,5])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1,1,2,2,2,3,3,3,4,4,4])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums=[3,2,2,3,2,2,3])",
        "minOperations(nums=[1,2,3,4,5,6])",
        "minOperations(nums = [1,2,3,4,5,1,1,1,1])"
    ],
    "sample_451": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abbab\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abbabba\")",
        "minChanges(s = \"abbaba\")",
        "minChanges(s = \"aabbb\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n = 20, limit = 5)",
        "distributeCandies(n = 12, limit = 4)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3,4], nums2 = [5,6,7,8])",
        "minSum(nums1 = [1,2,3,4], nums2 = [5,6,7,8])",
        "minSum(nums1 = [1,2], nums2 = [3,4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0, 1, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [2,3,4], nums2 = [1,5])",
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [0, 1, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1,0,3,0,5], nums2 = [2,0,4,0,6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3, 0])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1,2,3,4,5,1,2,3,4,5])",
        "minimumRightShifts(nums = [2, 1, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [3, 1, 4, 2])"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1, 2, 3, 4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 5)",
        "countPairs(nums = [1,2,3,4], t = 5)",
        "countPairs(nums = [1,2,3], t = 4)",
        "countPairs(nums = [1, 2, 3], t = 5)",
        "countPairs(nums = [1, 2, 3], t = 5)",
        "countPairs(nums = [1,3,5,7], t = 10)",
        "countPairs(nums = [1,3,5,7], t = 10)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p1\", \"1\", \"p2\", \"2\", \"p3\"])",
        "lastVisitedIntegers(words = [\"p\", \"2\", \"p\", \"p\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"p1\", \"2\", \"p3\", \"p4\", \"5\", \"1\"])",
        "lastVisitedIntegers(words = ['pop', '2', '1', 'pop', 'pop', '3'])",
        "lastVisitedIntegers(words = [\"push\", \"3\", \"push\", \"1\", \"pop\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = ['p2', '1', 'p1', 'p2'])",
        "lastVisitedIntegers(words = [\"p1\", \"2\", \"p\", \"p\", \"4\"])",
        "lastVisitedIntegers(words = [\"p2\", \"1\", \"p1\", \"p\", \"2\", \"p3\", \"3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p1\", \"p2\", \"p3\", \"2\", \"1\", \"0\"])",
        "lastVisitedIntegers(words=[\"p2\", \"p1\", \"p2\", \"1\", \"2\", \"3\", \"p1\", \"4\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"zyx\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"azzzzz\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"zbza\", str2 = \"abab\")",
        "canMakeSubsequence(str1 = \"zzzzzz\", str2 = \"ababab\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"azba\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"bcda\")",
        "canMakeSubsequence(str1 = \"zzzaz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"zzzzyy\", str2 = \"zab\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3, 0, 0], nums2 = [4, 5, 6, 7, 0])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 0, 0, 0], nums2 = [4, 5, 6, 0, 0, 0])",
        "minSum(nums1 = [0, 1, 2, 3], nums2 = [3, 4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6, 0, 0])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9], nums2 = [9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "minSum(nums1 = [1,2,3,0], nums2 = [4,5,6,0])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 0, 2, 7, 6])",
        "minSum(nums1 = [0, 7, 0, 3, 0, 5], nums2 = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 1], [1, 0], [0, 0], [0, 1], [1, 1], [1, 0]], k = 1)",
        "countPairs(coordinates = [[0,0], [1,1], [2,2], [3,3], [4,4]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8]], k = 2)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dcb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"ecar\", \"memory\", \"rython\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"da\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"car\"])",
        "maximumNumberOfStringPairs(words = [\"nana\", \"nan\", \"anan\"])",
        "maximumNumberOfStringPairs(words = [\"lucifer\", \"rebum\", \"erbium\", \"ruci\", \"erb\", \"defit\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, -4, -5])",
        "maxStrength(nums = [1, 2, 3, -4, -5])",
        "maxStrength(nums = [-2, -3, 4, -1, -2, 1, 5, -3])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [-2, -3, 4, -1, -2])",
        "maxStrength(nums = [1, -2, 3, 4, -5])",
        "maxStrength(nums = [2, -3, 1, 0, -5])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxStrength(nums = [2, -3, 1, 0])",
        "maxStrength(nums = [1, 2, -3, 4, 5])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1, 3, 5, 7, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [3, 3, 7, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1,1,3,3,5,5,7,7])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 4, 5, 5, 6])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices=[2, 3, 5, 7], money=10)",
        "buyChoco(prices = [10, 5, 2], money = 5)",
        "buyChoco(prices = [5, 3, 1], money = 3)",
        "buyChoco(prices = [5, 3, 7, 1, 9], money = 12)",
        "buyChoco(prices = [10, 5, 15, 25], money = 100)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"1\", \"prev\", \"3\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 3, 3, 4, 5, 5])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [6], moveTo = [5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [7], moveTo = [4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 3], moveTo = [3, 5])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [2, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [2, 4], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9, 5], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9, 5], moveFrom = [5, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 5], moveTo = [2, 7])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom=[2, 5], moveTo=[1, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 5, 7], moveTo = [3, 6, 9])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xyza\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"aacb\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"acb\", str2 = \"azb\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hello world\"], x = \"hello\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"helloworld\"], x = \"llo\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums=[[0,2],[3,1]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 1)",
        "buyChoco(a = [5, 10], money = 15)",
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [5, 5, 2], money = 10)",
        "buyChoco(a = [10, 20, 30], money = 30)",
        "buyChoco(a = [2, 3, 5], money = 8)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [4, 3, 2])",
        "minGroupsForValidAssignment(nums = [2, 4, 6, 8, 10])",
        "minGroupsForValidAssignment(nums = [1,2,3])",
        "minGroupsForValidAssignment(nums = [2, 3, 1, 4, 5])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [2, 1, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 1, 3, 4])",
        "minimumRightShifts(nums = [5, 1, 3, 4, 2])",
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])",
        "minimumRightShifts(nums = [7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [7, 2, 3, 6, 5, 4])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])"
    ],
    "sample_464": [
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n=4, limit=2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 5, 5, 7, 7])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 5, 5, 7, 7])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 7, 2])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 2, 3])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"l\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\", \"apple\"], x = \"l\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hola\"], x = \"o\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 0], [1, 1, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1,1,1,0,1,1,0,1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1, 0, 1, 1, 0, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"ioiisoue\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"ioiiff\", k = 3)",
        "beautifulSubstrings(s = \"ioiou\", k = 2)",
        "beautifulSubstrings(s = \"aabbb\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiouu\", k = 3)",
        "beautifulSubstrings(s = \"baaaiou\", k = 1)",
        "beautifulSubstrings(s = \"abcbcdcdcdcdecded\", k = 3)",
        "beautifulSubstrings(s = \"cuaieuacx\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [1, 3, 7, 9, 2, 8, 5, 4, 6, 10])",
        "minimumSeconds(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minimumSeconds(nums = [3, 2, 1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [4, 2, 1, 5, 6, 7])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 9)",
        "isFascinating(n = 21)",
        "isFascinating(n = 999)",
        "isFascinating(n = 911)",
        "isFascinating(n = 153)",
        "isFascinating(n = 153)",
        "isFascinating(n=729)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 6)",
        "lengthOfLongestSubsequence(nums = [2,3,1,2,4,3], target = 7)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1,2],[3,4],[5,6]])",
        "matrixSum(nums = [[3, 2, 1], [4, 5, 6]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[2, 3], [1, 5], [7, 9]])",
        "matrixSum(nums=[[3, 4], [1, 2], [5, 6]])",
        "matrixSum(nums=[[2, 3], [1, 4], [5, 6]])",
        "matrixSum(nums = [[3, 1, 1], [5, 5, 5], [4, 4, 4]])"
    ],
    "sample_326": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 123)",
        "isFascinating(n = 9)",
        "isFascinating(123)",
        "isFascinating(123)",
        "isFascinating(n=123)",
        "isFascinating(3)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 1, 1, 1], [1, 1, 0, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 1, 0, 1], [1, 0, 1, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0], [1, 1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 0],\n                          [1, 1, 1, 1],\n                          [0, 1, 1, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_450": [
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"aaabaaaa\")",
        "minChanges(s = \"bookkeeper\")",
        "minChanges(s=\"ggggggg\")",
        "minChanges(s=\"bcb\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"1010\", s2 = \"1011\", x = 2)",
        "minOperations(s1 = \"001010\", s2 = \"001100\", x = 2)",
        "minOperations(s1 = \"10101\", s2 = \"10111\", x = 2)",
        "minOperations(s1 = \"111010101\", s2 = \"101011101\", x = 2)",
        "minOperations(s1 = \"111010101\", s2 = \"101011101\", x = 3)",
        "minOperations(s1 = \"101\", s2 = \"101\", x = 3)",
        "minOperations(s1 = \"000\", s2 = \"000\", x = 3)",
        "minOperations(s1 = \"0010101010\", s2 = \"0011101110\", x = 2)",
        "minOperations(s1 = \"00010000\", s2 = \"00010010\", x = 1)",
        "minOperations(s1 = \"0100110110\", s2 = \"1111010100\", x = 5)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 4, y = 4, z = 3)",
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 5, y = 5, z = 3)",
        "longestString(x = 5, y = 5, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 2, y = 4, z = 3)",
        "longestString(x = 5, y = 5, z = 4)",
        "longestString(x=4, y=3, z=2)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [0, 1, 1, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1])"
    ],
    "sample_306": [
        "countSeniors(details = [\"name1 age25\", \"name2 age65\", \"name3 age35\"])",
        "countSeniors(details = [\"Name1 age 50\", \"Name2 age 65\", \"Name3 age 40\", \"Name4 age 70\"])",
        "countSeniors(details = [\"name1_age25\", \"name2_age65\", \"name3_age40\", \"name4_age70\"])",
        "countSeniors(details = [\"John_Doe_45\", \"Jane_Doe_50\", \"Bob_Smith_65\", \"Alice_Jones_70\"])",
        "countSeniors(details = [\"John-25-male\", \"Mary-40-female\", \"Peter-80-male\", \"David-65-male\"])",
        "countSeniors(details=[\"Name: John Age: 65\", \"Name: Jane Age: 45\", \"Name: Jane Age: 67\"])",
        "countSeniors(details = [\"Alex,20,M\", \"John,61,M\", \"Alice,40,F\", \"Peter,70,M\"])",
        "countSeniors(details = [\"John Smith 45\", \"Mary Brown 78\", \"David Lee 30\", \"Anna Young 70\", \"Tom Jones 65\"])",
        "countSeniors(details = [\"Alexis,45,M\", \"Blake,50,M\", \"Caitlin,70,F\", \"David,65,M\"])",
        "countSeniors(details = [\"name:age:gender:phone\", \"john:55:M:1234\", \"mary:68:F:5678\", \"bob:75:M:9999\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "maxSubarrays(nums = [0, 1, 1, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 1, 1, 1, 1, 0, 1, 0])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [5, 6, 8, 9])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom=[1, 2, 3], moveTo=[5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 4, 7], moveTo = [5, 8, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 7], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 4], moveTo = [4, 2])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom=[3, 4, 7], moveTo=[7, 8, 10])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abf\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aac\", s3 = \"aad\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"qwe\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"111\", s2 = \"222\", s3 = \"333\")",
        "findMinimumOperations(s1=\"abc\", s2=\"xyz\", s3=\"def\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,4,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [0,1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [4,3,2,2,4,3,3,2])",
        "minLengthAfterRemovals(nums = [1,2,3,1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [3, 1, 7, 1, 3, 4, 1])"
    ]
}