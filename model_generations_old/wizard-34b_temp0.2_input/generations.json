{
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 1], [3, 4, 3], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 1], [3, 4, 3], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 1], [3, 4, 3], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 1], [3, 4, 3], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 1], [3, 4, 3], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 1], [3, 4, 3], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 1], [3, 4, 3], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 1], [3, 4, 3], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 1], [3, 4, 3], [4, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 3], [3, 5, 2]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,",
        "canSplitArray(nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,",
        "canSplitArray(nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,",
        "canSplitArray(nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,",
        "canSplitArray(nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 10)",
        "canSplitArray(nums = [2, 1, 2, 1, 2, 1], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 3)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [4, 3, 2, 6, 5, 4], k = 2)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"n\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 5])"
    ],
    "sample_122": [
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [3, 1, 3, 4, 2])",
        "minimumIndex(nums = [3,1,3,3,2,1,3])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 1, 3])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 1, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,5],[7,9]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,5]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4, 4])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4, 4])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4, 4])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2, 2, 2, 3, 4, 5])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2, 2, 2, 3, 4, 5])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2, 2, 2, 3, 4, 5])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1,3],[3,6],[4,5],[9,12]])",
        "numberOfPoints(nums = [[1,3],[3,6],[5,8],[9,12]])",
        "numberOfPoints(nums = [[1,3],[3,6],[5,8],[9,12]])",
        "numberOfPoints(nums = [[1,3],[3,6],[5,8],[8,11]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,5]])",
        "numberOfPoints(nums = [[1,3],[3,6],[4,5]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,6]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,6],[8,12]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 3], [3, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 3], [3, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 3], [3, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 3], [3, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 3], [3, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 3], [3, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 4, 3], [3, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 1], [2, 4, 2], [3, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 1], [2, 5, 2], [3, 4, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [3, 4, 6], [2, 4, 3]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4,1,2,3,4], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4,1,2,3,4], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,3,2,1,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,1,4,4,4,4,4,4,4,4], k = 3)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 3]])"
    ],
    "sample_55": [
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 1)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 5], threshold = 5)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 4)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abc\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [2, 3, 5, 7, 9], m = 5)",
        "canSplitArray(nums = [2, 3, 5, 7, 9], m = 5)",
        "canSplitArray(nums = [2, 1, 3, 5, 4], m = 6)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 1])"
    ],
    "sample_109": [
        "checkArray(nums = [10, 2, 3, 7, 2], k = 3)",
        "checkArray(nums = [10, 2, 3, 7, 2], k = 3)",
        "checkArray(nums = [10, 2, 3, 7, 2], k = 3)",
        "checkArray(nums = [10, 2, 3, 7, 2], k = 3)",
        "checkArray(nums = [10, 2, 3, 7, 2], k = 3)",
        "checkArray(nums = [10, 2, 3, 7, 2], k = 3)",
        "checkArray(nums = [10, 2, 3, 7, 2], k = 3)",
        "checkArray(nums = [10, 2, 3, 1, 2], k = 3)",
        "checkArray(nums = [10, 2, 3, 1, 2], k = 3)",
        "checkArray(nums = [10, 2, 3, 1, 2], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4], target = 10)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)"
    ],
    "sample_205": [
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"0123456789\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRAL\")",
        "furthestDistanceFromOrigin(moves = \"LRAL\")",
        "furthestDistanceFromOrigin(moves = \"LRAL\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwol\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwol\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwol\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwol\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwol\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 0)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 6, 18])"
    ],
    "sample_97": [
        "maximumJumps(nums = [3,2,1,1,4], target = 3)",
        "maximumJumps(nums = [3,2,1,1,4], target = 3)",
        "maximumJumps(nums = [3,2,1,1,4], target = 3)",
        "maximumJumps(nums = [3,2,1,1,4], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [3,2,5,1,1,9,3,4], target = 3)",
        "maximumJumps(nums = [3,2,5,1,1,9,3,4], target = 3)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 25, 36, 48])",
        "countBeautifulPairs(nums = [12, 25, 36, 48])",
        "countBeautifulPairs(nums = [12, 25, 36, 48])",
        "countBeautifulPairs(nums = [12, 25, 36, 48])",
        "countBeautifulPairs(nums = [12, 25, 36, 48])",
        "countBeautifulPairs(nums = [12, 25, 36, 48])",
        "countBeautifulPairs(nums = [12, 25, 36, 48])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 24, 6, 8])",
        "countBeautifulPairs(nums = [12, 24, 6, 8])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")"
    ],
    "sample_150": [
        "finalString(s = \"thisisit\")",
        "finalString(s = \"thisisit\")",
        "finalString(s = \"thisisit\")",
        "finalString(s = \"thisisit\")",
        "finalString(s = \"thisisit\")",
        "finalString(s = \"thisisit\")",
        "finalString(s = \"thisisit\")",
        "finalString(s = \"thisisit\")",
        "finalString(s = \"thisisit\")",
        "finalString(s = \"this is a string\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 4, 5, 8, 10])",
        "findValueOfPartition(nums = [1, 4, 5, 8])",
        "findValueOfPartition(nums = [1, 4, 5, 8, 10])",
        "findValueOfPartition(nums = [1, 4, 5, 8])",
        "findValueOfPartition(nums = [1, 4, 5, 8])",
        "findValueOfPartition(nums = [1, 4, 5, 8, 10])",
        "findValueOfPartition(nums = [1, 4, 5, 8, 10])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_7": [
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [3, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [1, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [1, 2], [1, 1]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [10, 20, 20], m = 30)",
        "canSplitArray(nums = [10, 20, 20], m = 30)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 0)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], t = 1)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], t = 1)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], t = 1)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], t = 1)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], t = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 6, 7, 5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 6, 7, 5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 6, 7, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], t = 2)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 1000, b = 1)",
        "makeTheIntegerZero(a = 1000, b = 1)",
        "makeTheIntegerZero(a = 100, b = 1)",
        "makeTheIntegerZero(a = 100, b = 1)",
        "makeTheIntegerZero(a = 10, b = 1)",
        "makeTheIntegerZero(a = 31, b = 1)",
        "makeTheIntegerZero(a = 100, b = 10)",
        "makeTheIntegerZero(a = 31, b = 5)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [2, 3, 5, 7, 9], m = 5)",
        "canSplitArray(nums = [2, 3, 5, 7, 9], m = 5)",
        "canSplitArray(nums = [2, 3, 5, 7, 9], m = 5)",
        "canSplitArray(nums = [2, 3, 5, 7, 9], m = 5)"
    ],
    "sample_161": [
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [123, 456, 789])",
        "maxSum(nums = [123, 456, 789])",
        "maxSum(nums = [12, 14, 123, 14])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n=2, target=4)",
        "minimumPossibleSum(n=2, target=4)",
        "minimumPossibleSum(n=2, target=5)",
        "minimumPossibleSum(n = 2, target = 4)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,4,7,10])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 6, 7])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,3],[1,7],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[1,7],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[1,7],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[1,7],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[1,7],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[1,7],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[1,7],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[1,7],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[1,7],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[1,7],[3,4],[5,6],[7,9]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 4], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 4], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 4], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 4], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1,3],[3,6],[4,5],[9,12]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five,six\"], separator = \",\")"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [2, 3, 5, 7], target = 10)",
        "minOperations(nums = [2, 3, 5, 7], target = 10)",
        "minOperations(nums = [2, 3, 5, 7], target = 10)",
        "minOperations(nums = [2, 3, 5], target = 10)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 0, 1])"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12,23,34,45,56])",
        "maxSum(nums = [12,23,34,45,56])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 5, 4, 3, 2])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)"
    ],
    "sample_160": [
        "maxSum(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [10, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [10, 7, 8, 9])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSum(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])"
    ],
    "sample_52": [
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[10,12]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,9],[10,12]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,10],[10,15]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,10],[10,15]])",
        "numberOfPoints(nums = [[1,3],[3,6],[7,10],[10,15]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 9], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 9], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 9], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 7], target = 7)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], m=2, k=0)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], m=2, k=0)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], m=3, k=0)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], m=3, k=0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], m=3, k=0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [2, 5, 1, 3, 4], x = 2)",
        "minCost(A = [2, 5, 1, 3, 4], x = 2)",
        "minCost(A = [2, 5, 1, 3, 4], x = 2)",
        "minCost(A = [4, 2, 6, 3], x = 2)",
        "minCost(A = [4, 2, 6, 5], x = 2)",
        "minCost(A = [4, 2, 6, 5], x = 3)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 10)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LLRRR__R\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR__R\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR__R\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR__\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R_L_L_L_L\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"LRLRRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRRLLRR\")",
        "furthestDistanceFromOrigin(moves
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)"
    ],
    "sample_51": [
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbcncd\")"
    ],
    "sample_146": [
        "finalString(s = \"pintire\")",
        "finalString(s = \"pintire\")",
        "finalString(s = \"pintire\")",
        "finalString(s = \"pintor\")",
        "finalString(s = \"pintor\")",
        "finalString(s = \"pintor\")",
        "finalString(s = \"pintori\")",
        "finalString(s = \"pintor\")",
        "finalString(s = \"pintori\")",
        "finalString(s = \"xpntro\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,2,3,3,3,4,4,4,4], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,3,3,3,4,4,4,4], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 1, 1, 1, 1], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 2)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five,six\"], separator = \",\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 35)"
    ],
    "sample_168": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hw\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")"
    ],
    "sample_50": [
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCDABCDAB\")"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])"
    ],
    "sample_162": [
        "maxSum(nums = [10, 2, 3, 4, 5, 6, 7, 88, 9])",
        "maxSum(nums = [10, 2, 3, 4, 5, 6, 7, 88, 9])",
        "maxSum(nums = [10, 2, 3, 4, 5, 6, 7, 88, 9])",
        "maxSum(nums = [10, 2, 3, 4, 5, 6, 7, 88, 9])",
        "maxSum(nums = [10, 2, 3, 5, 88, 100, 70])",
        "maxSum(nums = [10, 2, 3, 5, 88, 100, 70])",
        "maxSum(nums = [10, 2, 3, 5, 88, 100, 70])",
        "maxSum(nums = [10, 2, 3, 5, 88, 100, 1])",
        "maxSum(nums = [99, 2, 3, 9, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 9",
        "maxSum(nums = [99, 2, 3, 9, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 9"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 12], target = 8)"
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank=2, additionalTank=1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=0)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"abca\")",
        "minimizedStringLength(s = \"abccba\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,1], k = 2)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 3], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 3], [5, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 2], [5, 1]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 2, 3])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"10101010\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_98": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)"
    ],
    "sample_149": [
        "finalString(s = \"sitting\")",
        "finalString(s = \"sitting\")",
        "finalString(s = \"sitting\")",
        "finalString(s = \"sitting\")",
        "finalString(s = \"sitting\")",
        "finalString(s = \"sitting\")",
        "finalString(s = \"siting\")",
        "finalString(s = \"siting\")",
        "finalString(s = \"rotator\")",
        "finalString(s = \"hiihello\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 2, 1, 1, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 2, 1, 1, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 2, 1, 1, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 2, 1, 1, 3, 4, 4, 4, 4])",
        "continuousSubarrays(A = [1, 2, 2, 1, 1, 3, 4, 4, 4, 4])",
        "continuousSubarrays(A = [1, 2, 2, 1, 3, 4, 1, 2, 3, 3])",
        "continuousSubarrays(A = [1, 2, 2, 1, 3, 4, 4, 4, 1, 2, 1])",
        "continuousSubarrays(A = [1, 2, 2, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_228": [
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 4, 5])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(a = [2, 1, 3, 1, 2, 3, 3])",
        "continuousSubarrays(a = [2, 1, 3, 1, 2, 3, 2, 1, 2, 3])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [3, 1, 2])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"1010\")"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)"
    ],
    "sample_100": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLRRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_L_R_",
        "furthestDistanceFromOrigin(moves = \"R_L_RR_L_\")",
        "furthestDistanceFromOrigin(moves
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"1010\")"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n=1, queries=[[0,1]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])"
    ],
    "sample_121": [
        "minimumIndex(nums = [3, 1, 3, 6, 3])",
        "minimumIndex(nums = [3, 1, 3, 6, 3])",
        "minimumIndex(nums = [3, 1, 3, 6, 3])",
        "minimumIndex(nums = [3, 1, 3, 6, 3])",
        "minimumIndex(nums = [3, 1, 3, 6, 3])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 1])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 1])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 1])",
        "minimumIndex(nums = [3, 1, 3, 6, 4, 5])",
        "minimumIndex(nums = [3, 1, 3, 2, 4])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 10], [3, 5, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 10], [3, 5, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 10], [3, 5, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 10], [3, 5, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 10], [3, 5, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 10], [3, 5, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 10], [3, 5, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 3], [3, 5, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 3], [3, 5, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 3], [3, 5, 2]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0075\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"00000000\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"123056\")",
        "minimumOperations(num = \"123056\")",
        "minimumOperations(num = \"123056\")",
        "minimumOperations(num = \"1230\")",
        "minimumOperations(num = \"1230\")",
        "minimumOperations(num = \"1230\")",
        "minimumOperations(num = \"0075\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"0125\")",
        "minimumOperations(num = \"0125\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n=3, offers=[[1,2,1],[2,3,2],[3,4,3]])",
        "maximizeTheProfit(n=3, offers=[[1,2,1],[2,3,2],[3,4,3]])",
        "maximizeTheProfit(n=3, offers=[[1,2,1],[2,3,2],[3,4,3]])",
        "maximizeTheProfit(n=3, offers=[[1,2,1],[2,3,2],[3,4,3]])",
        "maximizeTheProfit(n=3, offers=[[1,2,1],[2,3,2],[3,4,3]])",
        "maximizeTheProfit(n=3, offers=[[1,2,1],[2,3,2],[3,4,3]])",
        "maximizeTheProfit(n=3, offers=[[1,2,1],[2,3,2],[3,4,3]])",
        "maximizeTheProfit(n=3, offers=[[1,2,1],[2,3,2],[3,4,1]])",
        "maximizeTheProfit(n=3, offers=[[1,2,1],[2,3,2],[3,4,1]])",
        "maximizeTheProfit(n=3, offers=[[1,2,1],[2,3,2],[3,4,1]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 6, 7, 5, 8], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 6, 7, 5, 8], threshold = 6)"
    ],
    "sample_203": [
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"12\")"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2, 3, 1])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2, 3])"
    ],
    "sample_102": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")"
    ],
    "sample_57": [
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [3, 1, 2, 4, 5])",
        "findValueOfPartition(a = [4, 3, 2, 1])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_120": [
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 8, 3, 4])",
        "minimumIndex(nums = [4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"abccba\")",
        "minimizedStringLength(s = \"abca\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(usageLimits = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,",
        "maxIncreasingGroups(usageLimits = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 4, 5])"
    ],
    "sample_206": [
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"5075\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])"
    ],
    "sample_38": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [3, 2, 5, 1, 4])",
        "maxIncreasingGroups(usageLimits = [3, 2, 5, 1, 4])",
        "maxIncreasingGroups(usageLimits = [1, 3, 5, 7, 9])",
        "maxIncreasingGroups(usageLimits = [1, 3, 5, 7, 9])",
        "maxIncreasingGroups(usageLimits = [1, 3, 5, 7, 9])",
        "maxIncreasingGroups(usageLimits = [3, 2, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_53": [
        "smallestString(s = \"bcaaa\")",
        "smallestString(s = \"bcaaa\")",
        "smallestString(s = \"bcaaa\")",
        "smallestString(s = \"bcaaa\")",
        "smallestString(s = \"bcaaa\")",
        "smallestString(s = \"bcaa\")",
        "smallestString(s = \"bcaa\")",
        "smallestString(s = \"bcaa\")",
        "smallestString(s = \"bcaab\")",
        "smallestString(s = \"bac\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1, 3, 15, 11, 2], x = 2)",
        "minAbsoluteDifference(nums = [1, 3, 15, 11, 2], x = 2)",
        "minAbsoluteDifference(nums = [1, 3, 15, 11, 2], x = 2)",
        "minAbsoluteDifference(nums = [1, 3, 15, 11, 2], x = 2)",
        "minAbsoluteDifference(nums = [1, 5, 3, 19, 18, 25], x = 4)",
        "minAbsoluteDifference(nums = [1, 5, 3, 19, 18, 25], x = 4)",
        "minAbsoluteDifference(nums = [1,3,6,10,15], x = 3)",
        "minAbsoluteDifference(nums = [1,3,6,10,15], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7,8,9], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7,8,9], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 1, 2, 3], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)"
    ],
    "sample_163": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_151": [
        "finalString(s = \"thisisazigzag\")",
        "finalString(s = \"thisisazigzag\")",
        "finalString(s = 'thisisazng')",
        "finalString(s = 'thisisazng')",
        "finalString(s = 'thisisazng')",
        "finalString(s = 'thisisazng')",
        "finalString(s = 'thisisazng')",
        "finalString(s = 'thisisazng')",
        "finalString(s = 'thisisazng')",
        "finalString(s = \"this is a string\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,2,3,3,3,4,4,4,4], K = 3)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,4,5,6,7,8,9,10], K = 4)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,4,5,6,7,8,9,10], K = 4)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,4,5,6,7,8,9,10], K = 4)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,4,5,6,7,8,9,10], K = 4)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,4,5,6,7,8,9,10], K = 4)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,2,1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,2,1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,2,1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,4,5,6], K = 3)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"held\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwp\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_147": [
        "finalString(s = \"thisisazng\")",
        "finalString(s = \"thisisazng\")",
        "finalString(s = \"thisisazng\")",
        "finalString(s = \"thisisazig\")",
        "finalString(s = \"thisisazig\")",
        "finalString(s = \"thisisazig\")",
        "finalString(s = \"thisisazigzag\")",
        "finalString(s = \"thisisazigzag\")",
        "finalString(s = \"sings\")",
        "finalString(s = \"sings\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n=5, offers=[(1, 3, 5), (2, 4, 3), (3, 5, 2)])",
        "maximizeTheProfit(n=5, offers=[(1, 3, 5), (2, 4, 3), (3, 5, 2)])",
        "maximizeTheProfit(n=5, offers=[(1, 3, 5), (2, 4, 3), (3, 5, 2)])",
        "maximizeTheProfit(n=5, offers=[(1, 3, 5), (2, 4, 3), (3, 5, 2)])",
        "maximizeTheProfit(n=5, offers=[(1, 3, 5), (2, 4, 10), (3, 5, 15)])",
        "maximizeTheProfit(n=5, offers=[(1, 2, 3), (2, 3, 4), (3, 4, 5)])",
        "maximizeTheProfit(n=5, offers=[(1, 2, 5), (2, 3, 10), (3, 4, 7), (4, 5, 3)])",
        "maximizeTheProfit(n=5, offers=[[1, 2, 5], [2, 3, 10], [3, 4, 5], [4, 5, 3]])",
        "maximizeTheProfit(n=5, offers=[(0, 1, 5), (1, 3, 3), (2, 4, 2)])",
        "maximizeTheProfit(n=5, offers=[(0, 1, 5), (1, 3, 8), (2, 4, 1)])"
    ],
    "sample_99": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [6, 1, 9], target = 2)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"101010\")",
        "maximumOddBinaryNumber(s = \"101010\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)"
    ],
    "sample_148": [
        "finalString(s = \"pintori\")",
        "finalString(s = \"pintori\")",
        "finalString(s = \"pintori\")",
        "finalString(s = \"pintori\")",
        "finalString(s = \"pintori\")",
        "finalString(s = \"pintori\")",
        "finalString(s = \"pintire\")",
        "finalString(s = \"pintire\")",
        "finalString(s = \"pintire\")",
        "finalString(s = \"pintire\")"
    ],
    "sample_231": [
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [1, 3, 4])",
        "countWays(nums = [1, 3, 4])",
        "countWays(nums = [1, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 25, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 25, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 25, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 25, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 25, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 25, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 25, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 25, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 25, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 25, 36, 48, 60])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\", \"python\"], s = \"hwpy\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwo\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)"
    ],
    "sample_227": [
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 2, 3])"
    ],
    "sample_39": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"R__L_\")",
        "furthestDistanceFromOrigin(moves = \"R__L_\")",
        "furthestDistanceFromOrigin(moves = \"R__L_\")",
        "furthestDistanceFromOrigin(moves = \"R__L_\")",
        "furthestDistanceFromOrigin(moves = \"R__L_\")",
        "furthestDistanceFromOrigin(moves = \"RL_R\")",
        "furthestDistanceFromOrigin(moves = \"RL_R\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], threshold = 2)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1,3],[3,7],[4,6]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,6]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,6]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,6],[8,12]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,6],[8,12]])",
        "numberOfPoints(nums = [[1,3],[3,7],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,7],[2,4]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,6],[9,12],[12,15]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,6],[9,12],[12,15]])",
        "numberOfPoints(nums = [[1,3],[3,7],[4,6],[9,12]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 21, 11, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 11, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 11, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 11, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 11, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 11, 14, 13])",
        "countBeautifulPairs(nums = [12, 21, 11, 13, 23])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 21, 11, 14, 13, 15])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], t = 7)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], t = 7)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 6, 7, 5], t = 7)"
    ],
    "sample_36": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 3]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [1, 2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [1, 2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [1, 2], [1, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 5, 4, 3, 2])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LRLRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLLRLRL\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"LLRRRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRR\")",
        "furthestDistanceFromOrigin(moves
    ],
    "sample_117": [
        "minimumIndex(nums = [4, 5, 1, 2, 7, 3, 5])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 3, 5])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 3, 5])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 3, 5])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 3, 5])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 3, 5])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 8, 3, 3])",
        "minimumIndex(nums = [3, 4, 2, 1, 2, 4, 2, 2])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 8, 3, 4])",
        "minimumIndex(nums = [4, 5, 1, 2, 7, 8, 3, 4])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 3)"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [4, 6, 7, 8, 9, 1])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 9, 1])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 9, 1])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 9, 1])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 9, 1])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 2, 1, 3, 5])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 2, 1, 3, 5])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 2, 1, 3, 5])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 2, 1, 3, 5])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 9, 1, 3, 2, 1])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_315": [
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 5)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3], l = 5, r = 10)"
    ],
    "sample_322": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 15)",
        "isFascinating(n = 15)",
        "isFascinating(n = 1)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcdef\", s2 = \"fedcba\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"fedcba\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"fedcba\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"fedcba\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"fedcba\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"fedcba\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"fedcba\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edabc\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edabc\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edabc\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 10)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)"
    ],
    "sample_247": [
        "minOperations(s1 = \"abcda\", s2 = \"adcbf\", x = 3)",
        "minOperations(s1 = \"abcda\", s2 = \"adcbf\", x = 3)",
        "minOperations(s1 = \"abcda\", s2 = \"adcbf\", x = 3)",
        "minOperations(s1 = \"abcda\", s2 = \"adcbf\", x = 3)",
        "minOperations(s1 = \"abcda\", s2 = \"adcbf\", x = 3)",
        "minOperations(s1 = \"abcda\", s2 = \"adcbf\", x = 3)",
        "minOperations(s1 = \"abcda\", s2 = \"adcbf\", x = 3)",
        "minOperations(s1 = \"abcda\", s2 = \"adcba\", x = 2)",
        "minOperations(s1 = \"abcda\", s2 = \"adcba\", x = 2)",
        "minOperations(s1 = \"abcda\", s2 = \"adcbf\", x = 2)"
    ],
    "sample_340": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 2, y = 3, z = 1)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")"
    ],
    "sample_361": [
        "isGood(a = [0, 1, 2, 3, 4, 4])",
        "isGood(a = [0, 1, 2, 3, 4, 4])",
        "isGood(a = [0, 1, 2, 3, 4, 4])",
        "isGood(a = [0, 1, 2, 3, 4, 4])",
        "isGood(a = [1, 2, 3, 4, 4])",
        "isGood(a = [1, 2, 3, 4, 4])",
        "isGood(a = [1, 2, 3, 4, 5, 5])",
        "isGood(a = [0, 1, 2, 3, 3, 4, 5])",
        "isGood(a = [0, 1, 2, 3, 3, 4, 5])",
        "isGood(a = [0, 1, 2, 3, 3])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "shortestBeautifulSubstring(s = \"1011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011100011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011100011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"11001100\", k = 2)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")"
    ],
    "sample_364": [
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,4,5])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [1, 7])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [1, 7])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [1, 7])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [1, 7])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [1, 7])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 8, 9, 6, 5], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 8, 9, 6, 5, 8], moveFrom = [5, 6], moveTo = [8, 9])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4])"
    ],
    "sample_303": [
        "countSeniors(details = [\"John, 75\", \"Mary, 62\", \"Bob, 45\", \"Alice, 72\"])",
        "countSeniors(details = [\"John, 75\", \"Mary, 62\", \"Bob, 45\", \"Alice, 72\"])",
        "countSeniors(details = [\"John, 75\", \"Mary, 60\", \"Bob, 45\", \"Alice, 70\"])",
        "countSeniors(details = [\"John, 75\", \"Mary, 60\", \"Bob, 45\", \"Alice, 70\"])",
        "countSeniors(details = [\"John, 72\", \"Mary, 65\", \"Bob, 45\", \"Alice, 78\"])",
        "countSeniors(details = [\"John, 72\", \"Mary, 65\", \"Bob, 45\", \"Alice, 78\"])",
        "countSeniors(details = [\"John Doe 1950\", \"Jane Smith 1980\", \"Alice Johnson 1945\", \"Bob Brown 1970\"])",
        "countSeniors(details = [\"John, 75\", \"Mary, 62\", \"Bob, 35\", \"Alice, 72\"])",
        "countSeniors(details = [\"John Doe 101 75\", \"Jane Smith 203 85\", \"Bob Johnson 302 55\", \"Mary Davis 405 90\"])",
        "countSeniors(details = [\"John Doe 101 75\", \"Jane Smith 203 85\", \"Bob Johnson 302 55\", \"Mary Davis 405 90\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababcbacadefegdehijhklij\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [4, 2, 1, 6, 7])",
        "minimumSum(nums = [4, 2, 1, 6, 7])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"0001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100",
        "shortestBeautifulSubstring(s = \"0001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100",
        "shortestBeautifulSubstring(s = \"0001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100",
        "shortestBeautifulSubstring(s = \"0001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100",
        "shortestBeautifulSubstring(s = \"000110001101100011000110\", k = 3)",
        "shortestBeautifulSubstring(s = \"000110001101100011000110\", k = 3)",
        "shortestBeautifulSubstring(s = \"00010001000100010001\", k = 3)",
        "shortestBeautifulSubstring(s = \"0001000\", k = 2)",
        "shortestBeautifulSubstring(s = \"000111000\", k = 3)",
        "shortestBeautifulSubstring(s = \"00011000111100001\", k = 3)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"tac\",\"god\",\"act\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"tac\",\"god\",\"act\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"tac\",\"god\",\"act\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"tac\",\"god\",\"act\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"tac\",\"god\",\"act\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"tac\",\"god\",\"act\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"banana\",\"dog\",\"nana\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\",\"catdog\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\", \"orange\", \"grape\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\", \"orange\", \"grape\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_302": [
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1980-01-01\", \"1970-01-01\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(A = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"x\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"x\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"x\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"x\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"x\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"x\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"x\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"x\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_314": [
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [10, 20, 30], money = 30)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abacab\")",
        "longestSemiRepetitiveSubstring(s = \"abccba\")",
        "longestSemiRepetitiveSubstring(s = \"abacabac\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")"
    ],
    "sample_255": [
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)"
    ],
    "sample_368": [
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hippo\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)"
    ],
    "sample_449": [
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"abcabc\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"abcabc\")",
        "minChanges(s = \"abcabc\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"aaaa\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"1111111\")",
        "minimumSteps(s = \"1111111\")",
        "minimumSteps(s = \"1111111\")",
        "minimumSteps(s = \"1111111\")",
        "minimumSteps(s = \"1111111\")",
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"2010-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"2010-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"2001-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"2001-01-01\", \"1950-01-01\", \"1960-01-01\"])",
        "countSeniors(details = [\"2001-01-01\", \"1945-01-01\"])",
        "countSeniors(details = [\"2000-01-01-01-01-01-M-65\", \"2000-01-01-01-01-01-M-50\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 1, 2, 2])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 1, 2, 2])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]], k = 5)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]], k = 5)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]], k = 5)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]], k = 3)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]], k = 3)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 1, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 3, k = 4)"
    ],
    "sample_452": [
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 4, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 4, 3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 4, 3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 4, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 4, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 1, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 1, 3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 5])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"1011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0001100011000\", k = 2)",
        "shortestBeautifulSubstring(s = \"0001100011000\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"000111000\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011100011000110\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111000110001011101110001000111011011011\", k = 3)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])"
    ],
    "sample_453": [
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcdefg\", k = 2)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"HulpmY\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 2, 3, 4, 4])",
        "minimumSeconds(nums = [1, 2, 2, 3, 4, 4])",
        "minimumSeconds(nums = [1, 2, 2, 3, 4, 4])",
        "minimumSeconds(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_258": [
        "minimumSum(nums = [3, 5, 8, 1])",
        "minimumSum(nums = [3, 5, 8, 1])",
        "minimumSum(nums = [3, 5, 8, 1])",
        "minimumSum(nums = [2, 3, 5, 6, 8, 10])",
        "minimumSum(nums = [2, 3, 5, 6, 8, 10])",
        "minimumSum(nums = [2, 3, 5, 6, 8, 10])",
        "minimumSum(nums = [2, 3, 5, 6, 8, 10])",
        "minimumSum(nums = [2, 3, 5, 6, 8, 10])",
        "minimumSum(nums = [3, 4, 5, 6, 7])",
        "minimumSum(nums = [3, 4, 5, 6, 7])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 4)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 4)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 4)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 4)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 4)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_319": [
        "buyChoco(prices = [10, 20], money = 30)",
        "buyChoco(prices = [10, 20], money = 30)",
        "buyChoco(prices = [10, 20], money = 30)",
        "buyChoco(prices = [10, 20], money = 30)",
        "buyChoco(prices = [10, 20], money = 30)",
        "buyChoco(prices = [10, 20], money = 30)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [5, 3], money = 8)",
        "buyChoco(prices = [5, 3], money = 8)"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10,10])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10,10])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10,10])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10,10])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 4])",
        "isGood(nums = [1, 2, 3, 4, 4])",
        "isGood(nums = [1, 2, 3, 4, 4])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [2, 3, 5, 7])",
        "minimumSeconds(nums = [2, 3, 5, 7])",
        "minimumSeconds(nums = [2, 3, 5, 7])",
        "minimumSeconds(nums = [2, 3, 5, 7])",
        "minimumSeconds(nums = [2, 3, 5, 7])",
        "minimumSeconds(nums = [2, 3, 5, 7])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [2, 3, 5, 1, 4])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1112213\", k = 3)",
        "shortestBeautifulSubstring(s = \"1112213\", k = 3)",
        "shortestBeautifulSubstring(s = \"1112213\", k = 3)",
        "shortestBeautifulSubstring(s = \"111221314\", k = 3)",
        "shortestBeautifulSubstring(s = \"111221314\", k = 3)",
        "shortestBeautifulSubstring(s = \"111221\", k = 3)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 1, 1])"
    ],
    "sample_289": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1000\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3, 1, 4, 2, 2])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_427": [
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minimumSeconds(nums = [1,2,2,3,4,5,6])"
    ],
    "sample_448": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [4, 2, 1, 5, 3], limit = 3)",
        "lexicographicallySmallestArray(nums = [4, 2, 1, 5, 3], limit = 3)",
        "lexicographicallySmallestArray(nums = [4, 2, 1, 5, 3], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [3, 2, 1])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"abcde\", k = 3)",
        "beautifulSubstrings(s = \"abcde\", k = 3)",
        "beautifulSubstrings(s = \"abstemious\", k = 3)",
        "beautifulSubstrings(s = \"abstemious\", k = 3)",
        "beautifulSubstrings(s = \"abcdefg\", k = 2)",
        "beautifulSubstrings(s = \"abcdefg\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"abcdef\", k = 2)"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)"
    ],
    "sample_462": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 3)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [2, 3, 4], nums2 = [1, 5, 6])",
        "minOperations(nums1 = [2, 3, 4], nums2 = [1, 5, 6])",
        "minOperations(nums1 = [2, 3, 4], nums2 = [1, 5, 6])",
        "minOperations(nums1 = [2, 3, 1], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [2, 3, 1], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [2, 3, 4], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101010\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minOperations(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minOperations(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minOperations(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minOperations(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])",
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [3, 6, 8, 10, 15])",
        "minOperations(nums = [3, 1, 3, 2, 2])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xy\", \"yx\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xy\", \"yx\", \"aaa\", \"bbb\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 4)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 4)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 4)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 4)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 4)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 4)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 4)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 4)",
        "maxSum(nums = [1,2,3,4,5,6,7], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [2,3,4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [2,3,4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [2,3,4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [2,3,4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [2,3,4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [2,3,4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [3,4,5])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [3,4,5])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,2], moveTo = [2,3])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abacdfgdcaba\")",
        "longestSemiRepetitiveSubstring(s = \"abacdfgdcaba\")",
        "longestSemiRepetitiveSubstring(s = \"abacdfgdcaba\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abac\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"yxz\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_324": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_380": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 7)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [4, 5, 2, 8], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"leotced\")",
        "sortVowels(s = \"leotced\")",
        "sortVowels(s = \"leotced\")",
        "sortVowels(s = \"leotced\")",
        "sortVowels(s = \"leotced\")",
        "sortVowels(s = \"leotced\")",
        "sortVowels(s = \"leotced\")",
        "sortVowels(s = \"leotced\")",
        "sortVowels(s = \"letcode\")",
        "sortVowels(s = \"letcode\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_307": [
        "countSeniors(details = [\"19900101\", \"20001231\", \"19700515\"])",
        "countSeniors(details = [\"19900101\", \"20001231\", \"19700515\"])",
        "countSeniors(details = [\"19900101\", \"20001231\", \"19700515\"])",
        "countSeniors(details = [\"19900101\", \"20001231\", \"19700515\"])",
        "countSeniors(details = [\"19900101\", \"20001231\", \"19700515\"])",
        "countSeniors(details = [\"19900101\", \"20001231\", \"19700515\"])",
        "countSeniors(details = [\"19900101\", \"20001231\", \"19700515\"])",
        "countSeniors(details = [\"19900101\", \"20001231\", \"19450515\"])",
        "countSeniors(details = [\"19900101\", \"20001231\", \"19450515\"])",
        "countSeniors(details = [\"19901231\", \"20000101\", \"19650505\"])"
    ],
    "sample_323": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 4)",
        "isFascinating(n = 4)",
        "isFascinating(n = 4)",
        "isFascinating(n = 4)",
        "isFascinating(n = 3)",
        "isFascinating(n = 3)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)"
    ],
    "sample_419": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 6)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"1011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011100011\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"abaabaa\")",
        "minimumBeautifulSubstrings(s = \"abaabaa\")",
        "minimumBeautifulSubstrings(s = \"abaabaa\")",
        "minimumBeautifulSubstrings(s = \"abaabaa\")",
        "minimumBeautifulSubstrings(s = \"abaabaa\")",
        "minimumBeautifulSubstrings(s = \"aba\")",
        "minimumBeautifulSubstrings(s = \"aba\")",
        "minimumBeautifulSubstrings(s = \"aba\")",
        "minimumBeautifulSubstrings(s = \"1234567890\")",
        "minimumBeautifulSubstrings(s = \"bbbaaabbb\")"
    ],
    "sample_341": [
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 2)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\", k = 3)",
        "beautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\", k = 3)"
    ],
    "sample_304": [
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\", \"1950-01-01\"])",
        "countSeniors(details = [\"1990-01-01-10\", \"1990-01-02-20\", \"1990-01-03-70\"])",
        "countSeniors(details = [\"1990-01-01-10\", \"1990-01-02-20\", \"1990-01-03-70\"])",
        "countSeniors(details = [\"1990-01-01\", \"1950-01-01\", \"1980-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1950-01-01\", \"1980-01-01\"])",
        "countSeniors(details = [\"1990-01-01-01-01-01\", \"1990-01-01-01-01-62\", \"1990-01-01-01-01-25\"])",
        "countSeniors(details = [\"1990-01-01-01-01-01\", \"1990-01-01-01-01-62\", \"1990-01-01-01-01-25\"])",
        "countSeniors(details = [\"1990-01-01-10\", \"1990-01-02-20\", \"1990-01-03-65\", \"1990-01-04-45\"])",
        "countSeniors(details = [\"1990-01-01-10\", \"1990-01-01-20\", \"1990-01-01-70\", \"1990-01-01-80\"])",
        "countSeniors(details = [\"1990-01-01-12-30-00\", \"1990-01-01-13-30-00\", \"1990-01-01-14-30-00\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(s = \"101010\")",
        "minimumBeautifulSubstrings(s
        "minimumBeautifulSubstrings(s = \"101010\")",
        "minimumBeautifulSubstrings(s = \"101010\")",
        "minimumBeautifulSubstrings(s = \"101010\")",
        "minimumBeautifulSubstrings(s = \"101010\")",
        "minimumBeautifulSubstrings(s = \"101010\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"catdog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"catdog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"catdog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"catdog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"catdog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"catdog\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello World\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_256": [
        "minimumSum(nums = [3, 4, 7, 6, 4])",
        "minimumSum(nums = [3, 4, 7, 6, 4])",
        "minimumSum(nums = [3, 4, 7, 6, 4])",
        "minimumSum(nums = [3, 4, 7, 6, 4])",
        "minimumSum(nums = [3, 4, 7, 6, 4])",
        "minimumSum(nums = [3, 4, 7, 6, 4])",
        "minimumSum(nums = [3, 4, 7, 6, 4])",
        "minimumSum(nums = [3, 4, 7, 6, 4])",
        "minimumSum(nums = [3, 4, 7, 6, 4])",
        "minimumSum(nums = [4, 2, 1, 6, 7])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])"
    ],
    "sample_372": [
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"teLeOtced\")",
        "sortVowels(s = \"teLeOtced\")",
        "sortVowels(s = \"leotced\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [3, 1, 3, 2, 2])",
        "minOperations(nums = [3, 1, 3, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])"
    ],
    "sample_367": [
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"Hello World\")"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [3, 1])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bcd\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6, 0])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])"
    ],
    "sample_424": [
        "minOperations(nums = [3,1,3,4,3,3,2,4,4])",
        "minOperations(nums = [3,1,3,4,3,3,2,4,4])",
        "minOperations(nums = [3,1,3,4,3,3,2,4,4])",
        "minOperations(nums = [3,1,3,4,3,3,2,4,4])",
        "minOperations(nums = [3,1,3,4,3,3,2,4,4])",
        "minOperations(nums = [3,1,3,4,2])",
        "minOperations(nums = [3,1,3,4,2])",
        "minOperations(nums = [3,1,3,4,3,2,4,4])",
        "minOperations(nums = [3,1,3,4,3,4,4])",
        "minOperations(nums = [3,1,3,4,3,4,4])"
    ],
    "sample_451": [
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcde\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 3, 5, 7], t = 10)",
        "countPairs(nums = [1, 3, 5, 7], t = 10)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"push\", \"3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"push\", \"3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"push\", \"3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"push\", \"3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"push\", \"3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push 1\", \"push 2\", \"pop\", \"push 3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"1\", \"p\", \"2\", \"p\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"bcd\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"bcd\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"zbcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [3, 3], [3, 4], [4, 3], [4, 4]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [3, 3], [3, 4], [4, 3], [4, 4]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [3, 3], [3, 4], [4, 3], [4, 4]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [3, 3], [3, 4], [4, 3], [4, 4]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2]], k = 1)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yxy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yxy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yxy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yxy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yxy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yxy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yyx\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [2, -3, 1, -5, 4])",
        "maxStrength(nums = [2, -3, 1, -5, 4])",
        "maxStrength(nums = [2, -3, 1, -5, 4])",
        "maxStrength(nums = [2, 3, -1, -5, -2, 4, 6])",
        "maxStrength(nums = [2, 3, -1, -5, -2, 4, 6])",
        "maxStrength(nums = [2, 3, -1, -5, -2, 4, 6])",
        "maxStrength(nums = [2, 3, -1, -5, -2, 4, 6])",
        "maxStrength(nums = [2, 3, -1, -5, 7, -3, 9])",
        "maxStrength(nums = [2, 3, -1, 5, -2, 4])",
        "maxStrength(nums = [2, 3, -1, 5, -2, 4])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 5, 8])",
        "minimumCoins(prices = [1, 2, 3, 5, 8])",
        "minimumCoins(prices = [1, 2, 3, 5, 8])",
        "minimumCoins(prices = [1, 2, 3, 5])",
        "minimumCoins(prices = [1, 2, 3, 5])",
        "minimumCoins(prices = [1, 2, 3, 5])",
        "minimumCoins(prices = [1, 2, 3, 5, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 5, 7, 9])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\", \"3\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [5, 8], moveTo = [9, 6])",
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [5, 8], moveTo = [9, 6])",
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [5, 8], moveTo = [9, 6])",
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [5, 6], moveTo = [9, 8])",
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [5, 6], moveTo = [9, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [1, 2])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [7, 10])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [6], moveTo = [9])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_316": [
        "buyChoco(a = [10, 20], money = 30)",
        "buyChoco(a = [10, 20], money = 30)",
        "buyChoco(a = [10, 20], money = 30)",
        "buyChoco(a = [10, 20], money = 30)",
        "buyChoco(a = [10, 20], money = 30)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [3, 5], money = 8)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 1, 1, 1])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 5])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n=5, limit=3)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [1, 1, 1]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 100)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])"
    ],
    "sample_326": [
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 145)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [3, 5, 1, 2, 4])",
        "minimumSum(nums = [3, 5, 1, 2, 4])",
        "minimumSum(nums = [3, 5, 1, 2, 4])",
        "minimumSum(nums = [3, 5, 1, 2, 4])",
        "minimumSum(nums = [3, 5, 1, 2, 4])",
        "minimumSum(nums = [3, 5, 1, 2, 4])",
        "minimumSum(nums = [4, 2, 1, 3])",
        "minimumSum(nums = [4, 2, 1, 3])",
        "minimumSum(nums = [4, 2, 1, 3])",
        "minimumSum(nums = [3, 5, 8, 10])"
    ],
    "sample_450": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"abbaa\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"10101\", s2 = \"10101\", x = 1)",
        "minOperations(s1 = \"101101\", s2 = \"101101\", x = 3)",
        "minOperations(s1 = \"101101\", s2 = \"101101\", x = 3)",
        "minOperations(s1 = \"101101\", s2 = \"101101\", x = 3)",
        "minOperations(s1 = \"10101\", s2 = \"10101\", x = 3)",
        "minOperations(s1 = \"10101\", s2 = \"10101\", x = 3)",
        "minOperations(s1 = \"101\", s2 = \"101\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"101\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"111\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"110\", x = 1)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John Doe, 55\", \"Jane Smith, 70\", \"Bob Johnson, 45\"])",
        "countSeniors(details = [\"John Doe, 55\", \"Jane Smith, 70\", \"Bob Johnson, 45\"])",
        "countSeniors(details = [\"John Doe, 55\", \"Jane Smith, 65\", \"Bob Johnson, 45\"])",
        "countSeniors(details = [\"John Doe, 55\", \"Jane Smith, 65\", \"Bob Johnson, 45\"])",
        "countSeniors(details = [\"John Doe 1990\", \"Jane Smith 1955\", \"Bob Johnson 1980\"])",
        "countSeniors(details = [\"John Doe, 55\", \"Jane Smith, 72\", \"Bob Johnson, 45\"])",
        "countSeniors(details = [\"John Doe 1990 01 01\", \"Jane Smith 1955 02 02\", \"Bob Johnson 1945 03 03\"])",
        "countSeniors(details = [\"John Doe, 55\", \"Jane Smith, 72\", \"Bob Johnson, 45\", \"Mary Davis, 68\"])",
        "countSeniors(details = [\"John Doe, 70\", \"Jane Smith, 55\", \"Bob Johnson, 65\"])",
        "countSeniors(details = [\"John Doe, 25\", \"Jane Smith, 70\", \"Bob Johnson, 45\", \"Mary Davis, 80\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 1])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [7, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [1, 2])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [1, 2])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [7, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [10, 11])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [1, 3])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 8], moveTo = [1, 6])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])"
    ]
}