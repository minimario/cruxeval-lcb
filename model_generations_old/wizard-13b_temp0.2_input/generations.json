{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 5, 7])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 5, 7, 8, 9])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"egiv\", s2 = \"levi\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3], money = 3)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2, 3], l = 1, r = 2)"
    ],
    "sample_322": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 55)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,5,5,6,6])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,4,4])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 4, limit = 3)"
    ],
    "sample_247": [
        "minOperations(s1 = \"abcd\", s2 = \"abdc\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"abdc\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"abdc\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abdc\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abdc\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abdc\", x = 2)",
        "minOperations(s1 = \"aba\", s2 = \"bcb\", x = 1)",
        "minOperations(s1 = \"aba\", s2 = \"bcb\", x = 1)",
        "minOperations(s1 = \"aba\", s2 = \"bcb\", x = 1)",
        "minOperations(s1 = \"aba\", s2 = \"bcb\", x = 1)"
    ],
    "sample_340": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 4, z = 1)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])"
    ],
    "sample_294": [
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"111010101\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"geek\", s2 = \"keek\", s3 = \"keek\")",
        "findMinimumOperations(s1 = \"geek\", s2 = \"keek\", s3 = \"keek\")",
        "findMinimumOperations(s1 = \"geek\", s2 = \"keek\", s3 = \"keek\")",
        "findMinimumOperations(s1 = \"geek\", s2 = \"eke\", s3 = \"keek\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeksforgeeks\", s3 = \"geeksforgeeks\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcde\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9, 5], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9, 5, 6, 8, 9], moveFrom = [5, 6, 8], moveTo = [9, 8, 7])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9, 5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 4, 4])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 4, 4])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 4, 4])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 4, 4])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 4, 4])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 4, 4])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 4, 4, 6, 6])",
        "minLengthAfterRemovals(nums = [1,1,3,3,5,5,7,7])",
        "minLengthAfterRemovals(nums = [1,1,3,3,5,5,7,7])",
        "minLengthAfterRemovals(nums = [1,1,3,3,5,5])"
    ],
    "sample_303": [
        "countSeniors(details = [\"John Doe 45\", \"Jane Doe 65\", \"Bob Smith 30\", \"Alice Johnson 70\"])",
        "countSeniors(details = [\"John Doe 45\", \"Jane Doe 65\", \"Bob Smith 30\", \"Alice Johnson 70\"])",
        "countSeniors(details = [\"John Doe 50\", \"Jane Doe 65\", \"Bob Smith 40\", \"Alice Johnson 70\"])",
        "countSeniors(details = [\"John Doe 50\", \"Jane Doe 65\", \"Bob Smith 40\", \"Alice Johnson 70\"])",
        "countSeniors(details = [\"John Doe 45\", \"Jane Doe 55\", \"Bob Smith 70\", \"Alice Johnson 65\"])",
        "countSeniors(details = [\"John Doe 70\", \"Jane Doe 65\", \"Bob Smith 75\", \"Alice Johnson 60\"])",
        "countSeniors(details = [\"John Doe 55\", \"Jane Doe 65\", \"Bob Smith 75\", \"Alice Johnson 45\"])",
        "countSeniors(details = [\"John Doe 45\", \"Jane Doe 70\", \"Bob Smith 55\", \"Alice Johnson 65\"])",
        "countSeniors(details = [\"John Doe 45\", \"Jane Doe 65\", \"Bob Smith 30\", \"Sue Jones 70\"])",
        "countSeniors(details = [\"John Doe 65\", \"Jane Doe 70\", \"Bob Smith 61\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abacbade\")",
        "longestSemiRepetitiveSubstring(s = \"abacf\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aac\", s3 = \"aad\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 15)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\", \"gh\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"ananas\", \"ananab\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"ananas\", \"ananab\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"00110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"01010101\", k = 3)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"bird\", \"elephant\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"bird\", \"elephant\", \"lion\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"ananas\", \"ananab\", \"bananan\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"bird\", \"fish\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"pie\", \"banana\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\", \"gh\", \"ij\", \"kl\", \"mn\", \"op\", \"qr\", \"st\", \"uv\", \"wx\", \"yz\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"ananas\", \"ananab\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tiger\", \"lion\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 20, m = 3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,5,5])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_302": [
        "countSeniors(details = [\"1990-01-01\", \"1970-02-02\", \"1980-03-03\"])",
        "countSeniors(details = [\"1990-01-01\", \"1970-02-02\", \"1980-03-03\"])",
        "countSeniors(details = [\"1990-01-01\", \"1970-02-02\", \"1980-03-03\"])",
        "countSeniors(details = [\"1990-01-01\", \"1970-02-02\", \"1980-03-03\"])",
        "countSeniors(details = [\"1990-01-01\", \"1970-02-02\", \"2000-12-31\"])",
        "countSeniors(details = [\"1990-12-31\", \"1970-06-30\", \"2000-01-01\"])",
        "countSeniors(details = [\"1990-12-31\", \"2001-01-01\", \"1989-06-30\"])",
        "countSeniors(details = [\"1990-01-01\", \"1980-02-01\", \"1970-03-01\"])",
        "countSeniors(details = [\"1990-12-31\", \"1979-06-21\", \"2001-01-01\"])",
        "countSeniors(details = [\"1990-12-31\", \"1965-05-01\", \"2005-06-30\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dcb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dcb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dcb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dcb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minSum(nums1 = [0, 1, 2, 3, 4], nums2 = [0, 1, 2, 3, 4])",
        "minSum(nums1 = [1, 1, 0, 0], nums2 = [1, 0, 1, 0])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"p\")"
    ],
    "sample_397": [
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_368": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1,2],[3,4]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 8, 8])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 8, 8])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 8, 8])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 8, 8])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 8, 8])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 8, 8])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 8, 8])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 8, 8])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 1, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 1, 2, 2, 2])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioooaaeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiouu\", k = 3)",
        "beautifulSubstrings(s = \"baaannkkaa\", k = 3)"
    ],
    "sample_449": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aaabbb\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0101\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"1990-01-01\", \"1991-01-01\", \"1992-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1995-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1995-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1995-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1991-01-01\", \"1992-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1999-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"1990-12-31\", \"1991-12-31\", \"1992-12-31\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-12-31\", \"1999-12-31\"])",
        "countSeniors(details = [\"1990-12-31\", \"2000-12-31\", \"1995-12-31\"])",
        "countSeniors(details = [\"1990-01-01\", \"1989-12-31\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]], k = 2)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)"
    ],
    "sample_452": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,3,4], nums2 = [2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,3,4,2])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,3,4,2])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,3,4,2])",
        "minOperations(nums1 = [1,3,5,7], nums2 = [2,4,6,8])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 5])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 6, 7, 8, 9])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 6, 7, 8, 9])",
        "minSum(nums1 = [0, 1, 1, 1], nums2 = [1, 0, 1, 0])"
    ],
    "sample_453": [
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [3, 2, 2, 3, 2, 4, 5], k = 4)",
        "minOperations(nums = [3, 2, 2, 3, 2, 4, 5], k = 4)",
        "minOperations(nums = [3, 2, 2, 3, 2, 4, 5], k = 4)",
        "minOperations(nums = [2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3], money = 2)"
    ],
    "sample_290": [
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"10101\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 7, 2, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 7, 2, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 5, 5, 7, 7])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [3, 2, 2, 3, 2, 4, 5], k = 2)",
        "minOperations(nums = [3, 2, 2, 3, 2, 4, 5], k = 2)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "isGood(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_289": [
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s
        "minimumSteps(s = \"00000000\")",
        "minimumSteps(s
        "minimumSteps(s = \"00000000\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"10000\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aac\", s3 = \"aac\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aac\", s3 = \"aac\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"defg\", s3 = \"hijkl\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aac\", s3 = \"aac\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_448": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [5, 3, 1, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [5, 3, 1, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [5, 3, 1, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [5, 3, 1, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 3, 1, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 4)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 6)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 2, 1, 5, 6])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 2, 1, 5, 6])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 2, 1, 5, 6])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 2, 1, 5, 6])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 2, 1, 5, 6])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 5, 4, 3, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 5, 4, 3, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 5, 4, 3, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 5, 4, 3, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 2, 1, 5, 4])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3, 4, 4, 5, 5])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"zab\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"zabcd\")",
        "canMakeSubsequence(str1 = \"azzzz\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"zbac\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3,2,1], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [2,3], moveTo = [1,2])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [2,3], moveTo = [1,2])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [2,3], moveTo = [1,2])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [1,2], moveTo = [3,3])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [1,2], moveTo = [3,3])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [1,2,3], moveTo = [2,3,1])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"race\", \"ecar\", \"memory\", \"rython\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"ecar\", \"memory\", \"rython\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"ecar\", \"memory\", \"rython\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"ecar\", \"memory\", \"rython\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"ecar\", \"memory\", \"rython\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"ecar\", \"memory\", \"rython\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"ecar\", \"memory\", \"rython\", \"python\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"ecar\", \"memory\", \"rython\", \"python\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"ecar\", \"ca\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"ecar\", \"ca\", \"a\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"def\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"def\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"def\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"def\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"def\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"def\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"def\", s3 = \"abc\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")"
    ],
    "sample_324": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3], money = 4)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"cab\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"hello world\")",
        "sortVowels(s = \"hello world\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_307": [
        "countSeniors(details = [\"1990-01-01\", \"1980-02-02\", \"1970-03-03\", \"1960-04-04\"])",
        "countSeniors(details = [\"1990-01-01\", \"1980-02-02\", \"1970-03-03\", \"1960-04-04\"])",
        "countSeniors(details = [\"1990-01-01\", \"1980-02-02\", \"1970-03-03\", \"1960-04-04\"])",
        "countSeniors(details = [\"1990-01-01\", \"1980-02-02\", \"1970-03-03\", \"1960-04-04\"])",
        "countSeniors(details = [\"1990-01-01\", \"1980-02-02\", \"1970-03-03\", \"1960-04-04\"])",
        "countSeniors(details = [\"1990-01-01\", \"1975-02-02\", \"1985-03-03\", \"1960-04-04\"])",
        "countSeniors(details = [\"1990-01-01\", \"1975-05-05\", \"2001-12-31\"])",
        "countSeniors(details = [\"1990-01-01\", \"1970-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1975-02-02\", \"2000-12-31\"])",
        "countSeniors(details = [\"1990-12-31\", \"1965-01-01\", \"1980-02-02\", \"1975-03-03\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "minimumBeautifulSubstrings(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "minimumBeautifulSubstrings(s = \"abac\")",
        "minimumBeautifulSubstrings(s = \"0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "minimumBeautifulSubstrings(s = \"ababababab\")",
        "minimumBeautifulSubstrings(s = \"0110101011100110111001101100010100010111001101110011011000101000101110011011100110110001010001011100110111001101100010100010111001101110011011000101000101110011011100110110001010001011100110111001101100010100010111001101110011011000101000101110011011100110110001010001011100110111001101100010100010111001101110011011000101000101110011011100110110001010001011100110111001101100010100010111001101110011011000101000101110011011100110110001010001011100110111001101100010100010111001101110011011000101000101110011",
        "minimumBeautifulSubstrings(s = \"0110101011101101110110101011011101101010110111011010101101110110101011011101101010110111011010101101110110101011011101101010110111011010101101110110101011011101101010110111011010101101110110101011011101101010110111011010101101110110101011011101101010110111011010101101110110101011011101101010110111011010101101110110101011011101101010110111011010101101110110101011011101101010110111011010101101110110101011011101101010110111011010101101110110101011011101101010110111011010101101110110101011011101101010110111",
        "minimumBeautifulSubstrings(s = \"0110101011101110101011101101110101101110101110110101110111011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011011101011101101110101110111011",
        "minimumBeautifulSubstrings(s = \"0110101011101110111101101010111011110101101111011010111011110111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111",
        "minimumBeautifulSubstrings(s = \"0110101011101011011100110110001010100011011101101110111001011011100110111011101011001011101101110011011101110010110111011011101110101100101110110111001101110111010110010111011011100110111011101011001011101101110011011101110101100101110110111001101110111010110010111011011100110111011101011001011101101110011011101110101100101110110111001101110111010110010111011011100110111011101011001011101101110011011101110101100101110110111001101110111010110010111011011100110111011101011001011101101110011011101110101100"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n=10, limit=3)"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = ['2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', '1', 'prev'])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"ababbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011",
        "shortestBeautifulSubstring(s = \"0011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011",
        "shortestBeautifulSubstring(s = \"0011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011",
        "shortestBeautifulSubstring(s = \"1011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"10101110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"00111001110011\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "minimumBeautifulSubstrings(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "minimumBeautifulSubstrings(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "minimumBeautifulSubstrings(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "minimumBeautifulSubstrings(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "minimumBeautifulSubstrings(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "minimumBeautifulSubstrings(s = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "minimumBeautifulSubstrings(s = \"0110101011\")",
        "minimumBeautifulSubstrings(s = \"01101010111\")",
        "minimumBeautifulSubstrings(s = \"0110101011100110111011011100101010001010100110110101110110111001101110110101110010101000101010011011010111011011100110111011010111001010100010101001101101011101101110011011101101011100101010001010100110110101110110111001101110110101110010101000101010011011010111011011100110111011010111001010100010101001101101011101101110011011101101011100101010001010100110110101110110111001101110110101110010101000101010011011010111011011100110111011010111001010100010101001101101011101101110011"
    ],
    "sample_341": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"bbaaaeiou\", k = 3)"
    ],
    "sample_304": [
        "countSeniors(details = [\"1990-01-01\", \"1995-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1970-01-01\", \"1980-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1970-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1970-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1980-06-30\", \"2000-12-31\"])",
        "countSeniors(details = [\"1990-01-01\", \"1980-06-30\", \"2000-12-31\"])",
        "countSeniors(details = [\"1990-12-31\", \"1991-06-30\", \"1992-12-31\"])",
        "countSeniors(details = [\"1990-01-01\", \"1980-06-01\", \"1995-12-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"1989-01-01\", \"1989-07-01\"])",
        "countSeniors(details = [\"1990-12-31\", \"1980-06-30\", \"1995-01-01\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s
        "minimumBeautifulSubstrings(s = \"101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "minimumBeautifulSubstrings(s
        "minimumBeautifulSubstrings(s = \"1010101\")",
        "minimumBeautifulSubstrings(s = \"011010101110110111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101101010111011011101",
        "minimumBeautifulSubstrings(s = \"011010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101",
        "minimumBeautifulSubstrings(s = \"011010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101010111011101010101110111010101011101110101",
        "minimumBeautifulSubstrings(s = \"011010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111101010101110111",
        "minimumBeautifulSubstrings(s = \"011010101110010101010101010101011101101011101101010111011010101010101010111011010111011010101110110101010101010101110110101110110101011101101010101010101011101101011101101010111011010101010101010111011010111011010101110110101010101010101110110101110110101011101101010101010101011101101011101101010111011010101010101010111011010111011010101110110101010101010101110110101110110101011101101010101010101011101101011101101010111011010101010101010111011010111011010101110110101010101010101110110101110",
        "minimumBeautifulSubstrings(s = \"011010101100101110101110111100100110011011110110111001101010010111101101001011010110111101011011101011100110110111011110111011011110111011110011101011101111011101111011110111101110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110111101111011110"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [3, 2, 1, 5, 4])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [3, 2, 1, 5, 4])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"bird\", \"elephant\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"bird\", \"elephant\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\"])",
        "minimizeConcatenatedLength(words = [\"hello\", \"world\", \"python\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\", \"orange\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 3, 4, 2, 2, 3, 1])",
        "minimumSum(nums = [1, 3, 5, 7, 9])",
        "minimumSum(nums = [1, 3, 5, 7, 9])",
        "minimumSum(nums = [1, 3, 5, 7, 9])",
        "minimumSum(nums = [1, 3, 1, 4, 2, 5])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])"
    ],
    "sample_372": [
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = \"LeoTcede\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"00110011\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])"
    ],
    "sample_367": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"acdc\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"acdc\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"acdc\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"acdc\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"az\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"az\", s2 = \"ba\")",
        "canMakeSubsequence(s1 = \"az\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"az\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"zb\", s2 = \"ab\")"
    ],
    "sample_270": [
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 0])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 0])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 4])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 4])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 0])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 4])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 4])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 4])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 0])",
        "minSum(nums1 = [0, 2, 3], nums2 = [1, 2, 0])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = ['2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '2', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', '1', 'prev'])",
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', '1', 'prev'])",
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', '1', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', '2', 'prev', '1', 'prev', 'prev', 'prev'])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9])",
        "minOperations(nums = [1,2,2,3,3,3,4,4,4,5,5,5])"
    ],
    "sample_451": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abccba\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 6, 7, 8, 9])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 6, 7, 8, 9])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 6, 7, 8, 9])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 6, 7, 8, 9])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 6, 7, 8, 9])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [5,6,7,8,9])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [5,6,7,8,9])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [5,6,7,8,9])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"2\", \"p2\", \"1\", \"p3\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"azzz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"azzz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"azzz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"azzz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"azzz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"azzz\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"zzz\", str2 = \"zzzz\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 1)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\", \"cdba\", \"cbad\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [2, 3, -5, -1, 4])",
        "maxStrength(nums = [2, 3, -5, -1, 4])",
        "maxStrength(nums = [2, 3, -5, -1, 4])",
        "maxStrength(nums = [2, 3, -5, -1, 4])",
        "maxStrength(nums = [2, 3, -5, -1, 4])",
        "maxStrength(nums = [2, 3, -5, -1, 4])",
        "maxStrength(nums = [1, 2, 3, -4, -5])",
        "maxStrength(nums = [1, 2, 3, -4, -5])",
        "maxStrength(nums = [1, 2, 3, -4, -5])",
        "maxStrength(nums = [1, 2, 3, 4, -5, -6, -7, -8])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 7, 2, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 7, 2, 2, 2, 1])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\", \"prev\", \"4\", \"prev\", \"5\", \"prev\", \"6\", \"prev\", \"7\", \"prev\", \"8\", \"prev\", \"9\", \"prev\", \"10\", \"prev\", \"11\", \"prev\", \"12\", \"prev\", \"13\", \"prev\", \"14\", \"prev\", \"15\", \"prev\", \"16\", \"prev\", \"17\", \"prev\", \"18\", \"prev\", \"19\", \"prev\", \"20\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [1, 3], moveTo = [5, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [1, 3], moveTo = [5, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 7])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bcd\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"a\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [1, 2, 3], money = 4)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])"
    ],
    "sample_464": [
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"o\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1, 0, 1, 1, 1])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"ioiisoue\", k = 3)",
        "beautifulSubstrings(s = \"ioiisoue\", k = 3)",
        "beautifulSubstrings(s = \"ioiisoue\", k = 3)",
        "beautifulSubstrings(s = \"ioiisoue\", k = 3)",
        "beautifulSubstrings(s = \"ioiisoue\", k = 3)",
        "beautifulSubstrings(s = \"ioiisoue\", k = 3)",
        "beautifulSubstrings(s = \"ababab\", k = 3)",
        "beautifulSubstrings(s = \"ababab\", k = 3)",
        "beautifulSubstrings(s = \"ababab\", k = 2)",
        "beautifulSubstrings(s = \"ababab\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123456789)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_326": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 123)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_450": [
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aab\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"010\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"010\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"010\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"001010\", s2 = \"001100\", x = 2)",
        "minOperations(s1 = \"10101\", s2 = \"01111\", x = 3)",
        "minOperations(s1 = \"10101\", s2 = \"10111\", x = 3)",
        "minOperations(s1 = \"10101\", s2 = \"10111\", x = 3)",
        "minOperations(s1 = \"10101\", s2 = \"00101\", x = 2)",
        "minOperations(s1 = \"0000\", s2 = \"1111\", x = 2)",
        "minOperations(s1 = \"010\", s2 = \"001\", x = 1)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 4, y = 4, z = 3)",
        "longestString(x = 3, y = 3, z = 4)",
        "longestString(x = 3, y = 3, z = 2)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_306": [
        "countSeniors(details = [\"Name: John Smith, Age: 45\", \"Name: Jane Doe, Age: 70\", \"Name: Bob Johnson, Age: 65\"])",
        "countSeniors(details = [\"John Smith, 30\", \"Jane Smith, 40\", \"Bob Johnson, 70\", \"Alice Johnson, 80\"])",
        "countSeniors(details = [\"Name: John Smith, Age: 45\", \"Name: Jane Smith, Age: 70\", \"Name: Bob Johnson, Age: 65\"])",
        "countSeniors(details = [\"John Smith, 45\", \"Jane Doe, 65\", \"Bob Johnson, 30\"])",
        "countSeniors(details = [\"John Smith, 30\", \"Jane Smith, 40\", \"Bob Johnson, 70\", \"Sarah Johnson, 80\"])",
        "countSeniors(details = [\"Name1:Age1:Gender1\", \"Name2:Age2:Gender2\", \"Name3:Age3:Gender3\"])",
        "countSeniors(details = [\"John Smith, 45, M\", \"Jane Smith, 65, F\", \"Bob Johnson, 30, M\"])",
        "countSeniors(details = [\"Name: John Smith, Age: 35, Occupation: Teacher\", \"Name: Jane Smith, Age: 70, Occupation: Doctor\", \"Name: Bob Johnson, Age: 45, Occupation: Engineer\", \"Name: Mary Johnson, Age: 80, Occupation: Retired\"])",
        "countSeniors(details = [\"Name1 Age25\", \"Name2 Age65\", \"Name3 Age45\", \"Name4 Age75\"])",
        "countSeniors(details = [\"John Smith, 45, Male\", \"Jane Smith, 70, Female\", \"Bob Johnson, 25, Male\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,5])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,4,5])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [1, 1, 3], [2, 2, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [1, 1, 3], [2, 2, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 5], [3, 4, 15]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [2, 4, 15], [3, 5, 20]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 4, 5], [3, 5, 7], [2, 3, 8], [1, 5, 4]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 4, 5], [3, 5, 7], [2, 3, 8], [1, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 5], [3, 4, 3]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 8)",
        "canSplitArray(nums = [7,2,5], m = 10)",
        "canSplitArray(nums = [7,2,5], m = 3)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\", \"orange,kiwi\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\", \"dog,cat,bird\"], separator = \",\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1, 2, 3, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 2, 3, 4])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6], [3, 5]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 5, target = 3)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 3, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 3, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 3, 4, 4, 5, 5])",
        "minimumIndex(nums = [3, 2, 1, 2, 2, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 1, 5, 1])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [5, 7]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 7)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,1,3,2,1,4,2], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,2,1,4,2], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,2,1], k = 2)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])"
    ],
    "sample_55": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 2, 1, 1, 2, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 1, 1, 2, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 1, 1, 2, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 1, 1, 2, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 1, 1, 2, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "longestAlternatingSubarray(nums = [1, 2, 2, 1, 2, 2, 1, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 1, 2, 2, 1, 2, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 1, 2, 2, 1, 2, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 1, 2, 2, 1, 2, 2], threshold = 2)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])"
    ],
    "sample_22": [
        "minLength(s = \"ABCBD\")",
        "minLength(s = \"ABCBD\")",
        "minLength(s = \"ABCBD\")",
        "minLength(s = \"ABCBD\")",
        "minLength(s = \"ABCBD\")",
        "minLength(s = \"ABCBD\")",
        "minLength(s = \"ABCBD\")",
        "minLength(s = \"ABCBD\")",
        "minLength(s = \"ABCBD\")",
        "minLength(s = \"ABCBD\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 7)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_205": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"123456\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"001010\")",
        "minimumOperations(s = \"001010\")",
        "minimumOperations(s = \"001010\")",
        "minimumOperations(s = \"001010\")",
        "minimumOperations(s = \"001010\")",
        "minimumOperations(s = \"001010\")",
        "minimumOperations(s = \"001010\")",
        "minimumOperations(s = \"001010\")",
        "minimumOperations(s = \"0100101010\")",
        "minimumOperations(s
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRRLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRRLRRR\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])"
    ],
    "sample_18": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")"
    ],
    "sample_150": [
        "finalString(s = \"python\")",
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"python\")",
        "finalString(s = \"python\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 6)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 3, k = 2)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], t = 5)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0,",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"5123000001\")",
        "removeTrailingZeros(num = '5123000')"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 15, b = 5)",
        "makeTheIntegerZero(a = 15, b = 3)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 5, 3, 9, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 9, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 9, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 9, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 9, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 9, 10])",
        "findValueOfPartition(nums = [1, 5, 3, 9, 10])",
        "findValueOfPartition(nums = [1, 5, 3, 9, 10])",
        "findValueOfPartition(nums = [1,5,3,9,10])",
        "findValueOfPartition(nums = [1,5,3,9,10])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,3], [2,4], [7,9]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [1, 5], [2, 6]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 100)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1"
    ],
    "sample_159": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,3,4,1,2,3,4,5])",
        "continuousSubarrays(A = [1,2,3,4,1,2,3,4,5])",
        "continuousSubarrays(A = [1,2,3,4,1,2,3,4,5])",
        "continuousSubarrays(A = [1,2,3,4,1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(A = [1,2,3,4,1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(A = [1,2,3,4,1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays(A = [1,2,3,1,2,3,1,2,3])",
        "continuousSubarrays(A = [1,2,3,1,2,3,1,2,3])",
        "continuousSubarrays(A = [1,2,3,1,2,3,1,2,3])",
        "continuousSubarrays(A = [1,2,3,1,2,3,1,2,3])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 4])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7, 9], b = [2, 4, 6, 8, 10])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7, 9], b = [2, 4, 6, 8, 10])",
        "maxNonDecreasingLength(a = [1, 3, 2, 5], b = [4, 6, 3, 7])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)"
    ],
    "sample_160": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_52": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kdsdbncd\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 5, 3, 9, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 9, 7])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"abcd\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[2,5],[4,6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,9],[8,10]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,6],[3,5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,6],[6,7]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 1)"
    ],
    "sample_40": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1,",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1,",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1,",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1,",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 0)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [2, 3, 5, 1, 4], x = 2)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 3, 5, 7, 9])",
        "maxIncreasingGroups(u = [1, 3, 5, 7, 9])",
        "maxIncreasingGroups(u = [1, 3, 5, 7, 9])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple,banana,cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello,world\", \"goodbye\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello,world\", \"goodbye,world\"], separator = \",\")"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"R_R_R_L_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R_L_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"L_RR_LL_R\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)"
    ],
    "sample_51": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")"
    ],
    "sample_146": [
        "finalString(s = \"pintoer\")",
        "finalString(s = \"pintoer\")",
        "finalString(s = \"pintoer\")",
        "finalString(s = \"pintoer\")",
        "finalString(s = \"pintoer\")",
        "finalString(s = \"pintoer\")",
        "finalString(s = \"hello\")",
        "finalString(s = \"hello\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one,two', 'three,,four', 'five,,,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,,four', 'five,,,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,,four', 'five,,,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,,four', 'five,,,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,,four', 'five,,,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,,four', 'five,,,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,,four', 'five,,,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,,four', 'five,,,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one#two', 'three#four', 'five#six'], separator = '#')",
        "splitWordsBySeparator(words = ['one#two', 'three#', 'four', 'five', 'six'], separator = '#')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4, 4, 4], target = 5)"
    ],
    "sample_168": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")"
    ],
    "sample_50": [
        "smallestString(s = \"zabaab\")",
        "smallestString(s = \"zabaab\")",
        "smallestString(s = \"zab\")",
        "smallestString(s = \"zab\")",
        "smallestString(s = \"aaab\")",
        "smallestString(s = \"zbab\")",
        "smallestString(s = \"zaaab\")",
        "smallestString(s = \"aaabaaa\")",
        "smallestString(s = \"zab\")",
        "smallestString(s = \"zaaaba\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ACCDCBAAB\")",
        "minLength(s = \"ACCDCBAAB\")",
        "minLength(s = \"ACCDDAB\")",
        "minLength(s = \"ACDCDCBA\")"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_162": [
        "maxSum(nums = [10, 7, 2, 8, 1])",
        "maxSum(nums = [10, 7, 2, 8, 1])",
        "maxSum(nums = [10, 7, 2, 8, 1])",
        "maxSum(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "maxSum(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "maxSum(nums = [10, 23, 34, 45, 56, 67, 78, 89, 90])",
        "maxSum(nums = [12, 34, 56, 78, 90, 11, 22, 33, 44, 55, 66, 77, 88, 99])",
        "maxSum(nums = [17, 23, 29, 53, 59, 61, 73, 89])",
        "maxSum(nums = [17, 24, 36, 18, 21, 30, 42, 50, 60])",
        "maxSum(nums = [17, 24, 36, 18, 21, 48, 9, 12, 45, 32, 27, 39, 42, 51, 60, 70])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"111011\")",
        "maximumOddBinaryNumber(s = \"111011\")",
        "maximumOddBinaryNumber(s = \"111011\")",
        "maximumOddBinaryNumber(s = \"10101\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 6)"
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank=5, additionalTank=1)",
        "distanceTraveled(mainTank=5, additionalTank=1)",
        "distanceTraveled(mainTank=5, additionalTank=1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank=5, additionalTank=0)",
        "distanceTraveled(mainTank=10, additionalTank=0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank=10, additionalTank=1)",
        "distanceTraveled(mainTank=10, additionalTank=1)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbbccccddd\")",
        "minimizedStringLength(s = \"aabbbccccddd\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abccccd\")",
        "minimizedStringLength(s = \"abccccd\")",
        "minimizedStringLength(s = \"abccccd\")",
        "minimizedStringLength(s = \"abccccd\")",
        "minimizedStringLength(s = \"aaabbbcccddd\")",
        "minimizedStringLength(s = \"aaabbbbcccd\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,1,3,4,3,5,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,5,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,5,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,5,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,5,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,5,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,5,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,4,5], k = 3)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 1]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 3, 3, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 3, 3, 2, 2], target = 4)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65])",
        "countBeautifulPairs(nums = [12, 21, 27, 15])",
        "countBeautifulPairs(nums = [12, 21, 312, 432, 543])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"00110\")",
        "maximumOddBinaryNumber(s = \"00110011\")",
        "maximumOddBinaryNumber(s = \"00110011\")",
        "maximumOddBinaryNumber(s = \"00110101\")",
        "maximumOddBinaryNumber(s = \"00110101\")",
        "maximumOddBinaryNumber(s = '00110')",
        "maximumOddBinaryNumber(s = \"000111\")",
        "maximumOddBinaryNumber(s = \"0011001\")",
        "maximumOddBinaryNumber(s = \"1110101\")",
        "maximumOddBinaryNumber(s = '00011011')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)"
    ],
    "sample_149": [
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"reverse this string\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "continuousSubarrays(A = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "continuousSubarrays(A = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "continuousSubarrays(A = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "continuousSubarrays(A = [1, 1, 2, 2, 3, 3])",
        "continuousSubarrays(A = [1, 1, 2, 2, 3, 3])",
        "continuousSubarrays(A = [1, 1, 2, 2, 3, 3])",
        "continuousSubarrays(A = [1, 1, 2, 2, 3, 3])",
        "continuousSubarrays(A = [1, 1, 2, 2, 3, 3])",
        "continuousSubarrays(A = [1, 1, 2, 2, 3, 3])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])"
    ],
    "sample_228": [
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0,1,2,3])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [0, 1, 2, 3, 4])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a = [1, 1, 1, 2, 2, 2, 3, 3, 3])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 3, 2, 2, 1, 2, 2, 2])",
        "continuousSubarrays(nums = [1, 3, 2, 2, 1, 2, 2, 2])",
        "continuousSubarrays(nums = [1, 3, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(nums = [1, 3, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(nums = [1, 3, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(nums = [1, 3, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(nums = [1, 3, 2, 2, 1, 2, 2, 2])",
        "continuousSubarrays(nums = [1, 3, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(nums = [1, 3, 2, 1, 2, 1, 2, 1])",
        "continuousSubarrays(nums = [1, 2, 1, 2, 1, 2, 1])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"00110101\")",
        "maximumOddBinaryNumber(s = \"00110101\")",
        "maximumOddBinaryNumber(s = \"00110101\")",
        "maximumOddBinaryNumber(s = \"00110101\")",
        "maximumOddBinaryNumber(s = \"00110101\")",
        "maximumOddBinaryNumber(s = \"00011101011\")",
        "maximumOddBinaryNumber(s = \"00011010\")",
        "maximumOddBinaryNumber(s = \"00011010\")",
        "maximumOddBinaryNumber(s = \"00110100\")",
        "maximumOddBinaryNumber(s = \"00011101\")"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,1,3,2])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCDD\")",
        "minLength(s = \"ABCDABCDD\")",
        "minLength(s = \"ABCDABCDD\")",
        "minLength(s = \"ABCDABCDD\")",
        "minLength(s = \"ABCDABCDD\")",
        "minLength(s = \"ABCDABCDD\")",
        "minLength(s = \"ABCDABCDD\")",
        "minLength(s = \"ABCDABCDD\")",
        "minLength(s = \"ABCDABCDD\")",
        "minLength(s = \"ABCDABCDD\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1,4,2])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1,4,2])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1,4,2,1])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1,4,2,1,5,2,1])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"R_RRRRLLLUUU\")",
        "furthestDistanceFromOrigin(moves = \"R_RRRRLLLUUU\")",
        "furthestDistanceFromOrigin(moves = \"R_RRRR_L_LLLL\")",
        "furthestDistanceFromOrigin(moves = \"R_RRRR_L_LLLL\")",
        "furthestDistanceFromOrigin(moves = \"R_RRRR_L_LLLL\")",
        "furthestDistanceFromOrigin(moves = \"R_RRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"R_RRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"R_RRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"R_RRRR_L_LLLL_\")",
        "furthestDistanceFromOrigin(moves = \"R_RRRR_L_L_L_RR_RRRRRRRR_\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"00011010\")",
        "maximumOddBinaryNumber(s = \"00011011\")",
        "maximumOddBinaryNumber(s = \"00110011\")",
        "maximumOddBinaryNumber(s = \"00110011\")",
        "maximumOddBinaryNumber(s = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"001010\")",
        "maximumOddBinaryNumber(s = \"1110101\")"
    ],
    "sample_6": [
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[0,2]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[0,2]])",
        "colorTheArray(n=3, queries=[[0,1],[1,2],[0,2]])",
        "colorTheArray(n=3, queries=[[0,1],[1,2],[0,2]])",
        "colorTheArray(n=3, queries=[[0,1],[1,2],[0,2]])",
        "colorTheArray(n=3, queries=[[0,1],[1,2],[0,2]])",
        "colorTheArray(n=5, queries=[[0,1],[1,2],[2,1],[3,2],[4,1]])",
        "colorTheArray(n=5, queries=[[0,1],[1,2],[2,3],[3,4],[4,0]])",
        "colorTheArray(n=5, queries=[[0,1],[1,2],[2,1],[3,2],[4,1]])",
        "colorTheArray(n=3, queries=[[0,1],[1,2],[2,1],[1,2],[2,1]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 3, 5, 2, 2, 3, 4, 4, 5])",
        "minimumIndex(nums = [1, 3, 5, 2, 2, 3, 4, 4, 5])",
        "minimumIndex(nums = [1, 3, 5, 2, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 3, 5, 2, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 3, 5, 2, 2, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 3, 5, 2, 2, 2, 5, 5, 5, 4])",
        "minimumIndex(nums = [3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [1, 3, 5, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"2525\")",
        "minimumOperations(num = \"2525\")",
        "minimumOperations(num = \"2525\")",
        "minimumOperations(num = \"2525\")",
        "minimumOperations(num = \"2525\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"001010\")",
        "minimumOperations(num = \"111010\")",
        "minimumOperations(num = \"1110111\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"1234567890\")",
        "minimumOperations(num = \"1234567890\")",
        "minimumOperations(num = \"123456789\")",
        "minimumOperations(num = \"123456789\")",
        "minimumOperations(num = \"123456789\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"01010101\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [2, 3, 200], [3, 4, 300]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 100], [1, 2, 50], [3, 3, 150]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 100], [1, 2, 50], [3, 3, 150]])",
        "maximizeTheProfit(n=3, offers=[[1, 1, 100], [2, 2, 200], [3, 3, 300]])",
        "maximizeTheProfit(n=3, offers=[[1, 1, 100], [2, 2, 200], [3, 3, 300]])",
        "maximizeTheProfit(n=3, offers=[[1, 1, 100], [2, 2, 200], [3, 3, 300]])",
        "maximizeTheProfit(n = 6, offers = [[1, 1, 100], [2, 2, 200], [3, 3, 300]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 3], [3, 2, 4], [1, 3, 5], [3, 4, 7], [2, 4, 6]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 5], [3, 3, 15]])",
        "maximizeTheProfit(n=5, offers=[[3,2,10],[1,5,5],[2,3,15]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 4)"
    ],
    "sample_203": [
        "minimumOperations(num = \"1234567890\")",
        "minimumOperations(num = \"1234567890\")",
        "minimumOperations(num = \"1234567890\")",
        "minimumOperations(num = \"1234567890\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"25\")"
    ],
    "sample_11": [
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 1])",
        "minimumIndex(nums = [3, 3, 1, 3, 3, 3, 3])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num
    ],
    "sample_57": [
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 0)",
        "distanceTraveled(a = 3, b = 0)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 5, 3, 10, 7])",
        "findValueOfPartition(a = [1, 5, 3, 10, 7])",
        "findValueOfPartition(a = [1, 5, 3, 10, 7])",
        "findValueOfPartition(a = [1, 5, 3, 10, 7])",
        "findValueOfPartition(a = [1, 5, 3, 10, 7])",
        "findValueOfPartition(a = [1, 5, 3, 10, 7])",
        "findValueOfPartition(a = [1, 5, 3, 10, 7])",
        "findValueOfPartition(a = [1, 5, 3, 10, 7])",
        "findValueOfPartition(a = [1, 5, 3, 10, 7])",
        "findValueOfPartition(a = [1, 5, 3, 7, 9])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 2, 3, 2, 1, 2, 3, 4])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 2, 3, 4])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 2, 3, 4])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 2, 3, 4])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 2, 3, 4])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 2, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 2, 2, 2, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 6, 7, 7, 7, 8, 9])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 2, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 3, 1, 1, 2, 3, 4, 5])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abca\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 40, 50])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 40, 50])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 40, 50])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 40, 50])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 40, 50])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 40, 50])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 40, 50])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 40, 50])",
        "maxIncreasingGroups(usageLimits = [10, 2, 8, 9])",
        "maxIncreasingGroups(usageLimits = [10, 2, 8, 9])"
    ],
    "sample_206": [
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"2525\")",
        "minimumOperations(num = \"2525\")",
        "minimumOperations(num = \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])"
    ],
    "sample_53": [
        "smallestString(s = \"baabcd\")",
        "smallestString(s = \"baabcd\")",
        "smallestString(s = \"baabcd\")",
        "smallestString(s = \"baabcd\")",
        "smallestString(s = \"baabcd\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"zbaabc\")",
        "smallestString(s = \"baabd\")",
        "smallestString(s = \"cbaabc\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [4,2,1,5,3], x = 2)",
        "minAbsoluteDifference(nums = [4,2,1,5,3], x = 2)",
        "minAbsoluteDifference(nums = [4,2,1,5,3], x = 2)",
        "minAbsoluteDifference(nums = [4,2,1,5,3], x = 2)",
        "minAbsoluteDifference(nums = [4,2,1,5,3], x = 2)",
        "minAbsoluteDifference(nums = [4,2,1,5,6], x = 2)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 100], [2, 3, 200], [3, 4, 300]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 100], [2, 3, 200], [3, 4, 300]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 100], [2, 3, 200], [3, 4, 300]])",
        "maximizeTheProfit(N = 5, offers = [[2, 3, 1], [3, 2, 2], [1, 1, 1], [4, 3, 3], [5, 2, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "maximizeTheProfit(N = 4, offers = [[2, 3, 1], [3, 2, 2], [4, 3, 3]])",
        "maximizeTheProfit(N = 4, offers = [[2, 3, 1], [3, 2, 2], [4, 2, 3]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"apple,banana,cherry\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apple,banana,cherry\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apple,banana,cherry\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apple,banana,cherry\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apple,banana,cherry\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apple,banana,cherry\"], b = \",\")",
        "splitWordsBySeparator(a = [\"hello,world\", \"goodbye,world\"], b = \",\")",
        "splitWordsBySeparator(a = [\"hello,world\", \"goodbye,world\"], b = \",\")",
        "splitWordsBySeparator(a = [\"hello,world\", \"goodbye,world\"], b = \",\")",
        "splitWordsBySeparator(a = [\"hello world\", \"goodbye\"], b = \" \")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,4,5], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)"
    ],
    "sample_163": [
        "maxSum(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "maxSum(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "maxSum(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "maxSum(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "maxSum(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "maxSum(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "maxSum(nums = [12, 23, 34, 45, 56])",
        "maxSum(nums = [12, 23, 34, 45, 56])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_151": [
        "finalString(s = \"this is a string\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"python\")",
        "finalString(s = \"this is a test\")",
        "finalString(s = \"this is a test\")",
        "finalString(s = \"this is a test\")",
        "finalString(s = \"itsngi\")",
        "finalString(s = \"This is a test\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"00110011\")",
        "maximumOddBinaryNumber(s = \"0011010\")",
        "maximumOddBinaryNumber(s = \"00110101\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,4,5,6,7,8,9,10], K = 3)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,4,5,6,7,8,9,10], K = 3)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,4,5], K = 2)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,4,5], K = 2)",
        "longestEqualSubarray(A = [1,2,3,2,1], K = 1)",
        "longestEqualSubarray(A = [1,2,3,2,1,5,6,1,2,3,4,5], K = 3)",
        "longestEqualSubarray(A = [1,2,3,2,1,5,6,1,2,3,4,5], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9], K = 3)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,4,5,6,7,8,9], K = 3)",
        "longestEqualSubarray(A = [1,2,3,2,1,2,3,2,1], K = 1)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_147": [
        "finalString(s = \"python\")",
        "finalString(s = \"python\")",
        "finalString(s = \"python\")",
        "finalString(s = \"python\")",
        "finalString(s = \"python\")",
        "finalString(s = \"python\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"this is a string\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"00110101\")",
        "maximumOddBinaryNumber(s = \"00110101\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"110101\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"1110101\")",
        "maximumOddBinaryNumber(s = \"101010101\")",
        "maximumOddBinaryNumber(s = \"00101101\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 3)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 2)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_148": [
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello\")",
        "finalString(s = \"hello\")",
        "finalString(s = \"hello\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"hello world\")",
        "finalString(s = \"pinto\")"
    ],
    "sample_231": [
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"race\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 2, 4, 5])",
        "countWays(nums = [1, 3, 2])"
    ],
    "sample_39": [
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"abaac\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"R_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R_R_\")",
        "furthestDistanceFromOrigin(moves = \"R_RR_L_L\")",
        "furthestDistanceFromOrigin(moves = \"R_L_RR\")",
        "furthestDistanceFromOrigin(moves
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 4, 5, 6])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 21, 34, 43])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65])",
        "countBeautifulPairs(nums = [12, 21, 34, 43, 56, 65, 78, 87, 90, 01])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], t = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], t = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], t = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], t = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12], t = 4)"
    ],
    "sample_36": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,1,1,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,1,1,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,1,1,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,1,1,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,1,1,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7, 9])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_R_",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"L_RR_LRL_R\")",
        "furthestDistanceFromOrigin(moves = \"R_RR_RRR_L_L_L\")",
        "furthestDistanceFromOrigin(moves = \"R_RRRR_L_L_L_L_L\")",
        "furthestDistanceFromOrigin(moves = \"R_RR_RR_R\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 3, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)"
    ]
}