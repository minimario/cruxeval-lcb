{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4])",
        "alternatingSubarray(nums = [3, 4, 5, 2, 1])",
        "alternatingSubarray(nums = [3,2,1,2,3])",
        "alternatingSubarray(nums = [1, 1, 1])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,5,4,3,2,1])",
        "alternatingSubarray(nums = [1, 5, 1, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 4, 7, 9])",
        "alternatingSubarray(nums = [1, 4, 3, 4, 5, 1, 2])",
        "alternatingSubarray(nums = [2, 1, 4, 3, 2, 1, 2, 3, 2, 1])",
        "alternatingSubarray(nums = [2,4,6,3,4,6,8,3,1,2,4,3,2])"
    ],
    "sample_310": [
        "matrixSum(a = [[1,2],[3,4]])",
        "matrixSum(a = [[1, 2], [0, 3]])",
        "matrixSum(a = [[-1, 1]])",
        "matrixSum(a = [[1], [1, 2]])",
        "matrixSum(a = [[0, 1, 1], [1, 0, 0]])",
        "matrixSum(a = [[1, 0, 0], [0, 0, 0]])",
        "matrixSum(a = [[-3, -2, -1], [-3, -2, -1]])",
        "matrixSum(a = [[-1, 0], [-5, 3]])",
        "matrixSum(a = [[-1, 2, 4], [0, 0, 1]])",
        "matrixSum(a = [[1, 3, 2], [1, 2, 4], [0, 2, 1]])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[2, 1, 3, 4], [4, 2, 1, 3], [3, 4, 2, 1], [1, 3, 4, 2]])",
        "findChampion(grid = [[1,0,0,0,0],\n                            [0,0,0,1,1],\n                            [0,1,0,0,1],\n                            [0,0,0,1,0],\n                            [0,0,1,0,0]])",
        "findChampion(grid = [[-2, 1, -3, -1, 3], [-1, -2, 2, 0, -4], [2, -1, -2, -3, 0], [4, 2, 2, 1, -2], [-4, -4, 4, 4, -4]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1], [0]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [1, 1]])",
        "matrixSum(a = [[0, 1, 2], [1, 2, 3]])",
        "matrixSum(a = [[-5]])",
        "matrixSum(a = [[0,0,0],[1,1,1]])",
        "matrixSum(a = [[1,1,1,1,1],[0,0,0,0,0]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,3,2,1])",
        "alternatingSubarray(nums = [4,2,4,5,6])",
        "alternatingSubarray(nums = [1, 5, 2, 1, 6, 4, 3])",
        "alternatingSubarray(nums = [1,5,3,6,14,1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 7, 11])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 10, 9, 8, 6, 4, 2])",
        "alternatingSubarray(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5",
        "alternatingSubarray(nums = [5, 4, 3, 5, 4, 3, 5, 4])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\"], x = \"j\")",
        "findWordsContaining(words = [\"banana\", \"pineapple\", \"orange\"], x = \"ana\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"carrot\", \"elephant\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"pan\", \"apple\"], x = \"an\")",
        "findWordsContaining(words=[\"cat\", \"dog\", \"pig\", \"rat\"], x=\"at\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"ant\", \"wolf\"], x = \"at\")",
        "findWordsContaining(words = [\"butter\", \"love\", \"woman\"], x = \"ut\")",
        "findWordsContaining(words = [\"fox\", \"atlas\", \"xylophone\", \"music\"], x = \"x\")",
        "findWordsContaining(words = [\"excited\", \"containing\", \"calculated\"], x = \"i\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"123\", s2 = \"1234\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"aabab\")",
        "canBeEqual(s1 = \"aabbccddee\", s2 = \"ddebbaacc\")",
        "canBeEqual(s1 = \"hx2o\", s2 = \"xkq2\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = -1)",
        "lengthOfLongestSubsequence(nums = [], target = 2)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1], target = 0)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 1000)",
        "lengthOfLongestSubsequence(nums = [5,1,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [], target = 123456)",
        "lengthOfLongestSubsequence(nums=[9,6,4,2,3,5,7,0,1], target=8)",
        "lengthOfLongestSubsequence(nums=[5,1,4,3,2], target=5)",
        "lengthOfLongestSubsequence(nums = [3, 5, 10, 12, 14, 15, 16, 17, 18, 19], target = 25)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"1234\", s2 = \"1423\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"1234\", s2 = \"2341\")",
        "canBeEqual(s1 = \"taco\", s2 = \"atco\")",
        "canBeEqual(s1 = \"0101\", s2 = \"1001\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "maxSubarrays(nums = [1,2,1,2,1])",
        "maxSubarrays(nums = [1, 2, 0, 1, 2, 3])",
        "maxSubarrays(nums = [2, 4, 6, 1])",
        "maxSubarrays(nums = [4, 5, 2, 10])",
        "maxSubarrays(nums = [10, 2, 8, 4, 2])",
        "maxSubarrays(nums = [5, 0, 1, 10, 2, 2, 3, 4])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1,2,3], money = 3)",
        "buyChoco(prices = [1, 1, 1], money = 3)",
        "buyChoco(prices = [2, 5, 10], money = 7)",
        "buyChoco(prices = [20, 10, 5], money = 20)",
        "buyChoco(prices = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "buyChoco(prices = [4, 5, 6, 7], money = 100)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10000000)",
        "buyChoco(prices = [10, 13], money = 100)",
        "buyChoco(prices = [60, 50, 40], money = 50)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1], l = 1, r = 1)",
        "countSubMultisets(nums = [1], l = 1, r = 2)",
        "countSubMultisets(nums = [0], l = 0, r = 0)",
        "countSubMultisets(nums = [0], l = 0, r = 0)",
        "countSubMultisets(nums = [1,1,1], l = 1, r = 2)",
        "countSubMultisets(nums = [1,1,1,1], l = 1, r = 4)",
        "countSubMultisets(nums = [1,1,1,1], l = 1, r = 2)",
        "countSubMultisets(nums = [1, 2, 3], l = 0, r = 1)",
        "countSubMultisets(nums = [1, 0], l = 1, r = 2)",
        "countSubMultisets(nums = [1, 2, 3, 4], l = 4, r = 7)"
    ],
    "sample_322": [
        "isFascinating(n = 10)",
        "isFascinating(n = 10)",
        "isFascinating(n = 15)",
        "isFascinating(n = 234)",
        "isFascinating(n = 24)",
        "isFascinating(n = 555)",
        "isFascinating(n = 3333)",
        "isFascinating(n = 781)",
        "isFascinating(n = 509)",
        "isFascinating(n = 13030)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abac\")",
        "canBeEqual(s1 = \"ba\", s2 = \"aa\")",
        "canBeEqual(s1 = \"az\", s2 = \"by\")",
        "canBeEqual(s1 = \"this\", s2 = \"other\")",
        "canBeEqual(s1 = \"zyx\", s2 = \"zxy\")",
        "canBeEqual(s1 = \"aaabbb\", s2 = \"abbbba\")",
        "canBeEqual(s1 = \"hop\", s2 = \"hpo\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 5, 2])",
        "minimumCoins(prices = [1, 3, 5, 9])",
        "minimumCoins(prices = [2, 3, 4, 5, 6])",
        "minimumCoins(prices = [3, 2, 1, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 1, 1, 2])",
        "minimumCoins(prices = [3, 2, 2, 4, 5])",
        "minimumCoins(prices = [3, 5, 7, 2, 9])",
        "minimumCoins(prices = [1, 1, 2, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 2, 3, 3, 3, 4, 5, 7])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 99)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 94)",
        "accountBalanceAfterPurchase(p = 14)",
        "accountBalanceAfterPurchase(p = 14)",
        "accountBalanceAfterPurchase(p = 89)",
        "accountBalanceAfterPurchase(p = 999)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1,1,2,2,2])",
        "minOperations(nums = [1,1,2,3,3])",
        "minOperations(nums = [0, 0, 0, 1])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 3, 2, 1])",
        "minOperations(nums = [0,1,2])",
        "minOperations(nums = [1, 2, 3, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "minOperations(nums = [4, 1, 5, 4, 1])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,1,2,1,2,1,2])",
        "alternatingSubarray(nums = [1,2,3,4,1,2,3,4])",
        "alternatingSubarray(nums = [1,4,2,5,3])",
        "alternatingSubarray(nums = [1,3,2,3,4])",
        "alternatingSubarray(nums = [0,1,0,1,0,1,0,1,0])",
        "alternatingSubarray(nums = [4, 5, 5, 6, 6])",
        "alternatingSubarray(nums = [3,2,3,4,2,5])",
        "alternatingSubarray(nums = [1, 3, 2, 2, 3, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 1, 2, 3, 4, 4, 4, 5, 6, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 3, 4, 3, 5, 6, 3, 5])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 2, limit = 2)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 6, limit = 1)",
        "distributeCandies(n=6, limit=3)"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"cba\", x = 2)",
        "minOperations(s1 = \"ab\", s2 = \"bc\", x = 3)",
        "minOperations(s1 = \"aaaa\", s2 = \"aaaa\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"bcad\", x = 1)",
        "minOperations(s1 = \"xy\", s2 = \"xz\", x = 10)",
        "minOperations(s1 = \"abc\", s2 = \"abcd\", x = 2)",
        "minOperations(s1 = \"aba\", s2 = \"abb\", x = 1)",
        "minOperations(s1 = \"xxz\", s2 = \"xxz\", x = 0)",
        "minOperations(s1 = \"1234\", s2 = \"1212\", x = 4)",
        "minOperations(s1 = \"bca\", s2 = \"ca\", x = 1)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 5, y = 4, z = 2)",
        "longestString(x = 5, y = 6, z = 3)",
        "longestString(x = 3, y = 7, z = 1)",
        "longestString(x = 4, y = 8, z = 2)",
        "longestString(x = 0, y = 4, z = 1)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 3, 4, 5], k = 3)",
        "minOperations(nums = [1,3,2,1,1], k = 2)",
        "minOperations(nums = [2, 3, 1, 6, 7, 5, 4], k = 2)",
        "minOperations(nums = [1, 1, 3, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], k = 4)",
        "minOperations(nums = [4, 3, 5, 8, 9, 7, 8], k = 3)",
        "minOperations(nums = [4, 1, 4, 1, 2, 2, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [2,3,5,10,14,20,21], k = 2)",
        "minOperations(nums = [2, 3, 6, 3, 2, 2, 2, 3, 4, 6, 6, 2, 3, 7], k = 2)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abracadabra\")",
        "longestSemiRepetitiveSubstring(s = \"aabaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababbb\")",
        "longestSemiRepetitiveSubstring(s = \"aababbab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdaabc\")",
        "longestSemiRepetitiveSubstring(s = \"gollitgg\")",
        "longestSemiRepetitiveSubstring(s = \"qkdslvfoihxzvqnflsln\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3])",
        "isGood(a = [0, 1, 2, 3, 4, 4])",
        "isGood(a = [1, 2, 3, 4, 5, 5])",
        "isGood(a = [0, 1, 3, 2, 2])",
        "isGood(a = [0, 1, 0, 2])",
        "isGood(a = [0, 2, 0, 2])",
        "isGood(a = [0, 0, 1, 2, 1])",
        "isGood(a = [0, 1, 1, 2, 2, 3, 3, 4])",
        "isGood(a = [0, 2, 4, 1])",
        "isGood(a = [1,2,1,3,3])"
    ],
    "sample_244": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 7, m = 4)",
        "differenceOfSums(n = 9, m = 2)",
        "differenceOfSums(n = 13, m = 7)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 2, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [3,2,4,1,5])",
        "minGroupsForValidAssignment(nums = [2,3,4,4])",
        "minGroupsForValidAssignment(nums = [4, 2, 1, 3, 1])",
        "minGroupsForValidAssignment(nums = [2, 4, 1, 3, 5, 7])",
        "minGroupsForValidAssignment(nums = [4,2,3,5,4,5,3,4,3,4])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=[\"prev\", \"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"3\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"foo\", \"oof\"])",
        "maximumNumberOfStringPairs(words = [\"anna\", \"anana\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"11101\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011001\", k = 2)",
        "shortestBeautifulSubstring(s = '10101', k = 3)",
        "shortestBeautifulSubstring(s = '101101101', k = 2)",
        "shortestBeautifulSubstring(s = \"10011111\", k = 3)",
        "shortestBeautifulSubstring(s = '0101110101', k = 2)",
        "shortestBeautifulSubstring(s = \"11100000000011\", k = 2)",
        "shortestBeautifulSubstring(s = '11000000110001000011010001111', k = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 8, 9, 7, 6])",
        "minimumRightShifts(nums = [1, 3, 2, 4])",
        "minimumRightShifts(nums = [1, 1, 2, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [7, 5, 6, 4])",
        "minimumRightShifts(nums = [2, 1, 3, 6])",
        "minimumRightShifts(nums = [3, 2, 1, 1])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"10011\")",
        "minimumSteps(s = \"1110001\")",
        "minimumSteps(s = \"001001\")",
        "minimumSteps(s = \"11111011111\")",
        "minimumSteps(s = \"010101010101010101010101\")",
        "minimumSteps(s = '110101100')",
        "minimumSteps(s = \"1011101110111011101\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"abc\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abce\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"adef\", s3 = \"bdef\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ad\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"abaa\", s3 = \"abaa\")",
        "findMinimumOperations(s1 = \"asdf\", s2 = \"wer\", s3 = \"qwerty\")",
        "findMinimumOperations(s1 = \"sjsjjj\", s2 = \"jsjsj\", s3 = \"jsjss\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bc\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"efgh\")",
        "canMakeSubsequence(str1 = \"aab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abca\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aaz\")",
        "canMakeSubsequence(str1 = \"acb\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"bba\")",
        "canMakeSubsequence(str1 = \"abca\", str2 = \"cbda\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"bzcz\")",
        "canMakeSubsequence(str1 = \"daz\", str2 = \"aba\")"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood(nums = [0,1,2,3])",
        "isGood(nums = [3,5,7,8,9])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [3, 2, 4, 3], target = 6)",
        "countPairs(nums = [1, 1, 2, 2, 2], target = 4)",
        "countPairs(nums = [1, 1, 2, 3, 3], target = 4)",
        "countPairs(nums = [1, 5, 2, 4], target = 5)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5,6,7,8,9], moveFrom = [7,8], moveTo = [9,10])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [5,6], moveTo = [8,9])",
        "relocateMarbles(nums = [1, 2, 3, 5, 6, 7, 8, 9], moveFrom = [3, 7], moveTo = [8, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [9, 8], moveTo = [1, 2])",
        "relocateMarbles(nums = [3, 4, 5, 6, 8, 9], moveFrom = [4, 5], moveTo = [1, 4])",
        "relocateMarbles(nums = [1, 2, 5, 6, 7, 8, 9], moveFrom = [2, 8], moveTo = [8, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [3, 7, 10], moveTo = [1, 2, 3])",
        "relocateMarbles(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [8, 6, 9, 4])",
        "relocateMarbles(nums = [3, 5, 8, 9, 5, 6, 8], moveFrom = [5, 5], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 4, 7, 8, 6, 9], moveFrom = [10, 7], moveTo = [10, 4])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3], target = 4)",
        "countPairs(nums = [3, 1, 4, 1, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7], target = 100)",
        "countPairs(nums = [3, 2, 3], target = 7)",
        "countPairs(nums = [2,3,1,5,5,2,2,2], target = 7)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1,1,3,3,4,5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4,4,5])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,3,4,5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,2,3,3,3,4,4,4,5,5,5,5,5,6,6,7,8])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 12, 12])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Tom, 123456\", \"Mary, 789012\"])",
        "countSeniors(details = [\"a,b,c,80\", \"d,e,f,65\", \"g,h,i,30\", \"j,k,l,40\"])",
        "countSeniors(details = [\"John Smith\", \"22\", \"Melanie Smith\", \"54\"])",
        "countSeniors(details = [\"100th St\", \"70th St\", \"120th St\", \"99th St\"])",
        "countSeniors(details = ['1002017X', '2001017X', '3003017X', '4003017X'])",
        "countSeniors(details = [\"John,20,Sydney\", \"Mary,30,Canberra\", \"Peter,55,Melbourne\", \"Mary,60,Brisbane\"])",
        "countSeniors(details=['Iron Man;27', 'Spiderman;15', 'Hulk;45', 'Captain America;38'])",
        "countSeniors(details = [\"nathan,50,n\", \"michael,35,n\", \"alan,70,y\", \"kevin,23,y\"])",
        "countSeniors(details = [\"Alice : 12/10/2010\", \"Bob : 07/10/2000\", \"Charlie : 11/08/1980\", \"Darcy : 04/02/1999\"])",
        "countSeniors(details = [\"c105 190228 1986\", \"c103 190228 1988\", \"c103 190228 2003\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"ababaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbbc\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcbcd\")",
        "longestSemiRepetitiveSubstring(s = \"qwertyuiopasdfghjklzxcvbnmqwerty\")",
        "longestSemiRepetitiveSubstring(s = \"alababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabcaabcaabcaabc\")",
        "longestSemiRepetitiveSubstring(s = \"axaxbx\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbcaabbc\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"xy\", s2 = \"yz\")",
        "canBeEqual(s1 = \"xxy\", s2 = \"yxx\")",
        "canBeEqual(s1 = \"xya\", s2 = \"xzb\")",
        "canBeEqual(s1 = \"aab\", s2 = \"abc\")",
        "canBeEqual(s1 = \"one\", s2 = \"two\")",
        "canBeEqual(s1 = \"axby\", s2 = \"abyx\")",
        "canBeEqual(s1 = \"abcc\", s2 = \"baaa\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"foo\", s2 = \"bar\", s3 = \"baz\")",
        "findMinimumOperations(s1 = \"c\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"abc\", s3 = \"123\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abef\", s3 = \"abgd\")",
        "findMinimumOperations(s1 = \"bcd\", s2 = \"bcd\", s3 = \"bce\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"zxyw\")",
        "findMinimumOperations(s1 = \"123456\", s2 = \"abcdef\", s3 = \"987654\")",
        "findMinimumOperations(s1 = \"3433\", s2 = \"3244\", s3 = \"3432\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 2, 1], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2], target = 2)",
        "lengthOfLongestSubsequence(nums = [0, 0], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9, 11], target = 7)",
        "lengthOfLongestSubsequence(nums = [4,2,3,4,1], target = 5)",
        "lengthOfLongestSubsequence(nums = [4,4,3,1,2], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 4, 5, 7, 13, 17], target = 25)"
    ],
    "sample_257": [
        "minimumSum(nums = [])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSum(nums = [1, 1, 1, 1])",
        "minimumSum(nums = [2, 2, 1])",
        "minimumSum(nums = [1, 3, 7, 4, 2, 9])",
        "minimumSum(nums = [8, 3, 9, 4, 5, 7])",
        "minimumSum(nums = [1, 4, 1, 1, 4, 1, 4])",
        "minimumSum(nums = [2, 4, 7, 5, 2, 5])",
        "minimumSum(nums = [8,7,6,10,11,3,9,4,5,2,1,0])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"aaaaa\",\"aa\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"a\", \"d\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"bba\",\"a\"])",
        "minimizeConcatenatedLength(words=[\"cat\", \"dog\", \"tea\"])",
        "minimizeConcatenatedLength(words=[\"c\",\"ab\",\"d\",\"efg\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = '10101', k = 3)",
        "shortestBeautifulSubstring(s = '101', k = 2)",
        "shortestBeautifulSubstring(s = \"010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"0000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = '0111', k = 3)",
        "shortestBeautifulSubstring(s = \"01001\", k = 4)",
        "shortestBeautifulSubstring(s = \"10101110\", k = 3)",
        "shortestBeautifulSubstring(s = \"000111110\", k = 5)",
        "shortestBeautifulSubstring(s = \"0100101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "shortestBeautifulSubstring(s = \"0010101011001\", k = 3)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"aaa\",\"a\",\"aa\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"ana\"])",
        "minimizeConcatenatedLength(words=[\"a\",\"ab\",\"abc\"])",
        "minimizeConcatenatedLength(words = [\"c\",\"d\",\"a\",\"b\"])",
        "minimizeConcatenatedLength(words = [\"frog\", \"on\", \"a\", \"log\"])",
        "minimizeConcatenatedLength(words = [\"bc\",\"de\",\"f\",\"hij\"])",
        "minimizeConcatenatedLength(words=[\"bba\", \"bab\", \"abb\"])",
        "minimizeConcatenatedLength(words = [\"chocolate\",\"kitkat\",\"burger\",\"taco\"])",
        "minimizeConcatenatedLength(words = ['pol', 'yon', 'itis'])",
        "minimizeConcatenatedLength(words = [\"a\",\"bb\",\"cccc\",\"d\",\"e\",\"ff\",\"gg\",\"h\",\"i\",\"j\",\"k\",\"ll\",\"m\",\"nnn\",\"o\",\"ppp\",\"q\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 9, m = 2)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums=[3,2,3,4,3])",
        "alternatingSubarray(nums = [4,2,1,3])",
        "alternatingSubarray(nums = [2, 1, 3, 4])",
        "alternatingSubarray(nums=[0,1,2])",
        "alternatingSubarray(nums = [5,6,7,2,3,4])",
        "alternatingSubarray(nums=[0,1,5,2,3,4,7,8])",
        "alternatingSubarray(nums = [3,1,2,2])",
        "alternatingSubarray(nums = [2,3,4,5,6,8,7,9])"
    ],
    "sample_478": [
        "findMaximumLength(nums=[1])",
        "findMaximumLength(nums = [1, 2])",
        "findMaximumLength(nums = [1, 2])",
        "findMaximumLength(nums=[1,2])",
        "findMaximumLength(nums=[0,1])",
        "findMaximumLength(nums = [1,3,2])",
        "findMaximumLength(nums = [1,2,4,8,16,32,64,128])",
        "findMaximumLength(nums = [1, 2, 4, 8, 16])",
        "findMaximumLength(nums=[2,3,1,1,4])",
        "findMaximumLength(nums = [2,1,2,1,1,1,3])"
    ],
    "sample_302": [
        "countSeniors(details = [\"123456789012\", \"123456789012\", \"123456789012\"])",
        "countSeniors(details = [\"0011111111\", \"0022222222\", \"0033333333\"])",
        "countSeniors(details = [\"9876543210\", \"2002200010\"])",
        "countSeniors(details = [\"00101019900101\", \"00101019900102\", \"00101019900103\", \"00101019900104\", \"00101019900105\"])",
        "countSeniors(details = [\"Smith, John, 29\", \"Doe, Jane, 61\", \"Doe, Jane, 62\"])",
        "countSeniors(details = [\"12-10-1970\", \"14-01-1999\"])",
        "countSeniors(details = [\"1000000062\",\"1000000061\",\"1000000070\"])",
        "countSeniors(details = [\"John Williams\", \"Ted Harris\", \"Peter Brown\"])",
        "countSeniors(details = [\"Joe Rogan 12/20/1958\", \"Bill Nye 09/27/1955\"])",
        "countSeniors(details = [\"Arthur,Male,20\", \"Steve,Male,40\", \"Mary,Female,65\", \"Sophie,Female,30\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"egg\", s2 = \"add\")",
        "canBeEqual(s1 = \"abb\", s2 = \"bba\")",
        "canBeEqual(s1 = \"xyab\", s2 = \"xzca\")",
        "canBeEqual(s1 = \"bca\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"fedc\")",
        "canBeEqual(s1 = \"edab\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"gag\", s2 = \"fad\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 1, 3])",
        "minimumCoins(prices = [1, 1, 2, 1])",
        "minimumCoins(prices = [1, 4, 1, 1])",
        "minimumCoins(prices = [2, 1, 5, 3])",
        "minimumCoins(prices = [1, 5, 4, 2, 1])",
        "minimumCoins(prices = [1, 4, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4])",
        "minimumSeconds(A = [1,2,3])",
        "minimumSeconds(A = [0, 1, 2, 3, 4])",
        "minimumSeconds(A = [1, 1, 1, 1, 1])",
        "minimumSeconds(A = [0, 0, 0, 0, 0])",
        "minimumSeconds(A = [1,1,1])",
        "minimumSeconds(A = [1,1])",
        "minimumSeconds(A = [0, 1, 3])",
        "minimumSeconds(A = [0, 0, 0, 1])",
        "minimumSeconds(A = [0, 3, 4, 6, 8])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yz\", \"xz\"])",
        "maximumNumberOfStringPairs(words=[\"aba\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"ab\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"A\",\"AB\",\"BA\"])",
        "maximumNumberOfStringPairs(words = [\"cake\", \"kace\"])",
        "maximumNumberOfStringPairs(words = [\"xyxy\", \"yyx\", \"abba\", \"abba\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,0])",
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 1])",
        "minSum(nums1 = [1, 0, 0, 0], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [1,2,0,0], nums2 = [1,2])",
        "minSum(nums1=[1,2], nums2=[2,1])",
        "minSum(nums1 = [0, 3, 2], nums2 = [0, 0, 2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [5, 0, 0, 7])",
        "minSum(nums1 = [2, 5, 0], nums2 = [3, 2, 6])",
        "minSum(nums1 = [2,3,0], nums2 = [0,2,0])",
        "minSum(nums1 = [3, 2, 3], nums2 = [1, 1, 2, 4])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"pear\"], x = \"x\")",
        "findWordsContaining(words = [\"python\", \"java\", \"kotlin\"], x = \"perl\")",
        "findWordsContaining(words = [\"abc\", \"bbc\", \"ccc\"], x = \"z\")",
        "findWordsContaining(words = [\"bab\", \"cab\"], x = \"x\")",
        "findWordsContaining(words = [\"This\", \"is\", \"a\", \"word\"], x = \"x\")",
        "findWordsContaining(words = [\"apricot\", \"avocado\", \"banana\"], x = \"z\")",
        "findWordsContaining(words = [\"c++\", \"java\"], x = \"p\")",
        "findWordsContaining(words = [\"bear\", \"arm\", \"cat\"], x = \"dog\")",
        "findWordsContaining(words = [\"tato\", \"gato\", \"bato\"], x = \"x\")",
        "findWordsContaining(words = [\"lead\", \"gold\", \"tin\", \"silver\", \"copper\", \"iron\", \"zinc\", \"nickel\", \"cobalt\", \"manganese\", \"chromium\", \"molybdenum\", \"platinum\"], x = \"z\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 4, k = 3)",
        "maxSum(nums = [1, 2, 1, 1, 2], m = 2, k = 2)",
        "maxSum(nums = [0,0,0,0], m = 4, k = 4)",
        "maxSum(nums = [3, 2, 4], m = 1, k = 2)",
        "maxSum(nums = [1, 3, 2, 1, 1], m = 2, k = 4)",
        "maxSum(nums = [2, 1, 1, 1, 1, 1], m = 3, k = 4)",
        "maxSum(nums = [2, 1, 3, 1, 2, 2, 2, 2, 2, 1], m = 2, k = 2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [], moveTo = [])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [2], moveTo = [])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [2], moveTo = [3])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [1, 2])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 3, 4, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [0,1,2,3,4,5,6,7,8,9])",
        "minimumRightShifts(nums = [1,3,5,7,9])",
        "minimumRightShifts(nums = [1, 0, 2, 3, 4])",
        "minimumRightShifts(nums = [7, 9, 11, 13])",
        "minimumRightShifts(nums = [2, 5, 7, 1, 6, 8, 9])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [2, 1, 4], money = 8)",
        "buyChoco(prices = [10, 15, 20, 25, 30], money = 45)",
        "buyChoco(prices = [10, 11, 12], money = 100)",
        "buyChoco(prices = [3, 5, 8], money = 13)",
        "buyChoco(prices = [5, 2, 10], money = 17)",
        "buyChoco(prices = [100, 10, 200], money = 300)",
        "buyChoco(prices = [10, 5, 7, 4], money = 12)",
        "buyChoco(prices = [2, 2, 4, 5, 8], money = 10)",
        "buyChoco(prices = [1, 1, 2, 5, 8, 9, 25, 100, 200], money = 4)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6], target = 19)",
        "lengthOfLongestSubsequence(nums = [100, 1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 4, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [9, 18, 9], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 5, 9, 10, 11, 12], target = 12)",
        "lengthOfLongestSubsequence(nums = [90, 92, 93, 94, 95, 96, 97, 98, 99, 100], target = 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
        "lengthOfLongestSubsequence(nums = [3, 3, 5, 5, 7, 8, 2, 9], target = 11)",
        "lengthOfLongestSubsequence(nums = [5, 1, 4, 2, 2, 5, 6, 8, 10], target = 12)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcbef\")",
        "longestSemiRepetitiveSubstring(s = \"abbababa\")",
        "longestSemiRepetitiveSubstring(s = \"abcbd\")",
        "longestSemiRepetitiveSubstring(s = \"ababaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcacbcacb\")",
        "longestSemiRepetitiveSubstring(s = \"abcbacbacbc\")",
        "longestSemiRepetitiveSubstring(s = \"323434234234234\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"abcd\", \"efgh\", \"ijkl\"], x = \"l\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"pear\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"cattle\"], x = \"at\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"watermelon\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"a\", \"banana\", \"anana\"], x = \"an\")",
        "findWordsContaining(words = [\"str1\", \"str2\", \"str3\"], x = \"r\")",
        "findWordsContaining(words = [\"orange\", \"banana\", \"apple\", \"pineapple\"], x = \"na\")",
        "findWordsContaining(words = [\"hello\", \"mom\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"mama\", \"gaga\", \"nanana\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"bee\", \"alice\"], x = \"na\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"3\", \"2\", \"prev\", \"prev\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"xyyx\", s2 = \"xyxy\")",
        "canBeEqual(s1 = \"xyyx\", s2 = \"xyxy\")",
        "canBeEqual(s1 = \"xyyx\", s2 = \"yyxx\")",
        "canBeEqual(s1 = \"aab\", s2 = \"abb\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aba\")",
        "canBeEqual(s1 = \"xyxx\", s2 = \"xxxy\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [10,2,3,4,5])",
        "minimumSum(nums=[1,2,3,4,5,6,7,8,9])",
        "minimumSum(nums = [3, 4, 5])",
        "minimumSum(nums = [8, 2, 4, 5])",
        "minimumSum(nums = [3,4,1,2,5])",
        "minimumSum(nums = [3,1,5,2,10])",
        "minimumSum(nums = [6, 3, 5, 1, 7])",
        "minimumSum(nums = [1, 4, 7, 8, 2, 3, 6])",
        "minimumSum(nums = [4,2,5,7,2,3,1])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 1)",
        "lengthOfLongestSubsequence(nums = [1], target = -1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 1234)",
        "lengthOfLongestSubsequence(nums = [10, 11, 2, 3, 1, 3, 12], target = 22)"
    ],
    "sample_368": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"LympH\")",
        "sortVowels(s = \"lHmYp\")",
        "sortVowels(s = \"Hmly\")",
        "sortVowels(s = 'lympH')",
        "sortVowels(s = 'Hlymp')",
        "sortVowels(s = \"pYlHm\")",
        "sortVowels(s = \"lHymP\")",
        "sortVowels(s = \"mLpH\")",
        "sortVowels(s = \"lmpYh\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,1], [1,1]])",
        "matrixSum(nums = [[0, 1, 2], [3, 4, 5], [6, 7, 8]])",
        "matrixSum(nums = [[3]])",
        "matrixSum(nums = [[1,1], [1,2]])",
        "matrixSum(nums = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])",
        "matrixSum(nums = [[-1, 1], [-2, 1]])",
        "matrixSum(nums = [[1,2,3,1,1,1,1,1]])",
        "matrixSum(nums = [[1,2],[1,2],[1,1],[1,2]])",
        "matrixSum(nums = [[1,4,3,2],[5,4,6,7],[4,2,5,3]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [2, 2, 2])",
        "maximumTripletValue(nums = [3, 1, 2])",
        "maximumTripletValue(nums = [2, 5, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maximumTripletValue(nums = [6, 7, 8])",
        "maximumTripletValue(nums = [1, -3, 5])",
        "maximumTripletValue(nums = [0, -1, 1, -2, 2])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [4, 2, 5, 7])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [0,1,0])",
        "alternatingSubarray(nums = [0,1,1,0])",
        "alternatingSubarray(nums = [1,2,1])",
        "alternatingSubarray(nums = [3, 4, 2, 3])",
        "alternatingSubarray(nums = [1,3,5,7,9,11,13,15,17,19])",
        "alternatingSubarray(nums = [1,0,0,1,1,1,1,1,0,0,0,1,1,1])",
        "alternatingSubarray(nums = [1,3,5,4,4,2,5,3,2,1])",
        "alternatingSubarray(nums = [5, 1, 4, 2, 1, 3, 3, 3, 1, 4, 3, 2])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"aaa\", k = 3)",
        "beautifulSubstrings(s = \"abaa\", k = 2)",
        "beautifulSubstrings(s = \"abacab\", k = 3)",
        "beautifulSubstrings(s = \"aabbb\", k = 3)",
        "beautifulSubstrings(s = \"uuu\", k = 1)",
        "beautifulSubstrings(s = \"I love you\", k = 3)",
        "beautifulSubstrings(s = \"caa\", k = 1)"
    ],
    "sample_449": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aaaaaaa\")",
        "minChanges(s = \"xx\")",
        "minChanges(s = \"abcdcbef\")",
        "minChanges(s = \"abbabba\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"0000000000\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"001000\")",
        "minimumSteps(s = \"1001010101\")",
        "minimumSteps(s = \"011101000\")",
        "minimumSteps(s = \"00111111110000\")"
    ],
    "sample_305": [
        "countSeniors(details = [])",
        "countSeniors(details = [\"1990-01-01\", \"1990-01-01\"])",
        "countSeniors(details = [\"10112223334\", \"10112223335\", \"10112223336\"])",
        "countSeniors(details = [\"123 123 1234567890\", \"123 123 0987654321\"])",
        "countSeniors(details = [\"priya\", \"21\", \"priya\", \"21\"])",
        "countSeniors(details = [\"19011990\", \"10012000\", \"10012001\"])",
        "countSeniors(details=['0000000000000102','0000000000000100','0000000000000101'])",
        "countSeniors(details = [\"Joe 21 65000\", \"Jill 25 50000\", \"Bill 20 80000\"])",
        "countSeniors(details=[\"Little_Bill 1001111111 10/11/2021 1996\"])",
        "countSeniors(details = [\"Z13232931P\", \"N25487452A\", \"T13949247H\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11])",
        "minGroupsForValidAssignment(nums = [1,3,2,2,1,5])",
        "minGroupsForValidAssignment(nums = [2, 1, 2, 2, 1, 1, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6",
        "minGroupsForValidAssignment(nums = [5,5,2,3,4,4,7,8,10])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 1], [1, 0], [1, 1], [1, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [2, 0], [2, 1], [1, 1]], k = 2)",
        "countPairs(coordinates = [[1,2],[2,4],[4,1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 0], [0, 1], [1, 0], [1, 0], [1, 1], [2, 0], [2, 0], [2, 1], [3, 0], [3, 0], [3, 1]], k = 2)",
        "countPairs(coordinates = [(1, 2), (3, 4), (5, 6), (6, 5), (4, 3), (2, 1), (1, 2)], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [0, 1], [1, 0], [2, 0], [2, 1], [2, 2], [1, 2], [2, 3], [1, 3]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [2, 3], [2, 4], [3, 3], [3, 4], [3, 5], [4, 5], [5, 5]], k = 4)",
        "countPairs(coordinates = [[1, 1], [3, 3], [4, 1], [5, 4], [1, 1], [3, 3], [4, 1], [5, 4]], k = 2)",
        "countPairs(coordinates = [(1, 1), (2, 1), (2, 3), (2, 4), (4, 1), (5, 1), (6, 1)], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 1], [3, 2], [4, 4], [5, 3], [6, 3], [7, 2], [7, 3], [8, 2]], k = 3)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3], m = 3, k = 2)",
        "maxSum(nums = [1, 2], m = 3, k = 1)",
        "maxSum(nums = [1, 1, 1], m = 3, k = 2)",
        "maxSum(nums = [-2, -1], m = 1, k = 2)",
        "maxSum(nums = [0,0,0,0], m = 2, k = 2)",
        "maxSum(nums = [3, -1, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 12, k = 5)",
        "maxSum(nums = [5, 2, 4, 2], m = 4, k = 2)",
        "maxSum(nums = [-1, -2, 3, 0, 1, 4], m = 2, k = 3)",
        "maxSum(nums = [5, 7, 8, 5, 4, 9], m = 4, k = 2)"
    ],
    "sample_452": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"abcb\")",
        "minChanges(s = \"xy\")",
        "minChanges(s = \"abcbd\")",
        "minChanges(s = \"axxa\")",
        "minChanges(s = \"AABCBC\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 5])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [4,3,2,1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [5, 4, 3, 2, 1], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [3, 4, 5, 6])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [4,1,3,2])",
        "minOperations(nums1 = [1, 2, 2, 1], nums2 = [1, 1, 2, 2])",
        "minOperations(nums1 = [1,2,5], nums2 = [2,1,3])",
        "minOperations(nums1 = [7, 7, 5], nums2 = [8, 8, 4])",
        "minOperations(nums1 = [1, 1, 2, 3, 4], nums2 = [4, 4, 2, 3, 4])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '0110111', k = 2)",
        "shortestBeautifulSubstring(s = \"1100110\", k = 2)",
        "shortestBeautifulSubstring(s = '10101', k = 3)",
        "shortestBeautifulSubstring(s = \"1011100110\", k = 3)",
        "shortestBeautifulSubstring(s = \"11010110\", k = 3)",
        "shortestBeautifulSubstring(s = \"10101010\", k = 1)",
        "shortestBeautifulSubstring(s = \"110011001100110\", k = 2)",
        "shortestBeautifulSubstring(s = '100101001001', k = 2)",
        "shortestBeautifulSubstring(s = \"1001110100101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101001101111\", k = 3)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,1,1])",
        "maximumTripletValue(nums = [0])",
        "maximumTripletValue(nums=[0,0,0])",
        "maximumTripletValue(nums = [-1,-2,-3,-4])",
        "maximumTripletValue(nums=[0, 0, 0, 0, 0])",
        "maximumTripletValue(nums = [2, 1, 4])",
        "maximumTripletValue(nums = [-1, 2, 3, 4, 0])",
        "maximumTripletValue(nums=[1, 0, -2])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 2, limit = 2)",
        "distributeCandies(n = 2, limit = 2)",
        "distributeCandies(n = 2, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 3, limit = 6)",
        "distributeCandies(n = 3, limit = 6)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 6, limit = 6)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [4,3,2,3,2,1,1])",
        "minGroupsForValidAssignment(nums=[4,3,1,1])",
        "minGroupsForValidAssignment(nums = [4,4,4,2,2,2,2,1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,1,1,2,1,1,1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [4,4,3,2,1,1,1,2,3,4])",
        "minGroupsForValidAssignment(nums = [6,15,20,25,30,35,40,45,50,55,60,65])",
        "minGroupsForValidAssignment(nums = [7,2,6,1,4,7,1,7,10,4,6,2,5,8,8,3,8,9,10,2,8,1,5,5])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39, 39, 39, 40, 40, 40, 41, 42, 42, 42, 43, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 53, 53, 53, 54, 54, 54, 55,"
    ],
    "sample_269": [
        "minSum(nums1 = [0, 0, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5])",
        "minSum(nums1 = [1, 1, 0], nums2 = [1, 0, 1])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minSum(nums1 = [0,1,2], nums2 = [3,4,5])",
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [1, 2])",
        "minSum(nums1 = [1, 2, 0, 4, 5], nums2 = [0, 0, 4, 3, 5])",
        "minSum(nums1 = [0, 2, 3, 0, 3], nums2 = [4, 2, 0, 3, 1])",
        "minSum(nums1 = [4, 3, 1, 1, 3, 4, 0, 1], nums2 = [0, 2, 0, 1, 0, 1, 0, 1])"
    ],
    "sample_453": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abca\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"abaa\")",
        "minChanges(s = \"abcdefg\")",
        "minChanges(s = \"aaaba\")",
        "minChanges(s = \"bbbab\")",
        "minChanges(s = \"cbb\")",
        "minChanges(s = \"0000001\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"a\", k = 3)",
        "beautifulSubstrings(s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "beautifulSubstrings(s = \"b\", k = 1)",
        "beautifulSubstrings(s = \"aaaaaa\", k = 3)",
        "beautifulSubstrings(s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
        "beautifulSubstrings(s = \"aiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaiaia",
        "beautifulSubstrings(s = \"aaaaaaa\", k = 4)",
        "beautifulSubstrings(s = \"caa\", k = 2)",
        "beautifulSubstrings(s = \"bbbbaaaaa\", k = 1)",
        "beautifulSubstrings(s = \"suhai\", k = 2)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"aabaabaa\", k = 3)",
        "beautifulSubstrings(s = \"aabbccdd\", k = 2)",
        "beautifulSubstrings(s = \"abaaba\", k = 3)",
        "beautifulSubstrings(s = \"aabaac\", k = 3)",
        "beautifulSubstrings(s = \"abracadabra\", k = 2)",
        "beautifulSubstrings(s = \"aaaaa\", k = 4)",
        "beautifulSubstrings(s = \"aabbaaee\", k = 2)",
        "beautifulSubstrings(s = \"aaaaeeiiiiouuuu\", k = 3)"
    ],
    "sample_369": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"Hilly\")",
        "sortVowels(s = \"lHymp\")",
        "sortVowels(s = \"lmPhY\")",
        "sortVowels(s = \"HmLPy\")",
        "sortVowels(s = \"HumlY\")",
        "sortVowels(s = \"phylum\")",
        "sortVowels(s=\"HlmYp\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [0, 1, 2])",
        "minimumSeconds(nums = [1, 2, 3, 1, 2, 3])",
        "minimumSeconds(nums = [1,1,1,1,1])",
        "minimumSeconds(nums = [1, 0, 1, 0])",
        "minimumSeconds(nums = [1, 2, 1, 2, 3])",
        "minimumSeconds(nums = [3, 3, 1])",
        "minimumSeconds(nums = [1, 4, 1])",
        "minimumSeconds(nums = [0, 4, 5, 1, 3, 6, 0, 4, 5, 1, 3, 6])",
        "minimumSeconds(nums = [1, 3, 1, 4, 1, 3, 3, 4, 2, 1])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [7, 6, 5, 4, 3, 2, 1])",
        "minimumSum(nums = [2, 4, 6, 2, 5])",
        "minimumSum(nums = [3, 4, 5])",
        "minimumSum(nums = [1, 2, 5, 6, 7])",
        "minimumSum(nums = [5, 3, 3, 6])",
        "minimumSum(nums = [3, 2, 1, 6, 4])",
        "minimumSum(nums = [3, 2, 5, 2, 2])",
        "minimumSum(nums = [7, 11, 4, 3, 4, 7, 1])",
        "minimumSum(nums = [6, 2, 7, 4, 1, 3, 8, 11, 2])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [3, 1, 3, 4, 3], k = 2)",
        "minOperations(nums = [2,1,5,6,3], k = 3)",
        "minOperations(nums = [1,1,2,2,3,3,3,4,5,5], k = 3)",
        "minOperations(nums = [2, 3, 4, 2, 3, 6, 7, 8, 5, 6], k = 3)",
        "minOperations(nums = [9,2,3,1], k = 2)",
        "minOperations(nums = [10, 10, 10, 11, 11, 11, 11], k = 2)",
        "minOperations(nums = [10, 5, 13, 11, 20, 7, 12], k = 2)",
        "minOperations(nums = [5,11,4,12,1,2,3,11], k = 2)"
    ],
    "sample_400": [
        "maxSum(A = [1], m = 1, k = 1)",
        "maxSum(A = [0], m = 2, k = 1)",
        "maxSum(A = [1, 2, 3, 2, 1, 1], m = 2, k = 3)",
        "maxSum(A = [1, 1, 1, 1, 1], m = 10, k = 2)",
        "maxSum(A = [1, 2, 3, 2, 4], m = 2, k = 2)",
        "maxSum(A = [2,1,3,2,4,3], m = 3, k = 3)",
        "maxSum(A = [1,2,3,1,1,1], m = 1, k = 5)",
        "maxSum(A = [0, 0, 1, 0, 0, 0, 0, 1, 0, 0], m = 3, k = 3)",
        "maxSum(A = [10, 5, 11, 10], m = 3, k = 2)",
        "maxSum(A = [-1, 1, 1, 2, 3, 3, 5, 5, 10, 10, 10], m = 3, k = 5)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"00100\")",
        "minimumSteps(s = \"00100100\")",
        "minimumSteps(s = \"0010110\")",
        "minimumSteps(s = \"0101101\")",
        "minimumSteps(s = \"1000010001\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 1, 1, 1])",
        "maxSubarrays(nums = [0, 0, 0])",
        "maxSubarrays(nums = [2, 6, 3, 5, 1, 4])",
        "maxSubarrays(nums = [1,2,4,8])",
        "maxSubarrays(nums = [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647])",
        "maxSubarrays(nums = [2, 1, 3, 4, 1, 3])",
        "maxSubarrays(nums = [3, 1, 5, 2, 2, 4, 2, 1])",
        "maxSubarrays(nums = [2, 4, 3, 1, 3, 2, 5])",
        "maxSubarrays(nums = [3, 1, 4, 2, 6, 7, 1, 4, 5, 3, 2])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1, 2], money = 2)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6], money = 10)",
        "buyChoco(prices = [2, 3, 4, 5], money = 1)",
        "buyChoco(prices = [2,1], money = 2)",
        "buyChoco(prices = [100, 200], money = 50)",
        "buyChoco(prices = [11, 10], money = 11)",
        "buyChoco(prices = [1,2,1], money = 3)",
        "buyChoco(prices = [100, 100, 100], money = 295)",
        "buyChoco(prices = [5, 3, 6, 10], money = 11)"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s=\"0100\")",
        "minimumSteps(s = \"1111000011110000\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8])",
        "minLengthAfterRemovals(nums = [0, 1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [3, 2, 1])",
        "minLengthAfterRemovals(nums = [1,2,3,3,3,4])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5"
    ],
    "sample_420": [
        "minOperations(nums = [2, 1, 5, 1, 2, 2], k = 3)",
        "minOperations(nums = [2, 1, 5, 1, 2, 2], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [2, 1, 5, 1, 2, 1, 4], k = 3)",
        "minOperations(nums = [2, 4, 7, 1, 5, 3], k = 3)",
        "minOperations(nums = [2,3,4,5,6,7,8], k = 4)",
        "minOperations(nums = [2, 7, 5, 8, 9], k = 3)",
        "minOperations(nums = [2, 5, 8, 4], k = 4)",
        "minOperations(nums = [2, 4, 6, 5, 3, 7, 1], k = 3)",
        "minOperations(nums = [2,4,5,12,3,5,7,10,21], k = 4)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 2, 3])",
        "isGood(nums = [0, 1, 2])",
        "isGood(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5])"
    ],
    "sample_325": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 12345678)",
        "isFascinating(n = 375)",
        "isFascinating(n = 1000)",
        "isFascinating(n = 98)",
        "isFascinating(n = 78456)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 3, 4, 5])",
        "isGood(nums = [1, 2, 0])",
        "isGood(nums = [0,2,3,4])",
        "isGood(nums = [2,3,1])",
        "isGood(nums = [0,1,2,3,5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 9])",
        "isGood(nums = [1,1,2,4])",
        "isGood(nums = [0, 2, 4, 5])",
        "isGood(nums = [1, 4, 5, 6, 7])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [0, 2, 1, 4, 3])",
        "minimumSeconds(nums = [0,1,2,3])",
        "minimumSeconds(nums = [1, 3, 3, 2])",
        "minimumSeconds(nums = [0, 4, 1, 2])",
        "minimumSeconds(nums = [10, 11, 12])",
        "minimumSeconds(nums = [3, 1, 1, 1])",
        "minimumSeconds(nums = [5, 3, 1, 4, 2, 6])",
        "minimumSeconds(nums = [1, 2, 1, 1, 3, 3, 1, 1, 1])",
        "minimumSeconds(nums = [1, 2, 4, 5, 10, 23])",
        "minimumSeconds(nums = [7,7,2,9,3,9,7,10,9,4])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2])",
        "minimumRightShifts(nums = [1])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [2,1,3])",
        "minimumRightShifts(nums = [1, 3, 5, 2])",
        "minimumRightShifts(nums = [2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1",
        "minimumRightShifts(nums = [3, 8, 10, 2, 5])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [0, 1, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 0])",
        "isGood(nums = [2, 1, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 8])",
        "isGood(nums = [1, 3, 4, 5, 6, 7])",
        "isGood(nums = [2, 3, 4, 5, 6, 1])",
        "isGood(nums = [0,1,3,2,5])",
        "isGood(nums = [2, 1, 4, 5, 0])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2], nums2 = [2, 3])",
        "minOperations(nums1 = [1,1,1], nums2 = [2,2,3])",
        "minOperations(nums1 = [1,2], nums2 = [3,4])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 1, 3])",
        "minOperations(nums1 = [1, 2, 2], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 5, 4, 3, 2])",
        "minOperations(nums1 = [5, 7], nums2 = [9, 1])",
        "minOperations(nums1 = [2, 4, 7, 1, 5], nums2 = [4, 2, 3, 6, 1])",
        "minOperations(nums1 = [2, 2, 3, 4], nums2 = [5, 4, 3, 2])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = '111', k = 2)",
        "shortestBeautifulSubstring(s = \"0101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011\", k = 2)",
        "shortestBeautifulSubstring(s = \"111101\", k = 3)",
        "shortestBeautifulSubstring(s = \"12345678901234567890\", k = 3)",
        "shortestBeautifulSubstring(s = '111213', k = 3)",
        "shortestBeautifulSubstring(s = '10111111100', k = 5)",
        "shortestBeautifulSubstring(s = '0111011100', k = 4)",
        "shortestBeautifulSubstring(s = \"1010010001010001000100000\", k = 4)",
        "shortestBeautifulSubstring(s
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3, 3, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 1, 1, 2])",
        "minGroupsForValidAssignment(nums = [4, 6, 7, 5])",
        "minGroupsForValidAssignment(nums = [10, 6, 10])",
        "minGroupsForValidAssignment(nums = [5, 5, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 3, 5, 6, 10, 11, 12, 13, 14])",
        "minGroupsForValidAssignment(nums = [5, 3, 10, 3, 5, 10])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"1111111111\")",
        "minimumSteps(s = \"10010\")",
        "minimumSteps(s = \"111110000000\")",
        "minimumSteps(s = \"1110010111\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "lengthOfLongestSubsequence(nums = [100, 113, 120], target = 1000000)",
        "lengthOfLongestSubsequence(nums = [1, 4, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [100, 1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23], target = 10)",
        "lengthOfLongestSubsequence(nums = [7, 2, 3, 1, 6, 5, 4], target = 18)",
        "lengthOfLongestSubsequence(nums = [5, 7, 2, 1, 3, 4], target = 4)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [5,4,1,2,3])",
        "minimumSum(nums = [5, 1, 3, 4, 2])",
        "minimumSum(nums = [5, 3, 1, 4, 2])",
        "minimumSum(nums = [3,2,1,2,1])",
        "minimumSum(nums = [0,1,2,3,4,5,6,7,8])",
        "minimumSum(nums = [2,4,1,6,4])",
        "minimumSum(nums = [4,2,2,1,1,2])",
        "minimumSum(nums = [2, 4, 5, 8, 12, 18, 20, 22, 24])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 10, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 4, k = 1)",
        "maxSum(nums = [1, 3, 2], m = 2, k = 3)",
        "maxSum(nums = [1,1,2,2,3], m = 1, k = 2)",
        "maxSum(nums = [2, 1, 1, 2, 3, 1, 2], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 1, 5, 1, 2], m = 3, k = 3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"fgh\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"efg\", s3 = \"hij\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cd\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"ban\", s3 = \"bbb\")"
    ],
    "sample_427": [
        "minOperations(nums = [3, 1, 4, 1])",
        "minOperations(nums = [3,1,4,1])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 3, 4, 5, 6])",
        "minOperations(nums = [1, 1, 1, 2, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [1, 3, 3, 3, 3, 4, 4, 4, 4, 4])",
        "minOperations(nums = [1, 3, 5, 7, 9, 1, 1, 1])",
        "minOperations(nums = [3, 3, 1, 4, 4, 2, 2])",
        "minOperations(nums = [1, 3, 3, 3, 4, 4, 4, 4, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 1])",
        "minimumCoins(prices = [1, 1, 1, 2])",
        "minimumCoins(prices = [3, 2, 1])",
        "minimumCoins(prices = [1, 3, 1, 2, 1])",
        "minimumCoins(prices = [4, 3, 2, 1])",
        "minimumCoins(prices=[1, 2, 5, 1, 2])",
        "minimumCoins(prices=[1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices = [1, 5, 10, 4, 7])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,1,1])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [0,0])",
        "minimumSeconds(nums = [0,0,0])",
        "minimumSeconds(nums = [0,0,0,0])",
        "minimumSeconds(nums = [1,3,5])",
        "minimumSeconds(nums = [2,3,1,2,4,3])",
        "minimumSeconds(nums = [0, 4, 0])",
        "minimumSeconds(nums = [4, 3, 2, 6, 1, 7])"
    ],
    "sample_448": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abcdefg\")",
        "minChanges(s = \"abcdab\")",
        "minChanges(s = \"bac\")",
        "minChanges(s = \"aabbbbaa\")",
        "minChanges(s = \"dde\")",
        "minChanges(s = \"110100\")",
        "minChanges(s = \"111112\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 5, 8, 3, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 0)",
        "lexicographicallySmallestArray(nums = [1, 5, 8, 3, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [9, 5, 3, 8, 1], limit = 1)",
        "lexicographicallySmallestArray(nums = [5, 8, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 8, 5, 9, 3], limit = 1)",
        "lexicographicallySmallestArray(nums = [1, 3, 8, 9, 5], limit = 5)",
        "lexicographicallySmallestArray(nums = [1, 2, 5, 7, 8], limit = 3)",
        "lexicographicallySmallestArray(nums = [7, 9, 5, 8, 3], limit = 6)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1,2,1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts(nums = [2,2,1])",
        "sumCounts(nums = [2,1,3,2])",
        "sumCounts(nums = [3, 4, 3])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [])",
        "maximumTripletValue(nums = [1])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [5, 1, 3, 4, 2])",
        "maximumTripletValue(nums = [1, 3, 5, 2])",
        "maximumTripletValue(nums = [-1, -4, 10])",
        "maximumTripletValue(nums = [2, 0, 2, 0, 3, 2])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 4)",
        "beautifulSubstrings(s = \"aaaaa\", k = 3)",
        "beautifulSubstrings(s = \"abba\", k = 4)",
        "beautifulSubstrings(s = \"b\", k = 2)",
        "beautifulSubstrings(s = \"whatever\", k = 1)",
        "beautifulSubstrings(s = \"aaca\", k = 3)",
        "beautifulSubstrings(s = \"xxyyyz\", k = 1)",
        "beautifulSubstrings(s = \"abeceda\", k = 7)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,2,3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1,1,2,2], target = 3)",
        "countPairs(nums = [1,3,5,7], target = 10)",
        "countPairs(nums = [1,3,7], target = 10)",
        "countPairs(nums = [1, 5, 3, 4], target = 5)",
        "countPairs(nums = [1, 1, 2, 2, 3, 5], target = 6)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 13, limit = 3)",
        "distributeCandies(n = 11, limit = 4)",
        "distributeCandies(n = 14, limit = 2)",
        "distributeCandies(n=2, limit=1)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1], nums2 = [2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 6])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 4, 5, 6, 7])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 1, 2])",
        "minOperations(nums1 = [1, 3, 4], nums2 = [2, 5, 6])",
        "minOperations(nums1 = [2, 3, 4], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 10, 3], nums2 = [1, 2, 4, 8])",
        "minOperations(nums1 = [1,3,4,5,1,1,6], nums2 = [1,3,5,1,2,2,2])",
        "minOperations(nums1 = [3,2,2,5,1,2,4], nums2 = [2,1,3,3,2,4,3])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1,1,3,1,1])",
        "minOperations(nums = [4, 1, 3, 2])",
        "minOperations(nums = [3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [2, 1, 3, 2, 2, 2])",
        "minOperations(nums = [1, 1, 3, 1, 1, 3, 3, 1])",
        "minOperations(nums = [1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 6])",
        "minOperations(nums = [2, 4, 2, 4, 1, 2, 3, 1, 2, 4, 1, 2, 4])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = '1101101', k = 2)",
        "shortestBeautifulSubstring(s = \"110110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"10010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101100010\", k = 3)",
        "shortestBeautifulSubstring(s = \"101110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"0010111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010001001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1110011000110111\", k = 3)",
        "shortestBeautifulSubstring(s
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3,4,5,6])",
        "minimumSeconds(nums = [0,1])",
        "minimumSeconds(nums = [1, 0, 0, 1])",
        "minimumSeconds(nums = [0,0,0,0,0])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [3,2,1,4])",
        "minimumSeconds(nums = [5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [2, 3, 4, 0, 1])",
        "minimumSeconds(nums = [0, 2, 4, 5, 1, 3, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 3, 4, 7, 0, 9, 1])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3, 3, 3, 4])",
        "minOperations(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "minOperations(nums = [1, 2, 3, 4, 4, 3])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 5, 6, 6])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 3, 3, 3, 3])",
        "minOperations(nums = [4, 4, 4, 4, 1, 2])",
        "minOperations(nums = [1, 3, 5, 1, 1, 3, 5, 5, 5, 5, 5])",
        "minOperations(nums = [1, 2, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6])",
        "minOperations(nums = [2, 2, 2, 1, 1, 2, 3, 1, 2, 2, 3, 1, 2, 2])",
        "minOperations(nums = [2, 3, 3, 2, 3, 3, 4, 3, 3, 2, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3,"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,17,5,10,13,15,10,5,16,8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1,3,2,4,5])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 2, 3, 1])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 3])",
        "alternatingSubarray(nums = [1, 3, 5, 4, 7, 9, 10])",
        "alternatingSubarray(nums = [8, 5, 1, 7, 9, 2, 6])",
        "alternatingSubarray(nums = [8, 6, 7, 4, 3, 1, 8, 7, 7, 3])",
        "alternatingSubarray(nums = [4,2,4,5,7,8,8,9,4,5,11,12,13,14,15,11])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,1,2,1,1,1,3])",
        "minLengthAfterRemovals(nums = [0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"xyxy\", \"yy\"])",
        "maximumNumberOfStringPairs(words = [\"xyxy\", \"yy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yx\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"taco\", \"cat\", \"oat\", \"act\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"aba\", \"cbb\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"abab\", \"aaab\", \"baab\"])",
        "maximumNumberOfStringPairs(words = [\"aabb\", \"abab\", \"ababab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"acb\", \"cba\", \"cab\", \"aaa\", \"bbb\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abd\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"bad\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"zyx\", str2 = \"zxy\")",
        "canMakeSubsequence(str1 = \"hello\", str2 = \"leet\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"zc\")",
        "canMakeSubsequence(str1 = \"n\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"ae\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"axc\", str2 = \"bd\")",
        "canMakeSubsequence(str1 = \"eo\", str2 = \"hello\")",
        "canMakeSubsequence(str1 = \"ace\", str2 = \"trac\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabc\")",
        "longestSemiRepetitiveSubstring(s = \"ababababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbbcccc\")",
        "longestSemiRepetitiveSubstring(s = \"ABABA\")",
        "longestSemiRepetitiveSubstring(s = \"aabbccbcaabb\")",
        "longestSemiRepetitiveSubstring(s = \"cabbbbbbbbbb\")"
    ],
    "sample_399": [
        "maxSum(nums = [], m = 1, k = 1)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [1,2,3], m = 1, k = 2)",
        "maxSum(nums = [-2,2,-3,4,-1,2,1,-5,3], m = 3, k = 3)",
        "maxSum(nums = [1,1,1,1,1,1,1,1,1,1], m = 2, k = 1)",
        "maxSum(nums = [-2,-1], m = 1, k = 1)",
        "maxSum(nums=[1,1,1,1,1,1], m=3, k=3)",
        "maxSum(nums = [2, -1, 1], m = 1, k = 4)",
        "maxSum(nums = [0, 0, 0, 1, 2, 3, 4, 5, 6, 7], m = 1, k = 1)",
        "maxSum(nums = [5,-2,4,5,4,4,3,4,-1,3,5], m = 4, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pineapple\"], x = \"apple\")",
        "findWordsContaining(words = [\"bread\", \"butter\", \"jam\"], x = \"e\")",
        "findWordsContaining(words = [\"she\", \"sells\", \"seashells\"], x = \"e\")",
        "findWordsContaining(words = [\"apples\", \"carrot\"], x = \"a\")",
        "findWordsContaining(words = [\"contains\", \"doesnt\"], x = \"nt\")",
        "findWordsContaining(words = [\"elbow\", \"lamb\"], x = \"b\")",
        "findWordsContaining(words = [\"turtle\", \"coconut\", \"elephant\"], x = \"t\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [3,1])",
        "relocateMarbles(nums=[1,2,2], moveFrom=[1,2], moveTo=[2,1])",
        "relocateMarbles(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "relocateMarbles(nums = [1,1,1,2,2,2], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [2,2,3,4,5], moveFrom = [3,5], moveTo = [4,2])",
        "relocateMarbles(nums = [1,2,3,4,5,6], moveFrom = [1,3,4], moveTo = [3,4,5])",
        "relocateMarbles(nums = [2,2,2,3,4], moveFrom = [2,3], moveTo = [4,3])",
        "relocateMarbles(nums = [2, 4, 1, 3, 5], moveFrom = [2, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 1, 3, 4], moveTo = [3, 4, 5, 6])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [])",
        "maximumTripletValue(nums = [1, 0, -1])",
        "maximumTripletValue(nums = [-1, -1, -1])",
        "maximumTripletValue(nums = [1, 0, 2])",
        "maximumTripletValue(nums = [2, 1, 2, 1])",
        "maximumTripletValue(nums = [-1, -2, -3, -4, -5])",
        "maximumTripletValue(nums = [1, 1, 1, 2, 1, 0])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"geeksforgeeks\")",
        "longestSemiRepetitiveSubstring(s = \"bababa\")",
        "longestSemiRepetitiveSubstring(s = \"aababcaab\")",
        "longestSemiRepetitiveSubstring(s = \"aababcbc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaba\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcabbd\")",
        "longestSemiRepetitiveSubstring(s = \"abacbdefa\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"bar\", \"foo\", \"oof\", \"rab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"cd\", \"abc\", \"cba\", \"abc\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"dad\", \"dam\", \"nbd\", \"mnd\"])",
        "maximumNumberOfStringPairs(words = [\"seven\", \"evens\", \"mint\", \"dwarf\", \"teen\", \"fee\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[0], [1]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[0,1]])",
        "matrixSum(nums = [[1, 0], [0, 2]])",
        "matrixSum(nums = [[0,1,2],[3,4,5]])",
        "matrixSum(nums = [[-1, 1], [-1, 1]])",
        "matrixSum(nums = [[1, 2, 3, 4], [0, 0, 0, 0]])",
        "matrixSum(nums = [[1, 1000000000], [1, 1]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"xz\", s3 = \"yz\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"apple\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"ABC\", s2 = \"DEF\", s3 = \"GHI\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"hijk\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"baba\", s2 = \"abba\", s3 = \"abac\")",
        "findMinimumOperations(s1 = \"wob\", s2 = \"wob\", s3 = \"bob\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"c\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"apple\", s2 = \"aple\", s3 = \"appl\")",
        "findMinimumOperations(s1 = \"abd\", s2 = \"acd\", s3 = \"adc\")",
        "findMinimumOperations(s1 = \"frog\", s2 = \"frog\", s3 = \"fog\")",
        "findMinimumOperations(s1 = \"test\", s2 = \"test\", s3 = \"zest\")"
    ],
    "sample_324": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1)",
        "isFascinating(n = 234)",
        "isFascinating(n = 234)",
        "isFascinating(n = 126)",
        "isFascinating(n = 200)",
        "isFascinating(n = 211)",
        "isFascinating(n = 560)",
        "isFascinating(n = 290289)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1,1,1])",
        "minimumCoins(prices = [2,3,1])",
        "minimumCoins(prices = [1,2,3,2])",
        "minimumCoins(prices = [1, 2, 1, 3])",
        "minimumCoins(prices=[1, 5, 11, 5])",
        "minimumCoins(prices = [1, 2, 5, 4])",
        "minimumCoins(prices = [100, 200, 400])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3], target = 4)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 1, 2, 2], target = 3)",
        "countPairs(nums = [1,2,2,3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [3,1,4,1,5], target = 6)",
        "countPairs(nums=[1,2,3,4,5], target=6)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], target = 10)",
        "countPairs(nums = [3,1,4,1,5], target = 5)",
        "countPairs(nums = [0,1,2,5,6], target = 8)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
        "minGroupsForValidAssignment(nums = [1,2,2,1,1,4])",
        "minGroupsForValidAssignment(nums = [4, 5, 4, 6])",
        "minGroupsForValidAssignment(nums = [1,3,5,5,5,5,5,5,5,5])",
        "minGroupsForValidAssignment(nums = [3,2,1,2,1,4,1,3,2,1])",
        "minGroupsForValidAssignment(nums = [4, 3, 2, 4, 3, 2, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [70, 5, 80, 10, 80, 90])",
        "minGroupsForValidAssignment(nums = [15,14,14,14,13,12,11,10,10,8,6,6,6,5,4,3,2,1])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 4)",
        "countPairs(nums = [1,2,3,4,5,6], target = 10)",
        "countPairs(nums = [2, 4, 5, 6], target = 7)",
        "countPairs(nums = [1, 5, 2, 1, 4], target = 6)",
        "countPairs(nums = [1, 3, 2, 5, 2], target = 6)",
        "countPairs(nums = [1, 3, 8, 9, 10, 14, 16], target = 14)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4], money = 6)",
        "buyChoco(prices = [1, 3, 4], money = 4)",
        "buyChoco(prices = [3, 4, 5], money = 5)",
        "buyChoco(prices = [4, 2, 3], money = 5)",
        "buyChoco(prices = [4,2,3], money = 5)",
        "buyChoco(prices = [3,4,5], money = 10)",
        "buyChoco(prices = [3, 2, 5], money = 6)",
        "buyChoco(prices = [2, 5, 3, 6], money = 5)",
        "buyChoco(prices=[2,3,1], money=4)",
        "buyChoco(prices=[1, 4, 2], money=3)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abccba\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"tac\", \"bar\"])",
        "maximumNumberOfStringPairs(words = [\"pp\", \"ff\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"lOtcede\")",
        "sortVowels(s = \"LEetcode\")",
        "sortVowels(s = \"leotedc\")",
        "sortVowels(s = \"leOtCede\")",
        "sortVowels(s = \"lEtoedc\")",
        "sortVowels(s = \"coEdleT\")",
        "sortVowels(s=\"Electrode\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [2, 2, 2])",
        "sumCounts(nums = [2, 1, 2])",
        "sumCounts(nums = [3, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 3])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 1, 2])",
        "minimumCoins(prices = [2, 3, 5, 7])",
        "minimumCoins(prices = [5, 4, 3, 2, 1])",
        "minimumCoins(prices = [1, 1, 1, 2, 2, 3])",
        "minimumCoins(prices = [5, 2, 3, 7, 1])",
        "minimumCoins(prices = [5, 1, 2, 6, 3, 4])"
    ],
    "sample_245": [
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 4, m = 2)"
    ],
    "sample_307": [
        "countSeniors(details = [\"John 1995\", \"Sam 1996\", \"Bob 1970\"])",
        "countSeniors(details = [\"1990-03-03\", \"1980-03-03\", \"1980-04-04\", \"1980-05-05\"])",
        "countSeniors(details = [\"John1901Davis\", \"Emma2003Olivier\", \"Michael5500Brown\"])",
        "countSeniors(details = [\"Matt 1991\", \"Pete 1970\", \"Beth 1985\"])",
        "countSeniors(details = [\"George Weasley 07-26-1980\", \"Ron Weasley 03-01-1980\", \"Hermione Granger 09-19-1979\"])",
        "countSeniors(details = [\"Bill,20,M\", \"Martha,70,F\", \"Dick,80,M\"])",
        "countSeniors(details = [\"1100392921\", \"1100392021\", \"1100392022\"])",
        "countSeniors(details = [\"Tina_1990_20\", \"Ken_1970_20\", \"Mike_1990_30\"])",
        "countSeniors(details = [\"6312221111\", \"2205199122\", \"3212911991\"])",
        "countSeniors(details = [\"Dee,F,01/01/1951\", \"Sam,M,16/09/1990\", \"Ann,F,20/02/1948\", \"Joe,M,17/04/1969\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 12)",
        "isFascinating(n = 5)",
        "isFascinating(n = 11)",
        "isFascinating(n = 9)",
        "isFascinating(n = 14)",
        "isFascinating(n = 19)",
        "isFascinating(n=10)",
        "isFascinating(n = 151)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"aba\")",
        "minimumBeautifulSubstrings(s = \"aaa\")",
        "minimumBeautifulSubstrings(s = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumBeautifulSubstrings(s = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumBeautifulSubstrings(s = \"aabcb\")",
        "minimumBeautifulSubstrings(s = \"abaababa\")",
        "minimumBeautifulSubstrings(s = \"abaaaaaaa\")",
        "minimumBeautifulSubstrings(s = \"bhbcqcehfpzqlfkx\")"
    ],
    "sample_463": [
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 7, limit = 5)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 9, limit = 4)",
        "distributeCandies(n = 9, limit = 6)",
        "distributeCandies(n = 11, limit = 6)"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10)",
        "minOperations(nums=[5,1,4,2,3], k=3)",
        "minOperations(nums = [3,3,4,1,1], k = 2)",
        "minOperations(nums = [1, 3, 4, 4, 5], k = 2)",
        "minOperations(nums = [4,1,3,2,5,1], k = 2)",
        "minOperations(nums = [2,4,6,7,5,3], k = 3)",
        "minOperations(nums = [5,6,7,9,2,3,4], k = 3)",
        "minOperations(nums = [12,4,6,7,4,3,2,3,1], k = 1)",
        "minOperations(nums = [2,2,4,4,3,3,1,1,5,2,4,4,3,3,1,1,5,6,2,4,4,3,3,1,1,5,1,3,4,1,5,6], k = 3)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [0, 0, 1])",
        "sumCounts(nums = [2, 1, 1])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [3, 2, 2])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"2\",\"prev\",\"2\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"3\", \"prev\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=[\"1\", \"1\", \"1\", \"prev\", \"1\", \"prev\", \"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [3, 1, 4, 1], k = 2)",
        "minOperations(nums = [1, 1, 2, 2, 3, 4, 4, 5], k = 2)",
        "minOperations(nums = [3, 5, 1, 4, 2], k = 6)",
        "minOperations(nums = [3, 1, 1, 2], k = 2)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [2, 2, 3, 1, 2, 3, 3, 4], k = 3)",
        "minOperations(nums = [1, 3, 5, 7, 9, 8, 7, 3], k = 3)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"abcdc\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcd\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"mamam\")",
        "longestSemiRepetitiveSubstring(s = \"beautiful\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [2, 2])",
        "sumCounts(nums = [2, 3, 2])",
        "sumCounts(nums = [3, 3])",
        "sumCounts(nums = [1,2,3,2])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '1011', k = 2)",
        "shortestBeautifulSubstring(s = '111001', k = 2)",
        "shortestBeautifulSubstring(s = '10011100', k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1001111\", k = 2)",
        "shortestBeautifulSubstring(s = '1000011', k = 2)",
        "shortestBeautifulSubstring(s = \"010111000\", k = 2)",
        "shortestBeautifulSubstring(s = '10100100001', k = 3)",
        "shortestBeautifulSubstring(s = \"111001001011010110001\", k = 3)",
        "shortestBeautifulSubstring(s = '111010101011011110110100', k = 4)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"aaa\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(s = \"0123456789\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"aaaaaa\")",
        "minimumBeautifulSubstrings(s = \"9999\")",
        "minimumBeautifulSubstrings(s = \"324567\")",
        "minimumBeautifulSubstrings(s = \"wqt\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 11)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 1, y = 2, z = 1)",
        "longestString(x = 5, y = 3, z = 4)",
        "longestString(x = 3, y = 1, z = 10)",
        "longestString(x = 1, y = 13, z = 0)",
        "longestString(x = 1, y = 4, z = 9)",
        "longestString(x = 2, y = 4, z = 8)",
        "longestString(x = 10, y = 5, z = 5)",
        "longestString(x = 7, y = 8, z = 4)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 2, 3, 4], [5, 6, 0, 8], [9, 10, 11, 12]])",
        "findChampion(grid = [[0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [2, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[2, 4, 0], [-2, -3, 3], [0, 0, 1]])",
        "findChampion(grid = [[2, 3, 1, 1], [0, 0, 1, 1], [0, 0, 2, 1], [0, 1, 1, 3]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"hello\", k = 2)",
        "beautifulSubstrings(s = 'aeiou', k = 1)",
        "beautifulSubstrings(s = \"AEIOU\", k = 1)",
        "beautifulSubstrings(s = \"aeiouaeiouaeiouaeiou\", k = 4)",
        "beautifulSubstrings(s = \"Hello World!\", k = 5)",
        "beautifulSubstrings(s = \"you\", k = 3)",
        "beautifulSubstrings(s = \"sdg\", k = 2)",
        "beautifulSubstrings(s = \"iyke\", k = 4)"
    ],
    "sample_304": [
        "countSeniors(details = [\"012345678901\", \"012345678902\", \"012345678903\", \"012345678904\"])",
        "countSeniors(details = [\"12345678901270\", \"12345678901290\"])",
        "countSeniors(details = [\"2001-03-10\", \"2010-02-01\"])",
        "countSeniors(details = [\"ABC 1234\", \"XYZ 6543\"])",
        "countSeniors(details = [\"A0001010025\", \"A0001010026\", \"A0001010027\"])",
        "countSeniors(details = [\"2000101100\", \"2001101160\", \"2001101101\"])",
        "countSeniors(details = [\"1998/08/21\",\"1990/07/14\"])",
        "countSeniors(details = [\"Kumar, 65\", \"Sen, 56\", \"Gupta, 54\"])",
        "countSeniors(details = [\"Mr.JohnSmith1968\", \"Ms.DaisyRodriguez1971\"])",
        "countSeniors(details = [\"Joe\", \"1980-11-13\", \"98.9\", \"M\", \"Bob\", \"1992-11-11\", \"79.9\", \"M\", \"Susan\", \"1991-11-11\", \"88.9\", \"F\", \"Carol\", \"1990-11-10\", \"91.9\", \"F\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-1, -2, -3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [-3, -2, -1])",
        "maximumTripletValue(nums = [10, 10, 0])",
        "maximumTripletValue(nums = [-1, -4, 0])",
        "maximumTripletValue(nums = [-1, 0, 2, -4])",
        "maximumTripletValue(nums = [1, 1, 2, 0, 2])",
        "maximumTripletValue(nums = [2, 3, 0, 0, -3])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"beautiful\")",
        "minimumBeautifulSubstrings(s = \"0011\")",
        "minimumBeautifulSubstrings(s = \"3\")",
        "minimumBeautifulSubstrings(s = \"42\")",
        "minimumBeautifulSubstrings(s = \"100011\")",
        "minimumBeautifulSubstrings(s = \"0011100\")",
        "minimumBeautifulSubstrings(s = \"2005\")",
        "minimumBeautifulSubstrings(s = \"abcabdac\")",
        "minimumBeautifulSubstrings(s = \"hthth\")",
        "minimumBeautifulSubstrings(s = \"101100100010110110001101001011001101100010111111100011110000001010111010000111100101011101111010111000000010101010100100110101101110110010110011110101000111011111010010001010101110010100010101001001101010000011011100110110010101011000001000000110110111111000001010111111010100101110101111110110111101001000010000001000110100111010010101100101010010010000011011011111100000101011111101010010111010111111011011110100100001000000100011010011101001010110010101001001000001101101111110000010101111110"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1])",
        "maxSubarrays(nums = [3, 1, 5, 4, 2])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7])",
        "maxSubarrays(nums = [0, 2, 0, 3])",
        "maxSubarrays(nums = [11, 12, 13, 0, 0])",
        "maxSubarrays(nums = [4, 4, 3, 9])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1])",
        "maxSubarrays(nums = [1, 3, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 1, 0, 0, 0])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2], b = [2, 1])",
        "minOperations(a = [1, 2, 3], b = [2, 1, 3])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [1, 2, 3], b = [4, 2, 3])",
        "minOperations(a = [1, 3, 4], b = [2, 4, 5])",
        "minOperations(a = [2, 4, 3], b = [1, 1, 2])",
        "minOperations(a = [2, 3, 5], b = [4, 4, 1])",
        "minOperations(a = [1, 2, 3, 2, 1], b = [3, 3, 3, 2, 2])",
        "minOperations(a = [1, 2, 5, 4, 3, 1], b = [1, 2, 3, 4, 5, 1])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"hello\", \"world\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"aa\", \"aaa\", \"aaaa\"])",
        "minimizeConcatenatedLength(words = [\"xy\", \"yx\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"bc\", \"d\", \"e\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"cats\", \"sand\", \"dog\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"ef\", \"gh\", \"i\"])",
        "minimizeConcatenatedLength(words = [\"m\", \"an\", \"ana\"])",
        "minimizeConcatenatedLength(words = [\"bad\", \"ban\", \"ann\"])",
        "minimizeConcatenatedLength(words = [\"ee\", \"be\", \"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"p\",\"pr\",\"pro\",\"progr\",\"progra\",\"program\",\"pqrstu\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'lymph')",
        "sortVowels(s = 'lymph')",
        "sortVowels(s = \"HlymP\")",
        "sortVowels(s = 'Hmly')",
        "sortVowels(s = \"Helym\")",
        "sortVowels(s = \"HmLyp\")",
        "sortVowels(s = 'mYlpH')",
        "sortVowels(s = \"Hlumpy\")",
        "sortVowels(s = \"mphYL\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1])",
        "sumCounts(nums = [1])",
        "sumCounts(nums = [0, 1])",
        "sumCounts(nums = [0, 1])",
        "sumCounts(nums = [0, 1, 0])",
        "sumCounts(nums = [1, 3, 2])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [2, 5, 0, 4, 1])",
        "minimumSum(nums = [2, 5, 3, 1, 4, 7])",
        "minimumSum(nums = [2,1,5,4,6])",
        "minimumSum(nums = [8, 5, 3, 1, 7])",
        "minimumSum(nums = [5, 7, 6, 3, 4])",
        "minimumSum(nums = [12, 11, 10, 1, 5])",
        "minimumSum(nums = [2, 1, 5, 7, 4, 3, 1, 1, 2])",
        "minimumSum(nums = [4, 6, -2, 8, 3, 10])",
        "minimumSum(nums = [2, 6, 9, 5, 7, 2, 3, 4, 6])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1,0,0],[0,0,0],[0,0,1]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1,0,0], [1,0,1], [0,1,1]])",
        "findChampion(grid = [[0,1,0,1], [1,0,1,0], [0,1,0,1], [1,0,1,0]])",
        "findChampion(grid = [[1,1,1,1], [0,1,1,1], [1,1,1,1]])",
        "findChampion(grid = [[2, 3], [4, 5]])",
        "findChampion(grid = [[1, 1, 1, 0], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 0, 1, 1], [0, 0, 1, 0, 1], [0, 0, 0, 0, 1]])"
    ],
    "sample_372": [
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"LeOtCede\")",
        "sortVowels(s = \"LET's code\")",
        "sortVowels(s = \"leteod\")",
        "sortVowels(s = \"letoc\")",
        "sortVowels(s = \"cEoLEt\")",
        "sortVowels(s = 'Lieutenant')",
        "sortVowels(s = \"Otcedel\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"101010101\")",
        "minimumSteps(s = \"0011010\")",
        "minimumSteps(s = \"01011100111\")",
        "minimumSteps(s = \"11111101110001100\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1, 3, 0, 2])",
        "minimumRightShifts(nums = [1, 0, 1, 0])",
        "minimumRightShifts(nums = [2,3,4,5,1])",
        "minimumRightShifts(nums = [1, 3, 4, 6])",
        "minimumRightShifts(nums = [1, 1, 2, 2, 3, 4])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [3, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2])",
        "minOperations(nums = [1,1,2,2,2,2])",
        "minOperations(nums = [1,1,2,2,2,3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 2])",
        "minOperations(nums = [2,1,1])",
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations(nums = [2, 1, 2, 1, 2, 1])",
        "minOperations(nums = [3, 2, 2, 2, 3])"
    ],
    "sample_367": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"lymPh\")",
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = \"mPhyl\")",
        "sortVowels(s = \"YmPhl\")",
        "sortVowels(s = \"Himly\")",
        "sortVowels(s = \"mPHyl\")",
        "sortVowels(s = 'plmHY')",
        "sortVowels(s = \"mLPH\")",
        "sortVowels(s = \"pHy\")"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0], [1, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1], [0, 1, 0, 0, 1], [1, 0, 1, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [1, 2], nums2 = [1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1], nums2 = [0, 0, 0])",
        "minSum(nums1 = [0, 1, 0], nums2 = [1, 0, 1])",
        "minSum(nums1 = [1, 0, 0], nums2 = [1, 2, 3])",
        "minSum(nums1 = [3, 2], nums2 = [1, -1, 0])",
        "minSum(nums1 = [4, 2], nums2 = [4, 4, 0])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [7,6,5,4,3,2,1], k = 3)",
        "minOperations(nums = [1,2,3,4], k = 4)",
        "minOperations(nums = [3,2,1,2,1], k = 2)",
        "minOperations(nums = [1, 2, 3, 1, 2], k = 3)",
        "minOperations(nums = [1, 1, 1, 1], k = 1)",
        "minOperations(nums = [1, 1, 1, 3, 4, 3], k = 2)",
        "minOperations(nums = [2, 5, 3, 9, 1, 2, 3, 4], k = 5)",
        "minOperations(nums = [4, 5, 1, 2, 1, 5, 6], k = 4)",
        "minOperations(nums = [3, 6, 2, 8, 10, 11], k = 2)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [], moveTo = [])",
        "relocateMarbles(nums = [2], moveFrom = [], moveTo = [])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [3], moveTo = [2])",
        "relocateMarbles(nums = [0, 1, 2], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [3, 1], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7], moveFrom = [1, 5], moveTo = [2, 6])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,3,4,5], moveTo = [1,3,4,5])",
        "relocateMarbles(nums = [0, 2, 5, 6], moveFrom = [1, 4], moveTo = [2, 5])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [2, 1, 5, 1, 3, 2], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "maxSum(nums = [2], m = 1, k = 1)",
        "maxSum(nums = [0, 1, 0, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 1, 3, 4, 5, 4], m = 3, k = 4)",
        "maxSum(nums = [3, 1, 1, 1, 2, 1, 1, 3], m = 2, k = 4)",
        "maxSum(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3], m = 4, k = 10)",
        "maxSum(nums = [-1, 0, 2, 1, -3, 3, 3], m = 3, k = 4)",
        "maxSum(nums = [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], m = 3, k = 5)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"cba\")",
        "canMakeSubsequence(s1 = \"bac\", s2 = \"azb\")",
        "canMakeSubsequence(s1 = \"xy\", s2 = \"xyz\")",
        "canMakeSubsequence(s1 = \"bac\", s2 = \"cabaz\")",
        "canMakeSubsequence(s1 = \"bac\", s2 = \"azbca\")",
        "canMakeSubsequence(s1 = \"azb\", s2 = \"cba\")",
        "canMakeSubsequence(s1 = \"aabc\", s2 = \"aabca\")",
        "canMakeSubsequence(s1 = \"bbaca\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"huzzah\", s2 = \"haz\")",
        "canMakeSubsequence(s1 = \"xzqw\", s2 = \"abcd\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1], nums2 = [2])",
        "minSum(nums1 = [0, 1], nums2 = [1, 1])",
        "minSum(nums1 = [1, 0], nums2 = [0, 1])",
        "minSum(nums1 = [2], nums2 = [1])",
        "minSum(nums1 = [1], nums2 = [1, 2])",
        "minSum(nums1 = [2], nums2 = [0])",
        "minSum(nums1 = [1, 1], nums2 = [2, 1])",
        "minSum(nums1 = [1, 2, 1], nums2 = [1, 2, 1])",
        "minSum(nums1 = [1, 2], nums2 = [1, 0, 1])",
        "minSum(nums1 = [0, 3, 1, 0, 0], nums2 = [1, 2, 3, 4, 0])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'prev', '1', '2'])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', '3', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=['1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"4\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"4\", \"prev\", \"3\", \"prev\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [3, 4, 5, 6])"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,2,2,3])",
        "minOperations(nums = [3,3,3,3,3])",
        "minOperations(nums = [1,1,2,2,3,3,3,3])",
        "minOperations(nums = [3,3,1,1,3])",
        "minOperations(nums = [1,1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0])",
        "minOperations(nums = [3,2,1,3,3,3,3])",
        "minOperations(nums = [2,4,3,5,1])",
        "minOperations(nums = [3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])",
        "minOperations(nums = [2,3,4,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3,1,4,3,2,2,1,3"
    ],
    "sample_451": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aaaaa\")",
        "minChanges(s = \"aaaabbbbb\")",
        "minChanges(s = \"abcddda\")",
        "minChanges(s = \"zyppax\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 20, limit = 5)",
        "distributeCandies(n = 20, limit = 5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 1000, limit = 3)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3])",
        "minSum(nums1 = [0,0,0,0,0], nums2 = [1,1,1,1,1])",
        "minSum(nums1 = [1,2], nums2 = [3,4,0])",
        "minSum(nums1 = [1, 0, 1, 0, 1], nums2 = [1, 0, 1, 0, 1])",
        "minSum(nums1 = [3,2,1], nums2 = [1,2,3])",
        "minSum(nums1 = [0,1], nums2 = [0,0])",
        "minSum(nums1 = [2,4], nums2 = [0,0])",
        "minSum(nums1 = [1,2,3], nums2 = [1000,2000,3000])",
        "minSum(nums1 = [3,1,2,4], nums2 = [7,6,5,3])",
        "minSum(nums1 = [4,0,2,3], nums2 = [0,2,3,5])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 0, 1, 0, 1])",
        "minimumRightShifts(nums = [1, 3, 2, 5, 4, 7, 6, 8])",
        "minimumRightShifts(nums = [1,0,0,1,0,1])",
        "minimumRightShifts(nums = [43, 1, 2])",
        "minimumRightShifts(nums = [4, 1, 6, 3, 0, 9])"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3], t = 4)",
        "countPairs(nums=[1,2,3,4], t=5)",
        "countPairs(nums = [1,2,3], t = 6)",
        "countPairs(nums = [1, 2, 3], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], t = 9)",
        "countPairs(nums = [1,3,2,6,1,2], t = 8)",
        "countPairs(nums = [1, 3, 7, 9], t = 10)",
        "countPairs(nums = [2,3,4,1], t = 5)",
        "countPairs(nums = [0, 3, 2, 1, 0], t = 4)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = ['push', '1', 'push', '2', 'pop'])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"push\", \"3\"])",
        "lastVisitedIntegers(words = [\"push\", \"2\", \"push\", \"1\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"push\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"1\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"push\", \"4\", \"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"2\", \"push\", \"1\", \"push\", \"3\", \"pop\", \"pop\", \"pop\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"z\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aaz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cda\")",
        "canMakeSubsequence(str1 = \"bb\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"bb\")",
        "canMakeSubsequence(str1 = \"acb\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abcbc\", str2 = \"bcbcb\")",
        "canMakeSubsequence(str1 = \"aaaabbbbc\", str2 = \"abcc\")",
        "canMakeSubsequence(str1 = \"adz\", str2 = \"ahb\")"
    ],
    "sample_268": [
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [0, 1, 2], nums2 = [3, 4, 0])",
        "minSum(nums1 = [1, 2, 0, 0, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1,2,3,0,0], nums2 = [1,0,0,2,3])",
        "minSum(nums1 = [1, 2, 0, 0, 3], nums2 = [2, 4, 0, 0, 0])",
        "minSum(nums1 = [4, 3], nums2 = [2, 3])",
        "minSum(nums1 = [0, 5, 0], nums2 = [2, 2, 1, 2])",
        "minSum(nums1 = [2, 1, 0, 5, 1], nums2 = [4, 2, 0, 5, 1])",
        "minSum(nums1 = [3, 5, 0, 8, 9], nums2 = [8, 1, 2, 0, 0])",
        "minSum(nums1 = [2, 0, 6, 1, 0, 3], nums2 = [0, 5, 0, 0, 0, 6])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [1, 0], [0, 1], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6]], k = 3)",
        "countPairs(coordinates = [[0, 0], [3, 3]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 1], [1, 3], [3, 1], [2, 3], [3, 2]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,1],[1,0],[0,1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 0], [1, 0]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 0], [2, 2], [3, 2]], k = 3)",
        "countPairs(coordinates = [(0, 0), (1, 1), (2, 0), (2, 1), (2, 2), (3, 1)], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 2], [5, 2], [1, 3], [3, 3], [5, 3], [1, 4], [3, 4], [5, 4], [5, 5]], k = 2)",
        "countPairs(coordinates = [(2, 2), (3, 2), (1, 1), (1, 2), (2, 1), (3, 1), (2, 2), (2, 3), (2, 2), (2, 2)], k = 2)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yz\", \"xz\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words=[\"cat\", \"dog\", \"tac\"])",
        "maximumNumberOfStringPairs(words = [\"p\", \"na\", \"na\", \"p\"])",
        "maximumNumberOfStringPairs(words = [\"anna\", \"lana\", \"blana\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2])",
        "maxStrength(nums = [-4, -1, 0, 3, 10])",
        "maxStrength(nums = [10, 5, 2, 100, 4])",
        "maxStrength(nums = [5, 2, -10, 4, 1])",
        "maxStrength(nums = [1,-1,2,10,-10,-1,4])",
        "maxStrength(nums = [2,1,-2,3,1,1])",
        "maxStrength(nums = [5, -20, -20, 4, 1, -5])",
        "maxStrength(nums = [1, 5, 3, -3, 2, -2, 7])",
        "maxStrength(nums = [1, 1, -3, -2, -3, 2, -4])",
        "maxStrength(nums = [3,-2,-3,2,2,5,-4,-3,2,5,-2,4,3,5,5,-2,5])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [2, 2, 2, 2])",
        "minimumCoins(prices = [1, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 3])",
        "minimumCoins(prices = [2, 3, 1])",
        "minimumCoins(prices = [1, 3, 2, 5, 4])",
        "minimumCoins(prices = [1, 3, 5, 4])",
        "minimumCoins(prices = [1, 5, 2, 2])",
        "minimumCoins(prices = [1, 3, 4, 5, 2])",
        "minimumCoins(prices = [1, 2, 5, 2, 1, 2, 3, 5])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [0, 0, 0, 0])",
        "minLengthAfterRemovals(nums = [1,1,2,2,4,4,4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6])",
        "minLengthAfterRemovals(nums = [3,2,3,2,4,4,1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 4, 4, 3, 1, 1, 3])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [2], money = 2)",
        "buyChoco(prices = [2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [4, 6], money = 10)",
        "buyChoco(prices = [1, 4, 2, 3], money = 5)",
        "buyChoco(prices = [10, 100], money = 50)",
        "buyChoco(prices = [1, 5, 2, 9], money = 12)",
        "buyChoco(prices=[1,2,4,3], money=6)",
        "buyChoco(prices=[4, 1], money=4)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"5\", \"6\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"4\", \"prev\", \"3\", \"prev\", \"prev\", \"2\", \"1\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [0, 0, 0])",
        "sumCounts(nums = [1, 1, 1, 2, 2])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [8])",
        "relocateMarbles(nums = [3, 5, 6, 8], moveFrom = [3, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 3], moveTo = [3, 4])",
        "relocateMarbles(nums = [3, 4, 6, 8, 9], moveFrom = [4, 6], moveTo = [5, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 3, 4], moveTo = [1, 2, 3])",
        "relocateMarbles(nums = [5, 5, 6, 8, 9, 9, 9], moveFrom = [5, 9], moveTo = [9, 5])",
        "relocateMarbles(nums = [4, 6, 8, 9], moveFrom = [4, 6, 8], moveTo = [5, 8, 9])",
        "relocateMarbles(nums = [2, 4, 6, 8], moveFrom = [2, 4], moveTo = [7, 5])",
        "relocateMarbles(nums = [4, 5, 8, 9], moveFrom = [1, 5], moveTo = [5, 9])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcz\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"c\")",
        "canMakeSubsequence(str1 = \"acb\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xzabc\")",
        "canMakeSubsequence(str1 = \"apple\", str2 = \"edcba\")",
        "canMakeSubsequence(str1 = \"efgz\", str2 = \"aegzk\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"alpha\", \"beta\", \"gamma\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pineapple\", \"pear\"], x = \"apple\")",
        "findWordsContaining(words = [\"python\", \"ruby\", \"java\", \"javascript\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"banana\", \"window\"], x = \"a\")",
        "findWordsContaining(words = [\"yahoo\", \"microsoft\", \"google\"], x = \"o\")",
        "findWordsContaining(words = [\"a\", \"be\", \"see\", \"dear\", \"a\"], x = \"a\")",
        "findWordsContaining(words = [\"car\", \"cool\", \"coffee\"], x = \"co\")",
        "findWordsContaining(words = [\"un\", \"reliable\", \"computing\"], x = \"c\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 0]])",
        "matrixSum(nums = [[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "matrixSum(nums = [[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "matrixSum(nums = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "matrixSum(nums = [[1,2,3],[4,0,5],[6,7,8]])",
        "matrixSum(nums = [[0, 0, 1], [0, 2, 0], [0, 0, 0]])"
    ],
    "sample_316": [
        "buyChoco(a = [10, 20], money = 30)",
        "buyChoco(a = [4, 5], money = 9)",
        "buyChoco(a = [10, 15], money = 25)",
        "buyChoco(a = [1, 2, 3, 4], money = 3)",
        "buyChoco(a = [1, 10], money = 12)",
        "buyChoco(a = [2, 6], money = 5)",
        "buyChoco(a = [5, 3, 6], money = 10)",
        "buyChoco(a = [9, 1, 10], money = 10)",
        "buyChoco(a = [1, 1, 2, 3, 4, 5], money = 6)",
        "buyChoco(a = [5, 2, 8], money = 13)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 3, 2, 2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,2,4])",
        "minGroupsForValidAssignment(nums = [5, 5, 6, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [2, 3, 3, 5, 5, 6, 6, 7, 7])",
        "minGroupsForValidAssignment(nums = [99, 45, 78])",
        "minGroupsForValidAssignment(nums = [42, 35, 20, 42, 36, 36, 35, 41, 36, 42])",
        "minGroupsForValidAssignment(nums = [11, 7, 6, 7, 9, 10, 4, 11, 3, 11, 12, 5, 1, 11])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 4, 1])",
        "minimumRightShifts(nums = [6, 3, 4])",
        "minimumRightShifts(nums = [10, 20, 30, 40, 50])",
        "minimumRightShifts(nums = [3, 3, 2, 0, 0])",
        "minimumRightShifts(nums = [100, 1, 10, 100, 100, 100])",
        "minimumRightShifts(nums = [1, 1, 4, 8, 16, 32])",
        "minimumRightShifts(nums = [10, 3, 15, 20, 5])",
        "minimumRightShifts(nums = [10, 15, 18, 20, 5])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [5, 4, 3, 2])",
        "maxStrength(nums = [4, 5, 6])",
        "maxStrength(nums = [4, 6, 2, 8])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 5, 4])",
        "maxStrength(nums = [4, 2, 5, 3, 7])",
        "maxStrength(nums = [2, 5, 7, 10])"
    ],
    "sample_464": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n=2, limit=1)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [2, 1, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 1, 1, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"pie\"], x = \"a\")",
        "findWordsContaining(words = [\"aaa\", \"bbb\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"abd\", \"xyz\"], x = \"ab\")",
        "findWordsContaining(words = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\"], x = \"i\")",
        "findWordsContaining(words = [\"banana\", \"strawberry\", \"mango\"], x = \"na\")",
        "findWordsContaining(words = [\"be\", \"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"orange\", \"pineapple\", \"watermelon\"], x = \"a\")",
        "findWordsContaining(words = [\"bicycle\", \"animals\", \"science\"], x = \"e\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1,0,0], [0,1,0], [0,0,1]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0,1,0], [1,1,1], [0,1,0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 0])",
        "maxSubarrays(nums = [0, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 1])",
        "maxSubarrays(nums = [1, -1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [3, -2, -1, 0, 1])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"thisisbeautiful\", k = 4)",
        "beautifulSubstrings(s = \"asdfasdf\", k = 4)",
        "beautifulSubstrings(s = \"abacaxe\", k = 2)",
        "beautifulSubstrings(s = \"abaceadaa\", k = 5)",
        "beautifulSubstrings(s = \"hheeelloouu\", k = 2)",
        "beautifulSubstrings(s = \"cbaeiaob\", k = 5)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [0, 1, 2])",
        "minimumSeconds(nums = [1, 2, 3, 1, 1])",
        "minimumSeconds(nums = [3, 2, 4])",
        "minimumSeconds(nums = [1,1,1,2,3,4,5])",
        "minimumSeconds(nums = [0, 1, 0, 1, 1, 0, 0, 0, 1, 0])",
        "minimumSeconds(nums = [2, 1, 3, 4, 4, 5, 2])",
        "minimumSeconds(nums = [1, 4, 4, 2, 1, 2, 2])",
        "minimumSeconds(nums = [2,4,4,3,4,2,1,1,1])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 111)",
        "isFascinating(n = 7)",
        "isFascinating(n = 999)",
        "isFascinating(n = 1010)",
        "isFascinating(n = 973)",
        "isFascinating(n = 424242)",
        "isFascinating(n = 4528)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1], target = 0)",
        "lengthOfLongestSubsequence(nums = [1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 11)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4], target = -1)",
        "lengthOfLongestSubsequence(nums = [0, 1, 2, 3, 4], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 5, 6, 7], target = 8)",
        "lengthOfLongestSubsequence(nums = [3,5,1,4,2], target = 10)",
        "lengthOfLongestSubsequence(nums = [5, 1, 5, 2, 1, 2], target = 4)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1], [2]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1, 2], [3]])",
        "matrixSum(nums = [[2], [1]])",
        "matrixSum(nums = [[2, 1], [3, 0]])",
        "matrixSum(nums = [ [1], [2], [3]])",
        "matrixSum(nums = [[1, 1, 2], [1, 2, 2], [1, 2, 3]])",
        "matrixSum(nums = [[0, 3, 7], [0, 4, 8], [3, 7, 10]])"
    ],
    "sample_326": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 15)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 123456)",
        "isFascinating(n = 145)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 27)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1,1,1], [0,1,1], [1,1,1]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 1], [0, 1, 1, 0], [0, 1, 1, 1], [1, 0, 0, 0]])",
        "findChampion(grid = [[0,1,0,0,0],[0,0,1,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,0,1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [7, 6, 5, 4, 3, 2, 1])",
        "minimumSum(nums = [4, 5, 6, 1, 2, 3])",
        "minimumSum(nums = [5, 3, 1, 4])",
        "minimumSum(nums = [1, 10, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [11,9,2,8,4])",
        "minimumSum(nums = [2, 4, 3, 5, 6, 1])",
        "minimumSum(nums = [3, 1, 4, 7, 2])",
        "minimumSum(nums = [8, 7, 6, 5, 4, 3])",
        "minimumSum(nums = [5, 5, 5, 1, 1, 1])",
        "minimumSum(nums = [4, 1, 7, 3, 9, 2])"
    ],
    "sample_450": [
        "minChanges(s = \"aababa\")",
        "minChanges(s = \"abbbba\")",
        "minChanges(s = \"aaaabbbbb\")",
        "minChanges(s = \"abbabbba\")",
        "minChanges(s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
        "minChanges(s = \"ABABABA\")",
        "minChanges(s = \"aaabbbaaabbb\")",
        "minChanges(s=\"abcbcba\")",
        "minChanges(s = \"111001\")",
        "minChanges(s = \"zzqvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv"
    ],
    "sample_248": [
        "minOperations(s1 = \"100\", s2 = \"011\", x = 1)",
        "minOperations(s1 = \"1001\", s2 = \"1010\", x = 1)",
        "minOperations(s1 = \"000\", s2 = \"001\", x = 1)",
        "minOperations(s1 = \"000\", s2 = \"110\", x = 1)",
        "minOperations(s1 = \"0011\", s2 = \"0110\", x = 1)",
        "minOperations(s1 = \"010\", s2 = \"000\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"0100\", x = 2)",
        "minOperations(s1 = \"11101\", s2 = \"11101\", x = 1)",
        "minOperations(s1 = \"101111\", s2 = \"010101\", x = 2)",
        "minOperations(s1 = \"01011001\", s2 = \"11101100\", x = 1)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 4, y = 4, z = 0)",
        "longestString(x = 1, y = 2, z = 5)",
        "longestString(x = 3, y = 3, z = 0)",
        "longestString(x = 3, y = 2, z = 4)",
        "longestString(x = 10, y = 10, z = 1)",
        "longestString(x = 2, y = 1, z = 0)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 5, y = 3, z = 3)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 0, 1, 3])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 1, 2, 0, 1])",
        "maxSubarrays(nums = [2, 1, 3, 4, 3])",
        "maxSubarrays(nums = [2, 3, 4, 2, 5])",
        "maxSubarrays(nums = [1,2,1,2,1,2,1])",
        "maxSubarrays(nums = [0, 1, 0, 2, 1, 0, 1, 1])"
    ],
    "sample_306": [
        "countSeniors(details = [\"Alice, 20\", \"Bob, 30\", \"Charlie, 40\"])",
        "countSeniors(details = [\"Mark Zuckerberg, 34\", \"Bill Gates, 60\"])",
        "countSeniors(details = [\"Alex, 19\", \"Bob, 22\", \"Carl, 60\", \"Dan, 70\"])",
        "countSeniors(details = [\"Gabriel, 22\", \"Rick, 70\", \"Gloria, 65\"])",
        "countSeniors(details = [\"Smith, John, 28\", \"Miller, Alice, 43\", \"Davis, Robert, 71\"])",
        "countSeniors(details = [\"Alice: 12:83\", \"Bob: 13:92\", \"Carol: 14:75\"])",
        "countSeniors(details = [\"Victor Mills\", \"Jason Avery\", \"Nikita Lawson\"])",
        "countSeniors(details = [\"Teacher,Mary,25\", \"Driver,John,75\", \"Driver,Rosie,56\", \"Teacher,Bob,62\"])",
        "countSeniors(details = [\"Joao Ribeiro, 21\", \"Teresa Braga, 65\", \"Helena, 32\"])",
        "countSeniors(details = [\"2019-01-01:Jake:25\", \"2019-03-03:John:64\", \"2021-03-03:Jack:19\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 0, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 0])",
        "maxSubarrays(nums = [1, 2, 0, 3, 4])",
        "maxSubarrays(nums = [1, 1, 0, 0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 0])",
        "maxSubarrays(nums = [2, 4, 6, 7, 1, 3, 8, 9])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 7])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [5, 8], moveTo = [8, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [4, 5, 6])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8], moveFrom = [4, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 5, 8, 9], moveFrom = [5, 8], moveTo = [9, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [9, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 4, 5], moveTo = [10, 10, 10])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"b\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"abc\", s3 = \"abx\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"dab\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"xy\", s3 = \"yy\")",
        "findMinimumOperations(s1 = \"baba\", s2 = \"aba\", s3 = \"caa\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"123\", s3 = \"xya\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [2,2,3,3,3,4,5])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3,1,2,3])",
        "minLengthAfterRemovals(nums = [3, 2, 1, 1, 3])",
        "minLengthAfterRemovals(nums = [8,1,4,2,1])",
        "minLengthAfterRemovals(nums=[2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1,2,2,3,4,4])",
        "minLengthAfterRemovals(nums = [2,3,5,3,3])",
        "minLengthAfterRemovals(nums = [2, 4, 8, 4, 10, 3, 5])",
        "minLengthAfterRemovals(nums = [6, 6, 1, 8, 2, 1, 9, 3, 4, 5])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 2, offers = [[1, 2, 10], [2, 2, 10]])",
        "maximizeTheProfit(n = 5, offers = [(2, 4, 1), (3, 5, 2)])",
        "maximizeTheProfit(n = 6, offers = [[2, 4, 2], [3, 6, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 2], [4, 6, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 3], [2, 3, 2], [3, 3, 3], [4, 3, 1]])",
        "maximizeTheProfit(n = 3, offers = [[0, 3, 4], [1, 3, 1], [1, 2, 6]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 10], [1, 2, 9], [2, 3, 8], [1, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 8], [2, 3, 6], [3, 4, 5], [2, 3, 7]])",
        "maximizeTheProfit(n=10, offers=[[2, 3, 6], [1, 2, 2], [7, 10, 7]])",
        "maximizeTheProfit(n=10, offers=[[3, 8, 1], [1, 6, 3], [8, 9, 2], [2, 4, 5], [6, 8, 4]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1000000000,1000000000,1000000000,1000000000], m = 3)",
        "canSplitArray(nums = [2,1,1,2], m = 3)",
        "canSplitArray(nums = [2,3,2,5,1], m = 6)",
        "canSplitArray(nums = [1,2,3,3,4,4,4,10], m = 10)",
        "canSplitArray(nums = [1, 4, 2, 3, 5, 1], m = 5)",
        "canSplitArray(nums = [5,5,10,10,10,5,5,5], m = 25)",
        "canSplitArray(nums = [1000,2000,5000,8000,5000], m = 5)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 1, 1, 1], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1)",
        "checkArray(nums = [2, 1, 3, 1, 1, 3], k = 2)",
        "checkArray(nums = [0, 1, 1, 1, 1, 0, 0, 0, 0], k = 3)",
        "checkArray(nums = [0, 4, 4, 1, 4], k = 1)",
        "checkArray(nums = [1, -1, 1, -1, -1, 1, 1, 1], k = 4)",
        "checkArray(nums = [2, 1, 4, 3, 2, 4, 1, 5, 3, 2, 5, 1, 2, 4, 5], k = 4)",
        "checkArray(nums = [1, 3, 4, 2, 2, 1, 1, 3, 1, 1, 4, 1, 1, 3, 1, 3, 4, 2, 1, 1, 1, 3, 3, 1, 1, 4, 1, 3, 3, 4, 3, 1, 1, 2, 1, 1, 4, 4, 1, 3, 1, 2, 2, 2, 1, 1, 1, 2, 1, 3, 1, 3, 1, 4, 1, 3, 1, 2, 4, 1, 1, 3, 1, 4, 2, 4, 4, 1, 3, 2, 1, 4, 4, 1, 2, 1, 2, 4, 1, 2, 2, 2, 3, 4, 3, 1, 1, 4, 4, 2, 2, 2, 2, 3, 3, 3, 1, 1, 3, 2, 3, 1, 1, 4, 2, 1, 2, 2, 1, 2, 4, 4, 4, 1, 1, 1, 4, 4, 2, 4, 2, 4, 2, 1, 1, 4, 2, 2, 1, 3, 1, 1, 4, 1, 1, 4, 1, 2, 2, 1, 4, 1, 1, 3, 3, 4, 1, 2, 3, 4, 4, 2, 1, 2, 3, 1, 3, 1, 2, 1, 4, 4, 1, 1, 1, 4, 1, 2, 1, 1, 3, 1, 4, 1, 1, 2, 3, 3, 2, 3, 1, 4, 3, 1, 1, 3, 1, 2,"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 4, 6], k = 4)",
        "maximumBeauty(nums = [1, 2, 16, 17, 19], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,12], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 6, 4, 7], k = 5)",
        "maximumBeauty(nums = [1, 2, 1, 2, 5, 3], k = 2)",
        "maximumBeauty(nums = [2,5,3,1,4,9], k = 1)",
        "maximumBeauty(nums = [4, 6, 1, 3, 8, 11], k = 3)",
        "maximumBeauty(nums = [4, 3, 5, 1, 6, 2, 7, 8], k = 3)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"and\", \"or\", \"not\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"dogs\", \"cat\"], separator = \"og\")",
        "splitWordsBySeparator(words = [\"banana\", \"cake\"], separator = \"ca\")",
        "splitWordsBySeparator(words = [\"chicken\", \"dinner\"], separator = \"!\")",
        "splitWordsBySeparator(words = [\"Hello\", \"World\", \"of\", \"Coding\", \"Ninjas\", \"\"], separator = \" \")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 3])",
        "countWays(nums = [1, 3, 4])",
        "countWays(nums = [3, 3, 4, 5])",
        "countWays(nums = [1, 3, 1, 4, 2])",
        "countWays(nums = [1,2,3,4,5,6,8])",
        "countWays(nums = [2, 4, 6, 7, 9, 10])",
        "countWays(nums = [4, 10, 16, 24])",
        "countWays(nums = [1,2,3,3,4,5,5,5,5,6,6,6,6,6,6,7])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,1,2])",
        "minimumIndex(nums = [0,0,1,1,1])",
        "minimumIndex(nums = [2,3,1,2])",
        "minimumIndex(nums = [1,2,2,3,2,1])",
        "minimumIndex(nums = [3, 1, 3, 2, 2])",
        "minimumIndex(nums = [3,4,2,1,3])",
        "minimumIndex(nums = [2,1,2,2,2,2,1,1,1,1,1,1,1])",
        "minimumIndex(nums = [5, 4, 3, 4, 3, 1, 2])",
        "minimumIndex(nums = [1,3,4,4,5,2,1,3])",
        "minimumIndex(nums = [3,1,2,3,4,2,2,2,1,4])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[1,5],[2,3],[7,9]])",
        "numberOfPoints(nums = [[1, 4], [3, 5], [7, 9]])",
        "numberOfPoints(nums = [[1,3], [2,4], [2,4]])",
        "numberOfPoints(nums = [[1,3],[4,6],[5,7]])",
        "numberOfPoints(nums = [[3, 5], [7, 9], [10, 12]])",
        "numberOfPoints(nums = [[1, 2], [1, 4], [5, 5], [0, 0]])",
        "numberOfPoints(nums = [[2,6], [7,9], [2,10]])",
        "numberOfPoints(nums = [[0, 3], [1, 2], [2, 4], [2, 8], [1, 7], [0, 7], [0, 6]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums = [1,4,2,3])",
        "semiOrderedPermutation(nums = [2,1,5,4,3])",
        "semiOrderedPermutation(nums = [2,1,5,3,4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3,4,2,1])",
        "semiOrderedPermutation(nums = [4,1,2,5,3])",
        "semiOrderedPermutation(nums=[3,1,2,4])",
        "semiOrderedPermutation(nums = [3,1,2,4,6,5])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n=2, target=1)",
        "minimumPossibleSum(n = 10, target = 20)"
    ],
    "sample_118": [
        "minimumIndex(nums = [3, 4, 5, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 1, 1, 1])",
        "minimumIndex(nums = [1, 1, 1, 0, 0])",
        "minimumIndex(nums = [0, 0, 1, 0, 0])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 3])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 3])",
        "minimumIndex(nums = [3, 1, 1, 1, 2, 1, 3])",
        "minimumIndex(nums = [0, 1, 0, 1, 1, 0, 1, 0, 0, 0])",
        "minimumIndex(nums = [3,4,1,1,1,5,1,1,1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 2, 4, 3, 2, 5, 2, 4])"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n=1, k=3)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 1, k = 4)",
        "minimumSum(n = 3, k = 12)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 5], [2, 6], [3, 7]])",
        "numberOfPoints(nums = [[1, 5], [1, 5], [1, 5]])",
        "numberOfPoints(nums = [[1, 5], [2, 5], [3, 5]])",
        "numberOfPoints(nums = [[1,5],[3,4],[2,6]])",
        "numberOfPoints(nums = [[1, 2], [1, 5], [2, 3], [2, 4], [2, 5]])",
        "numberOfPoints(nums = [[1, 5], [1, 5], [2, 4], [2, 5]])",
        "numberOfPoints(nums = [[1, 3], [5, 8], [7, 8]])",
        "numberOfPoints(nums = [[1,4], [2,3], [2,4], [2,5]])",
        "numberOfPoints(nums = [[3,4],[1,3],[2,2],[5,5]])",
        "numberOfPoints(nums = [[-2,2],[-1,4],[-3,0],[-4,-2],[0,3],[4,4],[4,5],[5,5],[6,6],[6,7],[7,8]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 1)",
        "maximumJumps(nums = [3,2,1], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 10, 2, 6], target = 2)",
        "maximumJumps(nums = [1, 4, 3, 2, 0], target = 1)",
        "maximumJumps(nums = [3, 3, 5, 8, 12], target = 2)",
        "maximumJumps(nums = [1, 10, 3, 12], target = 0)",
        "maximumJumps(nums = [3, 5, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [3, 2, 5, 1, 3, 4, 1], target = 2)"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n=3, k=4)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 20)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [2,3,1,2,4,3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [2,3,1,1], m = 2)",
        "canSplitArray(nums = [1,2], m = 7)",
        "canSplitArray(nums=[2,3,1,1], m=2)",
        "canSplitArray(nums=[5,2,3], m=3)",
        "canSplitArray(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9], m = 15)",
        "canSplitArray(nums = [120, 129, 130], m = 200)",
        "canSplitArray(nums = [1, 10, 2, 20, 3, 30, 4, 50], m = 50)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 2, offers = [[1, 2, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2], [2, 3, 3], [1, 3, 1]])",
        "maximizeTheProfit(n = 2, offers = [[2, 1, 10], [1, 0, 10]])",
        "maximizeTheProfit(n = 6, offers = [[1, 4, 1], [3, 6, 2]])",
        "maximizeTheProfit(n = 6, offers = [[1, 4, 6], [3, 4, 2]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 5], [3, 5, 4]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 4], [4, 8, 6]])",
        "maximizeTheProfit(n = 4, offers = [[3, 4, 2], [4, 4, 3], [3, 4, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 3, 4], [1, 3, 5], [2, 2, 4]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,1,1,1,1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 1)",
        "checkArray(nums = [1,1,1,1,1], k = 1)",
        "checkArray(nums = [1, 2, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [2,2,2,2,1], k = 3)",
        "checkArray(nums = [-1, 1, 1, -1], k = 1)",
        "checkArray(nums = [2, 5, 4, 6], k = 3)",
        "checkArray(nums = [1,2,1,-1,4], k = 3)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [2,2,2,1,2,2,1,2,2,2], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,3,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [0,1,0,1,0,1], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 2, 1, 2, 2, 2, 3, 2, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [3,2,1,2,3,3,2,1,2], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,2,1,2,3,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,3,4,5,6,7,8,9], k = 5)",
        "longestEqualSubarray(nums = [1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2], [0, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 0], [2, 0]])",
        "colorTheArray(n=2, queries=[[0,1],[1,0]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 1], [1, 2]])"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kddsbndd')",
        "smallestString(s = 'kddsbndd')",
        "smallestString(s = \"kddebncd\")",
        "smallestString(s = 'kddsncd')",
        "smallestString(s = \"kddsbcne\")",
        "smallestString(s = \"kdecdsbncd\")",
        "smallestString(s = \"kddsdpcd\")",
        "smallestString(s = 'kddekdcd')"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 1, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [0, 1, 0, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 3, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 2, 1, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7], threshold = 10)",
        "longestAlternatingSubarray(nums = [4, 2, 4, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [5, 7, 9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 3, 1, 2, 2, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 5, 7, 4, 4, 1, 6, 6, 7, 9, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 0, 1, 9, 12, 21, 17, 11, 18, 15, 27, 8, 20], threshold = 21)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 1, 1, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 7)",
        "longestAlternatingSubarray(nums = [5, 1, 3, 4, 2], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 0, 1, 1, 1], threshold = 0)",
        "longestAlternatingSubarray(nums = [1,2,3,4,3,2,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 6, 4, 5, 0], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 7, 11], threshold = 11)",
        "longestAlternatingSubarray(nums = [10, 1, 5, 2, 8], threshold = 2)",
        "longestAlternatingSubarray(nums = [4, 3, 5, 6, 2, 1, 5, 7, 6, 4], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 5, 3, 0, 1, 3, 2, 1, 5, 3, 0, 1, 3], threshold = 2)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [2, 2, 2, 2, 2])",
        "distinctDifferenceArray(nums = [2, 2, 2, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4, 4])",
        "distinctDifferenceArray(nums = [2, 1, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [3, 1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [2, 1, 2, 2, 2, 2])",
        "distinctDifferenceArray(nums = [4, 3, 3, 2, 4, 1])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"ACB\")",
        "minLength(s = \"ADBC\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ADCB\")",
        "minLength(s = \"BCDC\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"aabba\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"aabccdde\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [2, 1, 2, 4, 3], m = 5)",
        "canSplitArray(nums = [1, 1, 1, 2], m = 3)",
        "canSplitArray(nums = [1, 1, 1, 2], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 1], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 4)",
        "canSplitArray(nums = [5, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [5, 3, 1, 3, 2], m = 3)",
        "canSplitArray(nums = [10, 2, 3], m = 12)",
        "canSplitArray(nums = [2, 2, 1, 2, 4, 4, 4, 4, 1, 5, 1], m = 15)",
        "canSplitArray(nums = [12, 5, 6, 13, 1, 7, 8, 4, 6, 13], m = 18)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [2, 2, 2, 2])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [2, 2, 1, 1, 0, 0, 0])"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 2, 1], k = 3)",
        "checkArray(nums = [1,2,3,2,1], k = 2)",
        "checkArray(nums = [1, 1, 2, 1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 4], k = 2)",
        "checkArray(nums = [1, 2, 1, 2, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 1, 4], k = 3)",
        "checkArray(nums = [2,1,3,4], k = 0)",
        "checkArray(nums = [1, 2, 3, 1, 2, 3, 3], k = 1)",
        "checkArray(nums = [2, 4, 8, 16, 10, 6], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9,10], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 20, 10], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 8, 13, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 22, 6, 27], target = 24)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 34, 9999], target = 34)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1], k = 0)",
        "sumIndicesWithKSetBits(nums = [1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 1)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [1, 4, 2, 5, 3], k = 3)",
        "maximumBeauty(nums = [2, 1, 3, 2, 2], k = 2)",
        "maximumBeauty(nums = [4, 5, 6, 3, 2], k = 1)",
        "maximumBeauty(nums = [0, 4, 6, 10, 12], k = 2)",
        "maximumBeauty(nums = [1,2,4,10,12], k = 3)",
        "maximumBeauty(nums = [1, 5, 7, 11, 12, 25], k = 7)"
    ],
    "sample_205": [
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"1010\")",
        "minimumOperations(num = \"101010\")",
        "minimumOperations(num = \"002001\")",
        "minimumOperations(num = \"0001222\")",
        "minimumOperations(num = \"32357\")",
        "minimumOperations(num = \"730025\")",
        "minimumOperations(num = \"101010101001010100\")",
        "minimumOperations(num = \"32112112\")",
        "minimumOperations(num = \"9255510559\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"00\")",
        "minimumOperations(s = \"000\")",
        "minimumOperations(s = \"025\")",
        "minimumOperations(s = \"00257500\")",
        "minimumOperations(s = \"000257500\")",
        "minimumOperations(s = \"01002575\")",
        "minimumOperations(s = \"7505\")",
        "minimumOperations(s = \"102500\")",
        "minimumOperations(s = \"00100111\")",
        "minimumOperations(s = \"12501\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7])",
        "semiOrderedPermutation(nums = [4, 2, 1, 5, 3])",
        "semiOrderedPermutation(nums = [3,4,1,5,2])",
        "semiOrderedPermutation(nums = [4,3,1,2,5])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLLRAAA\")",
        "furthestDistanceFromOrigin(moves = \"RLAR\")",
        "furthestDistanceFromOrigin(moves = 'LLRRA')",
        "furthestDistanceFromOrigin(moves = \"LRLRRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"RLARLAR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLARRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRRRRLLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLLRRRRRRRRAAAAAAAAAA\")",
        "furthestDistanceFromOrigin(moves
    ],
    "sample_169": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"Monday\", \"Tuesday\", \"Wednesday\"], s = \"MTW\")",
        "isAcronym(words = [\"Apple\", \"Banana\", \"Cherry\"], s = \"ABC\")",
        "isAcronym(words = [\"new\", \"york\"], s = \"NY\")",
        "isAcronym(words = [\"deep\", \"learning\", \"neural\", \"networks\"], s = \"DLNN\")",
        "isAcronym(words = [\"Paris\", \"Madrid\", \"London\"], s = \"PML\")",
        "isAcronym(words = [\"ruby\", \"python\", \"perls\"], s = \"RPp\")",
        "isAcronym(words = [\"Food\", \"back\", \"room\"], s = \"FBR\")",
        "isAcronym(words = [\"memory\", \"allocator\", \"with\", \"a\", \"garbage\", \"collector\"], s = \"MAWAGGC\")",
        "isAcronym(words = [\"Big\", \"Jon\", \"Oscar\", \"Jack\", \"Alphabet\"], s = \"BJOJA\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 0, 1, 0, 0], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 2, 1, 0], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [0,1,2,3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,3,1,2,1,3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[1,0,2,3], modulo=3, k=1)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 23, 34])",
        "countBeautifulPairs(nums = [12,23,34,45,56])",
        "countBeautifulPairs(nums = [22, 23])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 91])",
        "countBeautifulPairs(nums = [12, 28, 16])",
        "countBeautifulPairs(nums = [112, 113])",
        "countBeautifulPairs(nums = [\"220\", \"281\", \"45\"])",
        "countBeautifulPairs(nums = [12, 3, 5, 89])",
        "countBeautifulPairs(nums = [220, 284, 28, 320])",
        "countBeautifulPairs(nums = [34, 67, 81, 93])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9], target = 2)",
        "maximumJumps(nums = [3,2,1], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5,10], target = 3)",
        "maximumJumps(nums = [1, 0, 0, 2], target = 1)",
        "maximumJumps(nums = [5, 2, 1, 4], target = 2)",
        "maximumJumps(nums = [1,2,3,3,5], target = 4)",
        "maximumJumps(nums = [2,1,1,4,1,4], target = 2)",
        "maximumJumps(nums = [5, 6, 1, 11, 2], target = 4)",
        "maximumJumps(nums = [6,5,4,2,1], target = 10)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [22, 40])",
        "countBeautifulPairs(nums = [12, 28, 36, 410])",
        "countBeautifulPairs(nums = [12, 28, 6, 110])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 910])",
        "countBeautifulPairs(nums = [10, 22, 23])",
        "countBeautifulPairs(nums = [22, 40, 33])",
        "countBeautifulPairs(nums = [12, 20, 124])",
        "countBeautifulPairs(nums = [12, 28, 6, 112])",
        "countBeautifulPairs(nums = [1234, 2468, 36912])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"CDAB\")",
        "minLength(s = \"CDA\")",
        "minLength(s = \"ABABC\")",
        "minLength(s = \"AABBACD\")",
        "minLength(s = \"AABAB\")",
        "minLength(s = \"ABBCAD\")"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"isn't\")",
        "finalString(s = 'isnag')",
        "finalString(s = \"slight\")",
        "finalString(s = \"spiting\")",
        "finalString(s = 'artinig')",
        "finalString(s = 'Thisisnotcorrect')"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 1, 2, 2])",
        "doesValidArrayExist(derived = [0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,0,1])",
        "doesValidArrayExist(derived = [0,1,1,0])",
        "doesValidArrayExist(derived = [2, 2, 2, 2, 2])",
        "doesValidArrayExist(derived = [2, 2, 3, 3])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 0, 1])",
        "findValueOfPartition(nums = [0, 2])",
        "findValueOfPartition(nums = [3,2,1])",
        "findValueOfPartition(nums = [2, 1, 3, 4])",
        "findValueOfPartition(nums = [1, 1, 1, 2, 3])",
        "findValueOfPartition(nums = [3,1,1,2])",
        "findValueOfPartition(nums = [1, 3, 4, 2, 5, 4])",
        "findValueOfPartition(nums = [1, 2, 4, 5, 1])",
        "findValueOfPartition(nums = [0, 2, 3, 4, 5, 6, 8, 10])",
        "findValueOfPartition(nums = [4, 2, 5, 8, 9, 1, 10])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 3]])",
        "colorTheArray(n = 2, queries = [[1, 1], [2, 1], [1, 2]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [2, 1], [1, 2], [2, 2]])",
        "colorTheArray(n=4, queries=[[1,1],[3,1],[2,1],[1,2]])",
        "colorTheArray(n = 5, queries = [[3, 4], [4, 3], [4, 3]])",
        "colorTheArray(n = 2, queries = [[1,2],[0,2],[1,2],[0,1],[0,3]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 4, target = 12)"
    ],
    "sample_171": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n=1, k=3)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1, 1, 1], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours=[], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 5, 2, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 2, 2, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 30, 50, 40, 20], target = 45)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [1, 2], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 8)",
        "canSplitArray(nums = [1, 4, 4], m = 4)",
        "canSplitArray(nums = [1, 3], m = 4)",
        "canSplitArray(nums = [2,3,5,7,20], m = 5)",
        "canSplitArray(nums = [400, 500, 300], m = 100)",
        "canSplitArray(nums = [1, 4, 3, 2, 2, 1, 3, 2, 4, 1], m = 11)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [4, 5, 0, -2, -3, 1], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [2, 2, 2], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [3, 2, 2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 4, 6, 5], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [9,2,8,4], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [3, 4, 5, 7, 6], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 3, 4, 2, 1, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 5, 3, 6], m = 7, k = 1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [3,2,6,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,1], t = 5)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 1], t = 2)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 2, 2, 2, 2], t = 2)",
        "longestAlternatingSubarray(nums = [2,4,5,6,7,8], t = 8)",
        "longestAlternatingSubarray(nums = [0,3,1,2,4], t = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,0,0], t = 6)",
        "longestAlternatingSubarray(nums = [1,2,3,0,1,1,0,1,1], t = 2)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 6, 0, 9], t = 7)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0,1,0,0,1,0])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '512300010')",
        "removeTrailingZeros(num = '51230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 1)",
        "makeTheIntegerZero(a = 12, b = 3)",
        "makeTheIntegerZero(a = 5, b = 3)",
        "makeTheIntegerZero(a = 4, b = 2)",
        "makeTheIntegerZero(a = 100, b = 10)",
        "makeTheIntegerZero(a = 20, b = 4)",
        "makeTheIntegerZero(a = 14, b = 3)",
        "makeTheIntegerZero(a = 1000, b = 100)",
        "makeTheIntegerZero(a=7, b=3)",
        "makeTheIntegerZero(a = 1000, b = 500)"
    ],
    "sample_157": [
        "canSplitArray(nums = [2, 2, 1], m = 2)",
        "canSplitArray(nums = [2, 3, 5, 7], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 15)",
        "canSplitArray(nums = [1000000000, 1000000000, 1000000000], m = 2000000000)",
        "canSplitArray(nums = [2, 2, 3, 3], m = 3)",
        "canSplitArray(nums = [3, 2, 1, 1], m = 4)",
        "canSplitArray(nums = [1, 3, 3], m = 3)",
        "canSplitArray(nums = [2, 1, 3, 2, 1], m = 2)",
        "canSplitArray(nums = [1, 1, 2, 2, 1], m = 5)",
        "canSplitArray(nums = [2, 3, 5, 7, 2, 1, 1], m = 3)"
    ],
    "sample_161": [
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [-1, 2, 3])",
        "maxSum(nums = [11, 12])",
        "maxSum(nums = [2, 5, 2])",
        "maxSum(nums = [10, 20, 11, 21])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n=2, target=4)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n=3, target=10)",
        "minimumPossibleSum(n=0, target=2)",
        "minimumPossibleSum(n = 1, target = 12)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [1,2,4])",
        "findValueOfPartition(nums = [1, 2, 4])",
        "findValueOfPartition(nums = [1,3,4,5,6,7,8,10])",
        "findValueOfPartition(nums = [3,4,1,2])",
        "findValueOfPartition(nums = [2,3,3,4,5,6,7])",
        "findValueOfPartition(nums = [5,4,3,1,2])",
        "findValueOfPartition(nums = [2,3,4,5,6,7,8,9,11])",
        "findValueOfPartition(nums = [4, 7, 9, 10, 12])",
        "findValueOfPartition(nums = [1,2,2,3,3,3,4,5])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,5],[2,3]])",
        "numberOfPoints(nums = [[1,3],[1,5],[6,10]])",
        "numberOfPoints(nums = [[1,2],[2,4],[4,7]])",
        "numberOfPoints(nums = [[0,2],[2,4],[4,6]])",
        "numberOfPoints(nums = [[1, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 3], [3, 4], [4, 4]])",
        "numberOfPoints(nums = [[1, 2], [1, 5], [2, 3], [4, 7]])",
        "numberOfPoints(nums = [[3, 6], [1, 10], [10, 11]])",
        "numberOfPoints(nums = [[0,10],[10,12],[20,30]])",
        "numberOfPoints(nums = [[0, 100], [10, 20], [20, 30], [40, 60], [50, 60], [80, 100]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,6]])",
        "numberOfPoints(nums = [[1, 3], [1, 5], [3, 6]])",
        "numberOfPoints(nums = [[3, 6], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 4], [4, 4]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [1, 3], [0, 2]])",
        "numberOfPoints(nums = [[1, 5], [6, 9], [4, 11]])",
        "numberOfPoints(nums = [[2,5], [1,3], [6,8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [2, 5], [3, 5]])",
        "numberOfPoints(nums = [[1,3], [0,1], [4,7]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one two three', 'four five six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '|')",
        "splitWordsBySeparator(words=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words=['one', 'two', 'three', 'four', 'five', 'six'], separator=',')",
        "splitWordsBySeparator(words = ['one-two', 'three', 'four-five-six'], separator = '-')",
        "splitWordsBySeparator(words=[\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], separator=\" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ' )",
        "splitWordsBySeparator(words=['one-two-three', 'four-five-six'], separator='-')"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 11)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1], target = 11)",
        "minOperations(nums = [1, 1], target = 10)",
        "minOperations(nums = [1,2,3,4,5], target = 19)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 28)",
        "minOperations(nums = [1, 1, 3, 4, 7], target = 1)",
        "minOperations(nums = [1, 2, 4, 8, 16], target = 8)",
        "minOperations(nums = [5, 4, 3, 2, 1], target = 5)",
        "minOperations(nums = [1, 1, 4, 8, 9, 5], target = 100)",
        "minOperations(nums = [10, 5, 4, 3], target = 18)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 1, 1, 1, 1], k = 1)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [3, 2, 1, 2, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 5, 5], k = 2)",
        "checkArray(nums = [2,1,1,2], k = 3)",
        "checkArray(nums = [2, 1, 1, 4, 3, 5], k = 3)",
        "checkArray(nums = [4, 6, 12, 10, 10], k = 3)",
        "checkArray(nums = [10, 5, 11, 6, 4, 17], k = 3)",
        "checkArray(nums = [2,1,4,3,5,6,4,8,9,6], k = 4)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1])"
    ],
    "sample_159": [
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [0])",
        "maxSum(nums=[])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [5, 5])",
        "maxSum(nums = [123,345,456,567])",
        "maxSum(nums = [1, 3, 4, 1, 5, 6, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1, 2, 3, 1, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 2, 2])",
        "continuousSubarrays(A = [1, 1, 2, 3, 3, 3])",
        "continuousSubarrays(A = [4, 2, 1, 3])",
        "continuousSubarrays(A = [4, 2, 2, 3, 1, 1, 5])",
        "continuousSubarrays(A = [1,2,3,4,1,2,3,2,1,2,3])",
        "continuousSubarrays(A = [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0])",
        "continuousSubarrays(A = [3, 4, 3, 4, 3, 4, 3, 3, 3, 3])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [3, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [2, 1, 3, 3, 2])",
        "distinctDifferenceArray(nums = [2, 1, 0, 1, 3])",
        "distinctDifferenceArray(nums = [0, 1, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 4])",
        "distinctDifferenceArray(nums = [4, 2, 2, 5, 0])",
        "distinctDifferenceArray(nums = [9,1,6,7,4,7])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 2, 1], b = [1, 3, 2, 2, 1])",
        "maxNonDecreasingLength(a = [1, 3, 5, 2, 4], b = [4, 2, 3, 1, 5])",
        "maxNonDecreasingLength(a = [5, 1, 4, 2, 3], b = [4, 1, 2, 5, 3])",
        "maxNonDecreasingLength(a = [3, 1, 5, 4], b = [3, 2, 1, 6])",
        "maxNonDecreasingLength(a = [1,2,5,4], b = [3,2,4,1])",
        "maxNonDecreasingLength(a = [2, 4, 5, 7, 3, 6, 8], b = [1, 2, 3, 4, 5, 6, 7])",
        "maxNonDecreasingLength(a = [3, 2, 6, 5, 4], b = [9, 1, 3, 6, 8])",
        "maxNonDecreasingLength(a = [4, 6, 10, 15, 16, 20], b = [7, 10, 13, 14, 16, 20])",
        "maxNonDecreasingLength(a = [2, 4, 5, 10, 7, 9], b = [1, 2, 3, 4, 6, 7])",
        "maxNonDecreasingLength(a = [1, 3, 7, 4, 10, 1], b = [4, 1, 8, 2, 10, 2])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 9, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)"
    ],
    "sample_160": [
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [1, 1])",
        "maxSum(nums = [9, 9, 9])",
        "maxSum(nums = [0, -1, -2, -3])",
        "maxSum(nums = [2, 3, 9, 0, 4, 6, 5, 8, 1, 7])",
        "maxSum(nums = [11,13,111,3,12])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddebncd')",
        "smallestString(s = \"kddsbndc\")",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = \"kddscndc\")",
        "smallestString(s = 'kkddsbnce')",
        "smallestString(s = \"kkddsbnce\")",
        "smallestString(s = 'kdeeebcd')",
        "smallestString(s = \"kddsbncba\")",
        "smallestString(s = \"kddsbbnd\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 1])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [0,1])",
        "findValueOfPartition(nums = [1, 1, 2, 2])",
        "findValueOfPartition(nums = [1, 3, 4, 8])",
        "findValueOfPartition(nums = [1, 1, 0, 0, 0, 0])",
        "findValueOfPartition(nums=[1, 1, 1, 1, 1, 2, 3])",
        "findValueOfPartition(nums=[1,1,1,0,10])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'abab')",
        "makeSmallestPalindrome(s = 'aba')",
        "makeSmallestPalindrome(s = 'aba')",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = 'abbb')",
        "makeSmallestPalindrome(s = 'baab')",
        "makeSmallestPalindrome(s = 'az')",
        "makeSmallestPalindrome(s = \"bababa\")",
        "makeSmallestPalindrome(s = \"mabac\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 4)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 1)",
        "makeTheIntegerZero(num1 = 100, num2 = 7)",
        "makeTheIntegerZero(num1 = 12, num2 = 11)",
        "makeTheIntegerZero(num1 = 14, num2 = 10)",
        "makeTheIntegerZero(num1 = 51, num2 = 16)",
        "makeTheIntegerZero(num1 = 71, num2 = 21)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums=[[1,4],[2,3],[3,5]])",
        "numberOfPoints(nums = [[2, 3], [1, 3]])",
        "numberOfPoints(nums = [[1, 5], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 5], [6, 6], [7, 8], [8, 9]])",
        "numberOfPoints(nums = [[2,4], [1,2], [0,2], [3,4]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7]])",
        "numberOfPoints(nums = [[0,2],[1,3],[2,4],[3,4],[0,1],[0,3],[0,4]])",
        "numberOfPoints(nums=[\n    [0,3],\n    [1,3],\n    [3,4],\n    [2,4],\n    [2,3]\n])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 6], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 4, k = 3)",
        "countInterestingSubarrays(nums = [2, 4, 3, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 8, 3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 0, 1, 1, 1, 0, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 5, 4, 6, 3], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [3, 4, 5, 7, 10], m = 4, k = 3)",
        "countInterestingSubarrays(nums = [2, 5, 4, 2, 6, 2, 5], m = 5, k = 2)"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"ABA\")",
        "minimumCost(s = \"abbc\")",
        "minimumCost(s = \"abcdb\")",
        "minimumCost(s = \"aabaabaa\")",
        "minimumCost(s = \"dabcb\")",
        "minimumCost(s = \"hx\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 3])",
        "distinctDifferenceArray(nums = [2, 1, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 3, 4, 6, 7, 10])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [100, 200, 300, 400], target = 300)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 11, 13, 12], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 11, 12, 12], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 2, 3, 1, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 23, 23, 17], target = 23)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 14, 21, 16, 17], target = 16)",
        "numberOfEmployeesWhoMetTarget(hours = [60, 70, 65, 80, 65], target = 65)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 12, 12, 10, 15], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 5, 7, 6, 5, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [90, 80, 60, 91, 100], target = 90)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"evne\")",
        "makeSmallestPalindrome(s = \"eve\")",
        "makeSmallestPalindrome(s = \"neevn\")",
        "makeSmallestPalindrome(s = \"nevne\")",
        "makeSmallestPalindrome(s = \"envenn\")",
        "makeSmallestPalindrome(s = \"evonn\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '51230100000000')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [3,1,4,2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [3,5,1,2,5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,3,4,5,6,7,8,9], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,2,2,1,2,2,3,4,"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 10)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 6, additionalTank = 3)",
        "distanceTraveled(mainTank = 20, additionalTank = 2)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1,2,3], x = 2)",
        "minCost(A = [4, 2, 3], x = 2)",
        "minCost(A = [3, 1, 1], x = 3)",
        "minCost(A = [4, 3, 5], x = 2)",
        "minCost(A = [3, 5, 1], x = 3)",
        "minCost(A = [4, 2, 3, 1], x = 2)",
        "minCost(A = [1,2,3,2,1], x = 5)",
        "minCost(A = [1, 5, 3, 1, 2, 2, 2], x = 3)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [3, 1, 2])",
        "maxIncreasingGroups(u = [1, 2, 3, 3, 4])",
        "maxIncreasingGroups(u = [1, 1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [2, 4, 6])",
        "maxIncreasingGroups(u = [1, 3, 7])",
        "maxIncreasingGroups(u = [1, 2, 5, 2])",
        "maxIncreasingGroups(u = [5, 4, 3, 2, 2])",
        "maxIncreasingGroups(u = [0, 1, 1, 2, 2, 2])",
        "maxIncreasingGroups(u = [1, 5, 1, 5, 1, 5, 1, 5])",
        "maxIncreasingGroups(u = [2, 1, 2, 3, 2, 1, 3, 2])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [0, 0, 0, 0, 0, 0], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 0)",
        "checkArray(nums = [1,2,3], k = 1)",
        "checkArray(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 10)",
        "checkArray(nums = [1, 4, 0, 5, 3], k = 2)",
        "checkArray(nums = [1, 3, 5, 1, 7, 9], k = 2)",
        "checkArray(nums = [2, 4, 5, 1, 5, 1], k = 2)",
        "checkArray(nums = [9, -1, 7, 9, 2, 9], k = 2)",
        "checkArray(nums = [2, -3, 2, 1, 2, -5, -1, -4], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ABCDEFCD\")",
        "minLength(s = \"ABCDACDABAB\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 11)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 5)",
        "minOperations(nums = [1, 2, 3, 4], target = 5)",
        "minOperations(nums = [1, 2, 3], target = 6)",
        "minOperations(nums = [1,2,3,4,5], target = 5)",
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [1, 2], target = 6)",
        "minOperations(nums = [2, 1, 5], target = 0)",
        "minOperations(nums=[1,2,3,4,5,6], target = 17)",
        "minOperations(nums = [32, 11, 30], target = 256)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \"\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"a\")",
        "splitWordsBySeparator(words = [], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a\", \"b\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"z\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"k#k\", \"k#k\"], separator = \"#\")"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncde\")",
        "smallestString(s = \"kddsbncde\")",
        "smallestString(s = 'kddsbcnce')",
        "smallestString(s = \"kdebncd\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"R_R_L_L\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LLRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"L_L_R_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_RRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R_L_R_L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LRL__R__\")",
        "furthestDistanceFromOrigin(moves = \"RRL_R_LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRLRLRLRRLRLRLRLR\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 1)",
        "makeTheIntegerZero(num1 = 14, num2 = 5)",
        "makeTheIntegerZero(num1 = 23, num2 = 3)",
        "makeTheIntegerZero(num1 = 1000, num2 = 1)",
        "makeTheIntegerZero(num1 = 28, num2 = 1)",
        "makeTheIntegerZero(num1 = 55, num2 = 7)",
        "makeTheIntegerZero(num1 = 33, num2 = 6)",
        "makeTheIntegerZero(num1 = 50, num2 = 14)"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbndd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddebncd\")",
        "smallestString(s = \"kddsbcne\")",
        "smallestString(s = \"kddsncd\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbcce\")",
        "smallestString(s = \"kddsbcncd\")"
    ],
    "sample_146": [
        "finalString(s = 'ponter')",
        "finalString(s = \"tin\")",
        "finalString(s = \"potpiter\")",
        "finalString(s = \"pointer\")",
        "finalString(s = 'pint')",
        "finalString(s = \"tin\")",
        "finalString(s = 'treponter')",
        "finalString(s = \"ptroin\")",
        "finalString(s = 'iinpoonter')",
        "finalString(s = 'itonter')"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,3,3,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,1,2,3,4,5,6,7], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,2,3,1,2,3,1,2,3], k = 1)",
        "longestEqualSubarray(nums = [2, 2, 2, 3, 2, 1, 2, 2, 3, 3, 3], k = 1)",
        "longestEqualSubarray(nums = [2, 2, 3, 1, 2, 2, 1, 1, 3, 3, 2, 2], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [7,2,5,10,8], m = 18)",
        "canSplitArray(nums = [7,2,5,10,8], m = 18)",
        "canSplitArray(nums = [7,2,5,10,8], m = 18)",
        "canSplitArray(nums = [7,2,5,10,8], m = 18)",
        "canSplitArray(nums = [1,2,3,4], m = 10)",
        "canSplitArray(nums=[1,2,3,4,5], m=3)",
        "canSplitArray(nums = [1, 1, 1, 2, 2], m = 4)",
        "canSplitArray(nums = [2, 1, 4, 2, 5, 1, 2], m = 4)",
        "canSplitArray(nums = [2, 3, 1, 2, 2, 5, 1, 2, 3, 5], m = 2)",
        "canSplitArray(nums = [1, 5, 7, 5, 6, 10, 10], m = 10)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 0, 0, 0])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one,two', 'three,four,five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one-two-three', 'four-five-six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one.two\", \"three.four\", \"five.six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one.two\", \"three,four\", \"five\", \"six\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three;four\", \"five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two\", \"three\", \"four\", \"five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one-two', 'three four', 'five six'], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one:two\", \"three,four\", \"five:six\"], separator = \":\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 6, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours=[0, 0, 0, 0, 0], target=50)",
        "numberOfEmployeesWhoMetTarget(hours = [15,16,17,18], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 10, 20, 30], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 20, 20], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours=[23, 44, 20, 55], target = 30)"
    ],
    "sample_168": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"lazy\", \"dog\"], s = \"QBFJOLD\")",
        "isAcronym(words = ['A', 'B', 'C'], s = 'ABC')",
        "isAcronym(words = [\"ab\", \"cd\"], s = \"abc\")",
        "isAcronym(words = [\"ab\", \"cd\"], s = \"ad\")",
        "isAcronym(words = [\"ant\", \"bear\", \"cat\"], s = \"abc\")",
        "isAcronym(words = ['this', 'is', 'an', 'acronym'], s = 'TIA')",
        "isAcronym(words = [\"Bat\", \"Man\"], s = \"BB\")",
        "isAcronym(words = [\"random\", \"text\"], s = \"rxt\")",
        "isAcronym(words = [\"mysql\", \"database\"], s = \"MADD\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"HW\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwl\")",
        "isAcronym(words = [\"mobile\", \"phone\"], s = \"MP\")",
        "isAcronym(words = [\"mickey\", \"mouse\"], s = \"MMO\")",
        "isAcronym(words = [\"python\", \"coding\", \"challenge\"], s = \"PCT\")",
        "isAcronym(words = [\"Mike\", \"Sue\", \"Joe\"], s = \"MS\")",
        "isAcronym(words = [\"active\", \"cool\"], s = \"AO\")",
        "isAcronym(words = [\"what\", \"a\", \"lucky\", \"day\"], s = \"lucky day\")",
        "isAcronym(words = [\"Today\", \"We\", \"Learn\"], s = \"T?\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abcdba\")",
        "minimumCost(s = \"AAB\")",
        "minimumCost(s = \"bcbd\")",
        "minimumCost(s = \"acx\")",
        "minimumCost(s = \"aaaaaaaaaaaaaaa\")",
        "minimumCost(s = \"cacao\")",
        "minimumCost(s = \"sandwich\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1,0,0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 1, 0, 0])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"aab\")",
        "makeSmallestPalindrome(s = 'abab')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"aabba\")",
        "makeSmallestPalindrome(s = 'abbc')",
        "makeSmallestPalindrome(s = \"abbaa\")",
        "makeSmallestPalindrome(s = 'baba')",
        "makeSmallestPalindrome(s = \"aaa\")",
        "makeSmallestPalindrome(s = \"bca\")",
        "makeSmallestPalindrome(s = 'cbbd')"
    ],
    "sample_50": [
        "smallestString(s = \"abbaa\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"ababac\")",
        "smallestString(s = \"ababa\")",
        "smallestString(s = 'aabbb')",
        "smallestString(s = \"baaaab\")",
        "smallestString(s = 'aabaab')",
        "smallestString(s = \"aabb\")",
        "smallestString(s = \"abbaaaa\")",
        "smallestString(s = \"abbbbbbbb\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 1, 3], k = 1)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"CDABABCD\")",
        "minLength(s = \"ABACDCD\")",
        "minLength(s = \"ABABABCDCDCDCD\")",
        "minLength(s = \"ABABABCDABCD\")",
        "minLength(s = \"ABACDCDAB\")",
        "minLength(s = \"CDABBACD\")",
        "minLength(s = \"AACDBCD\")",
        "minLength(s = \"AACDADBACB\")"
    ],
    "sample_158": [
        "maxSum(nums = [])",
        "maxSum(nums = [100])",
        "maxSum(nums = [1,2,3,4,5,6,7,8])",
        "maxSum(nums = [2,3])",
        "maxSum(nums = [1, 2, 4, 7, 3])",
        "maxSum(nums = [201, 210, 120])",
        "maxSum(nums = [0, 0, 100, 999])",
        "maxSum(nums = [23, 44, 45, 66, 78])",
        "maxSum(nums = [3, 21, 11, 10, 12, 3, 20])",
        "maxSum(nums = [102, 105, 2, 9, 101, 200, 100])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 4, 2, 3])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [3, 2, 4, 1])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [5, 1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5, 6])"
    ],
    "sample_162": [
        "maxSum(nums = [123, 456, 789])",
        "maxSum(nums = [20, 22, 88])",
        "maxSum(nums = [12, 345, 1, 5, 9, 34])",
        "maxSum(nums = [29, 88, 7, 5, 9, 74])",
        "maxSum(nums = [55, 2, 99, 37, 98])",
        "maxSum(nums = [9, 88, 99, 8, 999, 11])",
        "maxSum(nums = [23, 10, 44, 90, 32, 6, 99, 33])",
        "maxSum(nums = [81, 43, 82, 99, 88, 73, 96])",
        "maxSum(nums = [81, 9, 98, 92, 8, 71, 7, 78, 70])",
        "maxSum(nums = [23, 43, 86, 84, 89, 99, 25, 59, 32])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = \"1110\")",
        "maximumOddBinaryNumber(s = \"10100\")",
        "maximumOddBinaryNumber(s = '111110')",
        "maximumOddBinaryNumber(s = '01001101')",
        "maximumOddBinaryNumber(s = '00111111')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 9, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [11, 12, 13, 9], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 15, 10, 17], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [60, 60, 80, 70], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 6, 1, 5, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [26, 14, 30, 14], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [45, 23, 89, 111, 34, 96], target = 34)"
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"apple\", \"pie\"], s = \"pie\")",
        "isAcronym(words = [\"Mission\", \"Impossible\"], s = \"mi\")",
        "isAcronym(words = [\"Montreal\", \"Quebec\", \"Canada\"], s = \"MQC\")",
        "isAcronym(words = [\"xerox\", \"road\", \"show\"], s = \"xrs\")",
        "isAcronym(words = [\"how\", \"now\", \"brown\", \"cow\"], s = \"hobnbrcow\")",
        "isAcronym(words = [\"dinosaur\", \"mammal\", \"duck\"], s = \"dm\")",
        "isAcronym(words = [\"sunny\", \"day\", \"happened\"], s = \"dus\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank=2, additionalTank=2)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups(A = [1, 1, 1, 1])",
        "maxIncreasingGroups(A = [2])",
        "maxIncreasingGroups(A = [1, 1, 2])",
        "maxIncreasingGroups(A = [0, 0, 0])",
        "maxIncreasingGroups(A = [2, 3, 4])",
        "maxIncreasingGroups(A = [2, 1, 3, 3, 4, 3, 3, 4, 5, 5, 5, 6, 6, 7, 7])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 1, 2, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 4, 3])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 3, 4, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [1, 2, 2, 4, 1, 4])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,1])",
        "countCompleteSubarrays(nums = [5,1,5,1,5])",
        "countCompleteSubarrays(nums = [2, 1, 1, 2, 2, 3, 2, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 2, 3, 1])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], k = 1)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"aabbbcccc\")",
        "minimizedStringLength(s = \"dvdf\")",
        "minimizedStringLength(s = \"baba\")",
        "minimizedStringLength(s = \"bbaaacdd\")",
        "minimizedStringLength(s = \"abbcccc\")",
        "minimizedStringLength(s = \"aabbaacc\")",
        "minimizedStringLength(s = \"xyyzyzyx\")",
        "minimizedStringLength(s = \"bbbbccccddddcccc\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,2,2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,1,1,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,1], k = 2)",
        "longestEqualSubarray(nums = [3,4,9,7,3,7,9,3,7,9], k = 2)",
        "longestEqualSubarray(nums = [3,1,2,2,2,2,2,4,2,2,3,2,2,1,3], k = 2)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [1, 3], [2, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [0, 1], [2, 1], [4, 2]])",
        "colorTheArray(n=5, queries=[[1, 1], [0, 1], [2, 1], [3, 1], [4, 1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 1], [2, 2], [1, 1], [2, 3]])",
        "colorTheArray(n=5, queries=[[0,1],[1,1],[2,1],[2,0],[3,1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 1], [1, 0], [0, 1], [2, 1]])",
        "colorTheArray(n=5, queries=[[1, 1], [2, 2], [2, 1], [2, 2], [1, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [3, 2], [0, 1], [0, 1], [2, 2]])",
        "colorTheArray(n=5, queries=[[1, 2], [0, 2], [1, 2], [3, 2], [4, 2]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours=[], target=1)",
        "numberOfEmployeesWhoMetTarget(hours=[], target=100)",
        "numberOfEmployeesWhoMetTarget(hours = [0,0,0,0,0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 20, 20, 20], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours= [10, 20, 30, 40], target= 25)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 4, 3, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours= [11, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 4, 3, 6], target = 5)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [22, 23, 24, 25, 26])",
        "countBeautifulPairs(nums = [22, 23, 24, 25, 26, 27])",
        "countBeautifulPairs(nums = [12, 20, 15, 17, 18])",
        "countBeautifulPairs(nums = [12, 20, 50, 60, 30])",
        "countBeautifulPairs(nums = [12, 4, 5, 9, 15, 3])",
        "countBeautifulPairs(nums = [100, 23, 10, 300])",
        "countBeautifulPairs(nums = [15, 18, 14, 17, 13])",
        "countBeautifulPairs(nums = [426, 213, 100, 123, 156])",
        "countBeautifulPairs(nums = [51, 21, 31, 6, 46, 73])",
        "countBeautifulPairs(nums = [40, 12, 78, 98, 36, 84, 99, 93])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 1, 2])",
        "countWays(nums = [0, 0, 1])",
        "countWays(nums = [1, 2, 4, 3])",
        "countWays(nums = [1, 3, 5, 6, 8])",
        "countWays(nums = [3, 2, 3, 1, 2])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = '0101001')",
        "maximumOddBinaryNumber(s = '10000000')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 3, 4, 5, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 6, 5, 4, 9, 10, 7, 8], k = 3)",
        "maximumBeauty(nums = [1,3,5,8,9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 1, 1, 1], k = 0)",
        "maximumBeauty(nums = [2, 4, 3, 2], k = 1)",
        "maximumBeauty(nums = [1, 4, 5, 6, 7, 8, 10, 11], k = 3)",
        "maximumBeauty(nums = [1, 1, 2, 4, 6, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 4, 2, 1, 2, 3], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 1, 7, 1], k = 2)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [1,1,1,1])",
        "maximumTripletValue(nums = [1, 1, 1, 0])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maximumTripletValue(nums = [2, 1, 2, 1, 2, 3])",
        "maximumTripletValue(nums = [-100000, -2, -20000])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [2, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [5,6,1,1,4], target = 1)",
        "maximumJumps(nums = [4, 2, 1, 3], target = 2)",
        "maximumJumps(nums = [3,2,1,2,3,4,1,1,1,1], target = 2)",
        "maximumJumps(nums = [3, 2, 5, 1, 1, 10], target = 2)",
        "maximumJumps(nums = [3,5,4,1,2,3], target = 1)",
        "maximumJumps(nums = [1, 0, 5, 10], target = 4)",
        "maximumJumps(nums = [3,4,2,3,5,1,1,3], target = 2)",
        "maximumJumps(nums = [3,5,2,1,1,2,4,2,3,1,5,1], target = 3)"
    ],
    "sample_149": [
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = \"singing\")",
        "finalString(s = 'sing')",
        "finalString(s = \"ninja\")",
        "finalString(s = \"ming\")",
        "finalString(s = 'sitin')",
        "finalString(s = 'sirings')",
        "finalString(s = 'snart')",
        "finalString(s = \"nunjing\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [2, 1, 2, 1, 2, 3])",
        "continuousSubarrays(A = [4, 2, 2, 6, 1])",
        "continuousSubarrays(A = [1,2,1,2,3])",
        "continuousSubarrays(A = [1, 1, 2, 2, 3])",
        "continuousSubarrays(A = [1,2,3,3,2,1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 3, 2])",
        "continuousSubarrays(A = [1,2,3,4,5,6,7,8])",
        "continuousSubarrays(A = [1,2,1,2,3,1])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 1, 3])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 2, 5, 3])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [5, 1, 5, 2, 1, 3, 5, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 1, 3, 2, 1, 1, 3, 2, 1, 1])"
    ],
    "sample_228": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [2,3,4])",
        "countWays(nums = [1,1,2])",
        "countWays(nums = [2, 3, 4])",
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [0, 1, 2, 3, 5, 6])",
        "countWays(nums = [3, 0, 1, 2, 2])",
        "countWays(nums = [2,1,1,4,3,1,1,3])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [3, 1, 5, 4, 2], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 2)",
        "maximumBeauty(nums = [1, 2, 2, 3, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 4, 6, 9, 10], k = 1)",
        "maximumBeauty(nums = [4, 6, 7, 8], k = 2)",
        "maximumBeauty(nums = [1, 4, 5, 9, 10, 11], k = 3)",
        "maximumBeauty(nums = [1, 11, 3, 6, 15, 11], k = 5)",
        "maximumBeauty(nums = [3, 1, 6, 2, 7, 1, 5, 2], k = 4)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(a = [1, 1, 1, 2, 3])",
        "distinctDifferenceArray(a = [1, 2, 1, 3, 2, 3])",
        "distinctDifferenceArray(a = [1, 3, 2, 4, 3, 5])",
        "distinctDifferenceArray(a = [1, 3, 2, 4, 5, 1])",
        "distinctDifferenceArray(a = [1, 1, 1, 1, 2, 3, 3, 3, 4, 4])",
        "distinctDifferenceArray(a = [2, 4, 4, 1, 2])",
        "distinctDifferenceArray(a = [3, 1, 1, 2, 3, 5, 3, 1])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [2, 1, 3, 4, 3])",
        "continuousSubarrays(a = [2, 2, 2, 2, 2, 2])",
        "continuousSubarrays(a = [1, 3, 2, 3, 5])",
        "continuousSubarrays(a = [2,3,4,6,8,10])",
        "continuousSubarrays(a = [2,1,5,4,3,2])",
        "continuousSubarrays(a = [1,3,2,1,3,3,2])",
        "continuousSubarrays(a = [2,3,4,4,1,2])",
        "continuousSubarrays(a = [3, 2, 1, 2, 3, 2, 3, 1, 2])",
        "continuousSubarrays(a = [0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "continuousSubarrays(a = [3, 4, 5, 5, 3, 3, 9, 10, 9])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [4, 2, 2, 6, 4])",
        "continuousSubarrays(nums = [4, 2, 2, 6, 4, 5])",
        "continuousSubarrays(nums = [1, 3, 2, 2, 5, 2, 3, 7])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 1, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 7, 8, 9])",
        "continuousSubarrays(nums = [2, 6, 3, 4, 5, 7, 10, 8, 9])",
        "continuousSubarrays(nums = [2, 1, 4, 3, 5, 2, 6, 4, 3, 5])",
        "continuousSubarrays(nums = [2, 4, 6, 7, 9, 10, 11])",
        "continuousSubarrays(nums = [1, 2, 3, 1, 5, 3, 2])",
        "continuousSubarrays(nums = [5,6,3,2,7,8,9,0,1,4])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67])",
        "countBeautifulPairs(nums = [420, 42])",
        "countBeautifulPairs(nums = [10, 20, 100, 200])",
        "countBeautifulPairs(nums = [12, 28, 36, 55, 100])",
        "countBeautifulPairs(nums = [12, 4, 70])",
        "countBeautifulPairs(nums = [22,23,34,36,47,48])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums=[2,1,5,3,4])",
        "semiOrderedPermutation(nums = [3, 5, 1, 4, 2])",
        "semiOrderedPermutation(nums = [5, 1, 4, 2, 3])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [2, 1, 5, 3, 4])",
        "semiOrderedPermutation(nums = [3, 1, 4])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [2,1,1,2,1,1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = \"00\")",
        "maximumOddBinaryNumber(s = '00111')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '110101')",
        "maximumOddBinaryNumber(s = '100110')",
        "maximumOddBinaryNumber(s = \"1000000\")",
        "maximumOddBinaryNumber(s = \"000001111000\")",
        "maximumOddBinaryNumber(s
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1,1,2,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [2, 1, 1, 2])",
        "countCompleteSubarrays(nums = [2, 2, 1, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4, 1, 1])",
        "countCompleteSubarrays(nums = [2, 2, 3, 1, 2, 1])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCDABCDABCDABCD\")",
        "minLength(s = \"ABABABABAB\")",
        "minLength(s = \"ABCDEFCDABCD\")",
        "minLength(s = \"CDCDCDA\")",
        "minLength(s=\"ABABCDABCD\")",
        "minLength(s = \"ACACACAD\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1])",
        "countCompleteSubarrays(nums = [2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,1,2,3,2,1,2,1,3])",
        "countCompleteSubarrays(nums = [2, 1, 2, 1, 3, 1, 4])",
        "countCompleteSubarrays(nums = [5, 2, 4, 6, 1, 1, 3, 5, 1, 5])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 1)",
        "makeTheIntegerZero(num1 = 9, num2 = 1)",
        "makeTheIntegerZero(num1 = 63, num2 = 3)",
        "makeTheIntegerZero(num1 = 19, num2 = 10)",
        "makeTheIntegerZero(num1 = 23, num2 = 15)",
        "makeTheIntegerZero(num1 = 145, num2 = 7)",
        "makeTheIntegerZero(num1 = 134, num2 = 14)"
    ],
    "sample_100": [
        "maximumJumps(nums = [5, 1, 3, 4, 2], target = 2)",
        "maximumJumps(nums = [3, 2, 5, 1, 1, 5, 8], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 10, 12], target = 2)",
        "maximumJumps(nums = [1, 2, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 0, 0, 0, 0], target = 2)",
        "maximumJumps(nums = [1, 1, 3, 5, 4, 1, 1, 3], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 2, 3, 2, 3, 6, 8, 9], target = 3)",
        "maximumJumps(nums = [3, 4, 2, 1, 2, 1, 4, 0], target = 1)",
        "maximumJumps(nums = [1, 1, 3, 1, 4, 1, 5, 9, 2, 6], target = 3)",
        "maximumJumps(nums = [3, 1, 5, 3, 2, 2, 5, 7], target = 2)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 10, 11])",
        "maxIncreasingGroups(x = [1, 2, 2, 4])",
        "maxIncreasingGroups(x = [1, 10, 2])",
        "maxIncreasingGroups(x = [1, 3, 5, 7, 10, 12, 13])",
        "maxIncreasingGroups(x = [2, 3, 4, 1, 2, 4])",
        "maxIncreasingGroups(x = [2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1])",
        "maxIncreasingGroups(x = [1, 4, 6, 7, 8, 2, 10])",
        "maxIncreasingGroups(x = [3, 1, 2, 1, 5, 2, 6])",
        "maxIncreasingGroups(x = [1, 4, 7, 6, 8, 3, 9])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLRR__\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_L_L_L\")",
        "furthestDistanceFromOrigin(moves = \"____LRL\")",
        "furthestDistanceFromOrigin(moves = \"R_RRR_\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"R_LLLLL_RRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"_R__L_L__\")",
        "furthestDistanceFromOrigin(moves = \"RRR_RLLLL_R\")",
        "furthestDistanceFromOrigin(moves = \"R_L_L__L_R__R_L__L_R__L_R__\")",
        "furthestDistanceFromOrigin(moves
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"0000\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s='0000')",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = '1110111')"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,0]])",
        "colorTheArray(n = 1, queries = [[0,0]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n=2, queries = [[1,1]])",
        "colorTheArray(n=3, queries=[(1,1),(2,1),(1,0)])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [2, 3, 5])",
        "findValueOfPartition(nums = [3, 1, 4, 2])",
        "findValueOfPartition(nums = [1, 3, 4, 8])",
        "findValueOfPartition(nums = [0,1,2,3])",
        "findValueOfPartition(nums = [4, 5, 6, 7, 8])",
        "findValueOfPartition(nums = [1, 3, 5, 6, 7, 8])",
        "findValueOfPartition(nums = [1, 1, 2, 2, 3, 3])",
        "findValueOfPartition(nums = [1, 3, 10, 12])",
        "findValueOfPartition(nums = [2, 3, 5, 8, 12])",
        "findValueOfPartition(nums = [3, 2, 5, 4, 1])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [3,1,2,3])",
        "minimumIndex(nums = [3,1,2,3])",
        "minimumIndex(nums = [3,1,2,3])",
        "minimumIndex(nums = [3,1,2,3])",
        "minimumIndex(nums = [3,1,2,1])",
        "minimumIndex(nums = [3,1,2,1])",
        "minimumIndex(nums = [4, 2, 1, 3])",
        "minimumIndex(nums = [4,5,6,7,2])",
        "minimumIndex(nums = [4,5,5,5,3,3,3,2,2,10])",
        "minimumIndex(nums = [0, 1, 2, 3, 4, 1, 2, 4, 1])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 3, 4, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 2, 5], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 3, 3], [2, 5, 4], [3, 7, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,10], [3,5,20], [6,7,30]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 4, 6], [2, 3, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 4], [2, 4, 6], [3, 5, 6]])",
        "maximizeTheProfit(n = 2, offers = [[1, 2, 2], [3, 5, 3], [1, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 6], [3, 4, 1], [4, 5, 2], [2, 4, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 6], [2, 3, 10], [0, 3, 4], [3, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [3, 4, 5], [2, 3, 5], [3, 4, 6], [3, 4, 4]])",
        "maximizeTheProfit(n = 10, offers = [(1, 3, 8), (1, 2, 5), (2, 4, 10), (2, 3, 3)])",
        "maximizeTheProfit(n = 10, offers = [[1,2,3], [4,5,2], [1,5,5], [4,10,2], [6,9,4]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0100\")",
        "minimumOperations(num = \"200\")",
        "minimumOperations(num = \"75025\")",
        "minimumOperations(num = \"0257550\")",
        "minimumOperations(num = \"0257\")",
        "minimumOperations(num = \"01001\")",
        "minimumOperations(num = \"0022\")",
        "minimumOperations(num = \"1010101010\")",
        "minimumOperations(num = \"32767\")",
        "minimumOperations(num = \"52277\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"120\")",
        "minimumOperations(num = \"30\")",
        "minimumOperations(num = \"1011\")",
        "minimumOperations(num = \"7007\")",
        "minimumOperations(num = \"5020\")",
        "minimumOperations(num = \"90001\")",
        "minimumOperations(num = \"99919\")",
        "minimumOperations(num = \"0027762\")",
        "minimumOperations(num = \"001112223456777\")",
        "minimumOperations(num = \"5474545144745244754245454554545454545524545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 3, offers = [[1,2,3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 100], [2, 3, 100], [3, 4, 100]])",
        "maximizeTheProfit(n = 4, offers = [[1,3,2],[2,4,3]])",
        "maximizeTheProfit(n = 3, offers = [[1,1,1],[2,2,2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 1], [2, 1, 2]])",
        "maximizeTheProfit(n=3, offers=[[1, 2, 10], [2, 3, 20]])",
        "maximizeTheProfit(n = 4, offers = [[2,1,1],[4,2,1],[3,3,1]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,50],[2,3,30],[3,4,20]])",
        "maximizeTheProfit(n=3, offers = [[1,3,10],[3,2,15]])",
        "maximizeTheProfit(n=10,offers=[ [3, 4, 1], [4, 5, 2], [8, 9, 2] ])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [0, 0, 1, 1, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 1, 2, 1, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 3, 4, 6, 5, 7, 8], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 3, 0, 2, 3, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [10, 13, 10, 11, 9, 10], threshold = 12)",
        "longestAlternatingSubarray(nums = [0, 10, 5, 4, 3, 1, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [0, 3, 1, 1, 4, 4, 2, 2, 3, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,3,4,5,3,5,5,5,4,4,4,4], threshold = 4)"
    ],
    "sample_203": [
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"07\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"55555\")",
        "minimumOperations(num = \"002500\")",
        "minimumOperations(num = \"5577\")",
        "minimumOperations(num = '19')",
        "minimumOperations(num = \"5370\")",
        "minimumOperations(num = \"0122222222222222\")",
        "minimumOperations(num = \"12223555\")"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [4, 1], [3, 2], [5, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [3, 1], [2, 2], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [2, 3], [1, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [1, 2], [2, 2], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1,1], [1,2], [3,2], [3,3], [1,3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [4, 3], [1, 1], [2, 2], [5, 3]])",
        "colorTheArray(n=5, queries=[[0, 1], [2, 1], [3, 1], [2, 2], [1, 3]])",
        "colorTheArray(n = 5, queries = [[3, 3], [2, 1], [4, 1], [1, 1], [1, 3]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [3, 4, 3, 2, 3, 1, 3])",
        "minimumIndex(nums = [3, 1, 3, 4, 2])",
        "minimumIndex(nums = [3,1,2,3])",
        "minimumIndex(nums = [3, 4, 3, 3])",
        "minimumIndex(nums = [0, 1, 2, 1, 0])",
        "minimumIndex(nums = [3,3,3,2,2,2,1,1,1])",
        "minimumIndex(nums = [1, 3, 5, 7, 9, 1, 3])",
        "minimumIndex(nums = [1,2,3,4,3,3,3,3,3,5,6,7])",
        "minimumIndex(nums = [0, 3, 6, 1, 3, 2, 1])",
        "minimumIndex(nums = [4, 4, 4, 1, 2, 3, 2, 1, 2, 3])"
    ],
    "sample_102": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [1, 5, 3, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [3, 4, 1, 2, 1, 2], target = 2)",
        "maximumJumps(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140",
        "maximumJumps(nums = [0, 0, 1, 1, 0], target = 1)",
        "maximumJumps(nums = [1, 1, 2, 2, 0, 0], target = 2)",
        "maximumJumps(nums = [4, 2, 0, 6], target = 2)",
        "maximumJumps(nums = [2, 2, 3, 2, 0, 3], target = 2)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"512301000000\")",
        "removeTrailingZeros(num = '512301000000000000000')"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 2, b = 2)",
        "distanceTraveled(a=1, b=1)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 2, b = 3)",
        "distanceTraveled(a=1, b=3)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [1,2,3,4,5])",
        "findValueOfPartition(a = [2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 1])",
        "findValueOfPartition(a = [1, 3, 4, 5, 6, 7])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5, 6, 1])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5, 100, 101])",
        "findValueOfPartition(a = [4,5,1,7])",
        "findValueOfPartition(a = [100, 99, 1, 2])",
        "findValueOfPartition(a = [2, 5, 7, 8, 10, 20])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [0, 1, 1, 1, 2, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [9, 9, 9, 7, 7, 7, 6, 6, 6, 5, 5, 5])",
        "distinctDifferenceArray(nums = [2, 3, 3, 3, 6, 6, 6])",
        "distinctDifferenceArray(nums = [4, 4, 9, 9, 1])",
        "distinctDifferenceArray(nums = [1, 3, 1, 4, 3, 2, 1, 5])",
        "distinctDifferenceArray(nums = [-3, -1, 1, -3, 3, -1, 1, 3])"
    ],
    "sample_120": [
        "minimumIndex(nums = [3, 4, 5, 1, 2, 0])",
        "minimumIndex(nums = [3, 1, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 1])",
        "minimumIndex(nums = [0,1,0,1,1])",
        "minimumIndex(nums = [3, 1, 2, 3, 3])",
        "minimumIndex(nums = [3, 1, 1, 3, 2, 2])",
        "minimumIndex(nums = [4, 5, 1, 10, 9, 15])",
        "minimumIndex(nums = [2,3,4,1,2,3,4,3])",
        "minimumIndex(nums = [4, 5, 0, 2, 5, 1, 4, 7])",
        "minimumIndex(nums = [2, 7, 3, 4, 8, 1, 9, 0, 6, 5])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")",
        "furthestDistanceFromOrigin(moves=\"RRRL\")",
        "furthestDistanceFromOrigin(moves=\"RLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRRLL\")",
        "furthestDistanceFromOrigin(moves=\"RLLLLLLLLLLLLLRLRRLRRLRRLRRLRRLRLLLRRLRRLRLRRRLRLRLRRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRL"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"aab\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abcdabc\")",
        "minimizedStringLength(s = \"aabbbccc\")",
        "minimizedStringLength(s = \"abbbccc\")",
        "minimizedStringLength(s = \"AABABBA\")",
        "minimizedStringLength(s = \"thisisalongstring\")",
        "minimizedStringLength(s = \"abbbaaccc\")",
        "minimizedStringLength(s = \"aaabaabcc\")",
        "minimizedStringLength(s = \"bcdbcdbcdbcdbcd\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 1)",
        "checkArray(nums = [1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 5)",
        "checkArray(nums = [1, 0, 0, 0, 1], k = 2)",
        "checkArray(nums = [2, 1, 5, 1, 2, 2, 2], k = 3)",
        "checkArray(nums = [0, 0, 0, 0, 0, 0, 0, 0], k = 1)",
        "checkArray(nums = [20,15,10,10,10], k = 2)",
        "checkArray(nums = [2, 1, 5, 2, 3, 4, 5], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [2, 1, 2, 1, 2, 1])",
        "maxIncreasingGroups(usageLimits = [1, 3, 1, 2])",
        "maxIncreasingGroups(usageLimits = [3, 4, 2, 1, 1])",
        "maxIncreasingGroups(usageLimits = [3, 2, 4, 3, 2])",
        "maxIncreasingGroups(usageLimits = [2, 1, 5, 1, 3, 2])",
        "maxIncreasingGroups(usageLimits = [2, 5, 1, 0])",
        "maxIncreasingGroups(usageLimits = [1, 2, 4, 3, 3, 2])",
        "maxIncreasingGroups(usageLimits = [5, 2, 3, 1, 1, 4])",
        "maxIncreasingGroups(usageLimits = [2, 1, 1, 0, 2, 1, 0])",
        "maxIncreasingGroups(usageLimits = [10, 5, 5, 11, 10, 3])"
    ],
    "sample_206": [
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"456\")",
        "minimumOperations(num = \"38\")",
        "minimumOperations(num = \"999999999\")",
        "minimumOperations(num = \"869\")",
        "minimumOperations(num = \"0909\")",
        "minimumOperations(num = \"1565\")",
        "minimumOperations(num = \"01011001\")",
        "minimumOperations(num = \"77300\")",
        "minimumOperations(num = \"24937\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 0, 1, 3])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0,1,1,2,0])"
    ],
    "sample_38": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"abbaa\")",
        "minimumCost(s = \"baab\")",
        "minimumCost(s = \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
        "minimumCost(s = \"bbbaac\")",
        "minimumCost(s = \"AAAB\")",
        "minimumCost(s = \"zzzzaba\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [3, 1, 2])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 2, 2])",
        "maxIncreasingGroups(usageLimits = [2, 1, 3, 1])",
        "maxIncreasingGroups(usageLimits = [3, 1, 1, 2])",
        "maxIncreasingGroups(usageLimits = [2, 6, 9])",
        "maxIncreasingGroups(usageLimits = [10, 12, 14])",
        "maxIncreasingGroups(usageLimits = [10, 10, 3, 1, 1, 1, 1])"
    ],
    "sample_53": [
        "smallestString(s = 'bacd')",
        "smallestString(s = 'baabd')",
        "smallestString(s = 'baabd')",
        "smallestString(s = 'bbbac')",
        "smallestString(s = 'baaz')",
        "smallestString(s = \"bacb\")",
        "smallestString(s = \"baccd\")",
        "smallestString(s = 'bacca')",
        "smallestString(s = 'bacde')",
        "smallestString(s = 'cabd')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 2)",
        "minAbsoluteDifference(nums = [3, 8, -10, 23, 19, -4, -14, 27], x = 3)",
        "minAbsoluteDifference(nums = [3,8,-10,23,19,-4,-14,27], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,7], x = 3)",
        "minAbsoluteDifference(nums = [2,3,4,7], x = 2)",
        "minAbsoluteDifference(nums = [2, 4, 7, 8, 9], x = 2)",
        "minAbsoluteDifference(nums = [5, 4, 3, 2, 1, 10], x = 3)",
        "minAbsoluteDifference(nums = [5,7,2,3,1,4], x = 2)",
        "minAbsoluteDifference(nums = [1, 7, 5, 4, 2, 9, 8, 6, 3, 11], x = 3)",
        "minAbsoluteDifference(nums = [5, 15, 20, 23, 27, 29, 30], x = 2)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 2], [2, 3, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 100], [2, 3, 100]])",
        "maximizeTheProfit(N = 4, offers = [[1, 3, 2], [3, 4, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 3, 2], [2, 4, 2]])",
        "maximizeTheProfit(N = 4, offers = [[1, 4, 2], [2, 3, 1], [2, 4, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 1], [1, 2, 1], [1, 2, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 1, 4], [2, 2, 7]])",
        "maximizeTheProfit(N = 3, offers = [[1,2,10], [3,2,5]])",
        "maximizeTheProfit(N = 4, offers = [[1, 3, 1], [2, 4, 1], [2, 4, 2]])",
        "maximizeTheProfit(N = 4, offers = [[1, 4, 1], [4, 4, 1], [2, 4, 1], [0, 4, 1]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [\"\"], b = \"\")",
        "splitWordsBySeparator(a = [\"\"], b = \"a\")",
        "splitWordsBySeparator(a = [], b = \"x\")",
        "splitWordsBySeparator(a = [\"\"], b = \"x\")",
        "splitWordsBySeparator(a = [\"\", \"\"], b = \",\")",
        "splitWordsBySeparator(a = [], b = \"i\")",
        "splitWordsBySeparator(a = [\"my\", \"name\", \"is\"], b = \"\")",
        "splitWordsBySeparator(a = [\"\", \"y\", \"\"], b = \"x\")",
        "splitWordsBySeparator(a = [\"\", \"1\", \"12\", \"123\", \"1234\"], b = \"23\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a = \"5123010000\")",
        "removeTrailingZeros(a = \"5123010000\")",
        "removeTrailingZeros(a = '51230100000000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'nevene')",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"nevene\")",
        "makeSmallestPalindrome(s = 'nev')",
        "makeSmallestPalindrome(s = \"enven\")",
        "makeSmallestPalindrome(s = 'nevenne')",
        "makeSmallestPalindrome(s = \"vene\")",
        "makeSmallestPalindrome(s = 'venn')",
        "makeSmallestPalindrome(s = 'nevenee')",
        "makeSmallestPalindrome(s = \"evone\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,1,2,3,4,5,6], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8], k = 100)",
        "longestEqualSubarray(nums = [1,2,3,4,4,4,4,5,6], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,2,3,1,4,2], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,4,4,4,5,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,1,2,3,4,5,6,7,8,9,10], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 3, 2, 1, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [9, 10, 12, 14, 18, 19, 20, 21], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 4)",
        "maximumBeauty(nums = [1, 3, 5, 6, 8, 11], k = 5)",
        "maximumBeauty(nums = [5, 8, 9, 10, 11], k = 2)",
        "maximumBeauty(nums = [1,4,5,6,8,9], k = 5)",
        "maximumBeauty(nums = [1, 3, 2, 6, 15, 18], k = 4)",
        "maximumBeauty(nums = [1, 1, 2, 4, 5, 7, 8], k = 5)",
        "maximumBeauty(nums = [3,5,5,7], k = 4)",
        "maximumBeauty(nums=[2,4,1,5,1,4,3], k=2)",
        "maximumBeauty(nums = [1, 4, 2, 9, 10, 5, 6, 8, 7, 3], k = 12)",
        "maximumBeauty(nums = [2, 2, 3, 3, 1, 2, 1, 3, 4, 4, 4], k = 3)"
    ],
    "sample_163": [
        "maxSum(nums = [])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [-1, -2, -3])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [-1, -2])",
        "maxSum(nums = [9999999999999999, 9999999999999999])",
        "maxSum(nums = [1, 12, 121])",
        "maxSum(nums = [4, 1, 9, 2])",
        "maxSum(nums = [1, 1000000000000])",
        "maxSum(nums = [22,22,22,22,22,22,22])"
    ],
    "sample_151": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'singing')",
        "finalString(s = 'singing')",
        "finalString(s = \"singing\")",
        "finalString(s = 'tsing')",
        "finalString(s = \"radiant\")",
        "finalString(s = 'This is an example.')",
        "finalString(s = 'iibtsng')",
        "finalString(s = \"minisgnirts\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"51230100\")"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '0')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = '000101')",
        "maximumOddBinaryNumber(s = '000011')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['easy_problem'], separator = '_')",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"s\")",
        "splitWordsBySeparator(words = [\"This\", \"is\", \"a\", \"easy\", \"problem\"], separator = \" \")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,4,5,6], K = 3)",
        "longestEqualSubarray(A = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], K = 4)",
        "longestEqualSubarray(A = [1,2,1,2,3,1,2,1,2], K = 0)",
        "longestEqualSubarray(A = [1,10,100,1000], K = 5)",
        "longestEqualSubarray(A = [2, 2, 2, 2, 2, 4, 4, 4, 4], K = 3)",
        "longestEqualSubarray(A = [1, 1, 1, 2, 3, 2, 2, 2, 2], K = 4)",
        "longestEqualSubarray(A = [3, 2, 4, 3, 4, 2], K = 1)",
        "longestEqualSubarray(A = [1,3,1,2,2,3,1,2,2,1,3], K = 1)",
        "longestEqualSubarray(A = [1, 2, 1, 1, 4, 4, 3, 2, 2, 1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,2,4,3,3,2,2,3,4,5,6,3,2,4,5,6,7,8], K = 2)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2])",
        "countWays(nums = [1, 2])",
        "countWays(nums = [2, 2])",
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [1, 0])",
        "countWays(nums = [0, 0, 0])",
        "countWays(nums = [2,1])",
        "countWays(nums = [1, 1, 2, 2, 3])",
        "countWays(nums = [-2, 1, -1, 2])",
        "countWays(nums=[4, 4, 5])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 0, 1, 4, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 1, 2, 8], k = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '51230100000000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbfx\")",
        "isAcronym(words = [\"first\", \"second\", \"third\"], s = \"FST\")",
        "isAcronym(words = [\"miss\", \"you\"], s = \"my\")",
        "isAcronym(words = [\"Java\", \"Beans\"], s = \"JAB\")",
        "isAcronym(words = [\"Boiling\", \"Point\", \"Elevation\"], s = \"BP\")",
        "isAcronym(words = [\"Mexican\", \"American\", \"Canadian\"], s = \"MAC\")",
        "isAcronym(words = [\"Programming\", \"puzzles\", \"and\", \"code\", \"games\"], s = \"PPGACG\")",
        "isAcronym(words = [\"bio\", \"informatics\", \"education\"], s = \"bied\")",
        "isAcronym(words=[\"rubber\", \"duck\", \"goose\", \"solo\"], s = \"RDS\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1])",
        "countCompleteSubarrays(nums = [1,1,1,1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 1, 3])",
        "countCompleteSubarrays(nums = [1,2,1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 3, 2, 5, 4, 1, 1, 2, 5, 3])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n=2, target=10)",
        "minimumPossibleSum(n = 3, target = 9)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'singing')",
        "finalString(s = 'ringtone')",
        "finalString(s = 'siting')",
        "finalString(s = \"input\")",
        "finalString(s = \"standing\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"venen\")",
        "makeSmallestPalindrome(s = \"venne\")",
        "makeSmallestPalindrome(s = \"venn\")",
        "makeSmallestPalindrome(s = \"neon\")",
        "makeSmallestPalindrome(s = \"nven\")",
        "makeSmallestPalindrome(s = \"neveon\")",
        "makeSmallestPalindrome(s = \"nevvme\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 6], [2, 3, 4]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 3], [2, 5, 4], [3, 10, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,4,10]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,4], [1,3,2], [2,3,3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 9], [2, 4, 4], [3, 3, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 4], [2, 5, 6], [3, 5, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 6], [2, 5, 3], [3, 4, 7]])",
        "maximizeTheProfit(n = 7, offers = [[1, 2, 5], [3, 5, 2], [4, 5, 4], [5, 7, 1], [3, 6, 3]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 5], [5, 6, 7], [3, 4, 1], [3, 5, 2], [5, 6, 1]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [5, 1, 3, 4, 2], target = 3)",
        "maximumJumps(nums = [1,1,1,1,1], target = 0)",
        "maximumJumps(nums = [1, 2, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 1], target = 2)",
        "maximumJumps(nums = [1,2,3,4,1], target = 1)",
        "maximumJumps(nums = [3, 3, 2, 2, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 3, 3, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 3, 2, 1, 4, 2, 1, 6, 1], target = 2)",
        "maximumJumps(nums = [2,4,1,2,6,1], target = 4)",
        "maximumJumps(nums = [6,1,1,6,2,1,1,6,5,1,2], target = 3)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [2,2,3,2,4,4])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = '0000001')",
        "maximumOddBinaryNumber(s = \"11010\")",
        "maximumOddBinaryNumber(s = \"100010\")",
        "maximumOddBinaryNumber(s = \"1010111\")",
        "maximumOddBinaryNumber(s = \"011110\")"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 3, k = 13)",
        "minimumSum(n = 4, k = 24)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 20, num2 = 2)",
        "makeTheIntegerZero(num1 = 23, num2 = 5)",
        "makeTheIntegerZero(num1 = 14, num2 = 7)",
        "makeTheIntegerZero(num1 = 20, num2 = 8)",
        "makeTheIntegerZero(num1 = 39, num2 = 9)",
        "makeTheIntegerZero(num1 = 1023, num2 = 1000)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 2, target = 0)",
        "minimumPossibleSum(n = 1000, target = 1)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [4, 3, 1, 2], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 5, 1, 4, 6], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [0,1,2,0,1], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 5, 1, 2, 3, 5, 6], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [10, 15, 32], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 5, 8, 9, 1, 6, 7, 10], modulo = 3, k = 1)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 4, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 0)",
        "maximumBeauty(nums = [1, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [0, 5, 10, 15], k = 5)",
        "maximumBeauty(nums = [1, 1, 1, 3, 3, 3, 2, 2, 2], k = 2)",
        "maximumBeauty(nums = [1, 10, 3, 2, 6], k = 2)",
        "maximumBeauty(nums = [1,1,2,3,3,3,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 6, 3, 5, 2], k = 0)",
        "maximumBeauty(nums = [1, 3, 6, 2, 5, 3, 1], k = 2)"
    ],
    "sample_148": [
        "finalString(s = \"pointer\")",
        "finalString(s = 'tinier')",
        "finalString(s = 'poniter')",
        "finalString(s = \"pinter\")",
        "finalString(s = \"poniter\")",
        "finalString(s = \"point\")",
        "finalString(s = \"ponter\")",
        "finalString(s = \"onter\")",
        "finalString(s = 'interpritet')",
        "finalString(s = 'iipontwer')"
    ],
    "sample_231": [
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 3, 6])",
        "countWays(nums = [2,3,4])",
        "countWays(nums = [0, 2, 3, 4])",
        "countWays(nums = [2, 3, 6])",
        "countWays(nums = [1, 3, 4, 6])",
        "countWays(nums = [2, 1, 3, 2])",
        "countWays(nums = [2, 1, 0, -1, -2])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [22, 40])",
        "countBeautifulPairs(nums = [123, 345])",
        "countBeautifulPairs(nums = [10, 20, 11])",
        "countBeautifulPairs(nums=[420, 204])",
        "countBeautifulPairs(nums = [22, 23, 24, 45])",
        "countBeautifulPairs(nums=[11,22,13])",
        "countBeautifulPairs(nums = [12, 21, 112, 221])",
        "countBeautifulPairs(nums = [42, 33, 666, 333])",
        "countBeautifulPairs(nums=[10, 32, 33, 34])",
        "countBeautifulPairs(nums = [12, 28, 6, 52, 4, 6, 8])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 27, num2 = 3)",
        "makeTheIntegerZero(num1 = 27, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 20, num2 = 7)",
        "makeTheIntegerZero(num1 = 45, num2 = 15)",
        "makeTheIntegerZero(num1 = 32, num2 = 3)",
        "makeTheIntegerZero(num1 = 60, num2 = 15)",
        "makeTheIntegerZero(num1 = 11, num2 = 13)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"nevene\")",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = \"noon\")",
        "makeSmallestPalindrome(s = \"neve\")",
        "makeSmallestPalindrome(s = 'nevenne')",
        "makeSmallestPalindrome(s = \"oevne\")",
        "makeSmallestPalindrome(s = \"evon\")",
        "makeSmallestPalindrome(s = 'eleven')",
        "makeSmallestPalindrome(s = 'neevem')"
    ],
    "sample_165": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"program\", \"analysis\", \"and\", \"design\"], s = \"PAD\")",
        "isAcronym(words = [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\"], s = \"qwety\")",
        "isAcronym(words = [\"PHP\", \"HTML\", \"CSS\", \"JS\", \"JQuery\"], s = \"PHP\")",
        "isAcronym(words = ['remote', 'working', 'agreement'], s = 'rwa')",
        "isAcronym(words = ['ball', 'is', 'north', 'of', 'the', 'house'], s = 'BINTHEH')"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums=[1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,0,1,0,1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 0, 1, 4, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 4, 0, 0, 3], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 12)",
        "minimumSum(n=1, k=3)",
        "minimumSum(n = 4, k = 11)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [-1, 1, 2, 3])",
        "countWays(nums = [2, 1])",
        "countWays(nums = [2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [-1, 0, 1, 2, 5])",
        "countWays(nums = [0, 1, 3, 6])",
        "countWays(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "countWays(nums = [1, 2, 3, 4, 0x3f3f3f3f, -0x3f3f3f3f])"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"ABA\")",
        "minimumCost(s = \"caaab\")",
        "minimumCost(s = \"AAABB\")",
        "minimumCost(s = \"ABCAC\")",
        "minimumCost(s = \"aaabbaaa\")",
        "minimumCost(s = \"zabcd\")",
        "minimumCost(s = \"ABACABB\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"L_R\")",
        "furthestDistanceFromOrigin(moves = \"LRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_\")",
        "furthestDistanceFromOrigin(moves = \"_LLR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"__R__\")",
        "furthestDistanceFromOrigin(moves = \"L_L_L_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_LLRR\")",
        "furthestDistanceFromOrigin(moves = \"___L__R__\")",
        "furthestDistanceFromOrigin(moves = \"LRLR_R_R\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 0, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 20, additionalTank = 4)",
        "distanceTraveled(mainTank = 100, additionalTank = 1)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 3])",
        "countCompleteSubarrays(nums = [2, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [0,1,2,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [2,2,2,3,3])",
        "countCompleteSubarrays(nums = [3,2,1,3,2,1,3,2,1,3])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1], threshold = 1)",
        "longestAlternatingSubarray(nums = [0], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 10)",
        "longestAlternatingSubarray(nums = [0,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0], threshold = 0)",
        "longestAlternatingSubarray(nums = [8, 2, 12, 14, 5], threshold = 16)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 4, 1, 8, 2, 9], threshold = 5)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[1, 5], [2, 4]])",
        "numberOfPoints(nums = [[1,3],[1,4],[2,4],[3,4]])",
        "numberOfPoints(nums = [[0,1], [3,5], [6,8], [9,10]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [2, 3], [3, 5]])",
        "numberOfPoints(nums = [[-1, 3], [2, 4], [0, 3]])",
        "numberOfPoints(nums = [[1,2],[2,4],[5,7],[6,9]])",
        "numberOfPoints(nums = [[1, 4], [4, 6], [7, 8], [8, 8]])",
        "numberOfPoints(nums = [[3, 4], [6, 10], [7, 9]])",
        "numberOfPoints(nums = [[1,4], [1, 10], [5, 9], [1, 5]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 14])",
        "countBeautifulPairs(nums = [12, 28, 46, 36, 60])",
        "countBeautifulPairs(nums = [10, 20, 20])",
        "countBeautifulPairs(nums = [12, 34, 42, 65])",
        "countBeautifulPairs(nums = [12, 45, 64, 11])",
        "countBeautifulPairs(nums = [12, 51, 71, 73])",
        "countBeautifulPairs(nums = [111, 223, 444, 122])",
        "countBeautifulPairs(nums = [1322, 3313, 123])",
        "countBeautifulPairs(nums = [56, 28, 89, 23, 93])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], t = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 10)",
        "longestAlternatingSubarray(nums = [1,1,1], t = 1)",
        "longestAlternatingSubarray(nums = [1, 3, 5], t = 1000000000)",
        "longestAlternatingSubarray(nums = [1,3,6], t = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 10], t = 10)",
        "longestAlternatingSubarray(nums = [3,1,3,4,1], t = 5)",
        "longestAlternatingSubarray(nums=[2, 3, 6], t=6)",
        "longestAlternatingSubarray(nums=[2,1,3,2,3], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,4,5,6,7,9,11,12,14,16,17,18,19,22], t = 22)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"aabbaa\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"xy\")",
        "minimumCost(s = \"caaabbb\")",
        "minimumCost(s = \"caaad\")",
        "minimumCost(s = \"BBAA\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"CDABCD\")",
        "minLength(s = \"ABCDA\")",
        "minLength(s = \"ABCDEFG\")",
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"ABCDECD\")",
        "minLength(s = \"ABCDEFGCD\")",
        "minLength(s = \"ABCCDDAB\")",
        "minLength(s = \"abcddd\")",
        "minLength(s = \"ABXCDZY\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5], modulo = 4, k = 0)",
        "countInterestingSubarrays(nums = [1,1,1,1,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 0], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[1,2,3,4,5],modulo=3,k=2)",
        "countInterestingSubarrays(nums = [2,3,2,4,6], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 2, 1], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [5,5,7,7], modulo = 7, k = 0)",
        "countInterestingSubarrays(nums = [3, 2, 5, 2, 6, 1, 5, 1, 2], modulo = 3, k = 0)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [2, 2]])",
        "colorTheArray(n=0, queries=[[1, 1]])",
        "colorTheArray(n = 4, queries = [[0,1],[3,2],[1,1],[2,3]])",
        "colorTheArray(n=2, queries=[[\"0\", \"2\"], [\"1\", \"2\"]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1], nums2 = [1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2], nums2 = [2, 1, 4])",
        "maxNonDecreasingLength(nums1 = [2,1], nums2 = [3,2])",
        "maxNonDecreasingLength(nums1 = [3, 4, 5], nums2 = [4, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 2, 1, 2, 3], nums2 = [1, 3, 2, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 7, 4, 9, 2, 5], nums2 = [1, 9, 4, 9, 2, 5])",
        "maxNonDecreasingLength(nums1 = [4, 3, 1], nums2 = [2, 3, 3])",
        "maxNonDecreasingLength(nums1 = [2, 1, 4, 5, 3], nums2 = [2, 3, 1, 5, 4])",
        "maxNonDecreasingLength(nums1 = [2, 3, 1, 4], nums2 = [4, 2, 5, 6])",
        "maxNonDecreasingLength(nums1 = [10, 5, 15], nums2 = [20, 10, 3])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 10, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 10, target = 10)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1,2,3])",
        "findValueOfPartition(nums = [1, 3, 5])",
        "findValueOfPartition(nums = [0, 1, 2])",
        "findValueOfPartition(nums = [0, 2])",
        "findValueOfPartition(nums = [1,2,5])",
        "findValueOfPartition(nums = [2, 1, 3])",
        "findValueOfPartition(nums = [1, 2, 2, 1])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [2, 3, 4, 5, 5])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"LRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"L_L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"RR_LLRR\")",
        "furthestDistanceFromOrigin(moves = \"L__R_LL\")",
        "furthestDistanceFromOrigin(moves = \"R_L_L_L_R_R_L_L_L_R_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"R__RRR__RRRRR__RRRR\")",
        "furthestDistanceFromOrigin(moves = \"R_LRLRRL_R_LRR_\")",
        "furthestDistanceFromOrigin(moves = \"RRRLRLRLRLLLRLRLRRLRLLRRLRLRLLL\")",
        "furthestDistanceFromOrigin(moves
    ],
    "sample_117": [
        "minimumIndex(nums = [3, 4, 5, 1, 2])",
        "minimumIndex(nums = [3, 4, 4, 6, 1, 4])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3])",
        "minimumIndex(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minimumIndex(nums = [1, 0, 1, 0, 1, 0, 0])",
        "minimumIndex(nums = [1, 3, 5, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [3,4,1,1,1,1,1])",
        "minimumIndex(nums = [0,0,1,1,2,2,2,3,3,4,4,5,5,5,5])",
        "minimumIndex(nums = [2, 1, 3, 2, 1, 2, 2, 1, 4, 2])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [2, 1, 5, 4, 3])",
        "semiOrderedPermutation(nums = [0, 2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5, 6])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5, 6])",
        "semiOrderedPermutation(nums = [2, 3, 4, 5, 6, 1])",
        "semiOrderedPermutation(nums = [2,1,3,4,5])"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n=1, k=3)",
        "minimumSum(n=1, k=1)",
        "minimumSum(n=1, k=3)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n=1, k=2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n=2, k=1)",
        "minimumSum(n=3, k=2)",
        "minimumSum(n=3, k=3)"
    ]
}