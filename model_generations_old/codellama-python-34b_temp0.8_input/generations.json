{
    "sample_348": [
        "alternatingSubarray(nums = [1, 3, 2, 1])",
        "alternatingSubarray(nums = [4, 6, 5, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 4, 1, 8])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 9, 11, 1])",
        "alternatingSubarray(nums = [1,3,2,1])",
        "alternatingSubarray(nums = [2, 1, 4, 3, 1, 3, 2])",
        "alternatingSubarray(nums = [3,1,2,4,3])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 5, 3, 4, 9])",
        "alternatingSubarray(nums = [1,2,4,3,5,6])",
        "alternatingSubarray(nums = [3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_310": [
        "matrixSum(a = [[1], [2]])",
        "matrixSum(a = [[1,2], [3,4]])",
        "matrixSum(a = [[0, 1], [1, 1]])",
        "matrixSum(a = [[0, 1, 2], [3, 4, 5]])",
        "matrixSum(a = [[0, 0, 0], [0, 0, 0]])",
        "matrixSum(a = [[0,1]])",
        "matrixSum(a = [[0,1,3],[2,3,4],[5,6,7]])",
        "matrixSum(a = [[0, 0, 0, 1], [0, 0, 1, 2], [0, 0, 2, 3], [0, 1, 2, 4]])",
        "matrixSum(a = [[-2, -1], [-1, -1], [1, 1], [2, 1]])",
        "matrixSum(a = [[-10, 2, 3], [5, -9, 6], [4, 4, 7]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0,1,0],[0,0,1],[1,0,0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0,1,0],[0,0,1],[0,0,0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0,1,1], [1,0,1], [1,1,0]])",
        "findChampion(grid = [[0, 0, 1, 0], [0, 1, 0, 1], [0, 0, 0, 0], [0, 0, 1, 0]])",
        "findChampion(grid = [[0,0,0,0],[1,1,1,0],[0,0,1,0],[0,0,1,0]])",
        "findChampion(grid = [[1, 0, 0, 1], [0, 0, 1, 0], [1, 0, 1, 1], [1, 1, 0, 0]])",
        "findChampion(grid = [[0,0,0,0,0,1], [0,0,0,0,0,0], [0,0,0,1,0,0], [0,0,0,0,0,0], [1,0,0,0,0,0], [0,1,0,0,0,0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1], [2]])",
        "matrixSum(a = [[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "matrixSum(a = [[1, 1], [1, 1]])",
        "matrixSum(a = [[1, 2, 3], [-4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[0, -1], [-1, 0]])",
        "matrixSum(a = [[-3, 2, 4], [-3, 2, 4], [-3, 2, 4]])",
        "matrixSum(a = [[2, 3, 4], [1, 3, 4], [4, 1, 2]])",
        "matrixSum(a = [[0, -3, 1], [-2, 4, -1]])",
        "matrixSum(a = [[-1, 5, -2, 1], [3, 11, 10, -3], [-1, -9, -1, 11]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [3, 1, 2, 4, 1, 4, 2, 3])",
        "alternatingSubarray(nums = [3, 1, 4, 2, 4])",
        "alternatingSubarray(nums = [5, 6, 7, 2, 3, 10, 4])",
        "alternatingSubarray(nums = [-3,-2,-1,1,2,3])",
        "alternatingSubarray(nums = [5, 4, 7, 1, 5, 4])",
        "alternatingSubarray(nums = [3, 5, 6, 9, 11, 12, 15, 20])",
        "alternatingSubarray(nums = [5, 4, 7, 11, 10, 20, 9, 9, 20])",
        "alternatingSubarray(nums = [2, 4, 5, 8, 4, 3, 4, 6, 5, 4])",
        "alternatingSubarray(nums = [3, 1, -2, 6, -2, 2, 4, 5, -2, 3, 3, -2, -5, -1])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"bt\", \"hat\", \"tree\"], x = \"a\")",
        "findWordsContaining(words = [\"mouse\", \"cat\", \"dog\", \"hamster\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"acb\", \"bac\", \"hello\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"meme\", \"sandwich\", \"dog\"], x = \"a\")",
        "findWordsContaining(words = [\"a\", \"b\", \"c\", \"a\", \"d\", \"e\", \"f\", \"g\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"boat\", \"banana\", \"cow\"], x = \"a\")",
        "findWordsContaining(words = [\"sab\", \"mat\", \"abc\", \"xyz\"], x = \"a\")",
        "findWordsContaining(words = [\"corn\", \"tornado\", \"bread\", \"pine\"], x = \"orn\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"fedbca\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"zbcfed\")",
        "canBeEqual(s1 = \"acbde\", s2 = \"abcde\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abb\", s2 = \"bba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"baqc\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 3)",
        "lengthOfLongestSubsequence(nums = [4, 3, 10, 9, 8], target = 12)",
        "lengthOfLongestSubsequence(nums = [1,2,2,2,2], target = 6)",
        "lengthOfLongestSubsequence(nums = [3, 6, 2, 7], target = 5)",
        "lengthOfLongestSubsequence(nums = [3, 5, 2, 1, 6], target = 7)",
        "lengthOfLongestSubsequence(nums = [2,2,1,7,2], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,1,2,3,4,5,3,2,1,1], target = 2)",
        "lengthOfLongestSubsequence(nums = [2,2,1,3,4,5,5,2,1], target = 5)",
        "lengthOfLongestSubsequence(nums=[1,3,5,7,9,2], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,1,5,3,3,3,5,1,5,5,5,1,5], target = 3)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"aabc\", s2 = \"abca\")",
        "canBeEqual(s1 = \"aabc\", s2 = \"abca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"bae\", s2 = \"eab\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1,1,0,0,1])",
        "maxSubarrays(nums = [3, 2, 1, 4])",
        "maxSubarrays(nums = [1, 1, 0, 3])",
        "maxSubarrays(nums = [2, 4, 3, 2])",
        "maxSubarrays(nums = [1,0,1,1,1,0,0,1])",
        "maxSubarrays(nums = [1, 2, 4, 16, 4, 8, 32])",
        "maxSubarrays(nums = [12, 1, -1, -4, 3, -2])",
        "maxSubarrays(nums = [1, 2, 4, 4, 4, 4, 2, 1, 0, 0, 0, 0])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [3, 1, 2], money = 5)",
        "buyChoco(prices = [1, 3, 7], money = 10)",
        "buyChoco(prices = [2, 3, 5, 6], money = 5)",
        "buyChoco(prices = [3, 2, 5, 1], money = 5)",
        "buyChoco(prices = [2, 3, 1], money = 5)",
        "buyChoco(prices = [4, 5, 1], money = 9)",
        "buyChoco(prices = [10, 20, 30, 40], money = 50)",
        "buyChoco(prices = [2, 3, 6, 7], money = 8)",
        "buyChoco(prices = [1, 1, 3, 5, 9, 10], money = 4)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1], l = 1, r = 1)",
        "countSubMultisets(nums = [1,1,2,3], l = 1, r = 5)",
        "countSubMultisets(nums = [1,1,2,3], l = 1, r = 5)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 10)",
        "countSubMultisets(nums = [1,1,3], l = 1, r = 2)",
        "countSubMultisets(nums = [1,2,3], l = 0, r = 3)",
        "countSubMultisets(nums = [1], l = 1, r = 1000)",
        "countSubMultisets(nums = [1,2,4,5], l = 3, r = 10)",
        "countSubMultisets(nums = [3,2,1,2], l = 4, r = 6)",
        "countSubMultisets(nums = [5,2,2], l = 3, r = 7)"
    ],
    "sample_322": [
        "isFascinating(n = 100)",
        "isFascinating(n = 15)",
        "isFascinating(n = 20)",
        "isFascinating(n = 98)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 81)",
        "isFascinating(n = 456)",
        "isFascinating(n = 452)",
        "isFascinating(n = 223)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"bacdef\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"bacdef\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edabc\")",
        "canBeEqual(s1 = \"aac\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"fedbca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"bacbdg\")",
        "canBeEqual(s1 = \"cba\", s2 = \"bca\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 3, 5, 7])",
        "minimumCoins(prices = [1, 2, 3, 0, 2])",
        "minimumCoins(prices = [1, 1, 5, 3])",
        "minimumCoins(prices = [1, 2, 3, 1, 2, 5, 4])",
        "minimumCoins(prices = [4, 2, 1, 2, 4, 2, 4, 1])",
        "minimumCoins(prices = [1, 2, 5, 1, 2, 3, 1, 4, 2, 3])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 9)",
        "accountBalanceAfterPurchase(p = 97)",
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 85)"
    ],
    "sample_423": [
        "minOperations(nums = [1])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1,2,3,3])",
        "minOperations(nums = [1,2,2,2,1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9])",
        "minOperations(nums = [5, 2, 3, 4, 5])",
        "minOperations(nums = [1, 3, 4, 8, 9, 13, 17, 19])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "alternatingSubarray(nums = [1,2,2,2,2,2,1,1,1,1])",
        "alternatingSubarray(nums = [1,2,2,3,3,3,4,4])",
        "alternatingSubarray(nums = [1,3,2,1,3,2,4,5,3])",
        "alternatingSubarray(nums = [1,2,3,4,5,5,4,5,6,7,8,9,9])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6])",
        "alternatingSubarray(nums = [1,2,3,3,2,1,4,1,4,2,2,4])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 3, 4, 3, 2, 1, 2, 3, 2, 3])",
        "alternatingSubarray(nums = [1,2,3,3,2,1,2,2,3,4,5,3,2,4])",
        "alternatingSubarray(nums = [3,5,7,7,3,2,9,2,7])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 4, limit = 3)"
    ],
    "sample_247": [
        "minOperations(s1 = \"xx\", s2 = \"yy\", x = 1)",
        "minOperations(s1 = \"zzz\", s2 = \"zzz\", x = 2)",
        "minOperations(s1 = \"xy\", s2 = \"xz\", x = 2)",
        "minOperations(s1 = \"aa\", s2 = \"ab\", x = 1)",
        "minOperations(s1 = \"xxxtxxx\", s2 = \"xxyxxxxx\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"bcdf\", x = 4)",
        "minOperations(s1 = \"a\", s2 = \"aa\", x = 1)",
        "minOperations(s1 = \"xxxxx\", s2 = \"xxfxxx\", x = 2)",
        "minOperations(s1 = \"xxbababxx\", s2 = \"bababbab\", x = 1)",
        "minOperations(s1 = \"zyx\", s2 = \"zyx\", x = 4)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 2, y = 4, z = 1)",
        "longestString(x = 1, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 4)",
        "longestString(x = 0, y = 3, z = 5)"
    ],
    "sample_418": [
        "minOperations(nums = [1,2,2,1,1], k = 3)",
        "minOperations(nums = [1,2,2,1,1], k = 3)",
        "minOperations(nums = [1, 2, 2, 1], k = 1)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "minOperations(nums = [1, 2, 4, 1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [1, 2, 4, 1, 2], k = 2)",
        "minOperations(nums = [4, 3, 1, 3], k = 3)",
        "minOperations(nums = [0, 2, 1, 2, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 3, 4], k = 2)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbccdd\")",
        "longestSemiRepetitiveSubstring(s = \"alphabet\")",
        "longestSemiRepetitiveSubstring(s = \"alphabet\")",
        "longestSemiRepetitiveSubstring(s = \"abcbba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabbbbbc\")",
        "longestSemiRepetitiveSubstring(s = \"abcdefgh\")",
        "longestSemiRepetitiveSubstring(s = \"abcdddddefgghiia\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 4, 3])",
        "isGood(a = [1,2,3,3,4,5])",
        "isGood(a = [0, 1, 1, 2, 2, 3, 3])",
        "isGood(a = [1,2,2,3,4,4])",
        "isGood(a = [2, 2, 3, 4, 4, 5, 6])",
        "isGood(a = [0, 1, 0, 1, 0, 0])",
        "isGood(a = [0, 1, 0, 1, 0, 1, 0, 1, 0, 0])",
        "isGood(a = [1, 4, 0, 3, 2, 5, 6])",
        "isGood(a = [3,1,2,2,3,4,5,6,3])",
        "isGood(a = [1, 1, 0, 0, 2, 2, 2, 0, 1, 0])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 100, m = 3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 15, m = 4)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 5, 5, 1, 1, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [3, 4, 5, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,5])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 5])",
        "minGroupsForValidAssignment(nums = [2,2,2,1,1,1,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,2,2,5])",
        "minGroupsForValidAssignment(nums = [1, 3, 5, 7, 2, 2, 4, 7])",
        "minGroupsForValidAssignment(nums = [17,4,8,5,17,12,2,2,2,2,17,13,10,17,4,17])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\",\"2\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"2\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"prev\", \"1\", \"0\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"0\", \"prev\", \"2\", \"3\", \"prev\", \"1\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"123\", \"321\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"the\", \"eye\"])",
        "maximumNumberOfStringPairs(words = [\"boom\", \"moon\"])",
        "maximumNumberOfStringPairs(words = [\"red\",\"blue\",\"green\"])",
        "maximumNumberOfStringPairs(words = [\"Ideal\", \"Obedient\", \"Practical\", \"Covfefe\"])",
        "maximumNumberOfStringPairs(words = [\"this\", \"lashdfja\", \"ahj\", \"dsuufaslf\", \"this\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110100\", k = 2)",
        "shortestBeautifulSubstring(s = \"1001100110100010\", k = 2)",
        "shortestBeautifulSubstring(s = \"100110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"100100011000110\", k = 2)",
        "shortestBeautifulSubstring(s = '0001100110000001100', k = 2)",
        "shortestBeautifulSubstring(s = \"1011111101101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010010001\", k = 2)",
        "shortestBeautifulSubstring(s = \"000000000110011001100000000\", k = 2)",
        "shortestBeautifulSubstring(s = \"01010011011110001010011101110101010111000001010010101101101001111\", k = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1,3,5])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"011101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"00101000\")",
        "minimumSteps(s = \"1110\")",
        "minimumSteps(s = \"010101001\")",
        "minimumSteps(s = \"00001011011\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"fghij\", s3 = \"klmno\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"efg\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"aabcde\", s2 = \"aabcd\", s3 = \"aabc\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abd\", s3 = \"abef\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"acd\", s2 = \"abc\", s3 = \"abd\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bacd\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"cba\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"x\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"efg\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"eggs\", str2 = \"add\")",
        "canMakeSubsequence(str1 = \"efgyuip\", str2 = \"op\")",
        "canMakeSubsequence(str1 = \"fde\", str2 = \"asgfv\")"
    ],
    "sample_364": [
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9])",
        "isGood(nums = [0,1,2,3,4,5,6,7,8])",
        "isGood(nums = [0,1,2,3,4,5,6,7])",
        "isGood(nums = [0,2,1,3,5,4])",
        "isGood(nums = [0,2,3,1])",
        "isGood(nums = [2,3,0,5])",
        "isGood(nums=[4,2,3,1,5])",
        "isGood(nums=[3,4,2,1,0])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 2, 3], target = 6)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 7)",
        "countPairs(nums = [1,2,3], target = 3)",
        "countPairs(nums = [1,2,3,4], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4], target = 8)",
        "countPairs(nums = [1,2,3,4,5], target = 8)",
        "countPairs(nums = [1,2,3,4], target = 8)",
        "countPairs(nums = [1,1,2,3,4,5], target = 6)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [8, 6], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 5, 5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 5, 6, 7, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9, 10, 11], moveFrom = [5, 10, 11], moveTo = [8, 9, 6])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [9, 6], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 5, 6, 8, 9], moveFrom = [5, 6, 5], moveTo = [8, 9, 6])",
        "relocateMarbles(nums = [8, 5, 7, 8, 9], moveFrom = [8, 7], moveTo = [7, 9])",
        "relocateMarbles(nums = [8, 4, 7, 5, 2, 6, 1, 9, 0, 3], moveFrom = [1, 3, 5, 7], moveTo = [8, 6, 2, 0])",
        "relocateMarbles(nums = [4,8,5,7,9,6,5,8], moveFrom = [2,3,5], moveTo = [1,0,4])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1,2,3,4,1,2], target = 5)",
        "countPairs(nums = [1,2,3,4,1,2], target = 5)",
        "countPairs(nums = [1, 3, 5, 7, 2, 6, 11], target = 9)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,3,3,3])",
        "minLengthAfterRemovals(nums = [2,1,3,2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [5,2,2,2,5])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 3, 2, 3, 1, 1, 3])",
        "minLengthAfterRemovals(nums = [4,8,3,2,4,4,2])",
        "minLengthAfterRemovals(nums = [1,2,2,3,2,1,1,3,4,4,4,4,4,4,4,4,4,4,4])",
        "minLengthAfterRemovals(nums = [2,2,2,1,3,3,1,1,3,3,4,4,5,5,5,3,3,5,5,5,5])"
    ],
    "sample_303": [
        "countSeniors(details = [\"abc101def\", \"abc102def\", \"abc103def\", \"abc104def\", \"abc105def\"])",
        "countSeniors(details = [\"abc 123\", \"abc 45\", \"abc 78\"])",
        "countSeniors(details = [\"Bill, age:70\", \"Maria, age:50\"])",
        "countSeniors(details = [\"Dave 25\", \"John 32\", \"Mary 70\"])",
        "countSeniors(details = [\"s1,70,m,2000\", \"s2,55,m,1965\", \"s3,62,f,1991\", \"s4,75,m,2001\"])",
        "countSeniors(details = [\"Joe,63\", \"Jane,11\", \"Jim,45\", \"Bill,72\"])",
        "countSeniors(details = [\"Dylan,03011998\",\"Angel,01092000\"])",
        "countSeniors(details = [\"Ms. Doe (82)\", \"Mr. Smith (54)\", \"Ms. Yu (73)\", \"Mr. Kan (60)\"])",
        "countSeniors(details = [\"32,m,54\", \"20,f,32\", \"45,m,65\", \"24,f,56\"])",
        "countSeniors(details = [\"rs4564, 55\", \"em4335, 56\", \"krt6543, 60\", \"xk3412, 59\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcd\")",
        "longestSemiRepetitiveSubstring(s = \"bbaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"10010001\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbcac\")",
        "longestSemiRepetitiveSubstring(s = \"abababaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbabcd\")",
        "longestSemiRepetitiveSubstring(s = \"bbcabbabc\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"aabc\", s2 = \"abca\")",
        "canBeEqual(s1 = \"badc\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"badc\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"aabcc\", s2 = \"xyzbx\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"abc\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cb\", s3 = \"ad\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"xz\", s3 = \"xw\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"qwerty\", s2 = \"qwerty\", s3 = \"qwerty\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"yy\", s3 = \"xx\")",
        "findMinimumOperations(s1 = \"cac\", s2 = \"cba\", s3 = \"abc\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 10, 2, 4, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,2,3,4], target = 1)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18,4,5,1,1], target = 5)",
        "lengthOfLongestSubsequence(nums = [5, 4, 11, 3, 12], target = 25)",
        "lengthOfLongestSubsequence(nums = [4, 2, 2, 4], target = 1)",
        "lengthOfLongestSubsequence(nums = [3, 4, 10, 7, 2, 9], target = 7)",
        "lengthOfLongestSubsequence(nums=[9, 2, 3, 10], target=5)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [3, 1, 3])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSum(nums = [4,2,2,5,1,5,8])",
        "minimumSum(nums = [3, 6, 3, 5, 7])",
        "minimumSum(nums = [3, 9, 9, 8])",
        "minimumSum(nums = [3, 2, 4, 4, 1, 3])",
        "minimumSum(nums = [3, 4, 8, 9, 7, 2, 2, 2, 4, 6, 7])",
        "minimumSum(nums = [11, 19, 20, 15, 2, 11, 13, 16, 14, 5])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ca\", \"bb\", \"ac\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"bdc\", \"acef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"aa\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"b\",\"aa\",\"be\",\"a\",\"aaa\"])",
        "minimizeConcatenatedLength(words = [\"j\", \"z\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"bdc\", \"defg\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"bdc\", \"abe\", \"g\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"banana\", \"cat\"])",
        "minimizeConcatenatedLength(words = [\"p\", \"qrst\", \"y\", \"w\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"0011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"000100011\", k = 2)",
        "shortestBeautifulSubstring(s = \"001001100\", k = 2)",
        "shortestBeautifulSubstring(s = \"01001110\", k = 4)",
        "shortestBeautifulSubstring(s = \"000010010000011100\", k = 3)",
        "shortestBeautifulSubstring(s = \"0001000000111000\", k = 4)",
        "shortestBeautifulSubstring(s = \"0000000000000000000000000000000000000000000000001011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "shortestBeautifulSubstring(s = \"1110001100011100011000111000110001100011100011\", k = 4)",
        "shortestBeautifulSubstring(s = \"10101010101011111111101010101010\", k = 3)",
        "shortestBeautifulSubstring(s = \"001101000100101000110111010100100100101101110\", k = 2)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"aa\",\"bb\",\"cc\"])",
        "minimizeConcatenatedLength(words = [\"aaa\",\"bbb\",\"ab\",\"ba\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apples\", \"oranges\"])",
        "minimizeConcatenatedLength(words = [\"bd\", \"ac\", \"ba\", \"dc\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\",\"nn\",\"a\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"bd\",\"cd\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"dfg\",\"abe\",\"cdg\"])",
        "minimizeConcatenatedLength(words = [\"xyxy\",\"yyab\",\"ybab\",\"y\",\"yy\"])",
        "minimizeConcatenatedLength(words = [\"mq\", \"jk\", \"mj\", \"pd\", \"xy\", \"xy\"])",
        "minimizeConcatenatedLength(words = [\"stair\",\"tin\",\"tangram\",\"hate\",\"steer\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 3, m = 2)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,5,3,4,2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [4,2,1,3,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11,12])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 9, 1])",
        "alternatingSubarray(nums = [1,2,4,5,6,7])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,8,10])",
        "alternatingSubarray(nums = [-5,-10,-10,0])",
        "alternatingSubarray(nums = [1,2,4,3,1,4,7,6,5,7,4,5,3])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 5, 9, 3, 5, 6, 7, 4, 1, 2, 3, 10])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1])",
        "findMaximumLength(nums = [1,1])",
        "findMaximumLength(nums = [-1,1,-1,1])",
        "findMaximumLength(nums = [3,2,1,4,2])",
        "findMaximumLength(nums = [1, 3, 1, 5, 4])",
        "findMaximumLength(nums = [1,2,3,5,2])",
        "findMaximumLength(nums = [0,0,0,0,0,0,0,0,0])",
        "findMaximumLength(nums = [-1, 1, -2, 2])",
        "findMaximumLength(nums = [-5,2,3,4,2])",
        "findMaximumLength(nums = [3, 5, 2, 1, 15, 2, 2])"
    ],
    "sample_302": [
        "countSeniors(details = [\"25-05-1995\", \"25-05-1935\", \"25-05-2005\"])",
        "countSeniors(details = [\"01012000abc\", \"01021990abc\", \"01012001abc\"])",
        "countSeniors(details = [\"Mr. Smith 1912\", \"Mrs. Jonson 2001\"])",
        "countSeniors(details = [\"(60, 190, 100, 15)\", \"(61, 185, 100, 15)\", \"(55, 175, 100, 15)\", \"(65, 175, 100, 15)\"])",
        "countSeniors(details = [\"Bhavin 1999\", \"Ram 1970\", \"Shabbir 1981\"])",
        "countSeniors(details = [\"6701011990123A\", \"8009011990123B\"])",
        "countSeniors(details = [\"15/04/1999\", \"13/04/1997\", \"03/01/1974\"])",
        "countSeniors(details = [\"30/01/1998\", \"16/12/1975\", \"13/12/1990\"])",
        "countSeniors(details = [\"02281998Sonam\",\"08081999Aakanksha\",\"11112000Rohan\"])",
        "countSeniors(details = [\"XD44RV-0001\", \"XY753L-1234\", \"KT1402-1111\", \"KT1711-1234\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"cab\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abb\", s2 = \"bba\")",
        "canBeEqual(s1 = \"abb\", s2 = \"bba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dabc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"aaca\", s2 = \"aaaa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcz\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 5, 1])",
        "minimumCoins(prices = [1, 0, 1, 0, 1])",
        "minimumCoins(prices = [2, 2])",
        "minimumCoins(prices = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minimumCoins(prices = [0, 1, 0, 1, 1])",
        "minimumCoins(prices = [1,2,3,5,8,13,21])",
        "minimumCoins(prices = [1, 3, 2, 1, 2])"
    ],
    "sample_378": [
        "minimumSeconds(A = [0])",
        "minimumSeconds(A = [1, 2, 3])",
        "minimumSeconds(A = [1, 0, 0, 0, 0, 0, 1])",
        "minimumSeconds(A = [7, 3, 5, 1])",
        "minimumSeconds(A = [0, 1, 2, 4, 14, 20, 21])",
        "minimumSeconds(A = [3, 2, 3, 1, 3, 5, 4])",
        "minimumSeconds(A = [2, 4, 2, 2, 4])",
        "minimumSeconds(A = [4, 3, 1, 1, 3, 4, 3, 2, 2, 4])",
        "minimumSeconds(A = [0,0,4,5,6,6,7,8,9,10])",
        "minimumSeconds(A = [1, 3, 2, 7, 2, 2, 1, 1, 2, 2, 2, 1, 1])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xx\", \"xy\", \"yy\", \"yx\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"xy\", \"yz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"xy\", \"xy\", \"ab\", \"ba\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abab\", \"ab\", \"aa\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ba\", \"ab\", \"ab\", \"abc\", \"cba\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abab\", \"aba\", \"ab\", \"ba\", \"bab\", \"ba\", \"baba\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [0, 0], nums2 = [0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [4, 1, 3, 2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 1, 4])",
        "minSum(nums1 = [0, 0, 0, 1], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 3, 4], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 0, 2], nums2 = [4, 1, 5])",
        "minSum(nums1 = [1,0,0,1], nums2 = [0, 0, 1, 1])",
        "minSum(nums1 = [3, 5, 1], nums2 = [8, 9, 2])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"microsoft\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"n\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"d\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"g\")",
        "findWordsContaining(words = [\"bee\", \"dog\", \"cat\"], x = \"e\")",
        "findWordsContaining(words = [\"snake\", \"camel\", \"lion\", \"axolotl\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"unicorn\"], x = \"b\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\", \"duck\"], x = \"f\")",
        "findWordsContaining(words = [\"dont\", \"look\", \"here\", \"i\", \"found\", \"something\"], x = \"look\")",
        "findWordsContaining(words = [\"qrt\", \"qq\", \"mmy\", \"abc\"], x = \"abc\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 1)",
        "maxSum(nums = [1,2,1,2], m = 1, k = 3)",
        "maxSum(nums = [1, 0, 0, 1, 1], m = 1, k = 4)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [0,0,0,0,0], m = 1, k = 3)",
        "maxSum(nums = [-1, 1, 0], m = 2, k = 4)",
        "maxSum(nums = [2,1,3,2], m = 1, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], m = 5, k = 4)",
        "maxSum(nums = [7, 11, 6, 9, 4], m = 3, k = 4)",
        "maxSum(nums = [-3,2,3,1,5,-2,3,2,2], m = 2, k = 6)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1,2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [3, 3])",
        "relocateMarbles(nums = [1,2], moveFrom = [], moveTo = [])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1, 1, 1], moveTo = [2, 2, 2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1,2], moveTo = [1,2])",
        "relocateMarbles(nums = [1, 2, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 2], moveFrom = [0], moveTo = [0, 0])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1,3,5,7,9])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [2, 3, 4, 1])",
        "minimumRightShifts(nums = [5, 7, 1, 3, 4])",
        "minimumRightShifts(nums = [12, 42, 26, 34, 20, 11, 8, 7, 9])"
    ],
    "sample_314": [
        "buyChoco(prices = [2, 3, 5, 6], money = 5)",
        "buyChoco(prices = [1, 4, 5, 6, 7], money = 10)",
        "buyChoco(prices = [1,2,3,4,5], money = 5)",
        "buyChoco(prices = [3, 2, 5, 4], money = 10)",
        "buyChoco(prices = [1,2,3,4,5], money = 12)",
        "buyChoco(prices = [2, 5, 1, 4, 3], money = 10)",
        "buyChoco(prices = [2, 4, 9], money = 12)",
        "buyChoco(prices = [1, 1, 2, 3, 4, 4], money = 7)",
        "buyChoco(prices = [4, 6, 5, 3, 7, 2], money = 11)",
        "buyChoco(prices = [10, 8, 2, 9, 5, 7], money = 20)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 3, 4, 5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 2, 4], target = 15)",
        "lengthOfLongestSubsequence(nums = [3, 2, 3, 1], target = 5)",
        "lengthOfLongestSubsequence(nums = [5, 4, 1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [3, 1, 3, 5, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [3, 1, 5, 4], target = 16)",
        "lengthOfLongestSubsequence(nums = [2, 9, 3, 10, 4, 11, 5, 12], target = 30)",
        "lengthOfLongestSubsequence(nums = [100, 101, 10, 1, 1000, 1001, 1002, 1003, 1004], target = 28)",
        "lengthOfLongestSubsequence(nums = [26, 98, 20, 41, 28, 77, 80, 88, 30, 67, 69], target = 42)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaaaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbbcccc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaabbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"qweeerq\")",
        "longestSemiRepetitiveSubstring(s = \"acababbababa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabbabbabba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbababaa\")",
        "longestSemiRepetitiveSubstring(s = \"goodluckandmaytheforcbewithyou\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"cat\", \"mat\", \"bat\", \"hat\"], x = \"at\")",
        "findWordsContaining(words = [\"in\", \"out\", \"no\", \"yes\"], x = \"o\")",
        "findWordsContaining(words = [\"abcd\", \"cab\", \"bcde\"], x = \"c\")",
        "findWordsContaining(words = [\"zap\", \"zip\", \"zot\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"pineapple\", \"coconut\"], x = \"a\")",
        "findWordsContaining(words = [\"qqqqq\", \"qxq\", \"qyq\"], x = \"x\")",
        "findWordsContaining(words = [\"apples\", \"orange\", \"bananas\", \"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"codefights\", \"rocks\", \"not\", \"codewars\"], x = \"code\")",
        "findWordsContaining(words = [\"egg\", \"toast\", \"hashbrowns\"], x = \"a\")",
        "findWordsContaining(words = [\"there\", \"hi\", \"was\", \"fear\", \"there\"], x = \"er\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"7\", \"prev\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push\", \"3\", \"push\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"10\", \"prev\", \"11\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"10\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"311\", \"12\", \"prev\", \"prev\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"aabc\", s2 = \"abca\")",
        "canBeEqual(s1 = \"aabc\", s2 = \"abca\")",
        "canBeEqual(s1 = \"abb\", s2 = \"baa\")",
        "canBeEqual(s1 = \"aa\", s2 = \"ab\")"
    ],
    "sample_255": [
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3,4,5,1,2])",
        "minimumSum(nums = [4, 2, 1, 3])",
        "minimumSum(nums = [2,4,6,2,5])",
        "minimumSum(nums = [1,2,3,4,5,6,7])",
        "minimumSum(nums = [4,1,2,7])",
        "minimumSum(nums = [10,15,3,7])",
        "minimumSum(nums = [3, 1, 10, 2])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 5, 2, 8], target = 0)",
        "lengthOfLongestSubsequence(nums = [3, 3, 3, 5, 1], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 2, 3, 4, 9], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "lengthOfLongestSubsequence(nums = [3, 3, 5, 2, 4, 6, 1], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 7, 12, 9, 7, 7, 9, 2, 12, 9, 9, 4, 12, 4, 4, 12], target = 7)"
    ],
    "sample_368": [
        "sortVowels(s = \"plUmpY\")",
        "sortVowels(s = \"plUmpy\")",
        "sortVowels(s = \"impLoY\")",
        "sortVowels(s = \"pHlmY\")",
        "sortVowels(s = \"pythoN\")",
        "sortVowels(s = \"flyme\")",
        "sortVowels(s = \"Hemply\")",
        "sortVowels(s = \"pLynmpH\")",
        "sortVowels(s = 'Lpmy')",
        "sortVowels(s = 'YHxlmp')"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,3,5,7],[2,4,6,8]])",
        "matrixSum(nums = [[1], [1]])",
        "matrixSum(nums = [[2,2,2],[2,2,2]])",
        "matrixSum(nums = [[1], [-1], [10]])",
        "matrixSum(nums = [[1,2,3],[1,5,6],[1,7,10]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [3, 2, 6])",
        "maximumTripletValue(nums = [1, 1, 0])",
        "maximumTripletValue(nums = [1, 3, 5, 7, 9])",
        "maximumTripletValue(nums = [-5, -5, -5])",
        "maximumTripletValue(nums = [-2, 1, 0, 3])",
        "maximumTripletValue(nums = [3, 4, 5, 1, 2])",
        "maximumTripletValue(nums = [-4,-4,-2,0,3])",
        "maximumTripletValue(nums = [-2, 1, 0, 3, -2, 4, -1])",
        "maximumTripletValue(nums = [-6, -2, -8, 3])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray(nums = [4, 2, 5, 3])",
        "alternatingSubarray(nums = [4, 6, 7, 8])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 5, 2, 4, 3, 4, 6])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 1, 6, 7])",
        "alternatingSubarray(nums = [5, 4, 7, 1, 2, 1])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 5, 2, 1, 4, 5, 2, 1, 4, 5, 2, 1])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 8, 6, 7, 6, 3])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 8, 6, 5, 3, 9])",
        "alternatingSubarray(nums = [1, 2, 4, 3, 5, 6, 1])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"bbaacdaae\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiou\", k = 6)",
        "beautifulSubstrings(s = \"babcbabcbaccba\", k = 3)",
        "beautifulSubstrings(s = \"abababa\", k = 2)",
        "beautifulSubstrings(s = \"bacae\", k = 5)",
        "beautifulSubstrings(s = \"ababaca\", k = 2)",
        "beautifulSubstrings(s = \"bazz\", k = 2)",
        "beautifulSubstrings(s = \"yep\", k = 4)"
    ],
    "sample_449": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abcabc\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"zzz\")",
        "minChanges(s = \"aabbaabb\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"000000000\")",
        "minimumSteps(s = \"0000101101\")",
        "minimumSteps(s = \"01011100\")",
        "minimumSteps(s = \"01101000101001\")",
        "minimumSteps(s = \"101110000\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"1234567890121990\", \"1234567890121999\"])",
        "countSeniors(details = [\"123456789123A12\", \"123456789123B14\"])",
        "countSeniors(details = [\"123456789123kumar\", \"123456789123singh\", \"123456789123verma\"])",
        "countSeniors(details=[\"24-01-1998\", \"10-05-2010\"])",
        "countSeniors(details = [\"20121115ZA\", \"20101115ZB\", \"20121215ZC\"])",
        "countSeniors(details = [\"2000120119881235\", \"1986010120010101\"])",
        "countSeniors(details=[\"112221344411\",\"112221344412\",\"112221344413\",\"112221344414\",\"112221344415\",\"112221344416\",\"112221344417\",\"112221344418\",\"112221344419\",\"112221344420\",\"112221344421\",\"112221344422\",\"112221344423\",\"112221344424\",\"112221344425\",\"112221344426\",\"112221344427\",\"112221344428\",\"112221344429\",\"112221344430\"])",
        "countSeniors(details = [\"CSF12-0050123019\", \"ITF12-0040212120\"])",
        "countSeniors(details = [\"P97845219\",\"C123456789\",\"A123456789\",\"C123456789\"])",
        "countSeniors(details = ['2454321214788', '2493293249800'])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minGroupsForValidAssignment(nums = [3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 2, 2, 4])",
        "minGroupsForValidAssignment(nums = [3,3,1,0,1,1,2,2])",
        "minGroupsForValidAssignment(nums = [4,3,3,0])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,1,1,1,3,1,3,3,3,1,1])",
        "minGroupsForValidAssignment(nums = [3,3,1,0,1,0,2,2,2,1,1,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 4, 3, 2, 1, 1, 2, 3, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [24,17,1,8,21,13,10,20,23,12,22,11,14,2,6,19,16,4,18,15,9,7,5,3])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1,2],[2,1],[1,1],[2,2]], k = 1)",
        "countPairs(coordinates = [[1,2],[3,4],[5,6]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,1],[1,0],[2,1]], k = 1)",
        "countPairs(coordinates = [[2, 2], [4, 2], [1, 3], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [1, 2], [2, 1], [2, 3], [3, 2]], k = 1)",
        "countPairs(coordinates = [[1,1],[2,2],[3,3],[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]], k = 1)",
        "countPairs(coordinates = [[1, 4], [2, 3], [1, 5]], k = 2)",
        "countPairs(coordinates = [[1,2],[3,4],[5,6],[7,8],[9,0]], k = 5)",
        "countPairs(coordinates = [[5,1],[5,1],[5,1],[2,0],[5,1],[2,0],[5,1],[5,1],[3,0],[3,0]], k = 3)",
        "countPairs(coordinates = [[4, 5], [7, 8], [6, 9], [10, 7], [8, 5], [3, 5], [7, 3], [7, 5], [6, 8], [7, 9]], k = 4)"
    ],
    "sample_401": [
        "maxSum(nums = [1], m = 1, k = 1)",
        "maxSum(nums = [1, 2, 0, 3], m = 2, k = 2)",
        "maxSum(nums = [0, 0, 0], m = 1, k = 1)",
        "maxSum(nums = [-2, -1, 2, 1], m = 2, k = 2)",
        "maxSum(nums = [-3, 4, -4, 0], m = 2, k = 2)",
        "maxSum(nums = [4, 5], m = 2, k = 2)",
        "maxSum(nums = [0, 0, 0, 0, 0, 0, 0, 0], m = 0, k = 3)",
        "maxSum(nums = [3,2,1,2], m = 3, k = 1)",
        "maxSum(nums = [-2, 2, 5, -10, 3], m = 2, k = 3)",
        "maxSum(nums = [5, -6, 1, 2, 3, 2], m = 1, k = 3)"
    ],
    "sample_452": [
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"fixcbs\")",
        "minChanges(s = \"101001\")",
        "minChanges(s = \"2145\")",
        "minChanges(s = \"aabcbc\")",
        "minChanges(s = \"fdgdttf\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 3, 5, 4], nums2 = [1, 2, 3, 7])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [2,3,4,1])",
        "minOperations(nums1 = [1, 3, 5, 7, 9], nums2 = [2, 4, 6, 8, 10])",
        "minOperations(nums1 = [0,1], nums2 = [1,0])",
        "minOperations(nums1 = [1, 3, 5, 7, 9], nums2 = [1, 3, 5, 7, 9])",
        "minOperations(nums1 = [1, 3, 5, 2, 4, 6, 7], nums2 = [4, 6, 7, 1, 3, 5, 2])",
        "minOperations(nums1 = [0,0,0], nums2 = [1,1,1])",
        "minOperations(nums1 = [1, 2, 3, 5, 4], nums2 = [4, 5, 3, 2, 1])",
        "minOperations(nums1 = [0, 2, 1, 4, 3], nums2 = [0, 1, 2, 4, 3])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"011011000\", k = 2)",
        "shortestBeautifulSubstring(s = \"01111110\", k = 2)",
        "shortestBeautifulSubstring(s = \"111000001\", k = 2)",
        "shortestBeautifulSubstring(s = \"11100011110000\", k = 3)",
        "shortestBeautifulSubstring(s = '0101100110', k = 3)",
        "shortestBeautifulSubstring(s = \"001110011000010101100\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,1,1])",
        "maximumTripletValue(nums = [-1,-1,-1])",
        "maximumTripletValue(nums = [-3,-1,0,3,5,6])",
        "maximumTripletValue(nums = [1,3,2])",
        "maximumTripletValue(nums = [4, 3, 2, 1, 5])",
        "maximumTripletValue(nums = [7,2,5,4])",
        "maximumTripletValue(nums = [-1,0,3,2])",
        "maximumTripletValue(nums = [1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "maximumTripletValue(nums = [3, 2, 4, 1, 1, 1, 1, 2, 3, 2, 4])",
        "maximumTripletValue(nums = [0, -47, 47, 2, 9, 2])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 1, limit = 3)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,4,4])",
        "minGroupsForValidAssignment(nums=[3,5,3,5,3])",
        "minGroupsForValidAssignment(nums = [2,3,1,4,5,8,7,6])",
        "minGroupsForValidAssignment(nums = [2,3,5,2,4,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [10,2,5,6,7,5,2,5,1,2])",
        "minGroupsForValidAssignment(nums = [5, 5, 5, 2, 3, 3, 4, 4, 4, 7])",
        "minGroupsForValidAssignment(nums = [3,4,5,3,3,4,4,3,3,3,4,4,5,5,5,3,4,5,5,5,4])",
        "minGroupsForValidAssignment(nums = [4,13,11,6,3,8,12,9,2,10,1,7,5])",
        "minGroupsForValidAssignment(nums=[1,3,4,7,8,10,11,14,18,21,23,25,27,28,31,32,33,34])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,2,3,4], nums2 = [4,3,2,1])",
        "minSum(nums1 = [10, 2], nums2 = [10, 20])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [1,2], nums2 = [3,4,0,0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [10, 2, 3])",
        "minSum(nums1 = [1, 3, 5], nums2 = [5, 0, 6])",
        "minSum(nums1 = [2, 3, 4, 5, 0, 0, 0], nums2 = [3, 2, 5])",
        "minSum(nums1 = [5, 1, 0, 2], nums2 = [6, 7, 11, 12])",
        "minSum(nums1 = [100000000, 999999999, 100000000, 100000000, 100000000, 100000000, 100000000, 100000000], nums2 = [1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_453": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"101\")",
        "minChanges(s = \"1234\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"redblue\")",
        "minChanges(s = \"20132\")",
        "minChanges(s = \"aacdefgab\")",
        "minChanges(s = \"24872\")",
        "minChanges(s = \"muddin\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"abcdef\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeii\", k = 4)",
        "beautifulSubstrings(s = \"abccba\", k = 1)",
        "beautifulSubstrings(s = \"abab\", k = 1)",
        "beautifulSubstrings(s = \"aiuaae\", k = 2)",
        "beautifulSubstrings(s = \"eiouai\", k = 2)",
        "beautifulSubstrings(s = \"wooky\", k = 2)",
        "beautifulSubstrings(s = \"yaeoeiaeiouu\", k = 5)",
        "beautifulSubstrings(s = \"aeiouuoieaaeii\", k = 1)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abcdef\", k = 2)",
        "beautifulSubstrings(s = \"abcdae\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 5)",
        "beautifulSubstrings(s = \"beautiful\", k = 5)",
        "beautifulSubstrings(s = \"aeeiouu\", k = 5)",
        "beautifulSubstrings(s = \"babcbce\", k = 2)",
        "beautifulSubstrings(s = \"hacktober\", k = 3)"
    ],
    "sample_369": [
        "sortVowels(s = \"apple\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = 'Hello')",
        "sortVowels(s = \"Limp\")",
        "sortVowels(s = \"Ymphl\")",
        "sortVowels(s = 'phLmY')",
        "sortVowels(s = \"HYlmP\")",
        "sortVowels(s = 'Lpmih')",
        "sortVowels(s = \"WlmpH\")",
        "sortVowels(s = 'pLayHym')"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [1, 3, 2])",
        "minimumSeconds(nums = [2, 1, 3, 1, 2])",
        "minimumSeconds(nums = [100000])",
        "minimumSeconds(nums = [2, 3, 1, 2, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 3])",
        "minimumSeconds(nums = [0,1,0,1])",
        "minimumSeconds(nums = [1, 3, 2, 3, 4, 5, 6, 5])",
        "minimumSeconds(nums = [1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])",
        "minimumSeconds(nums = [3, 2, 3, 5, 1, 2, 4, 3, 1, 2, 1])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [2, 4, 7, 1, 5, 3])",
        "minimumSum(nums = [3, 5, 6, 1, 2])",
        "minimumSum(nums = [2, 5, 3, 7])",
        "minimumSum(nums = [2, 5, 7, 10])",
        "minimumSum(nums = [2, 3, 7, 5, 1, 3])",
        "minimumSum(nums = [2, 5, 1, 3, 6])",
        "minimumSum(nums = [2, 4, 7, 3, 1, 5, 6])",
        "minimumSum(nums = [3, 4, 2, 1, 9, 8])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 9)",
        "minOperations(nums = [1, 7, 2, 9, 5], k = 3)",
        "minOperations(nums = [2, 3, 4, 1, 2, 3, 4], k = 6)",
        "minOperations(nums=[4,10,4,3,8,3,1,2], k=4)",
        "minOperations(nums = [7, 3, 1, 4], k = 2)",
        "minOperations(nums = [8, 3, 4, 6, 6, 5, 1], k = 10)",
        "minOperations(nums = [5, 2, 7, 4, 7, 8, 2, 2, 2, 2], k = 4)",
        "minOperations(nums = [7, 3, 8, 3, 5, 2, 6, 2, 2], k = 20)"
    ],
    "sample_400": [
        "maxSum(A = [3, 4, 5, 2, 1, 6, 8], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4], m = 4, k = 2)",
        "maxSum(A = [1,2,3,4,5,6], m = 2, k = 3)",
        "maxSum(A = [2, 1, 2, 2, 1], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], m = 5, k = 4)",
        "maxSum(A = [-3, -3, 3], m = 1, k = 1)",
        "maxSum(A = [2, 1, 4, 3, 3, 2, 4, 5, 5], m = 4, k = 3)",
        "maxSum(A = [3, 1, 1, 2, 3, 3, 4, 4], m = 3, k = 2)",
        "maxSum(A = [-2, -3, 1, -2, 2, -1, -3, 1, 4], m = 2, k = 5)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"000000\")",
        "minimumSteps(s = \"0100110\")",
        "minimumSteps(s = \"001012\")",
        "minimumSteps(s = \"1100101\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 3, 5, 7, 9])",
        "maxSubarrays(nums = [5, 1, 3, 5, 6, 4])",
        "maxSubarrays(nums = [2, 6, 9, 3, 10])",
        "maxSubarrays(nums = [0, 1, 2, 5, 7, 10])",
        "maxSubarrays(nums = [2, 5, 3, 2])",
        "maxSubarrays(nums = [20, 21, 22, 23, 24])",
        "maxSubarrays(nums = [2, 1, 5, 5, 2, 4, 6])",
        "maxSubarrays(nums = [123, 45, 678, 102, 45])",
        "maxSubarrays(nums = [1,3,5,2,6,8,2,1,3,6,5])",
        "maxSubarrays(nums = [42, 78, 35, 49, 21, 35, 54, 25])"
    ],
    "sample_319": [
        "buyChoco(prices = [3, 1], money = 4)",
        "buyChoco(prices = [1, 1], money = 2)",
        "buyChoco(prices = [1, 1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 1, 2], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [10, 20, 50], money = 30)",
        "buyChoco(prices = [1, 1, 2, 5], money = 10)",
        "buyChoco(prices = [1, 1, 1, 4], money = 3)",
        "buyChoco(prices = [100, 25, 130, 175], money = 200)"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3,3,3,2,2,4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [2, 3, 3, 0, 0, 2, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [4,2,2,4,4,2,2])",
        "minLengthAfterRemovals(nums = [4,4,2,2,4,2,4,4,2])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 4)",
        "minOperations(nums = [1, 1, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "minOperations(nums = [1,2,2,1], k = 2)",
        "minOperations(nums = [8, 1, 2, 2], k = 2)",
        "minOperations(nums = [1, 2, 4, 2, 1], k = 3)",
        "minOperations(nums = [5, 6, 7, 9, 11], k = 3)",
        "minOperations(nums = [3, 3, 1, 4, 5, 6, 7, 8, 9, 10], k = 5)"
    ],
    "sample_363": [
        "isGood(nums = [0,1,2,3,4,5])",
        "isGood(nums = [0,1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [0, 1, 2])",
        "isGood(nums = [0, 1, 2])",
        "isGood(nums = [0, 1, 2, 3, 4, 4])",
        "isGood(nums = [1, 2, 3, 3, 4])",
        "isGood(nums = [1, 2, 3, 3, 4, 5])"
    ],
    "sample_325": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 123)",
        "isFascinating(n = 31)",
        "isFascinating(n = 990)",
        "isFascinating(n = 208)",
        "isFascinating(n = 228)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3,3,5])",
        "isGood(nums = [1,2,3,2])",
        "isGood(nums = [1,2,3,4,5,5,6])",
        "isGood(nums = [1, 3, 2, 2])",
        "isGood(nums = [1,1,2,4])",
        "isGood(nums = [2,1,2,3])",
        "isGood(nums = [3,2,1,2,3])",
        "isGood(nums = [1, 3, 4, 3])",
        "isGood(nums = [1,3,3,4,4,5])",
        "isGood(nums = [1, 2, 4, 5, 5, 5, 5])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [4, 2, 2, 5, 3])",
        "minimumSeconds(nums = [0, 0, 0, 0])",
        "minimumSeconds(nums = [2, 2, 1, 2, 2])",
        "minimumSeconds(nums = [3, 1])",
        "minimumSeconds(nums = [1, 2, 2, 1, 2])",
        "minimumSeconds(nums = [2, 3, 5, 9])",
        "minimumSeconds(nums = [4, 2, 2, 5, 3, 5, 1, 2, 4])",
        "minimumSeconds(nums = [4, 2, 2, 5, 3, 1])",
        "minimumSeconds(nums = [0, 1, 2, 4, 8, 16])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1])",
        "minimumRightShifts(nums = [1])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [0])",
        "minimumRightShifts(nums = [0])",
        "minimumRightShifts(nums = [1, 0, 0])",
        "minimumRightShifts(nums = [1, 3, 4])",
        "minimumRightShifts(nums = [1,3,4,5,6])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9, 11, 13])",
        "minimumRightShifts(nums = [2, 4, 0, 1, 3])"
    ],
    "sample_362": [
        "isGood(nums = [1,2,3,5])",
        "isGood(nums = [1,2,3,4,4])",
        "isGood(nums = [3, 1, 2, 4])",
        "isGood(nums = [1,3,4,2])",
        "isGood(nums = [1, 3, 5, 2])",
        "isGood(nums = [2, 4, 1, 5, 3])",
        "isGood(nums = [3, 5, 6])",
        "isGood(nums = [4, 2, 1, 3, 4])",
        "isGood(nums = [1,2,4,3,5,6,8,7])",
        "isGood(nums = [0, 3, 5, 6, 7, 8, 9])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,3,5,7,9], nums2 = [2,4,6,8,10])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1,2,4,16,32], nums2 = [8,4,2,1,1])",
        "minOperations(nums1 = [2, 1, 2], nums2 = [2, 1, 2])",
        "minOperations(nums1 = [2, 3, 2], nums2 = [5, 1, 2])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [2,4,2,4])",
        "minOperations(nums1 = [2,4,1], nums2 = [2,1,4])",
        "minOperations(nums1 = [2, 2, 3], nums2 = [2, 4, 2])",
        "minOperations(nums1 = [2, 2, 3, 1], nums2 = [2, 2, 2, 3])",
        "minOperations(nums1 = [2, 1, 5, 4, 1], nums2 = [3, 4, 7, 4, 8])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1231234\", k = 2)",
        "shortestBeautifulSubstring(s = \"123123\", k = 2)",
        "shortestBeautifulSubstring(s = \"101100101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1112211\", k = 3)",
        "shortestBeautifulSubstring(s = \"10111000111100\", k = 3)",
        "shortestBeautifulSubstring(s = \"101001101100101\", k = 3)",
        "shortestBeautifulSubstring(s = \"535759531\", k = 3)",
        "shortestBeautifulSubstring(s = \"91284565711\", k = 2)",
        "shortestBeautifulSubstring(s = \"413423412314132113111113111\", k = 4)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [3,5,6,9])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,4])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 3, 3, 2, 4, 4])",
        "minGroupsForValidAssignment(nums = [5, 1, 3, 2, 2])",
        "minGroupsForValidAssignment(nums = [5, 2, 5, 3, 6, 3, 1, 1, 1])"
    ],
    "sample_289": [
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"10001\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0010111101\")",
        "minimumSteps(s = \"0101010101010101\")",
        "minimumSteps(s = \"001011000\")",
        "minimumSteps(s = \"0101010101010101010101010101010101010\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 5, 7, 8], target = 0)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 1, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7], target = 1)",
        "lengthOfLongestSubsequence(nums = [10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], target = 55)",
        "lengthOfLongestSubsequence(nums = [5, 15, 4], target = 11)",
        "lengthOfLongestSubsequence(nums = [2, 1, 5, 3, 6, 1, 6, 8, 2], target = 6)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5,6,7])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8])",
        "minimumSum(nums = [8,3,6,1,7])",
        "minimumSum(nums = [-3, 2, -3, 4, 2])",
        "minimumSum(nums = [4,5,1,3,2])",
        "minimumSum(nums = [3,4,2,3,4])",
        "minimumSum(nums = [2,3,4,4,2,5,1])",
        "minimumSum(nums = [2147483644,2147483645,2147483646,2147483647])",
        "minimumSum(nums = [2, 3, 4, 5, 5, 2, 2, 2, 2])",
        "minimumSum(nums = [5, 3, 1, 2, 3, 4, 3, 2, 9])"
    ],
    "sample_398": [
        "maxSum(nums = [-2, -1, 0], m = 1, k = 1)",
        "maxSum(nums = [7, 9, 2, 5, 0, 3], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 0, 1, 0], m = 2, k = 2)",
        "maxSum(nums = [-2, 2, 0, 2, 2], m = 2, k = 3)",
        "maxSum(nums = [3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [-7, 5, 2, -7], m = 2, k = 3)",
        "maxSum(nums = [2,10,4,7,1,5,2], m = 1, k = 3)",
        "maxSum(nums = [7, 10, 7, 10, 10, 5, 5, 5], m = 2, k = 2)",
        "maxSum(nums = [7, 3, 1, 5, 7, 7, 5, 1, 4], m = 8, k = 3)",
        "maxSum(nums = [1, 2, -5, 0, 3, 2, -3, 3, 4, 5], m = 9, k = 4)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"hij\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"xy\")",
        "findMinimumOperations(s1 = \"abx\", s2 = \"aby\", s3 = \"adz\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"catt\", s3 = \"cattt\")",
        "findMinimumOperations(s1 = \"abd\", s2 = \"adb\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"ac\", s3 = \"ad\")",
        "findMinimumOperations(s1 = \"bbba\", s2 = \"bba\", s3 = \"aaa\")"
    ],
    "sample_427": [
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 3, 3])",
        "minOperations(nums = [3,1,4,3,4])",
        "minOperations(nums = [3,3,2])",
        "minOperations(nums = [1,1,1,3,3,4,4])",
        "minOperations(nums = [6, 3, 6, 12])",
        "minOperations(nums = [2, 2, 2, 3, 10])",
        "minOperations(nums = [1, 1, 2, 3, 3, 4, 5, 4, 4, 4])",
        "minOperations(nums = [3, 4, 1, 1, 5, 4, 1])",
        "minOperations(nums = [13, 18, 5, 21, 1, 19, 23, 3, 10])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1,2,3,1])",
        "minimumCoins(prices = [1, 3, 5, 7])",
        "minimumCoins(prices = [1,1,1,1])",
        "minimumCoins(prices = [1,2,3,2])",
        "minimumCoins(prices = [2, 5, 1, 3, 4])",
        "minimumCoins(prices = [1,2,4,8])",
        "minimumCoins(prices = [1, 3, 5, 7, 9])",
        "minimumCoins(prices = [1,3,5,8,2])",
        "minimumCoins(prices = [3,1,5,1,2])",
        "minimumCoins(prices = [1,2,5,3,7,5,5,5,7])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [2, 1, 3, 2])",
        "minimumSeconds(nums = [0])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [1,2,4,5])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [2,2,1,2,2])",
        "minimumSeconds(nums = [0, 3, 4])",
        "minimumSeconds(nums = [0, 0, 1, 0, 1])",
        "minimumSeconds(nums = [2, 3, 5, 1, 5, 8, 3])",
        "minimumSeconds(nums = [2,2,3,3,4,5,8,10,15,15,16,16])"
    ],
    "sample_448": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"010\")",
        "minChanges(s = \"10101\")",
        "minChanges(s = \"13245\")",
        "minChanges(s = \"ffm\")",
        "minChanges(s = \"01020303040404050505\")",
        "minChanges(s = \"EfF\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [3, 5, 8, 9, 1], limit = 7)",
        "lexicographicallySmallestArray(nums = [8, 5, 1, 9, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 2, 5, 8], limit = 3)",
        "lexicographicallySmallestArray(nums = [9, 5, 3, 8, 1], limit = 6)",
        "lexicographicallySmallestArray(nums = [4, 9, 8, 1, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [3, 2, 1, 9, 8, 5], limit = 5)",
        "lexicographicallySmallestArray(nums = [0, 2, 4, 8, 7], limit = 10)",
        "lexicographicallySmallestArray(nums = [2, 2, 5, 6, 8], limit = 3)",
        "lexicographicallySmallestArray(nums = [4, 12, 5, 9, 8], limit = 3)",
        "lexicographicallySmallestArray(nums = [6, 6, 9, 9, 4], limit = 6)"
    ],
    "sample_445": [
        "sumCounts(nums = [1])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums=[1])",
        "sumCounts(nums = [1, 1])",
        "sumCounts(nums=[1,2,3])",
        "sumCounts(nums = [0, 1])",
        "sumCounts(nums = [0, 0])",
        "sumCounts(nums = [3, 2, 1])",
        "sumCounts(nums = [2, 2])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-1,0,1])",
        "maximumTripletValue(nums = [-1,0,-2,1])",
        "maximumTripletValue(nums = [-1, 2, -1])",
        "maximumTripletValue(nums = [1, 3, -2])",
        "maximumTripletValue(nums = [-4,-2,1,-5,-6])",
        "maximumTripletValue(nums = [1, 3, 2, 6])",
        "maximumTripletValue(nums = [-1, 4, 9, 7])",
        "maximumTripletValue(nums = [-4,-2,1,3,5,0,-5])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 13)",
        "beautifulSubstrings(s = \"asasasasa\", k = 4)",
        "beautifulSubstrings(s = \"aabaa\", k = 3)",
        "beautifulSubstrings(s = \"aeiouuoiea\", k = 2)",
        "beautifulSubstrings(s = \"bbaababaab\", k = 1)",
        "beautifulSubstrings(s = \"suunny\", k = 2)",
        "beautifulSubstrings(s = \"aabbcc\", k = 12)",
        "beautifulSubstrings(s = \"abasasn\", k = 3)",
        "beautifulSubstrings(s = \"hzrrjuuaeuuaorulhob\", k = 24)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1,1,2,1,1], target = 3)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1,1,2,3,3,4,4], target = 5)",
        "countPairs(nums = [1,2,3, 4], target = 7)",
        "countPairs(nums = [2,3,1], target = 6)",
        "countPairs(nums = [1, 3, 5, 2, 2, 4], target = 7)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 11, limit = 5)",
        "distributeCandies(n = 20, limit = 3)",
        "distributeCandies(n = 9, limit = 5)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 3], nums2 = [2, 4])",
        "minOperations(nums1 = [1, 2], nums2 = [3])",
        "minOperations(nums1 = [1, 3, 5, 7, 9], nums2 = [9, 7, 5, 3, 1])",
        "minOperations(nums1 = [2, 3, 3], nums2 = [1, 1, 2])",
        "minOperations(nums1 = [2, 3, 7], nums2 = [5, 5, 7])",
        "minOperations(nums1 = [1, 1, 2], nums2 = [2, 2, 3])",
        "minOperations(nums1 = [2, 4, 9], nums2 = [3, 6, 10])",
        "minOperations(nums1 = [1, 2, 3, 5, 7, 9], nums2 = [2, 4, 6, 8, 10, 12])",
        "minOperations(nums1 = [2,4,7,9,12], nums2 = [12,14,15,16,17])",
        "minOperations(nums1 = [3,5,6,2], nums2 = [3,3,7,2])"
    ],
    "sample_426": [
        "minOperations(nums = [1,2,2,4])",
        "minOperations(nums = [1,2,2,4])",
        "minOperations(nums = [1,2])",
        "minOperations(nums = [6, 3, 3, 3, 3])",
        "minOperations(nums = [2, 2, 1, 2, 4, 2])",
        "minOperations(nums = [2,2,2,3])",
        "minOperations(nums = [2, 3, 1, 2, 4, 3])",
        "minOperations(nums = [1,2,1,3,1])",
        "minOperations(nums = [2, 2, 1, 2, 1, 1, 1, 1, 1])",
        "minOperations(nums = [3, 2, 3, 3, 2, 4, 4, 4, 3, 3, 2, 4, 4, 4, 3])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111100\", k = 2)",
        "shortestBeautifulSubstring(s = \"001100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110100\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"010011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"010011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"01110011011110\", k = 3)",
        "shortestBeautifulSubstring(s = '11001101111', k = 2)",
        "shortestBeautifulSubstring(s = 'bbabaaabbbbaaabaaaaabbbbbbbbbbaaabbbbbbaaabbabbbaabaaaabaab', k = 5)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [0,2,1,3,5,4])",
        "minimumSeconds(nums = [1, 2, 2, 1, 1, 3])",
        "minimumSeconds(nums = [7, 8])",
        "minimumSeconds(nums = [10, 0, 5])",
        "minimumSeconds(nums = [1, 2, 4, 16, 32, 1024])",
        "minimumSeconds(nums = [1, 2, 4, 16, 32, 128])",
        "minimumSeconds(nums = [3, 1, 3, 3, 2])",
        "minimumSeconds(nums = [4, 9, 4, 9, 4, 4, 9, 4, 9, 4])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 2, 2, 2])",
        "minOperations(nums = [3,1,2])",
        "minOperations(nums = [3, 1, 2])",
        "minOperations(nums = [3, 1, 3, 4, 4])",
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations(nums = [3, 1, 4, 3, 4, 4])",
        "minOperations(nums = [1,1,1,1,1,2,2,2])",
        "minOperations(nums = [1,2,3,5,4,2])",
        "minOperations(nums = [8, 5, 7, 8, 7])",
        "minOperations(nums = [12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 1, 6, 7, 8, 9, 0])",
        "alternatingSubarray(nums = [1, 3, 2, 1, 4, 3, 5, 2])",
        "alternatingSubarray(nums = [1, 3, 5, 3, 1, 6])",
        "alternatingSubarray(nums = [4, 6, 7, 8, 5, 9, 3, 5, 7, 2])",
        "alternatingSubarray(nums = [2,1,3,1,2,4,3,3])",
        "alternatingSubarray(nums = [1, 2, 4, 1, 6, 7, 9, 7])",
        "alternatingSubarray(nums = [2, 1, 4, 5, 6, 7, 3, 11, 8, 12, 9])",
        "alternatingSubarray(nums = [6, 4, 8, 11, 3])",
        "alternatingSubarray(nums = [6, 2, 7, 4, 7, 8, 1, 6, 3])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [3,3,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minLengthAfterRemovals(nums = [3,3,3,2,2,1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [7, 11, 11, 11])",
        "minLengthAfterRemovals(nums = [7, 6, 4, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6])",
        "minLengthAfterRemovals(nums = [5, 3, 4, 2, 2, 3, 3, 1, 4, 3])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyxy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xyy\", \"yyx\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"cab\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"ba\", \"dc\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"moo\", \"ananab\", \"cow\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"sd\", \"ss\", \"ama\", \"pa\", \"pad\", \"ay\", \"rd\"])",
        "maximumNumberOfStringPairs(words = [\"dog\", \"cat\", \"baad\", \"step\", \"yoyogi\", \"kot\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"axbycz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"qwer\")",
        "canMakeSubsequence(str1 = \"aac\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"ahbgdc\", str2 = \"efg\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"cabd\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"qrs\")",
        "canMakeSubsequence(str1 = \"axb\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"baz\", str2 = \"bzn\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"baby\", str2 = \"abbby\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabab\")",
        "longestSemiRepetitiveSubstring(s = \"abcddc\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbc\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcdabcdab\")",
        "longestSemiRepetitiveSubstring(s = \"semirepetitive\")",
        "longestSemiRepetitiveSubstring(s = \"abcddbabc\")",
        "longestSemiRepetitiveSubstring(s = \"qtxde\")",
        "longestSemiRepetitiveSubstring(s = \"baacbac\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1,2,3], m = 1, k = 2)",
        "maxSum(nums = [1,2,3], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,2], m = 1, k = 2)",
        "maxSum(nums = [-1,1,-1,1,-1], m = 3, k = 2)",
        "maxSum(nums = [2,1,3,3,2], m = 2, k = 2)",
        "maxSum(nums = [-1,2,-4,0,2], m = 2, k = 3)",
        "maxSum(nums = [1, 0, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [2,1,5,6,11,10], m = 3, k = 2)",
        "maxSum(nums = [2,3,-1,4,-5,-5,-5,-5,3], m = 3, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"cool\", \"lock\", \"cook\"], x = \"c\")",
        "findWordsContaining(words = [\"aba\", \"abc\"], x = \"a\")",
        "findWordsContaining(words = [\"str\", \"cat\", \"home\"], x = \"a\")",
        "findWordsContaining(words = [\"lol\", \"hi\", \"lo\"], x = \"o\")",
        "findWordsContaining(words = [\"red\", \"green\", \"blue\", \"black\", \"white\", \"pink\"], x = \"e\")",
        "findWordsContaining(words = [\"bob\", \"joe\", \"carl\"], x = \"o\")",
        "findWordsContaining(words = [\"go\", \"no\", \"yes\", \"hi\"], x = \"o\")",
        "findWordsContaining(words = [\"c\",\"cat\",\"schat\",\"satchel\"], x = \"at\")",
        "findWordsContaining(words = [\"dee\", \"ghost\", \"coder\", \"noob\"], x = \"ee\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1, 1, 2], moveFrom = [1, 1], moveTo = [2, 2])",
        "relocateMarbles(nums = [2, 3, 3], moveFrom = [2, 3], moveTo = [3, 2])",
        "relocateMarbles(nums = [2,2,3], moveFrom = [2,1], moveTo = [3,1])",
        "relocateMarbles(nums = [2,2,3,3,3,4,4,5,5,5], moveFrom = [4,5], moveTo = [2,3])",
        "relocateMarbles(nums = [2,2,3,3,4,5,5,6,6,7,7], moveFrom = [1,2,3,4], moveTo = [4,5,6,7])",
        "relocateMarbles(nums = [2, 3, 3, 2, 3], moveFrom = [1, 3, 4], moveTo = [0, 2, 3])",
        "relocateMarbles(nums=[1,1,2,2,2,3,3,4], moveFrom=[0,3,5,7], moveTo=[2,4,7,6])",
        "relocateMarbles(nums = [2,2,3,3,4,5,1,4,4], moveFrom = [2,4,3], moveTo = [3,1,2])",
        "relocateMarbles(nums = [0,1,1,2,2,3,3,3,4,5,5,5,5,5,5], moveFrom = [2,5,5], moveTo = [2,5,5])",
        "relocateMarbles(nums = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],\n                          moveFrom = [22,48,100,20,98,60,61,84,66,92,68,88,33,47,37,82,57,53,5,24,26,69,89,41,91,8,29,13,38,36,62,18,51,46,49,31,86,21,30,97,45,52,87,42,14,70,96,50,54,55,44,25,40,99,58,80,65,81,93,72,56,90,23,35,95,73,74,43,19,32,64,39,76,94,27,67,28,78,12,15,71,83,17,75,79,7,63,85,16,5"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [-1, 0, 2])",
        "maximumTripletValue(nums = [1, 0, 3, 4])",
        "maximumTripletValue(nums = [1, -2, 3, 0, -10])",
        "maximumTripletValue(nums = [3, 5, 1, 3, 5])",
        "maximumTripletValue(nums = [-5, 8, 7, -2, 3])",
        "maximumTripletValue(nums = [5, 5, 100, 4, 4, 4])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"qwerqwe\")",
        "longestSemiRepetitiveSubstring(s = \"ababdaba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbabbbba\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcdea\")",
        "longestSemiRepetitiveSubstring(s = \"bbcdefghb\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"c\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"A\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yx\", \"xi\"])",
        "maximumNumberOfStringPairs(words = [\"bob\", \"bo\", \"boa\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"mango\", \"nan\", \"ana\", \"ban\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"bac\",\"aaa\",\"abb\",\"cca\"])",
        "maximumNumberOfStringPairs(words = [\"string\", \"apple\", \"pineapple\", \"apple\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[0, 1, 2], [3, 4, 5], [6, 7, 8]])",
        "matrixSum(nums = [[0,1],[1,2]])",
        "matrixSum(nums = [[0,1,2],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1], [1, 2]])",
        "matrixSum(nums = [[1,2,3],[2,3,1],[1,1,2]])",
        "matrixSum(nums = [[-2, 2, 1], [-8, 8, 1], [-3, -2, 4]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"banana\", s3 = \"dog\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"fgh\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"fgh\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"bcdea\", s3 = \"cdefa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"d\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"acc\", s3 = \"cbb\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abx\", s3 = \"abz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"adc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"aa\", s3 = \"b\")"
    ],
    "sample_324": [
        "isFascinating(n = 100)",
        "isFascinating(n = 100)",
        "isFascinating(n = 1)",
        "isFascinating(n = 15)",
        "isFascinating(n = 10)",
        "isFascinating(n = 123)",
        "isFascinating(n = 3)",
        "isFascinating(n = 9)",
        "isFascinating(n = 45)",
        "isFascinating(n = 451)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [2,5,1,3,7])",
        "minimumCoins(prices = [5,3,7,4,8,1,9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1,5,9,19])",
        "minimumCoins(prices = [1, 3, 1, 2, 1])",
        "minimumCoins(prices = [1, 2, 5, 3, 6, 8, 7, 2])",
        "minimumCoins(prices = [4,2,2,1,1,5])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,1,2,2,3,3,4,4], target = 4)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 4)",
        "countPairs(nums = [1,2,3,4,1,2], target = 5)",
        "countPairs(nums = [1, 1, 2, 2, 3, 4, 5], target = 4)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [3,5,6,7,9])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [3,4,3,0,3,3,1])",
        "minGroupsForValidAssignment(nums = [5,4,3,2,3,2,4,5,3])",
        "minGroupsForValidAssignment(nums = [3,4,5,8,8,12,16,20,18])",
        "minGroupsForValidAssignment(nums = [8, 3, 7, 4, 4, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [3,3,1,6,3,4,5,6,2,7,3,8,8,10,9,10,5,2,2,10,4,7,2,8,3,9,3,2,5,9,9,5])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 1, 2], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 2, 3], target = 6)",
        "countPairs(nums = [1, 1, 1, 1], target = 3)",
        "countPairs(nums = [2, 2, 4, 9], target = 10)",
        "countPairs(nums = [3,0,2,1,3], target = 5)"
    ],
    "sample_317": [
        "buyChoco(prices = [2, 3, 5, 6], money = 5)",
        "buyChoco(prices = [1, 1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1,2,3,4,5], money = 4)",
        "buyChoco(prices = [2, 3, 5, 6, 7], money = 10)",
        "buyChoco(prices = [1,1,2,3,4], money = 4)",
        "buyChoco(prices = [1, 1, 4, 2, 3], money = 4)",
        "buyChoco(prices = [5, 3, 2, 6], money = 10)",
        "buyChoco(prices = [1, 1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [5, 3, 2, 1, 4], money = 5)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"this\", \"that\", \"this\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xa\"])",
        "maximumNumberOfStringPairs(words = [\"aaa\", \"aa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"xyxyxx\",\"yxyxxxy\",\"xxxxxyy\",\"xyyyyy\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"b\",\"c\",\"b\", \"a\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"this\",\"that\",\"did\",\"deed\",\"them!\",\"ate\",\"want\"])",
        "maximumNumberOfStringPairs(words = [\"securian\", \"bank\", \"bank\", \"bank\", \"bank\", \"securian\", \"securian\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotceded\")",
        "sortVowels(s = 'leotcede')",
        "sortVowels(s = \"letcede\")",
        "sortVowels(s = \"tecoled\")",
        "sortVowels(s = \"Electrote\")",
        "sortVowels(s = \"Elite\")",
        "sortVowels(s = \"edcetleO\")",
        "sortVowels(s = \"eDlce\")",
        "sortVowels(s = \"lETeCdoEd\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1,2,1])",
        "sumCounts(nums = [3, 4, 3])",
        "sumCounts(nums = [1,2,3,1])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [2, 3, 1, 2])",
        "minimumCoins(prices = [1, 5, 7])",
        "minimumCoins(prices = [2, 4, 7])",
        "minimumCoins(prices = [1, 2, 5, 2])",
        "minimumCoins(prices = [3, 1, 1, 2, 2, 1])",
        "minimumCoins(prices = [0, 1, 2, 5, 6])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 20, m = 6)"
    ],
    "sample_307": [
        "countSeniors(details = [\"12345678\", \"23456789\", \"34567890\"])",
        "countSeniors(details = [\"12345695\", \"25345695\", \"45345695\", \"55345695\"])",
        "countSeniors(details = [\"123587\", \"123589\", \"123591\", \"123692\", \"123693\"])",
        "countSeniors(details = [\"P 234567 34\", \"F 123456 12\"])",
        "countSeniors(details = [\"3020220\", \"2810210\", \"2901210\", \"2912220\"])",
        "countSeniors(details = [\"23051981T\", \"02051985M\", \"01012001M\", \"01011999M\"])",
        "countSeniors(details = [\"1902abd\",\"2000bcd\", \"1968efg\", \"2001lmn\"])",
        "countSeniors(details = [\"11114199\", \"12345678\", \"44445678\", \"11114189\"])",
        "countSeniors(details = [\"2103221891\", \"2103245456\", \"2103234895\"])",
        "countSeniors(details = [\"U320111K1\", \"U180199K4\", \"U180048K2\", \"U270099K9\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 7)",
        "isFascinating(n = 7)",
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 10)",
        "isFascinating(n = 5)",
        "isFascinating(n = 20)",
        "isFascinating(n = 100)",
        "isFascinating(n = 100)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"011101\")",
        "minimumBeautifulSubstrings(s = \"daily\")",
        "minimumBeautifulSubstrings(s = \"12345567890\")",
        "minimumBeautifulSubstrings(s = \"abaabaaabaa\")",
        "minimumBeautifulSubstrings(s = \"320011002003000\")",
        "minimumBeautifulSubstrings(s = \"dabdcdcdcd\")",
        "minimumBeautifulSubstrings(s = \"bdaecdbaeeaaaeecbdea\")",
        "minimumBeautifulSubstrings(s = \"01110100100111011011\")",
        "minimumBeautifulSubstrings(s = \"fawdnfawfdawfeaw\")",
        "minimumBeautifulSubstrings(s = \"70776636571447653657\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n=10, limit=5)"
    ],
    "sample_419": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [1,1,2,2,3,3,4,4], k = 3)",
        "minOperations(nums = [2,3,1,5,4], k = 2)",
        "minOperations(nums = [5, 6, 7, 8, 1, 2, 3, 4], k = 3)",
        "minOperations(nums = [8, 4, 2, 1, 3], k = 2)",
        "minOperations(nums = [1,2,3,4,5,1,2,3], k = 1)",
        "minOperations(nums = [3,1,3,5,7,7,3,4,1], k = 7)",
        "minOperations(nums = [5, 6, 8, 2, 3, 7, 6, 4, 2], k = 4)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [2, 2, 2])",
        "sumCounts(nums = [0,1])",
        "sumCounts(nums = [2,1,3])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push\",\"2\",\"push\",\"1\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"i\", \"love\", \"leetcode\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"last\",\"2\",\"prev\",\"1\",\"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 5)",
        "minOperations(nums = [1,3,4], k = 4)",
        "minOperations(nums = [1, 2, 4, 5, 7, 8, 9, 11], k = 5)",
        "minOperations(nums = [1, 1, 2, 2, 3, 1, 1, 3], k = 3)",
        "minOperations(nums = [2, 2, 3, 2, 1, 3, 5, 4], k = 3)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abbbac\")",
        "longestSemiRepetitiveSubstring(s = \"abcddcba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcacabcac\")",
        "longestSemiRepetitiveSubstring(s = \"fuzzybunnybunny\")",
        "longestSemiRepetitiveSubstring(s = \"sasasd\")",
        "longestSemiRepetitiveSubstring(s = \"acbbaaacb\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1])",
        "sumCounts(nums = [3, 1, 2, 3])",
        "sumCounts(nums = [3, 1, 3, 4])",
        "sumCounts(nums = [2, 1, 2, 2, 3])",
        "sumCounts(nums = [3, 1, 2, 3, 4, 5, 3])",
        "sumCounts(nums = [3,3,3,1,1,3])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"101111\", k = 2)",
        "shortestBeautifulSubstring(s = '11001100', k = 2)",
        "shortestBeautifulSubstring(s = \"101110001\", k = 2)",
        "shortestBeautifulSubstring(s = '10111000', k = 2)",
        "shortestBeautifulSubstring(s = \"0111000011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"0100110100100010\", k = 2)",
        "shortestBeautifulSubstring(s = \"00011100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"00010000001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1000011000\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"0123456789\")",
        "minimumBeautifulSubstrings(s = \"011\")",
        "minimumBeautifulSubstrings(s = \"bbbaacdaa\")",
        "minimumBeautifulSubstrings(s = \"1234567890\")",
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(s = \"123456789\")",
        "minimumBeautifulSubstrings(s = \"000055550000\")",
        "minimumBeautifulSubstrings(s = \"aaaabbabbbb\")",
        "minimumBeautifulSubstrings(s = \"bbbba\")",
        "minimumBeautifulSubstrings(s = \"3200120000\")"
    ],
    "sample_341": [
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 4, y = 5, z = 6)",
        "longestString(x = 1, y = 3, z = 4)",
        "longestString(x = 1, y = 4, z = 7)",
        "longestString(x = 2, y = 4, z = 5)",
        "longestString(x = 2, y = 7, z = 5)",
        "longestString(x = 4, y = 1, z = 4)",
        "longestString(x = 10, y = 5, z = 5)",
        "longestString(x = 2, y = 12, z = 4)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3, 4], [5, 6, 7, 8], [1, 2, 3, 4], [5, 6, 0, 8]])",
        "findChampion(grid = [[-1,1,-1],[1,-1,1],[0,1,0]])",
        "findChampion(grid = [[-5, 2, 5], [1, 6, 3], [-3, 4, 7]])",
        "findChampion(grid = [[-1, 2, 3], [4, 5, -1], [6, -1, -1]])",
        "findChampion(grid = [[1, -2, 0], [4, -1, 3], [-5, 2, 6]])",
        "findChampion(grid = [[1, 2, 3], [0, 1, 0], [3, 0, 2]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [-1, 1, -2], [1, 1, 1]])",
        "findChampion(grid = [[2, 9, 4, 7], [2, 1, 4, 9], [5, 3, 1, 8]])",
        "findChampion(grid = [[1, -2, -8, 3], [-12, -7, 14, 7], [5, 2, 8, -11], [14, -16, 7, -9]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\", k = 3)",
        "beautifulSubstrings(s = \"ab\", k = 1)",
        "beautifulSubstrings(s = \"aeioubc\", k = 2)",
        "beautifulSubstrings(s = \"asd\", k = 3)",
        "beautifulSubstrings(s = \"bbbbbbbbbb\", k = 4)",
        "beautifulSubstrings(s = \"hubba\", k = 4)",
        "beautifulSubstrings(s = \"abcda\", k = 3)",
        "beautifulSubstrings(s = \"bcbcdbcaec\", k = 3)",
        "beautifulSubstrings(s = \"sdfeffrff\", k = 5)",
        "beautifulSubstrings(s = \"hhhhhhoooooowwwwweeeeeeyyyeeeeeyoooooouuuuwwwwaaaahhhhh\", k = 3)"
    ],
    "sample_304": [
        "countSeniors(details = [\"Doe,John,1980\", \"Doe,Jane,1970\"])",
        "countSeniors(details = [\"1/10/1999\", \"1/11/1999\", \"1/12/1999\"])",
        "countSeniors(details = [\"3202112019\", \"3212112029\", \"3222112039\"])",
        "countSeniors(details = [\"120101\", \"600101\", \"690101\"])",
        "countSeniors(details = [\"101-20-1234\", \"515-01-4567\", \"515-01-1234\"])",
        "countSeniors(details = [\"abcd,123456,1991\", \"def,234567,1992\", \"ghi,345678,1993\"])",
        "countSeniors(details = [\"27-05-1995\", \"03-09-1993\", \"04-03-1959\", \"23-09-2001\"])",
        "countSeniors(details = [\"1015151515\", \"980320\", \"02112012\"])",
        "countSeniors(details = [\"11/12/1945\", \"12/12/1965\", \"01/01/2020\", \"11/02/1971\", \"22/01/1988\"])",
        "countSeniors(details = ['A101b35219900360', 'A102b25199101150'])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [-5, -5, -5])",
        "maximumTripletValue(nums = [4, -3, 5, -2, -1, 2, 6, -2])",
        "maximumTripletValue(nums = [9, 9, 7, 8])",
        "maximumTripletValue(nums = [4, 2, 5, -1, 2, 3, 0])",
        "maximumTripletValue(nums = [-1, -4, 2, 1, 0, 5])",
        "maximumTripletValue(nums = [-3, 1, -5, -2, 8])",
        "maximumTripletValue(nums = [-3, 1, -2, 3, -3, 0, -4])",
        "maximumTripletValue(nums = [11, 13, 14, 31, 23, 32, 25, 12])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"011101\")",
        "minimumBeautifulSubstrings(s = \"1234567890\")",
        "minimumBeautifulSubstrings(s = \"123\")",
        "minimumBeautifulSubstrings(s = \"011001001\")",
        "minimumBeautifulSubstrings(s = \"bbaacdaa\")",
        "minimumBeautifulSubstrings(s = \"0010011101\")",
        "minimumBeautifulSubstrings(s = \"11001111\")",
        "minimumBeautifulSubstrings(s = \"125363261\")",
        "minimumBeautifulSubstrings(s = \"10110110110110000110000000110\")",
        "minimumBeautifulSubstrings(s
    ],
    "sample_429": [
        "maxSubarrays(nums = [0, 0, 0, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 0])",
        "maxSubarrays(nums = [2, 2, 0, 2, 2])",
        "maxSubarrays(nums = [1, 0, 3, 4, 2])",
        "maxSubarrays(nums = [0, 1, 2, 3, 0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 0, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 0, 1, 1, 0, 1, 0])",
        "maxSubarrays(nums = [0, 1, 0, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 0, 5, 6, 2, 3])",
        "maxSubarrays(nums = [3, 2, 5, 7, 1, 1, -1, -2, 3])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2], b = [3, 4])",
        "minOperations(a = [1, 2], b = [2, 1])",
        "minOperations(a = [3, 2, 1, 4], b = [3, 1, 4, 2])",
        "minOperations(a = [1,2,0], b = [3,4,5])",
        "minOperations(a = [2, 3, 1, 5], b = [1, 5, 2, 3])",
        "minOperations(a = [2, 0, 1], b = [0, 2, 4])",
        "minOperations(a = [3, 4, 5, 6], b = [2, 2, 2, 2])",
        "minOperations(a = [2, 3, 4, 5, 6, 1], b = [1, 2, 4, 5, 3, 6])",
        "minOperations(a = [1,3,4,7], b = [2,3,5,6])",
        "minOperations(a = [5, 5, 6, 7, 7], b = [4, 4, 6, 7, 6])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"bdc\", \"acef\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"aa\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"me\", \"as\", \"d\", \"s\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"b\",\"ac\",\"ba\"])",
        "minimizeConcatenatedLength(words = [\"hoqq\", \"bbbbb\", \"ixxyzz\"])",
        "minimizeConcatenatedLength(words = [\"bat\", \"apple\", \"ant\"])",
        "minimizeConcatenatedLength(words = [\"cc\", \"ccc\", \"a\", \"ccc\"])",
        "minimizeConcatenatedLength(words = [\"abcd\",\"ec\",\"ya\",\"bzzzz\"])",
        "minimizeConcatenatedLength(words = [\"aaaaa\",\"aaaa\",\"aaaaa\",\"aaaa\",\"aaaaa\",\"aaaaa\",\"aaaa\",\"aaaa\",\"aaaaa\",\"aaaa\",\"aaaa\",\"aaaaa\",\"aaaa\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"apple\")",
        "sortVowels(s = \"apple\")",
        "sortVowels(s = \"pYlmph\")",
        "sortVowels(s = \"plUmpH\")",
        "sortVowels(s = \"pleumph\")",
        "sortVowels(s = 'plUmp')",
        "sortVowels(s = \"pHlmY\")",
        "sortVowels(s = \"pileup\")",
        "sortVowels(s = \"pMlHy\")",
        "sortVowels(s = 'ImprOvE')"
    ],
    "sample_446": [
        "sumCounts(nums = [1])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [0, 0, 1])",
        "sumCounts(nums = [3, 2, 1])",
        "sumCounts(nums = [1, 2, 2, 3])"
    ],
    "sample_256": [
        "minimumSum(nums = [3, 4, 3, 2, 5])",
        "minimumSum(nums = [2, 3, 7, 5, 4, 5])",
        "minimumSum(nums = [10,8,5,4,9])",
        "minimumSum(nums = [1,3,2,4,7])",
        "minimumSum(nums = [1, 3, 0, 4, 2, 5])",
        "minimumSum(nums = [3, 7, 4, 9, 8, 6, 7])",
        "minimumSum(nums = [84, 45, 2, 1, 6])",
        "minimumSum(nums = [-3, 6, -10, 4, -5, 3])",
        "minimumSum(nums = [3, 2, 4, 1, 1, 2, 3, 5])",
        "minimumSum(nums = [-2,0,7,-4,-3,2,4,-2,0,4,-5])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 1], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 0]])",
        "findChampion(grid = [[1,2,3],[0,0,0],[1,2,3]])",
        "findChampion(grid = [[1,2,3],[0,0,1],[0,0,1]])",
        "findChampion(grid = [[0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]])",
        "findChampion(grid = [[1,0,1,0,1],[0,0,0,0,0],[0,0,0,0,1]])",
        "findChampion(grid = [[2, 1, 2], [0, 0, 0], [2, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1]])"
    ],
    "sample_372": [
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"letcode\")",
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"leotced\")",
        "sortVowels(s = \"Love\")",
        "sortVowels(s = 'Learning123')",
        "sortVowels(s = \"tEcedleoO\")",
        "sortVowels(s = \"latexcede\")",
        "sortVowels(s = \"leeTce\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"01010100\")",
        "minimumSteps(s = \"00101100\")",
        "minimumSteps(s = \"0010111\")",
        "minimumSteps(s = \"0010111\")",
        "minimumSteps(s = \"010100\")",
        "minimumSteps(s = \"010101001\")",
        "minimumSteps(s = \"010011001\")",
        "minimumSteps(s = \"1010101\")",
        "minimumSteps(s = \"10110111\")",
        "minimumSteps(s = \"000011110000111101101110\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19])",
        "minimumRightShifts(nums = [8, 9])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [4, 5, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25])",
        "minimumRightShifts(nums = [5, 7, 3, 4])",
        "minimumRightShifts(nums = [5, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [4, 2, 5, 10, 8])"
    ],
    "sample_425": [
        "minOperations(nums = [1,1,1,1])",
        "minOperations(nums = [3, 1, 3, 2])",
        "minOperations(nums = [1, 2, 3, 3, 2, 1])",
        "minOperations(nums = [1,2,3,1,1,3])",
        "minOperations(nums = [5, 2, 3, 3, 2, 5])",
        "minOperations(nums = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3])",
        "minOperations(nums = [4, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [2, 2, 1, 2, 2, 3, 5])",
        "minOperations(nums = [3,2,1,4,5,6,4,3,4,3,4])",
        "minOperations(nums = [12, 10, 24, 11, 10, 24])"
    ],
    "sample_367": [
        "sortVowels(s = \"pleum\")",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"pHlmpY\")",
        "sortVowels(s = \"plUmp\")",
        "sortVowels(s = \"Limph\")",
        "sortVowels(s = \"HiLpM\")",
        "sortVowels(s = 'Ymphl')",
        "sortVowels(s = \"pumpHlYme\")",
        "sortVowels(s = \"Hi mum, I am doing well.\")",
        "sortVowels(s = \"Hi loL mpH lmpH\")"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 2, 1], [1, 0, 2], [2, 1, 0]])",
        "findChampion(grid = [[0, 2, 3], [1, 4, 5], [7, 8, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 2], [0, 1, 0]])",
        "findChampion(grid = [[0,1,1,1],[0,0,0,1],[0,1,0,0]])",
        "findChampion(grid = [[0, 0, 1, 0, 1],\n                            [1, 0, 0, 0, 0],\n                            [0, 1, 0, 1, 0],\n                            [0, 0, 1, 0, 0],\n                            [0, 0, 0, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [0, 0], nums2 = [1, 0])",
        "minSum(nums1 = [1, 1, 2], nums2 = [2, 1, 2])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 0], nums2 = [1, 2, 3, 4, 5, 0])",
        "minSum(nums1 = [0, 2, 1], nums2 = [3, 4])",
        "minSum(nums1 = [1, 1, 1, 0, 1], nums2 = [0, 1, 0, 1, 1])",
        "minSum(nums1 = [1, 4, 3, 7], nums2 = [4, 2, 5, 3])",
        "minSum(nums1 = [2, 0, 6], nums2 = [5, 9, 1])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 5)",
        "minOperations(nums = [4,3,1,2], k = 2)",
        "minOperations(nums = [2, 2, 2, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 3, 4, 5, 2], k = 3)",
        "minOperations(nums = [1, 5, 2, 4, 3], k = 2)",
        "minOperations(nums = [2, 2, 1, 10, 20], k = 10)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1,2], moveFrom = [1,1], moveTo = [1,2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1, 1], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1, 1], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [0, 1], moveTo = [1, 0])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [1, 3])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [4,4])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [0, 2, 1], moveTo = [2, 1, 0])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [3,4], moveTo = [3,1])"
    ],
    "sample_402": [
        "maxSum(nums = [-1, -5, -10], m = 1, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], m = 4, k = 6)",
        "maxSum(nums = [2, 2, 1, 1, 3, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 0, 3, 4, 5, 6, 7, 8, 9], m = 1, k = 2)",
        "maxSum(nums = [-1, 0, 0], m = 1, k = 2)",
        "maxSum(nums = [4, 3, 4, 4, 4, 2], m = 2, k = 3)",
        "maxSum(nums = [-1,-2,-3,4,-5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
        "maxSum(nums = [3, 4, 5, 1, 1, 5, 8, 1, 2], m = 6, k = 4)",
        "maxSum(nums = [-5, 3, 3, 5, 5, 3, -1, 1, -2, -2, 2], m = 2, k = 3)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"xyz\", s2 = \"yz\")",
        "canMakeSubsequence(s1 = \"abca\", s2 = \"bca\")",
        "canMakeSubsequence(s1 = \"abcz\", s2 = \"zac\")",
        "canMakeSubsequence(s1 = \"abcz\", s2 = \"zaa\")",
        "canMakeSubsequence(s1 = \"zyx\", s2 = \"yzx\")",
        "canMakeSubsequence(s1 = \"b\", s2 = \"cab\")",
        "canMakeSubsequence(s1 = \"azd\", s2 = \"zd\")",
        "canMakeSubsequence(s1 = \"abcbacd\", s2 = \"bdc\")",
        "canMakeSubsequence(s1 = \"zyxwvutsrqponmlkj\", s2 = \"mnkj\")",
        "canMakeSubsequence(s1 = \"bazx\", s2 = \"zbya\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1,2], nums2 = [3])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [2, 4, 0, 1])",
        "minSum(nums1 = [1, 2, 4, 2], nums2 = [4, 5])",
        "minSum(nums1 = [5, 2, 3, 0], nums2 = [5, 2, 3])",
        "minSum(nums1 = [3, 2, 0], nums2 = [3, 3, 4])",
        "minSum(nums1 = [0, 3, 5], nums2 = [7, 0])",
        "minSum(nums1 = [5, 2, 4, 1], nums2 = [6, 1, 4, 2])",
        "minSum(nums1 = [1, -1, 5], nums2 = [2, -2, 1, 4])",
        "minSum(nums1 = [2,3,2,4,5,6,7], nums2 = [1,2,3,4,5,6])",
        "minSum(nums1 = [0, 44, 44], nums2 = [1, 2, 1000])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"999\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"0\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"49\", \"prev\", \"51\"])"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [1, 0, 2, 4, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "isGood(nums = [1, 2, 0, 3])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10])",
        "isGood(nums = [1,3,2,0,4,5])"
    ],
    "sample_424": [
        "minOperations(nums = [3,1,3,4,3])",
        "minOperations(nums = [2,3,2,2,3])",
        "minOperations(nums = [1,1,2,2,2,3,3,3])",
        "minOperations(nums = [8,3,5,1])",
        "minOperations(nums = [1,2,3,2,2,2,2,2,2,2,2,2,2,2,2])",
        "minOperations(nums = [3,5,7,1,2,3,5,7])",
        "minOperations(nums = [1,1,2,2,2,2,2,4,4,4,4])",
        "minOperations(nums = [5,4,3,2,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4])",
        "minOperations(nums = [1,2,3,3,1,2,2,1,2,3,4,5,5,5,4])",
        "minOperations(nums = [5,5,5,1,4,4,3,4,3,4,2,1])"
    ],
    "sample_451": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"fixfuck\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"AABABBA\")",
        "minChanges(s = \"AaBb\")",
        "minChanges(s = \"ABA\")",
        "minChanges(s = \"xxyxy\")",
        "minChanges(s = \"ACGTTGCAT\")"
    ],
    "sample_461": [
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 12, limit = 3)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1,3,5,7,9], nums2 = [2,4,6,8,10])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1,2,3,4,5,6], nums2 = [1,2,3,4,5,6])",
        "minSum(nums1 = [1,3,5,7], nums2 = [1,3,5,7])",
        "minSum(nums1 = [1,2,3,4], nums2 = [4, 3, 2, 1])",
        "minSum(nums1 = [1,2,3,4], nums2 = [5,0,0,4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 0, 0])",
        "minSum(nums1 = [2,2,2], nums2 = [1,1,3])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 2, 1, 4, 5])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [0, 1, 2])",
        "minimumRightShifts(nums = [3, 2, 1, 0])",
        "minimumRightShifts(nums = [2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1])"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8], t = 6)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1,2,3,4,5,6], t = 6)",
        "countPairs(nums = [1, 1, 2, 3, 4], t = 4)",
        "countPairs(nums = [1, 1, 2, 1, 2], t = 4)",
        "countPairs(nums = [1,2,3,2], t = 5)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4], t = 5)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"9\", \"push\", \"7\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"5\", \"push\", \"4\", \"push\", \"3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"add\", \"3\", \"visit\", \"1\", \"sub\", \"3\"])",
        "lastVisitedIntegers(words = [\"i\", \"p\", \"p\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"1\", \"2\", \"p\", \"p\", \"p\", \"3\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"a\", \"p\", \"z\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"insert\", \"5\", \"insert\", \"10\", \"print\", \"first\"])",
        "lastVisitedIntegers(words = [\"push\", \"3\", \"push\", \"8\", \"push\", \"9\", \"pop\", \"push\", \"7\", \"pop\"])",
        "lastVisitedIntegers(words = [\"i 3\", \"i 2\", \"p\", \"i 4\"])",
        "lastVisitedIntegers(words = [\"push\", \"99\", \"push\", \"75\", \"pop\", \"push\", \"11\", \"pop\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ae\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abd\", str2 = \"bac\")",
        "canMakeSubsequence(str1 = \"cde\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"bacde\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"cbab\")",
        "canMakeSubsequence(str1 = \"aaaaa\", str2 = \"aba\")",
        "canMakeSubsequence(str1 = \"bac\", str2 = \"azcbobobegfast\")",
        "canMakeSubsequence(str1 = \"szz\", str2 = \"zzq\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2], nums2 = [3,0,4])",
        "minSum(nums1 = [1,2,3], nums2 = [4,0,1])",
        "minSum(nums1 = [1,2,4,5], nums2 = [8,9,0,0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 6])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [8, 0])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,4,5])",
        "minSum(nums1 = [0, 2, 4], nums2 = [5, 0, 1])",
        "minSum(nums1 = [2, 3, 1, 0], nums2 = [2, 2, 4, 1])",
        "minSum(nums1 = [2,2,4,5], nums2 = [1,1,2,2])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0,0],[0,1],[1,1],[1,0]], k = 1)",
        "countPairs(coordinates = [[1,2],[2,1],[1,3],[3,1]], k = 3)",
        "countPairs(coordinates = [[1,2],[2,1],[1,3],[3,1]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,1],[1,0],[2,0]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [1, 3], [3, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0,0],[2,0],[0,2],[1,1],[2,2]], k = 1)",
        "countPairs(coordinates = [[2,3],[4,3],[5,2],[6,3],[8,3],[9,3],[10,3]], k = 4)",
        "countPairs(coordinates = [[5,7],[6,6],[9,1],[1,0],[3,2]], k = 2)",
        "countPairs(coordinates = [[1, 3], [2, 1], [3, 2], [2, 4], [4, 2], [5, 3], [2, 2], [3, 1], [1, 2], [2, 3], [3, 3], [5, 2]], k = 1)",
        "countPairs(coordinates = [[3, 4], [4, 5], [0, 0], [0, 3], [4, 3], [4, 4], [9, 1], [5, 2], [10, 2], [7, 3]], k = 5)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yy\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"xy\",\"yy\",\"xy\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"bc\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"foo\"])",
        "maximumNumberOfStringPairs(words = [\"the\",\"eye\",\"of\",\"the\",\"word\"])",
        "maximumNumberOfStringPairs(words = [\"xyxy\",\"yxyx\",\"wwwwxxwwww\",\"xxxxxx\",\"yyyyyy\"])",
        "maximumNumberOfStringPairs(words = [\"for\",\"aft\",\"fat\",\"bat\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [2, 0, 2, 2, 0])",
        "maxStrength(nums = [2, -10, -2, -4, -6])",
        "maxStrength(nums = [1, 2, 3, -4, -5, 6])",
        "maxStrength(nums = [1, 0, 1, 0, 1])",
        "maxStrength(nums = [1,2,3,4,5,6,7,-8,-9])",
        "maxStrength(nums = [-2,0,0,-2,0])",
        "maxStrength(nums = [1, 0, 2, 3, -4, -4, -2])",
        "maxStrength(nums = [1,2,-1,0,-3,2])",
        "maxStrength(nums = [2, -3, 3, -1, -2, 2, 2, 2, 2])",
        "maxStrength(nums = [9, 4, 6, -10, -7])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 3, 1, 2, 2])",
        "minimumCoins(prices = [1, 5, 7])",
        "minimumCoins(prices = [1, 1, 1, 2, 1])",
        "minimumCoins(prices = [1, 3, 9, 5])",
        "minimumCoins(prices = [0, 3, 1, 2, 2])",
        "minimumCoins(prices = [1, 1, 1, 5, 2, 3])",
        "minimumCoins(prices = [10, 1, 6, 1, 2, 3])",
        "minimumCoins(prices = [10, 3, 4, 7, 8, 2])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [3,1,2,3])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [3,3,3,2,2,4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minLengthAfterRemovals(nums = [1, 1, 0, 2, 0, 4, 0])",
        "minLengthAfterRemovals(nums = [5,1,3,4,4])",
        "minLengthAfterRemovals(nums = [7, 7, 7, 7, 4, 4, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 1, 3, 2, 3, 2, 3, 2, 3])"
    ],
    "sample_318": [
        "buyChoco(prices = [4, 6], money = 10)",
        "buyChoco(prices = [1, 4, 5, 3, 2], money = 10)",
        "buyChoco(prices = [2, 3, 5, 1, 4], money = 10)",
        "buyChoco(prices = [4, 6, 5, 3], money = 10)",
        "buyChoco(prices = [2, 3], money = 2)",
        "buyChoco(prices = [1,1,2,3,4], money = 7)",
        "buyChoco(prices = [2, 3, 5, 6], money = 4)",
        "buyChoco(prices = [0, 0], money = 1)",
        "buyChoco(prices = [10, 5, 7], money = 20)",
        "buyChoco(prices = [2,1,3,9,19,2], money = 20)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"next\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"next\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"1\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"4\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2])",
        "sumCounts(nums = [3, 3])",
        "sumCounts(nums = [2, 1, 2])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [2,2,2])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 5, 6, 8, 9], moveFrom = [5, 8], moveTo = [8, 5])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7], moveTo = [6])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 9, 8], moveFrom = [5, 9], moveTo = [8, 6])",
        "relocateMarbles(nums = [5, 8, 9, 10], moveFrom = [10, 5], moveTo = [5, 10])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [1,2,3], moveTo = [5,6,7])",
        "relocateMarbles(nums = [3, 5, 6, 8], moveFrom = [3, 6], moveTo = [1, 2])",
        "relocateMarbles(nums = [3, 4, 5, 7, 8], moveFrom = [3, 4], moveTo = [5, 9])",
        "relocateMarbles(nums = [1, 2, 4, 5, 6, 8], moveFrom = [2, 4, 6], moveTo = [6, 2, 1])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"dba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bdb\")",
        "canMakeSubsequence(str1 = \"bca\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"aaa\", str2 = \"aba\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"baba\")",
        "canMakeSubsequence(str1 = \"abcdb\", str2 = \"acdb\")",
        "canMakeSubsequence(str1 = \"bcc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"acb\", str2 = \"aazb\")",
        "canMakeSubsequence(str1 = \"baby\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"bacdef\", str2 = \"ce\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"red\", \"green\", \"blue\"], x = \"e\")",
        "findWordsContaining(words = [\"cat\", \"car\", \"fear\", \"center\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"bear\"], x = \"a\")",
        "findWordsContaining(words = [\"go\", \"bat\", \"me\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"shrek\"], x = \"a\")",
        "findWordsContaining(words = [\"orange\", \"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"bob\", \"xyx\", \"cat\"], x = \"b\")",
        "findWordsContaining(words = [\"pig\", \"cow\", \"horse\", \"bobcat\"], x = \"o\")",
        "findWordsContaining(words = [\"myname\", \"myschool\", \"homework\"], x = \"my\")",
        "findWordsContaining(words = [\"chicken\", \"nuggets\", \"hello\", \"the\", \"world\"], x = \"o\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,3],[2,5]])",
        "matrixSum(nums = [[0, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "matrixSum(nums = [[2, 2, 1], [1, 1, 2], [1, 2, 2]])",
        "matrixSum(nums = [[0, 1, 2], [7, 8, 9], [13, 14, 15]])",
        "matrixSum(nums = [[1,0,3], [0,2,0], [4,5,6]])",
        "matrixSum(nums = [[1,0,0],[0,0,3],[1,2,0]])",
        "matrixSum(nums = [[0,0,0,1],[0,3,0,0],[0,0,0,0],[0,0,0,0]])",
        "matrixSum(nums = [[0,2,3,2],[5,2,4,3],[0,4,5,3],[3,3,4,1]])"
    ],
    "sample_316": [
        "buyChoco(a = [3, 1], money = 4)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [1,2], money = 3)",
        "buyChoco(a = [2, 3, 5], money = 5)",
        "buyChoco(a = [10, 10], money = 20)",
        "buyChoco(a = [10, 4], money = 14)",
        "buyChoco(a = [2, 1, 3], money = 3)",
        "buyChoco(a = [1, 1, 2], money = 2)",
        "buyChoco(a = [5, 1], money = 6)",
        "buyChoco(a = [2, 3, 4], money = 8)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [3,1])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 4])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [5, 1, 4, 2, 9])",
        "minGroupsForValidAssignment(nums = [8, 4, 3, 3, 2, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 5, 6, 7, 4, 5])",
        "minGroupsForValidAssignment(nums = [5, 1, 1, 2, 2, 2, 3, 5])",
        "minGroupsForValidAssignment(nums = [4, 1, 4, 7, 2, 2, 4, 3, 2, 1, 4, 1])",
        "minGroupsForValidAssignment(nums = [27, 43, 42, 33, 17, 14, 24, 27, 33])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [2, 3, 4, 2])",
        "minimumRightShifts(nums = [1,3,2,4,5])",
        "minimumRightShifts(nums = [5, 8, 1, 3, 4])",
        "minimumRightShifts(nums = [2, 1, 1, 0])",
        "minimumRightShifts(nums = [15, 16, 7, 6, 8])",
        "minimumRightShifts(nums = [6, 2, 7, 3, 5, 1, 4])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [5, 6, 2, 3, 10])",
        "maxStrength(nums = [5, 6, 2, 2, 1])",
        "maxStrength(nums = [4, 3, 2, 1, 5])",
        "maxStrength(nums = [6, 4, 5])",
        "maxStrength(nums = [2, 6, 9, 2, 5])",
        "maxStrength(nums = [8, 3, 7, 9])",
        "maxStrength(nums = [3, 5, -7, 8, 1])",
        "maxStrength(nums = [1, 5, 3, 7, 7, 7])",
        "maxStrength(nums = [8, 6, 2, 2, 2])"
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 5, limit = 4)",
        "distributeCandies(n = 5, limit = 4)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 2, 2, 4])",
        "minLengthAfterRemovals(nums = [3, 1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [3, 2, 3, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 2])",
        "minLengthAfterRemovals(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [4, 2, 3, 1, 2, 3, 2, 1, 1, 2, 3, 4])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"dog\", \"racecar\", \"car\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"is\", \"cut\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"deer\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"cater\", \"matter\"], x = \"at\")",
        "findWordsContaining(words = [\"test\", \"pest\", \"best\"], x = \"est\")",
        "findWordsContaining(words = [\"abab\", \"ba\", \"aba\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"diet\", \"tacos\"], x = \"t\")",
        "findWordsContaining(words = [\"code\", \"doce\", \"fode\"], x = \"o\")",
        "findWordsContaining(words = [\"supercalifragilisticexpialidocious\", \"expialidocious\"], x = \"c\")",
        "findWordsContaining(words = [\"yabba\", \"doofus\", \"aabbba\"], x = \"a\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 1], [0, 0, 1, 0], [0, 1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0],\n                            [0, 1, 0, 0, 0],\n                            [0, 0, 1, 0, 0],\n                            [0, 0, 0, 1, 0],\n                            [0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0,1,1,0], [0,1,0,1], [0,0,1,1], [1,0,1,0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [2, 1, 4, 3])",
        "maxSubarrays(nums = [2, 2, 2, 2, 2])",
        "maxSubarrays(nums = [1, 1, 0, 4, 1])",
        "maxSubarrays(nums = [2, 1, 4, 1])",
        "maxSubarrays(nums = [2, 4, 3, 8])",
        "maxSubarrays(nums = [-1,0,0,1])",
        "maxSubarrays(nums = [-2, -1, 1, 0, 1, -1, 2])",
        "maxSubarrays(nums = [-1,0,1,0])",
        "maxSubarrays(nums = [3, 4, 2, 5, 1])",
        "maxSubarrays(nums = [2, -1, 2, -2, 2, 3, -1])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"rhythms\", k = 2)",
        "beautifulSubstrings(s = \"rhythms\", k = 3)",
        "beautifulSubstrings(s = \"caba\", k = 2)",
        "beautifulSubstrings(s = \"education\", k = 5)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,1])",
        "minimumSeconds(nums = [1000000000, 1000000000])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])",
        "minimumSeconds(nums = [2, 1, 1, 1, 1])",
        "minimumSeconds(nums = [1, 10, 100, 1000, 10000, 100000])",
        "minimumSeconds(nums = [1, 1, 2, 2, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [5, 8, 4])",
        "minimumSeconds(nums = [1, 1, 1, 3, 2, 1, 3])"
    ],
    "sample_327": [
        "isFascinating(n = 2)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 3)",
        "isFascinating(n = 15)",
        "isFascinating(n = 15)",
        "isFascinating(n = 22)",
        "isFascinating(n = 22)",
        "isFascinating(n = 228)",
        "isFascinating(n = 71874)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 1, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [-2, -1, 1, 2], target = 2)",
        "lengthOfLongestSubsequence(nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], target = 0)",
        "lengthOfLongestSubsequence(nums = [-2,2,-3,4,-5,6,-7,8,-9,10], target = 1)",
        "lengthOfLongestSubsequence(nums = [4, 5, 1, 0, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [4, 6, 4, 6, 9], target = 2)",
        "lengthOfLongestSubsequence(nums = [3, 4, 5, 6, 7, 3, 6, 7, 9], target = 27)",
        "lengthOfLongestSubsequence(nums = [-2, -1, 0, 0, 1, 1, 3, 4, 7, 8, 10, 10, 11, 13, 15, 16, 18, 21], target = 9)",
        "lengthOfLongestSubsequence(nums = [-2,-1,0,-3,-5,-6,-1,4,-7,-2,-3,2,0,-1,-4,-5], target = 6)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3], [4,5,6]])",
        "matrixSum(nums = [ [1], [2, 3]])",
        "matrixSum(nums = [[0, 3, 5], [1, 2, 4]])",
        "matrixSum(nums = [[3,4,5],[1,2,3],[4,5,6]])",
        "matrixSum(nums = [[3, 5, 8], [4, 7, 9]])"
    ],
    "sample_326": [
        "isFascinating(n = 111)",
        "isFascinating(n = 999)",
        "isFascinating(n = 7)",
        "isFascinating(n = 7)",
        "isFascinating(n = 239)",
        "isFascinating(n = 42)",
        "isFascinating(n = 542)",
        "isFascinating(n = 13)",
        "isFascinating(n = 34)",
        "isFascinating(n = 53)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1,1,1],[1,1,1],[0,1,0]])",
        "findChampion(grid = [[1,1,0,0], [1,1,1,1], [0,1,1,1], [0,0,0,1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [3, 1, 4, 2])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3,1,2,4])",
        "minimumSum(nums = [3, 5, 2, 1, 4])",
        "minimumSum(nums = [1, 3, 10, 2, 4])",
        "minimumSum(nums = [1,2,4,5,3,0])",
        "minimumSum(nums = [2, 3, 5, 4, 1, 6])",
        "minimumSum(nums = [5, 8, 4, 3, 2, 9])",
        "minimumSum(nums = [3, 4, 7, 5, 8, 4, 10, 9, 2])"
    ],
    "sample_450": [
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aaabbbb\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"aababb\")",
        "minChanges(s = \"abcdde\")",
        "minChanges(s = \"AAAAAAAAAAAAAAAABBBBB\")",
        "minChanges(s = \"xxfxx\")",
        "minChanges(s = \"aabbbccddbcc\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"010\", s2 = \"110\", x = 3)",
        "minOperations(s1 = \"10100\", s2 = \"10111\", x = 7)",
        "minOperations(s1 = \"101\", s2 = \"000\", x = 3)",
        "minOperations(s1 = \"10001\", s2 = \"11111\", x = 4)",
        "minOperations(s1 = \"00101\", s2 = \"11100\", x = 10)",
        "minOperations(s1 = \"10110\", s2 = \"01110\", x = 7)",
        "minOperations(s1 = \"0000\", s2 = \"1111\", x = 4)",
        "minOperations(s1 = \"10001\", s2 = \"11000\", x = 5)",
        "minOperations(s1 = \"101\", s2 = \"010\", x = 5)",
        "minOperations(s1 = \"11101\", s2 = \"10001\", x = 5)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 1, y = 1, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 1, z = 3)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 1, y = 1, z = 5)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1,2,4,8,16])",
        "maxSubarrays(nums = [2, 1, 5, 2, 5, 2])",
        "maxSubarrays(nums = [0,1,1,0])",
        "maxSubarrays(nums = [1, 2, 0, 5, 7, 16, 8])",
        "maxSubarrays(nums = [0, 1, 0, 2, 0, 4, 0, 6, 0, 8])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [3, 3, 3, 0, 3, 4, 3, 3, 3])",
        "maxSubarrays(nums = [1, 0, 2, 1, 3, 4, 5, 6, 2])"
    ],
    "sample_306": [
        "countSeniors(details = [\"S1234567A999999\",\"S8888888A888888\"])",
        "countSeniors(details = [\"John 12\", \"Lisa 34\", \"Mary 56\", \"Jake 42\"])",
        "countSeniors(details = [\"xxx, 45xxx\", \"xxx, 62xxx\", \"xxx, 54xxx\", \"xxx, 60xxx\"])",
        "countSeniors(details = [\"1. John 23\", \"2. Bob 56\", \"3. Sarah 80\", \"4. Jane 44\"])",
        "countSeniors(details = [\"Linda Sullivan, 58\", \"Jim Adams, 49\", \"Anne Davis, 63\"])",
        "countSeniors(details = [\"Sandra,f,59\", \"Ursula,f,62\", \"Brigitte,f,48\", \"Peter,m,72\", \"Bob,m,49\"])",
        "countSeniors(details = ['S1:A12:61:F', 'S2:A14:15:M', 'S3:A11:60:F'])",
        "countSeniors(details = [\"michael 70 new york\", \"eric 35 dallas\", \"jess 64 tokyo\"])",
        "countSeniors(details = [\"Ms. Ann Mathew (age 61)\", \"Mr. G (age 62)\", \"Ms. Bo C (age 40)\", \"Mr. R (age 50)\"])",
        "countSeniors(details = [\"Doe, Jane, 123, 123-45-6789\", \"Doe, John, 45, 987-65-4321\", \"Doe, Grandma, 83, 834-54-6327\", \"Doe, Grandpa, 83, 834-54-6328\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1,0,1,1,0])",
        "maxSubarrays(nums = [0, 0, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 0, 0, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 0, 1, 1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 4, 0, 1, 2, 3, 4])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [5, 7], moveTo = [8, 6])",
        "relocateMarbles(nums = [2, 3, 5, 6], moveFrom = [2, 3], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [5, 8], moveTo = [7, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 4], moveTo = [3, 3])",
        "relocateMarbles(nums = [5, 6, 9, 8], moveFrom = [5, 8], moveTo = [9, 6])",
        "relocateMarbles(nums = [1, 3, 4, 5, 8], moveFrom = [1, 3, 5], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [1, 2, 3, 5, 8, 9], moveFrom = [1, 3, 5], moveTo = [2, 3, 5])",
        "relocateMarbles(nums = [1, 2, 3, 5, 8, 9, 6], moveFrom = [1, 3], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 5, 8], moveTo = [1, 6, 5])",
        "relocateMarbles(nums = [6, 5, 7, 8, 9], moveFrom = [0, 2], moveTo = [2, 1])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xzy\", s3 = \"yxz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"acc\", s3 = \"ace\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"abf\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"dfe\")",
        "findMinimumOperations(s1 = \"food\", s2 = \"dear\", s3 = \"lord\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcdf\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"ddf\", s2 = \"fdd\", s3 = \"ddf\")",
        "findMinimumOperations(s1 = \"dq\", s2 = \"dk\", s3 = \"q\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3,2,2,3])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3,1,2,3,2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,5,5,6,6,7,7,8,8,9,9])",
        "minLengthAfterRemovals(nums = [4,2,4,2,4,2])",
        "minLengthAfterRemovals(nums = [2,3,4,1,2,3,4,1,1,1,1,2,3,4])",
        "minLengthAfterRemovals(nums = [8, 7, 1, 1, 5, 5, 6, 6])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 4, offers = [[3, 4, 5], [1, 2, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 4], [2, 3, 7], [3, 3, 6]])",
        "maximizeTheProfit(n = 5, offers = [[3, 4, 10], [4, 5, 5], [2, 4, 15]])",
        "maximizeTheProfit(n = 5, offers = [(2, 3, 10), (1, 5, 5), (3, 4, 8)])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 3], [2, 5, 1], [3, 5, 5], [2, 4, 7]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 3], [2, 3, 2], [3, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 6], [1, 2, 3], [4, 3, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 5], [3, 3, 6], [3, 4, 1]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 7], [2, 4, 5], [5, 6, 3], [5, 6, 4]])",
        "maximizeTheProfit(n = 6, offers = [[2,4,4],[3,5,4],[4,6,1],[5,6,1]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [1,4,5], m = 3)",
        "canSplitArray(nums = [1,2,1,2,1,2,1,2,1,2], m = 3)",
        "canSplitArray(nums = [5,2,4], m = 5)",
        "canSplitArray(nums = [2, 2, 1, 1, 2], m = 4)",
        "canSplitArray(nums = [2,2,2,2,2,2,2,2,2,2], m = 50)",
        "canSplitArray(nums = [12,11,10,9,8,7,6,5,4,3,2,1], m = 20)",
        "canSplitArray(nums = [2,3,9,10,12,13,14,15,16], m = 25)",
        "canSplitArray(nums = [191,330,520], m = 500)"
    ],
    "sample_106": [
        "checkArray(nums = [2, 2, 2, 2], k = 2)",
        "checkArray(nums = [2, 2, 2, 4], k = 2)",
        "checkArray(nums = [3, 2, 1, 2, 1], k = 2)",
        "checkArray(nums = [2, 1, 3, 2, 2, 2], k = 2)",
        "checkArray(nums = [10, 2, 3, 4, 7, 2], k = 5)",
        "checkArray(nums = [2, 1, 3, 1, 1, 2], k = 3)",
        "checkArray(nums = [3,4,3,1], k = 2)",
        "checkArray(nums = [0, 4, 7], k = 2)",
        "checkArray(nums = [1, 5, 2, 7, 6], k = 1)",
        "checkArray(nums = [8, 4, 3, 5, 0, 1, 7], k = 3)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 5, 4], k = 3)",
        "maximumBeauty(nums = [1, 2, 3], k = 3)",
        "maximumBeauty(nums = [1, 5, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 5, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1,2,3,5,7,8,9,10], k = 3)",
        "maximumBeauty(nums = [4, 9, 10, 11, 14], k = 2)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"apples\", \"bananas\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"h-e-l-l-o\", \"w-o-r-l-d\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"c++\", \"java\", \"python\"], separator = \"+\")",
        "splitWordsBySeparator(words = [\"apples&oranges\", \"banana|tomato\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"apples#oranges\", \"bananas#pears#apricots\"], separator = \"#\")",
        "splitWordsBySeparator(words = [\"a\", \"ab\", \"c\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"cool\", \"dude\", \"fantastic\"], separator = \"e\")",
        "splitWordsBySeparator(words = [\"baby\", \"don't\", \"hurry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"H!e\", \"ll!o\", \"W!orl!d\"], separator = \"!\")"
    ],
    "sample_226": [
        "countWays(nums = [5, 3, 1])",
        "countWays(nums = [2, 2, 1])",
        "countWays(nums = [3, 3, 2, 1])",
        "countWays(nums = [0, 2, 4, 5])",
        "countWays(nums = [1, 2, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 4, 5, 6, 9])",
        "countWays(nums = [3, 4, 1, 3, 1])",
        "countWays(nums = [2, 4, 2, 5, 1, 6])",
        "countWays(nums = [1, 3, 5, 5, 5, 5, 5, 7, 9])",
        "countWays(nums = [5, 3, 8, 7, 6, 1])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,2])",
        "minimumIndex(nums = [3,1,3,4,2])",
        "minimumIndex(nums = [3, 1, 3])",
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [2,2,1,1,3,3])",
        "minimumIndex(nums = [2,2,1,3,1,1])",
        "minimumIndex(nums = [1, 3, 2, 3, 3])",
        "minimumIndex(nums = [0, 2, 1, 2, 0, 1, 1, 2])",
        "minimumIndex(nums = [2,2,1,3,5,2,2,1,2,2])",
        "minimumIndex(nums = [4, 5, 1, 1, 2, 3, 1, 1, 3, 4, 4, 5, 5, 5, 5])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[0,2],[4,6],[6,8],[8,10]])",
        "numberOfPoints(nums = [[0, 3], [3, 6], [1, 2], [4, 5]])",
        "numberOfPoints(nums = [[2,5],[4,8],[10,14]])",
        "numberOfPoints(nums = [[4, 5], [3, 4]])",
        "numberOfPoints(nums = [[3,5],[2,8],[0,4]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [5, 7], [8, 9], [10, 12]])",
        "numberOfPoints(nums = [[0,5],[1,2],[4,5],[0,9]])",
        "numberOfPoints(nums = [[0, 1], [0, 1], [0, 3], [0, 4], [0, 5], [1, 1]])",
        "numberOfPoints(nums = [[2,2],[1,8],[4,6],[6,9],[8,9],[3,4],[10,10],[3,5],[3,6],[3,7]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [4,1,3,2])",
        "semiOrderedPermutation(nums = [1,3,2,4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3, 2, 4, 5, 1])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [2,1,4,5,3])",
        "semiOrderedPermutation(nums = [3, 5, 4, 1, 2])",
        "semiOrderedPermutation(nums = [1,3,5,4,2])",
        "semiOrderedPermutation(nums = [5, 3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [8,9,1,4,6,2,5,7,3])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 4, target = 3)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 5, target = 12)"
    ],
    "sample_118": [
        "minimumIndex(nums = [3, 5, 1, 2, 4, 5])",
        "minimumIndex(nums = [0, 1, 2, 1])",
        "minimumIndex(nums = [2, 1, 4, 4, 3, 3, 2])",
        "minimumIndex(nums = [2,1,2,3,3])",
        "minimumIndex(nums = [5, 4, 4, 3, 3, 3, 1])",
        "minimumIndex(nums = [5, 5, 7, 8, 5, 5, 5, 5])",
        "minimumIndex(nums = [8, 3, 2, 3, 3, 2, 1, 3])",
        "minimumIndex(nums = [8, 3, 2, 4, 6, 1, 3, 2])",
        "minimumIndex(nums = [3, 5, 9, 3, 2, 9, 1, 4, 7, 5])",
        "minimumIndex(nums = [2, 4, 2, 2, 4, 4, 1, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4, 4, 4])"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 3, k = 11)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 3, k = 20)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[0,2],[4,5],[5,7]])",
        "numberOfPoints(nums = [[1,3],[3,6],[0,3],[2,4],[1,5]])",
        "numberOfPoints(nums = [[1,3],[3,6],[4,6]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [4, 4], [4, 5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[2,4],[4,5],[5,6],[5,6]])",
        "numberOfPoints(nums = [[1,3],[3,5],[6,7],[8,10]])",
        "numberOfPoints(nums = [[1,5],[1,5],[1,5],[2,6],[3,5],[4,6]])",
        "numberOfPoints(nums = [[0,3],[3,6],[1,3],[4,5],[4,6]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,7],[7,8]])",
        "numberOfPoints(nums = [[0, 1], [2, 4], [3, 6], [5, 7], [8, 9]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 2, 3, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 3, 2, 2, 3, 1, 1], target = 1)",
        "maximumJumps(nums = [6, 3, 5, 10, 10], target = 2)",
        "maximumJumps(nums = [2, 10, 12, 10], target = 3)",
        "maximumJumps(nums = [100, -200, 600, 800], target = 200)",
        "maximumJumps(nums = [9, 3, 2, 4, 10, 9], target = 4)",
        "maximumJumps(nums = [39,25,67,28,10,22], target = 4)"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 5, k = 7)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [100, 100, 100, 100, 100], m = 200)",
        "canSplitArray(nums = [3, 2, 4, 1], m = 5)",
        "canSplitArray(nums = [5,10,15], m = 3)",
        "canSplitArray(nums = [10, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [3, 1, 2, 5, 1, 2, 9], m = 5)",
        "canSplitArray(nums = [5, 100, 200], m = 150)",
        "canSplitArray(nums = [1,10,2,9,7], m = 14)",
        "canSplitArray(nums = [1, 3, 2, 7], m = 2)",
        "canSplitArray(nums = [1,10,2,9,1,1,1,2,3,6], m = 4)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [3, 4, 12]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 1], [2, 3, 2], [3, 4, 3], [4, 5, 1]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 4], [2, 3, 5], [4, 6, 8]])",
        "maximizeTheProfit(n = 4, offers = [[1,3,5],[3,4,7],[2,5,10],[3,7,15]])",
        "maximizeTheProfit(n = 10, offers = [[2, 4, 2], [2, 8, 1], [4, 6, 1]])",
        "maximizeTheProfit(n = 6, offers = [[4,6,5],[2,3,3],[3,5,1],[5,6,4],[5,3,7]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 2], [4, 3, 4], [4, 3, 2]])",
        "maximizeTheProfit(n = 6, offers = [[5, 6, 1], [4, 6, 2], [2, 5, 3], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 10], [3, 5, 6], [2, 7, 10], [0, 4, 15]])",
        "maximizeTheProfit(n = 4, offers = [[2, 4, 40], [1, 4, 10], [3, 6, 15], [2, 4, 30]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [1,1,1], k = 2)",
        "checkArray(nums = [1,2,3,1], k = 3)",
        "checkArray(nums = [0, 1, 0], k = 1)",
        "checkArray(nums = [1], k = 0)",
        "checkArray(nums = [1, 2, 1, 1, 3], k = 2)",
        "checkArray(nums = [2, 1, 3], k = 3)",
        "checkArray(nums = [1, 5, 1, 2, 3], k = 3)",
        "checkArray(nums = [10, 5, 12, 17], k = 2)",
        "checkArray(nums = [5, 1, 3, 5, 2, 3, 4], k = 2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "longestEqualSubarray(nums = [0,1,1,0,2,0], k = 2)",
        "longestEqualSubarray(nums = [0,0,0,0,1], k = 1)",
        "longestEqualSubarray(nums = [3,2,1,3,2,1,3,2], k = 2)",
        "longestEqualSubarray(nums = [0,0,0,1,0,0,0,1,0,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [3, 4, 3, 6, 3, 4], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,1,3,2,4,4,4,4], k = 3)",
        "longestEqualSubarray(nums = [3,4,9,4,2,3,1,3,8,2,4,9,6,7,4,2,3,1,3,8,2,4,9,6,7,4,2,3,1,3], k = 4)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 0]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 0]])",
        "colorTheArray(n = 2, queries = [[1, 1], [0, 1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [3, 2], [1, 3], [0, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [0, 3], [0, 2], [0, 1], [1, 4], [0, 3], [0, 3]])"
    ],
    "sample_55": [
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbcncd\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddsbndd\")",
        "smallestString(s = 'kddsbdcd')",
        "smallestString(s = 'kdezbncd')",
        "smallestString(s = 'kddebncd')",
        "smallestString(s = \"kdejcdbncd\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [0,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 3, 6], threshold = 1)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 1, 3, 5], threshold = 1)",
        "longestAlternatingSubarray(nums = [5, 5, 5, 3, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [5,3,7,3,4], threshold = 1)",
        "longestAlternatingSubarray(nums = [4, 1, 3, 4, 2, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [6, 7, 3, 8, 9, 1, 2], threshold = 4)",
        "longestAlternatingSubarray(nums = [0,11,4,3,3,2,3,5,2,2], threshold = 10)",
        "longestAlternatingSubarray(nums = [4, 6, 5, 7, 4, 4, 4, 7, 3, 6, 4, 6, 3], threshold = 3)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 1)",
        "longestAlternatingSubarray(nums = [3, 2, 6, 1, 9], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [0,1,2,3,4,5,6,7,8,9], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 1, 3, 6, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [0, 2, 2, 2, 0, 2, 1, 2, 2, 0], threshold = 1)",
        "longestAlternatingSubarray(nums = [6, 7, 9, 12, 17, 20], threshold = 8)",
        "longestAlternatingSubarray(nums = [4, 2, 1, 5, 3, 4, 5, 2, 5, 4], threshold = 6)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [2, 1, 3, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 4])",
        "distinctDifferenceArray(nums = [5, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [5, 2, 4, 6, 1])",
        "distinctDifferenceArray(nums = [4, 9, 9, 5, 6])"
    ],
    "sample_22": [
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABA\")",
        "minLength(s = \"CDAB\")",
        "minLength(s = \"ADCB\")",
        "minLength(s = \"ABCDECD\")",
        "minLength(s = \"ADECB\")",
        "minLength(s = \"BAC\")",
        "minLength(s = \"ABFDC\")",
        "minLength(s = \"CDBCCDADB\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abcb\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abaaba\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"baba\")",
        "minimumCost(s = \"acbab\")",
        "minimumCost(s = \"cbccbc\")",
        "minimumCost(s = \"aaaccca\")",
        "minimumCost(s = \"abcbacabcbabcba\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3], m = 1)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 7)",
        "canSplitArray(nums = [1, 5, 2, 1, 4, 7, 8], m = 3)",
        "canSplitArray(nums = [14, 9, 7, 3, 4], m = 2)",
        "canSplitArray(nums = [1,2,2,5,2,1,2], m = 4)",
        "canSplitArray(nums = [15, 10, 2, 3, 20], m = 10)",
        "canSplitArray(nums = [15, 9, 2, 5, 10, 3, 15], m = 7)",
        "canSplitArray(nums = [17, 5, 12], m = 10)",
        "canSplitArray(nums = [13, 9, 15, 10, 11, 12, 14, 16, 15, 21], m = 6)",
        "canSplitArray(nums = [300, 302, 322, 322, 322, 322, 301, 299, 301, 298, 300], m = 4)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [2, 2, 2, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 5])",
        "doesValidArrayExist(derived = [1, 1, 2, 3, 5, 1])",
        "doesValidArrayExist(derived = [0,2,1,3,5,6,7,4])",
        "doesValidArrayExist(derived = [5, 3, 0, 6, 1, 4])",
        "doesValidArrayExist(derived = [2,4,5,3,1,6,7,8])",
        "doesValidArrayExist(derived = [0,2,1,5,6,4,8,9,7,3])"
    ],
    "sample_109": [
        "checkArray(nums = [2, 2, 2, 4], k = 2)",
        "checkArray(nums = [3,4,3,0], k = 2)",
        "checkArray(nums = [1,2,3,4,6,7], k = 2)",
        "checkArray(nums = [1, 3, 4, 5, 6], k = 1)",
        "checkArray(nums = [1,3,1,4,2,2,1,2], k = 2)",
        "checkArray(nums = [10, 7, 5, 2], k = 3)",
        "checkArray(nums = [10, 1, 4, 3], k = 2)",
        "checkArray(nums = [1, 6, 4, 5, 2, 3], k = 2)",
        "checkArray(nums = [10, 4, 7, 9, 3, 2, 7, 8, 6, 5, 9], k = 4)",
        "checkArray(nums = [12, -2, -5, 14, 6, -4, 10, 2, 3, -2, -2, 1, -4], k = 1)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 13, 14], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0, 0, 0], target = 100000)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 10, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 15, 12, 8, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 32, 32, 0, 0, 16], target = 8)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [1, 7, 5, 9, 2, 12, 10], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 5, 2], k = 3)",
        "maximumBeauty(nums = [1, 5, 2, 6, 3, 7], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 8, 9], k = 2)",
        "maximumBeauty(nums = [4,11,8,1,3,9,10], k = 5)",
        "maximumBeauty(nums = [0, 4, 5, 6, 14], k = 2)",
        "maximumBeauty(nums = [5, 9, 4, 1, 3, 2, 11], k = 4)",
        "maximumBeauty(nums = [4, 3, 1, 3, 1, 5, 2], k = 3)"
    ],
    "sample_205": [
        "minimumOperations(num = \"0250\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"02550\")",
        "minimumOperations(num = \"0050\")",
        "minimumOperations(num = \"200\")",
        "minimumOperations(num = \"075250\")",
        "minimumOperations(num = \"777\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"000025000000\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"0500\")",
        "minimumOperations(s = \"00500\")",
        "minimumOperations(s = \"00500\")",
        "minimumOperations(s = \"025\")",
        "minimumOperations(s = \"00750\")",
        "minimumOperations(s = \"2022\")",
        "minimumOperations(s = \"02250750\")",
        "minimumOperations(s = \"1025750\")",
        "minimumOperations(s = \"105000\")",
        "minimumOperations(s = \"0102030000\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [5, 2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [5, 1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [4,2,3,5,1])",
        "semiOrderedPermutation(nums = [1,3,2,4,5])",
        "semiOrderedPermutation(nums = [5,2,3,1,4])",
        "semiOrderedPermutation(nums = [2,3,1,6,7,4,5])",
        "semiOrderedPermutation(nums = [5, 4, 1, 6, 3, 2, 7])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLARL\")",
        "furthestDistanceFromOrigin(moves = \"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LRa\")",
        "furthestDistanceFromOrigin(moves = \"R2L3R\")",
        "furthestDistanceFromOrigin(moves = \"RLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRALALALALRR\")",
        "furthestDistanceFromOrigin(moves = \"LRARA\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"X\", \"Y\"], s = \"XY\")",
        "isAcronym(words = [\"T\", \"o\", \"p\"], s = \"TOT\")",
        "isAcronym(words = [\"HYDROGEN\", \"BORON\", \"CARBON\", \"NITROGEN\", \"OXYGEN\"], s = \"HBOCNO\")",
        "isAcronym(words = [\"Interleukin\"], s = \"I\")",
        "isAcronym(words = [\"Data\", \"science\"], s = \"DaSc\")",
        "isAcronym(words = [\"py\", \"cool\", \"stuff\"], s = \"pcs\")",
        "isAcronym(words = [\"temporary\", \"banana\", \"solution\"], s = \"TBS\")",
        "isAcronym(words = [\"big\", \"black\", \"cars\"], s = \"bbc\")",
        "isAcronym(words = [\"Scooby\", \"Dooby\", \"Do\", \"D\"], s = \"SDBD\")",
        "isAcronym(words = [\"UCS\", \"B\", \"SPIN\"], s = \"BSPINUCS\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [2, 2, 2, 4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,1,3,2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 2, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 2, 2], modulo = 6, k = 0)",
        "countInterestingSubarrays(nums = [2, 3, 3, 2, 4, 3, 3, 2, 4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [4, 3, 7, 4, 7, 0], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [7, 7, 7, 2, 3, 7, 5, 7, 7, 7, 7, 7, 7, 7], modulo = 7, k = 2)",
        "countInterestingSubarrays(nums = [2,1,1,3,2,3,3,3], modulo = 10, k = 4)",
        "countInterestingSubarrays(nums = [1, 1, 0, 4, 3, 2, 4, 1, 4, 5, 1, 0, 2], modulo = 10, k = 5)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 21, 10])",
        "countBeautifulPairs(nums = [12, 21, 13])",
        "countBeautifulPairs(nums = [12, 21, 10, 1])",
        "countBeautifulPairs(nums = [22, 44, 33, 11])",
        "countBeautifulPairs(nums = [12, 24, 10, 29])",
        "countBeautifulPairs(nums = [12, 14, 17, 19])",
        "countBeautifulPairs(nums = [23, 24, 37, 38])",
        "countBeautifulPairs(nums = [52,24])",
        "countBeautifulPairs(nums = [753, 354])",
        "countBeautifulPairs(nums = [253673,13782,685005])"
    ],
    "sample_97": [
        "maximumJumps(nums = [-1,3,5], target = 1)",
        "maximumJumps(nums = [6, 1, 9], target = 3)",
        "maximumJumps(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 1)",
        "maximumJumps(nums = [2, 0, 1, 0], target = 2)",
        "maximumJumps(nums = [-1, 3, 5, 2, 2, 1, 2, 2], target = 2)",
        "maximumJumps(nums = [5, 3, 4, 2, 10, 8, 9, 4], target = 6)",
        "maximumJumps(nums = [-1,4,9,1,4,1,7,9,2], target = 12)",
        "maximumJumps(nums = [2,1,3,1,5,10,1], target = 5)",
        "maximumJumps(nums = [-1,0,10,5,-2,-4,-3], target = 1)",
        "maximumJumps(nums
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 15])",
        "countBeautifulPairs(nums = [24, 7, 29])",
        "countBeautifulPairs(nums = [12, 13, 23, 34])",
        "countBeautifulPairs(nums = [10, 25, 14, 28, 99])",
        "countBeautifulPairs(nums = [12, 20, 6, 10])",
        "countBeautifulPairs(nums = [22, 45, 10, 5, 35])",
        "countBeautifulPairs(nums = [35, 47, 10])",
        "countBeautifulPairs(nums = [43, 76, 54, 90])",
        "countBeautifulPairs(nums = [152, 23, 587, 96])",
        "countBeautifulPairs(nums = [24,27,40,50,90,68,30,66,88])"
    ],
    "sample_18": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDB\")",
        "minLength(s = \"ABCDBA\")",
        "minLength(s = \"CDAB\")",
        "minLength(s = \"ABAACD\")",
        "minLength(s = \"ABABABABCD\")",
        "minLength(s = \"ABCABDCDDEF\")",
        "minLength(s = \"ABBCDB\")",
        "minLength(s = \"ABABABCDAB\")",
        "minLength(s = \"AACEEBBCCDDEE\")"
    ],
    "sample_150": [
        "finalString(s = \"ringing\")",
        "finalString(s = \"ringing\")",
        "finalString(s = \"ringing\")",
        "finalString(s = \"thisis\")",
        "finalString(s = \"pinignat\")",
        "finalString(s = \"sting\")",
        "finalString(s = 'isings')",
        "finalString(s = 'pitsing')",
        "finalString(s = \"madam\")",
        "finalString(s = \"happy\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 2])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [0, 2, 4, 6])",
        "doesValidArrayExist(derived = [12, 4, 6, 12, 4])",
        "doesValidArrayExist(derived = [5, 1, 2, 5, 3])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [5, 4, 4, 5, 4])",
        "doesValidArrayExist(derived = [4, 1, 2, 5, 1, 7, 3, 6, 8, 3])",
        "doesValidArrayExist(derived = [56, 7, 34, 29, 6])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [3, 5, 6, 9, 1])",
        "findValueOfPartition(nums = [1, 4, 5, 8])",
        "findValueOfPartition(nums = [1, 4, 5, 8])",
        "findValueOfPartition(nums = [5, 1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 2])",
        "findValueOfPartition(nums = [0, 1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 6, 10])",
        "findValueOfPartition(nums = [2, 2, 1, 1, 2])",
        "findValueOfPartition(nums = [2, 3, 7, 1, 3, 2])",
        "findValueOfPartition(nums = [-1, 2, 0, 1, -20, 100, 5, 4])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[1,1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 2]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 1]])",
        "colorTheArray(n = 4, queries = [[1,1],[1,2],[1,3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [2, 2], [1, 2]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 1], [2, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,2],[3,3],[1,3],[3,1],[2,3]])",
        "colorTheArray(n = 3, queries = [[1,1],[2,2],[2,2],[2,1],[1,3],[2,3]])",
        "colorTheArray(n = 5, queries = [[1,1],[4,2],[4,3],[2,4],[1,3],[4,4]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 4, target = 23)",
        "minimumPossibleSum(n = 5, target = 27)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 3, k = 11)",
        "minimumSum(n = 5, k = 1)",
        "minimumSum(n = 10, k = 8)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 9, 8, 7], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 1, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 200, 300, 400], target = 400)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 4, 8, 16], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 11, 13, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [37, 41, 30, 42, 39, 13, 35, 26], target = 28)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3], m = 1)",
        "canSplitArray(nums = [3, 2, 1], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 10], m = 9)",
        "canSplitArray(nums = [3, 6, 7, 10], m = 4)",
        "canSplitArray(nums = [3, 2, 1, 2], m = 3)",
        "canSplitArray(nums = [3,2,1,2,5,2], m = 3)",
        "canSplitArray(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9], m = 10)",
        "canSplitArray(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5], m = 4)",
        "canSplitArray(nums = [5, 2, 3, 5, 2, 2, 2], m = 5)",
        "canSplitArray(nums = [2, 1, 4, 10, 2, 7, 1], m = 4)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 4, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,4,5,5,5,4,5], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [5, 5, 3, 6, 1, 7, 2, 5, 4], m = 8, k = 0)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], t = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], t = 3)",
        "longestAlternatingSubarray(nums = [3,2,3,1,2], t = 3)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 1, 3], t = 2)",
        "longestAlternatingSubarray(nums = [2,2,2,0,2,2,1,2,0,2], t = 2)",
        "longestAlternatingSubarray(nums = [0,0,0,0,0,0,0,1,1,1,1,1,1,1], t = 0)",
        "longestAlternatingSubarray(nums = [0, 4, 3, 7], t = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 1, 4, 1, 5, 1], t = 1)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 0, 4, 1, 3, 2], t = 3)",
        "longestAlternatingSubarray(nums = [0,1,0,0,0,0,1,1,1,1,1,0,0,1], t = 1)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [3,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 1, 1, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1,1,1,1,0,1,0,0,0,1,1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230000\")",
        "removeTrailingZeros(num = \"51230000\")",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"5123000000\")",
        "removeTrailingZeros(num = \"5123000000001\")",
        "removeTrailingZeros(num = \"51230100000000\")",
        "removeTrailingZeros(num = \"5123000000000000000001\")",
        "removeTrailingZeros(num = '512300000000000000000000000000001')"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 31, b = 2)",
        "makeTheIntegerZero(a = 11, b = 2)",
        "makeTheIntegerZero(a = 5, b = 1)",
        "makeTheIntegerZero(a = 32, b = 1)",
        "makeTheIntegerZero(a = 11, b = 1)",
        "makeTheIntegerZero(a = 50, b = 1)",
        "makeTheIntegerZero(a = 19, b = 3)",
        "makeTheIntegerZero(a = 101, b = 1)",
        "makeTheIntegerZero(a = 120, b = 1)",
        "makeTheIntegerZero(a = 55, b = 7)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 2)",
        "canSplitArray(nums = [1, 5, 11, 5], m = 6)",
        "canSplitArray(nums = [2, 3, 5, 7, 11], m = 6)",
        "canSplitArray(nums = [1, 9, 10, 2, 3], m = 3)",
        "canSplitArray(nums = [1,1,1,3,4,5,1], m = 2)",
        "canSplitArray(nums = [1, 3, 1, 4, 2, 5], m = 4)",
        "canSplitArray(nums = [5, 7, 8, 7, 5], m = 6)",
        "canSplitArray(nums = [15, 3, 7, 4, 5], m = 10)",
        "canSplitArray(nums = [17, 9, 3, 15, 19], m = 3)",
        "canSplitArray(nums = [1, 4, 9, 5, 8, 6, 4, 2, 4, 2], m = 10)"
    ],
    "sample_161": [
        "maxSum(nums = [])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [1, 10, 100])",
        "maxSum(nums = [-10])",
        "maxSum(nums = [2, 4, 3, 5, 4])",
        "maxSum(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])",
        "maxSum(nums = [99, 100])",
        "maxSum(nums = [11, 22, 33, 44, 55, 66, 77, 88])",
        "maxSum(nums
        "maxSum(nums = [1, 5, 2, 3, 6, 8])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 10)",
        "minimumPossibleSum(n = 3, target = 9)",
        "minimumPossibleSum(n=1, target=3)",
        "minimumPossibleSum(n = 4, target = 11)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [3,5,6,9])",
        "findValueOfPartition(nums = [3, 5, 8, 9])",
        "findValueOfPartition(nums = [2,3,5,7,11])",
        "findValueOfPartition(nums = [3,4,5,8])",
        "findValueOfPartition(nums = [1,2,10])",
        "findValueOfPartition(nums = [4, 6, 1, 2, 3])",
        "findValueOfPartition(nums = [1,3,5,7,9,11])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [1, 10, 2, 9])",
        "findValueOfPartition(nums = [1,1,2,2,3,3,4,4])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8],[8,9]])",
        "numberOfPoints(nums = [[1, 1], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1,3],[1,7],[2,6],[3,4],[5,6]])",
        "numberOfPoints(nums = [[2, 4], [1, 2], [2, 5], [0, 3]])",
        "numberOfPoints(nums = [[3,4],[8,10],[15,16],[15,20]])",
        "numberOfPoints(nums = [[1,2], [1,3], [1,4], [4,6], [4,6], [7,8], [7,8]])",
        "numberOfPoints(nums = [\n  [1,2],\n  [4,5],\n  [3,8],\n  [6,10]\n])",
        "numberOfPoints(nums = [[1,5],[3,12],[1,8],[10,14],[2,7]])",
        "numberOfPoints(nums = [[1,3],[1,7],[4,5],[6,9],[8,9],[10,12],[10,13],[14,17],[15,16],[15,17]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [1, 4], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 3], [4, 4]])",
        "numberOfPoints(nums = [[1,3],[3,6],[1,4],[4,6]])",
        "numberOfPoints(nums = [[1,2],[1,3],[2,4],[1,5]])",
        "numberOfPoints(nums = [[0,3],[1,2]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [1, 5], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[0, 2], [4, 8], [1, 7], [6, 8]])",
        "numberOfPoints(nums = [[0, 1],[2, 4],[4, 5],[6, 8]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one two\", \"three\", \"four five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one two\", \"three four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one,two', 'three', 'four,five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two,three', 'four,five,six'], separator = \",\")",
        "splitWordsBySeparator(words = ['one,two', 'three', 'four,five', 'six'], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = 'n')",
        "splitWordsBySeparator(words = ['one two three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = 't')"
    ],
    "sample_200": [
        "minOperations(nums = [1,1,1,1,1,1,1,1], target = 11)",
        "minOperations(nums = [1, 2, 2, 4], target = 8)",
        "minOperations(nums = [2, 2, 3], target = 9)",
        "minOperations(nums = [2, 2, 2, 4], target = 10)",
        "minOperations(nums = [1, 2, 3], target = 1000000000)",
        "minOperations(nums = [1,2,4,8,16], target = 15)",
        "minOperations(nums = [4, 2, 5, 3], target = 23)",
        "minOperations(nums = [10, 20, 5, 100], target = 10)",
        "minOperations(nums = [2, 1, 4, 7], target = 20)",
        "minOperations(nums=[2, 4, 1, 9], target=20)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 2, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 3, 2, 1], k = 2)",
        "checkArray(nums = [1,2,3,2,1], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,2,1,6], k = 2)",
        "checkArray(nums = [1,1,2,3,4,5,6], k = 3)",
        "checkArray(nums = [1, 4, 3, 4, 5], k = 2)",
        "checkArray(nums = [0, 7, -1, 4, 3], k = 3)",
        "checkArray(nums = [2, 6, 4, 7, 4, 3, 2, 5, 4, 3, 4, 4, 3, 1], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,1,0,1,0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1])"
    ],
    "sample_159": [
        "maxSum(nums = [1,1])",
        "maxSum(nums = [22,222,2222])",
        "maxSum(nums = [10,20,30,40])",
        "maxSum(nums = [123,234,345])",
        "maxSum(nums = [10,100,1,10])",
        "maxSum(nums = [1,23,45,6])",
        "maxSum(nums = [1, 1, 3, 4])",
        "maxSum(nums = [2,7,3,6,5,22])",
        "maxSum(nums = [99,11,13,15,17,19])",
        "maxSum(nums = [44,33,66,55,44,33,66,55,44,33,66,55])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 4])",
        "continuousSubarrays(A = [4, 2, 2, 2, 3, 4, 4])",
        "continuousSubarrays(A = [0, 1, 2, 0, 0, 1, 2])",
        "continuousSubarrays(A = [1,2,2,1,2,2,1])",
        "continuousSubarrays(A = [3, 1, 2, 4, 2, 3])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 4, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 1, 1, 3, 5, 5, 5, 5, 5, 5, 5])",
        "continuousSubarrays(A = [2, 6, 3, 2, 4, 1])",
        "continuousSubarrays(A = [2, 2, 3, 4, 4, 2, 2, 2, 1, 3, 3])",
        "continuousSubarrays(A = [5, 6, 8, 9, 2, 4, 3, 2, 6, 8, 9, 5, 6, 2])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [5, 4, 9, 5, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [5, 1, 5, 2, 2])",
        "distinctDifferenceArray(nums = [3,2,2,3])",
        "distinctDifferenceArray(nums = [5, 2, 4, 3, 1])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 3, 2, 1], b = [3, 2, 1, 0])",
        "maxNonDecreasingLength(a = [1, 3, 2, 1], b = [3, 2, 1, 4])",
        "maxNonDecreasingLength(a = [5, 4, 3, 2, 1], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [6, 5, 4, 3])",
        "maxNonDecreasingLength(a = [1,2,3,4], b = [3,3,3,4])",
        "maxNonDecreasingLength(a = [4, 1, 3, 2, 5], b = [2, 1, 4, 5, 3])",
        "maxNonDecreasingLength(a = [5, 4, 1, 5, 3, 2, 5], b = [1, 2, 5, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [4, 2, 5, 7, 6, 9], b = [7, 6, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [13, 4, 8, 6, 2, 12], b = [18, 5, 7, 10, 15, 3])",
        "maxNonDecreasingLength(a = [2, 3, 7, 4, 5, 6, 9, 8], b = [6, 3, 2, 4, 9, 7, 5, 8])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 15, additionalTank = 1)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)",
        "distanceTraveled(mainTank = 30, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=1)"
    ],
    "sample_160": [
        "maxSum(nums = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1])",
        "maxSum(nums = [1, 10, 8, 9])",
        "maxSum(nums = [3, 4, 2, 6])",
        "maxSum(nums = [9, 2, 3, 4, 5, 6, 7, 8, 1, 0])",
        "maxSum(nums = [9, 12, 12, 13])",
        "maxSum(nums = [2, 4, 9, 10])",
        "maxSum(nums = [-1, 30, 2])",
        "maxSum(nums = [0, -1, -1, 0, 1, -1])",
        "maxSum(nums = [919, 947, 1712])",
        "maxSum(nums = [991, 921, 443, 333, 992, 129])"
    ],
    "sample_52": [
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddscncd\")",
        "smallestString(s = \"kddsbfcd\")",
        "smallestString(s = \"kddsbfcd\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = 'kddscbncd')",
        "smallestString(s = 'kdedbncd')",
        "smallestString(s = \"akddsbcda\")",
        "smallestString(s = 'kdaacidbd')",
        "smallestString(s = \"abcdkdsbnca\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [3, 2, 1])",
        "findValueOfPartition(nums = [1, 2, 3, 6])",
        "findValueOfPartition(nums = [5, 4, 1, 3, 2])",
        "findValueOfPartition(nums = [1, 3, 6])",
        "findValueOfPartition(nums = [0,1,3,5,6])",
        "findValueOfPartition(nums = [1, 5, 1, 5, 5])",
        "findValueOfPartition(nums = [1, 1, 1, 1, 3, 4, 6, 10])",
        "findValueOfPartition(nums = [0, 1, 1, 4, 4, 5, 5, 6, 6, 9, 10, 10])",
        "findValueOfPartition(nums = [9, 3, 5, 4, 6, 7, 2])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'aabb')",
        "makeSmallestPalindrome(s = \"abbc\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = 'abab')",
        "makeSmallestPalindrome(s = \"bbb\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 7, num2 = 1)",
        "makeTheIntegerZero(num1 = 100, num2 = 20)",
        "makeTheIntegerZero(num1 = 12, num2 = 13)",
        "makeTheIntegerZero(num1 = 500, num2 = 400)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]])",
        "numberOfPoints(nums=[[1,3],[3,7],[4,5]])",
        "numberOfPoints(nums = [[2, 6], [3, 5], [8, 9]])",
        "numberOfPoints(nums = [[1,3],[3,6],[10,14],[13,16]])",
        "numberOfPoints(nums = [[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]])",
        "numberOfPoints(nums = [[2,3],[5,6],[2,7],[3,5]])",
        "numberOfPoints(nums = [[2,2],[5,8],[10,10]])",
        "numberOfPoints(nums = [[1,5],[3,10],[1,10],[0,5]])",
        "numberOfPoints(nums = [[4,5],[3,14],[2,9],[12,3]])",
        "numberOfPoints(nums = [[-1,2],[0,4],[4,10],[7,8],[9,12],[13,17],[19,23],[24,25],[26,30]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,4,5,6], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,2,2,4,4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,1,2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 2, 2, 4, 5, 6], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,3,3], m = 1, k = 0)"
    ],
    "sample_40": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abcbc\")",
        "minimumCost(s = \"acca\")",
        "minimumCost(s = \"ACACB\")",
        "minimumCost(s = \"AAABBABA\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [True, True, False])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [True, True, False, False, False])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1, 0, 1, 0, 1])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [4, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1,2,2,3,3])",
        "distinctDifferenceArray(nums = [1, 3, 2, 2, 4])",
        "distinctDifferenceArray(nums = [1, 3, 2, 3, 2])",
        "distinctDifferenceArray(nums = [4, 1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 3, 4, 5, 6])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 5, 4], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 6, 4, 11], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 5, 4, 2, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 4, 6, 2, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 12, 16], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 4, 6, 5, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 10, 13, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 14, 2, 16, 30], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [84, 7, 26, 93, 67, 84, 65, 39, 91, 1], target = 60)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"deven\")",
        "makeSmallestPalindrome(s = \"enaven\")",
        "makeSmallestPalindrome(s = \"sneven\")",
        "makeSmallestPalindrome(s = 'eenoven')",
        "makeSmallestPalindrome(s = \"leeeeevne\")",
        "makeSmallestPalindrome(s = \"idven\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '512300000001')",
        "removeTrailingZeros(num = \"5123010000000\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,2,2,5,2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,4,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [4,4,4,4,4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,3,3,2,3,3,2], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,1,7,3,2,2,2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [3, 5, 7, 8, 1, 2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,4,5,6,7,9,10,12,13,14,15,15,16,17,18,19,20,21], m = 3, k = 0)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 1, additionalTank = 9)",
        "distanceTraveled(mainTank = 20, additionalTank = 1)"
    ],
    "sample_56": [
        "minCost(A = [1,2,3], x = 3)",
        "minCost(A = [1, 2], x = 2)",
        "minCost(A = [2, 4, 6], x = 2)",
        "minCost(A = [5, 3, 7], x = 2)",
        "minCost(A = [5, 4, 7], x = 2)",
        "minCost(A = [5, 3, 4], x = 2)",
        "minCost(A = [2, 2, 4], x = 3)",
        "minCost(A = [1, 100, 2], x = 2)",
        "minCost(A = [3, 4, 1], x = 2)",
        "minCost(A = [4, 3, 5, 2], x = 2)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 2])",
        "maxIncreasingGroups(u = [3, 2, 4, 6, 1])",
        "maxIncreasingGroups(u = [5, 3, 4])",
        "maxIncreasingGroups(u = [4, 3, 3, 0, 2, 1])",
        "maxIncreasingGroups(u = [1, 2, 1, 4, 2])",
        "maxIncreasingGroups(u = [2, 5, 2, 2, 2, 2])",
        "maxIncreasingGroups(u = [1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5])",
        "maxIncreasingGroups(u = [4, 5, 3, 1, 3, 5])",
        "maxIncreasingGroups(u = [0, 0, 1, 2, 2, 2, 3, 4, 4, 5, 5])",
        "maxIncreasingGroups(u = [3, 3, 5, 2, 2, 1, 1, 3, 3])"
    ],
    "sample_110": [
        "checkArray(nums = [2, 1, 3], k = 1)",
        "checkArray(nums = [2, 1, 3, 2], k = 10)",
        "checkArray(nums = [0, 0, 0, 0, 0], k = 1)",
        "checkArray(nums = [10, 0, 2, 4, 7, 9], k = 4)",
        "checkArray(nums = [1,0,1,0], k = 1)",
        "checkArray(nums = [1, 1, 0, 2], k = 2)",
        "checkArray(nums = [1,2,3,4,1,2,3,4], k = 2)",
        "checkArray(nums = [3, 4, 4], k = 1)",
        "checkArray(nums = [0, 0, 0, 1, 1, 0, 0, 1, 1, 1], k = 2)",
        "checkArray(nums = [9, -1, 2, 3, 0, 4, 1], k = 4)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDECDAB\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ADBCCD\")",
        "minLength(s = \"ABCDBACDCC\")",
        "minLength(s = \"ABCDACDABACD\")",
        "minLength(s = \"ACDCDACDCD\")",
        "minLength(s = \"AADDCCDBBBA\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,2,2,4], target = 5)",
        "minOperations(nums = [1,2,2,4], target = 7)",
        "minOperations(nums = [1,2,2,4], target = 7)",
        "minOperations(nums = [1, 2, 2, 4], target = 5)",
        "minOperations(nums = [3, 1, 5, 8], target = 8)",
        "minOperations(nums = [1,2,2,4], target = 9)",
        "minOperations(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], target = 9)",
        "minOperations(nums = [2,3,5], target = 1000)",
        "minOperations(nums = [1, 5, 6, 9], target = 18)",
        "minOperations(nums = [1,5,8,4,3,2], target = 15)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \"\")",
        "splitWordsBySeparator(words = [\"apples\", \"bananas\"], separator = \"p\")",
        "splitWordsBySeparator(words = [\"h e l l o\", \"w o r l d\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \"t\")",
        "splitWordsBySeparator(words = [\"ab-cd\", \"-ef-gh\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"\", \"\", \"\"], separator = \"k\")",
        "splitWordsBySeparator(words = [\"a\",\"ab\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"this\", \"is\", \"mars\"], separator = \"is\")",
        "splitWordsBySeparator(words = [\"-h\",\"-e-\",\"-l-\",\"-l-\",\"-o-\"], separator = \"-\")"
    ],
    "sample_54": [
        "smallestString(s = 'kddscncd')",
        "smallestString(s = 'kddscncd')",
        "smallestString(s = 'kddscncd')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kdebcnncd')",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"kddsbzcd\")",
        "smallestString(s = \"kddsbcnca\")",
        "smallestString(s = 'kddsbncdz')",
        "smallestString(s = \"kkkkmmmmz\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LR__R\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRRRR\")",
        "furthestDistanceFromOrigin(moves = \"L_RR_R\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRR_LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLLRRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLLR_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_R_L_L_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"R_RR_RRRRRRRRRRRRRRRRRRRRRRRRRRR_RRRRRRRRRRRRRRR_RRRR_R_\")",
        "furthestDistanceFromOrigin(moves
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 19, num2 = 5)",
        "makeTheIntegerZero(num1 = 100, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 25, num2 = 1)",
        "makeTheIntegerZero(num1 = 29, num2 = 5)",
        "makeTheIntegerZero(num1 = 39, num2 = 13)",
        "makeTheIntegerZero(num1 = 13, num2 = 10)"
    ],
    "sample_51": [
        "smallestString(s = \"kddsbcda\")",
        "smallestString(s = \"kddsbcda\")",
        "smallestString(s = 'kdedbncd')",
        "smallestString(s = \"kddsbcnca\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"abcdz\")",
        "smallestString(s = 'kdesbncd')",
        "smallestString(s = 'bacd')",
        "smallestString(s = 'kdefbacd')",
        "smallestString(s = \"lkabccdd\")"
    ],
    "sample_146": [
        "finalString(s = \"pintire\")",
        "finalString(s = \"inpointer\")",
        "finalString(s = 'pintire')",
        "finalString(s = \"racecarr\")",
        "finalString(s = 'interpool')",
        "finalString(s = 'tinnep')",
        "finalString(s = 'tipper')",
        "finalString(s = 'intention')",
        "finalString(s = \"racrinetop\")",
        "finalString(s = 'deeptiot')"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,2,1,2,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [0,0,0,0,0,0,0,1], k = 2)",
        "longestEqualSubarray(nums = [0, 0, 0, 0, 0, 0, 0], k = 1)",
        "longestEqualSubarray(nums = [2, 4, 5, 7, 2, 2, 4, 5, 7], k = 3)",
        "longestEqualSubarray(nums = [0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,3,3,3,3,2,1,1,1,2,3,3,3,3,3,3,3], k = 3)",
        "longestEqualSubarray(nums = [2,1,4,3,5,1,6,7,1,8,1,10,11], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [7,2,5,10], m = 4)",
        "canSplitArray(nums = [1, 2, 3], m = 1)",
        "canSplitArray(nums = [1,10,2,9], m = 3)",
        "canSplitArray(nums = [3,2,1], m = 2)",
        "canSplitArray(nums = [2,3,1,1,2], m = 4)",
        "canSplitArray(nums = [5,5], m = 3)",
        "canSplitArray(nums = [10, 12, 14], m = 12)",
        "canSplitArray(nums = [13,14,15,13,16,16,18], m = 4)",
        "canSplitArray(nums = [29,2,35,17,74,55,24,17,8], m = 50)",
        "canSplitArray(nums = [11,15,6,8,9,12,11,13,14,16,5,5], m = 4)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [4,0,1,3,2])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,3,4])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,,six,\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one,two,three', 'four,five,,six,'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,four', 'five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five,six\"], separator = \",\")",
        "splitWordsBySeparator(words=[\"one,two,three\", \"four,five,six\"], separator=\",\")",
        "splitWordsBySeparator(words = [\"one|two\", \"three|four\", \"five|six\"], separator = \"|\")",
        "splitWordsBySeparator(words = ['one|two', 'three|four', 'five||six'], separator = '|')",
        "splitWordsBySeparator(words = [\"one,two\", \",\", \"three,four\", \",\", \"five\", \",\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one/two', 'three', 'four', '/five', 'six'], separator = '/')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 60, 80, 120], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 2, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 5, 4, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 5, 10, 0], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 60, 80, 110, 105], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 3, 1, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 24, 23, 11, 29, 7], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 12, 10, 5, 2, 8], target = 8)"
    ],
    "sample_168": [
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"ABC\")",
        "isAcronym(words = [\"Moon\", \"Earth\", \"Sun\"], s = \"MES\")",
        "isAcronym(words = [\"Data\", \"Structures\", \"and\", \"Algorithms\"], s = \"DSA\")",
        "isAcronym(words = [\"hello\", \"darkness\", \"my\", \"old\", \"friend\"], s = \"hdomf\")",
        "isAcronym(words = ['hello', 'there'], s = \"hte\")",
        "isAcronym(words = [\"abc\",\"de\"], s = \"abd\")",
        "isAcronym(words = [\"J\", \"o\", \"hn\"], s = \"john\")",
        "isAcronym(words = [\"Global\", \"Sales\", \"Management\"], s = \"GSM\")",
        "isAcronym(words = [\"Audi\", \"A8\", \"SQ7\"], s = \"A8SQ\")",
        "isAcronym(words = ['snakes', 'on', 'a', 'plane'], s = \"Soap\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"abc\", \"def\", \"ghi\"], s = \"AD\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"wld\")",
        "isAcronym(words = [\"hello\", \"there\", \"everyone\"], s = \"hte\")",
        "isAcronym(words = [\"computer\", \"science\", \"is\", \"fun\"], s = \"csif\")",
        "isAcronym(words = [\"Las\", \"Vegas\", \"USA\"], s = \"LVUSA\")",
        "isAcronym(words = [\"Big\", \"House\"], s = \"BH\")",
        "isAcronym(words = [\"Dessert\",\"Ice\",\"Cream\"], s = \"CID\")",
        "isAcronym(words = [\"S\", \"E\", \"A\", \"R\", \"C\", \"H\"], s = \"EARACH\")",
        "isAcronym(words = [\"red\", \"white\", \"black\", \"green\"], s = \"rgba\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abcbc\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"accaa\")",
        "minimumCost(s = \"abbaa\")",
        "minimumCost(s = \"BACCA\")",
        "minimumCost(s = \"aacaabbb\")",
        "minimumCost(s = \"cde\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1,1,1])",
        "doesValidArrayExist(derived = [1,0,1,1,1])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0,1,1,0,1,1,0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0,1,1,0,1,1,0,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,0,1,1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"aabba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'bab')",
        "makeSmallestPalindrome(s = 'bab')",
        "makeSmallestPalindrome(s = 'bab')",
        "makeSmallestPalindrome(s = \"ba\")",
        "makeSmallestPalindrome(s = \"aabbb\")",
        "makeSmallestPalindrome(s = 'aab')",
        "makeSmallestPalindrome(s = \"abbaa\")",
        "makeSmallestPalindrome(s = \"mabna\")"
    ],
    "sample_50": [
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"abaaa\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"aaab\")",
        "smallestString(s = \"aaaab\")",
        "smallestString(s = \"abacb\")",
        "smallestString(s = \"aaaaa\")",
        "smallestString(s = 'abacb')",
        "smallestString(s = \"baaaaab\")",
        "smallestString(s = \"ababbbb\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,4,8], k = 1)",
        "sumIndicesWithKSetBits(nums = [10, 2, 3, 4, 6, 5, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [5,2,6,6,4,8,6,4,6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 4, 0, 2, 12, 9, 7, 8], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABACDABACD\")",
        "minLength(s = \"ABCACDCDA\")",
        "minLength(s = \"ABCABABCAB\")",
        "minLength(s = \"ABACDCDC\")",
        "minLength(s = \"ABBCDABCDABCD\")",
        "minLength(s = \"ABCDBACBCA\")",
        "minLength(s = \"AABBACDCDACDABABCABB\")",
        "minLength(s = \"CBBDAAADCDA\")",
        "minLength(s = \"ACBDBCDCDBDAADBABBCCD\")"
    ],
    "sample_158": [
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [3, 30, 34, 5, 9])",
        "maxSum(nums = [11, 111, 1111])",
        "maxSum(nums = [99, 99])",
        "maxSum(nums = [33, 33])",
        "maxSum(nums = [33, 30, 33])",
        "maxSum(nums = [20, 23, 29])",
        "maxSum(nums = [2, 5, 5, 8, 9, 1, 3])",
        "maxSum(nums = [1, 12, 34, 56, 78, 910, 11, 123, 133])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [4, 2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1, 5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 5, 1])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1, 6, 5, 4])",
        "semiOrderedPermutation(nums = [2, 4, 1, 5, 3])",
        "semiOrderedPermutation(nums = [5, 2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [1, 3, 5, 4, 2])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3, 5])",
        "semiOrderedPermutation(nums = [5, 3, 2, 4, 1])"
    ],
    "sample_162": [
        "maxSum(nums = [88])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [88, 8])",
        "maxSum(nums = [808, 88, 888])",
        "maxSum(nums = [8, 3, 4, 5, 6, 7, 86, 9])",
        "maxSum(nums = [10, 42, 11, 43, 12, 44, 2, 88])",
        "maxSum(nums = [23, 2, 34, 56, 4, 1, 67, 12, 10])",
        "maxSum(nums = [95,92,88,71,66,85,88,88,68])",
        "maxSum(nums = [40, 12, 89, 5, 98, 9, 14, 45, 98, 3])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = \"1111\")",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = '10010001')",
        "maximumOddBinaryNumber(s = \"1011010001111\")",
        "maximumOddBinaryNumber(s = '10110101010000110')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 3, 4, 2, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 8, 8, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 4, 6, 1], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 4, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 8, 8, 14], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 6, 5, 2, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 13, 12, 10, 2, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 8, 6, 10, 5, 4, 12], target = 6)"
    ],
    "sample_166": [
        "isAcronym(words = [\"apple\", \"banana\", \"orange\"], s = \"banana\")",
        "isAcronym(words = [\"Moon\", \"Earth\", \"Sun\"], s = \"MES\")",
        "isAcronym(words = [\"Data\", \"Structures\", \"Are\", \"Fun\"], s = \"DAF\")",
        "isAcronym(words = [\"hello\", \"there\", \"world\"], s = \"h\")",
        "isAcronym(words = [\"Massachusetts\",\"Institute\"], s = \"MIT\")",
        "isAcronym(words = [\"cats\", \"are\", \"cute\"], s = \"car\")",
        "isAcronym(words = [\"a\", \"b\", \"c\", \"d\", \"e\"], s = \"abc\")",
        "isAcronym(words = [\"Mini\", \"Cranberry\", \"Orange\"], s = \"MCO\")",
        "isAcronym(words = [\"Meme\", \"Face\", \"Airline\"], s = \"MFA\")",
        "isAcronym(words = [\"atomic\", \"black\", \"horse\", \"raspberry\"], s = \"aBhR\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank=2, additionalTank=1)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [5])",
        "maxIncreasingGroups(A = [5])",
        "maxIncreasingGroups(A = [1,2,3,4,5,6])",
        "maxIncreasingGroups(A = [1, 3, 2, 2, 3])",
        "maxIncreasingGroups(A = [3, 1, 1])",
        "maxIncreasingGroups(A = [2, 3, 1])",
        "maxIncreasingGroups(A = [2, 3, 4, 8, 10, 11])",
        "maxIncreasingGroups(A = [0, 6, 0, 1, 4, 2])",
        "maxIncreasingGroups(A = [0, 4, 2, 9, 8, 7, 6, 0, 4, 3])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 4])",
        "distinctDifferenceArray(nums = [2, 2, 2, 1, 1])",
        "distinctDifferenceArray(nums = [5, 3, 1, 1, 3])",
        "distinctDifferenceArray(nums = [0, 1, 2, 0, 1, 3])",
        "distinctDifferenceArray(nums = [5, 4, 5, 4, 3, 4])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 4, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [9,8,9,4,8,4,9,8,4,9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "sumIndicesWithKSetBits(nums = [2,4,6,8], k = 1)",
        "sumIndicesWithKSetBits(nums = [100, 200, 300], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 2, 7, 3, 6, 2, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [10,12,5,18,2,4,7], k = 3)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"aaabcc\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"aaabbbbcccc\")",
        "minimizedStringLength(s = \"aaabbbcccaaa\")",
        "minimizedStringLength(s = \"aaabccccddd\")",
        "minimizedStringLength(s = \"cab\")",
        "minimizedStringLength(s = \"aaaaaaabbbbbbbbbcccccccccc\")",
        "minimizedStringLength(s = \"aaabbbccccdd\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1], k = 3)",
        "longestEqualSubarray(nums = [2,2,2,1,2,2,1,2,2,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,3,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [0, 0, 0, 0, 0], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9], k = 5)",
        "longestEqualSubarray(nums = [0,1,1,0,2,0,2,2], k = 2)",
        "longestEqualSubarray(nums = [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "longestEqualSubarray(nums = [1,2,3,3,2,1,2,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 3, 2, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [5,15,25,35,45,55], k = 3)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [5, 1], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [0, 2], [0, 3], [1, 3], [1, 4]])",
        "colorTheArray(n = 5, queries = [[1,1],[4,2],[5,3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 2], [5, 3]])",
        "colorTheArray(n = 5, queries = [[1,1],[4,2],[5,2],[3,1]])",
        "colorTheArray(n=5, queries = [[0,1],[0,2],[1,3],[1,4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 3], [2, 1], [3, 1]])",
        "colorTheArray(n = 5, queries = [[1,1],[1,2],[1,3],[1,4],[2,4],[2,3]])",
        "colorTheArray(n = 3, queries = [[0,1], [0,2], [1,3], [1,3]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 4, 6, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 10], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 3, 2, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 5, 3, 4, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 1, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 5, 4, 2, 1, 0, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 2, 3, 3, 5, 2, 1, 3, 5, 1, 2, 2, 2, 4, 5, 5, 5, 4, 5], target = 4)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 15, 10, 30, 5])",
        "countBeautifulPairs(nums = [22, 45, 2, 81])",
        "countBeautifulPairs(nums = [12, 21, 13, 31, 32, 23])",
        "countBeautifulPairs(nums = [30, 12, 45, 12, 30])",
        "countBeautifulPairs(nums = [10, 20, 11, 22, 33, 30, 21, 10, 40, 41])",
        "countBeautifulPairs(nums = [12, 21, 11, 24, 32, 45, 63])",
        "countBeautifulPairs(nums = [70, 11, 20, 45, 75, 80, 85, 34, 90, 5])",
        "countBeautifulPairs(nums = [12, 15, 27, 89, 120, 450, 72])",
        "countBeautifulPairs(nums = [13, 25, 7, 37, 41, 61, 53, 32, 43])",
        "countBeautifulPairs(nums = [49, 20, 24, 69, 94, 26, 79, 93, 17, 32])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 3, 4])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [3, 2, 1, 2])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '0')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = '10100')",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = \"0\")",
        "maximumOddBinaryNumber(s = \"10111\")",
        "maximumOddBinaryNumber(s = \"01000\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 5, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 5, 9], k = 2)",
        "maximumBeauty(nums = [4, 5, 1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 4, 2, 3], k = 2)",
        "maximumBeauty(nums = [3, 5, 6, 1, 2], k = 1)",
        "maximumBeauty(nums = [1, 4, 2, 5, 6, 3], k = 2)",
        "maximumBeauty(nums = [0,2,12], k = 1)",
        "maximumBeauty(nums = [3, 7, 3, 1, 3, 4, 3, 3], k = 2)",
        "maximumBeauty(nums = [1,2,3,5,6,8,5,9], k = 5)",
        "maximumBeauty(nums = [9, 9, 4, 4, 3, 5, 6], k = 1)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [3, 1, 2])",
        "maximumTripletValue(nums = [1, 0, 3, 2, -1])",
        "maximumTripletValue(nums = [10, 2, 1, 4, 7, 9])",
        "maximumTripletValue(nums = [-5, 1, 3, -5, 100])",
        "maximumTripletValue(nums = [10, 9, 8, 1, 7, 5, 4, 3, 1, 1, 1, 1])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3], target = 1)",
        "maximumJumps(nums = [-1,0,1], target = 1)",
        "maximumJumps(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 1, 2, 1, 0], target = 2)",
        "maximumJumps(nums = [3, 3, 3, 3, 3, 3, 1, 3, 3, 3], target = 1)",
        "maximumJumps(nums = [2, 10, 6, 5, 11, 9], target = 2)",
        "maximumJumps(nums = [-1,1,5,2,3,4,2,2], target = 1)",
        "maximumJumps(nums = [10, 4, 2, 2, 8, 1], target = 2)",
        "maximumJumps(nums = [3, 1, 2, 2, 2, 3, 4, 3, 1, 1, 3, 6, 6, 2, 3], target = 1)"
    ],
    "sample_149": [
        "finalString(s = \"sitting\")",
        "finalString(s = \"string\")",
        "finalString(s = 'sings')",
        "finalString(s = \"wings\")",
        "finalString(s = 'ring')",
        "finalString(s = 'test')",
        "finalString(s = \"pingsats\")",
        "finalString(s = \"rsiinsgn\")",
        "finalString(s = 'imtsi')",
        "finalString(s = \"sinrtsng\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [2, 2, 2, 2, 2])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [2, 1, 3, 2, 2, 2])",
        "continuousSubarrays(A = [2, 1, 2, 1, 2, 2, 1, 2])",
        "continuousSubarrays(A = [3,2,4,1,3])",
        "continuousSubarrays(A = [1, 1, 3, 2, 1, 2, 3, 1, 1, 1])",
        "continuousSubarrays(A = [1,2,2,1,3,4,3,4,4,2,4,3])",
        "continuousSubarrays(A = [5, 2, 3, 7, 6, 2, 8, 1])",
        "continuousSubarrays(A = [1, 2, 3, 4, 0, 1, 2, 3, 3, 2, 1, 2, 3, 4, 4, 4])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countCompleteSubarrays(nums = [1, 3, 2, 2, 2, 3])",
        "countCompleteSubarrays(nums = [5, 2, 3, 1, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 3, 4])",
        "countCompleteSubarrays(nums = [6,2,3,4,1,5])",
        "countCompleteSubarrays(nums = [6, 1, 2, 3, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 4, 3, 3, 3, 3, 2])"
    ],
    "sample_228": [
        "countWays(nums = [0,1,3,4])",
        "countWays(nums = [3, 1, 2])",
        "countWays(nums = [0, 2, 3, 5])",
        "countWays(nums = [3,2,1])",
        "countWays(nums = [0,1,2,3,4,5,6,7,8,9,10])",
        "countWays(nums = [1,2,4,5,6,7,9])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [0, 4, 4, 5, 5])",
        "countWays(nums = [0, 3, 1, 5, 2, 4])",
        "countWays(nums = [0,0,0,2,1,1,1,3,4])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 3, 2, 5, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 2, 3, 1, 2, 1], k = 1)",
        "maximumBeauty(nums = [4, 1, 3, 3, 5], k = 2)",
        "maximumBeauty(nums = [1, 3, 7, 2, 6], k = 2)",
        "maximumBeauty(nums = [4, 4, 2, 2, 1, 1], k = 3)",
        "maximumBeauty(nums = [1, 10, 3, 4, 5, 6], k = 3)",
        "maximumBeauty(nums = [1, 3, 6, 7, 6, 5, 4, 4], k = 2)",
        "maximumBeauty(nums = [1, 5, 6, 7, 8, 9, 14, 15], k = 2)",
        "maximumBeauty(nums = [2,2,4,4,7,8,8,10,11], k = 4)",
        "maximumBeauty(nums = [1,3,2,5,2,5,4,6,7,8,1,3,5,7], k = 3)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(a = [1, 1, 1, 2, 3])",
        "distinctDifferenceArray(a = [1, 1, 1, 2, 2])",
        "distinctDifferenceArray(a = [1, 1, 1, 2, 2])",
        "distinctDifferenceArray(a = [1,2,2,3,4,5])",
        "distinctDifferenceArray(a = [1, 2, 2, 2, 2])",
        "distinctDifferenceArray(a = [1, 2, 3, 3, 2])",
        "distinctDifferenceArray(a = [3, 2, 1, 5, 4])",
        "distinctDifferenceArray(a = [0, 0, 0, 0, 1])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "continuousSubarrays(a = [1, 0, 0, 1, 0])",
        "continuousSubarrays(a = [1,0,1,0])",
        "continuousSubarrays(a = [1,1,0,0,0])",
        "continuousSubarrays(a = [1,2,0,4,0,2,-1])",
        "continuousSubarrays(a = [0, 2, 4, 6, 8, 9, 10])",
        "continuousSubarrays(a = [0, 1, 0, 1, 1, 0, 2, 1, 0, 2, 0, 2])",
        "continuousSubarrays(a = [2,5,8,4,1,3,7])",
        "continuousSubarrays(a = [1, 4, 2, 5, 3, 6, 7, 8, 1, 2, 3])",
        "continuousSubarrays(a = [1, 2, 2, 1, 3, 4, 2, 4, 5, 6, 5, 8, 9])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1, 3, 2, 1, 2])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1,2,2,3,4,4,5])",
        "continuousSubarrays(nums = [2, 1, 3, 2, 2, 2, 1])",
        "continuousSubarrays(nums = [4, 2, 2, 4, 2, 4, 4])",
        "continuousSubarrays(nums = [3, 4, 1, 2, 3, 5, 6])",
        "continuousSubarrays(nums = [1, 1, 0, 2, 2, 1, 2, 0, 0, 1, 2])",
        "continuousSubarrays(nums = [3, 2, 2, 4, 3, 6, 2, 6, 3, 6, 4, 4, 2, 3, 2, 1, 1])",
        "continuousSubarrays(nums = [3,4,7,2,8,9,2,2,2,4,4,5,6,6,1,1,3])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12,21,10])",
        "countBeautifulPairs(nums = [12,21,10])",
        "countBeautifulPairs(nums = [3,2,4,6])",
        "countBeautifulPairs(nums = [12,24,15,19])",
        "countBeautifulPairs(nums = [34,45,67,78])",
        "countBeautifulPairs(nums = [22, 4, 34, 5, 7])",
        "countBeautifulPairs(nums = [25, 42, 80])",
        "countBeautifulPairs(nums = [52,56,39,88])",
        "countBeautifulPairs(nums = [45,27,29,81,69,37])",
        "countBeautifulPairs(nums = [75809, 44751, 94311, 81594, 44894, 89454, 13520, 52893])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2,3,1,5,4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [4,3,1,2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [1,3,2,4,5])",
        "semiOrderedPermutation(nums = [2,1,3,5,4])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3, 5])",
        "semiOrderedPermutation(nums = [1,5,2,6,3,7,4])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 1])",
        "semiOrderedPermutation(nums = [2, 1])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [2,3,1])",
        "semiOrderedPermutation(nums = [2,1])",
        "semiOrderedPermutation(nums = [2,1])",
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [3,2,4,1])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [3,1,0,1,3,0,4,1])",
        "numberOfGoodSubarraySplits(nums = [3,0,0,2,5,0])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = '1110')",
        "maximumOddBinaryNumber(s = \"10100\")",
        "maximumOddBinaryNumber(s = '01100')",
        "maximumOddBinaryNumber(s = '1111')",
        "maximumOddBinaryNumber(s = \"0010111\")",
        "maximumOddBinaryNumber(s = \"010000000001\")"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [2, 2, 2, 1, 2, 2])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 3, 4])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCABDCD\")",
        "minLength(s = \"ABCDABCDABCDABCDABCD\")",
        "minLength(s = \"ABABABABCDCDCD\")",
        "minLength(s = \"CDABABCAB\")",
        "minLength(s = \"ABCDBACDCC\")",
        "minLength(s = \"ADABCCD\")",
        "minLength(s = \"CDCDABABAB\")",
        "minLength(s = \"AAAABBBBCCCCDDDD\")",
        "minLength(s = \"AAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBB\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1,3,2,2,2,1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [5,2,6,2,6])",
        "countCompleteSubarrays(nums = [3, 1, 2, 4, 5, 2])",
        "countCompleteSubarrays(nums = [3, 4, 5, 1, 2, 3])",
        "countCompleteSubarrays(nums = [2,4,3,5,5,4,4,5,5,2,3,2,1,1])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 100, num2 = 3)",
        "makeTheIntegerZero(num1 = 18, num2 = 3)",
        "makeTheIntegerZero(num1 = 13, num2 = 3)",
        "makeTheIntegerZero(num1 = 50, num2 = 5)",
        "makeTheIntegerZero(num1 = 30, num2 = 2)",
        "makeTheIntegerZero(num1 = 14, num2 = 7)",
        "makeTheIntegerZero(num1 = 57, num2 = 4)",
        "makeTheIntegerZero(num1 = 51, num2 = 6)",
        "makeTheIntegerZero(num1 = 72, num2 = 1)",
        "makeTheIntegerZero(num1 = 1996, num2 = 7)"
    ],
    "sample_100": [
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 1)",
        "maximumJumps(nums = [3,2,5,1,1,9], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 2, 1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [4, 2, 1, 1, 2, 1, 6, 1], target = 2)",
        "maximumJumps(nums = [3, 2, 6, 5, 11, 10, 9], target = 2)",
        "maximumJumps(nums = [100, 11, 23, 124, 125, 10], target = 2)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1,2,3,4,5,6,7,8,9])",
        "maxIncreasingGroups(x = [1, 10, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 7])",
        "maxIncreasingGroups(x = [1, 5, 3, 2, 6])",
        "maxIncreasingGroups(x = [3,5,6,7,9])",
        "maxIncreasingGroups(x = [4, 2, 6, 10, 2])",
        "maxIncreasingGroups(x = [0, 3, 4, 3, 2, 5])",
        "maxIncreasingGroups(x = [4, 12, 2, 7, 8, 10])",
        "maxIncreasingGroups(x = [2, 3, 4, 5, 6, 7, 12])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"R2L3L2\")",
        "furthestDistanceFromOrigin(moves = \"R2L_3R\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"R2L3L3L3R2\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"_LLLRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"_R_LLRRLL_\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"0011\")",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = '11101')",
        "maximumOddBinaryNumber(s = '110111')",
        "maximumOddBinaryNumber(s = \"0100111\")",
        "maximumOddBinaryNumber(s = '0000110000')"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n=1, queries = [[0,1]])",
        "colorTheArray(n = 3, queries = [\n    [1,1],\n    [2,2]\n])",
        "colorTheArray(n = 5, queries = [[1,1],[4,1],[4,2],[2,3],[3,4]])",
        "colorTheArray(n = 4, queries = [[0,1], [1,2], [1,3], [0,2], [0,3]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [3, 5, 2])",
        "findValueOfPartition(nums = [3, 5, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [3, 5, 6, 9, 12])",
        "findValueOfPartition(nums = [2, 2])",
        "findValueOfPartition(nums = [1, 2, 4, 5])",
        "findValueOfPartition(nums = [4, 5, 3, 2])",
        "findValueOfPartition(nums = [5, 5, 2, 1, 1])",
        "findValueOfPartition(nums = [1, 11, 8, 3, 4, 13, 2])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,0,0,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums=[2,1,0,2])",
        "numberOfGoodSubarraySplits(nums = [3, 0, 1, 5, 6, 4])",
        "numberOfGoodSubarraySplits(nums = [2, 3, 2, 1, 2, 1, 1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [3,2,3])",
        "minimumIndex(nums = [3,2,3])",
        "minimumIndex(nums = [3,2,3])",
        "minimumIndex(nums = [3,1,3,3,4,3])",
        "minimumIndex(nums = [3,1,4,2,4])",
        "minimumIndex(nums = [3,1,3,4,1])",
        "minimumIndex(nums = [4,3,10,9,10])",
        "minimumIndex(nums = [3, 5, 1, 2, 4, 7, 6])",
        "minimumIndex(nums = [1, 2, 3, 3, 1])",
        "minimumIndex(nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [14, 7, 3, 12, 5, 6, 7, 14, 2, 6], k = 3)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[0,2,10],[1,3,20],[2,4,30]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2], [2, 3, 10], [3, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,1],[3,5,2],[2,7,10]])",
        "maximizeTheProfit(n = 3, offers = [[1,3,6],[4,5,10],[2,4,4]])",
        "maximizeTheProfit(n = 3, offers = [[0,2,4], [1,4,2], [3,5,0]])",
        "maximizeTheProfit(n = 3, offers = [[1,3,5],[2,3,4],[3,5,2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 100], [3, 5, 150], [2, 3, 50], [4, 5, 200]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,20],[2,4,40],[3,4,50],[4,4,90]])",
        "maximizeTheProfit(n = 3, offers = [[3, 4, 8], [2, 3, 4], [5, 6, 9]])",
        "maximizeTheProfit(n = 1, offers = [[2,5,5], [1,5,4], [3,7,6]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0250\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"02500\")",
        "minimumOperations(num = \"7000\")",
        "minimumOperations(num = \"2025\")",
        "minimumOperations(num = \"007500\")",
        "minimumOperations(num = \"007500\")",
        "minimumOperations(num = \"0010\")",
        "minimumOperations(num = \"123400\")",
        "minimumOperations(num = \"2500250\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"7000\")",
        "minimumOperations(num = \"1200\")",
        "minimumOperations(num = \"123405\")",
        "minimumOperations(num = \"011\")",
        "minimumOperations(num = \"1234567890\")",
        "minimumOperations(num = \"012500\")",
        "minimumOperations(num = \"100500\")",
        "minimumOperations(num = \"3004\")",
        "minimumOperations(num = \"2302\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[4,3,1],[2,2,3]])",
        "maximizeTheProfit(n = 4, offers = [[2,3,1],[1,2,2]])",
        "maximizeTheProfit(n=5, offers = [[3, 2, 1], [2, 1, 2], [1, 3, 1]])",
        "maximizeTheProfit(n = 5, offers = [[4,3,2],[3,2,1],[3,1,0]])",
        "maximizeTheProfit(n = 4, offers = [[2,3,7],[1,2,4],[0,1,3]])",
        "maximizeTheProfit(n=4, offers = [[3, 1, 2], [4, 1, 1], [4, 2, 1], [3, 3, 1]])",
        "maximizeTheProfit(n = 4, offers = [[4, 2, 10], [3, 1, 5], [2, 4, 3]])",
        "maximizeTheProfit(n = 5, offers = [[3, 1, 1], [5, 4, 1], [2, 0, 1], [4, 3, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1,3,2],[3,4,4],[4,5,3],[3,4,2]])",
        "maximizeTheProfit(n=5, offers=[[1,2,2],[1,4,2],[1,1,2],[3,4,1],[3,2,3]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,7,3,4,9,6], threshold = 6)",
        "longestAlternatingSubarray(nums = [3,1,6,4,7], threshold = 4)",
        "longestAlternatingSubarray(nums = [0, 1, 1, 0, 0, 0, 0, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,3,3,4,3,1,5], threshold = 2)",
        "longestAlternatingSubarray(nums = [3, 5, 5, 1, 2, 2, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,1,7,7,4,7,7,3,1,4], threshold = 6)",
        "longestAlternatingSubarray(nums = [4, 1, 4, 4, 4, 4, 2, 1, 4, 1, 4, 4, 4, 4, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 7, 6, 3, 4, 3, 9, 8, 5, 9, 2, 7], threshold = 9)"
    ],
    "sample_203": [
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"555\")",
        "minimumOperations(num = \"1200\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"367\")",
        "minimumOperations(num = \"050075025\")",
        "minimumOperations(num = \"0050\")",
        "minimumOperations(num = \"252525\")",
        "minimumOperations(num = \"40025\")",
        "minimumOperations(num = \"00025750\")"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 3], [3, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [5, 1], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [2, 2], [1, 2], [2, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 1], [3, 2], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [2, 2], [2, 1], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [2, 3], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[4,2],[1,3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 1], [2, 2], [2, 2], [2, 2]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,2],[1,3],[4,1]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [3, 1, 3, 3, 2, 3])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 2])",
        "minimumIndex(nums = [2, 2, 3, 1, 2, 4, 2])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 1, 1, 3])",
        "minimumIndex(nums = [3, 4, 5, 4, 5])",
        "minimumIndex(nums = [0, 2, 2, 2, 0])",
        "minimumIndex(nums = [0, 0, 3, 4, 3])",
        "minimumIndex(nums = [1, 3, 5, 7, 9, 1, 3, 5, 7, 9, 1, 3, 5, 7, 9])",
        "minimumIndex(nums = [3, 2, 5, 5, 1, 5, 5])"
    ],
    "sample_102": [
        "maximumJumps(nums = [2, 1, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [5, 10, 15, 20], target = 5)",
        "maximumJumps(nums = [9, 9, 9, 9, 9], target = 4)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 1], target = 1)",
        "maximumJumps(nums = [3, 10, 2, 9, 9, 4], target = 1)",
        "maximumJumps(nums = [3, 2, 3, 1, 2, 4, 3, 5, 0], target = 2)",
        "maximumJumps(nums = [9, 5, 4, 4, 8, 2, 6, 1, 5, 8], target = 5)",
        "maximumJumps(nums = [100,-1,44,28,129,-250,201], target = 2)",
        "maximumJumps(nums = [42, 4, 7, 18, 1, 2], target = 1)",
        "maximumJumps(nums = [-2, 0, 3, 4, 4, 12, 13, 15, 16, 17, 20], target = 10)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"5123010000000\")"
    ],
    "sample_57": [
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 1, b = 2)",
        "distanceTraveled(a = 1, b = 2)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 2, b = 3)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 4, b = 1)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [8, 5, 3, 1])",
        "findValueOfPartition(a = [1, 11, 2, 10])",
        "findValueOfPartition(a = [1, 3, 5, 9])",
        "findValueOfPartition(a = [1, 2, 3, 7, 9])",
        "findValueOfPartition(a = [1, 6, 1, 0])",
        "findValueOfPartition(a = [4, 9, 17, 5])",
        "findValueOfPartition(a = [1,2,5,10,5,2,5])",
        "findValueOfPartition(a = [10, 5, 1, 5, 1])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2])",
        "distinctDifferenceArray(nums = [5,2,1,3,4])",
        "distinctDifferenceArray(nums = [3,2,1,5,4])",
        "distinctDifferenceArray(nums = [2, 1, 3, 2, 3, 2, 3, 4])",
        "distinctDifferenceArray(nums = [2, 2, 2, 1, 3, 1, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 3, 5, 1, 7, 10, 3, 7])"
    ],
    "sample_120": [
        "minimumIndex(nums = [2, 2, 3, 1])",
        "minimumIndex(nums = [3, 4, 4, 5, 5, 5, 6])",
        "minimumIndex(nums = [0, 0, 1])",
        "minimumIndex(nums = [0, 1, 0, 1])",
        "minimumIndex(nums = [2, 1, 2, 1, 3, 1, 2])",
        "minimumIndex(nums = [3,2,1,2,3,2,1])",
        "minimumIndex(nums = [1, 2, 3, 2, 5, 3, 1])",
        "minimumIndex(nums = [3, 5, 9, 1, 3, 4, 5, 7, 8, 9, 0])",
        "minimumIndex(nums = [2, 2, 2, 3, 1, 2, 4, 2, 2, 2, 2, 5, 2, 2])",
        "minimumIndex(nums = [3, 1, 5, 2, 4, 8, 3, 1, 7, 2, 2, 1])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"R2L3R\")",
        "furthestDistanceFromOrigin(moves = \"R2L3L\")",
        "furthestDistanceFromOrigin(moves = \"R2L3L\")",
        "furthestDistanceFromOrigin(moves = \"R2L3L3R\")",
        "furthestDistanceFromOrigin(moves = \"LLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLR\")",
        "furthestDistanceFromOrigin(moves = \"R3R3R\")",
        "furthestDistanceFromOrigin(moves = \"R2L1L\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLRRRRLLLRR\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"aaabbbc\")",
        "minimizedStringLength(s = \"aaabcccc\")",
        "minimizedStringLength(s = \"aaabbc\")",
        "minimizedStringLength(s = \"aaaabcccc\")",
        "minimizedStringLength(s = \"xaa\")",
        "minimizedStringLength(s = \"abaacbac\")",
        "minimizedStringLength(s = \"tet\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [2, 1, 5, 6, 2, 2], k = 2)",
        "checkArray(nums = [3, 2, 1, 2, 1], k = 3)",
        "checkArray(nums = [4,3,2,6,1,2], k = 3)",
        "checkArray(nums = [3, 4, 3, 2, 1, 2, 2, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 10], k = 3)",
        "checkArray(nums = [3, 2, 5, 1, 7, 2, 8], k = 3)",
        "checkArray(nums = [2, 3, 2, 3, 5, 5, 2, 1, 2, 4], k = 3)",
        "checkArray(nums = [13, 11, 13, 6, 12, 14, 12, 11, 10, 7, 7, 8, 10, 7], k = 2)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 5, 6])",
        "maxIncreasingGroups(usageLimits = [6, 5, 5])",
        "maxIncreasingGroups(usageLimits = [3, 2, 2, 2, 1, 0])",
        "maxIncreasingGroups(usageLimits = [30, 10, 20])",
        "maxIncreasingGroups(usageLimits = [3, 2, 2, 1, 2, 1, 2])",
        "maxIncreasingGroups(usageLimits = [8, 4, 5, 3, 2, 6])",
        "maxIncreasingGroups(usageLimits = [9,9,8,7,7])",
        "maxIncreasingGroups(usageLimits = [11, 10, 10, 11, 12])",
        "maxIncreasingGroups(usageLimits = [16, 14, 12, 11, 10, 8, 7, 6, 5, 3, 2])",
        "maxIncreasingGroups(usageLimits = [1, 5, 10, 8, 3, 7, 8, 1, 2, 4, 10, 7, 7, 8, 2, 7, 3, 9, 7, 2, 7, 4, 7, 5, 6, 7, 8, 1, 9, 10, 1, 10, 5, 6, 6, 5, 6, 3, 2, 9, 4, 1, 7, 4, 10, 4, 2, 10, 1, 10, 5, 4, 10, 3, 9, 8, 7, 9, 1, 8, 8, 3, 8, 9, 10, 10, 9, 3, 7, 4, 10, 5, 2, 10, 1, 9, 9, 10, 4, 8, 7, 9, 9, 9, 9, 10, 8, 10, 9, 6, 8, 9, 1, 7, 9, 10, 5, 5, 8, 10, 9, 9, 6, 4, 7, 3, 7, 4, 7, 2, 6, 9, 10, 9, 8, 1, 3, 1, 7, 7, 2, 5, 1, 5, 7, 6, 6, 6, 9, 8, 3, 1, 5, 5, 10, 10, 3, 4, 3, 1, 7, 5, 4, 3, 8, 8, 7, 5, 1, 4, 1, 6, 5, 5, 1, 1, 10, 10, 9, 9, 10, 10, 3,"
    ],
    "sample_206": [
        "minimumOperations(num = \"15\")",
        "minimumOperations(num = \"1000\")",
        "minimumOperations(num = \"50\")",
        "minimumOperations(num = \"4000\")",
        "minimumOperations(num = \"57502205\")",
        "minimumOperations(num = \"5500\")",
        "minimumOperations(num = \"453\")",
        "minimumOperations(num = \"8889\")",
        "minimumOperations(num = \"8103\")",
        "minimumOperations(num = \"1122221\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 0, 2, 1])",
        "doesValidArrayExist(derived = [0, 2, 4, 2, 0])",
        "doesValidArrayExist(derived = [3, 2, 4, 6])",
        "doesValidArrayExist(derived = [0, 4, 3, 3, 4])",
        "doesValidArrayExist(derived = [4, 1, 6, 7, 0])",
        "doesValidArrayExist(derived = [4, 1, 3, 4, 1, 6])",
        "doesValidArrayExist(derived = [3, 0, 1, 1, 2, 4, 5])",
        "doesValidArrayExist(derived = [1,0,3,3,0,1])",
        "doesValidArrayExist(derived = [0, 4, 5, 7, 6, 1, 3, 2])",
        "doesValidArrayExist(derived = [12, 8, 5, 2, 10, 11])"
    ],
    "sample_38": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"CABABC\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [2, 4, 8])",
        "maxIncreasingGroups(usageLimits = [1, 3, 4, 8])",
        "maxIncreasingGroups(usageLimits = [5, 4, 2, 1])",
        "maxIncreasingGroups(usageLimits = [12, 11, 10])",
        "maxIncreasingGroups(usageLimits = [6, 5, 3, 4, 2])",
        "maxIncreasingGroups(usageLimits = [3, 4, 7, 8, 9])",
        "maxIncreasingGroups(usageLimits = [0, 2, 4, 6, 10])",
        "maxIncreasingGroups(usageLimits = [1, 0, 4, 3, 2])",
        "maxIncreasingGroups(usageLimits = [3, 3, 1, 3, 5, 1, 5])"
    ],
    "sample_53": [
        "smallestString(s = 'babcd')",
        "smallestString(s = 'bbbac')",
        "smallestString(s = \"bac\")",
        "smallestString(s = 'bbacc')",
        "smallestString(s = \"babcd\")",
        "smallestString(s = 'bazzz')",
        "smallestString(s = 'bazzz')",
        "smallestString(s = 'bbb')",
        "smallestString(s = \"bazzzz\")",
        "smallestString(s = 'babba')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,3,6,10,15], x = 3)",
        "minAbsoluteDifference(nums = [5, 2, 3, 7, 1, 10], x = 3)",
        "minAbsoluteDifference(nums = [1,5,3,6,12,17,20], x = 4)",
        "minAbsoluteDifference(nums = [2,4,2,5,1,7,2,3], x = 3)",
        "minAbsoluteDifference(nums=[1,5,3,7,2,4,5], x = 4)",
        "minAbsoluteDifference(nums = [2,7,5,2,3,5,3,4,5,7,2], x = 7)",
        "minAbsoluteDifference(nums = [23,23,12,30,29,23,19,25], x = 3)",
        "minAbsoluteDifference(nums = [1, 5, 2, 4, 10, 28, 5, 2, 10, 7], x = 6)",
        "minAbsoluteDifference(nums = [1,5,3,7,33,8,3,99], x = 5)",
        "minAbsoluteDifference(nums = [13, 18, 11, 21, 13, 3, 13, 11], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 2], [1, 5, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [1, 3, 4], [2, 3, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 100], [2, 3, 20], [3, 4, 50], [2, 4, 40], [3, 5, 30]])",
        "maximizeTheProfit(N = 3, offers = [[1,2,1],[1,3,2]])",
        "maximizeTheProfit(N = 3, offers = [[1, 3, 50], [2, 2, 25], [3, 1, 50]])",
        "maximizeTheProfit(N = 4, offers = [[0, 1, 2], [1, 3, 1], [2, 3, 1], [0, 2, 1]])",
        "maximizeTheProfit(N = 10, offers = [[1,2,100],[3,5,100],[6,7,100],[8,9,100]])",
        "maximizeTheProfit(N = 4, offers = [[1, 1, 1], [2, 2, 2], [1, 2, 4]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 1], [1, 2, 3], [0, 3, 4], [3, 4, 7]])",
        "maximizeTheProfit(N = 100, offers = [[1,50,2],[2,50,3],[3,50,2],[1,25,1],[2,25,2],[3,25,1],[1,100,3],[2,100,2],[3,100,1]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \"\")",
        "splitWordsBySeparator(a = [\"\", \"\", \"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"apples,pears\", \"oranges,lemons\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apples\", \"bananas\", \"oranges\"], b = \"s\")",
        "splitWordsBySeparator(a = [\"abc\", \"de\", \"\", \"f\", \"ghi\", \"j\"], b = \"f\")",
        "splitWordsBySeparator(a = [\"Hello,\", \"my\", \"dear!\", \"Love,\", \"Joe\"], b = \",\")",
        "splitWordsBySeparator(a = [\"b|n|na|nana\", \"ba|na|nana\", \"ban|na|na\", \"bana|na|a\"], b = \"|\")",
        "splitWordsBySeparator(a = [\" \", \"asf23g\"], b = \"as\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a = \"512301000\")",
        "removeTrailingZeros(a = '512300')",
        "removeTrailingZeros(a = '512301.00000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"nevene\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"nevenn\")",
        "makeSmallestPalindrome(s = \"enevn\")",
        "makeSmallestPalindrome(s = \"neo\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,2,3,3,3,4,4,5,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,3,3,3,4,4,4,4], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,3,3,3,4,4], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,3,2,2,1], k = 1)",
        "longestEqualSubarray(nums = [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [2, 4, 5, 6, 7, 8, 10], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,1,1,3,4,3,3,3], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 3, 2, 5, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [2, 2, 2, 2], k = 1)",
        "maximumBeauty(nums = [3, 7, 1, 8, 5, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 1, 3, 1], k = 1)",
        "maximumBeauty(nums = [1,5,2,4,10,3], k = 3)",
        "maximumBeauty(nums = [1, 3, 7, 9, 15, 20], k = 4)",
        "maximumBeauty(nums=[5, 5, 6, 6, 6, 7, 7], k=1)",
        "maximumBeauty(nums = [1, 4, 2, 5, 10, 9, 3], k = 3)",
        "maximumBeauty(nums = [1,5,11,16,20], k = 10)"
    ],
    "sample_163": [
        "maxSum(nums = [1])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [100])",
        "maxSum(nums = [1, 10, 2])",
        "maxSum(nums = [9, 99, 999])",
        "maxSum(nums = [9,9])",
        "maxSum(nums = [21,21])",
        "maxSum(nums = [55, 88])",
        "maxSum(nums = [73, 10])",
        "maxSum(nums = [3, 4, 123, 1234])"
    ],
    "sample_151": [
        "finalString(s = 'ringing')",
        "finalString(s = \"singing\")",
        "finalString(s = 'hello')",
        "finalString(s = \"wings\")",
        "finalString(s = \"this is a test\")",
        "finalString(s = 'sitring')",
        "finalString(s = \"thisiisng\")",
        "finalString(s = 'isntr')",
        "finalString(s = \"wrings\")",
        "finalString(s = \"hackerrankin\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512300000000001')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"00000\")",
        "maximumOddBinaryNumber(s = \"000000\")",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"000000000\")",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = \"0101010101010101\")",
        "maximumOddBinaryNumber(s = \"10001000\")",
        "maximumOddBinaryNumber(s = \"00000011000\")",
        "maximumOddBinaryNumber(s = \"10001101010\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = 'asy')",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = 'asy')",
        "splitWordsBySeparator(words = [\"easy-peasy\", \"problem-solving\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy+problem\"], separator = \"+\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,4,1,2,3,4], K = 0)",
        "longestEqualSubarray(A = [0,1,2,3,4,1,2,3,4], K = 2)",
        "longestEqualSubarray(A = [0,0,0,0,0,0,0,0,0], K = 4)",
        "longestEqualSubarray(A = [1,2,3,3,3,3,2,2,2,2], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 2, 1], K = 1)",
        "longestEqualSubarray(A = [0, 0, 0, 0, 0, 0, 1, 1, 1, 1], K = 5)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 2, 2, 2, 2, 2], K = 3)",
        "longestEqualSubarray(A = [0,1,0,0,1,0,1,1,1,0], K = 1)",
        "longestEqualSubarray(A = [0,0,0,1,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0], K = 2)",
        "longestEqualSubarray(A = [1, 2, 2, 3, 4, 2, 3, 1, 3, 3], K = 3)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2])",
        "countWays(nums = [2, 1, 0])",
        "countWays(nums = [1, 1, 1])",
        "countWays(nums = [2, 3, 1, 5])",
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [2, 0, 1])",
        "countWays(nums = [3, 2, 0, 1])",
        "countWays(nums = [3, 4, 1, 1])",
        "countWays(nums = [1, 2, 4, 5, 10])",
        "countWays(nums = [10, 4, 6, 8, 1])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 3, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 5, 7, 9, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 6, 1, 7, 8, 7], k = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"512301000\")"
    ],
    "sample_167": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"A\", \"B\", \"C\"], s = \"AC\")",
        "isAcronym(words = [\"Natural\", \"Language\", \"Processing\"], s = \"NLP\")",
        "isAcronym(words = [\"I\", \"love\", \"dogs\"], s = \"ILd\")",
        "isAcronym(words = [\"S\", \"D\", \"K\"], s = \"KDS\")",
        "isAcronym(words = [\"hi\", \"there\"], s = \"TH\")",
        "isAcronym(words = [\"Deep\", \"Learning\", \"Intelligence\"], s = \"DLI\")",
        "isAcronym(words = [\"my\", \"name\", \"is\", \"jeonghun\"], s = \"misjh\")",
        "isAcronym(words = [\"Emma\", \"lake\", \"Sarah\", \"Jay\"], s = \"ELSJ\")",
        "isAcronym(words = [\"Cog\", \"South\", \"Hollywood\", \"Studio\"], s = \"CSHS\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [8,1,2,2,2])",
        "countCompleteSubarrays(nums = [2, 2, 3, 4, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 2, 1, 1, 3])",
        "countCompleteSubarrays(nums = [5, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 3, 4, 3])",
        "countCompleteSubarrays(nums = [4,3,2,3,4,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 4, 1, 2])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 100)"
    ],
    "sample_147": [
        "finalString(s = 'thisng')",
        "finalString(s = 'thisng')",
        "finalString(s = \"thisng\")",
        "finalString(s = 'ignati')",
        "finalString(s = \"thisisng\")",
        "finalString(s = 'ignis')",
        "finalString(s = \"ignis\")",
        "finalString(s = \"gniis\")",
        "finalString(s = \"rishit\")",
        "finalString(s = \"sirght\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"leven\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"oddeven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'idneven')",
        "makeSmallestPalindrome(s = \"edevn\")",
        "makeSmallestPalindrome(s = \"gfedcba\")",
        "makeSmallestPalindrome(s = \"idoveven\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 6], [2, 3, 7], [3, 4, 12]])",
        "maximizeTheProfit(n = 3, offers = [[1,3,5],[2,3,8]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [4, 5, 8]])",
        "maximizeTheProfit(n = 3, offers = [(1, 1, 2), (2, 2, 3), (3, 3, 5)])",
        "maximizeTheProfit(n = 4, offers = [[0,1,10],[2,4,7],[1,3,5]])",
        "maximizeTheProfit(n = 1, offers = [[1, 3, 2], [3, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [(1, 2, 3), (4, 5, 3), (3, 5, 5)])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 2], [2, 5, 10], [3, 1, 5], [8, 7, 15]])",
        "maximizeTheProfit(n = 5, offers = [(4, 6, 5), (5, 6, 6), (2, 4, 3), (4, 5, 3), (1, 1, 5)])",
        "maximizeTheProfit(n = 5, offers = [[3, 2, 10], [4, 3, 10], [2, 1, 5], [3, 3, 15], [3, 4, 20], [4, 5, 30], [1, 1, 50], [1, 2, 50]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [6, 1, 9], target = 2)",
        "maximumJumps(nums = [3, 3, 3, 3, 3], target = 0)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 2, 6, 7], target = 4)",
        "maximumJumps(nums = [1, 1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [3, 3, 3, 3, 3, 3, 3], target = 2)",
        "maximumJumps(nums = [13, 3, 7, 20, 19, 5], target = 3)",
        "maximumJumps(nums = [7, 5, 3, 3, 0], target = 2)",
        "maximumJumps(nums = [6, 7, 4, 3, 2, 1], target = 2)",
        "maximumJumps(nums = [102,122,124,11,12], target = 12)",
        "maximumJumps(nums = [-7, -7, -7, -7, -7, 3, 6, 9, 5, -7], target = 6)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [3,0,1,2,5])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [3,4,7,9])",
        "numberOfGoodSubarraySplits(nums = [3,1,2,2,1,2,2,1,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [3,2,1,2,5,2,1,4,4])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"01\")",
        "maximumOddBinaryNumber(s = \"0011\")",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = \"0000111\")",
        "maximumOddBinaryNumber(s = '1001000')"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 1, k = 10)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 17, num2 = 5)",
        "makeTheIntegerZero(num1 = 17, num2 = 5)",
        "makeTheIntegerZero(num1 = 16, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 17, num2 = 4)",
        "makeTheIntegerZero(num1 = 128, num2 = 2)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 100, target = 1)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [2, 2, 2, 4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 0], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 7, 2, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 3, 5, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 6, 2, 2, 5, 2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 1, 7, 2, 2, 2], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [5, 7, 4, 6, 2, 9, 6], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [5, 7, 7, 9, 1, 15, 15], modulo = 7, k = 0)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 4, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "maximumBeauty(nums = [1, 2, 3], k = 3)",
        "maximumBeauty(nums = [3,5,7,9], k = 2)",
        "maximumBeauty(nums = [0,2,4,6,9], k = 3)",
        "maximumBeauty(nums = [1,3,2,5,2,5,4,5,6,4,4,5], k = 3)",
        "maximumBeauty(nums = [3,10,5,12,5,3,1,10], k = 3)",
        "maximumBeauty(nums = [1, 3, 8, 2, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 5, 4, 6, 10], k = 4)",
        "maximumBeauty(nums = [6, 5, 2, 3, 9, 8, 4, 1, 10, 7], k = 3)"
    ],
    "sample_148": [
        "finalString(s = \"pintire\")",
        "finalString(s = 'pintire')",
        "finalString(s = \"inpointer\")",
        "finalString(s = \"pinoter\")",
        "finalString(s = \"tinpi\")",
        "finalString(s = \"thisi\")",
        "finalString(s = \"ptrin\")",
        "finalString(s = \"pont_i\")",
        "finalString(s = \"ratfinpni\")",
        "finalString(s = \"miript\")"
    ],
    "sample_231": [
        "countWays(nums = [1, 3, 4])",
        "countWays(nums = [0, 2, 3])",
        "countWays(nums = [3, 2, 1, 0])",
        "countWays(nums = [0, 1, 3, 6])",
        "countWays(nums = [2, 3, 1, 5])",
        "countWays(nums = [3, 2, 1, 3])",
        "countWays(nums = [0,2])",
        "countWays(nums = [3, 2, 4, 1])",
        "countWays(nums = [1, 2, 3, 4, 7])",
        "countWays(nums = [1, 1, 1, 2, 2, 4])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [23,34,7,29])",
        "countBeautifulPairs(nums = [12, 15, 75, 15, 23])",
        "countBeautifulPairs(nums = [15, 22, 10, 5])",
        "countBeautifulPairs(nums = [48,28])",
        "countBeautifulPairs(nums = [12, 13, 21, 34, 33])",
        "countBeautifulPairs(nums = [12,24,30,24,60,80,120])",
        "countBeautifulPairs(nums = [50, 45, 60, 63, 54, 39])",
        "countBeautifulPairs(nums = [12,21,42,11,34,68,75,16])",
        "countBeautifulPairs(nums = [22, 41, 13, 28, 59, 87, 23, 97])",
        "countBeautifulPairs(nums = [74, 96, 86, 59, 34, 99])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 9, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 27, num2 = 3)",
        "makeTheIntegerZero(num1 = 19, num2 = 5)",
        "makeTheIntegerZero(num1 = 100, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 45, num2 = 2)",
        "makeTheIntegerZero(num1 = 48, num2 = 3)",
        "makeTheIntegerZero(num1 = 23, num2 = 10)",
        "makeTheIntegerZero(num1 = 63, num2 = 6)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"venn\")",
        "makeSmallestPalindrome(s = 'venn')",
        "makeSmallestPalindrome(s = 'oddeven')",
        "makeSmallestPalindrome(s = \"nenev\")",
        "makeSmallestPalindrome(s = \"neneven\")",
        "makeSmallestPalindrome(s = \"eventne\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"abc\", \"def\"], s = \"ad\")",
        "isAcronym(words = [\"data\", \"science\", \"python\"], s = \"dsps\")",
        "isAcronym(words = ['United', 'States'], s = 'USA')",
        "isAcronym(words = [\"uniform\", \"conference\"], s = \"UConn\")",
        "isAcronym(words = [\"hack\", \"your\", \"life\"], s = \"HYL\")",
        "isAcronym(words = ['code', 'eat', 'apple'], s = \"cea\")",
        "isAcronym(words = [\"Hey\", \"Hacktober\", \"Challenge\"], s = \"HHCC\")",
        "isAcronym(words = [\"School\", \"of\", \"Cool\", \"Kids\"], s = \"SCOK\")",
        "isAcronym(words = ['d', 'i', 'l', 'i'], s = \"DIL\")",
        "isAcronym(words = [\"D\",\"CRM\",\"MPT\"], s = \"DMPT\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [3,0,1,2,5])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [2,2,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0,1,0,1,0,0,1,1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [0,1,2,3,4,5,6,7,8,9], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [23, 3, 4], k = 1)"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [-1, 0, 1, 3])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [0, 1, 3, 6])",
        "countWays(nums = [-1, 1, 2, 3, 4])",
        "countWays(nums = [-3, -1, 0, 1, 2])",
        "countWays(nums = [5, 2, 3])",
        "countWays(nums = [3, 2, 1, 0, -1, -2])",
        "countWays(nums = [-1000000, 0, 10000000])",
        "countWays(nums = [-1,-0.5,-0.3,3])"
    ],
    "sample_39": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abbaa\")",
        "minimumCost(s = \"aaabbbb\")",
        "minimumCost(s = \"ACCA\")",
        "minimumCost(s = \"BABA\")",
        "minimumCost(s = \"ABAACA\")",
        "minimumCost(s = \"caac\")",
        "minimumCost(s = \"acbab\")",
        "minimumCost(s = \"cbaabccb\")",
        "minimumCost(s = \"jfokgggd\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"_L_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"_____L__R_\")",
        "furthestDistanceFromOrigin(moves = \"__L_RR__\")",
        "furthestDistanceFromOrigin(moves = \"_L_R__R\")",
        "furthestDistanceFromOrigin(moves = \"_LL\")",
        "furthestDistanceFromOrigin(moves = \"L__R_L_\")",
        "furthestDistanceFromOrigin(moves = \"__R_LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"____L__R__\")",
        "furthestDistanceFromOrigin(moves = \"____RLLRRL\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 9, additionalTank = 1)",
        "distanceTraveled(mainTank = 20, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 4)",
        "distanceTraveled(mainTank = 11, additionalTank = 1)",
        "distanceTraveled(mainTank = 9, additionalTank = 3)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [2, 3, 1, 2, 4, 3])",
        "countCompleteSubarrays(nums = [1,3,2,2,2,3,1])",
        "countCompleteSubarrays(nums = [9, 10, 3, 5, 6, 8, 1, 2, 4, 7])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 1], threshold = 0)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 5, 6], threshold = 7)",
        "longestAlternatingSubarray(nums = [0, 1, 1, 0, 0, 0, 0, 0], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], threshold = 1)",
        "longestAlternatingSubarray(nums = [5,2,5,2,5,2,5], threshold = 9)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 7, 8], threshold = 12)",
        "longestAlternatingSubarray(nums = [2,3,4,3,5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 5, 7, 7, 2], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 5, 4, 3, 2, 3, 4, 7, 8], threshold = 4)",
        "longestAlternatingSubarray(nums = [7, 2, 9, 2, 5, 7, 9, 2, 3, 5, 9, 6, 9, 8, 5, 2, 4, 6, 3, 4, 9], threshold = 5)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 19], [15, 18]])",
        "numberOfPoints(nums = [[-4,-1],[1,2],[1,2]])",
        "numberOfPoints(nums = [[1,2], [2,3], [3,4], [4,5], [4,6]])",
        "numberOfPoints(nums = [[1,3],[3,6],[0,6],[3,5],[6,9],[1,6],[2,4]])",
        "numberOfPoints(nums = [[1,2],[2,3],[1,3],[3,4],[3,5]])",
        "numberOfPoints(nums = [[0, 7], [2, 6], [3, 5], [6, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [2, 5], [3, 5]])",
        "numberOfPoints(nums = [[0, 1], [2, 3], [4, 5], [6, 8], [9, 12], [12, 14]])",
        "numberOfPoints(nums = [[2, 3], [10, 16], [5, 9], [1, 10]])",
        "numberOfPoints(nums = [[1,5],[1,2],[2,3],[3,4],[4,5],[3,4],[0,5],[1,4]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [10, 20, 11, 2])",
        "countBeautifulPairs(nums = [10,20,11])",
        "countBeautifulPairs(nums = [12,24,6,30])",
        "countBeautifulPairs(nums = [12, 16, 2])",
        "countBeautifulPairs(nums = [12, 4, 6, 2])",
        "countBeautifulPairs(nums = [12,24,27,28,36])",
        "countBeautifulPairs(nums = [12, 4, 9, 10])",
        "countBeautifulPairs(nums = [12, 24, 29, 30, 36, 45, 48, 60, 66, 80, 90])",
        "countBeautifulPairs(nums = [123, 345, 5123])",
        "countBeautifulPairs(nums = [12, 11, 24, 19, 17, 20])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], t = 1)",
        "longestAlternatingSubarray(nums = [2,2,2,1,2], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "longestAlternatingSubarray(nums=[1,2,3], t=2)",
        "longestAlternatingSubarray(nums = [10,10,10], t = 1)",
        "longestAlternatingSubarray(nums = [10, 7, 11, 1, 3, 1, 2], t = 4)",
        "longestAlternatingSubarray(nums = [4,2,3,5,2], t = 5)",
        "longestAlternatingSubarray(nums = [2,1,4,3,2,4,3,5], t = 4)",
        "longestAlternatingSubarray(nums = [5, 3, 7, 4, 4, 2, 1, 5, 8, 6], t = 2)",
        "longestAlternatingSubarray(nums = [10, 4, 7, 8, 2, 11, 12, 4, 2], t = 11)"
    ],
    "sample_36": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abcbcba\")",
        "minimumCost(s = \"AABABBA\")",
        "minimumCost(s = \"BCABBBCB\")",
        "minimumCost(s = \"abbcabb\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDBDCD\")",
        "minLength(s = \"ABBCCDD\")",
        "minLength(s = \"ABCDDCBA\")",
        "minLength(s = \"ACBABDCDC\")",
        "minLength(s = \"ABCABCABCABC\")",
        "minLength(s = \"ABaABaCD\")",
        "minLength(s = \"ABCDECDCC\")",
        "minLength(s = \"ABCDEBCDABABCD\")",
        "minLength(s = \"AACDXABBXXCD\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [2, 2, 2, 4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3,3,3,1], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [3, 5, 7, 9, 11], modulo = 10, k = 0)",
        "countInterestingSubarrays(nums = [3,5,6,7,4,5,1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [3,2,6,1,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums=[2, 4, 5, 9], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [2, 5, 1, 2, 5, 2], modulo = 6, k = 0)",
        "countInterestingSubarrays(nums = [1, 3, 7, 7, 4, 1], modulo = 7, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 5, 1, 3, 2, 1, 1, 2, 3, 4], modulo = 5, k = 0)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,0]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 2]])",
        "colorTheArray(n = 1, queries = [[0, 1], [0, 2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,1],[3,2],[1,3],[0,2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [3, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 3], [2, 2], [0, 3]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 5, 4, 3, 2])",
        "maxNonDecreasingLength(nums1 = [1,2,3,4,5], nums2 = [6,5,4,3,2])",
        "maxNonDecreasingLength(nums1 = [4, 6, 10, 15, 20], nums2 = [1, 3, 7, 14, 19])",
        "maxNonDecreasingLength(nums1 = [1,2,3], nums2 = [6,4,5])",
        "maxNonDecreasingLength(nums1 = [3, 2, 5, 1, 7], nums2 = [2, 5, 3, 1, 2])",
        "maxNonDecreasingLength(nums1 = [2, 3, 1, 2, 3, 2, 3, 5], nums2 = [2, 3, 2, 3, 2, 3, 2, 3])",
        "maxNonDecreasingLength(nums1 = [2, 4, 3, 1, 6, 7], nums2 = [2, 3, 2, 3, 2, 3])",
        "maxNonDecreasingLength(nums1 = [3, 1, 1, 5], nums2 = [4, 2, 6, 8])",
        "maxNonDecreasingLength(nums1 = [0, 4, 4, 2, 3], nums2 = [0, 1, 2, 1, 2])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 4, target = 3)",
        "minimumPossibleSum(n = 1, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 0)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [2, 2])",
        "findValueOfPartition(nums = [1, 1, 1, 2, 2])",
        "findValueOfPartition(nums = [4,5,6,7])",
        "findValueOfPartition(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findValueOfPartition(nums = [1, 2, 4, 8, 16])",
        "findValueOfPartition(nums = [1, 1, 1, 1, 2, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "findValueOfPartition(nums = [1,2,4,5,6,8,20])",
        "findValueOfPartition(nums = [5, 6, 7, 8, 9, 10, 10, 10])",
        "findValueOfPartition(nums = [10, 3, 5, 11, 8, 12])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"R__L_\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLRLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLRLRRLRLRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLR_RRLRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRLRL_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRR_LLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"R_RLLRLRLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRLLRRR_LR\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [3, 1])",
        "minimumIndex(nums = [3, 1])",
        "minimumIndex(nums = [3,2,2,3])",
        "minimumIndex(nums = [3, 5, 1, 2, 4, 2])",
        "minimumIndex(nums = [3,2,1,5,4,3,2,1,5,4])",
        "minimumIndex(nums = [5,4,5,4,5])",
        "minimumIndex(nums = [5,5,4,7,5,5,5])",
        "minimumIndex(nums = [3, 4, 2, 1, 3, 8, 0])",
        "minimumIndex(nums = [3,1,1,3,4,4,4,4,4,3,3])",
        "minimumIndex(nums = [2, 4, 3, 7, 4, 3, 4, 4, 5, 6, 1, 4, 4])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [4, 2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [4, 2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "semiOrderedPermutation(nums = [3, 1, 2, 5, 4])",
        "semiOrderedPermutation(nums = [5, 1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [2, 5, 3, 1, 4])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n=2, k=1)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 4, k = 2)"
    ]
}