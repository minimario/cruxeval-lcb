{
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 5], [3, 5, 6]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 3, 2], [1, 3, 3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [2, 4, 2], [3, 4, 6]])",
        "maximizeTheProfit(n = 5, offers = [(0,1,1), (0,2,2), (1,3,1), (3,4,1)])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[1,4,5],[2,5,10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 2, 5], [3, 4, 1], [4, 5, 4]])",
        "maximizeTheProfit(n = 5, offers = [(1, 2, 10), (2, 4, 10), (1, 4, 15)])",
        "maximizeTheProfit(n = 15, offers = [(0, 3, 5), (4, 10, 5), (11, 15, 3)])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 5, 7], [1, 3, 10], [2, 5, 4], [3, 4, 7]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 6], [4, 5, 8], [8, 10, 9], [1, 5, 5]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5], m = 2)",
        "canSplitArray(nums = [1,2,3,4], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7], m = 10)",
        "canSplitArray(nums = [2, 1, 3, 5, 4], m = 4)",
        "canSplitArray(nums=[1,2,3,4,5,6], m=2)",
        "canSplitArray(nums=[1, 2, 3, 4, 5], m=2)",
        "canSplitArray(nums = [1,3,5,6], m = 3)",
        "canSplitArray(nums = [3,2,2,1,1,1], m = 3)",
        "canSplitArray(nums = [2, 1, 2, 5], m = 3)",
        "canSplitArray(nums = [1, 3, 5, 2, 1, 3, 2, 8, 9, 1], m = 10)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 0, 0, 1, 0], k = 3)",
        "checkArray(nums = [1, 0, 0, 0], k = 4)",
        "checkArray(nums = [1,1,0,0,1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 4], k = 3)",
        "checkArray(nums = [1, 1, 0, 2, 0], k = 3)",
        "checkArray(nums = [5, 3, 1, 1, 5], k = 3)",
        "checkArray(nums = [1, 0, 0, 2, 2, 1, 0], k = 3)",
        "checkArray(nums=[2,2,3,3,5], k=4)",
        "checkArray(nums = [1, 3, 5, 2, 1, 3, 1, 2], k = 3)",
        "checkArray(nums = [3, 5, 10, 7, 1, 2], k = 3)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1,5,4,2,9,9,9], k = 3)",
        "maximumBeauty(nums = [3, 6, 1, 2, 5], k = 2)",
        "maximumBeauty(nums = [5, 12, 4, 6], k = 10)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \"/\")",
        "splitWordsBySeparator(words = [], separator = \":\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"a;b;c\", \"d;e;f\"], separator = \";\")",
        "splitWordsBySeparator(words=[\"ab\", \"cde\"], separator=\"\")",
        "splitWordsBySeparator(words = [\"this\", \"is\", \"a\", \"test\", \"sentence\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\", \"a;b;c\", \"x;y;z\"], separator = \";\")",
        "splitWordsBySeparator(words = [\"you are\", \"\", \"great\"], separator = \" \")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 2, 4, 3])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [1, 0, 2])",
        "countWays(nums=[1, 3, 2, 4])",
        "countWays(nums = [5, 1, 3, 2, 4])",
        "countWays(nums = [1, 3, 4, 5, 7])",
        "countWays(nums = [4,3,2,1,0])",
        "countWays(nums = [2, 1, 5, 3])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,2,2])",
        "minimumIndex(nums = [1,1,2,2,2])",
        "minimumIndex(nums = [1,2,1,2,1,2])",
        "minimumIndex(nums = [1,2,3,4,5,1])",
        "minimumIndex(nums = [1,2,2,2,2,2,2,2,2,3])",
        "minimumIndex(nums = [1, 2, 3, 4, 4, 4, 4, 5])",
        "minimumIndex(nums = [1,2,1,1,2,1,1,2,1])",
        "minimumIndex(nums = [2, 1, 2, 3, 1, 2, 2, 2, 2, 2])",
        "minimumIndex(nums = [1,2,3,2,1,3,4,3,3,1])",
        "minimumIndex(nums = [2,2,2,5,2,5,2,5,5,2,5,2,2,5,5,5,2,2,2])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[3, 4], [4, 5], [2, 3]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8]])",
        "numberOfPoints([[1,2],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1, 3], [5, 8], [4, 6]])",
        "numberOfPoints([[3,4],[4,5],[2,9],[1,3]])",
        "numberOfPoints(nums = [[1,3],[2,7],[5,6]])",
        "numberOfPoints(nums = [[2, 5], [4, 8], [5, 9]])",
        "numberOfPoints(nums = [[1,5],[4,6],[2,3],[6,7]])",
        "numberOfPoints(nums = [[1,10], [2,7], [12, 20], [3, 19], [14, 20]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,4,1,3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1,5,4,3,2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 5, 4])",
        "semiOrderedPermutation(nums = [1, 5, 2, 4, 3])",
        "semiOrderedPermutation(nums = [3,4,2,1,5])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 4, target = 3)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n=2, target=2)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1,2,1,2,1,2,1,2,1])",
        "minimumIndex(nums = [0, 1, 0])",
        "minimumIndex(nums = [2, 2, 1, 2, 2])",
        "minimumIndex(nums = [1, 7, 8, 1, 1, 7, 7])",
        "minimumIndex(nums = [1, 2, 3, 4, 4])",
        "minimumIndex(nums = [0, 1, 2, 0, 2])",
        "minimumIndex(nums = [2, 3, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [3, 4, 3, 2, 3, 2, 3, 3, 3, 3])",
        "minimumIndex(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,",
        "minimumIndex(nums = [3, 7, 7, 4, 3, 5, 3, 3, 3, 2, 3, 3])"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n = 3, k = 1)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1,3], [2,4], [5,6]])",
        "numberOfPoints(nums = [[1, 1], [1, 3], [2, 2]])",
        "numberOfPoints(nums = [[1,3],[2,2],[3,4]])",
        "numberOfPoints(nums = [[2,5], [3,5]])",
        "numberOfPoints(nums = [[0, 0], [1, 1], [1, 2], [3, 5]])",
        "numberOfPoints(nums=[[1, 1], [3, 3]])",
        "numberOfPoints(nums = [[2, 4], [5, 6], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [3, 4], [3, 5], [6, 7]])",
        "numberOfPoints(nums = [[1, 1], [1, 1], [0, 1], [1, 2]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 0)",
        "maximumJumps(nums = [1,1,1,1,1], target = 0)",
        "maximumJumps(nums = [3, 1, 2, 4], target = 1)",
        "maximumJumps(nums = [30, 10], target = 10)",
        "maximumJumps(nums = [1, 3, 6, 8, 13, 14, 15, 17, 18], target = 3)",
        "maximumJumps(nums = [1, 4, 5, 8, 9, 11, 10], target = 2)"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n=3, k=1)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3], m = 4)",
        "canSplitArray(nums = [1,2,3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [7,2,5,10,8], m = 11)",
        "canSplitArray(nums = [1,2,3], m = 2)",
        "canSplitArray(nums = [1, 2, 2, 2, 5, 6], m = 7)",
        "canSplitArray(nums = [2, 5, 10, 20], m = 14)",
        "canSplitArray(nums = [2,3,1,2,1,1,1], m = 4)",
        "canSplitArray(nums = [1, 1, 2, 3, 5, 8, 13, 21], m = 10)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 10], [3, 4, 20], [1, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [1, 3, 10]])",
        "maximizeTheProfit(n = 3, offers = [[0, 2, 5], [2, 3, 1]])",
        "maximizeTheProfit(n = 3, offers = [[0, 2, 3], [1, 3, 2], [1, 2, 4]])",
        "maximizeTheProfit(n = 5, offers = [[0,2,4], [0,1,5], [0,2,2], [1,3,2], [2,4,1]])",
        "maximizeTheProfit(n = 10, offers = [[2,5,6],[3,4,5],[1,9,7]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [0, 3, 4], [1, 4, 6], [1, 5, 7], [2, 4, 1], [2, 5, 2]])",
        "maximizeTheProfit(n = 10, offers = [[0, 3, 1], [2, 4, 2], [5, 8, 3], [8, 9, 10]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [2,3,1,1,4], k = 2)",
        "checkArray(nums = [1, 2, 1], k = 3)",
        "checkArray(nums = [0, 0, 0], k = 2)",
        "checkArray(nums = [1, 0, 0, 0, 0], k = 2)",
        "checkArray(nums = [1, 2, 3, 10], k = 2)",
        "checkArray(nums = [2, 1, 3, 2], k = 3)",
        "checkArray(nums = [1, 1, 1, 2, 2], k = 2)",
        "checkArray(nums = [2,3,3,4,2], k = 2)",
        "checkArray(nums = [2,2,3,1,0,0,0,0,1], k = 3)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,1,2,2,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,1], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 0)",
        "longestEqualSubarray(nums=[1,2,2,1], k=2)",
        "longestEqualSubarray(nums = [1,2,1,3,1,2], k = 2)",
        "longestEqualSubarray(nums = [2,1,3,3,2,3], k = 1)",
        "longestEqualSubarray(nums=[2,3,1,3,2,1,3,2,1], k=1)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,1],[1,1],[2,1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [0, 1], [2, 2], [1, 1]])",
        "colorTheArray(n = 5, queries = [[0, 3], [1, 2], [2, 2], [4, 1]])"
    ],
    "sample_55": [
        "smallestString(s = 'lcdsbncd')",
        "smallestString(s = 'kkddsbncd')",
        "smallestString(s = \"lazydog\")",
        "smallestString(s = \"lmno\")",
        "smallestString(s = 'lmnopqrstuvwxyz')",
        "smallestString(s='kddsbodc')",
        "smallestString(s = \"pqrstuvwxyzabcdefghijklmno\")",
        "smallestString(s = 'kbcded')",
        "smallestString(s = 'keftsbncd')",
        "smallestString(s = \"jrrtcd\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,4,5,7,8], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,4,5,7,8], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,4,5,2,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,3,5,2,4,6], threshold = 6)",
        "longestAlternatingSubarray(nums = [1,1,1,1], threshold = 0)",
        "longestAlternatingSubarray(nums = [3,4,5,6,7,8,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,1,1,1,1,1,1], threshold = 3)",
        "longestAlternatingSubarray(nums = [5,2,3], threshold = 1)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums=[3, 2, 5, 4], threshold=5)",
        "longestAlternatingSubarray(nums=[3, 2, 5, 4], threshold=5)",
        "longestAlternatingSubarray(nums = [3, 4, 5], threshold = 6)",
        "longestAlternatingSubarray(nums = [3, 5, 7, 9, 11], threshold = 12)",
        "longestAlternatingSubarray(nums = [1, 3, 4, 5, 6, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [3, 1, 2, 5, 3, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,4,5,7,8,6,9,7,6], threshold = 100)",
        "longestAlternatingSubarray(nums = [1, 4, 3, 12, 9, 10], threshold = 2)",
        "longestAlternatingSubarray(nums = [3, 4, 5, 6, 7, 9, 12, 1, 3], threshold = 5)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCDCDABAB\")",
        "minLength(s = \"ABABC\")",
        "minLength(s = \"ABCDCD\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s=\"aba\")",
        "minimumCost(s = \"aa\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [5, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 10)",
        "canSplitArray(nums = [1, 2, 2, 2], m = 4)",
        "canSplitArray(nums = [2, 4, 5], m = 6)",
        "canSplitArray(nums = [5, 2, 3], m = 3)",
        "canSplitArray(nums = [2, 5, 10, 3, 7], m = 11)",
        "canSplitArray(nums = [5, 3, 7, 2], m = 8)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1,1,0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [1,0,0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])"
    ],
    "sample_109": [
        "checkArray(nums = [1,0,1], k = 1)",
        "checkArray(nums = [1,0,0,0,1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "checkArray(nums = [2, 3, 5, 1, 0], k = 3)",
        "checkArray(nums = [2, 3, 5, 1, 1, 1, 1], k = 3)",
        "checkArray(nums = [1,3,0,2], k = 2)",
        "checkArray(nums = [1, 2, 3, 0, 0, 4], k = 3)",
        "checkArray(nums = [2, 5, 1, 4, 5], k = 3)",
        "checkArray(nums = [2, 3, 2, 1, 1, 0, 0, 1], k = 3)",
        "checkArray(nums = [5, 1, 2, 1, 1, 2, 1, 4], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 22], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours=[10,10,11,0,1], target=10)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums=[0, 1, 2, 3, 4, 5, 6], k=2)",
        "sumIndicesWithKSetBits(nums=[1, 1, 0, 1], k=2)",
        "sumIndicesWithKSetBits(nums = [1,1,1,1,1], k = 0)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 2, 2], k = 3)",
        "sumIndicesWithKSetBits(nums=[1, 1, 2, 3, 1, 0, 4], k=3)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 6, 2], k = 2)"
    ],
    "sample_205": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"30200\")",
        "minimumOperations(num = \"0075\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"51234\")",
        "minimumOperations(num = \"1249\")",
        "minimumOperations(num = \"2100000000\")",
        "minimumOperations(num
    ],
    "sample_204": [
        "minimumOperations(s = \"25\")",
        "minimumOperations(s = \"0075\")",
        "minimumOperations(s = \"10000\")",
        "minimumOperations(s = \"120\")",
        "minimumOperations(s
        "minimumOperations(s = \"25000\")",
        "minimumOperations(s = \"333\")",
        "minimumOperations(s = \"507505\")",
        "minimumOperations(s = \"52000025\")",
        "minimumOperations(s = \"525525525525252525255\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 4, 1, 3])",
        "semiOrderedPermutation(nums=[2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 2, 4, 1])",
        "semiOrderedPermutation(nums=[1,3,4,2,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LARL\")",
        "furthestDistanceFromOrigin(moves = \"LARL\")",
        "furthestDistanceFromOrigin(moves = \"LLRAR\")",
        "furthestDistanceFromOrigin(moves = \"LLARRRR\")",
        "furthestDistanceFromOrigin(moves = \"LALAL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRAAARL\")",
        "furthestDistanceFromOrigin(moves=\"LRLRAL\")",
        "furthestDistanceFromOrigin(moves = \"LARAARARARRRRLL\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"ban\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"baao\")",
        "isAcronym(words = [\"I\", \"love\", \"you\"], s = \"ILY\")",
        "isAcronym(words = [\"happy\", \"new\", \"year\"], s = \"hny\")",
        "isAcronym(words = [\"happy\", \"every\", \"day\"], s = \"hey\")",
        "isAcronym(words = [\"self\", \"contained\"], s = \"sc\")",
        "isAcronym(words = [\"beautiful\", \"weekend\"], s = \"bw\")",
        "isAcronym(words = [\"Shadow\", \"Hunters\"], s = \"SH\")",
        "isAcronym(words = [\"afternoon\", \"break\"], s = \"ab\")",
        "isAcronym(words = [\"underground\", \"state\", \"armor\"], s = \"ussa\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [3, 1, 4, 3, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 5, 2, 7, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7], modulo = 7, k = 4)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 6)",
        "countInterestingSubarrays(nums = [2, 3, 5], modulo = 1, k = 1)",
        "countInterestingSubarrays(nums = [2,3,4,5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 3, 6, 4, 7], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 2, 2, 1, 2], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [5, 1, 3, 3, 7, 3], modulo = 3, k = 1)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [2, 5, 11, 10])",
        "countBeautifulPairs(nums = [12, 21, 12])",
        "countBeautifulPairs(nums = [2, 10, 3, 4])",
        "countBeautifulPairs(nums = [25, 46, 32])",
        "countBeautifulPairs(nums = [23, 56, 78, 45])",
        "countBeautifulPairs(nums = [2, 12, 3, 11])",
        "countBeautifulPairs(nums = [21, 81, 101, 11])",
        "countBeautifulPairs(nums = [51, 5, 11, 10, 25, 30])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,1,1], target = 1)",
        "maximumJumps(nums = [1,1,1], target = 1)",
        "maximumJumps(nums = [1,2,3,4], target = 3)",
        "maximumJumps(nums = [1,2,3], target = 4)",
        "maximumJumps(nums = [3, 3, 3], target = 0)",
        "maximumJumps(nums = [1, 2, 1, 2, 1, 2, 1, 2], target = 2)",
        "maximumJumps(nums = [2, 1, 5, 4, 3, 7, 6], target = 1)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12, 6])",
        "countBeautifulPairs(nums = [31, 25, 72, 100])",
        "countBeautifulPairs(nums = [31, 25, 72, 101, 108])",
        "countBeautifulPairs(nums = [1, 10, 11, 12])",
        "countBeautifulPairs(nums = [23, 52, 52, 76, 47])",
        "countBeautifulPairs(nums = [10, 11, 20, 22, 33, 100, 101])",
        "countBeautifulPairs(nums = [25, 43, 54, 5, 43])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABABCDCDAB\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"AABCCD\")",
        "minLength(s = \"ACBDCD\")"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"sting\")",
        "finalString(s = 'tigers')"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0,0,1,0,1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1, 3, 5])",
        "findValueOfPartition(nums = [3, 6, 10, 1])",
        "findValueOfPartition(nums = [4, 1, 2, 3])",
        "findValueOfPartition(nums = [3, 1, 7, 9, 15])",
        "findValueOfPartition(nums = [10,1,2,7,4,5,6])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n=1, queries=[])",
        "colorTheArray(n=1, queries=[[0,1]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,1]])",
        "colorTheArray(n=1, queries=[[0, 1]])",
        "colorTheArray(n = 2, queries = [[0,2], [1,3]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 3, target = 12)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n=3, target=10)"
    ],
    "sample_171": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 1, k = 2)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,2,3,4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,2,3,4], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4, 5, 6, 7, 8], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 23, 2, 1], target = 13)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 1, 3, 2, 3, 5, 5, 3, 3], target = 5)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [1, 2, 1, 2, 1, 2], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7], m = 12)",
        "canSplitArray(nums = [1, 2, 3, 5, 1], m = 5)",
        "canSplitArray(nums = [2, 4, 6], m = 3)",
        "canSplitArray(nums=[1, 1, 1, 1], m=4)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [5, 10, 11, 9, 5], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [3,1,4,3,2,2,4], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 1], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 2, 2], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [5, 4, 1, 5, 2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 10, 2, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,1,4,5,3,2,6,5,1], m = 3, k = 2)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], t = 4)",
        "longestAlternatingSubarray(nums=[3,2,5,4], t=4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], t = 4)",
        "longestAlternatingSubarray(nums = [3,4,1,2,8,7,4,3,5], t = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 4, 1, 2], t = 4)",
        "longestAlternatingSubarray(nums = [3,4,2,4,6], t = 5)",
        "longestAlternatingSubarray(nums=[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], t=9)",
        "longestAlternatingSubarray(nums=[1, 3, 4, 7, 8, 2], t=4)",
        "longestAlternatingSubarray(nums=[5, 1, 3, 8, 2, 4], t=4)",
        "longestAlternatingSubarray(nums = [1,5,6,2,3,1,2,3,5,6,7,8,9,0,1,2,3,4], t = 6)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,1,1,0,1,0,1,0,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,1,1,1,0,1,0,0,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,1,0,0,0,1,1,1,0,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,0,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num='51230100')",
        "removeTrailingZeros(num = '5123010000000')"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 12, b = 3)",
        "makeTheIntegerZero(a = 15, b = 5)",
        "makeTheIntegerZero(a = 11, b = 3)",
        "makeTheIntegerZero(a = 5, b = 3)",
        "makeTheIntegerZero(a = 9, b = 2)",
        "makeTheIntegerZero(a = 11, b = 4)",
        "makeTheIntegerZero(a = 16, b = 4)",
        "makeTheIntegerZero(a=15, b=5)",
        "makeTheIntegerZero(a = 34, b = 3)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [2, 1, 3, 4], m = 5)",
        "canSplitArray(nums = [2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 1, 1, 2, 1], m = 2)",
        "canSplitArray(nums = [3, 2, 5, 1], m = 10)",
        "canSplitArray(nums = [3, 1, 2, 0, 4], m = 5)",
        "canSplitArray(nums = [2, 1, 1, 2, 1, 1, 2], m = 5)",
        "canSplitArray(nums = [2, 2, 3, 1, 5, 4], m = 8)",
        "canSplitArray(nums = [3, 6, 2, 1, 4, 9], m = 7)"
    ],
    "sample_161": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 24, 42])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 5, 2, 4])",
        "maxSum(nums = [6, 40, 82])",
        "maxSum(nums = [432, 345, 5345, 987, 999, 123])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n=3, target=4)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [1,2,3])",
        "findValueOfPartition(nums = [3, 6, 1, 9, 5])",
        "findValueOfPartition(nums = [4, 1, 8, 7])",
        "findValueOfPartition(nums = [1,2,4,6])",
        "findValueOfPartition(nums = [10, 5, 15])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,4],[2,3],[5,8]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,5],[7,10]])",
        "numberOfPoints(nums = [[1,3],[3,6]])",
        "numberOfPoints(nums = [[3,4], [4,5], [6,7], [1,2]])",
        "numberOfPoints(nums = [[2,6],[3,4],[2,8]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5],[5,11],[11,12],[12,13]])",
        "numberOfPoints(nums = [[0, 2], [3, 4], [6, 9], [8, 10]])",
        "numberOfPoints(nums = [[1,1], [2,2], [2,2], [2,3], [1,3]])",
        "numberOfPoints(nums = [[1,5],[3,7],[10,11],[12,13],[13,14],[14,15],[20,25]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [7, 8], [10, 15], [2, 5], [2, 4], [10, 15]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 6]])",
        "numberOfPoints(nums = [[1, 2], [4, 5], [7, 8]])",
        "numberOfPoints(nums = [[0, 1], [2, 3], [5, 6]])",
        "numberOfPoints(nums = [[1,3],[3,5],[5,7]])",
        "numberOfPoints(nums = [[3,3], [1,3], [2,2]])",
        "numberOfPoints(nums = [(1, 2), (3, 3), (4, 5)])",
        "numberOfPoints(nums = [[0, 0], [1, 1], [1, 3], [3, 4]])",
        "numberOfPoints(nums = [[2, 3], [2, 4], [5, 6], [6, 6]])",
        "numberOfPoints(nums = [(2, 10), (3, 11), (1, 7)])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one,two,three,four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\", \"five\", \"\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\", \"five\", \"\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\", \"five\", \"\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"\", \"four\", \"five\", \"six\", \"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\", \"\", \"\", \"four\", \"five\", \"\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words=['one', 'two', 'three', 'four', 'five', 'six'], separator='+')"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [2,4,8,2], target = 7)",
        "minOperations(nums = [3, 2, 1], target = 1)",
        "minOperations(nums = [1, 2, 4, 8], target = 3)",
        "minOperations(nums = [1,2], target = 10)",
        "minOperations(nums = [3, 1, 2], target = 1)",
        "minOperations(nums = [1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1,2,3,4,5], target = 27)",
        "minOperations(nums = [1, 3, 5, 7], target = 21)",
        "minOperations(nums = [3, 2, 20, 5, 1, 4], target = 50)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 2, 1], k = 2)",
        "checkArray(nums = [23, 2, 4, 6, 7], k = 3)",
        "checkArray(nums = [2, 2, 3], k = 2)",
        "checkArray(nums = [2, 2, 3], k = 2)",
        "checkArray(nums = [1,2,2,1], k = 2)",
        "checkArray(nums = [1,2,2,1], k = 2)",
        "checkArray(nums = [1,2,3,4,4], k = 3)",
        "checkArray(nums = [2, 2, 3, 1, 1, 1], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6,7,7,7], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1,1,0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0])",
        "doesValidArrayExist(derived = [1,1,1,0])",
        "doesValidArrayExist(derived = [1,1,0,0])"
    ],
    "sample_159": [
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [51, 71, 17, 41])",
        "maxSum(nums = [10,20])",
        "maxSum(nums = [10,33,50])",
        "maxSum(nums = [13,21,19])",
        "maxSum(nums = [31, 29, 32, 35, 30])",
        "maxSum(nums = [0, 30, 500, 1])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 3, 3, 4])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2])",
        "continuousSubarrays(A = [1, 2, 2, 2, 2, 1])",
        "continuousSubarrays(A = [3, 1, 2, 2, 3, 4])",
        "continuousSubarrays(A = [1, 3, 2, 4, 6])",
        "continuousSubarrays(A = [2, 3, 1, 1, 4, 2])",
        "continuousSubarrays(A = [2, 1, 3, 2, 2, 1, 4, 3, 3])",
        "continuousSubarrays(A = [2, 0, 1, 1, 0, 2, 3, 4, 5, 2, 3])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [4, 3, 2, 1], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [4, 5, 6, 7, 8])",
        "maxNonDecreasingLength(a = [2,3,1], b = [1,2,1])",
        "maxNonDecreasingLength(a = [1, 3, 4, 2], b = [5, 1, 2, 8])",
        "maxNonDecreasingLength(a = [1, 3, 3, 2, 4], b = [4, 1, 2, 1, 3])",
        "maxNonDecreasingLength(a = [1, 3, 2, 4, 6], b = [2, 5, 4, 4, 5])",
        "maxNonDecreasingLength(a = [4, 1, 1, 2, 3], b = [2, 4, 5, 3, 1])",
        "maxNonDecreasingLength(a = [1, 5, 5, 7], b = [6, 5, 6, 6])",
        "maxNonDecreasingLength(a = [3, 1, 2, 7, 5, 6], b = [4, 3, 2, 4, 3, 2])",
        "maxNonDecreasingLength(a = [3, 3, 5, 1, 5, 9], b = [2, 2, 2, 4, 5, 5])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)"
    ],
    "sample_160": [
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSum(nums = [4, 22, 622])",
        "maxSum(nums = [39,2,9,8,11,21,64,13,44])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncz\")",
        "smallestString(s = \"kddsbncz\")",
        "smallestString(s = \"kddsbncf\")",
        "smallestString(s=\"kddsbncd\")",
        "smallestString(s = \"kddsbqcd\")",
        "smallestString(s = 'kddsbkcd')",
        "smallestString(s = 'abczd')",
        "smallestString(s = \"kddxebncd\")",
        "smallestString(s = 'bcdfegh')"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [9, 4, 1, 7])",
        "findValueOfPartition(nums=[1,3,2,4])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 6])",
        "findValueOfPartition(nums = [1, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 2, 9, 7, 5])",
        "findValueOfPartition(nums=[4,1,5,20,3])",
        "findValueOfPartition(nums = [10, 1, 5, 2])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = 'baba')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = \"abbb\")",
        "makeSmallestPalindrome(s='abb')",
        "makeSmallestPalindrome(s = \"baab\")",
        "makeSmallestPalindrome(s = 'abac')",
        "makeSmallestPalindrome(s=\"bab\")",
        "makeSmallestPalindrome(s = \"zzb\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 3, num2 = 4)",
        "makeTheIntegerZero(num1 = 50, num2 = 5)",
        "makeTheIntegerZero(num1 = 3, num2 = 11)",
        "makeTheIntegerZero(num1 = 16, num2 = 13)",
        "makeTheIntegerZero(num1 = 60, num2 = 7)",
        "makeTheIntegerZero(num1 = 37, num2 = 63)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3], [2,5]])",
        "numberOfPoints([[3,4],[4,5],[2,3]])",
        "numberOfPoints(nums = [[2,3],[5,7]])",
        "numberOfPoints(nums = [[1,5], [2,3], [4,9]])",
        "numberOfPoints(nums = [[2,2],[2,2],[3,3],[4,4]])",
        "numberOfPoints(nums = [[1,2],[2,5],[1,10],[8,10]])",
        "numberOfPoints(nums=[[2,3],[3,5],[1,7],[1,3]])",
        "numberOfPoints(nums=[[2, 4], [1, 3], [5, 6], [8, 10], [7, 9]])",
        "numberOfPoints(nums = [[1,2],[3,4],[3,4],[100,100],[1,1],[2,2],[3,3]])",
        "numberOfPoints(nums=[[0,2],[1,2],[1,4],[2,3],[3,4],[4,5],[4,6],[5,6],[6,7],[7,8],[7,9],[8,9],[9,10]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [3,1,4,3,2,2,4], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [5, 10, 11, 9, 5], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 5, 2, 7, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 4, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 3, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums=[1, 4, 2, 3], m=2, k=1)",
        "countInterestingSubarrays(nums = [2, 2, 3, 1, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 10, 5, 2], m = 3, k = 3)"
    ],
    "sample_40": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"bba\")",
        "minimumCost(s = \"baab\")",
        "minimumCost(s = \"ababb\")",
        "minimumCost(s = \"babbb\")",
        "minimumCost(s = \"01011\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0,0,0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1,0,0,1,1])",
        "doesValidArrayExist(derived = [1,1,0,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 10, 6, 4, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 3, 4, 8, 6], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 100, 99, 98], target = 99)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 100, 95, 75], target = 75)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 100, 200, 300, 400, 500], target = 300)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 12, 14, 13], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 14, 18, 20], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [0,3,3,0,4,2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0,3,3,9,9,10,12,15], target = 3)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"level\")",
        "makeSmallestPalindrome(s = 'neverodd')",
        "makeSmallestPalindrome(s = \"level\")",
        "makeSmallestPalindrome(s = \"nave\")",
        "makeSmallestPalindrome(s = \"naveen\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '512300000001000000000000000')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [3,1,4,3,2,2,4], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [3,1,4,3,2,2,4], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [5,10,11,9,5], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5, 6], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1], m = 2, k = 3)",
        "countInterestingSubarrays(nums=[2, 2, 1, 1], m=2, k=0)",
        "countInterestingSubarrays(nums = [3, 1, 2, 5, 4, 5, 4, 1, 2, 1], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [20, 19, 16, 19, 17, 15], m = 3, k = 2)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 10)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 3)",
        "minCost(A = [1,2,3], x = 2)",
        "minCost(A = [1, 2, 3], x = 4)",
        "minCost(A = [3, 2, 1], x = 3)",
        "minCost(A = [1,2,3], x = 1)",
        "minCost(A = [2, 3, 1], x = 4)",
        "minCost(A = [3, 2, 2, 4, 1], x = 2)",
        "minCost(A = [2, 2, 0, 1], x = 2)",
        "minCost(A = [3, 1, 3, 4, 2], x = 2)",
        "minCost(A=[5, 4, 1, 3], x=2)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2])",
        "maxIncreasingGroups(u = [1, 1, 2, 1])",
        "maxIncreasingGroups(u = [2, 3, 4])",
        "maxIncreasingGroups(u = [3, 1, 5])",
        "maxIncreasingGroups(u = [3, 3, 4])",
        "maxIncreasingGroups(u = [1, 1, 3, 3, 5])",
        "maxIncreasingGroups(u = [5, 1, 1, 3])",
        "maxIncreasingGroups(u = [1, 3, 4, 1, 2, 5])",
        "maxIncreasingGroups(u = [3,1,1,2,3,4])",
        "maxIncreasingGroups(u = [3, 2, 1, 1, 5, 6, 4])"
    ],
    "sample_110": [
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 0, 0, 1, 0, 1], k = 2)",
        "checkArray(nums = [3, 0, 1, 0, 4], k = 1)",
        "checkArray(nums = [2, 3, 3, 2, 4], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 0, 2], k = 2)",
        "checkArray(nums=[1,2,3,4,5], k=2)",
        "checkArray(nums = [2,3,2], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABABCDCDABABCD\")",
        "minLength(s = \"ACDAB\")",
        "minLength(s = \"ACAC\")",
        "minLength(s = \"ABABABABAB\")",
        "minLength(s = \"BABCDAB\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,5], target = 4)",
        "minOperations(nums = [3,2,2,4], target = 7)",
        "minOperations(nums = [1, 2, 3], target = 6)",
        "minOperations(nums = [1, 2, 4], target = 8)",
        "minOperations(nums = [3,5], target = 10)",
        "minOperations(nums = [1,1,2], target = 3)",
        "minOperations(nums = [2, 4, 8], target = 16)",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1], target = 1)",
        "minOperations(nums = [2,4,14], target = 4)",
        "minOperations(nums=[1, 2, 4, 6], target=20)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \"\")",
        "splitWordsBySeparator(words = [], separator = \"$\")",
        "splitWordsBySeparator(words = [\"a\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"as\", \"bs\", \"cs\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"a_b_c\", \"xyz\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"\", \"ban\", \"ana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"abcdefg\", \"hi\", \"jklmnop\"], separator = \"e\")",
        "splitWordsBySeparator(words = [\"m-k\", \"l-s\"], separator = \"-\")"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncz')",
        "smallestString(s = 'kddsbncf')",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = 'abcd')",
        "smallestString(s = \"kddsbocd\")",
        "smallestString(s = \"kddsdncd\")",
        "smallestString(s = 'kbcdbncd')",
        "smallestString(s = 'kaasbncd')",
        "smallestString(s = 'aaaabzccd')"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"L__R\")",
        "furthestDistanceFromOrigin(moves = \"L___R___\")",
        "furthestDistanceFromOrigin(moves = \"L__RR___\")",
        "furthestDistanceFromOrigin(moves = \"LLL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"L__R__R\")",
        "furthestDistanceFromOrigin(moves = \"R_L_L_L\")",
        "furthestDistanceFromOrigin(moves = \"R_L___L___\")",
        "furthestDistanceFromOrigin(moves=\"L__R_L__\")",
        "furthestDistanceFromOrigin(moves = \"L___R____L__R_\")",
        "furthestDistanceFromOrigin(moves = \"LLL_RR_LLR_R\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 28, num2 = 7)",
        "makeTheIntegerZero(num1 = 5, num2 = 4)",
        "makeTheIntegerZero(num1=15, num2=1)",
        "makeTheIntegerZero(num1 = 30, num2 = 20)"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbncz')",
        "smallestString(s = 'lcmcfd')",
        "smallestString(s = 'kddsbnad')",
        "smallestString(s='kddsbncz')",
        "smallestString(s = 'kddhftcd')",
        "smallestString(s = \"lcfd\")",
        "smallestString(s = \"zddsbncd\")",
        "smallestString(s = 'bcdfghjklmnopqrsuvwxyz')"
    ],
    "sample_146": [
        "finalString(s = \"pointer\")",
        "finalString(s = \"pinter\")",
        "finalString(s = 'pointer')",
        "finalString(s = \"point\")",
        "finalString(s = \"nterpo\")",
        "finalString(s = \"piointer\")",
        "finalString(s = 'nopteri')",
        "finalString(s = \"pinto\")",
        "finalString(s = 'pontri')",
        "finalString(s = \"tinrope\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [0, 1, 2, 0, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 1, 2, 1], k = 2)",
        "longestEqualSubarray(nums=[1, 2, 3, 1, 1], k=2)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [0, 1, 2, 3, 1, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [2,1,2,1,3,2,1,2,3,2,2], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [2,1,3], m = 5)",
        "canSplitArray(nums = [1,1,1], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 4)",
        "canSplitArray(nums = [2, 1, 3, 5], m = 4)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 7)",
        "canSplitArray(nums = [2, 2, 2, 2, 2], m = 5)",
        "canSplitArray(nums=[4, 1, 3, 2, 4], m=4)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1, 0])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one,two', 'three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,four', 'five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two-three\", \"four-five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one-two', 'three', 'four-five', '-six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four\", \"five,\", \"six\"], separator = ',')",
        "splitWordsBySeparator(words = ['one/two', 'three//four', 'five'], separator = '/')",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four;five:six\"], separator = \"[:,;]\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,2,3,4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours=[0,1,2,3,4,5], target=0)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 0, 3, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 1, 2, 5], target = 10)"
    ],
    "sample_168": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"world\", \"wide\", \"web\"], s = \"www\")",
        "isAcronym(words = [\"beautiful\", \"is\", \"better\", \"than\", \"ugly\"], s = \"BIBTU\")",
        "isAcronym(words = [\"what\", \"the\", \"heck\"], s = \"wth\")",
        "isAcronym(words = [\"I\", \"am\", \"not\", \"an\", \"acronym\"], s = \"IAM\")",
        "isAcronym(words = ['to', 'be', 'or', 'not', 'to', 'be'], s = 'TBNOTB')",
        "isAcronym(words = [\"b\",\"an\",\"a\",\"na\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"man\", \"needs\"], s = \"BMN\")",
        "isAcronym(words = [\"design\", \"programming\", \"systems\"], s = \"dps\")",
        "isAcronym(words = ['just', 'right', 'the', 'way', 'you', 'are'], s = 'jrtwayya')"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"], s = \"banana\")",
        "isAcronym(words = [\"bank\", \"account\", \"number\"], s = \"ban\")",
        "isAcronym(words = [\"red\",\"green\",\"blue\"], s = \"rgb\")",
        "isAcronym(words = [\"hello\", \"world\", \"says\"], s = \"hw\")",
        "isAcronym(words = [\"tap\", \"is\", \"awesome\"], s = \"tia\")",
        "isAcronym(words = [\"nice\", \"to\", \"meet\", \"you\"], s = \"NNTMEY\")",
        "isAcronym(words = [\"please\", \"don't\", \"call\", \"me\", \"Shirley\"], s = \"pdcms\")",
        "isAcronym(words = [\"m\", \"my\", \"me\"], s = \"p\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"abbba\")",
        "minimumCost(s = \"abbbb\")",
        "minimumCost(s = \"aabbaab\")",
        "minimumCost(s=\"abbba\")",
        "minimumCost(s = \"aaababb\")",
        "minimumCost(s=\"abbabab\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,1,1,0,1,1])",
        "doesValidArrayExist(derived=[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "doesValidArrayExist(derived=[1, 0, 0, 1, 1, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1,"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = 'abab')",
        "makeSmallestPalindrome(s = 'abcba')",
        "makeSmallestPalindrome(s = \"cba\")",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s = \"caba\")",
        "makeSmallestPalindrome(s = \"bbab\")"
    ],
    "sample_50": [
        "smallestString(s = 'abaaa')",
        "smallestString(s = 'abaaa')",
        "smallestString(s = \"babaa\")",
        "smallestString(s = \"babaa\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = 'baaab')",
        "smallestString(s = \"abbb\")",
        "smallestString(s = \"b\")",
        "smallestString(s = \"aaaa\")",
        "smallestString(s = \"bza\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32], k = 1)",
        "sumIndicesWithKSetBits(nums=[0,1,2,3,4,5], k=2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 8, 16, 32, 64, 128], k = 3)",
        "sumIndicesWithKSetBits(nums=[1,2,4,8], k=1)",
        "sumIndicesWithKSetBits(nums = [2, 1, 3, 1, 2], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABABCDCDABAB\")",
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABABABABABAB\")",
        "minLength(s = \"ABCDCDABA\")",
        "minLength(s = \"CABBACCCDAB\")",
        "minLength(s = \"ABABABCCDDCD\")",
        "minLength(s = \"ACDBBCDBABABCDCDABCDCDABCDCD\")"
    ],
    "sample_158": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 24, 42])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2])",
        "maxSum(nums = [9, 21, 32])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2,3,1,5,4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])"
    ],
    "sample_162": [
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 24, 42])",
        "maxSum(nums = [51, 71, 17, 24, 42])",
        "maxSum(nums = [18, 43, 36, 13, 7])",
        "maxSum(nums = [12, 10, 13, 14])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1000')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"1111\")",
        "maximumOddBinaryNumber(s = '0111')",
        "maximumOddBinaryNumber(s = '00000')",
        "maximumOddBinaryNumber(s = '100000')",
        "maximumOddBinaryNumber(s = '100010')",
        "maximumOddBinaryNumber(s = '0110001')",
        "maximumOddBinaryNumber(s=\"11110\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 10, 6, 4, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 10, 6, 4, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 10, 6, 4, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,2,3,4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 4, 2, 5, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [0,3,3,9], target = 2)"
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"apple\", \"pear\"], s = \"banana\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bird\"], s = \"cdb\")",
        "isAcronym(words = [\"mountain\", \"view\"], s = \"MV\")",
        "isAcronym(words = [\"Lorem\", \"Ipsum\"], s = \"LI\")",
        "isAcronym(words = [\"on\", \"the\", \"fly\"], s = \"ota\")",
        "isAcronym(words = [\"Can\", \"I\", \"get\", \"a\", \"coffee\"], s = \"CIGAC\")",
        "isAcronym(words = [\"st\", \"in\", \"cet\", \"y\"], s = \"scit\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank=1, additionalTank=2)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1,2,3,4,5])",
        "maxIncreasingGroups(A = [1,2,3,4])",
        "maxIncreasingGroups(A = [2, 3, 4])",
        "maxIncreasingGroups(A = [1,1,1,2])",
        "maxIncreasingGroups(A = [4, 1, 3])",
        "maxIncreasingGroups(A = [1, 1, 1, 3, 3, 3])",
        "maxIncreasingGroups(A = [5, 2, 4])",
        "maxIncreasingGroups(A = [2, 3, 5, 5])",
        "maxIncreasingGroups(A = [3, 2, 1, 5, 6, 4])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [5,3,1,2,3,4,5,3,2,3])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums=[1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [2,2,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 3)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5], k=2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 5, 7, 9, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 5, 4, 7, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 6, 10, 15, 30], k = 2)",
        "sumIndicesWithKSetBits(nums = [7, 4, 9, 3, 8, 4], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"aabbcc\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"abacbc\")",
        "minimizedStringLength(s = \"ababbc\")",
        "minimizedStringLength(s = \"abab\")",
        "minimizedStringLength(s = \"aaabbccd\")",
        "minimizedStringLength(s = \"dddaaabb\")",
        "minimizedStringLength(s = \"xyzxx\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 3, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 1, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3], k = 3)",
        "longestEqualSubarray(nums = [2,1,2,3,2], k = 2)",
        "longestEqualSubarray(nums=[2,3,3,2,2], k=2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 2, 3, 2], k = 2)"
    ],
    "sample_10": [
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 1, 4, 2, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 100, 100, 100], target = 90)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [31, 25, 72, 79, 74])",
        "countBeautifulPairs(nums=[11, 21, 12])",
        "countBeautifulPairs(nums = [21, 22, 23, 24, 25, 26])",
        "countBeautifulPairs(nums = [11, 21, 12, 15])",
        "countBeautifulPairs(nums = [2, 5, 13, 46])",
        "countBeautifulPairs(nums = [23, 45, 67, 89, 123, 234])",
        "countBeautifulPairs(nums = [10, 11, 21, 31, 41, 51])",
        "countBeautifulPairs(nums = [21, 8, 57, 34, 65, 98, 12, 45, 22, 33])"
    ],
    "sample_229": [
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1, 2, 2, 1])",
        "countWays(nums = [1, 1, 2, 2, 3, 3])",
        "countWays(nums = [3,1,2])",
        "countWays(nums = [2, 2, 2, 2])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [2, 4, 3])",
        "countWays(nums = [1,1,2,2,2])",
        "countWays(nums = [1,2,2,4,5])",
        "countWays(nums = [1, 2, 0, 2, 3])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s = '11101')",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s='111000')",
        "maximumOddBinaryNumber(s = \"11111\")",
        "maximumOddBinaryNumber(s = \"110101\")",
        "maximumOddBinaryNumber(s = \"0100100\")",
        "maximumOddBinaryNumber(s='00110000')",
        "maximumOddBinaryNumber(s='00001000010')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 6], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 2], k = 3)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-1, 2])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [3, 1, 2, 2])",
        "maximumTripletValue(nums = [1, 2, -5, -2])",
        "maximumTripletValue(nums = [-10, -1, -1, 1, 1, 1])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 8, 12, 17], target = 3)",
        "maximumJumps(nums = [5, 1, 3, 4, 2], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 0)",
        "maximumJumps(nums = [1, 1, 2], target = 1)",
        "maximumJumps(nums = [3, 5, 7, 9], target = 2)",
        "maximumJumps(nums = [2, 5, 2, 1, 3], target = 2)"
    ],
    "sample_149": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"rtsni\")",
        "finalString(s = 'stir')",
        "finalString(s = 'stir')",
        "finalString(s = \"strin\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3])",
        "continuousSubarrays(A = [1, 5, 8, 2, 1, 6])",
        "continuousSubarrays(A = [1,3,5,2,9,7,10,13])",
        "continuousSubarrays(A = [1,2,2,3,4,5])",
        "continuousSubarrays(A = [1,2,3,2,2])",
        "continuousSubarrays(A = [1, 2, 1, 3, 1, 5])",
        "continuousSubarrays(A = [1, 2, 4, 2, 1, 3])",
        "continuousSubarrays(A = [1, 5, 2, 2, 3, 4, 3, 4])",
        "continuousSubarrays(A = [1, 2, 1, 3, 2, 4, 2, 3])",
        "continuousSubarrays(A = [5,8,9,1,2,3])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3])"
    ],
    "sample_228": [
        "countWays(nums = [0,1,2,3,4])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums=[0,1,2,3])",
        "countWays(nums=[0,1,2])",
        "countWays(nums = [3,2,1])",
        "countWays(nums = [0, 1, 2, 4])",
        "countWays(nums = [0, 0, 0, 1, 2])",
        "countWays(nums = [0, 2, 4, 5])",
        "countWays([1, 0, 2, 3])",
        "countWays(nums = [1, 1, 3, 2, 0, 5, 2])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1,5,4,2,3], k = 1)",
        "maximumBeauty(nums = [9, 9, 6, 0, 6, 6, 9], k = 2)",
        "maximumBeauty(nums = [1, 5, 1, 1, 1, 1], k = 3)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 5])",
        "distinctDifferenceArray(a = [5, 3, 1, 3, 4])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 3])",
        "distinctDifferenceArray(a = [5,3,1,1,2,3,5])",
        "distinctDifferenceArray(a = [4, 4, 2, 1, 5])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 2, 3, 1])",
        "continuousSubarrays(a = [1,2,3,2,3,4])",
        "continuousSubarrays(a = [1, 1, 2, 2, 3, 3, 4, 4, 5])",
        "continuousSubarrays(a = [5,4,2,1,3,6])",
        "continuousSubarrays(a = [1, 3, 5, 2, 2, 1, 3, 4, 5])",
        "continuousSubarrays(a = [1, 1, 2, 2, 1, 2, 3, 3, 2, 3, 3, 2])",
        "continuousSubarrays(a = [3, 1, 2, 2, 3, 1, 1, 2, 3, 4])",
        "continuousSubarrays(a = [1,2,3,2,2,3,4,5,4,2,1])",
        "continuousSubarrays(a=[5, 2, 2, 5, 6, 3, 5, 1, 1, 5, 5])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1,2,3])",
        "continuousSubarrays(nums = [5, 4, 2, 4])",
        "continuousSubarrays(nums = [1,2,3,4,5])",
        "continuousSubarrays(nums = [2, 1, 4, 3])",
        "continuousSubarrays(nums=[1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [2, 1, 4, 3, 5])",
        "continuousSubarrays(nums = [1,2,1,3,4])",
        "continuousSubarrays(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "continuousSubarrays(nums = [1, 2, 3, 2, 2, 1, 4])",
        "continuousSubarrays(nums = [2, 1, 3, 2, 5, 6])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11,21,12])",
        "countBeautifulPairs(nums = [2, 5, 14])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [2, 4, 6])",
        "countBeautifulPairs(nums = [2, 3, 5, 7])",
        "countBeautifulPairs(nums = [2, 4, 10, 25])",
        "countBeautifulPairs(nums = [21,22,12,11])",
        "countBeautifulPairs(nums = [12, 15, 21, 25])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums=[2,1,4,3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [3,2,1])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [1, 2, 5, 4, 3])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s = \"000001\")",
        "maximumOddBinaryNumber(s = \"10110\")",
        "maximumOddBinaryNumber(s = '10010')",
        "maximumOddBinaryNumber(s = '1111111')",
        "maximumOddBinaryNumber(s = \"0100101\")",
        "maximumOddBinaryNumber(s = \"00101000\")",
        "maximumOddBinaryNumber(s='01111')",
        "maximumOddBinaryNumber(s = '100011101111000011')"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [4,5,2,4])",
        "countCompleteSubarrays(nums = [2, 3, 4, 4, 1])",
        "countCompleteSubarrays(nums = [4, 1, 2, 3, 2, 1, 2])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABABCDCDABABCD\")",
        "minLength(s = \"ABCDABC\")",
        "minLength(s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")",
        "minLength(s = \"ABABABABCD\")",
        "minLength(s = \"ABABABABCDCDCD\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums = [5,5,5,5])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 24, num2 = 4)"
    ],
    "sample_100": [
        "maximumJumps(nums = [10,13,12,14,15], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [4, 2, 3, 0, 3, 1, 2], target = 5)",
        "maximumJumps(nums = [1, 3, 6, 8, 9, 10], target = 3)",
        "maximumJumps(nums = [1, 3, 5, 9], target = 2)",
        "maximumJumps(nums = [1, 4, 8, 2, 6], target = 2)",
        "maximumJumps(nums = [5, 2, 4, 1, 6, 4, 3], target = 2)",
        "maximumJumps(nums = [1, 5, 4, 3, 6, 1, 2, 2], target = 5)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 1, 2, 1, 2])",
        "maxIncreasingGroups(x = [2, 1, 3, 4])",
        "maxIncreasingGroups(x = [4, 1, 3, 2, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 4])",
        "maxIncreasingGroups(x = [1, 3, 2, 5, 4, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "maxIncreasingGroups(x = [1, 1, 1, 2, 3, 4, 4, 5])",
        "maxIncreasingGroups(x = [3, 1, 2, 1, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5])",
        "maxIncreasingGroups(x=[2, 6, 1, 4, 3, 8, 10, 12])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"L___RL__R_L\")",
        "furthestDistanceFromOrigin(moves = \"L_RL__R\")",
        "furthestDistanceFromOrigin(moves = \"LL__R\")",
        "furthestDistanceFromOrigin(moves = \"LLR_R__\")",
        "furthestDistanceFromOrigin(moves = \"R___L_R_\")",
        "furthestDistanceFromOrigin(moves = \"R_LR_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"L___R_L__R_L\")",
        "furthestDistanceFromOrigin(moves = \"LR_L_L_L__R\")",
        "furthestDistanceFromOrigin(moves = \"L_____L___R_RR_\")",
        "furthestDistanceFromOrigin(moves = \"L__RR__LL_R_R_LL_L\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"0001\")",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = \"0010\")",
        "maximumOddBinaryNumber(s = '00100')",
        "maximumOddBinaryNumber(s = \"000000\")",
        "maximumOddBinaryNumber(s = '100000')",
        "maximumOddBinaryNumber(s='00000111')"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,1],[1,1],[0,1]])",
        "colorTheArray(n = 2, queries = [[0,1]])",
        "colorTheArray(n=1, queries=[[0, 1]])",
        "colorTheArray(n=1,queries=[])",
        "colorTheArray(n = 2, queries = [[1,2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [2, 1], [2, 2]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [3, 6, 9, 1])",
        "findValueOfPartition(nums = [1, 3, 2, 5])",
        "findValueOfPartition(nums = [3, 6, 19, 1])",
        "findValueOfPartition(nums = [4, 3, 2, 1])",
        "findValueOfPartition(nums = [3, 6, 1, 4])",
        "findValueOfPartition(nums = [3, 6, 10, 15])",
        "findValueOfPartition(nums = [1, 2, 7, 9, 10])",
        "findValueOfPartition(nums = [90, 47, 68, 72, 20, 12, 54, 95, 42, 100])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[0, 1, 0, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums=[0, 1, 0, 0, 0, 1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 2, 2])",
        "minimumIndex(nums = [1,2,2,2])",
        "minimumIndex(nums = [1,2,1,3,2,1])",
        "minimumIndex(nums = [2, 4, 3, 1, 5])",
        "minimumIndex(nums = [3, 2, 4, 3])",
        "minimumIndex(nums = [4, 1, 2, 2, 3])",
        "minimumIndex(nums = [7, 7, 7, 1, 7, 7, 7])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2])",
        "minimumIndex(nums = [1,2,3,2,2,2,2,2,1,1,1,1,1,1])",
        "minimumIndex(nums = [1,2,3,4,5,2,3,4,1,4,2,5,6])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 6, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 7], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 2, 1, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 3, 8, 1, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 1, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [10, 1, 10], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 5, 3], [3, 8, 5]])",
        "maximizeTheProfit(n = 3, offers = [[0,1,5],[0,2,10],[1,3,15]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 5, 3], [4, 6, 5]])",
        "maximizeTheProfit(n = 1, offers = [[0,0,0]])",
        "maximizeTheProfit(n = 2, offers = [[1, 5, 10], [2, 3, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 4, 5], [4, 6, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,1],[2,3,2],[2,4,10]])",
        "maximizeTheProfit(n = 5, offers = [[0,2,3],[1,3,5],[2,4,10]])",
        "maximizeTheProfit(n=5, offers=[[1,2,5],[2,3,4],[3,4,5]])",
        "maximizeTheProfit(n = 10, offers = [[5,7,4],[8,9,6],[3,7,2]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"5025\")",
        "minimumOperations(num = \"50750\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"50025\")",
        "minimumOperations(num = \"100200300\")",
        "minimumOperations(num = \"500075\")",
        "minimumOperations(num = \"775277\")",
        "minimumOperations(num = \"10072301\")",
        "minimumOperations(num = \"757701\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"525\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = '100')",
        "minimumOperations(num = \"001\")",
        "minimumOperations(num = \"512\")",
        "minimumOperations(num = \"5\")",
        "minimumOperations(num = \"2022\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"250000\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 3, offers = [[0, 0, 1], [0, 1, 2], [1, 2, 3]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,2],[0,2,3]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,2],[1,2,3],[2,3,4],[3,4,5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1]])",
        "maximizeTheProfit(n = 3, offers = [[0,1,1],[0,2,2],[2,3,1]])",
        "maximizeTheProfit(n = 4, offers = [[2,3,1], [1,2,1], [3,4,1]])",
        "maximizeTheProfit(n=3, offers=[[2,2,7],[0,1,2],[1,2,1]])",
        "maximizeTheProfit(n = 10, offers = [[0, 4, 3], [5, 9, 10], [5, 6, 1], [8, 9, 10]])",
        "maximizeTheProfit(n = 6, offers = [[1,2,3],[4,6,2],[2,4,1],[3,5,5],[5,6,4]])",
        "maximizeTheProfit(n = 6, offers = [[1,1,1],[3,5,5],[3,2,1],[2,6,2],[6,6,1]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [3,4,5,1,2], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,3,2,3,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 3, 2, 5, 7], threshold = 4)",
        "longestAlternatingSubarray(nums=[3, 1, 5, 3, 2, 2], threshold=4)",
        "longestAlternatingSubarray(nums = [3, 4, 5, 1, 3, 8], threshold = 4)"
    ],
    "sample_203": [
        "minimumOperations(num = \"522\")",
        "minimumOperations(num = \"525\")",
        "minimumOperations(num = \"5225\")",
        "minimumOperations(num = \"2520\")",
        "minimumOperations(num = \"3020\")",
        "minimumOperations(num = \"20\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"2500025\")",
        "minimumOperations(num = \"7241\")",
        "minimumOperations(num = \"00000200000\")"
    ],
    "sample_11": [
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [1, 1], [1, 3], [0, 2]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 5, 2, 3])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 3, 4])",
        "minimumIndex(nums = [1, 1, 2, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 5, 5, 5])",
        "minimumIndex(nums = [1, 2, 3, 1, 4, 1])",
        "minimumIndex(nums = [1, 2, 2, 2, 2, 4])",
        "minimumIndex(nums = [1, 2, 3, 2, 3, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1,3,6,3,2,3,6,8,9,5], target = 5)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1,3,6,2,5,4,3,2,1], target = 2)",
        "maximumJumps(nums = [5, 4, 3, 2, 1], target = 1)",
        "maximumJumps(nums = [1, 3, 6, 9, 3, 0, 1], target = 2)",
        "maximumJumps(nums = [10, 10], target = 0)",
        "maximumJumps(nums = [3, 5, 7, 9, 11], target = 2)",
        "maximumJumps(nums = [5, 2, 3, 1, 1, 6], target = 3)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = \"5123010000000\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num = \"5123010000000000000\")"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [3, 1, 2, 4])",
        "findValueOfPartition(a = [3, 6, 1, 9, 5])",
        "findValueOfPartition(a = [1,3,2,7,9,5])",
        "findValueOfPartition(a = [2, 4, 6])",
        "findValueOfPartition(a = [1, 1, 2, 3, 5])",
        "findValueOfPartition(a = [1, 10, 3])",
        "findValueOfPartition(a = [10, 1, 100])",
        "findValueOfPartition(a = [1, 5, 7, 8, 12, 15])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])"
    ],
    "sample_120": [
        "minimumIndex(nums = [2, 1, 3, 1, 1, 1, 7, 1, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 3])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8])",
        "minimumIndex(nums = [1, 7, 2, 11, 15])",
        "minimumIndex(nums = [1, 4, 2, 1, 4])",
        "minimumIndex(nums = [2, 5, 3, 5, 1, 5, 5, 5])",
        "minimumIndex(nums = [3, 1, 2, 2, 2, 1, 3, 3, 3])",
        "minimumIndex(nums = [1, 7, 2, 5, 4, 5, 5, 7, 1])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"L\")",
        "furthestDistanceFromOrigin(moves = \"L??\")",
        "furthestDistanceFromOrigin(moves = \"LRRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRRRLLLLRLLRRRLL\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"aaab\")",
        "minimizedStringLength(s = \"abracadabra\")",
        "minimizedStringLength(s = \"abbbbccc\")",
        "minimizedStringLength(s = \"mop\")",
        "minimizedStringLength(s = \"aabcccd\")",
        "minimizedStringLength(s = \"abbacdd\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1,2,3], k = 3)",
        "checkArray(nums = [3, 4, 5], k = 3)",
        "checkArray(nums = [1,2,2], k = 2)",
        "checkArray(nums = [2,3,2,1], k = 3)",
        "checkArray(nums = [2, 3, 4, 2], k = 1)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 14)",
        "checkArray(nums = [3, 2, 2, 1, 2, 1], k = 4)",
        "checkArray(nums = [5, 5, 5, 20, 5], k = 2)",
        "checkArray(nums = [6, 3, 4, 7, 8, 1], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [2, 1, 3])",
        "maxIncreasingGroups(usageLimits = [5, 2, 1])",
        "maxIncreasingGroups(usageLimits = [3, 1, 4, 1, 5, 9, 2, 6])",
        "maxIncreasingGroups(usageLimits=[1, 2, 2, 1])",
        "maxIncreasingGroups(usageLimits=[1,1,1,1,1])",
        "maxIncreasingGroups(usageLimits = [2,1,4,5])",
        "maxIncreasingGroups(usageLimits = [10, 5, 5, 3])",
        "maxIncreasingGroups(usageLimits = [3, 3, 4, 2, 1])",
        "maxIncreasingGroups(usageLimits = [0, 0, 2, 0, 2])"
    ],
    "sample_206": [
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"32\")",
        "minimumOperations(num = \"987654321\")",
        "minimumOperations(num = \"987\")",
        "minimumOperations(num = \"507005\")",
        "minimumOperations(num = '325')",
        "minimumOperations(num = \"5401\")",
        "minimumOperations(num = \"5002020\")",
        "minimumOperations(num = \"88228\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived=[0, 1])",
        "doesValidArrayExist(derived=[0, 0, 1, 1])"
    ],
    "sample_38": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"0011\")",
        "minimumCost(s = \"1010\")",
        "minimumCost(s = \"010010\")",
        "minimumCost(s = \"bbaaaa\")",
        "minimumCost(s = \"1111000\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits=[1, 2, 5, 6, 7, 10])",
        "maxIncreasingGroups(usageLimits=[1, 2, 5, 4, 3])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30, 50, 100, 101, 102])",
        "maxIncreasingGroups(usageLimits = [5, 3, 4, 4, 7, 3, 6, 11, 8, 5, 11])",
        "maxIncreasingGroups(usageLimits = [1, 3, 1, 2, 5, 3])",
        "maxIncreasingGroups(usageLimits = [4, 5, 2, 6, 3, 3])",
        "maxIncreasingGroups(usageLimits = [1, 4, 6, 2, 1, 1, 7])",
        "maxIncreasingGroups(usageLimits = [4, 1, 3, 1, 5, 2, 3, 2, 4, 3])"
    ],
    "sample_53": [
        "smallestString(s = 'cbaab')",
        "smallestString(s = 'babbc')",
        "smallestString(s = 'banana')",
        "smallestString(s = \"cbc\")",
        "smallestString(s = 'cbabd')",
        "smallestString(s = \"cbaba\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"abcz\")",
        "smallestString(s = \"abbaa\")",
        "smallestString(s = 'acdb')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [4,3,2,4], x = 2)",
        "minAbsoluteDifference(nums = [5, 4, 3, 2, 1], x = 4)",
        "minAbsoluteDifference(nums = [1, 3, 8, 8, 10, 15], x = 3)",
        "minAbsoluteDifference(nums = [2,3,4,5,1], x = 2)",
        "minAbsoluteDifference(nums = [2,4,6,7,8], x = 4)",
        "minAbsoluteDifference(nums = [1,3,7,12], x = 2)",
        "minAbsoluteDifference(nums = [3, 2, 4, 6, 7], x = 3)",
        "minAbsoluteDifference(nums = [1, 5, 10, 25, 35, 60], x = 3)",
        "minAbsoluteDifference(nums = [4, 7, 3, 1, 6, 5], x = 4)",
        "minAbsoluteDifference(nums = [2, 4, 5, 1, 7, 9, 2, 3], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 1, offers = [(0, 1, 2)])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 1], [0, 2, 1], [1, 4, 1], [2, 4, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 3, offers = [[0, 0, 2], [0, 1, 3], [1, 2, 4], [2, 2, 1], [2, 3, 2]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 2], [2, 4, 4], [2, 3, 1], [3, 4, 3]])",
        "maximizeTheProfit(N = 4, offers = [[0,1,1],[0,2,1],[0,3,3],[1,2,5],[1,3,2],[2,3,1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 3], [2, 3, 4], [2, 3, 5], [2, 2, 5]])",
        "maximizeTheProfit(N = 3, offers = [[0,1,2],[0,1,3],[1,2,1],[1,2,3],[1,3,1],[1,3,3],[2,3,1],[2,3,3]])",
        "maximizeTheProfit(N = 3, offers = [\n    [1, 2, 2],\n    [1, 1, 1],\n    [2, 2, 1],\n    [2, 3, 1],\n    [3, 3, 1]\n])",
        "maximizeTheProfit(N=4, offers=[[0,0,1],[1,1,1],[1,3,2],[1,2,1],[0,2,1]])",
        "maximizeTheProfit(N = 5, offers = [(1,2,10), (1, 3, 5), (3, 4, 12), (4, 5, 7)])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \"\")",
        "splitWordsBySeparator(a = [], b = \"\")",
        "splitWordsBySeparator(a = [], b = \"\")",
        "splitWordsBySeparator(a=[], b=\"\")",
        "splitWordsBySeparator(a = [], b = \"*\")",
        "splitWordsBySeparator(a = [\"a,b,c\", \"d,e,f\"], b = \",\")",
        "splitWordsBySeparator(a = [\"test\"], b = \"\")",
        "splitWordsBySeparator(a = [\"foo/bar\"], b = \"/\")",
        "splitWordsBySeparator(a = [\"one.two.three\", \"four.five.six\"], b = \".\")",
        "splitWordsBySeparator(a = [\"one,two,three\", \"four\", \"five\"], b = \",\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a = \"512301000\")",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '512300000001')",
        "removeTrailingZeros(a=\"5123010000000000\")",
        "removeTrailingZeros(a = '512300000000000001')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s='neveroddoreven')",
        "makeSmallestPalindrome(s = \"nine\")",
        "makeSmallestPalindrome(s = \"naan\")",
        "makeSmallestPalindrome(s = \"nove\")",
        "makeSmallestPalindrome(s = \"venn\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,3,2,3,1,3], k = 3)",
        "longestEqualSubarray(nums = [1,1,2,2,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,2,1,1], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 1, 3, 3, 3], k = 1)",
        "longestEqualSubarray(nums = [1, 3, 2, 1, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 1], k = 2)",
        "longestEqualSubarray(nums=[1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 4)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [2, 4, 5, 3], k = 1)",
        "maximumBeauty(nums = [1,5,4,6,2], k = 1)",
        "maximumBeauty(nums = [1, 4, 5, 2, 6], k = 10)"
    ],
    "sample_163": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums=[42, 33, 60])",
        "maxSum(nums=[1,2])",
        "maxSum(nums = [2, 4, 6])",
        "maxSum(nums = [65, 78, 75, 72, 71])",
        "maxSum(nums = [3,5,6,10])",
        "maxSum(nums = [10, 12, 15, 1000, 14, 1001, 1002])"
    ],
    "sample_151": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s='string')",
        "finalString(s=\"string\")",
        "finalString(s = \"gstr\")",
        "finalString(s = 'gstr')"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"51230100\")"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber(s = '00000')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = \"110000\")",
        "maximumOddBinaryNumber(s=\"101010\")",
        "maximumOddBinaryNumber(s = \"000100001\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy, problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"this-is-an-easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words=[\"easy, problem\"], separator=\", \")",
        "splitWordsBySeparator(words = [\"easy\",\"problem\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"It's\", \"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"This, is an easy problem\"], separator = \" \")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,3,2,3,1,3], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4], K = 1)",
        "longestEqualSubarray(A = [1,3,2,1,4,1,1,1,1], K = 0)",
        "longestEqualSubarray(A = [1,2,3,1,1,3], K = 2)",
        "longestEqualSubarray(A = [1,2,1,1,2], K = 1)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], K = 5)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,7,8,9], K = 1)",
        "longestEqualSubarray(A = [1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2], K = 3)",
        "longestEqualSubarray(A = [2,3,4,5,6,2], K = 5)",
        "longestEqualSubarray(A=[1,2,3,2,3,2,3,2,3], K=3)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [3, 3, 3, 3])",
        "countWays(nums = [3, 1, 2, 1])",
        "countWays(nums = [2, 5, 4, 1, 3])",
        "countWays(nums=[1,1,3])",
        "countWays(nums = [1, 1, 3, 3, 4])",
        "countWays(nums=[2,1,3,2])",
        "countWays(nums = [4, 5, 5, 1])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 10, 100, 1000, 10000], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 10, 3, 8], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3)",
        "sumIndicesWithKSetBits(nums = [3, 5, 2, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 6, 7, 8, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 4, 5, 10, 12], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 4, 2, 11, 8, 17, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 5, 6, 8, 10, 15], k = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num = \"5123000100\")"
    ],
    "sample_167": [
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"banana\", \"oranges\"], s = \"bo\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"bb\")",
        "isAcronym(words = [\"banana\", \"banana\", \"banana\"], s = \"bn\")",
        "isAcronym(words = [\"Mean\", \"Streets\"], s = \"MS\")",
        "isAcronym(words = [\"Mike\", \"Joe\", \"Mike\"], s = \"MJM\")",
        "isAcronym(words = [\"I\", \"am\", \"a\", \"code\", \"monkey\"], s = \"IAMA\")",
        "isAcronym(words = [\"Everything\", \"will\", \"be\", \"OK\"], s = \"EWB\")",
        "isAcronym(words = [\"start\", \"end\", \"continue\"], s = \"snc\")",
        "isAcronym(words = [\"ab\",\"cde\",\"fghi\",\"jklmno\"], s = \"acegik\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums=[1,3,1,2,2])",
        "countCompleteSubarrays(nums=[1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums=[1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [2, 3, 2, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 1])",
        "countCompleteSubarrays(nums = [1,2,3,3,4,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 1, 2])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n=2, target=3)",
        "minimumPossibleSum(n=10, target=10)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"strong\")",
        "finalString(s = 'stnir')",
        "finalString(s = \"rsti\")",
        "finalString(s = \"stgrti\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n=5, offers=[[0, 0, 1], [0, 2, 2], [1, 3, 2]])",
        "maximizeTheProfit(n = 3, offers = [[0,1,2],[1,2,3]])",
        "maximizeTheProfit(n = 3, offers = [[0, 2, 1], [2, 3, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,3],[0,2,4]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [2, 4, 4]])",
        "maximizeTheProfit(n = 2, offers = [[0,0,1],[0,1,5],[1,0,2]])",
        "maximizeTheProfit(n = 4, offers = [[1,1,5],[2,3,1],[0,1,5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [0, 2, 3], [1, 3, 4], [1, 4, 5], [2, 4, 5], [2, 5, 6]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 3], [2, 4, 5], [1, 4, 4]])",
        "maximizeTheProfit(n = 4, offers = [[0,0,2],[1,2,4],[1,2,3]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums=[1, 3, 6, 4, 1, 2], target=2)",
        "maximumJumps(nums=[1,3,6,4,1,2], target=2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums = [1, 1, 2, 1, 1], target = 3)",
        "maximumJumps(nums = [0, 5], target = 6)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 1, 1, 1, 1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"000111\")",
        "maximumOddBinaryNumber(s = \"00100\")",
        "maximumOddBinaryNumber(s = '10000101')",
        "maximumOddBinaryNumber(s='1110001111')",
        "maximumOddBinaryNumber(s = '1001100')"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 1, k = 4)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 12, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 12, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 3)",
        "makeTheIntegerZero(num1 = 23, num2 = 8)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 2, target = 100)",
        "minimumPossibleSum(n = 3, target = 1)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [4, 5, 0, -2, -3, 1], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums=[1, 3, 5, 7, 9], modulo=2, k=0)",
        "countInterestingSubarrays(nums=[1,2,3,4,5,6,7,8], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [3, 4, 5, 6, 1], modulo = 4, k = 2)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1,5,4,2,1], k = 1)",
        "maximumBeauty(nums = [9, 9, 9, 1, 2, 3], k = 3)",
        "maximumBeauty(nums = [1,5,5,2,6], k = 3)",
        "maximumBeauty(nums = [2,6,4,1], k = 2)",
        "maximumBeauty(nums = [3, 2, 1, 5, 4], k = 2)",
        "maximumBeauty(nums = [1, 5, 7, 3], k = 2)",
        "maximumBeauty(nums=[1, 2, 3], k=2)",
        "maximumBeauty(nums = [1, 2, 3, 2, 4], k = 2)",
        "maximumBeauty(nums = [3, 5, 6, 7, 8], k = 2)"
    ],
    "sample_148": [
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pontie\")",
        "finalString(s = \"nopter\")",
        "finalString(s = \"tonerp\")",
        "finalString(s = \"nopit\")",
        "finalString(s = 'pintr')",
        "finalString(s = 'reptop')",
        "finalString(s = \"npteroi\")"
    ],
    "sample_231": [
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [1, 0, 3, 2])",
        "countWays(nums = [0, 0, 1, 1])",
        "countWays(nums = [1, 0, 0, 0, 0])",
        "countWays(nums=[0, 2, 3, 4, 5])",
        "countWays(nums = [2,3,5,6,7])",
        "countWays(nums = [0, 3, 3, 5, 4, 2])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [2,5,1,4])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums=[2,5,1,4])",
        "countBeautifulPairs(nums = [31, 25, 72, 79, 74])",
        "countBeautifulPairs(nums = [2, 5, 11, 4])",
        "countBeautifulPairs(nums = [21,22,33,25,26])",
        "countBeautifulPairs(nums = [23, 30, 18, 19, 14])",
        "countBeautifulPairs(nums = [32, 57, 31, 33])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 17, num2 = 3)",
        "makeTheIntegerZero(num1 = 24, num2 = 8)",
        "makeTheIntegerZero(num1 = 18, num2 = 4)",
        "makeTheIntegerZero(num1 = 100, num2 = 1)",
        "makeTheIntegerZero(num1 = 123, num2 = 3)",
        "makeTheIntegerZero(num1 = 400, num2 = 4)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'tenev')"
    ],
    "sample_165": [
        "isAcronym(words = [\"United\", \"States\"], s = \"US\")",
        "isAcronym(words = [\"first\", \"second\", \"third\"], s = \"fst\")",
        "isAcronym(words = [\"brown\", \"fox\"], s = \"bf\")",
        "isAcronym(words = [\"c\", \"a\", \"t\"], s = \"cat\")",
        "isAcronym(words = [\"stop\", \"and\", \"smell\", \"the\", \"roses\"], s = \"SANTAS\")",
        "isAcronym(words = [\"dog\", \"house\", \"cat\"], s = \"dohc\")",
        "isAcronym(words = [\"London\", \"Borough\", \"of\", \"Lancaster\"], s = \"LBL\")",
        "isAcronym(words = [\"amazing\", \"facts\"], s = \"af\")",
        "isAcronym(words = [\"Bob\", \"Mark\", \"Matt\"], s = \"BMM\")",
        "isAcronym(words = [\"I\", \"Am\", \"N't\", \"Gonna\", \"Take\", \"Your\", \"Dirty\", \"Money\"], s = \"INGTTAYDM\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums=[0, 0, 0, 1, 1, 0, 1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5, 6], k=2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 5, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 8, 13, 21], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 1, 7, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 4, 0], k = 3)"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n=2, k=5)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 3, 5, 7, 9])",
        "countWays(nums = [1, 0, 3, 2])",
        "countWays(nums = [3, 1, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 6])",
        "countWays([1, 2, 4, 8, 16])",
        "countWays(nums=[1, 5, 4, 3, 2])",
        "countWays(nums = [2, 5, 7, 4])"
    ],
    "sample_39": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abbb\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abccb\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"L___R\")",
        "furthestDistanceFromOrigin(moves = \"L___R\")",
        "furthestDistanceFromOrigin(moves = \"L___R\")",
        "furthestDistanceFromOrigin(moves = \"L___R\")",
        "furthestDistanceFromOrigin(moves = \"L_RL_\")",
        "furthestDistanceFromOrigin(moves = \"LLL_R\")",
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"R_L__\")",
        "furthestDistanceFromOrigin(moves = \"LRL_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_L\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 10)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums = [5,5,5,5])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums=[4, 2, 4])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,2])",
        "countCompleteSubarrays(nums=[1,2,3,3,3])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,2,5,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7], threshold = 7)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 1)",
        "longestAlternatingSubarray(nums=[3,2,5,4], threshold=5)",
        "longestAlternatingSubarray(nums = [2], threshold = 4)",
        "longestAlternatingSubarray(nums=[1,3,2,5,4], threshold=4)",
        "longestAlternatingSubarray(nums = [1, 1, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,3,15,2,4,6], threshold = 12)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,2], [2,3], [3,4]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[3, 4], [4, 5], [5, 6]])",
        "numberOfPoints(nums = [[1,2],[2,3],[4,5]])",
        "numberOfPoints(nums = [[1,3],[2,5],[6,7]])",
        "numberOfPoints(nums = [[2, 2], [2, 5]])",
        "numberOfPoints(nums = [[1, 10], [1, 5]])",
        "numberOfPoints(nums = [[1, 1], [2, 2], [3, 3], [3, 4]])",
        "numberOfPoints(nums = [[0,0],[2,3],[1,1]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [2, 5, 1, 4])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [11, 21, 12, 10])",
        "countBeautifulPairs(nums = [11, 21, 12, 24])",
        "countBeautifulPairs(nums = [21, 20, 55, 44])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 2, 3], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3], t = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 5], t = 5)",
        "longestAlternatingSubarray(nums = [3, 4, 2, 1], t = 5)",
        "longestAlternatingSubarray(nums=[1, 2, 4, 3], t=4)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 4, 6, 7], t = 7)",
        "longestAlternatingSubarray(nums = [7,2,1], t = 2)",
        "longestAlternatingSubarray(nums = [5, 4, 2, 7, 15], t = 8)"
    ],
    "sample_36": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"bbaa\")",
        "minimumCost(s = \"0101\")",
        "minimumCost(s = \"0101\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABABCDCDAB\")",
        "minLength(s = \"ABABCDCDABABCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDABCDABCDEFG\")",
        "minLength(s = \"BABAABCDCD\")",
        "minLength(s = \"ABCDCABABCDCDCD\")",
        "minLength(s = \"AACCCCBBBCCCDDDD\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [4, 5, 0, -2, -3, 1], modulo = 5, k = 5)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 2, 5, 4], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [3,1,4,3,2], modulo = 7, k = 1)",
        "countInterestingSubarrays(nums=[4,3,2,1,5], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [2, 5, 3, 9, 7], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 3, 1, 2, 5, 4], modulo = 5, k = 3)"
    ],
    "sample_9": [
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 2, queries = [[0,1]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2]])",
        "colorTheArray(n=4, queries=[[0,2],[1,2],[3,1],[1,1],[2,1]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[1,1],[0,1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [2, 3, 1], nums2 = [1, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2], nums2 = [2, 3])",
        "maxNonDecreasingLength(nums1 = [1,2], nums2 = [2,3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [1, 1, 1])",
        "maxNonDecreasingLength(nums1 = [2, 2, 2], nums2 = [3, 3, 3])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 2], nums2 = [2, 1, 3, 1])",
        "maxNonDecreasingLength(nums1 = [1, 1, 1, 2, 2, 2], nums2 = [2, 2, 2, 1, 1, 1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 2], nums2 = [2, 4, 3, 4])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 4)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [3,6,1])",
        "findValueOfPartition(nums = [3,6,1])",
        "findValueOfPartition(nums = [3,6,1])",
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums=[3,6,1])",
        "findValueOfPartition(nums = [3, 6, 1, 9, 12])",
        "findValueOfPartition(nums=[9,4,1,7])",
        "findValueOfPartition(nums = [2, 5, 1])",
        "findValueOfPartition(nums=[1,3,2,4,5,2])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LL___RR\")",
        "furthestDistanceFromOrigin(moves = \"R_____L\")",
        "furthestDistanceFromOrigin(moves = \"L__RR__\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"LRLR_RLR\")",
        "furthestDistanceFromOrigin(moves = \"L__LRL_L\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_RL_L\")",
        "furthestDistanceFromOrigin(moves = \"LLRR__LRR\")",
        "furthestDistanceFromOrigin(moves = \"LL_R__LLL_RR\")",
        "furthestDistanceFromOrigin(moves = \"L_LLR__RRR_R_\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [1,2,2,2])",
        "minimumIndex(nums = [1, 2, 2, 2, 1])",
        "minimumIndex(nums = [1,1,1,1,7,1,1,1])",
        "minimumIndex(nums = [1,2,2,2,7])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3, 1, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 2, 3, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 6, 7, 1, 6, 6])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [3,2,1,4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n=3, k=3)"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [3,4,5,3,7])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3])",
        "alternatingSubarray(nums = [2, 3, 4])",
        "alternatingSubarray(nums = [1, 3, 5])",
        "alternatingSubarray(nums = [1, 1, 1])",
        "alternatingSubarray(nums = [4,5,6])",
        "alternatingSubarray(nums = [0, 2, 1, 2, 4, 3])"
    ],
    "sample_310": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 2], [2, 1]])",
        "matrixSum(a = [[0]])",
        "matrixSum(a = [[1,1,1],[1,1,1],[1,1,1]])",
        "matrixSum(a = [[1,2,3],[1,2,3],[1,2,3]])",
        "matrixSum(a = [[0,1,2],[3,4,5]])",
        "matrixSum(a = [[1, 3, 7], [2, 4, 6]])",
        "matrixSum(a = [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3]])",
        "matrixSum(a = [[0,1,2],[0,2,0],[1,0,0]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0,1,1], [1,0,1], [1,1,0]])",
        "findChampion(grid=[[1, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[1,1,1,1,1], [0,1,0,0,0], [0,0,1,0,0], [0,0,0,1,0], [0,0,0,0,1]])",
        "findChampion(grid=[[0, 1, 0, 1], [1, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a=[[1]])",
        "matrixSum(a = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "matrixSum(a = [[1,2], [3,4]])",
        "matrixSum([[1], [1]])",
        "matrixSum(a = [[1,2,3,4]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [3, 4, 5, 3, 7])",
        "alternatingSubarray(nums = [1, 3, 2, 5, 4, 7])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6, 4])",
        "alternatingSubarray(nums = [5,4,3,2,1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 2, 1, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 3, 1])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 4, 2, 8, 6])",
        "alternatingSubarray(nums = [1, 3, 1, 5, 1, 4, 1, 10, 1, 11])",
        "alternatingSubarray(nums = [4, 4, 5, 5, 4, 4, 6, 6, 6, 6, 4])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"pqr\", \"xyz\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"orange\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"halloween\", \"thanksgiving\", \"christmas\"], x = \"a\")",
        "findWordsContaining(words = [\"a\", \"car\", \"mouse\"], x = \"a\")",
        "findWordsContaining(words = [\"love\", \"nose\", \"lotion\"], x = \"o\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"race\", s2 = \"care\")",
        "canBeEqual(s1 = \"zzzzzz\", s2 = \"zzzzzz\")",
        "canBeEqual(s1 = \"abba\", s2 = \"baba\")",
        "canBeEqual(s1 = \"hello\", s2 = \"hlelo\")",
        "canBeEqual(s1 = \"ztq\", s2 = \"qtz\")",
        "canBeEqual(s1 = \"rje\", s2 = \"jr\")",
        "canBeEqual(s1 = \"papaya\", s2 = \"pypppy\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 10)",
        "lengthOfLongestSubsequence(nums = [1], target = 3)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4], target=2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 1)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 1, 4], target = 10)",
        "lengthOfLongestSubsequence(nums=[2,3,4,5,6],target=7)",
        "lengthOfLongestSubsequence(nums = [2,3,4,6,7,12], target = 12)",
        "lengthOfLongestSubsequence(nums = [4,6,7,3], target = 0)",
        "lengthOfLongestSubsequence(nums = [2, 5, 10, 11, 12, 13], target = 30)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abc\")",
        "canBeEqual(s1 = \"bana\", s2 = \"bana\")",
        "canBeEqual(s1 = \"xyzw\", s2 = \"yzwx\")",
        "canBeEqual(s1 = \"acab\", s2 = \"abac\")",
        "canBeEqual(s1 = \"qwerty\", s2 = \"qwert\")",
        "canBeEqual(s1 = \"anana\", s2 = \"nabna\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [13, 7, 2, 8, 3])",
        "maxSubarrays(nums = [2, 3, 1])",
        "maxSubarrays(nums = [1, 2, 4, 6, 8])",
        "maxSubarrays(nums = [2, 1, 5, 8])",
        "maxSubarrays(nums = [1, 5, 10, 7])",
        "maxSubarrays(nums = [2, 1, 1, 3, 6, 2, 4])",
        "maxSubarrays(nums = [5, 5, 4, 5, 1, 1, 2, 3])",
        "maxSubarrays(nums = [6,4,5,6,4,1])",
        "maxSubarrays(nums = [10, 12, 34, 2])"
    ],
    "sample_315": [
        "buyChoco(prices = [3, 2, 1], money = 10)",
        "buyChoco(prices = [1, 1], money = 0)",
        "buyChoco(prices = [1], money = 5)",
        "buyChoco(prices=[1, 2, 3], money=4)",
        "buyChoco(prices = [1, 2, 5], money = 3)",
        "buyChoco(prices = [1, 1, 1, 1, 1], money = 1)",
        "buyChoco(prices = [10, 5], money = 2)",
        "buyChoco(prices = [3,2,3], money = 1)",
        "buyChoco(prices = [3, 2, 5, 1, 2, 1], money = 10)",
        "buyChoco(prices = [5, 4, 1, 2, 3, 5], money = 15)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 10)",
        "countSubMultisets(nums = [1, 2, 3, 4], l = 1, r = 10)",
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 4)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 2)",
        "countSubMultisets(nums = [1,1,2,2,2], l = 1, r = 4)",
        "countSubMultisets(nums = [1,1,2,3], l = 3, r = 6)",
        "countSubMultisets(nums = [2, 3, 5, 1], l = 1, r = 10)",
        "countSubMultisets(nums = [2, 4, 3, 2], l = 1, r = 10)",
        "countSubMultisets(nums = [2,3,4], l = 10, r = 100)",
        "countSubMultisets(nums = [0, 0, 1, 1, 1, 1, 1, 1], l = 0, r = 1)"
    ],
    "sample_322": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(n = 192)",
        "isFascinating(123)",
        "isFascinating(n = 267)",
        "isFascinating(n = 12)",
        "isFascinating(267)",
        "isFascinating(n = 103)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdba\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"abab\")",
        "canBeEqual(s1 = \"aaaa\", s2 = \"aaaa\")",
        "canBeEqual(s1 = \"ae\", s2 = \"ea\")",
        "canBeEqual(s1 = \"cd\", s2 = \"ef\")",
        "canBeEqual(s1 = \"banana\", s2 = \"banaa\")",
        "canBeEqual(s1 = \"bad\", s2 = \"mad\")",
        "canBeEqual(s1 = \"abcc\", s2 = \"xbzc\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1, 1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 2, 1])",
        "minimumCoins(prices = [1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices = [3, 5, 4, 3, 2])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 115)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [2, 2, 2])",
        "minOperations(nums = [3, 3, 3, 3])",
        "minOperations(nums = [3, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2])",
        "minOperations(nums = [1,1,2,2,2])",
        "minOperations(nums = [2, 2, 4, 4, 4])",
        "minOperations(nums = [3, 5, 4])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [3,2,3,4,3])",
        "alternatingSubarray(nums = [1,2,3,2,1])",
        "alternatingSubarray(nums = [1,2,3,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,3,5,4,7])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 4, 3])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [4, 5, 6, 6, 6, 6, 7, 8, 9])",
        "alternatingSubarray(nums=[1,3,1,1,2,2,3])",
        "alternatingSubarray(nums=[3,1,2,4,5,3,2,1,4,3])",
        "alternatingSubarray(nums = [1,1,2,2,2,3,3,3,4,5,6,7,8,8,8,8,8,8,8,8,8,8,8,9])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n=4, limit=2)"
    ],
    "sample_247": [
        "minOperations(s1 = \"aa\", s2 = \"bb\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"xyz\", x = 2)",
        "minOperations(s1 = \"aaa\", s2 = \"bbb\", x = 5)",
        "minOperations(s1 = \"abcde\", s2 = \"bcdef\", x = 2)",
        "minOperations(s1 = \"cd\", s2 = \"ab\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"bcd\", x = 100)",
        "minOperations(s1 = \"bbb\", s2 = \"bbb\", x = 5)",
        "minOperations(s1 = \"qwert\", s2 = \"yuiop\", x = 3)",
        "minOperations(s1 = \"bbab\", s2 = \"bbaa\", x = 5)",
        "minOperations(s1 = \"abcdefgh\", s2 = \"hfedcba\", x = 3)"
    ],
    "sample_340": [
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 1, y = 1, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 3, z = 1)",
        "longestString(x = 2, y = 5, z = 1)",
        "longestString(x = 1, y = 3, z = 5)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 4)",
        "minOperations(nums = [4,2,3,1,2], k = 5)",
        "minOperations(nums = [1, 1, 1, 2, 3], k = 3)",
        "minOperations(nums = [4, 3, 1, 2, 6, 5], k = 2)",
        "minOperations(nums = [3, 4, 5, 2, 6, 1], k = 3)",
        "minOperations(nums = [3,2,5,1], k = 6)",
        "minOperations(nums = [5, 6, 7, 1, 2, 8, 4], k = 5)",
        "minOperations(nums = [7,3,1,1,1,1,1,1,3], k = 6)",
        "minOperations(nums = [1, 3, 5, 6, 2, 1, 4, 6, 8, 3, 9, 0], k = 8)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaab\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"ababba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbb\")",
        "longestSemiRepetitiveSubstring(s = \"abaaababaa\")",
        "longestSemiRepetitiveSubstring(s = \"110111100111\")",
        "longestSemiRepetitiveSubstring(s = \"xaaaaax\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 3])",
        "isGood(a = [1, 2, 3, 3])",
        "isGood(a = [1, 2, 2])",
        "isGood(a = [0, 2, 1])",
        "isGood(a = [1,2,3,3,2])",
        "isGood(a = [1, 3, 2, 4, 2])",
        "isGood([1,2,3,4,3,2,1])",
        "isGood(a = [0, 1, 2, 3, 4, 5, 6, 7, 8])",
        "isGood(a=[1,1,2,2,3])",
        "isGood(a = [1,2,3,4,5,1,3,4,2])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n = 7, m = 4)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 4, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 3, 3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 4, 3, 1])",
        "minGroupsForValidAssignment(nums = [4, 4, 4, 5, 5, 5, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 1, 1, 2, 2, 2, 3, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums=[1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"4\", \"5\", \"6\", \"prev\"])",
        "lastVisitedIntegers([\"2\", \"3\", \"prev\", \"1\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"dc\",\"ll\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dc\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"i\", \"am\", \"ah\", \"ma\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"100110\", k = 2)",
        "shortestBeautifulSubstring(s = '0011', k = 2)",
        "shortestBeautifulSubstring(s = \"111000\", k = 2)",
        "shortestBeautifulSubstring(s = '1001', k = 1)",
        "shortestBeautifulSubstring(s = \"10111101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101\", k = 1)",
        "shortestBeautifulSubstring(s = '0100011', k = 2)",
        "shortestBeautifulSubstring(s = '1000111111', k = 2)",
        "shortestBeautifulSubstring(s = \"1010000010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"01011010010111\", k = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [4, 5, 1, 2, 3])",
        "minimumRightShifts(nums = [3, 2, 1, 2, 3])"
    ],
    "sample_294": [
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"110001\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"1001011\")",
        "minimumSteps(s = \"100011\")",
        "minimumSteps(s=\"00100\")",
        "minimumSteps(s = \"01011101\")",
        "minimumSteps(s=\"011011\")",
        "minimumSteps(s = \"011100100\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"nana\", s3 = \"ban\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1=\"a\", s2=\"b\", s3=\"c\")",
        "findMinimumOperations(s1 = \"qwe\", s2 = \"qwe\", s3 = \"qwe\")",
        "findMinimumOperations(s1 = \"abcdefg\", s2 = \"bcdefgh\", s3 = \"cdefghi\")",
        "findMinimumOperations(s1 = \"abac\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"panana\", s3 = \"ananab\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"pq\", s3 = \"pqxyz\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"appbananan\", s3 = \"ananaap\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"ab\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cf\")",
        "canMakeSubsequence(str1 = \"abcdef\", str2 = \"bd\")",
        "canMakeSubsequence(str1 = \"azzz\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"zm\", str2 = \"a\")",
        "canMakeSubsequence(str1=\"abcd\", str2=\"bdg\")",
        "canMakeSubsequence(str1 = \"acfg\", str2 = \"xz\")",
        "canMakeSubsequence(str1 = \"abczde\", str2 = \"ed\")",
        "canMakeSubsequence(str1 = \"afd\", str2 = \"qwe\")"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4])",
        "isGood([1,2,3,4,5])",
        "isGood(nums = [2, 3, 1, 4])",
        "isGood(nums = [1, 3, 4, 2])",
        "isGood(nums=[1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums=[3, 2, 1, 4])",
        "isGood([4,1,3,2])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [2, 7, 11, 15], target = 10)",
        "countPairs(nums = [1, 3, 4, 2], target = 5)",
        "countPairs(nums = [1, 4, 2, 7], target = 10)",
        "countPairs(nums = [3, 1, 2, 2, 4], target = 5)",
        "countPairs(nums = [1, 4, 5, 3, 2], target = 5)",
        "countPairs(nums = [1, 3, 7, 5, 2], target = 12)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [6, 5, 8], moveTo = [8, 6, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8], moveTo = [9, 9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [6, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [6, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [8, 9, 6, 5], moveFrom = [9, 6], moveTo = [6, 5])",
        "relocateMarbles(nums = [1,2,5,8,9], moveFrom = [2,8,9,1], moveTo = [6,5,6,5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [6, 7, 8, 9], moveTo = [8, 9, 6, 7])",
        "relocateMarbles(nums = [5, 5, 6, 8, 9, 9], moveFrom = [5, 6, 9], moveTo = [9, 8, 5])",
        "relocateMarbles(nums = [4, 2, 9, 7], moveFrom = [2, 4, 7], moveTo = [16, 12, 5])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [2, 7, 11, 15], target = 20)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 9)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 9)",
        "countPairs(nums = [1,2,3,4,5,6], target = 7)",
        "countPairs(nums = [1, 3, 5], target = 6)",
        "countPairs(nums = [1, 3, 4, 6, 8, 11], target = 10)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,2])",
        "minLengthAfterRemovals(nums = [5, 5, 5])",
        "minLengthAfterRemovals(nums = [5, 4, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6])"
    ],
    "sample_303": [
        "countSeniors(details = ['Mike, 25', 'John, 60', 'Alice, 40', 'Bob, 62'])",
        "countSeniors(details = [\"Julian 53\", \"Mike 62\", \"Bob 44\"])",
        "countSeniors(details = [\"3212349876543210\", \"4444444444444444\"])",
        "countSeniors(details = [\"Joe has a phone number 555-1234\", \"Harry has a phone number 555-9876\", \"Larry has a phone number 555-0000\", \"Curly has a phone number 555-0123\"])",
        "countSeniors(details = [\"Amy, 25\", \"George, 17\", \"John, 35\", \"Laura, 65\", \"Mark, 43\"])",
        "countSeniors(details = [\"25683H\", \"54724G\", \"89851B\"])",
        "countSeniors(details = [\"Fiona,35,N\", \"Julian,68,Y\", \"Mark,40,Y\", \"Dave,21,N\"])",
        "countSeniors(details = [\"20,Alex,420\", \"45,Bob,21\", \"89,Patrick,37\"])",
        "countSeniors(details = [\"Tom Hanks, 43\", \"Harry Potter, 70\", \"Bob Dylan, 60\", \"Tom Petty, 33\", \"Eddie Van Halen, 63\", \"Gary Clark Jr., 52\"])",
        "countSeniors(details = [\"550100#Johan Hansen\", \"463100#Hanne Kramer\", \"911900#Julie Eriksen\", \"183100#Gunnel Holm\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbccdd\")",
        "longestSemiRepetitiveSubstring(s = \"abbbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"ababaaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbbbbccccc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbaaabab\")",
        "longestSemiRepetitiveSubstring(s = \"ddababba\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"aaab\", s2 = \"abaa\")",
        "canBeEqual(s1 = \"nana\", s2 = \"banana\")",
        "canBeEqual(s1 = \"banana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"fedcab\")",
        "canBeEqual(s1 = \"maaz\", s2 = \"zama\")",
        "canBeEqual(s1 = \"yzy\", s2 = \"zyy\")",
        "canBeEqual(s1 = \"stod\", s2 = \"tosd\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"b\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaaaa\", s2 = \"bbbbb\", s3 = \"ccccc\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"ban\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"xyz\", s3 = \"abxycdz\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"ra\", s2 = \"ra\", s3 = \"ra\")",
        "findMinimumOperations(s1 = \"nice\", s2 = \"nice\", s3 = \"nice\")",
        "findMinimumOperations(s1 = \"hehe\", s2 = \"haha\", s3 = \"hihi\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"mongoose\", s3 = \"cat\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"karan\", s3 = \"bananas\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [], target = 1)",
        "lengthOfLongestSubsequence(nums = [], target = 5)",
        "lengthOfLongestSubsequence(nums = [], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4], target=1)",
        "lengthOfLongestSubsequence(nums = [0,0], target = 0)",
        "lengthOfLongestSubsequence(nums = [3, 4, 5, 6], target = 11)",
        "lengthOfLongestSubsequence(nums = [3, 2, 1, 2], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 4, 7, 14, 25], target = 1)",
        "lengthOfLongestSubsequence(nums = [5, 4, 6, 3, 2, 7, 9], target = 5)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [3, 2, 1])",
        "minimumSum(nums = [4, 3, 2, 1, 5])",
        "minimumSum(nums = [3, 2, 1, 5, 4])",
        "minimumSum(nums = [3, 4, 5, 6, 2])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"aaa\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\"])",
        "minimizeConcatenatedLength([\"alex\", \"loves\", \"leetcode\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"b\", \"bb\", \"aaa\"])",
        "minimizeConcatenatedLength(words = [\"cb\", \"cba\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"ab\", \"cc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"alice\",\"bob\",\"cat\",\"dog\"])",
        "minimizeConcatenatedLength(words = [\"go\",\"girl\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"yyy\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"h\", \"o\", \"r\", \"s\", \"e\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"1011001\", k = 2)",
        "shortestBeautifulSubstring(s=\"10110\", k=2)",
        "shortestBeautifulSubstring(s = \"1010\", k = 2)",
        "shortestBeautifulSubstring(s = '0', k = 1)",
        "shortestBeautifulSubstring(s = '111', k = 2)",
        "shortestBeautifulSubstring(s='1110001', k=2)",
        "shortestBeautifulSubstring(s = \"11001000110\", k = 2)",
        "shortestBeautifulSubstring(s = \"010011101010\", k = 2)",
        "shortestBeautifulSubstring(s='01000101001001', k=4)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\", \"cc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"aa\", \"aa\"])",
        "minimizeConcatenatedLength(words=[\"aa\",\"ab\",\"bc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bca\",\"cba\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"ba\",\"cd\",\"dc\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"b\", \"cc\", \"ddd\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bca\",\"da\"])",
        "minimizeConcatenatedLength(words = [\"co\", \"dil\", \"ity\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"can\", \"apple\", \"cat\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 20, m = 3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [3,4,5,3,7])",
        "alternatingSubarray(nums = [0, 1, 2])",
        "alternatingSubarray(nums = [1, 4, 3, 2])",
        "alternatingSubarray(nums = [1,2,1,3])",
        "alternatingSubarray(nums=[1,2,3,4,5,6,7])",
        "alternatingSubarray(nums=[1,2,3,3,4,4,5])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 6, 4, 2])",
        "alternatingSubarray(nums = [1, 2, 4, 6, 7, 8])",
        "alternatingSubarray(nums = [2, 4, 5, 6, 6, 7, 8, 8])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5,6,7])",
        "findMaximumLength(nums = [1,1,0,0,1,1,1,0,1])",
        "findMaximumLength(nums = [2, 1, 3])",
        "findMaximumLength(nums = [0, 1, 2, 3, 4])",
        "findMaximumLength(nums = [1, 2, 4, 5])",
        "findMaximumLength(nums = [2,2,2,2,2,2,2,2,2,2,2])",
        "findMaximumLength(nums = [2, 2, 2, 1, 1, 1])",
        "findMaximumLength(nums = [5, 2, 4, 3, 1])",
        "findMaximumLength(nums = [3,1,5,4,2])",
        "findMaximumLength(nums = [0,1,1,1,1,0,0,0,1,1,1,0])"
    ],
    "sample_302": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"12345678901156\", \"12345678901256\", \"12345678901356\", \"12345678901456\", \"12345678901556\", \"12345678901656\", \"12345678901756\", \"12345678901856\"])",
        "countSeniors(details = [\"John is 32\", \"Jane is 65\", \"Sally is 22\"])",
        "countSeniors(details = [\"Bob, 65\", \"Jane, 57\", \"Jack, 81\"])",
        "countSeniors(details = [\"Janet Jones 80\", \"Aaron Zeck 65\", \"Nikki Sanders 95\"])",
        "countSeniors(details = [\"Mike 55\", \"John 65\", \"Alice 67\", \"Kate 22\", \"Jim 45\"])",
        "countSeniors(details = [\"Jason-23-70\", \"Jeffrey-31-68\", \"Joe-33-72\", \"Juan-31-70\", \"Jeff-32-69\"])",
        "countSeniors(details = [\"2364302001002353\", \"1934618471538010\", \"9999999999999999\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"aa\", s2 = \"ab\")",
        "canBeEqual(s1 = \"abab\", s2 = \"cdcd\")",
        "canBeEqual(s1 = \"anba\", s2 = \"nabb\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 1])",
        "minimumCoins(prices = [1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices = [2, 1])",
        "minimumCoins(prices = [1, 2, 1, 1])",
        "minimumCoins(prices = [2, 3])",
        "minimumCoins(prices = [1,2])",
        "minimumCoins(prices = [2, 2, 1, 1])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8])",
        "minimumCoins(prices = [3, 4, 2])",
        "minimumCoins(prices = [2, 4, 3, 6])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 1, 1])",
        "minimumSeconds(A = [1,2,1])",
        "minimumSeconds(A = [1, 1])",
        "minimumSeconds(A = [1,2,1,2,1,2])",
        "minimumSeconds(A = [0, 1, 2, 3])",
        "minimumSeconds(A = [1,2,3,4,5,6,7])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(A = [2, 1, 1])",
        "minimumSeconds(A=[0, 1, 1, 1, 0])",
        "minimumSeconds(A = [2, 2, 3, 4, 4])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ty\",\"yt\",\"lc\",\"cl\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"lc\", \"cl\", \"gg\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"yz\", \"xy\", \"xy\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5])",
        "minSum(nums1 = [2, 1, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0,1], nums2 = [1,2])",
        "minSum(nums1 = [1, 0, 3, 0], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [5, 1, 2], nums2 = [3, 0, 4])",
        "minSum(nums1 = [1,2,3,4], nums2 = [4,5])",
        "minSum(nums1 = [2, 1, 5], nums2 = [2, 0, 0])",
        "minSum(nums1 = [0, 4, 7], nums2 = [5, 6, 0])",
        "minSum(nums1 = [0,2,3], nums2 = [0,1,1,1])",
        "minSum(nums1 = [5, 3, 1, 0], nums2 = [1, 3, 5, 7])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"a\", \"b\", \"c\"], x = \"d\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"strawberry\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\"], x = \"x\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"q\")",
        "findWordsContaining(words = [\"banana\", \"strawberry\"], x = \"a\")",
        "findWordsContaining(words = [\"foo\", \"bar\"], x = \"test\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bird\"], x = \"l\")",
        "findWordsContaining(words = [\"raindrop\", \"shore\", \"store\"], x = \"oo\")",
        "findWordsContaining(words = [\"om\", \"st\", \"mom\"], x = \"mom\")",
        "findWordsContaining(words = [\"man\", \"sing\", \"sprint\"], x = \"z\")"
    ],
    "sample_397": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [0], m = 1, k = 1)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 1)",
        "maxSum(nums = [1, 2, 3], m = 3, k = 2)",
        "maxSum(nums = [1, 3, 5, 7, 9], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 2, 2, 2, 2], m = 1, k = 2)",
        "maxSum(nums = [0,0,0,0,0], m = 0, k = 2)",
        "maxSum(nums = [0, 1, 0, 0, 1, 0], m = 3, k = 2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [4], moveFrom = [4], moveTo = [2])",
        "relocateMarbles(nums = [1, 3, 5], moveFrom = [1, 3], moveTo = [5, 1])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,1,3], moveTo = [2,4,4])",
        "relocateMarbles(nums = [3,2,1], moveFrom = [3,2,1], moveTo = [2,1,3])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [4, 5, 1, 2, 3])",
        "minimumRightShifts(nums=[5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9, 11])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices=[1, 2, 3], money=3)",
        "buyChoco(prices = [2, 2, 1], money = 3)",
        "buyChoco(prices = [1, 3, 5], money = 5)",
        "buyChoco(prices = [1, 1, 5], money = 6)",
        "buyChoco(prices = [2, 2, 5], money = 3)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 8, 16], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 100)",
        "lengthOfLongestSubsequence(nums = [3, 1, 2, 2], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,1], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 2, 3, 3, 4, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [3, 5, 8, 9, 10, 15], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 4, 5, 6, 2, 5, 6, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [10, 4, 13, 3, 5, 1, 18], target = 18)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"baaabbabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbbba\")",
        "longestSemiRepetitiveSubstring(s = \"baaaba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbabbaaab\")",
        "longestSemiRepetitiveSubstring(s = \"abaaabbbabbb\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"pineapple\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\", \"pineapple\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"cat\", \"horse\"], x = \"cat\")",
        "findWordsContaining(words = [\"hello\", \"banana\", \"dog\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"banana\", \"banana\", \"apple\"], x = \"ba\")",
        "findWordsContaining(words = [\"fire\", \"animal\", \"fire\"], x = \"fire\")",
        "findWordsContaining(words = [\"bca\", \"banana\", \"bananas\"], x = \"an\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"first\", \"second\", \"third\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"5\", \"2\", \"prev\", \"prev\", \"prev\", \"3\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"ggrr\", s2 = \"rgrg\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"god\", s2 = \"dog\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dbca\")",
        "canBeEqual(s1 = \"acbd\", s2 = \"dbca\")",
        "canBeEqual(s1 = \"aaac\", s2 = \"aaca\")",
        "canBeEqual(s1 = \"nalp\", s2 = \"plan\")",
        "canBeEqual(s1 = \"bank\", s2 = \"kran\")",
        "canBeEqual(s1 = \"acbg\", s2 = \"cbga\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8])",
        "minimumSum(nums = [1,3,3])",
        "minimumSum(nums = [3,1,1,1])",
        "minimumSum(nums = [5,6,3,4,1,2])",
        "minimumSum(nums = [1,5,3,4,3])",
        "minimumSum(nums = [1, 1, 4, 5, 3])",
        "minimumSum(nums = [2,1,2,3,4,5,3,2,1,2,3,4,5,3,2,1,2,3,4,5,3,2,1,2,3,4,5,3,2,1,2,3,4,5,3,2,1,2,3,4,5,3,2,1,2,3,4,5])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 3)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = -4)",
        "lengthOfLongestSubsequence(nums = [3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 15)",
        "lengthOfLongestSubsequence(nums = [4,3,1], target = 2)",
        "lengthOfLongestSubsequence(nums = [4, 1, 5, 7, 2, 3, 9], target = 9)"
    ],
    "sample_368": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = 'lYmPh')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'lHmpY')",
        "sortVowels(s = \"HYmpl\")",
        "sortVowels(s = 'YlmpH')",
        "sortVowels(s='lYmpH')",
        "sortVowels(s = \"lPhmy\")",
        "sortVowels(s='mYplH')"
    ],
    "sample_312": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums=[[7,2,1],[6,4,2],[6,5,3],[3,2,1]])",
        "matrixSum(nums = [[1, 3, 5], [2, 4, 6]])",
        "matrixSum(nums = [[0,1], [1,2]])",
        "matrixSum([[1,2,3], [2,3,1], [3,1,2]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [3, 2, 1, 4])",
        "maximumTripletValue(nums = [2, 3, 5])",
        "maximumTripletValue(nums = [4, 2, 1, 3])",
        "maximumTripletValue(nums = [2, 5, 3])",
        "maximumTripletValue(nums = [5, 2, 7])",
        "maximumTripletValue(nums = [3, 4, 5, 1])",
        "maximumTripletValue(nums = [-2, -2, -2])",
        "maximumTripletValue(nums = [0, 3, -2])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [0, 1, 2])",
        "alternatingSubarray(nums = [2, 3, 4])",
        "alternatingSubarray(nums = [4, 5, 6])",
        "alternatingSubarray(nums = [3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 4, 6])",
        "alternatingSubarray(nums = [1, 1, 1, 2, 3])",
        "alternatingSubarray(nums = [3, 2, 1, 1, 3, 2, 1])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouua\", k = 10)",
        "beautifulSubstrings(s = \"aabcb\", k = 2)",
        "beautifulSubstrings(s = \"aeioa\", k = 5)"
    ],
    "sample_449": [
        "minChanges(s = \"aa\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"baa\")",
        "minChanges(s = \"oo\")",
        "minChanges(s=\"AAAAAA\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"010010\")",
        "minimumSteps(s = \"110001\")",
        "minimumSteps(s = \"1001011\")"
    ],
    "sample_305": [
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details=[])",
        "countSeniors(details = [\"a10566\", \"b12345\", \"c77777\"])",
        "countSeniors(details = [\"34536645654654544645,50\", \"53454666345667565756,61\", \"456456453456543453456,50\"])",
        "countSeniors(details = [\"9924012345\",\"9812110903\",\"0103112345\"])",
        "countSeniors(details = [\"bwfqr4143602\", \"jt4823906424\", \"mw3092583606\"])",
        "countSeniors(details = [\"98532746070-21-9168\", \"22751312722-20-3266\", \"18275883992-30-4754\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,3,2,2])",
        "minGroupsForValidAssignment(nums=[1,2,3,4,5,6,7])",
        "minGroupsForValidAssignment(nums = [3,2,3,4])",
        "minGroupsForValidAssignment(nums = [2,2,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,1,3,4,3,3])",
        "minGroupsForValidAssignment(nums = [5, 2, 5, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2,3,2,3,3,2,3,2,3,2,3,2])",
        "minGroupsForValidAssignment(nums = [2,3,1,5,4,2,4,2,5,4,1,3,3,1,1,4,4,4,5,2,5,2,5,2,2,4,4,4,2,4,3,5])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 10)",
        "countPairs(coordinates = [[1, 2], [3, 4]], k = 4)",
        "countPairs(coordinates=[(1, 2), (2, 3), (1, 3)], k=3)",
        "countPairs(coordinates = [[3,4],[1,1],[2,3],[1,2],[2,2]], k = 2)",
        "countPairs(coordinates = [(1, 0), (2, 1), (2, 1), (2, 2), (4, 5)], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 1], [3, 2], [4, 3], [4, 3], [5, 4], [6, 5], [6, 5], [6, 5], [7, 6]], k = 2)",
        "countPairs(coordinates = [[2, 3], [1, 2], [5, 6], [0, 1], [3, 4], [2, 1]], k = 3)",
        "countPairs(coordinates = [[-3, 2], [-2, 1], [-2, 1], [3, 0], [0, 2]], k = 1)",
        "countPairs(coordinates = [[2, 5], [3, 8], [5, 12], [6, 13], [7, 9], [9, 17]], k = 1)",
        "countPairs(coordinates = [[4, 3], [1, 2], [0, 1], [4, 2], [2, 0], [3, 4], [4, 4], [2, 3], [3, 1], [0, 0]], k = 2)"
    ],
    "sample_401": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [1, 5, 4, 2, 9, 9, 9], m = 3, k = 4)",
        "maxSum(nums = [1, 5, 4, 2, 9, 9, 9], m = 3, k = 4)",
        "maxSum(nums = [], m = 2, k = 3)",
        "maxSum(nums = [0, 0, 0], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [0,0,0], m = 3, k = 3)",
        "maxSum(nums = [0, 0, 0], m = 3, k = 0)",
        "maxSum(nums = [1], m = 2, k = 0)",
        "maxSum(nums = [1, 3, 3, 4, 2, 2, 1, 1, 2], m = 3, k = 5)"
    ],
    "sample_452": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"abcab\")",
        "minChanges(s = \"baabb\")",
        "minChanges(s = \"rgrgr\")",
        "minChanges(s = \"babbbabbb\")",
        "minChanges(s = \"abaababbabaa\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 2])",
        "minOperations(nums1 = [1,1,1,1,1,1,1], nums2 = [6])",
        "minOperations(nums1 = [1,1,1,1,1,1,1], nums2 = [6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 1, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 3, 5])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '110011', k = 2)",
        "shortestBeautifulSubstring(s = '00111', k = 2)",
        "shortestBeautifulSubstring(s = '10011', k = 2)",
        "shortestBeautifulSubstring(s = \"101\", k = 2)",
        "shortestBeautifulSubstring(s='00110011', k=2)",
        "shortestBeautifulSubstring(s = '1100110', k = 2)",
        "shortestBeautifulSubstring(s = \"000111\", k = 3)",
        "shortestBeautifulSubstring(s='01100', k=2)",
        "shortestBeautifulSubstring(s = '0010110', k = 2)",
        "shortestBeautifulSubstring(s = '01001010111', k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [0,1,2])",
        "maximumTripletValue(nums = [2, 1, 5, 0, 4, 6])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 1, limit = 2)",
        "distributeCandies(n = 20, limit = 3)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "minGroupsForValidAssignment(nums = [2,3,6,7,4,12,21,39])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [4, 4, 3, 2, 2])",
        "minGroupsForValidAssignment(nums = [1,3,4,4,4,4,4,5])",
        "minGroupsForValidAssignment(nums = [2,4,3,1,10,8])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1,2], nums2 = [3,4])",
        "minSum(nums1 = [1, 0, 2], nums2 = [0, 2, 1])",
        "minSum(nums1 = [2, 1, 0], nums2 = [1, 2, 3])",
        "minSum(nums1 = [2, 5], nums2 = [1, 3])",
        "minSum(nums1 = [1, 0, 2, 3], nums2 = [0, 0, 4, 5])",
        "minSum(nums1=[3,0], nums2=[5,0])",
        "minSum(nums1 = [1, 3, 1, 2], nums2 = [2, 2, 4, 4])",
        "minSum(nums1 = [2,3,0,1,4], nums2 = [4,2,1,0,3])"
    ],
    "sample_453": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"bb\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"baana\")",
        "minChanges(s = \"coding\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"\", k = 1)",
        "beautifulSubstrings(s = \"\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s=\"aeiou\", k=3)",
        "beautifulSubstrings(s = \"a\", k = 4)",
        "beautifulSubstrings(s = \"aeaeaa\", k = 2)",
        "beautifulSubstrings(s=\"aieee\", k=3)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s=\"aeiou\", k=2)",
        "beautifulSubstrings(s=\"aeiou\", k=1)",
        "beautifulSubstrings(s = \"aeaeae\", k = 3)",
        "beautifulSubstrings(s = \"aaauu\", k = 3)",
        "beautifulSubstrings(s = \"eceba\", k = 3)",
        "beautifulSubstrings(s = \"aeaeaeaeaeaeae\", k = 1)"
    ],
    "sample_369": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmlPh\")",
        "sortVowels(s = 'lampH')",
        "sortVowels(s = \"lHmYp\")",
        "sortVowels(s = 'lPhMy')",
        "sortVowels(s=\"HYlmp\")",
        "sortVowels(s = 'lPyHm')",
        "sortVowels(s=\"myPyl\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [5,5,5,5])",
        "minimumSeconds(nums=[1,2,1,2])",
        "minimumSeconds(nums = [5,1,2,3,5,1])",
        "minimumSeconds(nums = [1, 3, 4, 1, 3])",
        "minimumSeconds(nums=[3, 1, 3])",
        "minimumSeconds(nums = [3,1,2,2,3,4,4,4,4,7,3,1,2,2,3,4,4,4,4,3,7,7])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [3,4,5,1,2])",
        "minimumSum(nums = [2, 5, 3, 1])",
        "minimumSum(nums = [1, 2, 3, 1, 1, 3])",
        "minimumSum(nums = [3, 1, 2, 3, 4])",
        "minimumSum(nums = [3, 1, 4, 7])",
        "minimumSum(nums = [4, 2, 7, 3, 5])",
        "minimumSum(nums = [5, 2, 6, 4])",
        "minimumSum(nums = [2, 5, 7, 1, 3, 6])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [3, 2, 20, 1, 1, 3], k = 10)",
        "minOperations(nums = [3, 2, 1, 4, 5, 6], k = 6)",
        "minOperations(nums = [3, 1, 3, 2, 4, 3], k = 3)",
        "minOperations(nums = [5,2,4,1,7,5,9,10], k = 9)",
        "minOperations(nums = [4, 2, 3, 1, 3, 2, 4, 5], k = 6)",
        "minOperations(nums = [10, 7, 8, 1, 2, 5, 3, 4, 6, 5], k = 10)",
        "minOperations(nums = [3, 4, 9, 3, 2, 6, 3, 8, 10, 7], k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [], m = 0, k = 0)",
        "maxSum(A = [1, 5, 4, 2, 9, 9, 9], m = 3, k = 4)",
        "maxSum(A = [], m = 3, k = 0)",
        "maxSum(A = [0, 0, 0], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(A = [3, 4, 5], m = 1, k = 3)",
        "maxSum(A = [3, 1, 2, 2], m = 2, k = 3)",
        "maxSum(A = [1,1,1,1], m = 3, k = 1)",
        "maxSum(A=[1, 1, 1, 1, 1], m = 1, k = 1)",
        "maxSum(A = [1, 3, 4, 5, 7, 5], m = 2, k = 2)"
    ],
    "sample_293": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"10011\")",
        "minimumSteps(s = \"110101\")",
        "minimumSteps(s=\"10\")",
        "minimumSteps(s = \"010111011\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [3, 1, 5, 6, 4, 2])",
        "maxSubarrays(nums = [1,2,4,7])",
        "maxSubarrays(nums = [2, 3, 4, 6, 8])",
        "maxSubarrays(nums = [2, 3, 1, 6])",
        "maxSubarrays(nums = [3, 5, 7, 9])",
        "maxSubarrays(nums = [4, 2, 3, 1, 6])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [2,4,2,4,8])",
        "maxSubarrays(nums=[2,3,1,1,1,2,3])",
        "maxSubarrays(nums = [10, 2, 12, 13, 14, 4, 8])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [3, 2, 1], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [3, 2, 3], money = 3)",
        "buyChoco(prices = [2, 3, 4], money = 5)",
        "buyChoco(prices = [2, 1], money = 5)",
        "buyChoco(prices = [10, 1], money = 10)"
    ],
    "sample_290": [
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"00100\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"01000\")",
        "minimumSteps(s
        "minimumSteps(s = \"0010111\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1])",
        "minLengthAfterRemovals(nums = [1])",
        "minLengthAfterRemovals(nums = [2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,2,2])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [4,3,1,1,3,3,2,2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 3, 2, 3, 4, 2, 4])"
    ],
    "sample_420": [
        "minOperations(nums = [3,1,3,2,5,3], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6], k = 6)",
        "minOperations(nums = [1,2,3], k = 3)",
        "minOperations(nums = [1,2,3,4,1], k = 5)",
        "minOperations(nums = [1,2,3,2,1], k = 3)",
        "minOperations(nums = [3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [7, 7, 7, 7, 7, 7], k = 5)",
        "minOperations(nums = [2, 4, 6, 8, 2, 4, 6, 8], k = 4)",
        "minOperations(nums = [1,2,4,6,7], k = 4)"
    ],
    "sample_363": [
        "isGood(nums = [1,3,2])",
        "isGood(nums = [3, 1, 2, 3])",
        "isGood([2, 1, 3])",
        "isGood(nums = [1, 2, 3, 2])",
        "isGood(nums = [2, 0, 1])",
        "isGood(nums = [3, 2, 1, 2, 3])",
        "isGood([1, 3, 2, 2])",
        "isGood(nums = [2, 3, 2, 1])",
        "isGood(nums = [1,3,2,2,3])",
        "isGood(nums = [1,2,3,1,5,4])"
    ],
    "sample_325": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(267)",
        "isFascinating(n = 127)",
        "isFascinating(n = 382)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3,3])",
        "isGood(nums=[1,1])",
        "isGood(nums = [2,1,3,3])",
        "isGood(nums = [3, 1, 3, 2])",
        "isGood(nums = [1,1,2,2,2])",
        "isGood([2, 1, 3])",
        "isGood(nums=[1,3,3,1])",
        "isGood(nums = [3, 3, 2, 1, 4])",
        "isGood(nums = [1, 3, 4, 2, 4, 2])",
        "isGood([1, 3, 2, 3, 1, 1])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1,2,1,2,1,2])",
        "minimumSeconds(nums = [1,2,1,2,1,2])",
        "minimumSeconds(nums = [1, 3, 2])",
        "minimumSeconds(nums = [1,2,1,2,1,2,1,2])",
        "minimumSeconds(nums = [1,2,1,2,1,3,3])",
        "minimumSeconds(nums = [2,1,3,3,2,3,3,3,1,3,4,2])",
        "minimumSeconds(nums = [3, 3, 2, 3])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 4, 3])",
        "minimumRightShifts(nums = [5, 3, 4])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,3,2])",
        "isGood(nums = [1,3,2])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9])",
        "isGood([1, 2, 3, 5])",
        "isGood(nums = [1,3,2,4,6])",
        "isGood(nums = [5, 4, 3, 2, 1, 6])",
        "isGood(nums = [4, 2, 5, 1, 6, 3])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 2])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [2,1,2,1,2,2], nums2 = [1,2,1,2,1,2])",
        "minOperations(nums1 = [2,10,6,4,8,1], nums2 = [3,7,1,6,8,1])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = '1011', k = 2)",
        "shortestBeautifulSubstring(s = \"001101\", k = 2)",
        "shortestBeautifulSubstring(s = '011101', k = 2)",
        "shortestBeautifulSubstring(s = '0111001', k = 3)",
        "shortestBeautifulSubstring(s = '011011', k = 3)",
        "shortestBeautifulSubstring(s = \"1011011011\", k = 3)",
        "shortestBeautifulSubstring(s = \"1001111011011\", k = 3)",
        "shortestBeautifulSubstring(s='10011100', k = 3)",
        "shortestBeautifulSubstring(s = '01111001011001', k = 2)",
        "shortestBeautifulSubstring(s=\"1011100011\", k = 2)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [2, 3, 2, 2])",
        "minGroupsForValidAssignment(nums = [3, 2, 1])",
        "minGroupsForValidAssignment(nums = [2,3,5])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 4, 4, 5])",
        "minGroupsForValidAssignment(nums = [5, 4, 3, 2])",
        "minGroupsForValidAssignment(nums = [2, 3, 1, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 3, 3, 4, 4, 5, 5, 5])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,4,4,5,5,5,5,6,6,6,7,7,8,8])"
    ],
    "sample_289": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"011110\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 2, 2], target = 5)",
        "lengthOfLongestSubsequence(nums = [5, 1], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 5, 7, 8, 5, 3, 4, 2, 1], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 8, 16, 32], target = 52)",
        "lengthOfLongestSubsequence(nums = [2,5,1,2,3,4], target = 15)",
        "lengthOfLongestSubsequence(nums = [4, 2, 3, 5, 1, 2, 4], target = 12)",
        "lengthOfLongestSubsequence(nums = [4, 1, 5, 8, 12, 3], target = 12)"
    ],
    "sample_259": [
        "minimumSum(nums = [3,1,2,4])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1,2,1,3])",
        "minimumSum(nums = [2,1,3,4])",
        "minimumSum(nums=[1,2,3])",
        "minimumSum(nums = [3,2,4,1])",
        "minimumSum(nums = [5, 4, 3, 2, 1])",
        "minimumSum(nums = [2,3,2,3,3,4])",
        "minimumSum(nums = [4,2,1,2,3,1,2,3,4])",
        "minimumSum(nums = [2,4,3,6,1,5,3,5])"
    ],
    "sample_398": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 1, k = 0)",
        "maxSum(nums = [1], m = 1, k = 1)",
        "maxSum(nums = [], m = 1, k = 3)",
        "maxSum(nums = [1,2,3], m = 3, k = 3)",
        "maxSum(nums = [0], m = 1, k = 0)",
        "maxSum(nums = [1,2,3,4,5,6], m = 4, k = 2)",
        "maxSum(nums = [1, 1, 1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums=[1,2,3,4,5,6,1,1,1,1], m=4, k=5)",
        "maxSum(nums = [4,2,3,5,4,2,4,6], m = 4, k = 3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"abc\")",
        "findMinimumOperations(s1=\"ba\", s2=\"ba\", s3=\"ba\")",
        "findMinimumOperations(s1 = \"ABCD\", s2 = \"ABCD\", s3 = \"ABCDABCD\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"xy\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"b\", s3 = \"aabb\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"dce\", s3 = \"abcdce\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"bca\", s3 = \"babca\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apple\", s3 = \"nacho\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xabc\", s3 = \"b\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minOperations(nums = [2, 2, 2, 4, 4, 4])",
        "minOperations(nums = [1, 3, 3, 3, 4])",
        "minOperations(nums = [1,1,2,3])",
        "minOperations(nums = [1,2,1,2,1,2])",
        "minOperations(nums = [2,2,1])",
        "minOperations(nums = [1, 5, 8, 13])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 3, 4])",
        "minOperations(nums = [1,1,1,2,2,3,4,5,5,5])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 4, 1])",
        "minimumCoins(prices = [1,2,4,1])",
        "minimumCoins(prices = [1,2,3,4,5,6])",
        "minimumCoins(prices = [1, 1, 4, 2, 1])",
        "minimumCoins(prices = [2, 7, 9, 3, 1])",
        "minimumCoins(prices = [3, 1, 2, 4])",
        "minimumCoins(prices = [1,2,4,3,1])",
        "minimumCoins(prices = [0, 0, 0, 1, 3, 3])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1,2,3,3])",
        "minimumSeconds(nums = [2,2,1,2,1])"
    ],
    "sample_448": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abbb\")",
        "minChanges(s=\"aaabbb\")",
        "minChanges(s = \"ababbb\")",
        "minChanges(s = \"bbbbbb\")",
        "minChanges(s = \"abbbbbbbbbb\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 5, 3, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 3, 8, 1, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 1, 8, 9, 3], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 8, 3, 9, 5], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 8, 1, 5, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [3, 1, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 5, 9, 3, 8], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 5, 9, 3, 8], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 9, 3, 5, 8], limit = 4)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [2, 3, 2])",
        "sumCounts(nums=[0,0,1,1,0])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [3, 5, 1, 2, 4])",
        "maximumTripletValue(nums = [2, 1, 2, 3])",
        "maximumTripletValue(nums = [1, -1, -1, 1])",
        "maximumTripletValue(nums = [3, 6, 1, 9])",
        "maximumTripletValue(nums = [5,3,2,6,4])",
        "maximumTripletValue(nums = [4, 1, 3, 5, 2, 7, 10, 4])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s=\"aeiou\", k=2)",
        "beautifulSubstrings(s = \"bba\", k = 1)",
        "beautifulSubstrings(s = \"baaa\", k = 2)",
        "beautifulSubstrings(s=\"bbaaac\", k=2)",
        "beautifulSubstrings(s = \"aebbbac\", k = 2)",
        "beautifulSubstrings(s = \"zbhnydxb\", k = 3)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [3, 1, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 3, 5, 7, 9], target = 10)",
        "countPairs(nums=[1,2,3,4,5], target=6)",
        "countPairs(nums = [1, 2, 4, 4], target = 8)",
        "countPairs(nums = [2,3,1,1,2,2,2], target = 4)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 12, limit = 5)",
        "distributeCandies(n = 3, limit = 10)",
        "distributeCandies(n=5, limit=3)",
        "distributeCandies(n = 11, limit = 4)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1, 2], nums2 = [2, 3])",
        "minOperations(nums1 = [1,2], nums2 = [2,3])",
        "minOperations(nums1 = [4, 3, 1, 4], nums2 = [1, 3, 7, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 2])",
        "minOperations(nums1 = [1,1,1,1,1], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [2, 10, 6, 4, 8, 11], nums2 = [3, 7, 18])",
        "minOperations(nums1 = [1, 1, 1, 1, 1, 1, 1], nums2 = [6])",
        "minOperations(nums1 = [1, 1, 1], nums2 = [1, 1, 3])",
        "minOperations(nums1 = [3, 5, 3, 2, 1], nums2 = [2, 2, 3, 4, 2])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 1, 2])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [2, 3, 3])",
        "minOperations(nums = [2, 4, 4])",
        "minOperations(nums = [2,2,2,2,3,3,3,4,4,4])",
        "minOperations(nums = [1, 3, 3, 1, 1, 3])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = '10110', k = 2)",
        "shortestBeautifulSubstring(s = \"000111\", k = 2)",
        "shortestBeautifulSubstring(s = \"01110\", k = 2)",
        "shortestBeautifulSubstring(s = \"001110\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110\", k = 2)",
        "shortestBeautifulSubstring(s = \"001100\", k = 2)",
        "shortestBeautifulSubstring(s = \"00111\", k = 2)",
        "shortestBeautifulSubstring(s = '01111', k = 2)",
        "shortestBeautifulSubstring(s = \"1000011\", k = 1)",
        "shortestBeautifulSubstring(s = \"1101111000111011\", k = 2)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1,2,1,2,1,2])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3,4,1])",
        "minimumSeconds(nums = [1, 2, 3, 4, 4, 3, 2, 1])",
        "minimumSeconds(nums = [3, 3, 3, 3])",
        "minimumSeconds(nums = [1, 2, 3, 3, 3, 3, 1])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "minOperations(nums = [1,5,5,5,4,4,4])",
        "minOperations(nums = [1, 3, 3, 1, 3])",
        "minOperations(nums = [4, 3, 3, 4])",
        "minOperations(nums = [4,4,4,4,5,5,5,5])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 4, 7])",
        "alternatingSubarray(nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [2, 1, 0, 3, 2, 1, 0, 4, 3, 2, 1, 0])",
        "alternatingSubarray(nums = [1, 3, 4, 5, 2])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9, 6, 8, 4, 2, 0])",
        "alternatingSubarray(nums = [1, 1, 1, 1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [3, 1, 2, 4, 5, 7])",
        "alternatingSubarray(nums = [1, 5, 3, 9, 2, 8, 7])",
        "alternatingSubarray(nums = [2, 7, 1, 15, 17])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [1])",
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals(nums = [3, 3])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"lc\",\"cl\",\"gg\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dc\", \"ll\", \"xx\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"dd\", \"cd\", \"dc\", \"cd\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"acz\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zabc\")",
        "canMakeSubsequence(str1 = \"bcdef\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"ade\", str2 = \"df\")",
        "canMakeSubsequence(str1 = \"apple\", str2 = \"baba\")",
        "canMakeSubsequence(str1 = \"opqrstuvwxy\", str2 = \"bcdefghijklmn\")",
        "canMakeSubsequence(str1 = \"zahx\", str2 = \"zab\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"baaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbbac\")",
        "longestSemiRepetitiveSubstring(s = \"baaananan\")",
        "longestSemiRepetitiveSubstring(s = \"bbaaaaaxxxxxx\")"
    ],
    "sample_399": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [0], m = 1, k = 1)",
        "maxSum(nums = [], m = 2, k = 3)",
        "maxSum(nums = [0, 0, 0, 0], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 1, 2, 3], m = 5, k = 4)",
        "maxSum(nums = [1,2,3,4,5,6,1], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,1,2], m = 2, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"na\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"peach\"], x = \"a\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"], x = \"the\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"pear\"], x = \"e\")",
        "findWordsContaining(words = [\"ab\", \"ba\", \"c\"], x = \"b\")",
        "findWordsContaining(words = [\"ab\", \"bcd\", \"xyz\"], x = \"b\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,1,3,3,3,2], moveFrom = [1,3,2], moveTo = [2,1,3])",
        "relocateMarbles(nums = [1,1,3,3,3,2], moveFrom = [1,3,2], moveTo = [2,1,3])",
        "relocateMarbles(nums = [1,1,3,3,3,4], moveFrom = [1,3,4], moveTo = [2,2,4])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [1, 1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,2,3,4], moveTo = [2,3,4,1])",
        "relocateMarbles(nums=[1,2,3], moveFrom=[1,2,3], moveTo=[2,3,1])",
        "relocateMarbles(nums = [1,1,3,3], moveFrom = [1,3,2,4], moveTo = [2,1,3,1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [2,1,3], moveTo = [2,1,3])",
        "relocateMarbles(nums = [2,4,5,1,2], moveFrom = [1,3,3,4,4], moveTo = [4,2,2,1,1])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [0, 0])",
        "maximumTripletValue(nums = [0,0,0,0])",
        "maximumTripletValue(nums = [2, 3, 5, 1, 4])",
        "maximumTripletValue(nums = [-3, -4])",
        "maximumTripletValue(nums = [-4, 3, 2, 5])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbabaa\")",
        "longestSemiRepetitiveSubstring(s = \"babababa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbaaccc\")",
        "longestSemiRepetitiveSubstring(s=\"aaaabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abaacbd\")",
        "longestSemiRepetitiveSubstring(s = \"aabbabaababbb\")",
        "longestSemiRepetitiveSubstring(s = \"abaaabbaaababbaaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abbbabbcbbbbb\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [])",
        "maximumNumberOfStringPairs(words = [])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ac\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"bc\", \"ab\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"dc\",\"cd\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ac\", \"dc\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"yh\", \"yh\", \"yh\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1, 1, 1], [1, 1, 1]])",
        "matrixSum(nums = [[1], [1]])",
        "matrixSum(nums = [[5]])",
        "matrixSum([[1,2],[3,4]])",
        "matrixSum(nums = [[1], [1], [1], [1]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"ab\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abs\", s2 = \"abs\", s3 = \"abs\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"bc\", s3 = \"de\")",
        "findMinimumOperations(s1=\"banana\",s2=\"bana\",s3=\"ban\")",
        "findMinimumOperations(s1 = \"pineapple\", s2 = \"peach\", s3 = \"apple\")",
        "findMinimumOperations(s1 = \"tut\", s2 = \"tuu\", s3 = \"tut\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abac\", s2 = \"abac\", s3 = \"abac\")",
        "findMinimumOperations(s1 = \"d\", s2 = \"d\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"zz\", s2 = \"bb\", s3 = \"cc\")",
        "findMinimumOperations(s1 = \"aabbaabbaa\", s2 = \"bbaa\", s3 = \"baab\")"
    ],
    "sample_324": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 1)",
        "isFascinating(1)",
        "isFascinating(2)",
        "isFascinating(n = 37)",
        "isFascinating(n = 22)",
        "isFascinating(n=267)",
        "isFascinating(n = 823)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 1, 1])",
        "minimumCoins(prices = [2,1,2])",
        "minimumCoins(prices = [2, 2, 1, 2])",
        "minimumCoins(prices=[1,1,2,3,5])",
        "minimumCoins(prices = [3, 2, 1, 1, 2, 1])",
        "minimumCoins(prices=[2, 1, 1, 2, 5, 1])",
        "minimumCoins(prices = [3,2,2,3,2,2,1])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 5)",
        "countPairs(nums = [1,3,2,5,4], target = 7)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9,10], target = 12)",
        "countPairs(nums=[1,2,3,4], target=10)",
        "countPairs(nums = [3, 1, 2, 2, 2, 1, 3], target = 5)",
        "countPairs(nums = [2,5,3,8,1,1], target = 4)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [2,3,4,4,4,5])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2,3,3,4,4,5])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3])",
        "minGroupsForValidAssignment(nums = [2,3,4,6,12])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,4,4])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=7)",
        "countPairs(nums = [2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 3, 6, 8, 10, 15], target = 15)",
        "countPairs(nums = [3, 1, 2, 5], target = 4)",
        "countPairs(nums = [1, 5, 7], target = 10)",
        "countPairs(nums = [0,1,2,3,4,5], target = 4)",
        "countPairs(nums = [5, 7, 3, 8, 10, 11], target = 10)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1,2,3], money = 3)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1,2,3,4], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 6)",
        "buyChoco(prices = [1,2,3], money = 6)",
        "buyChoco(prices = [1,2,2], money = 5)",
        "buyChoco(prices=[1, 2, 5], money=5)",
        "buyChoco(prices = [1,2,5,4,3], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"dc\",\"ll\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"dc\",\"ll\",\"xx\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"bb\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"bc\",\"cd\",\"cb\",\"dg\",\"gc\",\"gb\"])",
        "maximumNumberOfStringPairs(words = [\"b\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"j\", \"l\", \"ll\", \"jl\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's try, Mike.\")",
        "sortVowels(s = \"LeetcOde\")",
        "sortVowels(s = 'letcode')",
        "sortVowels(s = \"letCode\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts([1,2,1])",
        "sumCounts(nums = [0, 2, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 1, 2, 1, 2])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumCoins(prices = [1, 2, 3, 1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 5])",
        "minimumCoins(prices=[2, 3, 4, 1])",
        "minimumCoins(prices = [1, 2, 2, 3, 4, 4, 5, 5, 6])",
        "minimumCoins(prices = [1, 2, 4, 6, 1, 1, 1, 1])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 6, m = 2)"
    ],
    "sample_307": [
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details = [\"88\", \"73\", \"59\", \"67\", \"83\", \"58\", \"68\"])",
        "countSeniors(details = [\"1200\", \"21\", \"45\", \"6789\"])",
        "countSeniors(details = [\"cjs-96\",\"alc-83\",\"ab-12\"])",
        "countSeniors(details = [\"221001182\", \"221102279\", \"221203355\", \"221204441\"])",
        "countSeniors(details = [\"50, Jane, M\", \"64, John, M\", \"32, Susan, F\", \"48, Nathan, M\", \"68, Helen, F\"])",
        "countSeniors(details = [\"Khan,18:01:17\", \"Jones,17:15:04\", \"Nash,18:11:19\", \"Smith,18:12:00\"])",
        "countSeniors(details=[\"P422334234\", \"P432342344\", \"P893432344\", \"P989423492\", \"P433454545\"])",
        "countSeniors(details = [\"2077948521:A\", \"6850688336:B\", \"7132973845:C\", \"2077948521:D\", \"2077948521:E\"])"
    ],
    "sample_323": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 2)",
        "isFascinating(n = 372)",
        "isFascinating(n = 267)",
        "isFascinating(n = 123)",
        "isFascinating(n = 672)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"1011101\")",
        "minimumBeautifulSubstrings(s = \"011111\")",
        "minimumBeautifulSubstrings(s = \"1010111\")",
        "minimumBeautifulSubstrings(s = \"11101110011111011110000111000001111110101100010101001110110101000110110001101011101001100001011011011110010111111111010100000101111011101100010101110011110111001100101100011110111110010111011100111011111100011101\")",
        "minimumBeautifulSubstrings(s = \"0100100010010010001001011001000100010010110100011100010101101001010101000101101011001001000001000010010100010010101000100101000001000000100100100100101101110110011011101110010000100100100100101001000101010010100100010010000101001001000001111110100010010000010000101010010010001000000101101010101001010101110001111101001001111100100001000101101000100100101010110000101001001001000100100100010001000100100100010010010000001001000100100101101110110011011101110010000100100100100101001000101010010100100010010"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n=7, limit=3)",
        "distributeCandies(n=7, limit=2)",
        "distributeCandies(n = 13, limit = 5)"
    ],
    "sample_419": [
        "minOperations(nums = [3,2,20,1,1,3], k = 10)",
        "minOperations(nums = [3,1,3,4,3], k = 6)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4], k = 4)",
        "minOperations(nums = [1,2,3,4], k = 5)",
        "minOperations(nums = [4,3,1,1,3,3,2], k = 3)",
        "minOperations(nums = [1, 2, 3], k = 3)",
        "minOperations(nums = [1,2,3,4,1], k = 5)",
        "minOperations(nums = [1, 1, 3, 4, 5], k = 5)",
        "minOperations(nums = [2,3,5,8,13], k = 12)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1, 2, 2, 2])",
        "sumCounts(nums = [1, 1, 2, 3, 2])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"0\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"next\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"1\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"5\", \"6\", \"prev\", \"next\", \"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [3, 1, 4, 2, 5], k = 5)",
        "minOperations(nums = [4, 4, 1, 3, 1, 3, 2, 2, 5, 5, 1, 5, 2, 1, 2, 3, 5, 4], k = 2)",
        "minOperations(nums = [1, 1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [2, 1, 2, 4, 3], k = 3)",
        "minOperations(nums = [2, 3, 4, 1, 5, 7, 6, 8], k = 8)",
        "minOperations(nums = [3, 1, 2, 2, 3, 1, 2, 4, 1], k = 4)",
        "minOperations(nums = [1, 2, 4, 5, 6, 8, 9, 10, 12, 14, 15], k = 4)",
        "minOperations(nums = [5, 10, 25, 30, 35, 5], k = 5)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbc\")",
        "longestSemiRepetitiveSubstring(s = \"abbabb\")",
        "longestSemiRepetitiveSubstring(s = \"abbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbccdd\")",
        "longestSemiRepetitiveSubstring(s = \"xyyzxzzy\")",
        "longestSemiRepetitiveSubstring(s=\"aabbabbbbba\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [2, 2, 2])",
        "sumCounts(nums = [1, 1, 1, 2])",
        "sumCounts(nums = [1,2,1,3])",
        "sumCounts(nums = [0, 0, 1])",
        "sumCounts(nums = [1, 1, 3, 2, 2])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = '001101', k = 2)",
        "shortestBeautifulSubstring(s = \"011100\", k = 2)",
        "shortestBeautifulSubstring(s = '00011', k = 2)",
        "shortestBeautifulSubstring(s = \"1100\", k = 2)",
        "shortestBeautifulSubstring(s = '100110011', k = 2)",
        "shortestBeautifulSubstring(s = '10100001', k = 2)",
        "shortestBeautifulSubstring(s = \"11110000\", k = 2)",
        "shortestBeautifulSubstring(s='111100011101', k=2)",
        "shortestBeautifulSubstring(s = \"001101111111100000000\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"0\")",
        "minimumBeautifulSubstrings(s = \"1111101\")",
        "minimumBeautifulSubstrings(s = \"01011\")",
        "minimumBeautifulSubstrings(s = \"010110101\")",
        "minimumBeautifulSubstrings(s = \"10000101101\")",
        "minimumBeautifulSubstrings(s = \"11001101010111100010101100101011110101010101101011010110101101010101011010110101101010101010110101101011010101010110101101011010110101010101101011010110101010101101011010110101101010101011010110101101011010101010110101101011010110101010101101011010110101101010101011010110101101011010101010110101101011010101010110101101011010110101010101101011010110101101010101011010110101101011010101010110101101011010110101010101101011010110101101010101011010110101101011010101010110101101011010110101010"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 2, y = 3, z = 3)",
        "longestString(x = 2, y = 3, z = 0)",
        "longestString(x = 3, y = 5, z = 7)",
        "longestString(x = 2, y = 2, z = 4)",
        "longestString(x = 3, y = 6, z = 5)"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1,0,0], [0,1,0], [0,0,1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1, 0], [0, 0, 1, 0], [0, 1, 1, 0]])",
        "findChampion(grid = [[0,1,0,1], [0,0,1,1], [0,0,0,1], [1,0,0,0]])",
        "findChampion(grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[0,0,0,1]])",
        "findChampion(grid = [\n    [0, 1, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1],\n    [0, 0, 1, 0, 0]\n])",
        "findChampion(grid = [[0, 0, 1, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [0, 0, 0, 1, 0]])",
        "findChampion(grid = [[1, 1, 1, 0, 1], [0, 1, 0, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 0, 0], [0, 0, 0, 1, 1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 0)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 4)",
        "beautifulSubstrings(s = \"\", k = 3)",
        "beautifulSubstrings(s=\"aeiou\", k=2)",
        "beautifulSubstrings(s = \"aa\", k = 1)",
        "beautifulSubstrings(s = \"az\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 10)",
        "beautifulSubstrings(s = \"uouoe\", k = 10)"
    ],
    "sample_304": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors([\"John is 29 years old\", \"Jane is 66 years old\", \"Leo is 32 years old\", \"Fang is 58 years old\"])",
        "countSeniors(details = [\"111111111110\", \"101010101010\"])",
        "countSeniors(details = [\"h432 Hi 23\", \"b177 Er 87\", \"o076 He 90\"])",
        "countSeniors(details = [\"T012345678A78\",\"T012345678A70\",\"T012345678A65\",\"T012345678A80\",\"T012345678A60\"])",
        "countSeniors(details = [\"Kh@n,65\", \"Dh@n,15\", \"Sh@n,25\", \"Vh@n,85\"])",
        "countSeniors(details = [\"Jason00629391900F\", \"Connor03200010274M\", \"Sarah019091988F\", \"Gordon0123809232M\"])",
        "countSeniors(details = [\"2334212345\", \"1803970704\", \"3244123456\"])",
        "countSeniors([\"991011234567:04041970-76543210:28\", \"811103123456:04041981-12345678:53\", \"670312345432:04041967-45673210:42\"])",
        "countSeniors([\"xq@gmail.com\",\"99\",\"27\",\"Male\",\"9988888888\",\"Bangalore\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums=[1, 2, 3])",
        "maximumTripletValue(nums = [1, -2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, -1, 2, 0])",
        "maximumTripletValue(nums = [-2, 4, 2, 6, 9])",
        "maximumTripletValue(nums = [4, 2, 3, 1, 0, 1, 2, 3, 4, 1])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"0\")",
        "minimumBeautifulSubstrings(s = \"10111\")",
        "minimumBeautifulSubstrings(s = \"10111\")",
        "minimumBeautifulSubstrings(s = \"10110101\")",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"11111111111111111111111111111111\")",
        "minimumBeautifulSubstrings(s = \"0101011\")",
        "minimumBeautifulSubstrings(s = \"0100100001010101010110001111110001\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 0, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [3, 1, 5, 4, 2, 4, 8])",
        "maxSubarrays(nums = [2,3,1,1,4])",
        "maxSubarrays(nums = [2, 2, 1, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1, 1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [0, 0, 1, 2, 0, 3])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [3, 1, 4, 5, 1, 1, 1, 2, 1])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 1, 1], b = [2, 2, 2])",
        "minOperations(a = [1, 2, 3], b = [1, 2, 3])",
        "minOperations(a=[1, 2, 3], b=[3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [2, 4, 5])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [2, 3, 4, 5, 6])",
        "minOperations(a = [1,2,3,4,5,6,7], b = [7,6,5,4,3,2,1])",
        "minOperations(a=[1,3,5], b=[5,2,1])",
        "minOperations(a = [3, 2, 5, 1], b = [1, 4, 5, 3])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"aaa\", \"c\", \"aba\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"aaa\",\"c\",\"aba\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\"])",
        "minimizeConcatenatedLength([\"a\", \"bb\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"aaa\", \"bb\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ba\",\"na\",\"n\"])",
        "minimizeConcatenatedLength([\"aaa\", \"aba\", \"aca\"])",
        "minimizeConcatenatedLength([\"aa\", \"b\", \"aab\", \"bb\", \"b\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"YmlPH\")",
        "sortVowels(s=\"lYmpH\")",
        "sortVowels(s = 'Hympl')",
        "sortVowels(s = \"HampLy\")",
        "sortVowels(s = \"YmLph\")",
        "sortVowels(s = 'lPhMy')"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [2, 1, 3])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [1, 2, 2, 4])",
        "sumCounts(nums = [1,2,1,3,4])",
        "sumCounts(nums = [3, 1, 2, 2, 3])",
        "sumCounts(nums = [3,2,5])",
        "sumCounts(nums = [1, 1, 2, 2, 1, 2, 1, 2])"
    ],
    "sample_256": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [1,4,3])",
        "minimumSum(nums = [3, 3, 2, 4])",
        "minimumSum(nums = [2, 5, 1, 4, 3])",
        "minimumSum(nums = [1, 2, 5])",
        "minimumSum(nums = [3,2,1,4,0,6])",
        "minimumSum(nums = [4,1,1,2,3,4])",
        "minimumSum(nums = [5,3,2,4,1])",
        "minimumSum(nums = [3, 2, 4, 4, 5, 6, 1])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0,1,0],[1,0,0],[0,0,1]])",
        "findChampion(grid = [[0,1,0], [0,0,0], [0,0,1]])",
        "findChampion(grid = [ [0, 1, 0], [0, 0, 1], [1, 0, 0] ])",
        "findChampion(grid = [[0, 1, 0],[1, 0, 0],[0, 0, 0]])",
        "findChampion(grid=[[0, 1, 0], [1, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0, 0], [1, 1, 1, 1], [0, 0, 0, 1], [1, 0, 0, 1]])"
    ],
    "sample_372": [
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = 'Leetcode')",
        "sortVowels(s = 'Leetcode')",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Let's try, Mike.\")",
        "sortVowels(s = \"EduCatiON\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"101101\")",
        "minimumSteps(s = \"11100\")",
        "minimumSteps(s = \"001001\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"001100\")",
        "minimumSteps(s = \"110111\")",
        "minimumSteps(s = \"10101101\")",
        "minimumSteps(s = \"0001110001\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums=[1, 2, 3])",
        "minimumRightShifts(nums = [2, 5, 7, 1])",
        "minimumRightShifts(nums = [7, 1, 2, 3])",
        "minimumRightShifts(nums = [6, 6, 6, 6, 6])",
        "minimumRightShifts(nums = [2, 5, 8, 9, 1, 2])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [1,1])",
        "minOperations(nums = [6, 6, 6, 6])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [4, 5, 6, 7, 8])",
        "minOperations(nums = [3,3,3,3,3,3,3,3,3,3,3])",
        "minOperations(nums = [4, 4, 5, 5, 6, 6, 7, 7])"
    ],
    "sample_367": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = 'Hympl')",
        "sortVowels(s = 'lOmpH')",
        "sortVowels(s = \"LeMOn\")"
    ],
    "sample_273": [
        "findChampion(grid = [[0,1],[1,0]])",
        "findChampion(grid = [[0, 1], [0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[1,0],[0,1]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0],\n                            [0, 1, 1],\n                            [1, 1, 0]])",
        "findChampion(grid = [\n    [0, 1, 0],\n    [1, 1, 0],\n    [1, 0, 1]\n])",
        "findChampion(grid = [ [0, 1, 0], [1, 1, 0], [1, 1, 0] ])"
    ],
    "sample_267": [
        "minSum(nums1 = [0], nums2 = [1])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [2, 4, 6], nums2 = [1, 3, 5])",
        "minSum(nums1 = [0, 1, 2, 3, 4, 5], nums2 = [0, 1, 2, 3, 4, 5])",
        "minSum(nums1 = [1,2,1], nums2 = [0,0,3])",
        "minSum(nums1 = [2, 1, 2, 1], nums2 = [3, 4])",
        "minSum(nums1 = [1,2,3,4], nums2 = [0,3,1,4])",
        "minSum(nums1 = [-1, 1, -3], nums2 = [-1, 2, 3])",
        "minSum(nums1 = [2, -1, 1, 2], nums2 = [-1, -1, -1, -1, -1])",
        "minSum(nums1=[1, 3, 0, 4], nums2=[1, 5, 2, 5])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1,2,3,4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [3, 1, 2, 4, 5], k = 4)",
        "minOperations(nums = [4, 2, 3, 1, 1], k = 5)",
        "minOperations(nums = [5,1,4,2,3], k = 6)",
        "minOperations(nums = [1, 1, 2, 1, 2], k = 2)",
        "minOperations(nums = [1, 2, 4, 8, 5], k = 15)",
        "minOperations(nums = [1, 3, 5, 2, 3, 3, 2], k = 5)",
        "minOperations(nums = [1, 5, 2, 2, 2, 4, 3, 2, 3], k = 6)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2, 4], moveTo = [3, 1])",
        "relocateMarbles(nums = [2, 1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [2,3,4], moveTo = [3,4,5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [5, 4])",
        "relocateMarbles(nums = [3, 5, 6], moveFrom = [6], moveTo = [2])",
        "relocateMarbles(nums = [3, 1, 5], moveFrom = [3, 5], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 1, 3], moveFrom = [1, 2], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 3, 4], moveTo = [3, 1, 5])"
    ],
    "sample_402": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 2, k = 0)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1,2,3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 1)",
        "maxSum(nums = [0,0,0], m = 1, k = 1)",
        "maxSum(nums = [1, 1, 1, 2, 2, 2], m = 3, k = 2)",
        "maxSum(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], m = 1, k = 0)",
        "maxSum(nums = [1, 3, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], m = 3, k = 4)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abcdefg\", s2 = \"afg\")",
        "canMakeSubsequence(s1 = \"abz\", s2 = \"abza\")",
        "canMakeSubsequence(s1 = \"abcdefg\", s2 = \"ae\")",
        "canMakeSubsequence(s1 = \"xyz\", s2 = \"zza\")",
        "canMakeSubsequence(s1 = \"aaa\", s2 = \"aba\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"axbcd\")",
        "canMakeSubsequence(s1=\"jabz\", s2=\"jaz\")",
        "canMakeSubsequence(s1 = \"qet\", s2 = \"tqe\")",
        "canMakeSubsequence(s1 = \"zaazzzz\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"abcz\", s2 = \"zfabzc\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 0])",
        "minSum(nums1 = [1, 2], nums2 = [0, 0])",
        "minSum(nums1 = [0, 0], nums2 = [1, 2])",
        "minSum(nums1 = [1, 2], nums2 = [4, 0])",
        "minSum(nums1 = [1], nums2 = [1, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 4, 0])",
        "minSum(nums1 = [1, 2], nums2 = [1, 0, 3])",
        "minSum(nums1 = [1, 0, 0], nums2 = [0, 0, 1])",
        "minSum(nums1 = [2, 0], nums2 = [3, 1, 0])",
        "minSum(nums1 = [1, 2, 0, 1, 1], nums2 = [2, 2, 2, 0, 0])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers([\"1\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['2', '1', 'prev', 'prev', '3', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"one\", \"prev\", \"two\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"one\", \"three\", \"seven\", \"two\", \"prev\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [2, 3, 1])",
        "isGood([1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [1, 4, 3, 2])"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9])",
        "minOperations(nums = [1,2,3,4,5,6,7,8])",
        "minOperations(nums = [3, 1, 3, 2, 4, 3])",
        "minOperations(nums = [4,4,4,4,4])",
        "minOperations(nums = [1,1,2,2,2,3,3,3,4,4,4,4])",
        "minOperations(nums = [3,3,3,3])",
        "minOperations(nums = [3,3,3,3,3,3,3])",
        "minOperations(nums = [4,3,3,4])",
        "minOperations(nums = [2, 2, 3, 2, 2])",
        "minOperations(nums = [1,2,2,3,3,3,4,4,4,5])"
    ],
    "sample_451": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"aaabbbcccd\")",
        "minChanges(s=\"abbb\")",
        "minChanges(s = \"bbbaabb\")",
        "minChanges(s = \"baaabbb\")",
        "minChanges(s = \"xxxyxxx\")",
        "minChanges(s=\"abbabab\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 12, limit = 1)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minSum(nums1 = [1,0], nums2 = [2,0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 4, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 1, 2])",
        "minSum(nums1 = [2,0], nums2 = [1,2])",
        "minSum(nums1 = [0,2,1], nums2 = [1,0,1])",
        "minSum(nums1 = [5,6,6], nums2 = [1,2,1])",
        "minSum(nums1 = [1,2,3,0,2], nums2 = [1,0,2,0,1])",
        "minSum(nums1=[2,3,3], nums2=[4,4,10])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [0, 1, 2, 3])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [2, 1, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 5, 1, 4, 3])",
        "minimumRightShifts(nums = [4, 5, 6, 1, 2, 3])",
        "minimumRightShifts(nums = [7, 4, 8, 9, 10])"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [2, 7, 11, 15], t = 10)",
        "countPairs(nums = [2, 7, 11, 15], t = 20)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums=[1, 2, 3], t=4)",
        "countPairs(nums = [2,3,4,5,6], t = 7)",
        "countPairs(nums = [2, 4, 6, 8, 10], t = 12)",
        "countPairs(nums = [3, 1, 5, 2, 7], t = 8)",
        "countPairs(nums = [3,1,3,4,3], t = 6)",
        "countPairs(nums=[1, 3, 6, 2, 5], t=7)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push 1\", \"push 2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\", \"3\"])",
        "lastVisitedIntegers(words = [\"push 2\", \"push 1\", \"pop\", \"push 4\"])",
        "lastVisitedIntegers(words = [\"push\", \"pop\", \"push\", \"push\", \"push\", \"pop\", \"pop\"])",
        "lastVisitedIntegers([\"push\", \"3\", \"push\", \"4\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words=[\"push\", \"3\", \"push\", \"5\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words=[\"p\", \"p\", \"5\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\",\"p\",\"1\",\"3\",\"4\",\"p\"])",
        "lastVisitedIntegers([\"push 5\", \"push 1\", \"pop\", \"pop\", \"push 3\", \"push 7\", \"pop\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abz\", str2 = \"zab\")",
        "canMakeSubsequence(str1 = \"axyz\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"zzzzz\", str2 = \"zzzzz\")",
        "canMakeSubsequence(str1 = \"aez\", str2 = \"aaz\")",
        "canMakeSubsequence(str1 = \"abzxy\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"wxyz\", str2 = \"cba\")",
        "canMakeSubsequence(str1 = \"xyza\", str2 = \"yxza\")",
        "canMakeSubsequence(str1 = \"zzzzaaazz\", str2 = \"zza\")",
        "canMakeSubsequence(str1 = \"aaabbbzzzz\", str2 = \"zbz\")",
        "canMakeSubsequence(str1 = \"xxxzyxz\", str2 = \"axay\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1,2,3,4,5,6], nums2 = [1,2,3,4,5,6])",
        "minSum(nums1 = [1,2,3,0,3], nums2 = [5,3,4,0,7])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [2,3,4,5,6])",
        "minSum(nums1 = [3, 1, 2], nums2 = [3, 2, 1])",
        "minSum(nums1 = [3, 2, 1, 4, 5], nums2 = [4, 3, 1, 2, 1])",
        "minSum(nums1=[1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [2,2,1,0,0], nums2 = [5,5,3,0,0])",
        "minSum(nums1 = [3, 3, 5, 0], nums2 = [5, 4, 0, 1])",
        "minSum(nums1=[4,2,1,0,0], nums2=[3,0,1,0,0])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]], k = 10)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [0, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [2, 2], [3, 3], [5, 5], [6, 6]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [7, 10], [11, 12]], k = 2)",
        "countPairs(coordinates=[[-1, -1], [1, -1], [-1, 1], [1, 1], [0, 0]], k=1)",
        "countPairs(coordinates = [(2,3),(3,4),(5,6),(7,8)], k = 2)",
        "countPairs(coordinates = [[1, 0], [1, 1], [1, 2], [2, 1], [1, 0], [1, 1], [1, 2], [2, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [(2, 1), (1, 1), (3, 1), (1, 2), (2, 2), (2, 0), (3, 0), (4, 1), (4, 2), (4, 0)], k = 1)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"cc\",\"ll\",\"xx\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yx\", \"z\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"dd\", \"bb\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"mq\", \"pq\", \"pm\", \"qm\", \"mm\", \"mm\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [2, 3, -2, 4])",
        "maxStrength(nums = [2, 3, -2, 4])",
        "maxStrength(nums = [-1,-2,-3])",
        "maxStrength(nums = [2, 3, 4, -5])",
        "maxStrength(nums = [3, -1, 5])",
        "maxStrength(nums = [3, -1, 4, -1, 5])",
        "maxStrength(nums = [3, -2, -3, 1, 2])",
        "maxStrength(nums = [-6, -10, -1])",
        "maxStrength(nums = [2,-1,-2,3,-1])",
        "maxStrength(nums = [3,-2,-2,1,0,2])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices = [1, 2, 1, 3])",
        "minimumCoins(prices = [1, 1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices = [1, 5, 3, 2, 4])",
        "minimumCoins(prices = [1, 3, 2, 6])",
        "minimumCoins(prices=[1,2,1,2,1])",
        "minimumCoins(prices = [1, 2, 3, 5, 2, 10])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 1])",
        "minLengthAfterRemovals(nums = [2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [2,2,2,3,3,3,4,4,4])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1, 1, 1], money = 1)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 5)",
        "buyChoco(prices = [1, 2], money = 2)",
        "buyChoco(prices = [], money = 5)",
        "buyChoco(prices = [1, 2], money = 5)",
        "buyChoco(prices = [1, 1, 1], money = 0)",
        "buyChoco(prices = [1, 2], money = 10)",
        "buyChoco(prices = [2, 3, 4, 5], money = 2)",
        "buyChoco(prices = [0, 1, 2, 3], money = 3)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"next\", \"1\", \"prev\", \"prev\", \"next\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2, 1])",
        "sumCounts(nums=[0, 1])",
        "sumCounts([3, 2, 1, 2, 3])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [6, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 8, 9], moveFrom = [8], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [5, 6], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 8], moveFrom = [5, 6], moveTo = [9, 9])",
        "relocateMarbles(nums = [6, 8, 9], moveFrom = [9], moveTo = [5])",
        "relocateMarbles(nums = [1, 2, 5, 6, 7, 8, 9], moveFrom = [2, 7], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9, 10], moveFrom = [5, 6, 8], moveTo = [10, 9, 10])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [5, 4, 3], moveTo = [9, 8, 6])",
        "relocateMarbles(nums = [2, 3, 5, 8, 9], moveFrom = [2, 3, 9], moveTo = [5, 5, 6])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bbc\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"e\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"aab\")",
        "canMakeSubsequence(str1 = \"zy\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"acde\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abcdez\", str2 = \"ax\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"afe\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"cbd\")",
        "canMakeSubsequence(str1 = \"zyx\", str2 = \"xay\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"fish\"], x = \"at\")",
        "findWordsContaining(words = [\"orange\", \"banana\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"am\", \"banana\", \"an\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"there\", \"greetings\"], x = \"e\")",
        "findWordsContaining(words = [\"bamboo\", \"cat\", \"dog\", \"elephant\"], x = \"a\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3, 4]])",
        "matrixSum(nums = [[2, 4, 5], [1, 3, 1]])",
        "matrixSum(nums = [[2, 2, 2], [1, 1, 1], [0, 0, 1]])",
        "matrixSum(nums = [[1,2,3,4,5],[5,1,1,1,5],[5,1,5,1,5],[5,1,1,1,5],[5,5,5,5,5]])",
        "matrixSum(nums = [[2, 3, 1], [1, 5, 4], [5, 1, 2]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 2)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2], money = 0)",
        "buyChoco(a = [2, 1], money = 1)",
        "buyChoco(a = [1, 2, 3, 4], money = 5)",
        "buyChoco(a = [1,2], money = 2)",
        "buyChoco(a = [3, 1], money = 3)",
        "buyChoco(a=[1,2,3], money=5)",
        "buyChoco(a=[2,1], money=3)",
        "buyChoco(a = [5, 1, 1, 1, 1, 1], money = 6)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2, 3, 4])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 3, 3, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 4, 4, 5])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4, 1, 3, 2])",
        "minimumRightShifts(nums = [4, 3, 2, 1, 0])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 6, 5])",
        "minimumRightShifts(nums = [3, 7, 4, 6, 5, 1, 2])",
        "minimumRightShifts(nums = [4, 6, 7, 1, 2, 3])",
        "minimumRightShifts(nums = [5, 7, 2, 4, 8])",
        "minimumRightShifts(nums = [3, 4, 2, 6, 5, 9, 1])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 5, 4])",
        "maxStrength(nums = [1, 2, 5, 4])",
        "maxStrength(nums = [2, 3, 1, 4])",
        "maxStrength(nums = [2, 4, 5, 1])",
        "maxStrength(nums = [10, 2, 5, 4])",
        "maxStrength(nums = [2, 1, 3, 4, 1])",
        "maxStrength(nums = [-5, -1, 5])",
        "maxStrength(nums = [-1, -2, 0, 1, 2, 3, 4])",
        "maxStrength(nums = [-6, 5, 4, 3])"
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n=6, limit=2)",
        "distributeCandies(n=5, limit=1)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 1, 2, 1, 2])",
        "minLengthAfterRemovals(nums = [4,3,3,3,3,3,3])",
        "minLengthAfterRemovals(nums = [4, 2, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1,2,3,3,4,4,4,5,5,5,5,5,5])",
        "minLengthAfterRemovals(nums = [1, 3, 1, 2, 3, 4, 3])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\"], x = \"mq\")",
        "findWordsContaining(words = [\"a\", \"b\", \"abc\"], x = \"a\")",
        "findWordsContaining(words = [\"ab\", \"abc\", \"ac\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"strawberry\", \"peach\"], x = \"a\")",
        "findWordsContaining(words = [\"abcd\", \"abcde\", \"ab\", \"xyz\"], x = \"ab\")",
        "findWordsContaining(words = [\"grapes\", \"oranges\", \"apples\", \"pears\"], x = \"ap\")",
        "findWordsContaining(words = [\"banana\", \"zebra\", \"apple\", \"carrot\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"test\", \"tres\", \"testing\", \"testit\"], x = \"t\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0], [1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0,0,0],[1,0,0],[0,0,0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 1], [1, 0, 1]])",
        "findChampion(grid = [\n    [0, 1, 1, 1],\n    [0, 0, 0, 0],\n    [1, 0, 0, 0],\n    [1, 1, 1, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays(nums = [1, 2, 4, 8, 16])",
        "maxSubarrays(nums = [4, 3, 2, 1])",
        "maxSubarrays(nums = [3, 1, 5, 2, 8])",
        "maxSubarrays(nums = [1,2,3,5])",
        "maxSubarrays(nums = [1, 1, 2, 3, 5])",
        "maxSubarrays(nums = [1, 10, 20])",
        "maxSubarrays(nums = [0, 3, 5, 7, 12, 15])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aabcb\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaiooo\", k = 2)",
        "beautifulSubstrings(s = \"bbaa\", k = 2)",
        "beautifulSubstrings(s = \"aaeiouu\", k = 4)",
        "beautifulSubstrings(s = \"cuaieuouac\", k = 3)",
        "beautifulSubstrings(s = \"xyyzyz\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1,2,3,4])",
        "minimumSeconds(nums = [1, 2, 3, 1])",
        "minimumSeconds(nums = [1, 2, 2, 1])",
        "minimumSeconds(nums = [1, 3, 2, 3, 3, 2, 2, 1])",
        "minimumSeconds(nums = [3, 1])",
        "minimumSeconds(nums = [1, 3, 1, 1, 3])",
        "minimumSeconds(nums = [3,4,4,3,5,2,3,5,3])"
    ],
    "sample_327": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n=192)",
        "isFascinating(100)",
        "isFascinating(n = 456789)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = -1)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [3,7,4,6,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [3, 5, 2, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 4, 2, 6, 5, 4, 3], target = 12)",
        "lengthOfLongestSubsequence(nums = [4, 3, 1, 1, 5, 2, 8], target = 8)",
        "lengthOfLongestSubsequence(nums = [3,4,10,8,1,3,3,4,6,7], target = 12)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1], [1], [1]])",
        "matrixSum([[1]])",
        "matrixSum([[2, 1, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[0,0,0],[1,1,1],[1,1,1]])",
        "matrixSum(nums=[[2,3,4],[1,1,2],[2,1,1]])"
    ],
    "sample_326": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 2)",
        "isFascinating(n = 32679)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [1, 1, 0]])",
        "findChampion(grid=[[0,1,1],[1,0,1],[1,1,0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid=[[1,0,1],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 0]])",
        "findChampion(grid=[[0, 0, 0], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid=[[0,1,1,1,1], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0]])",
        "findChampion(grid=[\n    [1, 1, 0],\n    [1, 1, 0],\n    [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0],\n[0, 1, 0, 0, 0, 0],\n[0, 0, 1, 0, 0, 0],\n[0, 0, 0, 1, 0, 0],\n[0, 0, 0, 0, 1, 0],\n[0, 0, 0, 0, 0, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [4, 3, 2, 5])",
        "minimumSum(nums = [1,3,2,5,3])",
        "minimumSum(nums = [3, 4, 6, 7, 5])",
        "minimumSum(nums = [4,5,3,2,6])",
        "minimumSum(nums=[2, 5, 7, 11, 15, 19])"
    ],
    "sample_450": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"ababba\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"abbbb\")",
        "minChanges(s = \"abbaa\")",
        "minChanges(s = \"abcdefg\")",
        "minChanges(s = \"abbbcbb\")",
        "minChanges(s = \"babbbbab\")",
        "minChanges(s = \"xbbx\")",
        "minChanges(s = \"aabababbbbbbbbbbbbbbbbbbbb\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"0101\", s2 = \"1010\", x = 1)",
        "minOperations(s1 = \"0000\", s2 = \"1111\", x = 2)",
        "minOperations(s1 = \"0011\", s2 = \"1010\", x = 2)",
        "minOperations(s1 = \"11001\", s2 = \"10101\", x = 2)",
        "minOperations(s1 = \"00\", s2 = \"11\", x = 5)",
        "minOperations(s1 = \"101\", s2 = \"000\", x = 4)",
        "minOperations(s1 = \"01001\", s2 = \"01001\", x = 1)",
        "minOperations(s1 = \"011011\", s2 = \"111000\", x = 2)",
        "minOperations(s1 = \"1010101010\", s2 = \"0101010101\", x = 3)",
        "minOperations(s1 = \"10110000\", s2 = \"11110011\", x = 8)"
    ],
    "sample_342": [
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 2, y = 4, z = 3)",
        "longestString(x = 1, y = 1, z = 3)",
        "longestString(x = 4, y = 3, z = 2)",
        "longestString(x = 3, y = 1, z = 2)",
        "longestString(x = 3, y = 4, z = 3)",
        "longestString(x = 4, y = 2, z = 3)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1,2,3])",
        "maxSubarrays(nums = [100, 100, 100, 100, 100, 100])",
        "maxSubarrays(nums = [25, 2, 3, 57, 38, 41])",
        "maxSubarrays(nums=[1, 3, 2])",
        "maxSubarrays(nums = [2, 1, 3, 1, 2, 1])",
        "maxSubarrays(nums = [4, 1, 2, 3, 3])",
        "maxSubarrays(nums = [2, 1, 3, 2, 5, 5])",
        "maxSubarrays(nums = [7, 6, 4, 9, 10, 2, 3, 1, 5])",
        "maxSubarrays(nums = [2, 6, 2, 3, 4, 16, 7, 1, 7, 26])",
        "maxSubarrays(nums = [202, 199, 204, 189, 204, 211, 187, 201, 210, 186, 204, 205, 196, 190, 205, 208, 200, 194, 206, 208, 187])"
    ],
    "sample_306": [
        "countSeniors(details = [\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"])",
        "countSeniors(details=[\"7868190130M7522\", \"5303914400F9211\", \"9273338290F4010\"])",
        "countSeniors(details = [\"Tina-F-74\", \"Peter-M-57\", \"Martha-F-77\"])",
        "countSeniors(details = [\"Mike is 50\", \"Joe is 60\", \"Ellie is 65\", \"Sarah is 45\", \"Mark is 70\"])",
        "countSeniors(details = [\"Janet Jackson: 58\", \"Fred Astaire: 40\", \"Diana Ross: 75\", \"Ben Affleck: 45\"])",
        "countSeniors(details = [\"mq 21 2\", \"px 61 3\", \"zy 51 1\"])",
        "countSeniors(details = [\"99999999911234 Tom Hanks\", \"99999999911235 Leonardo DiCaprio\", \"99999999911236 Quentin Tarantino\", \"99999999911237 Brad Pitt\", \"99999999911238 George Clooney\"])",
        "countSeniors(details = [\"0801234567-99\", \"0801234567-60\", \"0801234567-04\", \"0801234567-02\"])",
        "countSeniors(details = [\"3113508347\", \"5680173810\", \"3113105076\", \"3114729003\", \"4114205044\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [13, 7, 2, 8, 3])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 3, 8, 48, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1,2,3,4])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0])",
        "maxSubarrays(nums = [4, 2, 3])",
        "maxSubarrays(nums = [0, 1, 1, 0])",
        "maxSubarrays(nums = [0, 0, 1, 1, 1, 0, 1])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [6, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7], moveFrom = [6, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 7, 9], moveFrom = [5, 7], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 7], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8, 9], moveTo = [5, 6, 8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 7], moveTo = [9, 6])",
        "relocateMarbles(nums=[5, 7, 9], moveFrom=[5, 7], moveTo=[8, 9])",
        "relocateMarbles(nums=[1, 3, 6, 8], moveFrom=[1, 6], moveTo=[5, 9])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1=\"abc\", s2=\"def\", s3=\"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"cdef\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abcc\")",
        "findMinimumOperations(s1 = \"111\", s2 = \"111\", s3 = \"111\")",
        "findMinimumOperations(s1 = \"bca\", s2 = \"aac\", s3 = \"cca\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [1])",
        "minLengthAfterRemovals(nums = [4,3,1,1,3,3,2,2])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7])",
        "minLengthAfterRemovals(nums = [0,0,0])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2])",
        "minLengthAfterRemovals(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "minLengthAfterRemovals(nums = [2,3,4,4])",
        "minLengthAfterRemovals(nums = [4,2,3,4,5,1,3,2,3])"
    ]
}