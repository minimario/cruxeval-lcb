{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_310": [
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[0, 1]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=9)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [5, 5, 7], money = 10)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3], l = 2, r = 5)"
    ],
    "sample_322": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 105)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 3, 3, 3, 2, 2, 2])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 4])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 1)"
    ],
    "sample_340": [
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 1)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")"
    ],
    "sample_361": [
        "isGood(a = [0, 1, 2, 3, 3, 4])",
        "isGood(a = [0, 1, 2, 3, 3, 4])",
        "isGood(a = [0, 1, 2, 3, 3, 4])",
        "isGood(a = [0, 1, 2, 3, 3, 4])",
        "isGood(a = [0, 1, 2, 3, 3, 4])",
        "isGood(a = [0, 1, 2, 3, 4, 4])",
        "isGood(a = [0, 1, 2, 3, 3])",
        "isGood(a = [0, 1, 2, 3, 3])",
        "isGood(a = [0, 1, 2, 3, 3])",
        "isGood(a = [0, 1, 2, 3, 2, 1])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101\", k = 2)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_294": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [10, 11])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3, 4, 7], moveTo = [5, 6, 8, 9, 10])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 3, 4, 7], moveTo = [5, 6, 8, 9])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Alice,35\", \"Bob,45\", \"Charlie,70\", \"David,22\"])",
        "countSeniors(details = [\"John,35\", \"Anna,55\", \"Peter,67\", \"Linda,45\"])",
        "countSeniors(details = [\"John,35\", \"Anna,55\", \"Peter,70\", \"Linda,45\"])",
        "countSeniors(details = [\"John,35\", \"Anna,45\", \"Peter,65\", \"Linda,25\"])",
        "countSeniors(details = [\"John,45\", \"Anna,35\", \"Peter,70\", \"Linda,68\"])",
        "countSeniors(details = [\"John,45\", \"Anna,35\", \"Peter,70\", \"Linda,65\"])",
        "countSeniors(details = [\"Alice,45\", \"Bob,65\", \"Charlie,35\", \"David,75\"])",
        "countSeniors(details = [\"Alice,45\", \"Bob,65\", \"Charlie,35\"])",
        "countSeniors(details = [\"Alice,45\", \"Bob,62\", \"Charlie,22\", \"David,70\"])",
        "countSeniors(details = [\"Alice_25_F\", \"Bob_55_M\", \"Charlie_18_M\", \"David_62_M\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [2, 4, 2, 5, 3, 4, 1])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"b\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = '1011101', k = 3)",
        "shortestBeautifulSubstring(s = '1011101', k = 3)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '01101110', k = 3)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 3)",
        "shortestBeautifulSubstring(s = '10101', k = 2)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 3)",
        "shortestBeautifulSubstring(s = '1010101', k = 2)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bca\", \"cab\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"de\",\"f\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"bc\",\"cd\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 1])"
    ],
    "sample_302": [
        "countSeniors(details = [\"John,25,Engineer\", \"Alice,65,Doctor\", \"Bob,35,Teacher\"])",
        "countSeniors(details = [\"John,25,Engineer\", \"Alice,65,Doctor\", \"Bob,35,Teacher\"])",
        "countSeniors(details = [\"John,25,Engineer\", \"Alice,65,Doctor\", \"Bob,35,Teacher\"])",
        "countSeniors(details = [\"John,25,Engineer\", \"Alice,65,Doctor\", \"Bob,35,Teacher\"])",
        "countSeniors(details = [\"John,25,Engineer\", \"Alice,65,Doctor\", \"Bob,35,Teacher\"])",
        "countSeniors(details = [\"John,25,Engineer\", \"Anna,65,Doctor\", \"Peter,35,Teacher\"])",
        "countSeniors(details = [\"John,25,Engineer\", \"Anna,65,Doctor\", \"Peter,35,Teacher\"])",
        "countSeniors(details = [\"John,30\", \"Alice,65\", \"Bob,22\"])",
        "countSeniors(details = [\"John,35,Engineer\", \"Anna,45,Doctor\", \"Peter,70,Teacher\"])",
        "countSeniors(details = [\"John,30\", \"Anna,65\", \"Peter,15\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [0, 1, 2, 3, 4])",
        "minimumSeconds(A = [0, 1, 2, 3, 4])",
        "minimumSeconds(A = [0, 1, 2, 3, 4])",
        "minimumSeconds(A = [0, 1, 2, 3, 4])",
        "minimumSeconds(A = [1, 0, 1, 0, 1, 0, 1])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [5, 10, 15], money = 20)",
        "buyChoco(prices = [5, 10, 15], money = 20)",
        "buyChoco(prices = [5, 5, 10], money = 10)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)"
    ],
    "sample_368": [
        "sortVowels(s = \"HlymP\")",
        "sortVowels(s = \"HlymP\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = \"Hylmp\")",
        "sortVowels(s = \"HlypM\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 0], [0, 1]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 1)"
    ],
    "sample_449": [
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"John,25,Engineer\", \"Anna,65,Doctor\", \"Peter,19,Student\"])",
        "countSeniors(details = [\"John,25,Engineer\", \"Anna,65,Doctor\", \"Peter,19,Student\"])",
        "countSeniors(details = [\"John,25,Engineer\", \"Anna,65,Doctor\", \"Peter,19,Student\"])",
        "countSeniors(details = [\"John,25,Engineer\", \"Alice,65,Doctor\", \"Bob,35,Teacher\"])",
        "countSeniors(details = [\"John,25,Engineer\", \"Anna,65,Doctor\", \"Peter,45,Teacher\"])",
        "countSeniors(details = [\"John,25,Engineer\", \"Anna,65,Doctor\", \"Peter,45,Teacher\"])",
        "countSeniors(details = [\"John,25,Engineer\", \"Sam,65,Doctor\", \"Alice,35,Teacher\"])",
        "countSeniors(details = [\"John,25,1234567890\", \"Alice,65,9876543210\"])",
        "countSeniors(details = [\"Alice,25,F\", \"Bob,65,M\", \"Charlie,35,M\"])",
        "countSeniors(details = [\"Alice,25,F\", \"Bob,65,M\", \"Charlie,35,M\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])"
    ],
    "sample_415": [
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1), (4, 4)], k = 3)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1), (4, 4)], k = 3)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1), (4, 4)], k = 3)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1), (4, 4)], k = 3)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1), (1, 3), (2, 1), (3, 2)], k = 2)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)], k = 5)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1)], k = 3)",
        "countPairs(coordinates = [(1, 2), (3, 4), (5, 6)], k = 3)",
        "countPairs(coordinates = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], k = 3)",
        "countPairs(coordinates = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)], k = 5)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)"
    ],
    "sample_452": [
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [2, 3, 4, 5, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 4, 3])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101101', k = 2)",
        "shortestBeautifulSubstring(s = '1101101', k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 0, 0, 0], nums2 = [4, 5, 6])"
    ],
    "sample_453": [
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabbaa\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 2)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"abcdae\", k = 3)",
        "beautifulSubstrings(s = \"abcdae\", k = 3)",
        "beautifulSubstrings(s = \"abcdae\", k = 3)",
        "beautifulSubstrings(s = \"abcdae\", k = 3)",
        "beautifulSubstrings(s = \"abcdae\", k = 3)",
        "beautifulSubstrings(s = \"aabbcc\", k = 3)",
        "beautifulSubstrings(s = \"aabbcc\", k = 3)",
        "beautifulSubstrings(s = \"abcda\", k = 3)",
        "beautifulSubstrings(s = \"abcda\", k = 3)",
        "beautifulSubstrings(s = \"aabacadaeaafa\", k = 3)"
    ],
    "sample_369": [
        "sortVowels(s = \"HlymP\")",
        "sortVowels(s = \"HlymP\")",
        "sortVowels(s = \"HlymP\")",
        "sortVowels(s = \"HlymuP\")",
        "sortVowels(s = \"HlymuP\")",
        "sortVowels(s = \"HlymuP\")",
        "sortVowels(s = \"Hlymu\")",
        "sortVowels(s = \"HylmP\")",
        "sortVowels(s = \"HylmP\")",
        "sortVowels(s = 'HlymuP')"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"010101\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [3, 1, 5, 2, 4])",
        "maxSubarrays(nums = [3, 1, 5, 2, 4])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2], money = 3)"
    ],
    "sample_290": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"010101\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [2, 1, 4, 5, 3], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [2, 1, 5, 2, 3, 2], k = 2)",
        "minOperations(nums = [1, 3, 4, 2, 5, 2], k = 2)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 5])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 4])",
        "isGood(nums = [1, 2, 3, 4, 4])",
        "isGood(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 3, 2, 5])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 4])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1101101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 3)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101101101\", k = 3)",
        "shortestBeautifulSubstring(s = '1101101101', k = 3)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"110110110110010110110\", k = 3)",
        "shortestBeautifulSubstring(s
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"1100\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 100)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 2, 1, 2, 4, 2])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_448": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 5, 9, 1, 3], limit = 5)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 2, 2])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 3])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bce\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bce\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")"
    ],
    "sample_399": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,2,1], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [2, 3], moveTo = [3, 2])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [2, 3], moveTo = [3, 2])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [2, 3], moveTo = [3, 2])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [2, 3], moveTo = [3, 2])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [2, 3], moveTo = [3, 2])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [2, 3], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [2, 3], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [2, 3], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3], moveFrom = [2, 3], moveTo = [1, 2])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [2,3], moveTo = [1,2])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"def\")"
    ],
    "sample_324": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])"
    ],
    "sample_380": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_317": [
        "buyChoco(prices = [5, 7, 2], money = 10)",
        "buyChoco(prices = [5, 7, 2], money = 10)",
        "buyChoco(prices = [5, 7, 2], money = 10)",
        "buyChoco(prices = [5, 7, 2], money = 10)",
        "buyChoco(prices = [5, 7, 2], money = 10)",
        "buyChoco(prices = [5, 7, 2], money = 10)",
        "buyChoco(prices = [5, 7, 2], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])"
    ],
    "sample_370": [
        "sortVowels(s = 'tEdlOecE')",
        "sortVowels(s = 'tEOcede')",
        "sortVowels(s = \"tEOlcede\")",
        "sortVowels(s = \"lEdtOcee\")",
        "sortVowels(s = \"lEOtcde\")",
        "sortVowels(s = 'tEOlecede')",
        "sortVowels(s = 'tEOlecede')",
        "sortVowels(s = 'tEdleOcE')",
        "sortVowels(s = \"tEdlOece\")",
        "sortVowels(s = \"tEOcedeL\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_307": [
        "countSeniors(details = [\"1990abc\", \"1980def\", \"2000ghi\"])",
        "countSeniors(details = [\"John_1970\", \"Alice_1980\", \"Bob_1990\"])",
        "countSeniors(details = [\"John_1970\", \"Alice_1980\", \"Bob_1990\"])",
        "countSeniors(details = [\"1990ab\", \"1980cd\", \"2000ef\"])",
        "countSeniors(details = [\"John_1975\", \"Alice_1980\", \"Bob_1969\"])",
        "countSeniors(details = [\"1990ab\", \"1980cd\", \"2000ef\", \"1970gh\"])",
        "countSeniors(details = [\"John_1970\", \"Alice_1980\", \"Bob_1990\", \"Eve_1965\"])",
        "countSeniors(details = [\"John1970\", \"Mike1980\", \"Alice1990\", \"Bob2000\"])",
        "countSeniors(details = [\"John1970\", \"Mike1980\", \"Alice1990\", \"Bob2000\"])",
        "countSeniors(details = [\"John1980\", \"Alice1965\", \"Bob1975\"])"
    ],
    "sample_323": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"1101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101",
        "minimumBeautifulSubstrings(s = \"1101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101",
        "minimumBeautifulSubstrings(s = \"1101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101101",
        "minimumBeautifulSubstrings(s = \"1101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 4)"
    ],
    "sample_419": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4], k = 3)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11101\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"aabac\")",
        "minimumBeautifulSubstrings(s = \"aabac\")",
        "minimumBeautifulSubstrings(s = \"aabac\")",
        "minimumBeautifulSubstrings(s = \"aabacb\")"
    ],
    "sample_341": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 5, y = 6, z = 3)",
        "longestString(x = 5, y = 6, z = 3)",
        "longestString(x = 3, y = 5, z = 2)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, -1, 0], [0, 1, -1], [1, 0, 1]])",
        "findChampion(grid = [[1, -1, 0], [0, 1, -1], [1, 0, 1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"hello\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 3)",
        "beautifulSubstrings(s = \"abcd\", k = 2)"
    ],
    "sample_304": [
        "countSeniors(details = [\"1990-01-01\", \"1950-01-01\", \"1970-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"1990-01-01\", \"2000-01-01\"])",
        "countSeniors(details = [\"John_25_Engineer\", \"Anna_65_Scientist\", \"Peter_35_Doctor\"])",
        "countSeniors(details = [\"0010121990\", \"0020221970\", \"0030322000\"])",
        "countSeniors(details = [\"0010121990\", \"0020221970\", \"0030322001\"])",
        "countSeniors(details = [\"John_25_Engineer\", \"Anna_65_Teacher\", \"Peter_45_Doctor\"])",
        "countSeniors(details = [\"John,35,Engineer\", \"Anna,62,Doctor\", \"Peter,22,Teacher\"])",
        "countSeniors(details = [\"John,30\", \"Alice,65\", \"Bob,22\"])",
        "countSeniors(details = [\"1990-01-01\", \"1955-05-05\", \"1975-11-11\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1101\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [6, 7, 8, 9, 10])",
        "minOperations(a = [1, 2, 3, 4], b = [5, 6, 7, 8])",
        "minOperations(a = [1, 2, 3, 4], b = [5, 6, 7, 8])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\", \"gh\"])"
    ],
    "sample_371": [
        "sortVowels(s = 'HlymP')",
        "sortVowels(s = 'HlymP')",
        "sortVowels(s = 'HlymP')",
        "sortVowels(s = 'HlymP')",
        "sortVowels(s = 'Hlymu')",
        "sortVowels(s = 'Hlymu')",
        "sortVowels(s = 'Hlymu')",
        "sortVowels(s = 'HlymuP')",
        "sortVowels(s = 'HlymuP')",
        "sortVowels(s = 'Hylmp')"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [2, 4, 1, 7, 5])",
        "minimumSum(nums = [3, 5, 7, 1])",
        "minimumSum(nums = [3, 5, 7, 1, 2, 4])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])"
    ],
    "sample_372": [
        "sortVowels(s = 'eLeotced')",
        "sortVowels(s = 'eLeotced')",
        "sortVowels(s = 'eLeotced')",
        "sortVowels(s = 'eLeotced')",
        "sortVowels(s = 'eLeotced')",
        "sortVowels(s = 'eLeotced')",
        "sortVowels(s = 'eLeotced')",
        "sortVowels(s = 'tEdElEoc')",
        "sortVowels(s = 'tEdlEoc')",
        "sortVowels(s = 'tEdlEoc')"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_367": [
        "sortVowels(s = 'HlymP')",
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = 'HlypM')",
        "sortVowels(s = 'Hlymp')",
        "sortVowels(s = 'Hlymp')",
        "sortVowels(s = 'Hlymp')",
        "sortVowels(s = 'lHmYp')",
        "sortVowels(s = 'lHmyp')"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "minOperations(nums = [2, 1, 4, 3, 2, 5, 6], k = 3)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [4, 5])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bca\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bca\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bca\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bca\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bca\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bca\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abd\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abz\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,2,3,3,4,4,4,5,5,5,5])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1,1,2,2,3,3,3,3,3])"
    ],
    "sample_451": [
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"p\", \"2\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"2\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"2\", \"p\", \"1\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"2\", \"1\", \"p\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"azb\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 0, 0, 0], nums2 = [4, 5, 6])"
    ],
    "sample_416": [
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1)], k = 2)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1)], k = 2)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1)], k = 2)",
        "countPairs(coordinates = [(0, 0), (1, 1), (1, 2), (2, 1)], k = 1)",
        "countPairs(coordinates = [(0, 0), (1, 1), (1, 2), (2, 1)], k = 1)",
        "countPairs(coordinates = [(0, 0), (1, 1), (1, 2), (2, 1)], k = 1)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1)], k = 3)",
        "countPairs(coordinates = [(1, 2), (2, 3), (3, 1)], k = 3)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [0, 1], [1, 0], [2, 3], [3, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 1)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, -4, -5, -6])",
        "maxStrength(nums = [1, 2, 3, -4, -5, -6])",
        "maxStrength(nums = [1, 2, 3, -4, -5, -6])",
        "maxStrength(nums = [2, 3, -1, -5, -8, 1])",
        "maxStrength(nums = [2, 3, -1, -5, -8, 1])",
        "maxStrength(nums = [2, 3, -1, -5, -8, 1])",
        "maxStrength(nums = [1, 2, -3, 4, 5, -6, -7, 8, 9])",
        "maxStrength(nums = [2, -3, 4, -5, 6])",
        "maxStrength(nums = [4, -2, -3, 5, -1, 8, -2])",
        "maxStrength(nums = [4, -2, -5, 1, 3, -3, 2])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 0)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [10])",
        "relocateMarbles(nums = [4, 5, 6, 8, 9], moveFrom = [4, 6], moveTo = [1, 2])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[1, 0], [0, 1]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [1, 2, 3], money = 3)",
        "buyChoco(a = [5, 5], money = 10)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6])"
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"abacadaeaf\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"abcdae\", k = 3)",
        "beautifulSubstrings(s = \"abcdae\", k = 3)",
        "beautifulSubstrings(s = \"abcdae\", k = 3)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])"
    ],
    "sample_326": [
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[0, 1], [1, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 5, 8, 4])",
        "minimumSum(nums = [1, 5, 8, 4])",
        "minimumSum(nums = [1, 4, 2])",
        "minimumSum(nums = [1, 5, 2, 4, 3])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [2, 3, 1, 5, 4])",
        "minimumSum(nums = [2, 3, 1, 5, 4])",
        "minimumSum(nums = [1, 5, 3, 2, 4])",
        "minimumSum(nums = [1, 5, 3, 2, 1])",
        "minimumSum(nums = [2, 5, 1, 7, 3, 4])"
    ],
    "sample_450": [
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"aabbbb\")",
        "minChanges(s = \"aabbbb\")",
        "minChanges(s = \"aabbbb\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1101\", s2 = \"1010\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"010\", x = 1)"
    ],
    "sample_342": [
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 2, z = 1)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John, 25\", \"Alice, 65\", \"Bob, 35\"])",
        "countSeniors(details = [\"John, 25\", \"Alice, 65\", \"Bob, 35\"])",
        "countSeniors(details = [\"John, 25\", \"Alice, 65\", \"Bob, 35\"])",
        "countSeniors(details = [\"John, 25\", \"Alice, 65\", \"Bob, 35\"])",
        "countSeniors(details = [\"John, 25\", \"Alice, 65\", \"Bob, 35\"])",
        "countSeniors(details = [\"John, 25\", \"Alice, 65\", \"Bob, 35\"])",
        "countSeniors(details = [\"John, 25\", \"Alice, 65\", \"Bob, 35\"])",
        "countSeniors(details = [\"John,35,Engineer\", \"Anna,45,Doctor\", \"Peter,70,Retired\", \"Linda,28,Teacher\"])",
        "countSeniors(details = [\"John,35,Developer\", \"Anna,42,Manager\", \"Peter,72,Consultant\"])",
        "countSeniors(details = [\"John,35,Developer\", \"Anna,42,Manager\", \"Peter,72,Consultant\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [1, 2])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [1, 2])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 9], moveTo = [8, 6])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 4], [3, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 4], [3, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 4], [3, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 4], [3, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 4], [3, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 4], [3, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 4], [3, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 2], [3, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 2], [3, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 2], [3, 4, 3]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [2, 2, 1, 1], m = 3)",
        "canSplitArray(nums = [2, 1, 2, 1, 2], m = 3)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5])",
        "minimumIndex(nums = [1, 2, 2, 1, 1, 3])",
        "minimumIndex(nums = [1, 2, 2, 1, 3, 3])",
        "minimumIndex(nums = [3,3,1,3,3,2,2,2])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 1, 2])",
        "minimumIndex(nums = [1, 2, 2, 1, 1, 1, 1])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [3,1,4,2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2,3,1,4,5])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 10, target = 1)",
        "minimumPossibleSum(n = 10, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 5])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 3])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 3, 2, 1, 4], target = 2)"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [2, 3, 7], [3, 4, 8]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [2, 3, 7], [3, 4, 8]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [2, 3, 7], [3, 4, 8]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [2, 3, 7], [3, 4, 8], [1, 4, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [2, 3, 7], [3, 4, 8], [4, 5, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [2, 3, 7], [3, 4, 8], [4, 5, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 4, 3], [3, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 4, 3], [3, 4, 2]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,3,4,5,6,7,8,9,0], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2]])"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kdeebncd')",
        "smallestString(s = \"kdeebnce\")",
        "smallestString(s = \"kdeebnce\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3, 4], threshold = 4)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abac\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [2, 3, 5, 7], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [2, 3, 1, 2, 4, 3], m = 5)",
        "canSplitArray(nums = [2, 1, 2, 1, 2], m = 3)",
        "canSplitArray(nums = [2, 1, 2, 1, 2], m = 3)",
        "canSplitArray(nums = [2, 1, 5, 1, 2], m = 4)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [0, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0], k = 1)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)"
    ],
    "sample_205": [
        "minimumOperations(num = \"00255075\")",
        "minimumOperations(num = \"00255075\")",
        "minimumOperations(num = \"02575\")",
        "minimumOperations(num = \"02575\")",
        "minimumOperations(num = \"02575\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"250025\")",
        "minimumOperations(num = \"250025\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"1230\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"0025\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRRa\")",
        "furthestDistanceFromOrigin(moves = \"LLRRa\")",
        "furthestDistanceFromOrigin(moves = \"LLRRa\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRa\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRa\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"bee\", \"cat\"], s = \"abc\")",
        "isAcronym(words = [\"apple\", \"bee\", \"cherry\"], s = \"abc\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 1)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [123, 45, 789, 24])",
        "countBeautifulPairs(nums = [123, 45, 987, 234])",
        "countBeautifulPairs(nums = [123, 45, 987, 234])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [123, 45, 121, 4])",
        "countBeautifulPairs(nums = [123, 45, 121, 4])",
        "countBeautifulPairs(nums = [123, 45, 789, 23, 56])",
        "countBeautifulPairs(nums = [12, 23, 34, 45])",
        "countBeautifulPairs(nums = [123, 456, 789, 101112])",
        "countBeautifulPairs(nums = [123, 456])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [123, 456, 789, 101])",
        "countBeautifulPairs(nums = [123, 456, 789, 101])",
        "countBeautifulPairs(nums = [123, 456, 789, 101])",
        "countBeautifulPairs(nums = [123, 456, 789, 101])",
        "countBeautifulPairs(nums = [12, 23, 34, 45])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")"
    ],
    "sample_150": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])"
    ],
    "sample_7": [
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1], [3, 1]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 4, target = 10)"
    ],
    "sample_171": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 1)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 8, 9], target = 10)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], t = 6)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], t = 6)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], t = 6)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], t = 6)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], t = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 4, 5], t = 5)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 15, b = 5)",
        "makeTheIntegerZero(a = 10, b = 1)",
        "makeTheIntegerZero(a = 10, b = 1)",
        "makeTheIntegerZero(a = 10, b = 1)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 12, b = 3)",
        "makeTheIntegerZero(a = 15, b = 3)",
        "makeTheIntegerZero(a = 15, b = 3)",
        "makeTheIntegerZero(a = 15, b = 3)"
    ],
    "sample_157": [
        "canSplitArray(nums = [2, 3, 5, 7], m = 5)",
        "canSplitArray(nums = [2, 3, 5, 7], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [2, 2, 1, 1], m = 3)",
        "canSplitArray(nums = [2, 2, 1, 1], m = 3)",
        "canSplitArray(nums = [2, 3, 1, 2, 4, 3], m = 5)",
        "canSplitArray(nums = [2, 3, 1, 2], m = 3)",
        "canSplitArray(nums = [2, 3, 1, 2], m = 3)"
    ],
    "sample_161": [
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0, 0, 0])",
        "maxSum(nums = [0, 0, 0, 0])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [0, 1, 2, 3])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 1, target = 5)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 2, 3, 5, 6])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 6])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 6])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 6])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 6])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 6])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 6])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 6])",
        "findValueOfPartition(nums = [1, 2, 3, 5, 6])",
        "findValueOfPartition(nums = [3, 5, 6, 8])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [4, 6]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 7]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one,two', 'three,four,five', 'six'], separator = ',')"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])"
    ],
    "sample_159": [
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [0, 0, 0, 0])",
        "maxSum(nums = [0, 1])",
        "maxSum(nums = [1, 2, 3])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)"
    ],
    "sample_160": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kdebsnce')"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)"
    ],
    "sample_40": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabaa\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 10, 5], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 10, 5], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 10, 5], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 25, 5], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 25, 35], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 15, 35], target = 20)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"nveen\")",
        "makeSmallestPalindrome(s = \"nveen\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"nnev\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3, 1, 2, 3], m=3, k=0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3, 1, 2, 3], m=3, k=0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3, 1, 2, 3], m=3, k=0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3, 1, 2, 3], m=3, k=0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3, 1, 2, 3], m=3, k=0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 0)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4])",
        "maxIncreasingGroups(u = [1, 2, 3, 4])",
        "maxIncreasingGroups(u = [1, 2, 3, 4])",
        "maxIncreasingGroups(u = [1, 2, 3, 4])",
        "maxIncreasingGroups(u = [1, 2, 3, 4])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minOperations(nums = [1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1], target = 3)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"\"], separator = \",\")"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = \"kddsbnce\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR__\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"LLRR__\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_RR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_RR\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)"
    ],
    "sample_51": [
        "smallestString(s = 'kdebsnce')",
        "smallestString(s = 'kdebsnce')",
        "smallestString(s = 'kdebsnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')"
    ],
    "sample_146": [
        "finalString(s = 'tinnep')",
        "finalString(s = 'tinnep')",
        "finalString(s = 'tinnep')",
        "finalString(s = 'tinnep')",
        "finalString(s = 'tinnep')",
        "finalString(s = 'tinnep')",
        "finalString(s = 'tinnep')",
        "finalString(s = 'tinnep')",
        "finalString(s = 'tinnep')",
        "finalString(s = 'tinnep')"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [2, 3, 1, 1, 2], m = 3)",
        "canSplitArray(nums = [2, 3, 1, 5, 2, 2, 1], m = 3)",
        "canSplitArray(nums = [2, 3, 1, 5, 2], m = 3)",
        "canSplitArray(nums = [2, 3, 1], m = 2)",
        "canSplitArray(nums = [2, 3, 1, 4, 2], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one,two', 'three,four,five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,four,five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,four,five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two', 'three,four,five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one-two', 'three-four-five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = ['one,two', 'three;four,five:six'], separator = ',;:')",
        "splitWordsBySeparator(words = ['one|two', 'three||four', 'five:six'], separator = '|')",
        "splitWordsBySeparator(words = ['one|two', 'three||four', 'five:six'], separator = '|')",
        "splitWordsBySeparator(words = ['one,two', 'three:four;five six'], separator = ',:; ')",
        "splitWordsBySeparator(words = ['one|two', 'three||four', 'five::six'], separator = '|')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)"
    ],
    "sample_168": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwe\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwe\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwe\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwe\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"HW\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"HW\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"HW\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hweolrld\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abcd\")"
    ],
    "sample_50": [
        "smallestString(s = \"abac\")",
        "smallestString(s = \"abac\")",
        "smallestString(s = \"abac\")",
        "smallestString(s = \"abac\")",
        "smallestString(s = \"abac\")",
        "smallestString(s = \"abac\")",
        "smallestString(s = \"abac\")",
        "smallestString(s = 'abac')",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"abab\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")"
    ],
    "sample_158": [
        "maxSum(nums = [123, 321])",
        "maxSum(nums = [123, 321])",
        "maxSum(nums = [123, 321])",
        "maxSum(nums = [123, 321])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [123, 321, 231, 312, 132])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [3, 1, 2, 5, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 5, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 5, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 5, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4, 6, 7])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4, 6, 7])"
    ],
    "sample_162": [
        "maxSum(nums = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,",
        "maxSum(nums = [8, 88, 7, 66, 5, 55])",
        "maxSum(nums = [88, 88, 88])",
        "maxSum(nums = [88, 88, 88])",
        "maxSum(nums = [88, 8, 22, 2])",
        "maxSum(nums = [88, 8, 8, 8])",
        "maxSum(nums = [8, 8, 1, 2, 3, 4, 5, 6, 7])",
        "maxSum(nums = [8, 88, 2, 10, 23, 34, 55, 76, 43, 44])",
        "maxSum(nums = [12, 23, 45, 88, 1, 2, 34, 56, 78, 90])",
        "maxSum(nums = [12, 24, 8, 36, 11, 3])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = '1010')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 60, 70, 80, 90], target = 70)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 60, 70, 80, 90], target = 70)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 8, 4, 7], target = 6)"
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworld\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 0)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"abcabc\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,2,3,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,3,2,3,4,5,6,7,8,9,0], k = 3)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 0], [5, 1]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 40)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [123, 234, 345, 456, 567])",
        "countBeautifulPairs(nums = [123, 234, 345, 456, 567])",
        "countBeautifulPairs(nums = [123, 234, 345, 456, 567])",
        "countBeautifulPairs(nums = [123, 234, 345, 456, 567])",
        "countBeautifulPairs(nums = [123, 234, 345, 456, 567])",
        "countBeautifulPairs(nums = [123, 234, 345, 456, 567])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '100')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)"
    ],
    "sample_149": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'sing')",
        "finalString(s = 'sing')",
        "finalString(s = \"string\")",
        "finalString(s = 'singer')"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [2, 2, 2, 3, 3, 3, 1, 1, 1])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])"
    ],
    "sample_228": [
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 3, 2, 5, 2, 3, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 5, 2, 3, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 5, 2, 3, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 5, 2, 3, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 5, 2, 3, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 5, 2, 3, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 5, 2, 3, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5, 6, 7])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [2, 1, 3, 2, 5, 3])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 1, 6, 7])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 1, 6, 7])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 1, 6, 7])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 1, 6, 7])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 1, 6, 7])",
        "continuousSubarrays(nums = [4, 2, 5, 3, 1, 6, 7])",
        "continuousSubarrays(nums = [2, 5, 3, 1, 4, 7])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [123, 321, 456, 654])",
        "countBeautifulPairs(nums = [123, 321, 456, 654])",
        "countBeautifulPairs(nums = [123, 321, 231, 312])",
        "countBeautifulPairs(nums = [123, 321, 231, 312])",
        "countBeautifulPairs(nums = [123, 321, 231, 312])",
        "countBeautifulPairs(nums = [123, 321, 231, 312])",
        "countBeautifulPairs(nums = [123, 321, 231, 312])",
        "countBeautifulPairs(nums = [123, 321, 1234, 4321])",
        "countBeautifulPairs(nums = [123, 321, 1234, 4321])",
        "countBeautifulPairs(nums = [123, 456, 789, 101])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1, 3, 2, 5, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4, 7, 6])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4, 6, 7])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4, 6, 7])",
        "semiOrderedPermutation(nums = [2, 1, 3])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 3, 5, 10, 15], target = 5)",
        "maximumJumps(nums = [1, 3, 5, 10, 15], target = 5)",
        "maximumJumps(nums = [1, 3, 5, 10, 12, 14], target = 4)",
        "maximumJumps(nums = [1, 3, 5, 10, 12, 14], target = 4)",
        "maximumJumps(nums = [1, 3, 5, 10, 12, 14], target = 4)",
        "maximumJumps(nums = [1, 3, 5, 10, 12, 14], target = 3)",
        "maximumJumps(nums = [1, 3, 5, 10, 12, 14], target = 3)",
        "maximumJumps(nums = [1, 3, 5, 10, 12, 14, 15], target = 4)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 10, 15, 20], target = 5)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"L_R_R_R_R_R_R\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_L_L_L\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])"
    ],
    "sample_121": [
        "minimumIndex(nums = [3, 2, 1, 3, 2])",
        "minimumIndex(nums = [3, 2, 1, 3, 2])",
        "minimumIndex(nums = [3, 2, 1, 3, 2])",
        "minimumIndex(nums = [3, 2, 1, 3, 2])",
        "minimumIndex(nums = [3, 2, 1, 3, 2])",
        "minimumIndex(nums = [3,1,2,3,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "minimumIndex(nums = [3,1,2,3,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "minimumIndex(nums = [3, 2, 1, 2, 3, 1])",
        "minimumIndex(nums = [3, 2, 1, 2, 3, 1])",
        "minimumIndex(nums = [3,1,2,3,2,4,5,6])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 5, 3], [3, 6, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 5, 3], [3, 6, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 5, 3], [3, 6, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 5, 3], [3, 6, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 5, 3], [3, 6, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 5, 3], [3, 6, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [3, 5, 3], [2, 6, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [3, 5, 3], [6, 7, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 5, 3], [3, 6, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 5, 3], [3, 6, 1]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"0025\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0100\")",
        "minimumOperations(num = \"0100\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"010\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 15]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 15]])",
        "maximizeTheProfit(n=5, offers=[[1, 2, 10], [2, 4, 15], [3, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 15], [3, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 15], [3, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 15], [3, 5, 7]])",
        "maximizeTheProfit(n=4, offers=[[1, 2, 10], [2, 3, 15]])",
        "maximizeTheProfit(n=5, offers=[[1, 2, 10], [2, 4, 15]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 50], [2, 3, 60], [3, 4, 100]])",
        "maximizeTheProfit(n=4, offers=[[1, 2, 10], [2, 3, 20]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7, 8, 9], threshold = 8)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 7, 11, 13], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 1, 4, 4, 3, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 1, 4, 4, 3, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 3, 4, 2, 2, 1, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 3, 4, 1, 2, 2], threshold = 3)"
    ],
    "sample_203": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [2, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [2, 2], [5, 2]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 1])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 1])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 1])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], target = 2)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')"
    ],
    "sample_57": [
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 2, b = 1)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 5, 7])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 4, 5, 6, 5, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 4, 5, 6, 5, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 3, 4, 5, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 3, 4, 5, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 3, 4, 5, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 4, 5])"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [7, 1, 5, 3, 6, 4])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 3])",
        "minimumIndex(nums = [3, 3, 2, 1, 2, 2, 2])",
        "minimumIndex(nums = [7, 7, 1, 2, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 2, 2, 2, 1, 1, 1, 1])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLR\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLL\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbbcc\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [10, 10, 10, 10, 10])",
        "maxIncreasingGroups(usageLimits = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
        "maxIncreasingGroups(usageLimits = [10, 5, 10, 10, 7])"
    ],
    "sample_206": [
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num
        "minimumOperations(num
        "minimumOperations(num = \"0000\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])"
    ],
    "sample_38": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])"
    ],
    "sample_53": [
        "smallestString(s = \"baazc\")",
        "smallestString(s = \"baazc\")",
        "smallestString(s = \"baazc\")",
        "smallestString(s = \"baazc\")",
        "smallestString(s = \"baazc\")",
        "smallestString(s = \"baacd\")",
        "smallestString(s = \"baabd\")",
        "smallestString(s = \"baabd\")",
        "smallestString(s = 'baabd')",
        "smallestString(s = 'baabd')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,5,7,8,5,3,4,2,6], x = 3)",
        "minAbsoluteDifference(nums = [1,5,7,8,5,3,4,2,6], x = 3)",
        "minAbsoluteDifference(nums = [1,5,7,8,5,3,4,2,6], x = 3)",
        "minAbsoluteDifference(nums = [1,5,7,8,5,3,4,2,6], x = 3)",
        "minAbsoluteDifference(nums = [1,5,7,8,5,3,4,2,6], x = 3)",
        "minAbsoluteDifference(nums = [1,5,7,8,5,3,4,2,6], x = 3)",
        "minAbsoluteDifference(nums = [1, 5, 2, 19, 18, 23], x = 2)",
        "minAbsoluteDifference(nums = [1,3,6,10,15], x = 2)",
        "minAbsoluteDifference(nums = [1,3,6,10,15], x = 2)",
        "minAbsoluteDifference(nums = [1, 5, 7, 15, 18, 20, 25, 30], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 20]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 20]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 20]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 20]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 2], [2, 4, 1], [3, 5, 3]])",
        "maximizeTheProfit(N = 4, offers = [[1, 3, 2], [2, 4, 1]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"\", \"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"\", \"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"\", \"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"\", \"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"\"], b = \"\")",
        "splitWordsBySeparator(a = [\"\"], b = \"\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 3, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 3, 2, 3, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 4], k = 1)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)"
    ],
    "sample_163": [
        "maxSum(nums = [123, 321])",
        "maxSum(nums = [123, 321])",
        "maxSum(nums = [123, 321])",
        "maxSum(nums = [123, 321])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 0])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_151": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy.problem\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"easy.problem\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"easy.problem\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"easy.problem\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"easy.problem\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"easy.problem\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], K = 5)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], K = 5)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8], K = 2)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_147": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = 'evenn')",
        "makeSmallestPalindrome(s = 'even')"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 60], [3, 5, 90]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 60], [2, 4, 70], [3, 5, 100]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 60], [2, 4, 70], [3, 5, 100]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 60], [2, 4, 70], [3, 5, 100]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [3, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [3, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [3, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [3, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [3, 5, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [3, 4, 6]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 2)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '100')"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 3, k = 0)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 5, 2, 3, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 5, 4], k = 1)"
    ],
    "sample_148": [
        "finalString(s = 'popiitner')",
        "finalString(s = 'popiitner')",
        "finalString(s = 'popiitner')",
        "finalString(s = 'popiitner')",
        "finalString(s = 'popiitner')",
        "finalString(s = 'popiitner')",
        "finalString(s = 'popiitner')",
        "finalString(s = 'popiitner')",
        "finalString(s = 'popiitner')",
        "finalString(s = 'popiitner')"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [123, 234, 345, 456])",
        "countBeautifulPairs(nums = [123, 456, 789, 101])",
        "countBeautifulPairs(nums = [123, 45, 78, 90])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 30, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"evenn\")",
        "makeSmallestPalindrome(s = \"evenn\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 3, 5])"
    ],
    "sample_39": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabaa\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"R__L_\")",
        "furthestDistanceFromOrigin(moves = \"R__L_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_R_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L_L_L\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 1, 4, 5, 9], threshold = 5)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [123, 456, 789])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [123, 321, 231, 132])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 9)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 9)"
    ],
    "sample_36": [
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDCDAB\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=3, k=1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=3, k=1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3], modulo=3, k=0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3], modulo=3, k=0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3], modulo=3, k=0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3], modulo=3, k=0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3], modulo=3, k=1)"
    ],
    "sample_9": [
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 4])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"RRRRLLL_____\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"RR_RRR_L\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLL______\")",
        "furthestDistanceFromOrigin(moves = \"L__RR__\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLL____\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 3])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 3])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 3])",
        "minimumIndex(nums = [3, 3, 2, 1, 2, 2, 2])",
        "minimumIndex(nums = [3, 3, 1, 3, 2, 3])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 1, 5, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 5, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 5, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [3, 1, 5, 2, 4])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)"
    ]
}