{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,1,2,1])",
        "alternatingSubarray(nums = [1,2,1,2,1])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 4, 4, 8, 8])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 1])",
        "alternatingSubarray(nums = [1,2,2,3,4,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,4,5])",
        "alternatingSubarray(nums = [0, 1, 1, 1])",
        "alternatingSubarray(nums = [2,4,6,3,5,6,8,9,10])",
        "alternatingSubarray(nums = [2, 1, 3, 5, 2, 1, 2, 3, 7, 1])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1,2],[3,4]])",
        "matrixSum(a = [[1, 2, 3], [1, 2, 3]])",
        "matrixSum([[1, 2, 3], [2, 2, 2]])",
        "matrixSum(a = [[1, 3, 2], [2, 1, 4], [3, 2, 1]])",
        "matrixSum(a = [[4, 1, 7], [2, 3, 5]])",
        "matrixSum(a = [[1,1,2],[2,2,3],[1,1,1]])",
        "matrixSum(a = [[1, 3, 5, 7], [8, 11, 13, 15], [17, 19, 21, 23], [25, 27, 29, 30]])",
        "matrixSum(a = [[3, 9, 2], [8, 2, 1], [3, 5, 7]])",
        "matrixSum(a = [[1, 5, 7], [2, 6, 9], [4, 7, 11], [8, 14, 15]])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 0, 0], [1, 1, 1, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 1, 1, 1],\n                            [1, 0, 1, 1, 1, 1],\n                            [1, 1, 0, 1, 1, 1],\n                            [1, 1, 1, 0, 1, 1],\n                            [1, 1, 1, 1, 0, 1],\n                            [1, 1, 1, 1, 1, 0]])",
        "findChampion([[1, 1, 1, 1], [0, 0, 1, 0], [0, 0, 1, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1,1,0,0], [1,1,1,0], [0,0,1,1], [0,0,1,1]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "matrixSum(a = [[2, 5], [2, 3]])",
        "matrixSum(a = [[1, 5, 7], [2, 6, 11], [3, 6, 12]])",
        "matrixSum(a = [[1, 3, 7, 12], [2, 6, 9, 11], [3, 7, 11, 14]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 3, 1, 4, 2])",
        "alternatingSubarray(nums = [0,1,0,1,1])",
        "alternatingSubarray(nums = [1, 4, 3, 7, 5, 1])",
        "alternatingSubarray(nums = [3,3,3,3,1,1,1,1,2,2,2,2])",
        "alternatingSubarray(nums = [0, 3, 3, 3, 4, 3, 3, 1, 3, 3, 3, 2, 3, 3, 3])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"one\", \"two\", \"three\", \"four\", \"five\"], x = \"r\")",
        "findWordsContaining(words=[\"hello\", \"world\", \"hello world\"], x=\"hello\")",
        "findWordsContaining(words = [\"hello\", \"bye\", \"bottle\"], x = \"b\")",
        "findWordsContaining(words = ['hello', 'hi', 'hey', 'bye'], x = 'y')",
        "findWordsContaining(words = [\"dog\", \"cat\", \"planet\", \"earth\"], x = \"a\")",
        "findWordsContaining(words = [\"Vasya\", \"Petya\", \"Masha\"], x = \"a\")",
        "findWordsContaining(words = [\"hi\", \"app\", \"pep\", \"apple\"], x = \"p\")",
        "findWordsContaining(words = [\"hello\", \"hell\", \"goodbye\", \"thre\"], x = \"hell\")",
        "findWordsContaining(words = [\"win\", \"cool\", \"run\"], x = \"co\")",
        "findWordsContaining(words = [\"orange\", \"banana\", \"blenana\", \"apple\"], x = \"bl\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"egg\", s2 = \"add\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abac\", s2 = \"caba\")",
        "canBeEqual(s1 = \"eggs\", s2 = \"digs\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdaa\")",
        "canBeEqual(s1 = \"eggxzgyy\", s2 = \"addxyzzz\")",
        "canBeEqual(s1 = \"abacab\", s2 = \"cababc\")",
        "canBeEqual(s1 = \"abacaba\", s2 = \"aabbbc\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 1], target = 11)",
        "lengthOfLongestSubsequence(nums = [4, 2, 4, 6, 9], target = 5)",
        "lengthOfLongestSubsequence(nums = [9], target = 7)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abac\", s2 = \"baca\")",
        "canBeEqual(s1 = \"abac\", s2 = \"baca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"abac\", s2 = \"caba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aab\")",
        "canBeEqual(s1 = \"lxyr\", s2 = \"xlyr\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, -2, 0, 3])",
        "maxSubarrays(nums = [1,2,3,4,5,0,7])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [2, 1, -2, 4, -1, 2, 1, -5, 4])",
        "maxSubarrays(nums = [1,2,3,4,-1,1,2,3,4])",
        "maxSubarrays(nums = [1, -4, 5, -4, 5, -4, 5, -4, 5, -4])",
        "maxSubarrays(nums = [3, 3, 3, 0, 0, 3, 1, 3, 2, 1, 2])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3, 4], money = 4)",
        "buyChoco(prices = [1,2,3], money = 2)",
        "buyChoco(prices = [1, 2, 3, 5], money = 2)",
        "buyChoco(prices = [1, 3, 4], money = 5)",
        "buyChoco(prices = [1,2,5,7], money = 4)",
        "buyChoco(prices = [10, 9, 12], money = 30)",
        "buyChoco(prices = [10, 45, 30, 25, 15], money = 100)",
        "buyChoco(prices = [25, 45, 75], money = 200)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 2], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 2, 2], l = 1, r = 3)",
        "countSubMultisets(nums = [1,1,2,3], l = 0, r = 3)",
        "countSubMultisets(nums = [1,1,2,3], l = 0, r = 3)",
        "countSubMultisets(nums = [1, 1, 2, 2, 3], l = 3, r = 5)",
        "countSubMultisets(nums = [1,1,1,1,1,1], l = 3, r = 5)",
        "countSubMultisets(nums = [2,3,4,1], l = 3, r = 5)",
        "countSubMultisets(nums = [1,2,2,3,4,4,5], l = 0, r = 4)",
        "countSubMultisets(nums = [1,1,1,1,1,2,2,2,2,3,3,3,4,4,4,5], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 3, 3, 3, 3, 3, 3, 7, 7, 15, 31, 719, 719, 719, 719, 719, 719, 719, 719], l = 0, r = 10)"
    ],
    "sample_322": [
        "isFascinating(123)",
        "isFascinating(123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 12)",
        "isFascinating(3)",
        "isFascinating(333)",
        "isFascinating(n = 33)",
        "isFascinating(100)",
        "isFascinating(n = 22)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"egg\", s2 = \"add\")",
        "canBeEqual(s1 = \"egg\", s2 = \"add\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdef\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abacaba\", s2 = \"cacaba\")",
        "canBeEqual(s1 = \"aaaa\", s2 = \"bbbb\")",
        "canBeEqual(s1 = \"inia\", s2 = \"ynia\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 8])",
        "minimumCoins(prices = [1, 2, 3, 4, 10])",
        "minimumCoins(prices = [1, 3, 5, 8, 2])",
        "minimumCoins(prices = [3, 4, 1, 3, 1])",
        "minimumCoins(prices = [4, 2, 6, 5, 1])",
        "minimumCoins(prices = [4, 1, 3, 2, 5, 11, 2, 11])",
        "minimumCoins(prices = [2, 3, 4, 4, 5, 8, 10, 11, 12, 14])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 55)",
        "accountBalanceAfterPurchase(p = 25)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 120)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 99)",
        "accountBalanceAfterPurchase(p = 57)",
        "accountBalanceAfterPurchase(p = 14)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [2,2,2,3,3,5,5,6])",
        "minOperations(nums = [3,3,3,3,2,2,2,2])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 2, 2, 2, 2])",
        "minOperations(nums = [5, 5, 5, 5])",
        "minOperations(nums = [1,3,5,2,2,2])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minOperations(nums = [3, 4, 6, 1, 3, 12, 15])",
        "minOperations(nums = [2, 4, 2, 1, 2, 2, 3, 3])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 3, 2, 1])",
        "alternatingSubarray(nums = [1,2,3,4,5,3,4,5,6])",
        "alternatingSubarray(nums = [2, 2, 3, 3, 1])",
        "alternatingSubarray(nums = [2, 4, 6, 10, 12, 18])",
        "alternatingSubarray(nums = [3, 4, 4, 2, 4, 4, 4])",
        "alternatingSubarray(nums = [4,7,5,3,7,5])",
        "alternatingSubarray(nums = [2, 1, 3, 2, 5, 3, 2, 1, 3, 1])",
        "alternatingSubarray(nums = [2,3,2,2,1,1,2,2,3,3,4,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 1, limit = 2)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 4, limit = 4)",
        "distributeCandies(n = 2, limit = 10)",
        "distributeCandies(n = 7, limit = 12)"
    ],
    "sample_247": [
        "minOperations(s1 = \"0011\", s2 = \"1110\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"abdc\", x = 1)",
        "minOperations(s1 = \"zzzzzyyyyy\", s2 = \"yyyyyyyyxx\", x = 3)",
        "minOperations(s1 = \"xxx\", s2 = \"xxy\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"zyx\", x = 2)",
        "minOperations(s1 = \"0010\", s2 = \"1110\", x = 1)",
        "minOperations(s1 = \"aa\", s2 = \"ab\", x = 1)",
        "minOperations(s1 = \"abbb\", s2 = \"baba\", x = 1)",
        "minOperations(s1 = \"1111\", s2 = \"1212\", x = 3)",
        "minOperations(s1 = \"548954\", s2 = \"485845\", x = 1)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 10, y = 10, z = 10)",
        "longestString(x = 1, y = 1, z = 4)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 5, y = 6, z = 7)",
        "longestString(x = 2, y = 4, z = 5)",
        "longestString(x = 4, y = 1, z = 2)",
        "longestString(x=3, y=2, z=1)"
    ],
    "sample_418": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 9)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10], k = 9)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [2, 7, 4, 1, 5], k = 3)",
        "minOperations(nums = [1, 2, 2, 3], k = 2)",
        "minOperations(nums = [5, 6, 7, 8, 9, 10], k = 9)",
        "minOperations(nums = [4, 2, 2, 4, 5], k = 2)",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [4, 2, 4, 5, 3], k = 3)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"baba\")",
        "longestSemiRepetitiveSubstring(s = \"ababbbba\")",
        "longestSemiRepetitiveSubstring(s = \"bbabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"asdfasdfasdf\")",
        "longestSemiRepetitiveSubstring(\"abababababa\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbaabc\")",
        "longestSemiRepetitiveSubstring(s = \"asasdffsdf\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 2, 3, 3, 3])",
        "isGood(a = [1, 2, 3, 4, 4, 3, 2, 1])",
        "isGood(a = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5])",
        "isGood(a = [1, 2, 1, 1, 3, 1, 2])",
        "isGood(a = [1, 2, 3, 4, 1, 2, 3, 2, 4])",
        "isGood(a = [0, 2, 1, 0, 2, 1, 0])",
        "isGood(a = [1, 1, 3, 5, 3])",
        "isGood(a = [3, 3, 1, 1, 2, 2, 1, 2, 2, 1])",
        "isGood(a = [2, 0, 1, 4, 4, 5, 6, 1])",
        "isGood(a = [1, 2, 3, 4, 4, 3, 5, 6, 7, 8, 8, 6, 11, 11, 11, 10, 9, 9, 9, 0])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 9, m = 3)",
        "differenceOfSums(n = 8, m = 3)",
        "differenceOfSums(n = 11, m = 2)",
        "differenceOfSums(n = 1000, m = 10)",
        "differenceOfSums(n = 24, m = 3)",
        "differenceOfSums(n = 10, m = 11)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3])",
        "minGroupsForValidAssignment(nums = [4, 4, 3, 3, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3,1,1])",
        "minGroupsForValidAssignment(nums = [6, 6, 5, 4, 4, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 5, 5, 4, 7])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [0, 0, 3, 2, 4, 4, 4, 5, 5, 5, 5])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"prev\", \"prev\", \"4\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"4\", \"3\", \"prev\", \"2\", \"1\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"4\", \"1\", \"2\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"next\",\"next\",\"prev\",\"next\",\"next\",\"2\",\"3\",\"3\",\"4\",\"prev\",\"next\",\"prev\",\"next\",\"prev\",\"next\",\"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"xww\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"cde\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"o\", \"lll\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"o\", \"ll\", \"l\"])",
        "maximumNumberOfStringPairs(words = [\"xxx\", \"xx\", \"xx\", \"xxx\", \"x\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cde\", \"ab\", \"ed\"])",
        "maximumNumberOfStringPairs(words = [\"l\", \"e\"])",
        "maximumNumberOfStringPairs(words = [\"aaa\", \"bbb\", \"ccc\", \"aaa\", \"aab\"])",
        "maximumNumberOfStringPairs(words = [\"h\", \"e\", \"e\", \"e\", \"e\", \"e\", \"o\", \"o\"])",
        "maximumNumberOfStringPairs(words = [\"aabaa\", \"ba\", \"c\", \"bcbc\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"000111000\", k = 3)",
        "shortestBeautifulSubstring(s = \"0011121111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1212\", k = 2)",
        "shortestBeautifulSubstring(s = '111000111', k = 2)",
        "shortestBeautifulSubstring(s = '01010101', k = 2)",
        "shortestBeautifulSubstring(s = \"111200110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"111111221\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111111111111111111111111111101\", k = 2)",
        "shortestBeautifulSubstring(s = '10100000', k = 3)",
        "shortestBeautifulSubstring(s = \"1110010101110110\", k = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 7, 8, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [1, 0, 1, 0, 1])",
        "minimumRightShifts(nums = [0, 1, 2, 7, 3, 10, 5])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 5, 7, 8])",
        "minimumRightShifts(nums = [3, 8, 2, 2, 8])",
        "minimumRightShifts(nums = [1, 3, 8, 2, 5, 2])",
        "minimumRightShifts(nums = [7, 9, 4, 8, 2, 1, 5, 7])",
        "minimumRightShifts(nums = [100, 123, 121, 111])",
        "minimumRightShifts(nums = [4, 6, 9, 1, 1, 3, 0, 1])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"10111\")",
        "minimumSteps(s = \"0001110001\")",
        "minimumSteps(s = \"10101010101010101\")",
        "minimumSteps(s = \"111111111111111111110\")",
        "minimumSteps(s = \"0000000000011111111111\")",
        "minimumSteps(s = '11100010')",
        "minimumSteps(s
        "minimumSteps(s = \"1101100111001\")",
        "minimumSteps(s = \"10101010100101001\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abcde\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"acd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"apples\", s2 = \"banana\", s3 = \"orange\")",
        "findMinimumOperations(s1 = \"ababa\", s2 = \"babab\", s3 = \"abaab\")",
        "findMinimumOperations(s1 = \"355\", s2 = \"345\", s3 = \"345\")",
        "findMinimumOperations(s1 = \"afed\", s2 = \"beha\", s3 = \"cfad\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"z\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = 'ab', str2 = 'bc')",
        "canMakeSubsequence(str1 = 'az', str2 = 'az')",
        "canMakeSubsequence(str1 = \"aab\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abce\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = 'ad', str2 = 'zc')",
        "canMakeSubsequence(str1 = \"zwle\", str2 = \"zwlf\")",
        "canMakeSubsequence(str1 = \"agauayfaa\", str2 = \"aa\")"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [1, 3, 2, 4])",
        "isGood(nums=[1, 2, 3, 4, 5])",
        "isGood(nums = [2, 5, 1, 3, 4])",
        "isGood([1, 3, 2, 5, 4])",
        "isGood(nums=[1, 2, 4, 5, 6, 8])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1, 2, 3, 4], target = 10)",
        "countPairs(nums = [3, 4, 5, 6, 7], target = 10)",
        "countPairs(nums = [1,1,1,1], target = 3)",
        "countPairs(nums = [3, 4, 5], target = 7)",
        "countPairs(nums = [1, 3, 4, 6], target = 6)",
        "countPairs(nums = [3, 1, 4, 2], target = 5)",
        "countPairs(nums = [1, 3, 2, 7, 4], target = 10)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 6], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 5], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 8, 9, 6], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 6, 8], moveTo = [7, 7, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8, 9], moveTo = [5, 5, 5])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [3,4], moveTo = [7,8])",
        "relocateMarbles(nums = [5, 1, 2, 3, 4, 8, 6, 9], moveFrom = [4, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 5, 8, 9], moveFrom = [1, 2, 4], moveTo = [2, 3, 5])",
        "relocateMarbles(nums = [2, 1, 9, 8, 5, 6, 10, 3], moveFrom = [2, 6, 7, 4, 8, 5, 1], moveTo = [9, 4, 5, 2, 10, 6, 3, 7])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 6)",
        "countPairs(nums = [1, 3, 2, 2], target = 5)",
        "countPairs(nums = [1, 1, 2, 3, 5], target = 7)",
        "countPairs(nums = [1, 3, 5, 6], target = 7)",
        "countPairs(nums = [1, 1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 7)",
        "countPairs(nums = [1,3,4,7], target = 8)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,1,3,3,7,2,2,2,2])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1,1,3,3,7,2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4,5])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [2,1,2,1,2,1,2,1,2,1])",
        "minLengthAfterRemovals(nums = [9,9,9,9,9,9,9,9,9,9,9,9,9])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Smith-21\", \"Perry-53\", \"Johnson-42\", \"Williams-28\"])",
        "countSeniors(details = [\"John23\", \"Kelly43\", \"Joseph89\"])",
        "countSeniors(details = [\"Krish 22\", \"Rahul 36\", \"Suresh 82\", \"Rahul 25\"])",
        "countSeniors(details = [\"Dorothy28\", \"Gladys54\", \"Walter19\", \"Adam14\", \"Jessica18\"])",
        "countSeniors(details = [\"Luke:17, John:62\", \"Mike:19, Cindy:64\"])",
        "countSeniors(details=[\"Bobby;34;456\", \"Alice;67;890\", \"Bob;12;435\"])",
        "countSeniors(details = [\"Ms. Jane,86\", \"Mrs. John,55\", \"Mr. Peter,10\", \"Mr. Jerry,81\"])",
        "countSeniors(details = [\"221298/12/80\", \"1960/03/12\", \"1833/01/03\", \"1985/03/20\", \"1936/07/06\"])",
        "countSeniors(details = [\"Sophia Liu18\", \"Jasmine Park26\", \"Wing Fan10\", \"William Chen79\", \"Dylan Yang25\", \"Alice Chen98\"])",
        "countSeniors(details = [\"Lorem, ipsum, dolor, sit, amet, 72, consectetur, adipiscing, elit.\", \"Ipsem, factum, voco, dicere, me, quin, senex, sit, senectus, sexagenarius, annis, gestarum, 82.\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"ababbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaababbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abaababab\")",
        "longestSemiRepetitiveSubstring(s = \"abacf\")",
        "longestSemiRepetitiveSubstring(s = \"bbaaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabaa\")",
        "longestSemiRepetitiveSubstring(s = \"zzxxyyxx\")",
        "longestSemiRepetitiveSubstring(s = \"sdsdgdggdsds\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdef\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acd\")",
        "canBeEqual(s1 = \"abac\", s2 = \"zaac\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"b\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"xxxyy\", s2 = \"xxxyz\", s3 = \"xxxyy\")",
        "findMinimumOperations(s1 = \"frog\", s2 = \"calf\", s3 = \"dog\")",
        "findMinimumOperations(s1 = \"xxxxyyyyzzzz\", s2 = \"xxyyzzzzxyyy\", s3 = \"xyyyzzzzzxxx\")",
        "findMinimumOperations(s1 = \"spain\", s2 = \"want\", s3 = \"palin\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [10,1,2,7,6,1,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 2)",
        "lengthOfLongestSubsequence(nums = [8,4,12,2,10,6,14,1,9,5,13,3,11,7,15], target = 5)",
        "lengthOfLongestSubsequence(nums = [3, 2, 1, 2, 4, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [4, 9, 3], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,3,5,8,12], target = 13)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8], target = 8)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [4, 1, 3, 2])",
        "minimumSum(nums = [2, 2, 2, 2, 2])",
        "minimumSum(nums = [2, 5, 3, 7])",
        "minimumSum(nums = [-3, 0, 1, 2, -1, 1, 1, -3])",
        "minimumSum(nums = [10, -1, 10, -1, 10, -1, 10, -1, 10, -1])",
        "minimumSum(nums = [15, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "minimumSum(nums = [15, 22, 14, 3, 19, 12, 20, 17, 6, 11, 9])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cc\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ba\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cba\", \"bd\"])",
        "minimizeConcatenatedLength(words = [\"hello\", \"heaven\"])",
        "minimizeConcatenatedLength(words = [\"cc\", \"dd\", \"ee\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"ba\", \"baba\", \"c\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"to\", \"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"zp\", \"ld\", \"tx\", \"zr\"])",
        "minimizeConcatenatedLength(words = [\"cear\", \"ceora\", \"e\"])",
        "minimizeConcatenatedLength(words = [\"mghxyq\", \"tquqp\", \"bac\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"000111000\", k = 3)",
        "shortestBeautifulSubstring(s = \"0101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"0101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"001101010000\", k = 3)",
        "shortestBeautifulSubstring(s = '0110111001010', k = 3)",
        "shortestBeautifulSubstring(s=\"1111111111\", k=10000)",
        "shortestBeautifulSubstring(s = \"0000000111111000000000001111110000000000011111100000000000111111\", k = 6)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"apple\",\"orange\",\"banana\"])",
        "minimizeConcatenatedLength(words = [\"ax\",\"bx\",\"cx\",\"dx\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"zw\"])",
        "minimizeConcatenatedLength(words = [\"qwe\", \"as\", \"dfghjkl\"])",
        "minimizeConcatenatedLength(words = [\"bb\", \"aaa\", \"zzz\"])",
        "minimizeConcatenatedLength(words = [\"qw\", \"er\", \"ty\", \"ui\", \"on\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"papaya\", \"tee\", \"tacos\"])",
        "minimizeConcatenatedLength(words = [\"xx\", \"zz\"])",
        "minimizeConcatenatedLength(words = [\"mehmet\",\"murat\",\"gokberk\",\"kutay\",\"muhammet\",\"a\",\"b\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"c\", \"d\", \"dc\", \"ef\", \"g\", \"hg\", \"i\", \"j\", \"jh\", \"k\", \"l\", \"lk\", \"ma\", \"n\", \"nm\", \"o\", \"p\", \"pr\", \"q\", \"qr\", \"s\", \"sr\", \"t\", \"tr\", \"u\", \"v\", \"vr\", \"w\", \"wr\", \"x\", \"y\", \"yz\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 2, m = 3)",
        "differenceOfSums(n = 1000, m = 3)",
        "differenceOfSums(n = 100, m = 1)",
        "differenceOfSums(n = 30, m = 2)",
        "differenceOfSums(n = 31, m = 3)",
        "differenceOfSums(n = 100000, m = 3)",
        "differenceOfSums(n = 1000000, m = 3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,5,5,6])",
        "alternatingSubarray(nums = [1,1,2,2,2])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,5,5,5])",
        "alternatingSubarray(nums = [1,1,2,2,2,2,2,3])",
        "alternatingSubarray(nums = [1,1,2,2,2,3,3,4,4,5])",
        "alternatingSubarray(nums = [2,3,3,2,1])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "findMaximumLength(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "findMaximumLength(nums = [1,2,-1,3,4,10,-10,-1,3,4])",
        "findMaximumLength(nums = [3, 3, 3, 1, 2, 2, 2, 1, 1])",
        "findMaximumLength(nums = [-1,0,-1,-1])",
        "findMaximumLength(nums = [1,-1,3,5,2,-1])",
        "findMaximumLength(nums = [5,1,2,3,4,5,1,1,2,3,4])",
        "findMaximumLength(nums = [-1,-3,-1,4,1,-6,5])",
        "findMaximumLength(nums = [1,4,6,8,7,6,5])"
    ],
    "sample_302": [
        "countSeniors(details = [\"01-02-1990\", \"01-02-1999\", \"01-02-2000\"])",
        "countSeniors(details = [\"1968-07-02\", \"1971-07-02\"])",
        "countSeniors(details = [\"01-06-1990\", \"21-11-1970\", \"01-01-1970\"])",
        "countSeniors(details = [\"01-Jun-1970\", \"29-May-1975\", \"30-Aug-1960\"])",
        "countSeniors(details = [\"190000000000\", \"195500000000\", \"199000000000\", \"197000000000\"])",
        "countSeniors(details = [\"19511001\", \"19211002\", \"19591003\"])",
        "countSeniors(details = [\"19101599548\", \"19101599999\", \"19101599999\"])",
        "countSeniors(details = [\"19701020\", \"20100310\", \"19850223\"])",
        "countSeniors(details = [\"ID1006200095\", \"ID0504200598\", \"ID1011200031\"])",
        "countSeniors(details = [\"3265140122\", \"6788711923\", \"4000012121\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"bab\", s2 = \"aba\")",
        "canBeEqual(s1 = \"abc1\", s2 = \"bca1\")",
        "canBeEqual(s1 = \"cat\", s2 = \"dog\")",
        "canBeEqual(s1 = \"853974\", s2 = \"374859\")",
        "canBeEqual(s1 = \"codewars\", s2 = \"cdwowaars\")",
        "canBeEqual(s1 = \"0211\", s2 = \"0221\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 1, 1, 1])",
        "minimumCoins(prices = [1, 3, 5, 7, 9, 11])",
        "minimumCoins(prices = [1, 2, 5, 6])",
        "minimumCoins(prices = [2, 3, 5, 7, 11, 13])",
        "minimumCoins(prices = [1, 2, 7, 5])",
        "minimumCoins(prices = [1, 3, 7, 8])",
        "minimumCoins(prices = [10, 2, 4, 3])",
        "minimumCoins(prices = [1,2,5,10,20,50,100,200,1000])",
        "minimumCoins(prices = [1, 2, 10, 2, 5, 1])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1,2,3,4])",
        "minimumSeconds(A = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(A = [1,2,3,1,2,3,1,2,3])",
        "minimumSeconds(A = [1,3,1,2,4,5])",
        "minimumSeconds(A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minimumSeconds(A = [1, 5, 3, 4, 3, 5, 9, 6, 7, 8, 10])",
        "minimumSeconds(A = [1,3,4,5,2,1,7,8,5])",
        "minimumSeconds(A = [1,3,1,2,4,3,4,1,3,3,4])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"xyz\", \"xzy\", \"ab\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"bcba\", \"abc\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"123\", \"321\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = ['xxyy', 'xx', 'yy', 'yxx'])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"edc\",\"edc\",\"def\",\"aaa\",\"aaa\",\"bce\"])",
        "maximumNumberOfStringPairs(words = [\"oooo\", \"abc\", \"cba\", \"abc\", \"oooo\"])",
        "maximumNumberOfStringPairs(words = [\"twice\", \"eight\", \"happy\", \"birthday\", \"twice\", \"happy\", \"birthday\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1,2,3,4,5], nums2 = [4,5,6,7,0])",
        "minSum(nums1 = [1, 2, 3, 0, 0, 0], nums2 = [4, 5, 6, 7, 0, 8])",
        "minSum(nums1 = [4,2], nums2 = [3,3])",
        "minSum(nums1 = [0, 0], nums2 = [1, 0])",
        "minSum(nums1 = [3, 0, 0, 0], nums2 = [2, 0, 0, 0])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [4,3,2,1])",
        "minSum(nums1 = [1, 1, 1], nums2 = [0, 2, 3])",
        "minSum(nums1 = [1, 0, 1], nums2 = [2, 0, 1])",
        "minSum(nums1 = [0, 3, 0, 4], nums2 = [0, 0, 4, 2])",
        "minSum(nums1 = [0, 3, 0, 4, 0, 5, 1, 1, 3], nums2 = [1, 2, 3, 4, 5, 1, 1, 0, 1])"
    ],
    "sample_470": [
        "findWordsContaining(words = [], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"w\")",
        "findWordsContaining(words = [\"one\", \"two\", \"three\"], x = \"b\")",
        "findWordsContaining(words = [\"Apple\", \"Orange\", \"Pineapple\"], x = \"pp\")",
        "findWordsContaining(words = [\"apples\", \"oranges\", \"kiwis\"], x = \"x\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"color\"], x = \"abc\")",
        "findWordsContaining(words = [\"abcd\", \"ab\", \"cde\", \"abcde\"], x = \"ab\")",
        "findWordsContaining(words = [\"asdf\", \"qwer\", \"asdfg\", \"qwerty\"], x = \"as\")",
        "findWordsContaining(words = [\"Coding\", \"Gaming\", \"Gaming\"], x = \"m\")",
        "findWordsContaining(words = [\"tea\",\"too\",\"aea\",\"tee\",\"tie\"], x = \"ee\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2], m = 1, k = 1)",
        "maxSum(nums = [2, 1, 4, 3], m = 1, k = 2)",
        "maxSum(nums = [1, -1], m = 2, k = 2)",
        "maxSum(nums = [1,1,2,2,2,2], m = 3, k = 2)",
        "maxSum(nums = [3, 4, 1, 1, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 2, 2, 2], m = 3, k = 3)",
        "maxSum(nums = [2, 4, 5, 3, 9], m = 3, k = 1)",
        "maxSum(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4], m = 3, k = 5)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m = 9, k = 15)",
        "maxSum(nums = [1, 4, 4, 2, 1, 6, 10, 4, 3, 8], m = 3, k = 2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [1])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [4,5,6])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 2])",
        "relocateMarbles(nums = [2,3,4], moveFrom = [], moveTo = [])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 2, 3, 3, 3, 4, 4], moveFrom = [2, 3], moveTo = [4, 5])",
        "relocateMarbles(nums = [2, 6, 3, 2, 1], moveFrom = [1, 2], moveTo = [3, 5])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [3, 1, 4, 2])",
        "minimumRightShifts(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [2, 2, 0])",
        "minimumRightShifts(nums = [2, 5, 6, 8, 3, 9, 11, 10])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4], money = 3)",
        "buyChoco(prices = [10, 2, 4, 5], money = 10)",
        "buyChoco(prices = [3, 4, 7, 10], money = 7)",
        "buyChoco(prices = [12, 12, 15], money = 10)",
        "buyChoco(prices = [10, 4, 9, 2, 12], money = 9)",
        "buyChoco(prices = [10, 10, 15, 18], money = 15)",
        "buyChoco(prices = [5, 10, 12, 13, 18], money = 15)",
        "buyChoco(prices = [10, 1, 5, 3, 10, 1, 2], money = 11)",
        "buyChoco(prices = [1, 2, 3], money = 10)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 3, 2, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 3, 2, 4, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [8,4,12,2,10,6,14,1,9,5,13,3,11,7,15], target = 0)",
        "lengthOfLongestSubsequence(nums = [4,2,4,5,3,7], target = 19)",
        "lengthOfLongestSubsequence(nums = [1, 3, 3, 3, 5, 7, 10], target = 6)",
        "lengthOfLongestSubsequence(nums = [4, 6, 9, 10, 11, 12, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25], target = 45)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 8, 11, 13, 17, 23, 26, 29, 35, 38, 41, 43, 45, 50, 54], target = 4)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbbcccc\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"abacab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaababa\")",
        "longestSemiRepetitiveSubstring(s = \"bbbaaabbbaaab\")",
        "longestSemiRepetitiveSubstring(s = \"bananabananabananan\")",
        "longestSemiRepetitiveSubstring(s = \"bbbcbbcbcccbcbcbbccbcbcccb\")",
        "longestSemiRepetitiveSubstring(s = \"bbddiissspp\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"], x = \"the\")",
        "findWordsContaining(words = [\"apples\", \"banana\", \"mango\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\"], x = \"na\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hello there\"], x = \"llo\")",
        "findWordsContaining(words = [\"ana\", \"banana\", \"nan\"], x = \"na\")",
        "findWordsContaining(words = [\"hello\", \"hola\", \"banana\"], x = \"l\")",
        "findWordsContaining(words = [\"tree\", \"apple\", \"banana\"], x = \"e\")",
        "findWordsContaining(words = [\"hello\", \"potato\", \"pot\", \"tomato\"], x = \"ot\")",
        "findWordsContaining(words = ['proper', 'working', 'bug'], x = 'p')"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\", \"10\"])",
        "lastVisitedIntegers(words = [\"4\", \"2\", \"prev\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\", \"prev\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"prev\", \"5\", \"prev\", \"3\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"prev\", \"prev\", \"1\", \"1\", \"2\", \"1\", \"1\", \"1\", \"1\", \"prev\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"abac\", s2 = \"aabc\")",
        "canBeEqual(s1 = \"1234\", s2 = \"3412\")",
        "canBeEqual(s1 = \"cofee\", s2 = \"coffe\")",
        "canBeEqual(s1 = \"eggs\", s2 = \"pqgq\")",
        "canBeEqual(s1 = \"abc\", s2 = \"fbc\")",
        "canBeEqual(s1 = \"vnuv\", s2 = \"uiep\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3,1,4,2])",
        "minimumSum(nums = [1,3,5,7,9])",
        "minimumSum(nums = [1, 3, 5, 7, 9])",
        "minimumSum(nums = [1, 3, 5, 7, 9])",
        "minimumSum(nums = [3,5,7,11])",
        "minimumSum(nums = [3,5,7,9,5])",
        "minimumSum(nums = [5,6,9,3,2,8])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 1, 2, 4, 2, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [3,3,3,2,2,2], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 8, 9, 7, 5, 10, 3, 2, 1, 2], target = 15)"
    ],
    "sample_368": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'lymph')",
        "sortVowels(s = \"yLmpH\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = 'YympH')",
        "sortVowels(s = \"uLYmpH\")",
        "sortVowels(s = 'umdHLLy')",
        "sortVowels(s = \"gygQmhzqjhqLyMpH\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2], [3,4]])",
        "matrixSum(nums = [[1,3],[2,5]])",
        "matrixSum(nums = [[1, 1, 3], [3, 4, 7], [4, 5, 8]])",
        "matrixSum(nums = [[1, 4, 5], [2, 6, 7], [3, 7, 8]])",
        "matrixSum(nums = [[3, 9, 5], [5, 7, 8], [6, 5, 4]])",
        "matrixSum(nums = [[2, 5, 6, 4, 1, 6], [2, 5, 6, 4, 1, 6], [2, 5, 6, 4, 1, 6]])",
        "matrixSum(nums = [[0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0]])",
        "matrixSum(nums = [[1,4,2,7],[4,2,12,11],[8,3,7,6]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,1,1])",
        "maximumTripletValue(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "maximumTripletValue(nums = [2, 0, 1, 5])",
        "maximumTripletValue(nums = [1, 5, 9, 7])",
        "maximumTripletValue(nums = [4, 3, 1, 1, 3])",
        "maximumTripletValue(nums = [-2, 2, 1, -9])",
        "maximumTripletValue(nums = [-7, 1, 16, 4, -8, 19, 17, 4, 1, 3, -2, 1, 16, -14, 3, 9, -10, 17, -4, -16, -12, -1, -5, -15, 4, 16, 0, -11, -2, -10, -4, -14, -16, 19, -18, 17, 0, 5, -13, 17, -1, -12, 13, -7, -11, -17, -6, 18, 15, 13, -4, -12, 4, -16, -16, -7, 11, -14, 9, 17, -12, -18, -1, -17, -11, -14, 8, 7, 1, 3, 2, -15, -7, 14, 8, 12, -13, 4, -3, -10, -14, -16, -2, 18, -1, -11, -7, 17, 0, -17, -16, 1, 19, 15, 7, 13, 12, 13, 17, -1, -18, -14, -16, 17, 17, 11, -11, 12, -13, 16, 11, 1, -11, -15, -13, 17, 14, -2, 10, -19, -12, 10, 10, 0, 1, -14, -10, 13, -16, -14, -2, -12, -10, -17, 16, 13, -17, -15, 16, 11, 14, -1, -3, 12, 1, -11, 4, 6, -11, 9, 3, -6, -10, -4, 14, -19, 1"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 1, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [1,1,2,2,1])",
        "alternatingSubarray(nums = [1,1,2,2,1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 2, 2])",
        "alternatingSubarray(nums = [1,2,1,2,1,2,1,2,1])",
        "alternatingSubarray(nums = [1, 1, 3, 2])",
        "alternatingSubarray(nums = [2, 1, 2, 2, 1, 2, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2])",
        "alternatingSubarray(nums = [1,2,2,2,1,1,2])",
        "alternatingSubarray(nums = [2, 2, 1, 2, 1, 2, 1, 2, 2, 2])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"ioiion\", k = 5)",
        "beautifulSubstrings(s = \"uglyisbeautiful\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiou\", k = 8)",
        "beautifulSubstrings(s = \"uglyisbetterthanugly\", k = 10)",
        "beautifulSubstrings(s = \"uglyisbetterthanugly\", k = 6)",
        "beautifulSubstrings(s = \"baa\", k = 14)",
        "beautifulSubstrings(s = \"cdcdcdcdeeeefg\", k = 9)",
        "beautifulSubstrings(s = 'abaiab', k = 1)",
        "beautifulSubstrings(s = \"adeo\", k = 3)",
        "beautifulSubstrings(s = \"enheufadqwdcq\", k = 3)"
    ],
    "sample_449": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aaba\")",
        "minChanges(s = \"22\")",
        "minChanges(s = \"xxxyyzz\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"0000000\")",
        "minimumSteps(s = \"011011100\")",
        "minimumSteps(s = \"1000001000000100000\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"Name12345678901\", \"Name12345678910\"])",
        "countSeniors(details = [\"student1112019\", \"student1122019\", \"student1132019\"])",
        "countSeniors(details = [\"Name1999January\", \"Name2000February\", \"Name1997February\"])",
        "countSeniors(details = [\"TitusAndronicus2005AnakinSkywalker\", \"LukeSkywalker1999ObiWanKenobi\"])",
        "countSeniors(details = [\"191125-122353\"])",
        "countSeniors(details = ['Name: Emily Jane\\nAge: 23\\nDepartment: Art'])",
        "countSeniors(details = [\"08/04/1980\",\"29/11/1978\",\"11/06/1985\"])",
        "countSeniors(details = [\"1990052336323854445\"])",
        "countSeniors(details = [\"Homer Simpson1989F\", \"Burns42F\", \"Waylon Smithers6F\", \"Carl Carlson1934M\", \"Lenny Leonard51F\", \"Montgomery Burns60M\"])",
        "countSeniors(details = [\"6/14/1981\", \"1/24/1998\", \"4/17/1984\", \"10/22/2000\", \"5/2/1988\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1])",
        "minGroupsForValidAssignment(nums = [3,5,1,4])",
        "minGroupsForValidAssignment(nums = [1,2,1,2,1,2])",
        "minGroupsForValidAssignment(nums = [2,3,4,5,6,7,8,10])",
        "minGroupsForValidAssignment(nums = [8,2,2,8])",
        "minGroupsForValidAssignment(nums = [4,10,15,20])",
        "minGroupsForValidAssignment(nums = [3,2,4,3,2,3,5,2])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 0], [0, 1]], k = 1)",
        "countPairs(coordinates = [[1,1],[3,4]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [1, 1]], k = 2)",
        "countPairs(coordinates = [[1,2],[2,2],[2,3],[3,4],[4,5],[3,5]], k = 1)",
        "countPairs(coordinates = [[1, 4], [4, 4], [3, 6]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 2], [2, 3], [3, 4], [3, 5], [4, 4]], k = 3)",
        "countPairs(coordinates = [[0, 0], [1, 1], [0, 1], [1, 2], [2, 1], [1, 0]], k = 1)",
        "countPairs(coordinates = [[1,2],[2,2],[2,3],[1,3],[1,4],[3,3],[3,4]], k = 2)",
        "countPairs(coordinates = [[1, 3], [2, 4], [2, 5], [3, 1]], k = 4)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 1, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 2, k = 3)",
        "maxSum(nums = [0,0,0,0,0], m = 1, k = 3)",
        "maxSum(nums = [8, 1, 2, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [0] * 10, m = 1, k = 1)",
        "maxSum(nums = [4,5,11,10], m = 2, k = 3)",
        "maxSum(nums = [904, 40, 523, 12, 454, 3, 123, 445], m = 2, k = 3)",
        "maxSum(nums = [5, 1, 4, 6, 3], m = 2, k = 2)"
    ],
    "sample_452": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"abbab\")",
        "minChanges(s = \"aabbc\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"1111\")",
        "minChanges(s = \"bank\")",
        "minChanges(s = \"314159265\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,3,5,7], nums2 = [2,4,6,8])",
        "minOperations(nums1 = [1,3,5,7], nums2 = [2,4,6,8])",
        "minOperations(nums1 = [2,3,1,5,4], nums2 = [1,2,3,4,7])",
        "minOperations(nums1 = [2,3,4], nums2 = [1,2,3])",
        "minOperations(nums1 = [1,2,3,5,0,3], nums2 = [2,1,3,4,2,3])",
        "minOperations(nums1 = [1,2,3,5,0], nums2 = [1,0,3,3,5])",
        "minOperations(nums1 = [1,2,5], nums2 = [3,4,2])",
        "minOperations(nums1 = [1, 3, 5, 2, 4, 7], nums2 = [1, 2, 4, 6, 5, 9])",
        "minOperations(nums1 = [2,2,1], nums2 = [1,1,0])",
        "minOperations(nums1 = [1,2,5,8,3,2], nums2 = [2,3,5,8,4,6])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '001110100', k = 2)",
        "shortestBeautifulSubstring(s = \"0111011010\", k = 2)",
        "shortestBeautifulSubstring(s=\"11111211111111111\", k=3)",
        "shortestBeautifulSubstring(s = '101112131111', k = 4)",
        "shortestBeautifulSubstring(s = \"11100110100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"000110100111\", k = 3)",
        "shortestBeautifulSubstring(s = \"00101001010101110001\", k = 3)",
        "shortestBeautifulSubstring(s = '01111101111100', k = 1)",
        "shortestBeautifulSubstring(s = \"11101101110110111001110110101110110110\", k = 3)",
        "shortestBeautifulSubstring(s
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,1,1,1,1,1])",
        "maximumTripletValue(nums = [1, 1, 1, -1, -1, -1])",
        "maximumTripletValue(nums = [0, 1, 1, 2])",
        "maximumTripletValue(nums = [1,-1,-1,0,0,2])",
        "maximumTripletValue(nums = [3, 0, 2, 5, 4, 6, 3])",
        "maximumTripletValue(nums = [1, 2, -1, -1, 3])",
        "maximumTripletValue(nums = [2, 2, 3, 1])",
        "maximumTripletValue(nums = [2, 1, 3, 2])",
        "maximumTripletValue([1, 1, 0, 2])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 20)",
        "distributeCandies(n = 15, limit = 3)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [7,7,7,7,7,7,7,7,7,7])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3,4,4,4,4,5,5])",
        "minGroupsForValidAssignment([4,4,3,3,5,5])",
        "minGroupsForValidAssignment(nums = [7,2,5,8,10])",
        "minGroupsForValidAssignment(nums = [5,5,6,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [5,3,7,1,2,10])",
        "minGroupsForValidAssignment(nums=[2,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [7, 2, 3, 1, 5, 4, 1, 2, 3, 3])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 0])",
        "minSum(nums1 = [0, 2, 3], nums2 = [2, 0, 10])",
        "minSum(nums1 = [0, 0, 1], nums2 = [1, 0, 2])",
        "minSum(nums1 = [1, 2, 1], nums2 = [1, 2, 1])",
        "minSum(nums1 = [0, 0, 1, 1, 1], nums2 = [1, 0, 1, 0, 1])",
        "minSum(nums1 = [1, 0, 2], nums2 = [3, 4])",
        "minSum(nums1 = [0,1,0], nums2 = [1,2,3])",
        "minSum(nums1 = [1, 2, 2], nums2 = [3, 3, 3])",
        "minSum(nums1 = [2, 0, 2], nums2 = [1, 1, 1])",
        "minSum(nums1 = [3, 0, 1, 5], nums2 = [0, 3, 4, 1])"
    ],
    "sample_453": [
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"cab\")",
        "minChanges(s = \"aabbc\")",
        "minChanges(s = \"1212\")",
        "minChanges(s = \"aaaabbbb\")",
        "minChanges(\"cab\")",
        "minChanges(s = \"facb\")",
        "minChanges(s = \"cabbb\")",
        "minChanges(s = \"xxxsx\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"ioiioi\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"ioiioi\", k = 3)",
        "beautifulSubstrings(s = \"ioiioi\", k = 3)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s=\"ioiioi\", k=5)",
        "beautifulSubstrings(s = \"g\", k = 1)",
        "beautifulSubstrings(s = \"hbhb\", k = 1)",
        "beautifulSubstrings(s = \"cdbeeeabdcbacddeedebd\", k = 4)",
        "beautifulSubstrings(s = \"iosxekxobifsaosaeiougesux\", k = 4)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"ioiion\", k = 2)",
        "beautifulSubstrings(s = \"ioiion\", k = 2)",
        "beautifulSubstrings(s = \"ioiioi\", k = 3)",
        "beautifulSubstrings(s = \"ioi\", k = 2)",
        "beautifulSubstrings(s = \"ioiioi\", k = 5)",
        "beautifulSubstrings(s = \"ioihihi\", k = 2)",
        "beautifulSubstrings(s = \"cbaeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeeeioooaauu\", k = 3)",
        "beautifulSubstrings(s = \"ioimmmmmmpy\", k = 3)",
        "beautifulSubstrings(s = 'ioihiiooiiyay', k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"PlYmpH\")",
        "sortVowels(s = \"YMLhP\")",
        "sortVowels(s = 'hYmL')",
        "sortVowels(s = \"yMiHpL\")",
        "sortVowels(s = 'yamaha')",
        "sortVowels(s = \"lyMePH\")",
        "sortVowels(s = \"ThYmYL\")",
        "sortVowels(s = 'YmmmH')",
        "sortVowels(s = 'LAHYMPH')"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6])",
        "minimumSeconds(nums = [3, 1, 2, 4])",
        "minimumSeconds(nums = [4, 3, 2, 7, 8, 2, 3, 1])",
        "minimumSeconds(nums = [4, 2, 1, 4, 3])",
        "minimumSeconds(nums = [3, 3, 3, 3, 2, 2, 2, 1])",
        "minimumSeconds(nums = [4, 3, 3, 2])",
        "minimumSeconds(nums = [6, 6, 5, 5, 4, 3, 2, 1])",
        "minimumSeconds(nums = [0, 4, 5, 9, 11, 14, 15, 16, 2, 6, 7, 8, 10, 12, 13, 3])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [1, 5, 11, 5])",
        "minimumSum(nums = [2, 3, 7, 5, 6])",
        "minimumSum(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minimumSum(nums = [7, 5, 9, 1, 0])",
        "minimumSum(nums = [4, 2, 7, 3, 2, 9])",
        "minimumSum(nums = [1, 3, 3, 1, 1, 5, 5, 2])",
        "minimumSum(nums = [4, 8, 12, 16, 11, 9, 7, 10])"
    ],
    "sample_417": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 9)",
        "minOperations(nums = [1, 3, 4, 2], k = 6)",
        "minOperations(nums = [2,6,4,8,10], k = 12)",
        "minOperations(nums = [5, 6, 8], k = 10)",
        "minOperations(nums = [4, 5, 6, 7, 8], k = 1)",
        "minOperations(nums = [2, 5, 1, 3, 4], k = 1)",
        "minOperations(nums = [1,4,9,2,10,6], k = 10)",
        "minOperations(nums = [2,4,5,3,2,6,4,3,4,5,4], k = 7)",
        "minOperations(nums = [2, 5, 1, 2, 4, 0, 0, 4, 2, 3], k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 1, 2], m = 2, k = 2)",
        "maxSum(A = [1, 2, 1, 2, 1, 2, 1, 2, 1], m = 3, k = 3)",
        "maxSum(A = [1,2,1,2], m = 3, k = 2)",
        "maxSum(A = [1, 2, 1, 2, 1, 2, 1, 2, 1], m = 2, k = 3)",
        "maxSum(A = [2, 4, 1, 2, 7, 8, 4, 6], m = 2, k = 3)",
        "maxSum(A = [2, 3, 4, 2], m = 1, k = 2)",
        "maxSum(A = [1, 1, 2, 3, 1, 2, 3, 4], m = 1, k = 3)",
        "maxSum(A = [4, 5, 17, 9, 10, 12, 8], m = 1, k = 3)",
        "maxSum(A = [3, 8, 9, 1, 11, 12, 7, 3, 9], m = 2, k = 5)",
        "maxSum(A = [4, 2, 6, 1, 1, 7, 7, 7, 0, 6, 1, 4, 7], m = 3, k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"0101010\")",
        "minimumSteps(s = \"00000001\")",
        "minimumSteps(s = \"00001111\")",
        "minimumSteps(s = \"01001000\")",
        "minimumSteps(s = \"010100101\")",
        "minimumSteps(s = \"0100101001\")",
        "minimumSteps(s = \"000000000000000001\")",
        "minimumSteps(s = \"110000100000\")",
        "minimumSteps(s = \"01010001001010100\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 2, 1])",
        "maxSubarrays(nums = [0, 1, 1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 0])",
        "maxSubarrays(nums = [-1, -2, -3, -4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 0, 7])",
        "maxSubarrays(nums = [1, 0, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0, 1, 1, 1, 1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [1, 3, 3, 9, 9, 1, 1])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1,1], money = 2)",
        "buyChoco(prices = [2, 5], money = 1)",
        "buyChoco(prices = [2, 3, 5, 7], money = 10)",
        "buyChoco(prices = [10,20,5], money = 15)",
        "buyChoco(prices = [20, 30, 40, 50], money = 20)",
        "buyChoco(prices = [10, 20, 5], money = 21)",
        "buyChoco(prices = [100, 190], money = 30)",
        "buyChoco(prices = [3, 12, 45, 9, 10], money = 20)"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000000000\")",
        "minimumSteps(s = \"0101010\")",
        "minimumSteps(s = \"101010101\")",
        "minimumSteps(s = \"10000000\")",
        "minimumSteps(s = \"010101010101010101\")",
        "minimumSteps(s = \"0100100100\")",
        "minimumSteps(s = \"0011001100110000\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 7, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 5, 5, 7, 7])",
        "minLengthAfterRemovals(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [3,3,3,2])",
        "minLengthAfterRemovals(nums = [2,1,2,2,3,1,2,2,1])",
        "minLengthAfterRemovals(nums = [2,2,2,3,3,4,5,6])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 1, 1, 1, 2, 2, 2, 0])",
        "minLengthAfterRemovals(nums = [4,1,5,2,4,1,5,2])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [0,1,1,3], k = 3)",
        "minOperations(nums = [1,2,2,3], k = 2)",
        "minOperations(nums = [1, 3, 5], k = 1)",
        "minOperations(nums = [2,5,4,1,2,6,8,4], k = 3)",
        "minOperations(nums = [5,4,3], k = 1)",
        "minOperations(nums = [0,0,0,1], k = 2)",
        "minOperations(nums = [2, 5, 4, 1, 7, 6], k = 2)",
        "minOperations(nums = [0,5,9,1,9,8,8,5,8,1,8,9,0,5], k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 1, 2, 2, 3])",
        "isGood(nums = [1, 2, 3, 2])",
        "isGood(nums = [1, 2, 2, 3, 4])",
        "isGood(nums = [1, 1, 2, 2, 3, 3, 4, 5])",
        "isGood(nums = [1, 1, 2, 2, 3, 4, 4])",
        "isGood(nums = [1, 2, 3, 3, 3, 4, 4])",
        "isGood(nums = [1,2,3,2,3])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7])",
        "isGood(nums = [1, 2, 3, 4, 5, 5, 6, 7, 8])",
        "isGood(nums = [2,3,3,3,3,3,4])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 8)",
        "isFascinating(135)",
        "isFascinating(n = 567)",
        "isFascinating(n = 567)",
        "isFascinating(28)",
        "isFascinating(191)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,4,6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 10])",
        "isGood(nums = [1,2,3,4,4])",
        "isGood(nums = [1,3,5])",
        "isGood(nums = [2,3,4,5,6,7,8,10,10])",
        "isGood(nums = [3, 1, 4])",
        "isGood(nums = [1,2,3,4,5,7,7,8,9,10])",
        "isGood(nums = [1,2,3,4,5,6,7,9,10,11,11])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [4, 2, 1, 3])",
        "minimumSeconds(nums = [1, 2, 2, 1])",
        "minimumSeconds(nums = [10, 3])",
        "minimumSeconds(nums = [4, 1, 1, 5])",
        "minimumSeconds(nums = [2, 5, 1, 6, 3, 4, 7, 0])",
        "minimumSeconds(nums = [5, 6, 7, 1, 10, 2])",
        "minimumSeconds(nums = [6, 7, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [1,1,3,1,3,4,1,3,1,3])",
        "minimumSeconds(nums = [4, 4, 6, 1, 9, 7, 3])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [5, 1, 3])",
        "minimumRightShifts(nums = [2, 3, 6, 10, 11])",
        "minimumRightShifts(nums = [3, 7, 6, 5, 4, 8])",
        "minimumRightShifts(nums = [2, 3, 2, 5, 5, 1, 2, 4, 3])"
    ],
    "sample_362": [
        "isGood(nums = [1,2,3,4,6])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1,2,4,5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "isGood(nums = [1,3,2])",
        "isGood(nums = [1,3,4,5])",
        "isGood(nums = [1,3,2,4,5])",
        "isGood(nums = [1,2,3,4,5,6,7,11,12,13])",
        "isGood(nums = [2, 4, 5, 6, 1, 3])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2], nums2 = [1, 1])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [5,6,7,8])",
        "minOperations(nums1 = [1,2,1], nums2 = [1,1,1])",
        "minOperations(nums1 = [1,1,1,1,1,1,1], nums2 = [1,2,3,4,5,6,7])",
        "minOperations(nums1 = [4, 2, 3], nums2 = [5, 2, 6])",
        "minOperations(nums1 = [3,1,2,3], nums2 = [1,2,3,3])",
        "minOperations(nums1 = [5, 6, 7, 8], nums2 = [3, 3, 7, 9])",
        "minOperations(nums1 = [3, 5, 6, 7], nums2 = [9, 1, 6, 2])",
        "minOperations(nums1 = [3, 5, 6, 1], nums2 = [9, 7, 6, 8])",
        "minOperations(nums1 = [5,6,1,4,7], nums2 = [1,4,2,1,1])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1000111001011\", k = 9)",
        "shortestBeautifulSubstring(s = \"10911\", k = 4)",
        "shortestBeautifulSubstring(s = '1122', k = 2)",
        "shortestBeautifulSubstring(s = '1234455', k = 2)",
        "shortestBeautifulSubstring(s = \"aaazz\", k = 2)",
        "shortestBeautifulSubstring(s = \"100010100\", k = 3)",
        "shortestBeautifulSubstring(s = \"2221111222111\", k = 3)",
        "shortestBeautifulSubstring(s = \"3132222111\", k = 4)",
        "shortestBeautifulSubstring(s = \"33352335\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [10, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [4, 1, 1])",
        "minGroupsForValidAssignment(nums = [10, 20, 30, 40, 50, 60, 70, 80])",
        "minGroupsForValidAssignment(nums = [40, 20, 50, 10, 30])",
        "minGroupsForValidAssignment(nums = [3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [10, 10, 20, 20, 20])",
        "minGroupsForValidAssignment(nums = [1, 3, 10, 5, 9, 2])",
        "minGroupsForValidAssignment(nums = [3, 2, 4, 2, 3, 4, 3, 1, 1, 1])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"11010\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"1111111111111111\")",
        "minimumSteps(s = \"001111\")",
        "minimumSteps(s = \"1000101101110111\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [5, 1, 3, 4, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [5,1,3,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,3,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 1, 4, 8, 7], target = 5)",
        "lengthOfLongestSubsequence(nums = [2,3,4,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5, 11], target = 3)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1,2,3,4,5,6,7])",
        "minimumSum(nums = [2,3,1,1,4])",
        "minimumSum(nums = [2,1,1,2])",
        "minimumSum(nums = [2,5,3,7,6,8,9,1])",
        "minimumSum(nums = [3,4,1,6])",
        "minimumSum(nums = [6, 7, 3, 5, 9, 12, 1, 8, 10])",
        "minimumSum(nums = [-2, -1, 0, 2, 7])",
        "minimumSum(nums = [3, 7, 3, 3, 2, 12, 7, 2, 14, 8])",
        "minimumSum(nums = [6, 4, 4, 7, 1, 9, 8, 5, 9, 8, 3, 4, 6, 2, 8, 8, 6, 2, 2, 8, 5, 3, 1, 6, 2, 4, 5, 6, 5, 2, 6, 5, 7, 7, 1, 7, 5, 6, 6, 2, 7, 4, 3, 2, 4, 4, 6, 8, 5, 5, 4, 6, 8, 9, 3, 3, 6, 2, 9, 6, 9, 2, 7, 7, 1, 9, 7, 6, 6, 6, 8, 5, 6, 1, 3, 3, 8, 3, 7, 5, 9, 8, 4, 2, 1, 3, 3, 3, 1, 2, 5, 8, 6, 1, 4, 4, 8, 3, 9, 6, 6, 4, 4, 6, 1, 1, 8, 9, 9, 3, 5, 5, 9, 7, 8, 5, 4, 3, 8, 8, 8, 2, 7, 1, 9, 4, 9, 5, 7, 7, 9, 8, 9, 9, 2, 5, 5, 5, 9, 3, 6, 5, 7, 7, 7, 4, 9, 7, 3, 4, 1, 9, 5, 7, 9, 4, 2, 7, 3, 2, 5, 9, 7, 9, 5, 9, 9, 4, 8, 2, 5, 9, 6,"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "maxSum(nums = [3, 4, 4, 6, 5], m = 2, k = 3)",
        "maxSum(nums = [3, 4, 5, 1, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [29, 6, 10], m = 3, k = 2)",
        "maxSum(nums = [1,2,-1,3,4,-1], m = 1, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6], m = 6, k = 2)",
        "maxSum(nums = [2, 4, 4, 5, 6, 9, 9, 9, 9, 9], m = 3, k = 5)",
        "maxSum(nums = [3, 4, 1, 9, 10, 10, 7, 8, 4, 3, 1, 2, 6, 8, 5], m = 4, k = 3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"\", s2 = \"\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"abcxyz\")",
        "findMinimumOperations(s1 = \"aaab\", s2 = \"aab\", s3 = \"aaab\")",
        "findMinimumOperations(s1 = \"ababa\", s2 = \"ababa\", s3 = \"ababab\")",
        "findMinimumOperations(s1 = \"python\", s2 = \"pythonic\", s3 = \"pythony\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abxd\", s3 = \"abcw\")",
        "findMinimumOperations(s1 = \"xhxxaw\", s2 = \"xxaw\", s3 = \"xaw\")"
    ],
    "sample_427": [
        "minOperations(nums = [1,2,2,4,2])",
        "minOperations(nums = [2, 2, 2, 4, 2])",
        "minOperations(nums = [1,2])",
        "minOperations(nums = [1,2,4,4,4,5])",
        "minOperations(nums = [1, 2, 2, 2, 2, 3])",
        "minOperations(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2])",
        "minOperations(nums = [1, 2, 2, 4, 2, 5, 2, 2, 2, 4, 4, 4, 4, 1])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 4])",
        "minOperations(nums = [1, 3, 1, 2, 1, 1, 2, 3])",
        "minOperations(nums = [4, 4, 5, 3, 5, 3, 5, 2, 1, 2, 4])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 4, 10, 20])",
        "minimumCoins(prices = [4, 1, 2, 3])",
        "minimumCoins(prices = [2, 3, 5, 7])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 5000, 10000])",
        "minimumCoins(prices = [1, 3, 5, 7, 9, 11, 15, 19])",
        "minimumCoins(prices = [1, 1, 1, 2, 2, 2, 3, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 1, 4, 2, 6, 1])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [1,1,1,1])",
        "minimumSeconds(nums=[1,2,3,4,5,6,7])",
        "minimumSeconds(nums = [2,1,2,2,1,2,2,1])",
        "minimumSeconds(nums=[3,1,2,4,3])",
        "minimumSeconds(nums = [1, 1, 2, 3])",
        "minimumSeconds(nums = [1,2,2,4,5])",
        "minimumSeconds(nums=[3, 2, 1, 2, 1, 1, 2, 3])",
        "minimumSeconds(nums = [3, 1, 4, 2, 5, 6])",
        "minimumSeconds(nums = [1,3,2,4,2,3,5,4,2,2,3,1,1,5,4,3,2,5,4,3,2,5,3,1,2,5,4,3,2,4,2,3,5,4,3,2,2,5,4,3,2,5,3,1,2,5,4,3,2,4,2,3,5,4,3,2,2,5,4,3,2,5,3,1,2,5,4,3,2,4,2,3,5,4,3,2,2,5,4,3,2,5,3,1,2,5,4,3,2,4,2,3,5,4,3,2,2,5,4,3,2,5,3,1,2,5,4,3,2,4,2,3,5,4,3,2,2,5,4,3,2,5,3,1,2,5,4,3,2,4,2,3,5,4,3,2,2,5,4,3,2,5,3,1,2,5,4,3,2,4,2,3,5,4,3,2,2,5,4,3,2,5,3,1,2,5,4,3,2,4,2,3,5,4,3,2,2,5,4,3,2,5,3,1,2,5,4,3,2,4,2,3,5,4,3,2,2,5,4,3,2,5,3,1,2,5,4,3,2,4,2,3,5,4,3,2,2,5,4,3,2,5,3,1,2,5,4,3,2,4,2,3,5,4,3,2,2,5,4,3,2,5,3,1,2,5,4,3,2,4,2,3,5,4,3,2,2,5,4,3,2,5,3,1"
    ],
    "sample_448": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"bank\")",
        "minChanges(s = \"foo\")",
        "minChanges(s = \"xxyzz\")",
        "minChanges(s = \"abcddbc\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [9, 8, 5, 3, 1], limit = 7)",
        "lexicographicallySmallestArray(nums = [8, 3, 1, 9, 5], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 6, 8, 9, 11], limit = 5)",
        "lexicographicallySmallestArray(nums = [5, 3, 1, 9, 7, 8], limit = 6)",
        "lexicographicallySmallestArray(nums = [3, 1, 9, 7, 5], limit = 4)",
        "lexicographicallySmallestArray(nums = [2, 6, 3, 4, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [5, 6, 1, 3, 9, 10], limit = 1)",
        "lexicographicallySmallestArray(nums = [2, 4, 8, 10, 9, 15], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 5, 8, 3, 9, 4, 5, 8, 3, 9], limit = 7)",
        "lexicographicallySmallestArray(nums = [5, 9, 11, 3, 8, 7, 2], limit = 8)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1, 2, 3, 2, 1])",
        "sumCounts(nums = [1,1,1,2,2,3])",
        "sumCounts(nums = [0,1,2])",
        "sumCounts(nums = [0,1,2,3])",
        "sumCounts(nums = [2,2,3,3,3])",
        "sumCounts(nums = [4, 3, 2, 1, 1, 2, 3])",
        "sumCounts(nums = [2,1,1,3,2,1,1,3])",
        "sumCounts(nums = [2, 2, 1, 1, 1, 3, 3, 1, 1, 2, 2])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [1,2,3,4,-1,-2,-3,-4])",
        "maximumTripletValue(nums = [1,2,-3,-4])",
        "maximumTripletValue(nums = [4,3,2,1])",
        "maximumTripletValue(nums = [2, 2, 2, 2])",
        "maximumTripletValue(nums = [1, 2, 3, -1, -5, 4, 5])",
        "maximumTripletValue(nums = [1, -3, 4, -2, -1])",
        "maximumTripletValue(nums = [2, -1, -3, -1, 2])",
        "maximumTripletValue(nums = [-2, -7, -1, -5, -3])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"moomoo\", k = 5)",
        "beautifulSubstrings(s = \"abbababaab\", k = 2)",
        "beautifulSubstrings(s = \"sienna\", k = 3)",
        "beautifulSubstrings(s = \"aeiouuouie\", k = 1)",
        "beautifulSubstrings(s = \"aeiouapq\", k = 2)",
        "beautifulSubstrings(s = \"doin\", k = 1)",
        "beautifulSubstrings(s = \"spell\", k = 1)",
        "beautifulSubstrings(s = \"lfake\", k = 2)",
        "beautifulSubstrings(s = \"fqegjpldsjukrbcxz\", k = 10000)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 3, 2, 5], target = 7)",
        "countPairs(nums = [1,3,2,2], target = 4)",
        "countPairs(nums = [1,4,2], target = 6)",
        "countPairs(nums = [1, 3, 4, 5, 6, 7], target = 10)",
        "countPairs(nums = [1,3,4,5,2], target = 7)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 12, limit = 3)",
        "distributeCandies(n = 10, limit = 1)",
        "distributeCandies(n = 15, limit = 3)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 12, limit = 4)",
        "distributeCandies(n = 13, limit = 2)",
        "distributeCandies(n = 50, limit = 4)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2], nums2 = [1, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minOperations(nums1 = [1, 2, 1], nums2 = [1, 2, 1])",
        "minOperations(nums1 = [2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums1 = [4, 2, 5], nums2 = [5, 2, 6])",
        "minOperations(nums1 = [2, 3, 4, 5], nums2 = [1, 5, 10, 20])",
        "minOperations(nums1 = [1,3,5,7], nums2 = [1,4,5,7])",
        "minOperations(nums1 = [2,3,5], nums2 = [6,4,6])",
        "minOperations(nums1 = [4, 2, 2, 1], nums2 = [1, 3, 4, 4])"
    ],
    "sample_426": [
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [3,1,1,1,2,2,2,3])",
        "minOperations(nums = [3, 4, 6, 1, 1])",
        "minOperations(nums = [2, 7, 2, 3, 2, 7])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 4, 5, 1, 2, 3])",
        "minOperations(nums = [1,1,2,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,10,10,10,10,10,10,10,10,10,10,10])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"111200111\", k = 3)",
        "shortestBeautifulSubstring(s = \"00010100\", k = 2)",
        "shortestBeautifulSubstring(s = '1233211', k = 3)",
        "shortestBeautifulSubstring(s = \"00112233\", k = 2)",
        "shortestBeautifulSubstring(s = \"00000000011110000000000\", k = 3)",
        "shortestBeautifulSubstring(s = '00010100011', k = 2)",
        "shortestBeautifulSubstring(s = '1111111111111', k = 0)",
        "shortestBeautifulSubstring(s = \"11001100111\", k = 3)",
        "shortestBeautifulSubstring(s = \"0110100101001110000\", k = 3)",
        "shortestBeautifulSubstring(s = \"001111111111000000000111111000111111001111100000000111111000111111001111100000000111111000111111001111100000000111111000111111001111100\", k = 4)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8])",
        "minimumSeconds(nums = [1,3,5,7,9,2,4,6,8,10])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1,1,1,1])",
        "minimumSeconds(nums = [3,3,1,1])",
        "minimumSeconds(nums = [3, 1, 1, 1, 2, 1])",
        "minimumSeconds(nums = [2, 3, 5, 12, 11])",
        "minimumSeconds(nums = [5, 3, 1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1,3,2,4,2,3,2,1,3,4,2])",
        "minimumSeconds(nums = [1,3,2,4,3,1,2,3,1,4,2,3,4])",
        "minimumSeconds(nums = [2,2,1,3,5,5,7,7,2,8,2,2])"
    ],
    "sample_428": [
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1,1,1,2,2,2,3,3,3,3])",
        "minOperations(nums = [3, 1, 3, 1, 2])",
        "minOperations(nums = [0,1,1,1,2,2,2,3,3,3])",
        "minOperations(nums = [1,1,1,1,1,1,2,2,2,2,2,2])",
        "minOperations(nums = [2,2,2,3,3,4,4,4,4,4,5,5,5,6])",
        "minOperations(nums = [1, 2, 2, 4, 2, 5, 2, 2, 2, 4, 2, 5, 2, 2, 2])",
        "minOperations(nums = [1,2,2,2,2,2,3,3,4,4,5,5,6])",
        "minOperations(nums = [1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "alternatingSubarray(nums = [1,1,0,1,1,1])",
        "alternatingSubarray(nums = [5,1,2,3,4])",
        "alternatingSubarray(nums = [1, 1, 3, 2, 2, 4, 7, 1, 0, 1])",
        "alternatingSubarray(nums = [4, 2, 5, 3, 7, 10, 8, -1, 2, -3, 9, 6])",
        "alternatingSubarray(nums = [2, 4, 1, 7, 4, 8, 2, 1, 4, 5])",
        "alternatingSubarray(nums = [4,2,3,5,4,5,2,5,1,2,4,1,3,2,3,4,1,1,1,1,2,3,4])",
        "alternatingSubarray(nums = [-6, -2, -8, 1, 9, -5, 4, -11, -11, 6, -5, 10, 9, -4, -10, 8, -6, -10, 3, -11])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,2])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 1, 3, 2, 2, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4, 4, 4, 7, 8])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"xxyy\", \"yyzz\", \"zzzz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"acb\",\"bac\",\"abc\"])",
        "maximumNumberOfStringPairs(words = [\"aaa\", \"aaa\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"from\", \"world\"])",
        "maximumNumberOfStringPairs(words = [\"aaa\",\"ab\",\"aba\"])",
        "maximumNumberOfStringPairs(words = [\"xzy\", \"abc\", \"xzy\", \"xzy\", \"abc\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"codewars\", \"loop\", \"practice\", \"tasks\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cd\", \"zebra\", \"dog\", \"biz\"])",
        "maximumNumberOfStringPairs(words = [\"codewars\", \"inhabit\", \"follow\", \"waterfalls\"])",
        "maximumNumberOfStringPairs(words = [\"like\", \"this\", \"little\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"ab\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"zzz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"zx\", str2 = \"zay\")",
        "canMakeSubsequence(str1 = 'z', str2 = 'bc')",
        "canMakeSubsequence(str1 = \"zxzxzxzx\", str2 = \"zzzzzzzz\")",
        "canMakeSubsequence(str1 = \"zbk\", str2 = \"zbaack\")",
        "canMakeSubsequence(str1 = \"aacd\", str2 = \"baca\")",
        "canMakeSubsequence(str1 = \"mandarin\", str2 = \"ndarrrn\")",
        "canMakeSubsequence(str1 = \"aqm\", str2 = \"nzaqm\")",
        "canMakeSubsequence(str1 = \"zdngb\", str2 = \"agdzn\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"ababaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
        "longestSemiRepetitiveSubstring(s = \"bbbbbbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdef\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc",
        "longestSemiRepetitiveSubstring(s = \"AABBBBC\")",
        "longestSemiRepetitiveSubstring(s = \"bcbcbcb\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2,1,3,4,3], m = 3, k = 3)",
        "maxSum(nums = [1,2,1,2,1,3,4,7], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 1, 2, 1], m = 3, k = 3)",
        "maxSum(nums = [1,1,1], m = 2, k = 2)",
        "maxSum(nums = [1,2,-1,5,-2,3], m = 3, k = 3)",
        "maxSum(nums = [2,3,4,1], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,1], m = 2, k = 3)",
        "maxSum(nums = [2, 7, 9, 2, 2, 2], m = 2, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"or\")",
        "findWordsContaining(words = [\"hello\", \"hella\", \"world\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"wonder\"], x = \"or\")",
        "findWordsContaining(words = [\"python\", \"biology\", \"mathematics\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"banana\", \"computer\"], x = \"ban\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"coffee\"], x = \"o\")",
        "findWordsContaining(words = [\"pizza\", \"banana\", \"water\", \"ice\"], x = \"n\")",
        "findWordsContaining(words = [\"here\", \"we\", \"go\", \"olleh\"], x = \"e\")",
        "findWordsContaining(words = [\"google\", \"apple\", \"banana\", \"for\", \"google\"], x = \"go\")",
        "findWordsContaining(words = [\"hello\", \"pants\", \"potato\", \"bee\"], x = \"t\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,1,2,2,3,3], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [2,3,1], moveFrom = [3], moveTo = [2])",
        "relocateMarbles(nums=[2,1,1], moveFrom=[0,0,1], moveTo=[1,1,2])",
        "relocateMarbles(nums = [2,5,2,2,3], moveFrom = [4], moveTo = [2])",
        "relocateMarbles(nums=[1,1,2,2], moveFrom=[0,1,2,3], moveTo=[3,0,1,2])",
        "relocateMarbles(nums = [1,2,2,2,3], moveFrom = [2,2,3], moveTo = [2,2,3])",
        "relocateMarbles(nums = [1,2,3,4,2,2,3], moveFrom = [2,4], moveTo = [3,1])",
        "relocateMarbles(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], moveFrom = [2, 3, 4, 5, 1, 1, 2, 3, 4, 5], moveTo = [3, 4, 5, 1, 2, 3, 4, 5, 1, 2])",
        "relocateMarbles(nums = [1,2,2,3,4,5,6,7,8], moveFrom = [4,6], moveTo = [1,7])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [2, 1, -5])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8])",
        "maximumTripletValue(nums = [1, 5, 3, 2, 10])",
        "maximumTripletValue(nums = [2, -1, 0])",
        "maximumTripletValue(nums = [0, 1, 1, -1])",
        "maximumTripletValue(nums = [1, -2, -4, 3, 8])",
        "maximumTripletValue(nums = [1, -5, 2, -4, 3, 7])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abcbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabccd\")",
        "longestSemiRepetitiveSubstring(s = \"abacabd\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabababbb\")",
        "longestSemiRepetitiveSubstring(s = \"xabcbaabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abacdbd\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbbbccccccddddddd\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"\", \"\", \"\", \"\"])",
        "maximumNumberOfStringPairs(words = [\"cba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"dog\", \"cat\", \"dog\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"yz\", \"aba\", \"xzy\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\", \"baa\", \"bba\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"zyx\", \"aba\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"civic\", \"noyb\", \"dcud\", \"remydet\", \"xerb\", \"erivr\", \"vihci\", \"ybnxo\"])",
        "maximumNumberOfStringPairs(words = [\"oh\", \"wb\", \"pb\", \"wq\", \"oo\", \"bb\", \"sj\", \"oy\", \"sf\", \"qm\"])",
        "maximumNumberOfStringPairs(words = [\"vxg\", \"jzv\", \"gpy\", \"vcd\", \"zrk\", \"d\", \"zc\", \"h\", \"l\", \"rt\", \"gmj\", \"k\", \"iq\", \"ek\", \"rw\", \"jzv\", \"y\", \"u\", \"tv\", \"qx\", \"gq\", \"wm\", \"u\", \"o\", \"qr\", \"f\", \"nf\", \"zjh\", \"v\", \"n\", \"gv\", \"x\", \"r\", \"n\", \"t\", \"bq\", \"o\", \"d\", \"f\", \"q\", \"h\", \"e\", \"w\", \"w\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[2, 3], [3, 5]])",
        "matrixSum(nums = [[1, 1, 0], [1, 0, 1]])",
        "matrixSum(nums = [[3, 1], [2, 2], [4, 0]])",
        "matrixSum(nums = [[4, 7, 8], [5, 5, 9], [6, 3, 2]])",
        "matrixSum(nums = [[2,4,7,9],[1,2,3,4],[1,4,5,10]])",
        "matrixSum(nums = [[1, 4, 2, 3], [5, 8, 9, 7], [4, 2, 12, 2], [10, 4, 18, 8]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"acd\")",
        "findMinimumOperations(s1=\"abc\", s2=\"ab\", s3=\"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"bana\")",
        "findMinimumOperations(s1=\"are\", s2=\"are\", s3=\"are\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abdc\", s3 = \"abdc\")",
        "findMinimumOperations(s1 = \"baba\", s2 = \"baba\", s3 = \"abba\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"an\", s3 = \"ana\")",
        "findMinimumOperations(s1 = \"delete\", s2 = \"delete\", s3 = \"delete\")",
        "findMinimumOperations(s1 = \"hello\", s2 = \"ello\", s3 = \"hell\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nananan\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")"
    ],
    "sample_324": [
        "isFascinating(n = 123)",
        "isFascinating(333)",
        "isFascinating(10)",
        "isFascinating(n = 22)",
        "isFascinating(1221)",
        "isFascinating(648)",
        "isFascinating(45132)",
        "isFascinating(1937)",
        "isFascinating(n = 78000)",
        "isFascinating(n = 48356)"
    ],
    "sample_476": [
        "minimumCoins(prices = [2,3,4])",
        "minimumCoins(prices = [2, 2, 2, 2])",
        "minimumCoins(prices = [1,2,4,5,6])",
        "minimumCoins(prices = [2, 1, 3, 4])",
        "minimumCoins(prices = [3, 4, 2, 1, 9])",
        "minimumCoins(prices = [5, 3, 7, 2, 9])",
        "minimumCoins(prices = [3, 4, 2, 7, 3])",
        "minimumCoins(prices = [3, 4, 5, 3, 10])",
        "minimumCoins(prices = [2,3,1,5,2,10])",
        "minimumCoins(prices = [3, 4, 2, 6, 7, 9, 3, 5, 2, 7])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [2,7,11,15], target = 9)",
        "countPairs(nums = [1,2,3], target = 4)",
        "countPairs(nums = [1,2,3], target = 5)",
        "countPairs(nums = [1,2,3], target = 6)",
        "countPairs(nums = [1,3,2,7], target = 10)",
        "countPairs(nums = [1,1,2,3,3], target = 4)",
        "countPairs(nums = [2,4,3], target = 5)",
        "countPairs(nums = [1,1,1,1,1,2,2,2,2,2], target = 3)",
        "countPairs(nums = [3, 5, 2, -4, 4, -2], target = 7)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [4, 3, 2])",
        "minGroupsForValidAssignment(nums = [2,3,5,7,11])",
        "minGroupsForValidAssignment(nums = [4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [2,1,1])",
        "minGroupsForValidAssignment(nums = [1,3,3,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment([100,200,200,300,300,400,400,400,500,500,500])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3], target = 4)",
        "countPairs(nums = [1, 3, 2, 5, 9, 10, 6], target = 8)"
    ],
    "sample_317": [
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 8)",
        "buyChoco(prices = [1,2,3,4,5], money = 8)",
        "buyChoco(prices = [2, 3, 4], money = 7)",
        "buyChoco(prices=[2,3,5], money=10)",
        "buyChoco(prices = [1, 2, 3, 5, 7], money = 4)",
        "buyChoco(prices = [1, 3, 2, 5, 4], money = 5)",
        "buyChoco(prices = [3, 10, 2, 9, 4], money = 7)",
        "buyChoco(prices = [1, 3, 5, 2, 7], money = 10)",
        "buyChoco(prices = [12, 1, 1, 3], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ac\", \"ba\", \"bc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"e\"])",
        "maximumNumberOfStringPairs(words = [\"123\", \"321\", \"123\"])",
        "maximumNumberOfStringPairs(words = [\"tw\", \"two\", \"oof\", \"to\"])",
        "maximumNumberOfStringPairs(words = [\"0f\", \"0e\", \"0e\", \"0f\", \"0e\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"cdab\", \"dcba\", \"ab\", \"ba\", \"da\", \"abcd\"])",
        "maximumNumberOfStringPairs(words = [\"dc\",\"e\",\"jls\",\"ka\",\"lo\"])",
        "maximumNumberOfStringPairs(words = [\"zc\", \"bk\", \"qk\", \"cf\", \"bc\", \"cq\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = 'leetcode')",
        "sortVowels(s = \"LEotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = 'eleetcode')",
        "sortVowels(s = \"LEOTCEDA\")",
        "sortVowels(s = \"OtcedeLe\")",
        "sortVowels(s = 'eodead')",
        "sortVowels(s = 'Deleetcode')"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3])",
        "sumCounts(nums = [1,2,3,4,5,6,7])",
        "sumCounts(nums = [1,2,2])",
        "sumCounts(nums = [0, 1, 2, 3])",
        "sumCounts(nums = [2, 3, 3, 2, 1])",
        "sumCounts(nums = [0, 1, 2, 3, 3, 4, 5])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumCoins(prices = [1, 1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 1, 4, 1])",
        "minimumCoins(prices = [1, 2, 3, 4, 1, 2, 1, 1])",
        "minimumCoins(prices = [1, 1, 3, 3, 5, 5])",
        "minimumCoins(prices = [3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17])",
        "minimumCoins(prices = [2, 5, 1, 2, 2, 4, 1, 2, 2, 4])",
        "minimumCoins(prices = [5, 1, 2, 4, 5, 6, 7, 8, 3, 4])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 100, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 100, m = 13)",
        "differenceOfSums(n = 100, m = 1)",
        "differenceOfSums(n = 8, m = 4)"
    ],
    "sample_307": [
        "countSeniors(details = [\"1985\", \"1986\", \"2018\"])",
        "countSeniors(details = [\"John Smith 26\", \"Peter Gynn 27\", \"Susan Ericksen 65\", \"Bob Smith 23\"])",
        "countSeniors(details = [\"Smith30\", \"Jones19\", \"Baker40\"])",
        "countSeniors(details = [\"2175\", \"1967\", \"1995\"])",
        "countSeniors(details = [\"0003\", \"0023\", \"0053\", \"0093\", \"0097\"])",
        "countSeniors(details = [\"Paul, 1980\", \"John, 1990\", \"Tom, 1978\"])",
        "countSeniors(details = [\"19871028\", \"19851230\", \"19800624\"])",
        "countSeniors(details = [\"Pakistan - 1947\", \"India - 1947\", \"USA - 1961\", \"USSR - 1929\"])",
        "countSeniors(details = [\"Alfred-52\", \"Sarah-38\", \"Mark-72\", \"David-19\", \"Betty-61\"])",
        "countSeniors(details = ['99Jon','24Amy','74Jerry','33Sam'])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 1)",
        "isFascinating(n = 10)",
        "isFascinating(n = 33)",
        "isFascinating(165)",
        "isFascinating(222222222)",
        "isFascinating(289)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"01\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"0110111\")",
        "minimumBeautifulSubstrings(s = \"aab\")",
        "minimumBeautifulSubstrings(s = \"001001\")",
        "minimumBeautifulSubstrings(s = \"132113\")",
        "minimumBeautifulSubstrings(s = \"1010010100001\")",
        "minimumBeautifulSubstrings(\"1110011001010011000\")",
        "minimumBeautifulSubstrings(s = \"011100110100110101000\")",
        "minimumBeautifulSubstrings(s = \"1110111000001001000101100010011100010101010011100110011101001110001\")"
    ],
    "sample_463": [
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n=10, limit=2)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 10, limit = 10)"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 9)",
        "minOperations(nums = [2,3,4,5,6,7,8,9,10], k = 4)",
        "minOperations(nums = [2,5,3,4,5], k = 3)",
        "minOperations(nums = [2,2,2,2,2], k = 5)",
        "minOperations(nums = [5,9], k = 2)",
        "minOperations(nums = [4,3,6,5,2], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 2, 3], k = 2)",
        "minOperations(nums=[10,9,4,4], k=2)",
        "minOperations(nums = [2, 5, 1, 3, 4, 1], k = 3)",
        "minOperations(nums = [6,3,0,9,5,6,8,1,2,4], k = 2)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 1, 1])",
        "sumCounts(nums = [1, 2, 3, 2])",
        "sumCounts(nums = [0, 1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 1])",
        "sumCounts(nums = [3, 2, 1, 4, 1, 5])",
        "sumCounts(nums = [1,1,2,2,3,3,3,4,4,4,4,5])",
        "sumCounts(nums = [3, 3, 4, 4, 5])",
        "sumCounts(nums = [2, 3, 4, 5, 7, 11])",
        "sumCounts(nums = [0, 1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = ['3', 'prev', 'prev', '4', '1'])",
        "lastVisitedIntegers(words = [\"last\", \"prev\", \"prev\", \"prev\", \"next\", \"last\", \"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 9)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 9)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 9)",
        "minOperations(nums = [1,2,3,4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 9)",
        "minOperations(nums = [0, 1, 1, 1], k = 0)",
        "minOperations(nums = [2,3,4,5,6,7,8,9,10], k = 9)",
        "minOperations(nums = [2, 6, 4, 8, 10], k = 5)",
        "minOperations(nums = [4, 5, 2, 6, 3, 7], k = 3)",
        "minOperations(nums = [2, 3, 5, 2, 4, 1, 2, 4, 1, 2, 1, 2, 2], k = 5)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbbc\")",
        "longestSemiRepetitiveSubstring(s = \"abccccdef\")",
        "longestSemiRepetitiveSubstring(s = \"ababd\")",
        "longestSemiRepetitiveSubstring(s = \"abbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"babababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababcd\")",
        "longestSemiRepetitiveSubstring(s = \"ababbbabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaacd\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [2, 1, 3, 1, 1])",
        "sumCounts(nums = [4, 2, 4, 2, 3])",
        "sumCounts(nums = [2, 1, 4, 3, 2])",
        "sumCounts(nums = [4, 2, 2, 3, 2, 3, 1, 1, 3])",
        "sumCounts(nums = [1,1,2,2,3,4,5,6,6,6])",
        "sumCounts(nums = [3, 3, 1, 1, 4, 2, 2])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"00100111\", k = 3)",
        "shortestBeautifulSubstring(s = \"111000111\", k = 3)",
        "shortestBeautifulSubstring(s = \"123411\", k = 2)",
        "shortestBeautifulSubstring(s = \"110011001111\", k = 2)",
        "shortestBeautifulSubstring(s = '1122221', k = 2)",
        "shortestBeautifulSubstring(s = '0100110100', k = 2)",
        "shortestBeautifulSubstring(s = \"011010010\", k = 3)",
        "shortestBeautifulSubstring(s = \"00000000011111111111111111111111111111111111111111111111111111\", k = 1)",
        "shortestBeautifulSubstring(s = \"111200011001100\", k = 3)",
        "shortestBeautifulSubstring(s = \"1121212112111221\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"aaa\")",
        "minimumBeautifulSubstrings(s = \"00000\")",
        "minimumBeautifulSubstrings(s = \"ababab\")",
        "minimumBeautifulSubstrings(s = \"aa\")",
        "minimumBeautifulSubstrings(s = \"abacad\")",
        "minimumBeautifulSubstrings(s = \"11235813\")",
        "minimumBeautifulSubstrings(s = \"22\")",
        "minimumBeautifulSubstrings(s = \"jjjjjjjjj\")",
        "minimumBeautifulSubstrings(s = \"aabbaabbaa\")",
        "minimumBeautifulSubstrings(s = \"0101010101010100010101000101010001010001010101000101010001010001010101010001010100010101010100010101000101010101000101010001010101010001010100010101010100010101000101010101000101010001010101010001010100010101010100010101000101010101000101010001010101010001010100010101010100010101000101010101000101010001010101010001010100010101010100010101000101010101000101010001010101010001010100010101010100010101000101010101000101010001010101010001010100010101010100010101000101010101000101010"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 1)",
        "longestString(x = 1, y = 2, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 4, y = 5, z = 3)",
        "longestString(x = 1, y = 5, z = 3)",
        "longestString(x = 5, y = 6, z = 3)",
        "longestString(x = 2, y = 5, z = 5)",
        "longestString(x = 4, y = 5, z = 4)",
        "longestString(x = 5, y = 10, z = 4)"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 1], [1, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[1,0,1]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 1, 0, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 0], [1, 0, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1,2,3,0],[0,5,6,0],[7,8,0,0]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 5)",
        "beautifulSubstrings(s = \"ioiioi\", k = 5)",
        "beautifulSubstrings(s = \"ugly\", k = 3)",
        "beautifulSubstrings(s = \"cabbbba\", k = 3)",
        "beautifulSubstrings(s = \"bbbbbbbbbc\", k = 4)",
        "beautifulSubstrings(s = \"bbbbbbbacdd\", k = 4)",
        "beautifulSubstrings(s = \"bnaaaeaiiou\", k = 2)",
        "beautifulSubstrings(s = \"vvacueuqs\", k = 8)"
    ],
    "sample_304": [
        "countSeniors(details = [\"01/01/1980\", \"02/02/1981\"])",
        "countSeniors(details = [\"P123456789012345\", \"P134567890123456\", \"P987654321098765\"])",
        "countSeniors(details = [\"Name: Smith, age: 80\", \"Name: Jones, age: 33\"])",
        "countSeniors(details = [\"John Smith1990\", \"Jane Doe1985\", \"Peter Pan61\", \"Billy Bob1962\"])",
        "countSeniors(details = [\"03/29/1984\", \"09/29/1965\", \"09/29/1984\"])",
        "countSeniors(details = ['Name: ABCDEFGHIJ, Age: 25, Job: ABCDE', 'Name: ABCDEFGHIJ, Age: 65, Job: ABCDE', 'Name: ABCDEFGHIJ, Age: 80, Job: ABCDE'])",
        "countSeniors(details = [\"id: 12987654\", \"id: 6887678\"])",
        "countSeniors(details = [\"Josh (48)\", \"Bill (31)\", \"Bill (67)\", \"Bill (21)\"])",
        "countSeniors(details = [\"3328925419:23\", \"3152176952:58\", \"3485944229:61\"])",
        "countSeniors(details = [\"phone: 111-545-4233\", \"id: 230480289\", \"name: William\", \"birth year: 1946\", \"address: 3150 Coronado Court\", \"phone: 111-545-3188\", \"id: 522204802\", \"name: Mario\", \"birth year: 1930\", \"address: 3150 Coronado Court\", \"phone: 111-545-5323\", \"id: 240480289\", \"name: Marco\", \"birth year: 1944\", \"address: 3150 Coronado Court\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [2, 1, 3])",
        "maximumTripletValue(nums = [0, 1, 2, 3, 4])",
        "maximumTripletValue(nums = [10, 5, 9])",
        "maximumTripletValue(nums = [3, 9, 6, 4, 7, 1, 9, 7])",
        "maximumTripletValue(nums = [1, -5, 10, -5, -2, 0, 2])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"01\")",
        "minimumBeautifulSubstrings(s = \"135\")",
        "minimumBeautifulSubstrings(s = \"010\")",
        "minimumBeautifulSubstrings(s = \"5\")",
        "minimumBeautifulSubstrings(s = \"00110111\")",
        "minimumBeautifulSubstrings(s = \"1110111\")",
        "minimumBeautifulSubstrings(s = \"0011010\")",
        "minimumBeautifulSubstrings(s = \"6\")",
        "minimumBeautifulSubstrings(s = \"aabbac\")",
        "minimumBeautifulSubstrings(\"1110111\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [2, 0, 2, 2, 0, 1, 2, 2, 0])",
        "maxSubarrays(nums = [-1, -3, -1, -4, -3, 2])",
        "maxSubarrays(nums = [3, 6, 1, 2, 2, 4])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 0, 4, 3, 0, 1, 5, 2])",
        "maxSubarrays(nums = [2, 2, 1, 3, -1, -2, 4, -1])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [2, 1, 4, 3, 6])",
        "minOperations(a = [1,2], b = [3,4])",
        "minOperations(a = [1, 2, 3], b = [2, 3, 4])",
        "minOperations(a = [1, 2, 3, 4, 5, 6, 7], b = [7, 6, 5, 4, 3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4], b = [3, 3, 2, 1])",
        "minOperations(a = [2,3,3], b = [1,3,4])",
        "minOperations(a = [2, 2, 3, 3], b = [5, 6, 7, 8])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"ca\", \"da\"])",
        "minimizeConcatenatedLength(words = [\"daily\", \"progr\", \"amr\"])",
        "minimizeConcatenatedLength(words = [\"are\", \"they\", \"ok\"])",
        "minimizeConcatenatedLength(words = [\"me\", \"his\", \"banana\"])",
        "minimizeConcatenatedLength(words = [\"c\", \"y\", \"k\", \"m\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"codesignal\", \"check\", \"in\", \"the\", \"morning\"])",
        "minimizeConcatenatedLength(words = [\"hello\", \"dream\", \"team\", \"type\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"ananas\", \"ananana\", \"bananan\", \"ban\", \"anna\"])",
        "minimizeConcatenatedLength(words = [\"xwa\", \"ysx\", \"zuh\", \"ktk\", \"yuf\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = \"LympH\")",
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = \"ylmph\")",
        "sortVowels(s = \"lyMph\")",
        "sortVowels(s = 'YmPh')",
        "sortVowels(s = \"pYmpH\")",
        "sortVowels(s = 'VbkxH')"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 3, 2])",
        "sumCounts(nums = [2, 2, 2])",
        "sumCounts(nums = [1,1,2,2,2,2])",
        "sumCounts(nums = [0, 0, 0, 1, 1, 1, 2, 2, 2])",
        "sumCounts(nums = [2, 4, 1, 3, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 1, 2, 3, 3, 3, 3, 3, 3])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [4, 1, 2, 3])",
        "minimumSum(nums = [5, 2, 4, 6, 3])",
        "minimumSum([0, 1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4, 10, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [2, 4, 1, 3, 4, 1])",
        "minimumSum(nums = [2, 1, 2, 2, 3, 3, 2, 2, 1, 2])",
        "minimumSum(nums = [3, 1, 5, 7, 5, 2, 8, 1, 9])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0], [1, 0]])",
        "findChampion(grid = [[1,2,3],[4,5,6],[7,8,9]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1,0,0,0],[0,0,0,1],[0,0,1,0]])",
        "findChampion(grid = [[0, 1, 2], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1, 0, 0], [0, 1, 0, 1, 1], [1, 0, 1, 0, 0], [0, 1, 0, 1, 1], [0, 1, 0, 1, 1]])",
        "findChampion([[1,2,0], [1,0,2], [0,1,1]])",
        "findChampion(grid = [[1, 0, 1, 1],\n[0, 1, 1, 1],\n[1, 1, 0, 0],\n[0, 1, 1, 0]])"
    ],
    "sample_372": [
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = 'elephant')",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"eleven\")",
        "sortVowels(s = \"eTocede\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"Hello, world!\")",
        "sortVowels(s = \"eEoeOoLlTtDd\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"001010\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"0110111\")",
        "minimumSteps(s = \"1100111\")",
        "minimumSteps(s = \"00111010\")",
        "minimumSteps(s = \"010100\")",
        "minimumSteps(s = \"10010111\")",
        "minimumSteps(s = \"11100101111\")",
        "minimumSteps(s = \"110000100000100001\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 7, 3, 4])",
        "minimumRightShifts(nums = [2, 1, 2, 1, 1, 2, 2, 2])",
        "minimumRightShifts(nums = [3, 8, 2, 6, 4, 1])",
        "minimumRightShifts(nums = [1, 2, 2, 2, 2, 2, 2, 3])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 0, 0, 0])",
        "minimumRightShifts(nums = [0, 2, 1, 4, 3])",
        "minimumRightShifts(nums = [4, 2, 0, 2, 3, 2, 0, 1])",
        "minimumRightShifts(nums = [2, 5, 6, 0, 4, 2, 0, 3, 1])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 2, 4, 2])",
        "minOperations(nums = [1, 2, 2, 2, 2])",
        "minOperations(nums = [1,1,1,1,1,1])",
        "minOperations(nums = [3, 1, 3, 4, 3, 2])",
        "minOperations(nums = [0,0,0,3,2,2,2])",
        "minOperations(nums = [1,1,2,2,3,3,3])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [2,3,2,2,3,2,2,2,3,2,2])",
        "minOperations(nums = [0,1,1,1,1,2,2,2,3,3])",
        "minOperations(nums = [4, 9, 2, 3, 3, 4, 9, 2])"
    ],
    "sample_367": [
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = 'LyMpH')",
        "sortVowels(s = 'LyMpH')",
        "sortVowels(s = 'YmLPh')",
        "sortVowels(s = 'yMpHl')",
        "sortVowels(s = \"alYmpH\")",
        "sortVowels(s = 'yLpHm')",
        "sortVowels(s = 'tHMly')",
        "sortVowels(s = 'tHymcH')",
        "sortVowels(s = 'Byn_mOYlYmpH')"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [1, 1, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [1, 1, 0]])",
        "findChampion([[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 0, 1, 0], [0, 0, 0, 0], [0, 1, 0, 0], [1, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 0, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]])",
        "findChampion(grid = [[0, 1, 2, 0], [1, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [4, 2], nums2 = [5, 6, 3])",
        "minSum(nums1 = [0, 1, 2, 3], nums2 = [2, 3, 4, 5])",
        "minSum(nums1 = [0, 1, 1], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 2, 2, 3], nums2 = [3, 2, 2, 0])",
        "minSum(nums1 = [4,2,3], nums2 = [5,6,7])",
        "minSum(nums1 = [0, 1, -1], nums2 = [0, 1, -1])",
        "minSum(nums1 = [1, 0, 3], nums2 = [2, 0])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [-1, 5, 4])",
        "minSum(nums1 = [-3, 0, -2], nums2 = [5, -6])",
        "minSum(nums1 = [1, -3, 4, 6], nums2 = [-7, 4, -5])"
    ],
    "sample_422": [
        "minOperations(nums = [2, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1, 2], k = 3)",
        "minOperations(nums = [1,2,1,2], k = 2)",
        "minOperations(nums = [9,8,7,6,5,6,7,8,9], k = 9)",
        "minOperations(nums = [1, 3, 4, 2, 5, 2], k = 1)",
        "minOperations(nums = [3, 6, 3, 1, 1, 2, 2, 1], k = 3)",
        "minOperations(nums = [4, 2, 6, 1, 5, 3, 7, 2, 8], k = 5)",
        "minOperations(nums = [2,4,5,3,7,2,1,2,3,10,3,4,2,5,3,1], k = 10)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [3, 2])",
        "relocateMarbles(nums=[1,2,3], moveFrom=[1,2], moveTo=[2,3])",
        "relocateMarbles(nums = [2, 1], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 3, 5], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,2], moveTo = [1,3])",
        "relocateMarbles(nums = [1, 2, 3, 2], moveFrom = [2, 3], moveTo = [3, 2])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2], m = 2, k = 2)",
        "maxSum(nums = [1,2,1,2], m = 2, k = 2)",
        "maxSum(nums = [2, 1, 4, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1,2,1,2,1,2,1], m = 2, k = 3)",
        "maxSum(nums = [2,1,1,2], m = 2, k = 2)",
        "maxSum(nums = [2, 7, 9, 2, 2, 1, 2, 2, 2], m = 3, k = 2)",
        "maxSum(nums = [6,3,9,1,1,8,5,6,6,9], m = 1, k = 5)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"zzz\", s2 = \"zaa\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"zz\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"ba\", s2 = \"bac\")",
        "canMakeSubsequence(s1 = \"bac\", s2 = \"zca\")",
        "canMakeSubsequence(s1 = \"ababa\", s2 = \"aab\")",
        "canMakeSubsequence(s1=\"banana\", s2=\"aanb\")",
        "canMakeSubsequence(s1 = \"zabc\", s2 = \"ca\")",
        "canMakeSubsequence(s1 = \"bbzz\", s2 = \"abba\")",
        "canMakeSubsequence(s1 = \"zzzzzzz\", s2 = \"aazzzzazaz\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6,0])",
        "minSum(nums1 = [2, 2, 2], nums2 = [3, 3])",
        "minSum(nums1 = [4,3,2,7,8,2,3,1], nums2 = [3,5])",
        "minSum(nums1 = [0, 1, 1, 1], nums2 = [0, 1, 2, 2])",
        "minSum(nums1 = [0, 3, 0], nums2 = [1, 1, 2])",
        "minSum(nums1 = [2, 3, 5], nums2 = [0, 5, 10])",
        "minSum(nums1 = [3, 3, 3, 0], nums2 = [2, 2, 2, 2])",
        "minSum(nums1 = [0,0,0], nums2 = [0,1,2])",
        "minSum(nums1 = [0,2,3,4,6], nums2 = [0,3,8,0,7])",
        "minSum(nums1=[3,1,1,3,1], nums2=[5,5,3,1,3])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', 'prev', '3'])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"1\",\"1\",\"prev\",\"1\"])",
        "lastVisitedIntegers(words = ['prev', '4', '5', 'next', '1', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['5', 'prev', '7', 'prev', 'prev', '1', 'prev', '0', 'next'])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 3, 2, 4, 5])",
        "isGood(nums = [2, 1, 3, 4])",
        "isGood(nums = [4, 3, 1, 2])",
        "isGood(nums = [2, 3, 4, 5, 6, 7, 8])",
        "isGood([4, 2, 3, 1])",
        "isGood(nums = [4, 2, 6, 1, 3, 5])",
        "isGood([1, 3, 4, 6, 8])"
    ],
    "sample_424": [
        "minOperations(nums = [3,2,2,4,2])",
        "minOperations(nums = [1,1,4,2,3])",
        "minOperations(nums = [3,1,3,3,2])",
        "minOperations(nums = [1,1,2,2,2,2,3,3])",
        "minOperations(nums = [3,1,2,2,1])",
        "minOperations(nums = [3,1,1,5,2,2,4])",
        "minOperations(nums = [2,7,2,2,2,2,1])",
        "minOperations(nums = [1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4])",
        "minOperations(nums = [1,2,2,2,3,4,6,7,7,8,9,10])",
        "minOperations(nums = [2,4,7,6,8,4,7,6,10])"
    ],
    "sample_451": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abb\")",
        "minChanges(s = \"aabcd\")",
        "minChanges(s = \"caba\")",
        "minChanges(\"abcdd\")",
        "minChanges(s = \"change\")",
        "minChanges(s = \"fedora\")",
        "minChanges(s = \"eceba\")",
        "minChanges(s = \"mudasir\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 21, limit = 5)",
        "distributeCandies(n = 2 * (limit + 1), limit = 3)",
        "distributeCandies(n = 31, limit = 11)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2], nums2 = [3,4])",
        "minSum(nums1=[0,1,0,1], nums2=[0,1,0,1])",
        "minSum(nums1 = [1,0,1], nums2 = [2,1])",
        "minSum(nums1 = [0,0,0,0], nums2 = [0,2,0,0])",
        "minSum(nums1 = [0, 0, 0, 0, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 0, 0, 3])",
        "minSum(nums1 = [1,1,1,1,1,0,0,0,0], nums2 = [1,2,3,4,5,6,7,8,9])",
        "minSum(nums1 = [1,2,4,10], nums2 = [1,2,7,1])",
        "minSum(nums1 = [4,5,18,19], nums2 = [5,2,11,12])",
        "minSum(nums1=[6,6,0,9,3], nums2=[1,9,7,7,8])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 8, 2, 6, 4])",
        "minimumRightShifts(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumRightShifts(nums = [1, 5, 2, 7, 3, 6, 4])",
        "minimumRightShifts(nums = [3, 2, 5, 1, 4, 0])",
        "minimumRightShifts(nums = [1, 5, 6, 12, 2, 7, 22, 4, 3, 11, 13, 10])"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1, 2, 3, 4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 5)",
        "countPairs(nums = [1,3,5,7], t = 10)",
        "countPairs(nums = [1,2,3,4], t = 10)",
        "countPairs(nums = [1, 4, 8], t = 13)",
        "countPairs(nums = [1,2,4,5], t = 10)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "countPairs(nums = [1, 3, 5, 2, 4], t = 7)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"practice\", \"makes\", \"perfect\", \"coding\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p1\", \"p1\"])",
        "lastVisitedIntegers(words = ['pop', 'push', 'push', 'pop', 'push', 'top'])",
        "lastVisitedIntegers(words = [\"p2\", \"p2\", \"p1\", \"p4\"])",
        "lastVisitedIntegers(words = ['p1', 'p2', 'p1', 'p2', 'p1', 'p3'])",
        "lastVisitedIntegers(words = [\"p2\", \"p1\", \"4\", \"p1\", \"p2\", \"p1\", \"p2\"])",
        "lastVisitedIntegers(words = [\"pa\", \"t\", \"x\", \"pa\", \"a\", \"b\"])",
        "lastVisitedIntegers(words = [\"pw\", \"pq\", \"pw\", \"pq\", \"pw\", \"pw\", \"pq\", \"pq\", \"pq\", \"pw\", \"pw\", \"pq\", \"pq\", \"pw\", \"pq\", \"pq\", \"pq\", \"pq\", \"pq\", \"pq\", \"pq\", \"pq\"])",
        "lastVisitedIntegers(words = [\"prior\", \"coding\", \"prior\", \"assess\", \"assess\", \"after\", \"after\"])",
        "lastVisitedIntegers(words = ['p', '7', '9', 'j', 'j', 'p', 'p', '1', '7'])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"zyx\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"azcbobobegghakl\", str2 = \"cb\")",
        "canMakeSubsequence(str1 = \"zzz\", str2 = \"zyy\")",
        "canMakeSubsequence(str1 = \"zx\", str2 = \"zy\")",
        "canMakeSubsequence(str1 = \"zzzz\", str2 = \"zaaa\")",
        "canMakeSubsequence(str1 = \"azzzz\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azz\")",
        "canMakeSubsequence(str1 = \"yzx\", str2 = \"zzyzz\")",
        "canMakeSubsequence(str1 = \"py\", str2 = \"pzqz\")",
        "canMakeSubsequence(str1 = \"bqw\", str2 = \"zaqw\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 0])",
        "minSum(nums1 = [0, 1, 2, 3], nums2 = [2, 3, 4, 5])",
        "minSum(nums1 = [0,1,2,3], nums2 = [2,3,4,5])",
        "minSum(nums1 = [1, 2], nums2 = [1, 2, 0])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [3, 4, 5, 6, 7])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 1, 2])",
        "minSum(nums1 = [0, 1, 2, 3, 4, 5], nums2 = [3, 4, 5, 6, 7, 8])",
        "minSum(nums1 = [1,1,0,1,0,1], nums2 = [0,0,0,0,0,1])",
        "minSum(nums1 = [1, 1, 0, 1, 1, 0], nums2 = [1, 1, 0, 1, 1, 1, 1, 1, 0, 1])",
        "minSum(nums1 = [0,0,0,5], nums2 = [3,3,0,0])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [0, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 2], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0,0],[0,1],[1,0],[1,2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [0, 2], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1,1],[2,2],[2,1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 1], [2, 2], [1, 2], [2, 2]], k = 1)",
        "countPairs(coordinates = [[1, 3], [2, 3], [3, 2], [4, 0], [2, 0], [3, 0], [2, 2], [2, 4], [3, 4], [4, 2]], k = 2)",
        "countPairs(coordinates = [[-1, -2], [-3, -1], [2, 1]], k = 0)",
        "countPairs(coordinates = [[3, 7], [4, 3], [5, 6], [1, 1], [1, 2]], k = 1)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"o\", \"ll\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ac\", \"ba\", \"bc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ac\", \"ab\", \"bc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"yx\", \"yx\", \"xz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ca\", \"c\", \"b\", \"ba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"tin\", \"tpin\", \"ttiin\", \"tin\"])",
        "maximumNumberOfStringPairs(words = [\"abcw\", \"zxya\", \"qwef\", \"asdfg\", \"tebm\", \"retr\"])",
        "maximumNumberOfStringPairs(words = [\"xww\", \"jl\", \"maw\", \"lux\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [-2, -3, 4, 5])",
        "maxStrength(nums = [1,-2,-3,4])",
        "maxStrength(nums = [-2, 4, 7])",
        "maxStrength(nums = [-4, -3, -2, 1])",
        "maxStrength(nums = [-2, 0, 7])",
        "maxStrength(nums = [1, -3, 2, -5, 7, 0, 4, -4, -7, -2])",
        "maxStrength(nums = [3, 7, 8, 2, -9, 2, -6, 5, -3, 6])",
        "maxStrength(nums = [2, -3, 1, 4, -3, -2, 1, -1, -7])",
        "maxStrength(nums = [1, 2, -2, -2, -2, 3, 3, -3, -3, 4, 4, -4, -4, -4, -4, 5, 5, 5, -5, -5, 6, 6, 6, 6, -6, -6])",
        "maxStrength(nums = [10, -5, 12, -1, 1, -5, 0, 2])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7])",
        "minimumCoins(prices = [1, 2, 5, 10, 50, 100])",
        "minimumCoins(prices = [1, 2, 1, 4])",
        "minimumCoins(prices = [10, 2, 5, 1, 10])",
        "minimumCoins(prices = [10, 25, 30, 35])",
        "minimumCoins(prices = [3, 7, 1, 10, 2, 12, 4, 11])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,5,6,6])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,4,4,4,4,4,5,5,5,5,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,5,6,7,8])",
        "minLengthAfterRemovals(nums = [5, 6, 1, 3, 3, 4, 4, 4, 4, 5, 1, 6])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,4,5,6,6,7,7,7,7,8,8,1,1,2,2,3,4,5,6,6,7,7,7,7,8,8,1,1,2,2,3,4,5,6,6,7,7,7,7,8,8])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3, 4], money = 3)",
        "buyChoco(prices = [1, 2], money = 4)",
        "buyChoco(prices = [1, 2], money = 4)",
        "buyChoco(prices = [1,2,3,4], money = 10)",
        "buyChoco(prices = [10, 3, 2, 7, 9], money = 10)",
        "buyChoco(prices = [2, 4, 1, 1, 7, 2, 8], money = 20)",
        "buyChoco(prices = [10, 5, 3], money = 8)",
        "buyChoco(prices = [1, 3, 2, 4, 7, 10], money = 12)",
        "buyChoco(prices = [3, 4, 10], money = 2)",
        "buyChoco(prices = [5, 2, 1, 6], money = 5)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 1])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 2])",
        "sumCounts(nums = [0,1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [0, 0, 1, 2, 1, 0, 0, 1, 2, 1])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [1, 2, 5, 6, 8, 9], moveFrom = [2, 3], moveTo = [5, 6])",
        "relocateMarbles(nums = [2, 5, 6, 8, 9], moveFrom = [2, 6], moveTo = [5, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [3, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9], moveFrom = [8, 9], moveTo = [6, 7])",
        "relocateMarbles(nums = [1, 5, 5, 6, 8], moveFrom = [5, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [1, 5, 8, 9], moveFrom = [6, 8], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [6, 7, 8], moveTo = [4, 3, 2])",
        "relocateMarbles(nums = [1, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 4], moveTo = [2, 7])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [3, 7, 4, 5])",
        "relocateMarbles(nums = [2, 5, 1, 8, 10], moveFrom = [5, 6], moveTo = [8, 9])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adz\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"bbc\")",
        "canMakeSubsequence(str1 = \"zzzzzz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"z\", str2 = \"aaaaab\")",
        "canMakeSubsequence(str1 = \"zzzzzzz\", str2 = \"aaaaaaa\")",
        "canMakeSubsequence(str1 = \"zoo\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"zzzabcd\", str2 = \"zzzzaaaa\")",
        "canMakeSubsequence(str1 = \"cdb\", str2 = \"abbadcd\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"hello\", \"hi\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"hey\", \"bye\"], x = \"e\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"dad\"], x = \"a\")",
        "findWordsContaining(words = [\"the\", \"cat\", \"hat\"], x = \"at\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"I\", \"like\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hi\", \"bye\", \"baby\", \"happy\"], x = \"by\")",
        "findWordsContaining(words = [\"hello\", \"test\", \"tset\"], x = \"e\")",
        "findWordsContaining(words = [\"book\", \"tree\", \"ball\", \"go\", \"sky\"], x = \"o\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 3], [2, 4]])",
        "matrixSum(nums = [[1, 1, 1], [2, 2, 2]])",
        "matrixSum(nums = [[10, 11, 12, 13, 14], [12, 13, 14, 15, 16], [14, 15, 16, 17, 18], [16, 17, 18, 19, 20]])",
        "matrixSum(nums = [[1, 1, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1]])",
        "matrixSum([[7, 1, 3, 5], [8, 2, 4, 6]])",
        "matrixSum(nums = [[1, 5, 0], [3, 1, 4], [0, 6, 2]])",
        "matrixSum(nums = [[0, 0, 1, 1, 1], [1, 1, 0, 1, 0], [0, 1, 1, 0, 0], [1, 1, 0, 0, 1], [1, 1, 1, 1, 0]])",
        "matrixSum(nums = [[-10,-20,-30],[-20,-30,-40],[0,-10,10]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 1)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [100, 100, 100], money = 100)",
        "buyChoco(a = [100, 100, 100], money = 100)",
        "buyChoco(a = [1, 3, 5], money = 3)",
        "buyChoco(a = [20, 30, 40], money = 50)",
        "buyChoco(a = [2, 3, 4, 10], money = 5)",
        "buyChoco(a = [2, 2, 4], money = 6)",
        "buyChoco(a = [5, 3, 3], money = 5)",
        "buyChoco(a = [20, 5, 12, 3], money = 10)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 4, 4])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minGroupsForValidAssignment(nums = [3, 3, 5, 5, 2, 1, 7])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3])",
        "minGroupsForValidAssignment(nums = [5, 1, 1])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 9])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5])",
        "minGroupsForValidAssignment(nums = [5, 15, 20, 25, 30, 35, 40, 45])",
        "minGroupsForValidAssignment(nums = [4, 12, 4, 4, 12, 4])",
        "minGroupsForValidAssignment(nums = [1000000000, 2, 2, 3, 4, 2])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [5, 1, 3, 4, 2])",
        "minimumRightShifts(nums = [5, 1, 3, 4, 2])",
        "minimumRightShifts(nums = [1, 2, 7, 3, 10, 5])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1, 0])",
        "minimumRightShifts(nums = [1, 6, 4, 3, 5])",
        "minimumRightShifts(nums = [2, 2, 2, 2, 2, 1])",
        "minimumRightShifts(nums = [1, 6, 4, 5, 9])",
        "minimumRightShifts(nums = [1, 2, 7, 8, 4, 9, 3, 5, 6, 7, 10])",
        "minimumRightShifts(nums = [3, 5, 7, 2, 1, 9, 5, 10])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1,2,3,4,5])",
        "maxStrength(nums = [1,2,3,4])",
        "maxStrength(nums = [2, 3, 5, 7])",
        "maxStrength(nums = [2, 3, 5, 7, 11])",
        "maxStrength([4, 5, 6])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n=3, limit=3)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 5, limit = 5)",
        "distributeCandies(n = 7, limit = 4)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3,3,3,7,2,2,7])",
        "minLengthAfterRemovals(nums = [3,3,3,1,1])",
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 2, 2, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [10, 1, 10, 10])",
        "minLengthAfterRemovals(nums = [2, 3, 2, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [2,3,5,5,7,7,7])",
        "minLengthAfterRemovals(nums = [10, 1, 1, 1, 2, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"python\", \"world\"], x = \"ll\")",
        "findWordsContaining(words = [\"deer\", \"truck\", \"car\", \"truck\"], x = \"tr\")",
        "findWordsContaining(words = [\"Hello\", \"World\", \"Apple\", \"Pie\"], x = \"P\")",
        "findWordsContaining(words = [\"hello\", \"test\", \"a\"], x = \"e\")",
        "findWordsContaining(words = [\"ax\", \"by\", \"cx\"], x = \"c\")",
        "findWordsContaining(words = [\"help\", \"hell\", \"hello\"], x = \"ell\")",
        "findWordsContaining(words = [\"champ\", \"geeks\", \"for\", \"fun\"], x = \"n\")",
        "findWordsContaining(words = [\"hi\", \"foo\", \"hello\", \"bar\", \"dog\"], x = \"o\")",
        "findWordsContaining(words = ['shoes', 'space', 'bottle', 'racket', 'science'], x = 's')"
    ],
    "sample_278": [
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion([[1, 0, 1], [0, 0, 0], [1, 0, 1]])",
        "findChampion([[0,1,0],[1,0,1],[0,1,0]])",
        "findChampion(grid = [[1, 1, 1, 1, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [1, 1, 1, 1, 1]])",
        "findChampion([[0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1, 1, 0], [1, 1, 0, 1, 1], [1, 1, 1, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 1, 0],\n[0, 1, 0, 1, 0],\n[0, 0, 1, 0, 0],\n[0, 0, 0, 0, 1],\n[0, 0, 1, 0, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1,1,0,1,1,1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1,1,0,0,0,1,1,1])",
        "maxSubarrays(nums = [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"ioiioi\", k = 3)",
        "beautifulSubstrings(s = \"aeou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"eaionrt\", k = 2)",
        "beautifulSubstrings(s = \"bcaouu\", k = 2)",
        "beautifulSubstrings(s = \"abaacbab\", k = 2)",
        "beautifulSubstrings(s = \"bbbabbba\", k = 3)",
        "beautifulSubstrings(s = \"aabcbcbaa\", k = 2)",
        "beautifulSubstrings(s = \"bzpf\", k = 1)",
        "beautifulSubstrings(s = \"ybybeavbausyb\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [2,3,1,2,4,3])",
        "minimumSeconds(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1])",
        "minimumSeconds(nums = [3,2,1,5,4])",
        "minimumSeconds(nums = [2,1])",
        "minimumSeconds(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1",
        "minimumSeconds(nums = [3, 3, 2, 2, 1])",
        "minimumSeconds(nums = [5, 7, 9, 10, 3, 12, 8, 13])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 210)",
        "isFascinating(1)",
        "isFascinating(n = 25)",
        "isFascinating(n = 90)",
        "isFascinating(n = 22222)",
        "isFascinating(122345678)",
        "isFascinating(n = 4001)",
        "isFascinating(n = 49919)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 2, 1], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 2], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 1, 1], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 3, 2, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 8, 4, 9, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 8, 9, 7], target = 13)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [1, 1]])",
        "matrixSum(nums = [[0, 1], [2, 3]])",
        "matrixSum(nums = [[3, 1, 2], [2, 2, 1], [1, 1, 3]])",
        "matrixSum(nums = [[5, 4, 3, 2, 1], [7, 6, 5, 4, 3], [9, 8, 7, 6, 5]])",
        "matrixSum(nums = [[1], [1,2], [2,1]])",
        "matrixSum(nums = [[0, 4], [2, 1], [1, 3]])",
        "matrixSum(nums = [[3, 1, 6], [1, 3, 1], [2, 3, 5]])",
        "matrixSum(nums = [[2,3,6],[2,5,7],[9,8,1]])",
        "matrixSum(nums = [[5, 2, 4, 6], [3, 1, 2, 6], [2, 4, 6, 7]])"
    ],
    "sample_326": [
        "isFascinating(123)",
        "isFascinating(123)",
        "isFascinating(123)",
        "isFascinating(n = 3)",
        "isFascinating(n = 210)",
        "isFascinating(n = 210)",
        "isFascinating(n = 42)",
        "isFascinating(n = 999)",
        "isFascinating(256)",
        "isFascinating(6123)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 1, 1], [0, 0, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1,1,0],[0,1,1],[1,0,1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 1], [1, 0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0, 0, 1], [1, 1, 0, 0, 1], [1, 0, 0, 1, 1], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1]])",
        "findChampion(grid = [[1,0,0,1,0],[1,0,1,1,1],[1,0,0,0,1],[1,0,1,1,1],[1,0,0,0,1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSum(nums = [1, 3, 5, 7, 9])",
        "minimumSum(nums = [4, 2, 3, 1, 5])",
        "minimumSum(nums = [1, 1, 1, 2, 2])",
        "minimumSum(nums = [8, 7, 3, 1, 2])",
        "minimumSum(nums = [2,3,5,7,8])",
        "minimumSum(nums = [7, 3, 9, 5, 4])",
        "minimumSum(nums = [1, 2, 5, 1, 1, 1, 0, 1])"
    ],
    "sample_450": [
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"ccd\")",
        "minChanges(s = \"aabc\")",
        "minChanges(s = \"abbaba\")",
        "minChanges(s = \"xxxxyyyy\")",
        "minChanges(s = \"xxyyzz\")",
        "minChanges(s = \"cbad\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"0100\", s2 = \"1110\", x = 2)",
        "minOperations(s1 = \"0100\", s2 = \"1110\", x = 2)",
        "minOperations(s1 = \"111111111\", s2 = \"000000000\", x = 2)",
        "minOperations(s1 = \"0000\", s2 = \"0001\", x = 1)",
        "minOperations(s1 = \"1111111111\", s2 = \"0000000000\", x = 5)",
        "minOperations(s1 = \"101\", s2 = \"101\", x = 2)",
        "minOperations(s1 = \"0011010\", s2 = \"1101001\", x = 3)",
        "minOperations(s1 = \"001110\", s2 = \"110101\", x = 3)",
        "minOperations(s1 = \"000101011\", s2 = \"111000010\", x = 10)",
        "minOperations(s1 = \"00000010101110\", s2 = \"00000011100011\", x = 3)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 4, y = 4, z = 2)",
        "longestString(x = 6, y = 6, z = 4)",
        "longestString(x = 3, y = 2, z = 5)",
        "longestString(x = 6, y = 5, z = 3)",
        "longestString(x = 5, y = 7, z = 10)",
        "longestString(x = 10, y = 10, z = 20)",
        "longestString(x = 7, y = 6, z = 4)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [0, 2, 2, 2, 0])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 4])",
        "maxSubarrays(nums = [0, 1, 0, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1, 1, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 0, 0, 1])",
        "maxSubarrays(nums = [1,2,0,3,4,0,5])",
        "maxSubarrays(nums = [3, 1, 2, 2, 2, 3, 0, 0, 0, 1, 2, 3, 3, 2])"
    ],
    "sample_306": [
        "countSeniors(details = [\"name1:age1\", \"name2:age2\", \"name3:age3\", \"name4:age4\"])",
        "countSeniors(details = [\"Name-1-12\", \"Name-2-40\", \"Name-3-70\", \"Name-4-10\"])",
        "countSeniors(details = [\"John, Smith, 20\", \"Alice, Smith, 104\"])",
        "countSeniors(details = [\"John50\", \"Bob32\", \"Fred72\", \"Pam39\"])",
        "countSeniors(details = [\"Name,Age,Grade\", \"Tina,20,A\", \"Tina,21,A\", \"Tina,65,A\", \"Tina,66,A\"])",
        "countSeniors(details = ['Name: Hacker, Role: Hacker, Age: 16', 'Name: Jailman, Role: Jailman, Age: 85'])",
        "countSeniors(details = [\"Name: Jones-McGee-60\", \"Name: Dodd-Peters-83\"])",
        "countSeniors(details = [\"Name: Mr. Moe, Age: 10, Job: janitor\", \"Name: Mrs. Boo, Age: 30, Job: homemaker\", \"Name: Mr. Gro, Age: 70, Job: plumber\", \"Name: Mrs. Foo, Age: 40, Job: nurse\"])",
        "countSeniors(details = ['Hawk 24', 'Jake 21', 'Hanna 59', 'Hawk 19'])",
        "countSeniors(details = [\"Name: Fx231, Age: 23\", \"Name: Yb232, Age: 23\", \"Name: Am311, Age: 31\", \"Name: Kw442, Age: 44\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1, 0])",
        "maxSubarrays(nums = [1,1,0,1,1,1,1,0])",
        "maxSubarrays(nums = [0, 1, 1, 1, 0, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [0, 2, 1, 0, 1, 1, 0, 3, 0, 4])",
        "maxSubarrays(nums = [3, 4, 7, 1, 5, 6, 2])",
        "maxSubarrays(nums = [1, 0, 3, 1, 1, 0])",
        "maxSubarrays(nums = [0, 2, 2, 0, 4, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 6], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 5])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums=[5, 6, 8, 9], moveFrom=[8, 9], moveTo=[6, 5])",
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [8, 9], moveTo = [6, 5])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom=[1, 2], moveTo=[3, 4])",
        "relocateMarbles(nums = [4, 6, 5, 7, 8], moveFrom = [4, 5], moveTo = [6, 7])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1=\"abc\", s2=\"abc\", s3=\"abc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cba\", s3 = \"bac\")",
        "findMinimumOperations(s1 = \"dog\", s2 = \"dog\", s3 = \"dog\")",
        "findMinimumOperations(s1=\"zzzzzz\", s2=\"zzzzzz\", s3=\"zzzzzz\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [0,1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,5,6])",
        "minLengthAfterRemovals(nums = [2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1,2,3,3,3,4,4,4,5])",
        "minLengthAfterRemovals(nums = [0,1,2,3,3,4,5,6])",
        "minLengthAfterRemovals(nums = [0, 2, 2, 4, 6, 6, 8])",
        "minLengthAfterRemovals(nums = [100, 111])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1, 2, 2, 3, 2, 2, 1])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [1, 1, 5], [2, 1, 10]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [1, 1, 10], [1, 3, 15]])",
        "maximizeTheProfit(n = 2, offers = [[2, 2, 10], [1, 2, 10]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 1], [2, 3, 2], [3, 3, 3]])",
        "maximizeTheProfit(n = 2, offers = [[2, 0, 6], [1, 1, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [2, 3, 120], [1, 4, 80]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 5], [3, 4, 100]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [1, 3, 100], [2, 3, 500]])",
        "maximizeTheProfit(n = 6, offers = [[2, 3, 15], [3, 4, 16], [4, 5, 17]])",
        "maximizeTheProfit(n = 4, offers = [[3, 0, 5], [1, 2, 6], [1, 1, 2], [2, 2, 1]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 3)",
        "canSplitArray(nums = [7,2,5,10,8], m = 12)",
        "canSplitArray(nums = [7,2,5,10,8], m = 12)",
        "canSplitArray(nums = [7,2,5,10,8], m = 12)",
        "canSplitArray(nums = [2, -1, 2, 4, -2, 3], m = 3)",
        "canSplitArray(nums = [1,2,1], m = 3)",
        "canSplitArray(nums = [10,10,1,2,2,1], m = 1)",
        "canSplitArray(nums = [1,2,5,1,6,7,1,8], m = 2)",
        "canSplitArray(nums=[1,2,2,4,2,1,2,2,2,1,2,1,2], m=5)",
        "canSplitArray(nums=[1, 2, 5, 9, 5, 2, 1, 2], m=10)"
    ],
    "sample_106": [
        "checkArray(nums = [3, 2, 2, 4], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1, 1, 2, 1, 2], k = 2)",
        "checkArray(nums = [1, 2, 3, 1, 1], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5, 1], k = 1)",
        "checkArray(nums = [1, 0, 1, 2, 3], k = 1)",
        "checkArray(nums = [5, 3, 2, 1, 0], k = 2)",
        "checkArray(nums = [9, 6, 3, 1, 2], k = 4)",
        "checkArray(nums = [1, 1, 0, 1, 2, 3, 1, 1, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 9], k = 4)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,10,11,12], k = 3)",
        "maximumBeauty(nums = [2, 4, 6, 8, 10], k = 4)",
        "maximumBeauty(nums = [1, 2, 4, 6, 7], k = 1)",
        "maximumBeauty(nums = [1, 4, 4, 4, 4, 5, 6, 6, 9], k = 0)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\", \"g,h,i\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"abc,def,ghi\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"banana-apple-orange\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one two three\", \"\", \"four five \"], separator = \" \")",
        "splitWordsBySeparator(words = [\"5, 4\", \"3, 2, 1\", \"1000\"], separator = \", \")",
        "splitWordsBySeparator(words = [\"this--is---a---test\", \"this---is---a---test\", \"this---is---a---test\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"Python.Code\", \"Code.Challenges\", \"Challenges.Python\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"I\\nlike\", \"juice\", \"but\\nnot\\nmilk\"], separator = '\\n')",
        "splitWordsBySeparator(words = [\"mango,pie,apple\", \"mango\", \"pie,apple\", \"mango,apple,mango\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"[1, 3, 1]\", \"[3, 4, 5, 1, 4]\", \"[1, 4, 3, 5, 6, 7]\"], separator = \",\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1,1,1,1])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [1, 2, 3, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "countWays(nums = [5, 1, 2, 3, 4])",
        "countWays(nums = [2,3,5,0])",
        "countWays(nums = [3,3,3,1])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minimumIndex(nums = [2, 3, 0, 1, 2])",
        "minimumIndex(nums = [1,1,2,3,1,1,4])",
        "minimumIndex(nums = [1,2,2,3,4,4,5,5])",
        "minimumIndex(nums = [1,3,5,5,2,7,1,3,5,4])",
        "minimumIndex(nums = [1,1,2,2,3,3,4,4,4,4,4,4,5,5])",
        "minimumIndex(nums = [2, 4, 2, 2, 3, 5, 5, 5])",
        "minimumIndex(nums = [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0])",
        "minimumIndex(nums = [2,2,2,3,3,1])",
        "minimumIndex(nums = [1,2,3,3,3,2,1,2,1,1,1,3,2,1,3,2,2,2,2,2,3,1,2,3,1,3,3,3,2,2,3,3,1,1,3,1,3,2,1,1,3,2,2,1,2,1,1,3,1,3,3,1,1,1,1,3,1,2,1,1,3,1,1,1,2,1,1,3,1,3,1,2,1,3,3,2,2,3,2,1,1,1,2,1,1,1,2,1,1,1,3,2,1,1,3,3,1,1,3,1,1,2,1,2,1,3,1,2,3,2,2,1,1,1,2,1,1,1,3,1,1,1,3,3,1,1,1,1,3,3,1,2,2,1,1,1,2,1,1,3,1,1,1,2,1,1,3,1,3,3,3,3,2,3,1,1,1,2,3,2,1,2,2,2,2,2,3,3,3,1,2,1,1,3,1,1,1,1,2,1,2,3,1,2,3,2,3,3,3,1,2,2,3,1,1,1,1,3,3,1,3,1,2,1,2,1,1,2,3,2,1,3,1,1,1,1,1,3,3,3,3,1,3,1,1,1,2,1,1,3,2,2,1,2,1,2,1,3,2,1,2,2,1,1,2,1,3,3,3,3,2,3,2,2,2,1,2,2,3,3,1,1,"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,1],[2,2],[8,9]])",
        "numberOfPoints(nums = [[1,1], [2,2], [8,8]])",
        "numberOfPoints(nums = [[-2, 2], [1, 4], [-3, 1]])",
        "numberOfPoints(nums = [[1, 5], [3, 10]])",
        "numberOfPoints(nums = [[3, 10], [4, 10], [9, 15]])",
        "numberOfPoints(nums = [[1,3],[2,7],[3,4]])",
        "numberOfPoints(nums = [[1, 100], [2, 2], [100, 100]])",
        "numberOfPoints(nums = [[1,2],[3,7]])",
        "numberOfPoints(nums = [[1, 5], [1, 3], [1, 2]])",
        "numberOfPoints(nums = [[1,3],[2,3],[2,4],[2,5],[3,5],[4,7]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3,4,5,6])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [4,1,3,2])",
        "semiOrderedPermutation(nums = [2,3,4,1])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8])",
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(nums = [1,2,5,3,4])",
        "semiOrderedPermutation(nums = [4,2,1,3])",
        "semiOrderedPermutation(nums = [5,3,2,1,4])",
        "semiOrderedPermutation(nums = [5,3,6,8,2,7,4,1])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 4, target = 2)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 10, target = 17)",
        "minimumPossibleSum(n = 100, target = 50)",
        "minimumPossibleSum(n = 10, target = 50)",
        "minimumPossibleSum(n = 1000, target = 11)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 3, 5, 5, 2, 7, 1, 3, 5, 4])",
        "minimumIndex(nums = [1, 3, 5, 5, 1, 1, 1])",
        "minimumIndex(nums = [1,2,3,1,1,3])",
        "minimumIndex(nums = [1, 1, 1, 1, 1, 2])",
        "minimumIndex(nums = [4, 3, 2, 1, 4, 3, 2, 4, 2])",
        "minimumIndex(nums = [0,1,0,1,1,1,1])",
        "minimumIndex(nums = [5, 5, 3, 3, 1, 5])",
        "minimumIndex(nums = [1,2,3,3,3,4,5,3])",
        "minimumIndex([2, 1, 2, 3, 2, 1, 2, 2, 2])",
        "minimumIndex(nums = [4, 5, 5, 1, 2, 3, 3, 3])"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 3, k = 12)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 3, k = 20)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [6, 7]])",
        "numberOfPoints(nums = [[1, 3], [6, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 2], [3, 4]])",
        "numberOfPoints(nums = [[-2, 2], [1, 1]])",
        "numberOfPoints(nums = [[-1, 1], [-2, 1], [-5, -4]])",
        "numberOfPoints(nums = [[-10, 10], [0, 20], [5, 10], [7, 12]])",
        "numberOfPoints(nums = [[2, 5], [3, 4], [1, 10], [1, 10]])",
        "numberOfPoints(nums = [[2, 5], [1, 2], [2, 5], [1, 4], [2, 5]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 5, k = 1)",
        "minimumSum(n=4, k=5)",
        "minimumSum(n= 2, k= 2)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4,5,6], m = 8)",
        "canSplitArray(nums = [1,2,2,4], m = 3)",
        "canSplitArray(nums = [2,3,4,5], m = 3)",
        "canSplitArray(nums = [5, 5, 5, 10], m = 10)",
        "canSplitArray(nums = [5,2,1,4,1], m = 3)",
        "canSplitArray(nums = [2,1,5,6,1,2], m = 4)",
        "canSplitArray(nums = [30, 12, 50], m = 35)",
        "canSplitArray(nums = [2,4,1,5,9,4,4,10,7], m = 6)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [2,1,1,2,2,2,1,3,2,2,3,1,3,2,3,2,1,1], m = 4)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 3, offers = [[1, 1, 10], [2, 2, 15]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 10], [2, 2, 15]])",
        "maximizeTheProfit(n = 5, offers = [[3, 0, 5], [1, 2, 10], [1, 1, 1], [2, 2, 4]])",
        "maximizeTheProfit(n = 4, offers = [[2,3,1],[3,2,2],[4,3,3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [1, 3, 3], [2, 3, 4]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 100], [3, 3, 150], [5, 4, 120]])",
        "maximizeTheProfit(n = 6, offers = [[4, 2, 2], [2, 2, 3], [4, 2, 10], [3, 3, 5]])",
        "maximizeTheProfit(n = 4, offers = [[2,1,10],[3,2,15],[3,3,20],[1,2,5],[2,2,5],[4,4,15]])",
        "maximizeTheProfit(n = 7, offers = [[3, 1, 3], [4, 3, 2], [6, 3, 4], [7, 3, 2]])",
        "maximizeTheProfit(n = 4, offers = [[3, 1, 2], [4, 2, 3], [2, 3, 2], [4, 2, 5]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3], k = 1)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 0, 0], k = 3)",
        "checkArray(nums = [1, 1, 1, 0, 1, 0, 1], k = 2)",
        "checkArray(nums = [2, 1, 3, 3, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [3, 4, 2, 3, 0, 4, 1], k = 3)",
        "checkArray(nums = [1,2,3,4,1,5], k = 2)",
        "checkArray(nums = [1, -2, 0, 5, -3, 1, 3, -2], k = 4)",
        "checkArray(nums = [1, 2, 1, 3, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 3, 2, 1, 2, 1, 1], k = 6)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,1,3,2,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,2,1,1,1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 2, 3, 3], k = 2)",
        "longestEqualSubarray(nums=[1,2,2,3,3,3], k=2)",
        "longestEqualSubarray(nums = [4,3,1,4,4], k = 2)",
        "longestEqualSubarray(nums = [10,20,30,40], k = 1)",
        "longestEqualSubarray(nums = [1,2,1,3,1,1,4,1], k = 2)",
        "longestEqualSubarray(nums = [4, 3, 3, 2, 2, 2, 1, 1, 1], k = 4)",
        "longestEqualSubarray(nums = [2,2,3,3,4,1,5,6,7,7,7,8,8,8,9], k = 7)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n=1, queries=[[0, 1]])",
        "colorTheArray(n = 2, queries = [[1, 2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [1, 3]])",
        "colorTheArray(n = 3, queries = [[2, 1], [1, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [0, 2], [1, 0]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 2], [1, 1]])",
        "colorTheArray(n = 5, queries = [[2, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [2, 2], [1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [\n    [1, 0],\n    [2, 1],\n    [1, 1],\n    [2, 0],\n    [2, 1],\n    [1, 1]\n])"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbndcd')",
        "smallestString(s = 'ddsbncd')",
        "smallestString(s = \"ddssbncd\")",
        "smallestString(s = 'kddqbncd')",
        "smallestString(s = \"kddsbncdg\")",
        "smallestString(s = \"dkddsbncd\")",
        "smallestString(s = \"kkddhdsncd\")",
        "smallestString(s = \"ksddbcncd\")",
        "smallestString(\"skdbncd\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [2, 4, 6, 8], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [4,2,3,3,2,2,1,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [4, 2, 3, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,4,4,6], threshold = 1)",
        "longestAlternatingSubarray(nums = [3, 5, 2, 4, 1, 2, 7], threshold = 2)",
        "longestAlternatingSubarray(nums = [6, 2, 3, 9, 2, 5, 1, 6], threshold = 8)",
        "longestAlternatingSubarray(nums = [3, 4, 2, 5, 5, 6, 7, 3, 1, 5], threshold = 1)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [2,2,2,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,2,2,2,2,2,2,2,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [3, 2, 6, 4, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,2,2,0,1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 3, 4, 5], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 4, 2, 5, 2, 2, 2, 1, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 2, 3, 2, 2, 2, 3, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [4,2,2,6,4,4,5,2,1,4,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2], threshold = 3)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 2, 1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 1, 3, 4, 3, 5])",
        "distinctDifferenceArray(nums = [5, 1, 2, 3, 5, 4])",
        "distinctDifferenceArray(nums = [3, 3, 3, 3, 3, 2])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"CDCBA\")",
        "minLength(s = \"ACCD\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"BCD\")",
        "minLength(s = \"CDABCDAB\")",
        "minLength(\"AABCD\")",
        "minLength(s = \"CABCDC\")",
        "minLength(s = \"ABBCCD\")"
    ],
    "sample_37": [
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(\"ababa\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(\"abab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abcdef\")",
        "minimumCost(s = \"122232\")",
        "minimumCost(s = \"j\")",
        "minimumCost(s = \"fhjfhfhjfhh\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 12)",
        "canSplitArray(nums = [1, 2, 2], m = 3)",
        "canSplitArray(nums = [1, 2, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 2, 3, 4], m = 7)",
        "canSplitArray(nums = [2, 2, 1], m = 1)",
        "canSplitArray(nums = [2, 4, 3, 5], m = 6)",
        "canSplitArray(nums = [35, 2, 1, 2, 3, 4, 1], m = 6)",
        "canSplitArray(nums = [5, 2, 2, 3, 5], m = 3)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1,0,1,1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,0,1,1,1,0])",
        "doesValidArrayExist(derived = [1, 2, 1, 3, 2, 3])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 0, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0])"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 1)",
        "checkArray(nums = [2,-1,2], k = 2)",
        "checkArray(nums = [4,2,3], k = 1)",
        "checkArray(nums = [1, 2, 1, 3, 2], k = 3)",
        "checkArray(nums = [1, 2, 3, 1, 3, 4], k = 2)",
        "checkArray(nums = [1,3,7,10,14], k = 3)",
        "checkArray(nums = [5, 12, 2, 7, 4, 10], k = 3)",
        "checkArray(nums = [1,2,3,4,5,1,1,1,5,1,2,3,2,4,5,1], k = 3)",
        "checkArray(nums = [2,5,4,6,5,9,7,8,8,4,10], k = 1)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 1, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0, 0, 0], target = 1000)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8,8,8,8,8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 5, 15], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 6, 7, 11], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 3, 4, 2, 3, 4, 1], target = 3)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 0, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums=[1, 1, 1, 1, 1], k=1)",
        "sumIndicesWithKSetBits(nums = [3, 6, 8, 10, 12], k = 2)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5,10,11,12], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,10,11,12], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,8,10], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5,10,11], k = 4)",
        "maximumBeauty(nums = [1,2,3,4,5,7,7,8,8], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,8,9,11], k = 3)"
    ],
    "sample_205": [
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"02575\")",
        "minimumOperations(num = \"999999\")",
        "minimumOperations(num = \"9999999999\")",
        "minimumOperations(num = \"111111\")",
        "minimumOperations(num = \"566\")",
        "minimumOperations(num = \"99302\")",
        "minimumOperations(num = \"325675\")",
        "minimumOperations(num = \"2550112250\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"00000\")",
        "minimumOperations(s = '00000000')",
        "minimumOperations(s = \"000000000000000000\")",
        "minimumOperations(s = \"0123\")",
        "minimumOperations(s = \"010010001\")",
        "minimumOperations(s = \"5050505050\")",
        "minimumOperations(s = \"110010001000\")",
        "minimumOperations(s = '999001999')",
        "minimumOperations(\"11213\")",
        "minimumOperations(s = \"955001500095\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3, 5])",
        "semiOrderedPermutation(nums = [5, 2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [1, 1, 2, 3, 3])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2, 5])",
        "semiOrderedPermutation(nums = [1,2,3,1,4,5,1])",
        "semiOrderedPermutation(nums = [4, 5, 5, 6])",
        "semiOrderedPermutation(nums = [3,1,1,1,1,1,2,1,1,1,1,1])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRRLA\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRLRLR\")",
        "furthestDistanceFromOrigin(moves = \"ALALALALALALALALALALALALALALALALALA\")",
        "furthestDistanceFromOrigin(moves = \"LLRLALAL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRRLLLLLLAA\")",
        "furthestDistanceFromOrigin(moves = \"LAAALAL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLALLLLLLRLRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLRLRLRLLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLLALRLRLRLALRLLALRLRLRLALRLRLRLLA\")"
    ],
    "sample_169": [
        "isAcronym(words = ['hello', 'world'], s = 'hw')",
        "isAcronym(words = [\"p\",\"y\",\"t\",\"h\",\"o\",\"n\"], s = \"python\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"test\"], s = 'tia')",
        "isAcronym(words = [\"New\", \"York\", \"City\"], s = \"NYC\")",
        "isAcronym(words = [\"radar\", \"laser\", \"defense\"], s = \"radar\")",
        "isAcronym(words = [\"mission\", \"control\", \"center\"], s = \"mcc\")",
        "isAcronym(words = [\"car\", \"driver\", \"engine\"], s = \"cdre\")",
        "isAcronym(words = [\"I\", \"love\", \"selfie\"], s = \"Ils\")",
        "isAcronym(words = [\"p\", \"a\", \"s\", \"s\"], s = \"papas\")",
        "isAcronym(words = ['the', 'pound', 'is', 'a', 'weight', 'measurement', 'used', 'in', 'the', 'United', 'Kingdom'], s = 'TPAWMUIS')"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,1,1,2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,1,1,2,3], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,1,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,2,2,2], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 3, 4], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [2,2,2,2,2,2,2,2,2,2], modulo = 4, k = 1)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 24, 15, 36])",
        "countBeautifulPairs(nums = [20, 30, 40, 50])",
        "countBeautifulPairs(nums = [12, 18, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [72, 9])",
        "countBeautifulPairs(nums = [2, 1, 3, 5])",
        "countBeautifulPairs(nums = [2, 1, 5, 7, 4])",
        "countBeautifulPairs(nums = [12, 18, 24, 36, 40, 42, 44, 46])",
        "countBeautifulPairs(nums = [72, 96, 60, 110, 13, 43])",
        "countBeautifulPairs(nums = [72,9,28,6,16,36])",
        "countBeautifulPairs(nums = [48, 192, 88, 64, 184])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [1,1,1,1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], target = 10)",
        "maximumJumps(nums = [-1, 2, 3, 0, 5], target = 3)",
        "maximumJumps(nums = [3, 5, 1, 2, 4, 1, 0, 2], target = 0)",
        "maximumJumps(nums = [-1,-2,-3,-4,4,-5,-6], target = 1)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 24, 15])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [12, 18, 24, 36, 48, 60, 72, 84])",
        "countBeautifulPairs(nums = [3, 4, 5, 6, 7, 8])",
        "countBeautifulPairs(nums = [6, 2, 8, 9])",
        "countBeautifulPairs(nums = [3, 5, 12, 15])",
        "countBeautifulPairs(nums = [3, 10, 5, 11])",
        "countBeautifulPairs(nums = [12, 41, 35])",
        "countBeautifulPairs(nums = [2, 5, 21, 25])",
        "countBeautifulPairs(nums = [12, 91, 23, 14, 121, 21])"
    ],
    "sample_18": [
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDBCD\")",
        "minLength(s = \"ABCCD\")",
        "minLength(s = \"ABCDD\")",
        "minLength(s = \"ABCDCDABCD\")",
        "minLength(s = \"CDABCDABCDABCDABCD\")",
        "minLength(\"ABCDCDABCDCD\")",
        "minLength(s = \"ABCDACDAB\")",
        "minLength(\"AACD\")",
        "minLength(\"AAABCDDDDCDCDCDCDCDBB\")"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"python\")",
        "finalString(s = 'istring')",
        "finalString(s = \"i am here\")",
        "finalString(s = \"tirng\")",
        "finalString(s = \"indian\")",
        "finalString(s = \"printings\")",
        "finalString(s = 'itsararak')"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0,0,1,1,1,0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0,1,2,3,4,5])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 10])",
        "findValueOfPartition(nums = [1, 10, 100, 1000])",
        "findValueOfPartition(nums = [5, 1, 2, 4, 3])",
        "findValueOfPartition(nums = [1, 10])",
        "findValueOfPartition(nums = [5, 1, 2])",
        "findValueOfPartition(nums = [1, 3, 6, 10, 15])",
        "findValueOfPartition(nums = [2, 2, 2])",
        "findValueOfPartition(nums = [1, 1, 2, 2])",
        "findValueOfPartition(nums = [5, 3, 1, 10, 2])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[1, 1]])",
        "colorTheArray(n=1, queries=[[1,1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2], [1, 3]])",
        "colorTheArray(n = 2, queries = [[1,1],[1,2],[1,1],[1,2]])",
        "colorTheArray(n = 2, queries = [ [1, 1], [2, 2] ])",
        "colorTheArray(n = 2, queries = [[1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [1, 1], [3, 1]])",
        "colorTheArray(n = 4, queries = [[1, 3], [2, 2], [1, 2], [2, 3]])",
        "colorTheArray(n=5, queries = [[2, 1], [2, 2], [2, 3], [2, 2]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 12)",
        "minimumPossibleSum(n = 3, target = 12)",
        "minimumPossibleSum(n = 6, target = 10)",
        "minimumPossibleSum(n = 6, target = 12)",
        "minimumPossibleSum(n = 4, target = 14)",
        "minimumPossibleSum(n = 12, target = 5)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 4, k = 1)",
        "minimumSum(n = 4, k = 1)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 6, k = 3)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2,1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 2, 1, 6, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8,8,9,9,9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 20, 20, 20], target = 21)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 4, 5, 4, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 7, 2, 12, 3, 1], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [3,4,2,1,5,4,4,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3], target = 2)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 1, 1], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 7)",
        "canSplitArray(nums = [2, 1, 1, 2], m = 3)",
        "canSplitArray(nums = [2, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [7, 2, 5], m = 10)",
        "canSplitArray(nums = [1,2,2,3,4,5], m = 6)",
        "canSplitArray(nums = [5, 9, 2], m = 10)",
        "canSplitArray(nums = [2, 1, 2, 1, 2, 2, 1], m = 3)",
        "canSplitArray(nums = [2,3,7], m = 2)",
        "canSplitArray(nums = [35, 14, 4, 20, 2, 50], m = 38)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [6, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 1, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [4, 5, 0, 0, 3, 3, 9, 9, 7, 7], m = 3, k = 0)",
        "countInterestingSubarrays(nums=[1,2,2,2], m=3, k=0)",
        "countInterestingSubarrays(nums = [6,2,4], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [6,2,7,6,4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 1, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [4, 4, 2, 2, 3, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [6, 2, 7, 8, 3, 2, 1, 5, 7], m = 3, k = 2)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [2,1,3,5,4], t = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 6)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8], t = 4)",
        "longestAlternatingSubarray(nums = [1,3,2,3,4,5], t = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 1, 3, 5, 7, 0, 8], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,1,7,8,9], t = 4)",
        "longestAlternatingSubarray(nums = [3, 4, 4, 2, 4, 2, 2], t = 2)",
        "longestAlternatingSubarray(nums = [1, 4, 2, 1, 6, 1, 1], t = 4)",
        "longestAlternatingSubarray(nums = [4, 5, 3, 6, 8, 9], t = 1)",
        "longestAlternatingSubarray(nums = [3, 7, 7, 3, 2, 7, 8, 3, 4], t = 4)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [2, 2, 2])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 2, 0, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [2, 1, 2, 1, 0, 0, 1, 2, 0, 1, 2, 2])",
        "numberOfGoodSubarraySplits(nums = [2, 2, 2, 0, 1, 0, 0, 0, 2, 2, 2, 1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '5123000000001')",
        "removeTrailingZeros(num = '5123001000')",
        "removeTrailingZeros(num = '512300000100')",
        "removeTrailingZeros(num = \"5123000000001\")",
        "removeTrailingZeros(num = '10011')"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 3, b = 2)",
        "makeTheIntegerZero(a = 7, b = 1)",
        "makeTheIntegerZero(a = 7, b = 4)",
        "makeTheIntegerZero(a = 200, b = 100)",
        "makeTheIntegerZero(a = 100, b = 7)",
        "makeTheIntegerZero(a = 22, b = 5)",
        "makeTheIntegerZero(a = 123, b = 7)",
        "makeTheIntegerZero(a = 1000, b = 400)",
        "makeTheIntegerZero(a = 3000, b = 2000)",
        "makeTheIntegerZero(a = 252, b = 132)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 10)",
        "canSplitArray(nums = [2,3,4,5,6], m = 7)",
        "canSplitArray(nums = [1,2,3,4,5], m = 11)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 9)",
        "canSplitArray(nums = [1, 1, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [5, 10, 20, 30], m = 4)",
        "canSplitArray(nums = [2, 3, 1, 2, 2, 1, 2, 10, 2], m = 4)"
    ],
    "sample_161": [
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1])",
        "maxSum(nums = [12, 34])",
        "maxSum(nums = [-1,-2])",
        "maxSum(nums = [-1, 0, 1, 2])",
        "maxSum(nums = [2, 5, 3, 6, 7])",
        "maxSum(nums = [123, 54, 4321])",
        "maxSum(nums = [1,2,-2,2,3,-1])",
        "maxSum(nums = [3, 7, 1, 8, 4, 6, 9, 5, 2, 4])",
        "maxSum(nums = [335, 1111, 1234, 111, 111, 999])",
        "maxSum(nums = [151, 144, 193, 196, 147, 180, 177, 172, 181, 164, 190, 183, 165, 191, 168, 179, 175, 192])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 6, target = 5)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [3,5,1,4,2])",
        "findValueOfPartition(nums = [1,2,3,4,5,6])",
        "findValueOfPartition(nums = [5, 1, 2, 3, 4])",
        "findValueOfPartition(nums = [1,5,3,9,10])",
        "findValueOfPartition(nums = [1,4,7,11])",
        "findValueOfPartition(nums = [1,5,3,9,10,11])",
        "findValueOfPartition(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47])",
        "findValueOfPartition(nums = [0, 2, 3, 6, 10, 10, 10])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 18]])",
        "numberOfPoints(nums = [[1, 3], [5, 10]])",
        "numberOfPoints(nums = [[1,1], [2,2], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [6, 7]])",
        "numberOfPoints(nums = [[1,3], [2,4], [4,7]])",
        "numberOfPoints(nums = [[10, 20], [17, 100], [0, 150]])",
        "numberOfPoints(nums = [[-1,0],[3,4],[5,6]])",
        "numberOfPoints(nums = [[3, 9], [6, 10], [1, 5]])",
        "numberOfPoints(nums = [[10,10], [5,25], [10,20]])",
        "numberOfPoints(nums = [[1,5], [10,20], [1, 3], [3, 5]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [6, 7]])",
        "numberOfPoints(nums = [[1,3],[6,7]])",
        "numberOfPoints(nums = [[1, 3], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 7]])",
        "numberOfPoints(nums = [[2, 2], [3, 4], [7, 7]])",
        "numberOfPoints(nums = [[-1, 1], [2, 3], [0, 1]])",
        "numberOfPoints(nums = [[1, 5], [6, 8], [1, 10]])",
        "numberOfPoints(nums = [[1, 5], [1, 5], [2, 5], [1, 6], [2, 5], [2, 6], [3, 6]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ', ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three,four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one two\", \"three four\", \"five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three;four;five', 'six'], separator = \";\")"
    ],
    "sample_200": [
        "minOperations(nums = [1,2], target = 4)",
        "minOperations(nums = [3, 3], target = 6)",
        "minOperations(nums = [3, 2, 2, 4], target = 12)",
        "minOperations(nums = [3, 2, 2, 4, 3], target = 20)",
        "minOperations(nums = [1, 3, 4, 2], target = 6)",
        "minOperations(nums = [4, 3, 2, 1], target = 3)",
        "minOperations(nums = [1, 1, 2, 3], target = 3)",
        "minOperations(nums = [3, 1], target = 12)",
        "minOperations(nums = [2,3,5,7,8], target = 9)",
        "minOperations(nums = [1, 3, 4, 5, 6, 1, 2, 7, 8, 9], target = 100)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "checkArray(nums = [1, 2, 1, 2, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 4)",
        "checkArray(nums = [1,2,-1,1], k = 2)",
        "checkArray(nums = [1,2,2,2,2], k = 1)",
        "checkArray(nums = [1, 2, 3, 1, 2, 3, 1], k = 4)",
        "checkArray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,1,0])",
        "doesValidArrayExist(derived=[1, 1, 0])",
        "doesValidArrayExist([0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0,1,0])",
        "doesValidArrayExist(derived = [0,1,0,0,1,1,1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0])",
        "doesValidArrayExist([1, 0, 1, 0, 1, 0, 1, 0, 0, 0])"
    ],
    "sample_159": [
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [4, 6, 23, 10, 1, 2, 2])",
        "maxSum(nums = [-5,-2,-4])",
        "maxSum(nums = [111, 75, 1, 8])",
        "maxSum(nums = [10, 1, 5, 4, 2])",
        "maxSum(nums = [9999,1999,8999])",
        "maxSum(nums = [1,5,8,7,12,15,7,12,8])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,3,1,2,3,1,2,3])",
        "continuousSubarrays(A = [1,2,3,4,1,2,3,4,1,2,3,4])",
        "continuousSubarrays(A = [2, 4, 6, 8, 10, 12])",
        "continuousSubarrays(A = [1,3,1,2,1,4,1])",
        "continuousSubarrays(A = [1,1,1,1,2,1,1,1,1,1,1,1,1])",
        "continuousSubarrays(A = [1, 1, 2, 2, 2, 3, 3, 4, 4, 4])",
        "continuousSubarrays(A = [3, 3, 1, 1, 3, 3, 3])",
        "continuousSubarrays(A = [1,3,3,3,1,3,1,3,3])",
        "continuousSubarrays(A = [5, 1, 3, 10, 11, 3, 10, 5])",
        "continuousSubarrays(A = [1,1,3,2,3,4,3,1,1,4])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [2, 2, 3, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 3, 2, 3, 2])",
        "distinctDifferenceArray(nums = [3, 2, 1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [2, 4, 6, 5, 2, 2, 2, 3, 3, 6])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3], b = [1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 3, 2], b = [2, 0, 1])",
        "maxNonDecreasingLength(a = [2, 3, 6, 4, 5], b = [1, 5, 3, 2, 6])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 4], b = [1, 2, 3, 5, 5])",
        "maxNonDecreasingLength(a = [1, 3, 6], b = [7, 1, 6])",
        "maxNonDecreasingLength(a = [1, 4, 3, 2], b = [3, 1, 3, 2])",
        "maxNonDecreasingLength(a = [2, 4, 5, 7, 8], b = [4, 6, 7, 8, 10])",
        "maxNonDecreasingLength(a = [5, 3, 1, 2, 5], b = [1, 5, 3, 4, 2])",
        "maxNonDecreasingLength(a = [1, 4, 6, 3, 5, 7, 2], b = [2, 4, 3, 9, 3, 5, 2])",
        "maxNonDecreasingLength(a = [2, 1, 0, 1, 1, 0, 0, 1], b = [4, 5, 6, 3, 2, 1, 1, 3])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 5)",
        "distanceTraveled(mainTank = 15, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 3)",
        "distanceTraveled(mainTank = 100, additionalTank = 2)",
        "distanceTraveled(mainTank=2, additionalTank=5)"
    ],
    "sample_160": [
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [2,4,6,2,5])",
        "maxSum(nums = [2, 24, 26, 27])",
        "maxSum(nums = [250, 50, 10, 200])",
        "maxSum(nums = [-12, -123, 123, 1234, 12345])",
        "maxSum(nums = [6, 7, 2, 3, 2, 1, 8])",
        "maxSum(nums = [214, 232, 254])",
        "maxSum(nums = [11, 100, 12, 9, 2, 121, 3, 99, 99999, 1, 2, 3, 122, 11, 101])"
    ],
    "sample_52": [
        "smallestString(s = \"addsbncd\")",
        "smallestString(s = \"akddsbcdn\")",
        "smallestString(s = \"abcdabcd\")",
        "smallestString(s = \"kddsbnca\")",
        "smallestString(s = \"kddsbcda\")",
        "smallestString(s = \"kddsbndd\")",
        "smallestString(s = \"ddasdncd\")",
        "smallestString(s = \"kddsbndb\")",
        "smallestString(s = \"dddkddsncd\")",
        "smallestString(s = 'kkkddsbkd')"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [2, 4, 6, 8])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 10, 100])",
        "findValueOfPartition(nums = [1, 3, 4, 8, 10])",
        "findValueOfPartition(nums = [1,4,10])",
        "findValueOfPartition(nums = [1, 3, 4, 8, 10, 11])",
        "findValueOfPartition(nums = [1, 3, 7, 3])",
        "findValueOfPartition(nums = [4, 7, 9, 6, 3, 1])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = 'abab')",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"bba\")",
        "makeSmallestPalindrome(s = \"abac\")",
        "makeSmallestPalindrome(s = 'baa')",
        "makeSmallestPalindrome(s = \"abacab\")",
        "makeSmallestPalindrome(s = \"abbaaabab\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 0, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 1, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 5)",
        "makeTheIntegerZero(num1 = 1000, num2 = 1)",
        "makeTheIntegerZero(num1 = 1000, num2 = 1)",
        "makeTheIntegerZero(num1 = 34, num2 = 15)",
        "makeTheIntegerZero(num1 = 89, num2 = 43)",
        "makeTheIntegerZero(num1 = 2107, num2 = 2109)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1, 3], [2, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1,3],[2,6],[8,10],[15,16]])",
        "numberOfPoints(nums = [[1,3],[6,7]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [2, 5], [4, 6]])",
        "numberOfPoints(nums = [[1,2],[3,5]])",
        "numberOfPoints(nums = [[1, 100]])",
        "numberOfPoints(nums = [[1,2],[5,7]])",
        "numberOfPoints(nums=[(1, 5), (4, 8), (6, 10), (1, 11), (1, 12)])",
        "numberOfPoints(nums = [[2,3],[4,6],[5,8],[3,7]])",
        "numberOfPoints(nums = [[2, 8], [3, 6], [1, 3], [1, 8], [5, 8]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1,2,2,2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 2, 2, 2, 2, 3, 3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 2, 2, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,2,2,2,2,3,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 1, 2, 3, 3, 4], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [6, 2, 2, 3, 1, 1, 5, 4], m = 3, k = 0)"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abaaba\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"cdacda\")",
        "minimumCost(s = \"0000000\")",
        "minimumCost(s = \"cdbb\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1,0,0,1])",
        "doesValidArrayExist(derived = [1,0,0,1,1,1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived=[0,1,0,1])",
        "doesValidArrayExist(derived = [1,0,1,1,0,0,1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 5])",
        "distinctDifferenceArray(nums = [2, 4, 1, 3, 2])",
        "distinctDifferenceArray(nums = [1, 3, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [2, 1, 5, 7, 2, 3, 4, 3, 0, 1])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 1, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 3, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,4,4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 3, 4, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20], target = 16)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 3, 4, 1, 3, 5, 3, 4], target = 6)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"deed\")",
        "makeSmallestPalindrome(s = \"noon\")",
        "makeSmallestPalindrome(s = \"teve\")",
        "makeSmallestPalindrome(s = \"teen\")",
        "makeSmallestPalindrome(s = \"aaaa\")",
        "makeSmallestPalindrome(s = \"no\")",
        "makeSmallestPalindrome(s = \"babcbc\")",
        "makeSmallestPalindrome(s = 'ababababab')",
        "makeSmallestPalindrome(s = \"anbhayneven\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num = '512300000001')",
        "removeTrailingZeros(num = '512300000000000000001')",
        "removeTrailingZeros(num = \"51230000001\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums=[1,2,2,2], m=2, k=2)",
        "countInterestingSubarrays(nums = [1, 2, 2, 2, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [6, 0, 0, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 1, 7, 2, 4, 11, 2], m = 3, k = 2)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 3, additionalTank = 5)",
        "distanceTraveled(mainTank = 4, additionalTank = 4)",
        "distanceTraveled(mainTank = 10, additionalTank = 20)",
        "distanceTraveled(mainTank = 4, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 100)",
        "distanceTraveled(mainTank = 11, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 12)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [2, 3, 4, 1], x = 2)",
        "minCost(A = [1, 1, 1, 1, 1], x = 3)",
        "minCost(A = [2, 2, 3, 3, 4], x = 3)",
        "minCost(A = [2, 4, 1], x = 1)",
        "minCost(A = [2, 2, 4, 4], x = 2)",
        "minCost(A = [4, 2, 6], x = 3)",
        "minCost(A = [1, 3, 1, 1, 1, 4, 1], x = 3)",
        "minCost(A = [4, 5, 4, 8, 6, 2], x = 4)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3])",
        "maxIncreasingGroups(u = [1, 2, 2])",
        "maxIncreasingGroups(u = [3, 4, 5, 6, 7])",
        "maxIncreasingGroups(u = [1, 3, 5, 2])",
        "maxIncreasingGroups(u = [2, 1, 3, 2])",
        "maxIncreasingGroups(u = [1, 3, 5, 7, 8, 9])",
        "maxIncreasingGroups(u = [3, 5, 1, 4])",
        "maxIncreasingGroups(u = [2, 1, 2, 1, 0, 2, 2, 1])",
        "maxIncreasingGroups(u = [4, 6, 6, 5, 2, 1])",
        "maxIncreasingGroups(u = [1, 1, 1, 2, 3, 5, 6, 6, 7, 7, 8, 9, 10])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 1, 2], k = 2)",
        "checkArray(nums = [1,1,1,1,1,1], k = 3)",
        "checkArray(nums = [6, 5, 3, 1, 8, 7], k = 3)",
        "checkArray(nums = [1,2,3,4], k = 4)",
        "checkArray(nums = [2, 1, 1, 0, 0], k = 3)",
        "checkArray(nums = [2, 1, 3, 3], k = 4)",
        "checkArray(nums = [2, 1, 1, 2, 1, 1, 2], k = 3)",
        "checkArray(nums = [6, 5, 4, 5, 3, 1, 1, 1], k = 4)",
        "checkArray(nums = [4, 5, 11, 8, 11, 3, 7, 9], k = 4)",
        "checkArray(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9], k = 1)"
    ],
    "sample_19": [
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"CDABA\")",
        "minLength(s = \"ABCDDCDAB\")",
        "minLength(s = \"ABAB\")",
        "minLength(s = \"ABABABCDCDCD\")",
        "minLength(s = \"ADCDC\")",
        "minLength(s = \"ABCDDCDABABDCD\")",
        "minLength(s = \"ACBDCBDCD\")",
        "minLength(s = \"ACBDBD\")",
        "minLength(s = \"ABABABABCDCDCDCDDCDC\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 2, 3], target = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 3)",
        "minOperations(nums = [1,2,3], target = 7)",
        "minOperations(nums = [1,2,3], target = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1], target = 8)",
        "minOperations(nums = [1, 2, 1, 3], target = 20)",
        "minOperations(nums = [1,1,2,2,4,4,8,8,16,16], target = 31)",
        "minOperations(nums = [1, 2, 3, 2, 2, 1], target = 13)",
        "minOperations(nums = [7, 1, 5, 2, 3, 4, 6], target = 12)",
        "minOperations(nums = [9, 12, 3, 24], target = 22)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"This is a sentence.\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"1\", \"2\"], separator = \"2\")",
        "splitWordsBySeparator(words = [\"apple;mango;grapes\"], separator = \";\")",
        "splitWordsBySeparator(words = [\"this;is;a;sentence;\"], separator = \";\")",
        "splitWordsBySeparator(words = ['a.b', 'c;d', 'e:f'], separator = ['.', ';', ':'])",
        "splitWordsBySeparator(words = [\"the,the,the,the,cat\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"dot\", \"split\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"And,Or,Not\", \"And/Or/Not\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"192.168.0.1\", \"172.217.30.19\", \"10.200.0.1\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"Hey, where are you?\", \"I am in room 202\", \"in the university of Delaware\"], separator = \" \")"
    ],
    "sample_54": [
        "smallestString(s = \"ddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kkddsbncd\")",
        "smallestString(s = \"kkddsbncd\")",
        "smallestString(s = 'akddsbncd')",
        "smallestString(s = \"ddsbancd\")",
        "smallestString(s = 'kddsbancd')",
        "smallestString(s = \"ddsbcdnk\")",
        "smallestString(s = 'kdkdncd')",
        "smallestString(s = \"kdsdabc\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"L_RL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL__\")",
        "furthestDistanceFromOrigin(moves = \"R_L_L_RR_\")",
        "furthestDistanceFromOrigin(moves = \"LLR__RRRLLL\")",
        "furthestDistanceFromOrigin(moves = 'R_R__RR')",
        "furthestDistanceFromOrigin(\"LL__RR__LL_\")",
        "furthestDistanceFromOrigin(moves = \"_LRRRL_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"RL__RRR__R__RRRRR\")",
        "furthestDistanceFromOrigin(moves = \"_L_R__RRR_L_R__R_\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 100, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 50, num2 = 10)",
        "makeTheIntegerZero(num1 = 11, num2 = 12)",
        "makeTheIntegerZero(num1 = 72, num2 = 18)",
        "makeTheIntegerZero(num1 = 40, num2 = 21)",
        "makeTheIntegerZero(num1 = 128, num2 = 11)",
        "makeTheIntegerZero(num1 = 91, num2 = 17)"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'ddsbncd')",
        "smallestString(s = \"kddsbndcd\")",
        "smallestString(s = 'kdsdcba')",
        "smallestString(s = \"dabcdsbncd\")",
        "smallestString(s = \"ddssdncd\")",
        "smallestString(s = \"dkdsdsdbcd\")",
        "smallestString(s = \"dkdsdgcd\")",
        "smallestString(s = \"dkbsdsc\")",
        "smallestString(\"cdabdsncd\")"
    ],
    "sample_146": [
        "finalString(s = 'interesting')",
        "finalString(s = 'interesting')",
        "finalString(s = 'python')",
        "finalString(s = 'interviewbit')",
        "finalString(s = \"pintern\")",
        "finalString(s = 'ternip')",
        "finalString(s = \"terminal\")",
        "finalString(s = \"intention\")",
        "finalString(s = 'inertop')",
        "finalString(s = 'whjtnfni')"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [3,2,3,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,2,3,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,2,3,2,2], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 3, 3, 3], k = 1)",
        "longestEqualSubarray(nums = [1,2,1,3,2,3,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [4,4,2,2,1,1], k = 3)",
        "longestEqualSubarray(nums = [2,2,2,2,2,3,3,3,3,4,4,4,4], k = 6)"
    ],
    "sample_155": [
        "canSplitArray(nums = [7,2,5,10,8], m = 15)",
        "canSplitArray(nums = [1,1,1,1,1,1], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [1, 2, 7, 2, 3], m = 8)",
        "canSplitArray(nums = [10, 10], m = 1)",
        "canSplitArray(nums = [2,2,2,2,2,2,2,2,2,2], m = 5)",
        "canSplitArray(nums = [7,7,7,7,7], m = 14)",
        "canSplitArray(nums = [2,1,1,1,3,2], m = 10)",
        "canSplitArray(nums = [5,9,3,6,1,3,6], m = 10)",
        "canSplitArray(nums = [15, 1, 11, 2, 14], m = 15)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [2, 1, 2, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,4])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,4,5,6,7])",
        "numberOfGoodSubarraySplits(nums = [1,2,1])",
        "numberOfGoodSubarraySplits(nums = [2, -2, 4, 6])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [2, 3, 1, 3, 4])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,2,2,3,3,4])",
        "numberOfGoodSubarraySplits(nums = [2, -2, 4, -2, 6, -1, 2, -2, 6, -2])",
        "numberOfGoodSubarraySplits(nums = [3, 1, 1, 4, 5, 7, 6, 2])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one-two', 'three-four', 'five-six'], separator = '-')",
        "splitWordsBySeparator(words = ['1,2,3,4,5,6'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two,three,four', 'five,six'])",
        "splitWordsBySeparator(words = ['one#two#three', 'four', 'five', 'six'], separator = '#')",
        "splitWordsBySeparator(words = ['one;two;', 'three;four;', 'five;', 'six'], separator = ';')",
        "splitWordsBySeparator(words = [\"one|two\", \"three|four\", \"five|six\"], separator = '|')",
        "splitWordsBySeparator(words = ['one.two.three', 'four,five,six'], separator = '.')",
        "splitWordsBySeparator(words = [\"one,two\", \"three,,,four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three:four;five-six\"])",
        "splitWordsBySeparator(words = [\"one#two#three\", \"four\", \"#five\", \"six\"], separator = '#')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [0,0,0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0, 0], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [4,5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [0,2,4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 4, 1, 7], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4,4,4,4,4,4,4,4], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 4, 3, 5, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 7, 9, 2, 4, 3], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3.1, 5.8, 6.8], target = 6.8)"
    ],
    "sample_168": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = ['hello', 'world'], s = 'hw')",
        "isAcronym(words = [\"I\", \"go\", \"to\", \"school\"], s = \"IGTS\")",
        "isAcronym(words = [\"rapid\", \"development\"], s = \"rd\")",
        "isAcronym(words = [\"junior\", \"programmer\"], s = \"jp\")",
        "isAcronym(words = [\"fork\", \"spoon\", \"knife\"], s = \"fsk\")",
        "isAcronym(words = [\"really\", \"is\", \"not\"], s = \"ri\")",
        "isAcronym(words = [\"misty\", \"rain\", \"forest\"], s = \"mrf\")",
        "isAcronym(words=[\"electric\", \"wheeled\", \"national\"], s=\"ELWN\")",
        "isAcronym(words = [\"watch\", \"the\", \"stream\", \"baby\"], s = \"wtbs\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"hey\", \"what\", \"is\", \"up\"], s = \"hwiu\")",
        "isAcronym(words = [\"hello\", \"to\", \"you\"], s = \"hut\")",
        "isAcronym(words = [\"hello\", \"world\", \"apple\", \"banana\"], s = \"hwaba\")",
        "isAcronym(words = [\"HAL\", \"9000\"], s = \"HAL\")",
        "isAcronym(words = [\"electric\", \"and\", \"orange\"], s = \"eandor\")",
        "isAcronym(words = [\"be\", \"the\", \"boss\"], s = \"beboss\")",
        "isAcronym(words = [\"Banana\", \"Compass\", \"Apple\"], s = \"BACAPA\")",
        "isAcronym(words = [\"electronic\", \"digital\", \"recording\", \"systems\", \"engineering\", \"corporation\"], s = \"edr\")",
        "isAcronym(words = [\"us\", \"Pacific\", \"time\"], s = \"USPT\")",
        "isAcronym(words = [\"Scenario\", \"is\", \"super\"], s = \"scis\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"cba\")",
        "minimumCost(\"abc\")",
        "minimumCost(\"abaac\")",
        "minimumCost(\"a\")",
        "minimumCost(s = \"z\")",
        "minimumCost(\"jjjjjjjjjj\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = \"abbc\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"aabbc\")",
        "makeSmallestPalindrome(s = \"aacb\")",
        "makeSmallestPalindrome(s = \"abbacd\")",
        "makeSmallestPalindrome(s = \"abccd\")",
        "makeSmallestPalindrome(s = \"abdac\")"
    ],
    "sample_50": [
        "smallestString(s = 'zabaab')",
        "smallestString(s = 'ababa')",
        "smallestString(s = 'abaabb')",
        "smallestString(s = 'zzzz')",
        "smallestString(s = 'bbaab')",
        "smallestString(s = 'abza')",
        "smallestString(s = \"azzzza\")",
        "smallestString(\"baba\")",
        "smallestString(\"azbza\")",
        "smallestString(s = \"aaabaaab\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1,3,5,13], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,8], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 2, 1, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [3,1,4,1,5,9,2,6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 7, 12, 10, 15], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 2, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 3, 5, 6, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 2, 5, 2, 4, 5, 5, 2, 3, 4], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABACCD\")",
        "minLength(s = \"ABABABCDCDCD\")",
        "minLength(s = \"ABABDCDCD\")",
        "minLength(s = \"BBABCDA\")",
        "minLength(s = \"ABCDCDABCDCDABCDCD\")",
        "minLength(s = \"ABABACDCD\")",
        "minLength(s = \"ABABABABABCDABABABABAB\")",
        "minLength(s = \"ACDBCDADA\")",
        "minLength(s = \"BAABABCDC\")",
        "minLength(\"AAAAAAAAABCCCDDDD\")"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2])",
        "maxSum(nums = [200, 100, 100, 100, 200, 100])",
        "maxSum(nums = [50523, 100001])",
        "maxSum(nums = [-3, -4, -6, 10, 20, 30, 50, 100, 1000])",
        "maxSum(nums = [566, 4, 184, 88])",
        "maxSum(nums = [576, 562, 493, 443, 387, 393])",
        "maxSum(nums = [518, 123, 726, 126, 365, 623])",
        "maxSum(nums = [2439, 2066, 1596, 1788, 1385, 1596])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6])",
        "semiOrderedPermutation(nums = [5, 3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [5, 1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3,2,5,4,1])"
    ],
    "sample_162": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15])",
        "maxSum(nums = [10, 7, 77, 100])",
        "maxSum(nums = [22, 220, 222, 2222, 22222, 222222, 2222222])",
        "maxSum(nums = [4, 6, 2, 1, 6, 1, 1, 4, 1, 6, 8, 8])",
        "maxSum(nums = [212, 213, 121, 214, 215, 216, 217])",
        "maxSum(nums = [37, 88, 37, 37, 91, 1, 37, 88, 88, 1])",
        "maxSum([123, 412, 1234, 1244])",
        "maxSum(nums = [7, 60, 29, 72, 10, 11])",
        "maxSum(nums = [12, 34, 56, 67, 98, 22, 77, 77, 35, 78])",
        "maxSum(nums = [77, 33, 91, 58, 92, 47, 98, 17, 66, 53])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1111')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '11111')",
        "maximumOddBinaryNumber(s = '10111')",
        "maximumOddBinaryNumber(s = '101011')",
        "maximumOddBinaryNumber(s = '1110011')",
        "maximumOddBinaryNumber(s = \"11101011\")",
        "maximumOddBinaryNumber(s = '1111000000')",
        "maximumOddBinaryNumber(s = '110110001')",
        "maximumOddBinaryNumber(s = \"01010101010101010101010101010101\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 4, 1, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 0, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 4, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 7, 8, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 6, 5, 5, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 2, 5, 3, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 7, 9], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 8, 1, 7, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 2, 8], target = 3)"
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"portable\", \"operating\", \"system\"], s = \"POS\")",
        "isAcronym(words = [\"he\", \"is\", \"a\", \"man\"], s = \"him\")",
        "isAcronym(words = [\"happy\", \"birthday\"], s = \"hbd\")",
        "isAcronym(words = [\"john\", \"smith\"], s = \"js\")",
        "isAcronym(words = [\"radar\", \"radii\", \"radios\"], s = \"radar\")",
        "isAcronym(words = [\"earth\", \"is\", \"out\", \"of\", \"order\"], s = \"o\")",
        "isAcronym(words = [\"electric\", \"gasified\", \"li\"], s = \"EGL\")",
        "isAcronym(words = [\"There\", \"Are\", \"Not\", \"Many\", \"Who\", \"Follow\", \"All\", \"The\", \"Path\"], s = \"TANMFAAT\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank=5, additionalTank=0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 3)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 4)",
        "distanceTraveled(mainTank=6, additionalTank=1)",
        "distanceTraveled(mainTank = 6, additionalTank = 4)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3, 5, 4])",
        "maxIncreasingGroups(A = [2, 2, 2, 1, 1, 1, 1])",
        "maxIncreasingGroups(A = [1, 2, 4, 6, 7, 8])",
        "maxIncreasingGroups(A = [1, 3, 3, 2, 1])",
        "maxIncreasingGroups(A = [3, 1, 3, 1, 3, 1, 3, 1])",
        "maxIncreasingGroups(A = [1, 1, 2, 2, 2, 3, 4, 5, 6, 7, 8])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 3, 2, 1, 3, 4])",
        "maxIncreasingGroups(A = [6, 5, 4, 4, 4, 4, 3, 2, 2, 1, 1])",
        "maxIncreasingGroups(A = [5, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 1"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 3, 3, 5])",
        "distinctDifferenceArray(nums = [2, 1, 2, 1, 1, 3])",
        "distinctDifferenceArray(nums = [5, 1, 2, 3, 2])",
        "distinctDifferenceArray(nums = [0, 4, 4, 0, 0, 2, 2])",
        "distinctDifferenceArray(nums = [-10, -10, -10, 5, 5, 5, 10, 10])",
        "distinctDifferenceArray(nums = [-1, 0, 2, 5, 7, 8, 9, 9, 9, 10, 11, 15])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 0, additionalTank = 2)",
        "distanceTraveled(mainTank = 0, additionalTank = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,1,2,2,2,2])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 1, 4])",
        "countCompleteSubarrays(nums = [1,1,1,2,1,1,3,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,1,2,3])",
        "countCompleteSubarrays(nums = [2, 3, 1, 3, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,2,3,3])",
        "countCompleteSubarrays(nums = [1,2,2,3,3,4,5,5,5,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [9,4,2,1,0,0,2,6])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 13], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,3,5,7,9,11,13,15], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 7, 12, 15, 18, 20], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aaabbc\")",
        "minimizedStringLength(s = \"abcc\")",
        "minimizedStringLength(s = \"abcc\")",
        "minimizedStringLength(s = \"aaabcc\")",
        "minimizedStringLength(s = \"hello\")",
        "minimizedStringLength(s = \"baan\")",
        "minimizedStringLength(s = \"fcrxzwscanmligyxyvym\")",
        "minimizedStringLength(s = \"aabcdcbbcd\")",
        "minimizedStringLength(s = \"01223344555666\")",
        "minimizedStringLength(s = \"abcaccccaaaaccccaa\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,5,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,1,3,5,7,8], k = 3)",
        "longestEqualSubarray(nums = [4,2,3,1,6,11], k = 3)",
        "longestEqualSubarray(nums = [10,2,2,3,1,1,3,5,7,2,3,2,3,1,1,1,1,3,2,2,3,2,2], k = 3)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 2], [4, 2], [5, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 2], [4, 2], [5, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [1, 2], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,2],[4,2],[5,2]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 1], [2, 2], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [1, 2], [3, 1]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 3], [1, 4], [2, 2]])",
        "colorTheArray(n=4, queries=[[1,1],[2,1],[3,1],[4,1],[3,0],[1,0],[4,0],[2,0],[3,2]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1,3,6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3,2,3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,1,3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 1, 1], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,1,1,1,4,4,4,4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 4, 2, 3, 1, 3], target = 4)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 21, 24, 36])",
        "countBeautifulPairs(nums = [2, 4, 5, 6, 8, 9])",
        "countBeautifulPairs(nums = [3, 5, 7, 10, 11])",
        "countBeautifulPairs(nums = [2, 12, 20, 31])",
        "countBeautifulPairs(nums = [23, 45, 67, 89, 123])",
        "countBeautifulPairs(nums = [12, 24, 48, 60, 18])",
        "countBeautifulPairs(nums = [12, 96, 12])",
        "countBeautifulPairs(nums = [4, 12, 15, 19, 3, 30])",
        "countBeautifulPairs(nums = [12, 91, 63, 77, 32])",
        "countBeautifulPairs(nums = [72, 94, 19, 95, 4, 17])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [2, 4, 6, 8, 10])",
        "countWays(nums = [2, 3, 3, 4, 4, 4])",
        "countWays(nums = [3, 5, 5, 0, 3, 1, 4])",
        "countWays(nums = [1, 1, 1, 2, 4])",
        "countWays(nums = [1,2,3,4,6,7,8])",
        "countWays(nums = [1,1,3,3,4,4,6,6])",
        "countWays(nums = [2, 4, 6, 8, 9, 10, 11, 12, 13])",
        "countWays(nums = [2,2,3,3,4,4,5,5,6,6,6])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '00101')",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber(s = '11001')",
        "maximumOddBinaryNumber(s = '001001')",
        "maximumOddBinaryNumber(s = '00110011')",
        "maximumOddBinaryNumber(s = '1000111')",
        "maximumOddBinaryNumber(s = '111101011011')",
        "maximumOddBinaryNumber(s = '1110010101101101')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 10, 11], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 10, 11], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 10, 10], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,10,15], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 8], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 5, 3], k = 1)",
        "maximumBeauty(nums = [1,2,4,8,16], k = 2)",
        "maximumBeauty(nums = [1, 4, 7, 10, 2, 5, 13, 12], k = 2)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maximumTripletValue(nums = [-1, 0, 1, 2, -1, -4])",
        "maximumTripletValue(nums = [1, 1, 1, 1])",
        "maximumTripletValue(nums = [2, 1, -5, -4, 3])",
        "maximumTripletValue(nums = [-2, -3, -1])",
        "maximumTripletValue(nums = [-5, -1, -5])",
        "maximumTripletValue(nums = [2, -7, 21, 3])",
        "maximumTripletValue(nums = [1, 1, -1, 3, 3, -3, -1, 1, -1, -1, 1, 3])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1,1,1,1,1], target = 0)",
        "maximumJumps(nums = [1,1,1,1,1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1,1,1,1,1], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [10, 20, 30, 40], target = 15)",
        "maximumJumps(nums = [10,20,10,10,10,10,10], target = 10)"
    ],
    "sample_149": [
        "finalString(s = \"string\")",
        "finalString(s = \"rtsng\")",
        "finalString(s = \"rtsng\")",
        "finalString(s = 'investing')",
        "finalString(s = \"prtsngi\")",
        "finalString(\"i like apples\")",
        "finalString(s = \"strrts\")",
        "finalString(s = \"its an inversed string\")",
        "finalString(s = 'potsa')",
        "finalString(s = \"itsnoft\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [3, 1, 2, 4, 3])",
        "continuousSubarrays(A = [1,3,1])",
        "continuousSubarrays(A = [1,3,1,2,1])",
        "continuousSubarrays(A = [1, 1, 2, 1, 3, 2])",
        "continuousSubarrays(A = [1, 3, 1, 1, 1])",
        "continuousSubarrays(A = [1,2,2,3,3,3,3,4,4,5,5,5,5,5,5,6])",
        "continuousSubarrays(A = [1, 2, 3, 1, 5, 6, 1, 2, 3])",
        "continuousSubarrays(A = [1,3,3,3,3,5,7,3,1,3,2,3,5,3,4,5])",
        "continuousSubarrays([4, 2, 2, 5, 2, 8, 1, 5, 1, 4, 5, 5, 5, 5, 5, 1, 6, 3, 3, 3, 5])",
        "continuousSubarrays(A = [1,1,1,1,1,1,2,1,1,1,1,2,1,2,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,2,2,2,1,1,1,2,1,1,1,1,1,2,2,2,2,1,1,2,1,1,1,1,1,1,1,1,2,2,2,1,2,1,1,1,1,1,2,1,1,1,1,1,1,2,2,1,2,1,2,1,2,1,1,1,2,1,1,1,1,1,2,1,1,1,2,1,2,1,1,1,1,1,1,2,2,1,2,1,2,1,1,1,2,2,2,1,1,1,1,1,2,1,2,1,1,1,1,2,1,2,1,2,2,2,2,2,1,1,1,1,2,1,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,2,1,2,1,1,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,2,1,2,1,1,1,2,1,2,1,1,1,1,1,1,2,1,1,1,1,1,2,1,2,1,2,1,1,1,1,2,1,2,1,1,1,2,1,2,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,2,1,1,1"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1,2,1,3,2,5])",
        "countCompleteSubarrays(nums = [1,2,3,2,5])",
        "countCompleteSubarrays(nums = [1,2,3,2,5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 1, 4, 2])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [0, 1, 2, 2, 2, 2, 3])",
        "countCompleteSubarrays(nums = [6,6,4,4,2,2])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1])"
    ],
    "sample_228": [
        "countWays(nums = [1,2,3])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [0,0,1,1,1,2])",
        "countWays(nums = [0,1,2,3,4,5,6,7,8,9])",
        "countWays(nums = [1,2,3,4,5,6,7,8,9])",
        "countWays(nums = [2,1,3])",
        "countWays(nums = [4,3,2,1,0])",
        "countWays(nums = [0,0,2,2,2,4])",
        "countWays(nums = [0,3,5])",
        "countWays(nums = [1,0,0,1])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5,10,11,12], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,10,6,7,10], k = 2)",
        "maximumBeauty(nums = [2, 3, 4, 4, 4, 5, 5], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 1, 3, 2])",
        "distinctDifferenceArray(a = [1,2,3,4,5,1])",
        "distinctDifferenceArray(a = [1, 1, 3, 5, 7])",
        "distinctDifferenceArray(a = [1,2,2,4,5,6,6])",
        "distinctDifferenceArray(a = [2, 4, 5, 3, 2])",
        "distinctDifferenceArray(a = [1,1,2,1,3,2,2])",
        "distinctDifferenceArray(a = [0, 5, 2, 1, 4, 0])",
        "distinctDifferenceArray(a = [1,2,2,1,4,3,1,3])",
        "distinctDifferenceArray(a = [1, 2, 3, 3, 5, 5, 2, 2, 2, 2, 2, 2, 1])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8])",
        "continuousSubarrays([1,2,1,2,1])",
        "continuousSubarrays(a = [1,2,1,2,2,1])",
        "continuousSubarrays(a = [1, 2, 3, 1, 2, 1, 3])",
        "continuousSubarrays(a = [1,2,1,1,3,1,1,4])",
        "continuousSubarrays(a = [1,1,1,2,2,2,2,3,3,3,3,4])",
        "continuousSubarrays(a = [1,2,2,2,4,4,1])",
        "continuousSubarrays(a = [1,3,2,1,2,2,2,1,2])",
        "continuousSubarrays(a = [1, 2, 3, 3, 3, 3, 3, 4, 5, 5, 6, 7])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1,2,3,4])",
        "continuousSubarrays(nums = [1,1,1,2,1,1])",
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1, 3, 2, 2, 5, 2, 3, 7])",
        "continuousSubarrays(nums = [1,3,1])",
        "continuousSubarrays(nums = [2, 2, 2, 2])",
        "continuousSubarrays(nums = [1,2,1,2,3,2,1])",
        "continuousSubarrays(nums = [1, 1, 2, 1, 3])",
        "continuousSubarrays(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "continuousSubarrays(nums = [0,0,0,2,0,0,1,2,0,0])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 28, 40])",
        "countBeautifulPairs(nums = [12, 123, 1234])",
        "countBeautifulPairs(nums = [12,24,36,48,60])",
        "countBeautifulPairs(nums = [25, 25, 25, 12, 12])",
        "countBeautifulPairs(nums = [2, 4, 15, 10, 3, 11])",
        "countBeautifulPairs(nums = [2, 23, 5, 71])",
        "countBeautifulPairs(nums = [22, 34, 12, 56, 90])",
        "countBeautifulPairs(nums = [21,24,22,11])",
        "countBeautifulPairs(nums = [12, 98, 72, 82, 62])",
        "countBeautifulPairs(nums = [60, 2224, 1, 87])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [2,1,3,4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [5,1,4,2,3])",
        "semiOrderedPermutation(nums = [3,2,1])",
        "semiOrderedPermutation(nums=[1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [3,1,5,2,4])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [2, 5, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [2, 1, 2, 2, 1, 2, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,4,5,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0,0,1,1,1,1,0,1,1,0,1,1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"0011\")",
        "maximumOddBinaryNumber(s = '110001')",
        "maximumOddBinaryNumber(s = '0101011')",
        "maximumOddBinaryNumber(s = \"1000111\")",
        "maximumOddBinaryNumber(s = '01011110')",
        "maximumOddBinaryNumber(s = \"11110000111111\")",
        "maximumOddBinaryNumber(s = '100111001110')"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1,2,1,3,2,5])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1])",
        "countCompleteSubarrays(nums = [1,1,2,2,2,3])",
        "countCompleteSubarrays(nums = [1,1,3,3,4,4,7])",
        "countCompleteSubarrays(nums = [1, 3, 1, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1,4,2,1])",
        "countCompleteSubarrays(nums = [1,1,2,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,2,3,4,4,1,1])"
    ],
    "sample_23": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(\"ABCD\")",
        "minLength(s = \"CDABCDABCD\")",
        "minLength(s = \"CDABCDABCDABCDABCDABCD\")",
        "minLength(\"ACCD\")",
        "minLength(\"CDCDABABABCDCD\")",
        "minLength(s = \"ABCDDDDCDDCDAB\")",
        "minLength(\"ABCDCDCACADC\")",
        "minLength(\"ABCDABCDCDCDABCDCDCDCDABCDABCDCDCDABCD\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1,1,2,2,2,3])",
        "countCompleteSubarrays(nums = [1,2,2,3,3,3,4,4,4,4])",
        "countCompleteSubarrays(nums = [1,1,2,2,2,2,3,3])",
        "countCompleteSubarrays(nums = [1,1,3,3,4,2,1,3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4, 4, 5, 5, 7, 7])",
        "countCompleteSubarrays(nums = [1,1,2,1,1,3,5,2])",
        "countCompleteSubarrays(nums = [1,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,5,6,7])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 4)",
        "makeTheIntegerZero(num1 = 100, num2 = 5)",
        "makeTheIntegerZero(num1 = 1000, num2 = 10)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [1,2,3,4], target = 1)",
        "maximumJumps(nums = [1,1,1,1], target = 2)",
        "maximumJumps(nums = [10, 11, 12, 13], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5,6], target = 5)",
        "maximumJumps(nums = [10, 20, 29, 35, 40, 49, 50, 51, 52], target = 10)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "maxIncreasingGroups(x = [3, 2, 6, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 11])",
        "maxIncreasingGroups(x = [0,1,2,3])",
        "maxIncreasingGroups(x = [20, 5, 10, 15, 25])",
        "maxIncreasingGroups(x = [1, 1, 2, 3, 5, 8, 13, 21, 34])",
        "maxIncreasingGroups(x = [3, 2, 5, 1])",
        "maxIncreasingGroups(x = [1, 4, 11, 13, 14, 15])",
        "maxIncreasingGroups(x = [30, 26, 24, 23, 22, 21, 15])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 6, 7, 8, 12, 15, 16, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 32])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"RRR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RRRL\")",
        "furthestDistanceFromOrigin(moves = \"_____L_R_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"_L_RR_\")",
        "furthestDistanceFromOrigin(moves = \"L_R_R_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"_RL_RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"______LLLL_RRRR\")",
        "furthestDistanceFromOrigin(\"_RRLLL_R_R\")",
        "furthestDistanceFromOrigin(moves = \"LR__RRRR__LLL______R__\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '001011')",
        "maximumOddBinaryNumber(s = '01100')",
        "maximumOddBinaryNumber(s = '00011101')",
        "maximumOddBinaryNumber(s = '0111110')",
        "maximumOddBinaryNumber(s = '10101100101111')",
        "maximumOddBinaryNumber(s = '10001010001110')",
        "maximumOddBinaryNumber(s
    ],
    "sample_6": [
        "colorTheArray(n = 2, queries = [[0,0],[1,1]])",
        "colorTheArray(n = 1, queries = [[0, 1], [0, 1]])",
        "colorTheArray(n = 3, queries = [[1,1],[0,1],[2,1]])",
        "colorTheArray(n=2, queries=[[1, 1], [0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0], [0, 0], [0, 0], [0, 0]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [1, 1], [2, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1,1],[2,2],[0,1],[1,0],[2,2],[2,1]])",
        "colorTheArray(n=4, queries=[[0,1],[1,0],[3,2],[1,2]])",
        "colorTheArray(n = 10, queries = [[0, 1], [1, 2], [2, 3], [3, 0], [4, 1], [5, 2], [6, 3], [7, 0], [8, 1], [9, 2]])",
        "colorTheArray(n = 3, queries = [[1,1],[0,0],[1,1],[0,1],[1,1],[2,2],[2,2],[0,0]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 4, 10, 20, 50])",
        "findValueOfPartition(nums = [1, 10, 100])",
        "findValueOfPartition(nums = [3, 1, 4, 2])",
        "findValueOfPartition(nums = [2, 3, 6, 8, 10])",
        "findValueOfPartition(nums = [3, 4, 7, 10])",
        "findValueOfPartition(nums = [2, 3, 8, 9, 10])",
        "findValueOfPartition(nums = [36, 7, 46, 12])",
        "findValueOfPartition(nums = [3, 4, 7, 1, 2])",
        "findValueOfPartition(nums = [2,1,5,4,3])",
        "findValueOfPartition(nums = [2, 5, 8, 4, 6, 3])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [2,3,1,2,4])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,0,0,0,1,1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3])",
        "minimumIndex(nums = [1, 3, 5, 5, 7, 12, 13, 15, 15, 15, 15, 17, 19])",
        "minimumIndex(nums = [7, 7, 1, 2, 3, 4, 5, 6])",
        "minimumIndex(nums = [4,2,4,2,3,1,4,4])",
        "minimumIndex([7, 7, 7, 7, 7, 7, 10, 10, 10])",
        "minimumIndex(nums = [2,2,3,3,4,4,1,1,1,1,1])",
        "minimumIndex([7, 7, 3, 3, 3, 3, 3, 7, 7, 7])",
        "minimumIndex(nums = [4,3,1,2,2,2,2,3,4])",
        "minimumIndex(nums = [1,1,2,3,3,4,4,4,4,4,5,5,5,5,5,6,6,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,",
        "minimumIndex([5,5,5,3,4,4,4,2,1,3,1,1,1,2,2,2])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 0)",
        "sumIndicesWithKSetBits(nums = [1,3,5,7,9,11,13,15,17,19], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53], k = 5)",
        "sumIndicesWithKSetBits(nums = [2, 7, 9, 12, 45, 88], k = 1)",
        "sumIndicesWithKSetBits(nums = [32, 4, 64, 8, 4, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 7, 1, 9, 33, 10, 73], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 8, 12, 32, 13, 14, 15, 2, 1, 7], k = 1)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1,2,3],[2,3,4]])",
        "maximizeTheProfit(n = 7, offers = [[1,3,2],[4,5,3],[6,7,1]])",
        "maximizeTheProfit(n = 4, offers = [[1,3,2],[2,3,2],[3,3,2]])",
        "maximizeTheProfit(n = 7, offers = [[1,2,5],[2,3,6],[3,4,7],[4,5,8],[5,6,9]])",
        "maximizeTheProfit(n = 2, offers = [[0, 2, 5], [1, 5, 10], [2, 3, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,2],[2,4,4],[3,4,7]])",
        "maximizeTheProfit(n=6, offers=[[1,2,10], [4,5,10], [1,3,10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [3, 5, 2], [1, 5, 4]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 3], [4, 6, 3], [6, 7, 1], [1, 1, 5], [11, 11, 0]])",
        "maximizeTheProfit(\n    n = 10,\n    offers = [\n        [1,2,3],\n        [2,3,5],\n        [4,5,10],\n        [5,7,12],\n        [6,7,15],\n        [7,8,20],\n        [9,9,5]\n    ]\n)"
    ],
    "sample_202": [
        "minimumOperations(num = \"00000\")",
        "minimumOperations(num = \"0000000\")",
        "minimumOperations(num = \"240\")",
        "minimumOperations(num = \"990099\")",
        "minimumOperations(num = \"1992\")",
        "minimumOperations(num = \"5757\")",
        "minimumOperations(num = \"000170\")",
        "minimumOperations(num = \"955025755\")",
        "minimumOperations(num = \"33242321\")",
        "minimumOperations(num = \"973348264623847915\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"0100\")",
        "minimumOperations(num = \"4050\")",
        "minimumOperations(num = \"2025\")",
        "minimumOperations(num = \"110\")",
        "minimumOperations(num = \"51\")",
        "minimumOperations(num = '0050')",
        "minimumOperations(num = \"45987\")",
        "minimumOperations(num = \"780235\")",
        "minimumOperations(num = \"001101100101010101111011001010111110001\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 100], [2, 2, 190], [3, 2, 200]])",
        "maximizeTheProfit(n = 3, offers = [[3, 2, 10], [2, 2, 10], [3, 3, 15]])",
        "maximizeTheProfit(n = 5, offers = [[3,0,5], [1,2,10]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 10], [2, 2, 20]])",
        "maximizeTheProfit(n = 5, offers = [[2,0,4],[1,2,1],[3,2,2]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 2], [2, 4, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [1, 2, 4]])",
        "maximizeTheProfit(n = 6, offers = [[3,2,2],[2,3,3],[6,1,2]])",
        "maximizeTheProfit(n = 5, offers = [[2,1,100],[2,2,100],[2,3,100],[1,4,100],[2,2,100]])",
        "maximizeTheProfit(n=3, offers = [[3, 1, 50], [2, 1, 30], [2, 2, 40]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2,4,6,8,10], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 4, 2, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,1,2,2,2,2,2,3,3], threshold = 0)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 2, 2, 3], threshold = 0)",
        "longestAlternatingSubarray(nums = [2,2,3,3,2,2,2,3,3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,1,2,4,3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,2,2,3,3,2,2,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,4,2,0,4,4,4,4,0,4,4], threshold = 4)"
    ],
    "sample_203": [
        "minimumOperations(num = \"9999\")",
        "minimumOperations(num = \"89\")",
        "minimumOperations(num = \"9999999\")",
        "minimumOperations(num = \"0111\")",
        "minimumOperations(num = \"5555\")",
        "minimumOperations(num = \"3250\")",
        "minimumOperations(num = \"011100\")",
        "minimumOperations(num = \"399\")",
        "minimumOperations(num = '00101001')",
        "minimumOperations(num = '24732')"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,1],[4,2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 1], [5, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [1, 2], [4, 1], [3, 2]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 2], [2, 2], [3, 2], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,2],[3,3],[2,3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 2], [4, 2], [1, 2], [1, 1]])",
        "colorTheArray(n = 4, queries = [[2,2], [4,1], [1,2], [2,1]])",
        "colorTheArray(5, [[1, 2], [2, 3], [3, 4], [1, 3], [5, 1]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 3, 1])",
        "minimumIndex(nums = [0, 1, 0, 1, 0, 1, 0])",
        "minimumIndex(nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,",
        "minimumIndex(nums = [4, 4, 1, 2, 3, 1, 1, 3])",
        "minimumIndex(nums = [0, 1, 2, 0, 1, 0, 1, 2, 2, 2])",
        "minimumIndex(nums = [1,1,1,2,2,2,2,3,3,3])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10, 1, 1])",
        "minimumIndex([7, 10, 7, 1, 2, 2, 10])",
        "minimumIndex([1,3,2,5,5,5,5,2,5,5,5,2])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [1, 2, 3], target = 2)",
        "maximumJumps(nums = [0, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5], target = 0)",
        "maximumJumps(nums = [0, 2, 0], target = 1)",
        "maximumJumps(nums = [3, 1, 3, 2, 4, 2, 1, 0], target = 4)",
        "maximumJumps(nums = [1, 3, 10, 3, 5, 5, 7, 11, 10, 12, 13, 14], target = 2)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num = '51230000')",
        "removeTrailingZeros(\"51230100\")",
        "removeTrailingZeros(num = '05123010000000000')"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 4, b = 1)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 3, b = 3)",
        "distanceTraveled(a = 10, b = 1)",
        "distanceTraveled(a = 2, b = 0)",
        "distanceTraveled(a = 7, b = 3)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 3, 10, 20])",
        "findValueOfPartition(a = [3, 10, 2, 4, 9, 7])",
        "findValueOfPartition(a = [0,1,3])",
        "findValueOfPartition(a = [1,3,6,7])",
        "findValueOfPartition(a = [3, 2, 4, 1, 3])",
        "findValueOfPartition(a = [0, 4, 10, 10])",
        "findValueOfPartition(a = [3, 6, 1, 8, 2, 4])",
        "findValueOfPartition([1,2,3,4,10,50])",
        "findValueOfPartition(a = [1, 3, 6, 2, 7, 6])",
        "findValueOfPartition([4,1,2,-5])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1,2,1,3,2,5])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 5, 1])",
        "distinctDifferenceArray(nums = [1,2,1,3,3,5])",
        "distinctDifferenceArray(nums = [-1, 0, 1, 2, -2, 3])",
        "distinctDifferenceArray(nums = [1,1,2,3,3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 2, 2])",
        "distinctDifferenceArray(nums = [-1, 1, -1, 2, 3])",
        "distinctDifferenceArray(nums = [3, 2, 1, 3, 1, 1, 1])",
        "distinctDifferenceArray(nums = [-1, 1, 5, -2, 2, 1])",
        "distinctDifferenceArray(nums = [0,1,2,2,3,4,3,4,5,5,5,6])"
    ],
    "sample_120": [
        "minimumIndex(nums = [3, 4, 3, 2, 3, 1, 2, 4, 2])",
        "minimumIndex([1, 1, 0, 1, 1, 1])",
        "minimumIndex(nums = [0, 1, 2, 2, 3, 0, 4, 2])",
        "minimumIndex(nums = [0, 1, 2, 0, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 8])",
        "minimumIndex([1, 0, 1, 1, 1, 0, 1])",
        "minimumIndex(nums = [2, 2, 2, 2, 2, 2, 3, 3, 3, 3])",
        "minimumIndex(nums = [3, 3, 3, 3, 3, 3, 4, 5, 5, 5])",
        "minimumIndex(nums = [1,1,2,0,3,1,2,1,0,1])",
        "minimumIndex(nums = [7, 7, 0, 0, 3, 1, 1, 1, 7, 2, 3, 0, 1])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRRLLL\")",
        "furthestDistanceFromOrigin(moves=\"RRL\")",
        "furthestDistanceFromOrigin(moves = \"RL\")",
        "furthestDistanceFromOrigin(moves = \"LRRLRR\")",
        "furthestDistanceFromOrigin(moves=\"RLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRL\")",
        "furthestDistanceFromOrigin(moves=\"RRLRL\")",
        "furthestDistanceFromOrigin(moves = \"L1L1L1R\")",
        "furthestDistanceFromOrigin(moves=\"RRLRRLRLRRR\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abccdde\")",
        "minimizedStringLength(s = \"qwerty\")",
        "minimizedStringLength(s = \"aaaaaaaa\")",
        "minimizedStringLength(s = \"abbcdbbd\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 4)",
        "checkArray(nums = [3, 1, 3, 4, 3], k = 5)",
        "checkArray(nums = [0, 10, 5, 2, 7, 1, 9], k = 3)",
        "checkArray(nums = [1, -1, 0], k = 3)",
        "checkArray(nums = [1, 3, 2], k = 3)",
        "checkArray(nums = [4, 1, 2, 3], k = 2)",
        "checkArray(nums = [5, 1, 3, 4, 2], k = 2)",
        "checkArray(nums = [1, 1, 2, 2, 1], k = 3)",
        "checkArray(nums = [0, 1, 2, 0, 1, 0, -1, -2], k = 4)",
        "checkArray(nums = [1, 2, 1, 3, 2, 3, 3, 2, 4, 2, 3, 1, 4, 1, 2], k = 2)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [10, 2, 2, 1, 2])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [4, 5, 6, 3, 2])",
        "maxIncreasingGroups(usageLimits = [12, 2, 1, 2])",
        "maxIncreasingGroups(usageLimits = [5, 1, 7, 4, 2])",
        "maxIncreasingGroups(usageLimits = [50, 30, 10, 10, 100])",
        "maxIncreasingGroups([10, 2, 100, 200, 150])",
        "maxIncreasingGroups(usageLimits = [13, 4, 9, 2, 7, 1, 5, 11])",
        "maxIncreasingGroups(usageLimits = [4, 5, 15, 12, 3, 8, 7, 1, 9, 6, 11, 10])",
        "maxIncreasingGroups(usageLimits = [63, 1, 16, 27, 32, 25, 14, 19, 8, 5, 5, 7, 8, 5, 6, 13, 3, 2, 15, 16, 17, 20, 13, 29, 4, 18, 13, 2, 6, 4, 10, 3, 3, 4, 1, 20, 15, 10, 24, 44, 2, 10, 23, 16, 31, 2, 13, 25, 3, 6, 15, 6, 14, 2, 1, 6, 11, 4, 4, 1, 3, 4, 2, 16, 5, 5, 1, 5, 14, 11, 5, 16, 3, 15, 2, 12, 5, 16, 17, 2, 1, 3, 16, 6, 21, 3, 1, 6, 12, 16, 16, 30, 16, 1, 24, 12, 3, 12, 1, 12, 4, 6, 1, 7, 19, 13, 10, 10, 15, 4, 14, 1, 12, 4, 2, 2, 2, 21, 12, 15, 18, 4, 3, 3, 5, 5, 2, 3, 17, 11, 12, 2, 10, 3, 4, 2, 2, 2, 11, 1, 5, 3, 3, 2, 2, 17, 6, 2, 4"
    ],
    "sample_206": [
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = '100')",
        "minimumOperations(num = \"1200\")",
        "minimumOperations(num = \"245\")",
        "minimumOperations(num = '2502')",
        "minimumOperations(num = \"265\")",
        "minimumOperations(num = \"00003\")",
        "minimumOperations(num = \"0000000100\")",
        "minimumOperations(num=\"178\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0, 2, 2, 2])",
        "doesValidArrayExist(derived = [0, 2, 2, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [0,1,0,1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 1, 1, 0, 1])"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaacab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"ebcbbececabbacec\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [10, 15, 20, 25])",
        "maxIncreasingGroups(usageLimits = [10, 15, 20, 40])",
        "maxIncreasingGroups(usageLimits = [6, 9, 11, 15])",
        "maxIncreasingGroups(usageLimits = [5, 3, 5, 4, 1, 3, 9])",
        "maxIncreasingGroups(usageLimits = [1000, 800, 500, 300])",
        "maxIncreasingGroups(usageLimits = [1, 4, 9, 2, 4, 6, 5])",
        "maxIncreasingGroups(usageLimits = [10, 6, 15, 13, 14, 15, 2, 12, 16, 10, 12])",
        "maxIncreasingGroups(usageLimits = [3, 6, 3, 12, 4, 10, 1, 1, 15, 3, 2, 8, 8, 1, 2, 2, 2, 3, 10, 2, 12, 2, 5, 4, 6, 5, 11, 3, 15, 4, 4, 2, 12, 14, 3, 10, 2, 12, 2, 2, 2, 13, 10, 11, 3, 3, 4, 2, 1, 1, 1, 1, 5, 12, 2, 2, 14, 4, 1, 1, 12, 3, 12, 2, 2, 12, 12, 1, 4, 10, 6, 3, 10, 1, 6, 3, 1, 2, 10, 1, 1, 6, 1, 6, 1, 1, 2, 2, 14, 2, 1, 4, 2, 2, 1, 1, 2, 1, 6, 5, 2, 2, 6, 6, 13, 10, 2, 1, 2, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 6, 3, 1, 1, 3, 3, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_53": [
        "smallestString(s = 'banana')",
        "smallestString(s = 'banana')",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"baabz\")",
        "smallestString(s = 'bacba')",
        "smallestString(s = \"bzaac\")",
        "smallestString(s = \"babx\")",
        "smallestString(s = \"azqwc\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,8], x = 3)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 2)",
        "minAbsoluteDifference(nums = [3,4,5], x = 1)",
        "minAbsoluteDifference(nums = [1,2,3,4], x = 2)",
        "minAbsoluteDifference(nums = [4,2,1], x = 2)",
        "minAbsoluteDifference(nums = [3, -7, 0], x = 2)",
        "minAbsoluteDifference(nums = [3,4,5,6,7,8], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6], x = 1)",
        "minAbsoluteDifference(nums = [1,3,3,4,6], x = 2)",
        "minAbsoluteDifference(nums = [1,3,5,5,5,5,7,10], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 4, offers = [[2,3,2],[3,2,3]])",
        "maximizeTheProfit(N = 2, offers = [[2, 2, 3], [1, 3, 4]])",
        "maximizeTheProfit(N = 5, offers = [[1,2,10], [2,3,11], [6,1,12]])",
        "maximizeTheProfit(N = 4, offers = [[2, 2, 4], [2, 3, 2], [4, 2, 2]])",
        "maximizeTheProfit(N = 6, offers = [[3,2,300], [1,5,100]])",
        "maximizeTheProfit(N = 5, offers = [[1,2,5],[2,3,3],[2,4,6]])",
        "maximizeTheProfit(N = 5, offers = [[4, 2, 400], [3, 2, 300], [4, 3, 400]])",
        "maximizeTheProfit(N = 7, offers = [[2, 3, 2], [4, 5, 5], [3, 1, 4]])",
        "maximizeTheProfit(N = 3, offers = [[2, 5, 2], [1, 2, 3], [2, 10, 3]])",
        "maximizeTheProfit(N=5, offers = [[3,2,2],[2,3,1],[4,2,10]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"a b c\", \"d e\", \"f\"], b = \" \")",
        "splitWordsBySeparator(a = [\"apple\", \"banana\", \"cherry\"], b = \"n\")",
        "splitWordsBySeparator(a = [\"1\", \"2\"], b = \"1\")",
        "splitWordsBySeparator(a = [\"orange\", \"apple\", \"banana\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"my test\"], b = \" \")",
        "splitWordsBySeparator(a = ['how are you', 'doing'], b = 'you')",
        "splitWordsBySeparator(a = [\"fear\", \"dare\", \"and\", \"be\"], b = \"e\")",
        "splitWordsBySeparator(a = [\"I;am;an;adult;and;i;eat;sushi\"], b = \";\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\", \"papa\", \"banaan\", \"papapa\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"I think that this is the right answer\", \"Is it, though?\", \"Maybe this is the one\"], b = \" \")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123000001')",
        "removeTrailingZeros(a = '512301000000')",
        "removeTrailingZeros('5123010000')",
        "removeTrailingZeros(\"512301000\")",
        "removeTrailingZeros(\"51230100\")",
        "removeTrailingZeros(a = '51230100000000000')",
        "removeTrailingZeros('51230000001')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'niven')",
        "makeSmallestPalindrome(s = \"niven\")",
        "makeSmallestPalindrome(s = \"nev\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"good\")",
        "makeSmallestPalindrome(s = 'green')",
        "makeSmallestPalindrome(s = \"nane\")",
        "makeSmallestPalindrome(s = 'acbde')"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 3, 2, 1, 1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,1,1,1,1,1], k = 0)",
        "longestEqualSubarray(nums = [1,2,3,3,3,2,2,2,2,1], k = 1)",
        "longestEqualSubarray(nums = [4, 4, 4, 4, 4, 4, 4], k = 0)",
        "longestEqualSubarray(nums = [1,2,4,4,3,3,2,1,2,3], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,1,3,5,4,1,1,1], k = 0)",
        "longestEqualSubarray(nums = [40, 50, 60, 70], k = 15)",
        "longestEqualSubarray(nums = [3,2,4,1,4,5], k = 0)",
        "longestEqualSubarray(nums = [4,4,4,4,4,4,4,4,3], k = 0)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 4, 7, 10, 2, 5, 13, 12], k = 3)",
        "maximumBeauty(nums = [1, 2, 2, 3, 3, 4, 7, 10, 12, 13], k = 1)",
        "maximumBeauty(nums = [1,4,8,9,10], k = 2)",
        "maximumBeauty(nums = [2,2,3,4], k = 1)",
        "maximumBeauty(nums = [2,4,5,3,1], k = 5)",
        "maximumBeauty(nums = [4, 2, 5, 3, 7, 2], k = 2)",
        "maximumBeauty(nums = [1,1,1,1,5,5,7,10,11,12], k = 2)",
        "maximumBeauty(nums = [1,2,2,2,3,3,5,5,5,6,7,7,7,8,8,8,10,10,10,10,11,11,15,15], k = 2)"
    ],
    "sample_163": [
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [10, 11, 12])",
        "maxSum(nums = [-1, -1, -1])",
        "maxSum(nums = [120])",
        "maxSum(nums = [100000, 100000, 100000])",
        "maxSum(nums = [-1,1,1])",
        "maxSum(nums = [111, 111, 22, 22, 22])",
        "maxSum(nums = [47, 1, 7, 9, 9, 9, 9, 9])",
        "maxSum(nums = [17, 24, 7, 18, 3, 2, 9, 20, 15])"
    ],
    "sample_151": [
        "finalString(s = 'string')",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"this is an example\")",
        "finalString(s = 'this is a test')",
        "finalString(s = \"invertible\")",
        "finalString(s = 'nitng')",
        "finalString(\"This is reversible\")",
        "finalString(s = 'This is the test string.')",
        "finalString(s = 'imtgvh')"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '5123000000001')",
        "removeTrailingZeros(num = '512300010')",
        "removeTrailingZeros(num = '5123000001000')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = '01111')",
        "maximumOddBinaryNumber(s = '0001011')",
        "maximumOddBinaryNumber(s = '11100111010')",
        "maximumOddBinaryNumber(s = \"0000101001011011\")",
        "maximumOddBinaryNumber(s = '00001010000011110')",
        "maximumOddBinaryNumber(s = '000101010110010011')",
        "maximumOddBinaryNumber(s = '010101110000111001001')",
        "maximumOddBinaryNumber(s = '0011001010111101100110')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = ['easy|problem'], separator = '|')",
        "splitWordsBySeparator(words = ['easy;problem'], separator = \";\")",
        "splitWordsBySeparator(words = ['#easy#problem'], separator = '#')",
        "splitWordsBySeparator(words=['easy/problem'], separator='/')"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,3,3,3,2,1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,3,3,3,2,1], K = 2)",
        "longestEqualSubarray(A = [1,2,1,3,2,3,3,4,3,5], K = 0)",
        "longestEqualSubarray(A = [1,2,4,4,5,6,7,8,8], K = 3)",
        "longestEqualSubarray(A = [1,2,1,3,3,3], K = 2)",
        "longestEqualSubarray(A = [40,50,60,70], K = 20)",
        "longestEqualSubarray(A = [2,2,2,1,3,3,3], K = 1)",
        "longestEqualSubarray(A = [1, 1, 1, 1, 2, 3, 5, 5, 1, 2, 2, 2, 2, 2], K = 0)",
        "longestEqualSubarray(A = [4, 1, 1, 1, 2, 3, 2, 1, 1, 1], K = 3)",
        "longestEqualSubarray(A = [4,10,4,2,10,4,2,10], K = 0)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 1, 2])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [2, 3, 3, 5])",
        "countWays(nums = [1, 2, 2, 2, 3])",
        "countWays(nums = [2, 3, 3])",
        "countWays(nums = [3,1,4,2])",
        "countWays(nums = [2, 3, 4, 4, 5, 6, 10])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,2,3,4,5,6,7,8], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 8, 1, 11, 10, 10, 10, 12, 13, 13, 13, 13, 14, 15], k = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '512300100')",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"51230001\")",
        "removeTrailingZeros(num = \"51230000010\")"
    ],
    "sample_167": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"p\",\"q\",\"r\"], s = \"pqr\")",
        "isAcronym(words = [\"hello\", \"world\", \"this\", \"is\", \"fun\"], s = \"hwi\")",
        "isAcronym(words=[\"hello\", \"world\"], s=\"hwo\")",
        "isAcronym(words = [\"happy\", \"birthday\", \"to\", \"you\"], s = \"hbyu\")",
        "isAcronym(words = [\"snakes\", \"are\", \"awesome\"], s = \"sae\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwr\")",
        "isAcronym(words = [\"construct\", \"an\", \"acronym\"], s = \"can\")",
        "isAcronym(words = [\"b\", \"and\", \"or\"], s = \"band\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,2,1,3,2,5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,1,2,2,2,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,1,2,3,2,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1,2,3,3,3,3,4,5,6,7])",
        "countCompleteSubarrays(nums = [1,2,2,3,3,3,3,4,5,5,5,5])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 4, target = 12)",
        "minimumPossibleSum(n = 4, target = 15)",
        "minimumPossibleSum(n=1, target=11)",
        "minimumPossibleSum(n = 12, target = 7)",
        "minimumPossibleSum(n = 10000, target = 1000)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'rtsng')",
        "finalString(s = \"testing\")",
        "finalString(s = \"this is an example\")",
        "finalString(s = 'interviewbit')",
        "finalString(\"string\")",
        "finalString(s = 'rtsing')",
        "finalString(s = \"it is a string\")",
        "finalString(\"hits\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'deed')",
        "makeSmallestPalindrome(\"even\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s = 'nnen')",
        "makeSmallestPalindrome(s = 'tneven')",
        "makeSmallestPalindrome(s = \"bbab\")",
        "makeSmallestPalindrome(s = \"acdc\")",
        "makeSmallestPalindrome(s = 'anvnee')"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 11], [3, 4, 12]])",
        "maximizeTheProfit(n = 6, offers = [[3, 2, 12], [1, 5, 6]])",
        "maximizeTheProfit(n = 5, offers = [[2, 2, 10], [1, 2, 5]])",
        "maximizeTheProfit(n = 7, offers = [[1, 2, 3], [3, 3, 3], [2, 3, 4]])",
        "maximizeTheProfit(n = 2, offers = [[3, 2, 10], [1, 1, 100]])",
        "maximizeTheProfit(n = 5, offers = [[2,3,1],[3,2,10],[1,1,5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 6], [3, 5, 7], [4, 8, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[2,2,7],[3,2,5]])",
        "maximizeTheProfit(n = 6, offers = [[3, 2, 10], [2, 2, 1], [2, 3, 20]])",
        "maximizeTheProfit(n=1, offers=[[3, 10, 30]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "maximumJumps(nums = [0, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [5, 5, 5, 5, 5], target = 4)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,2,2,1])",
        "numberOfGoodSubarraySplits(nums = [2,2,1,2,2,1,2,2,1,2])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [3,1,1,3])",
        "numberOfGoodSubarraySplits(nums = [4,-2,5,7,3,0,8,-2])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,2,2,1,2,3,2,3,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [2,3,3,5,2,1,1,1,5,2,3,6,7])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"0111\")",
        "maximumOddBinaryNumber(s = '00111')",
        "maximumOddBinaryNumber(s = \"00110\")",
        "maximumOddBinaryNumber(s = \"10001\")",
        "maximumOddBinaryNumber(s = \"011001\")",
        "maximumOddBinaryNumber(s = '11110101')",
        "maximumOddBinaryNumber(s = '0100011')",
        "maximumOddBinaryNumber(s = '01110110')",
        "maximumOddBinaryNumber(s = \"1110100\")",
        "maximumOddBinaryNumber(s = \"100110111\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 2)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 25, num2 = 5)",
        "makeTheIntegerZero(num1 = 21, num2 = 10)",
        "makeTheIntegerZero(num1 = 33, num2 = 10)",
        "makeTheIntegerZero(num1 = 4294967295, num2 = 13)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 10, target = 100)",
        "minimumPossibleSum(n = 10, target = 17)",
        "minimumPossibleSum(n = 5, target = 14)",
        "minimumPossibleSum(n = 6, target = 8)",
        "minimumPossibleSum(n = 1, target = 100)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,6], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,6,5,4,3,2,1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [4, 5, 0, 0, 3, 3, 0, 4, 2, 1], modulo = 10, k = 7)",
        "countInterestingSubarrays(nums = [2, 4, 11, 2], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [4, 1, 5, 2], modulo = 6, k = 3)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [4, 2, 3, 1], k = 1)",
        "maximumBeauty(nums = [4, 2, 3, 1], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [2, 4, 6, 8, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [4, 2, 3, 1], k = 4)",
        "maximumBeauty(nums = [3, 1, 5, 4], k = 3)",
        "maximumBeauty(nums = [2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6], k = 1)"
    ],
    "sample_148": [
        "finalString(s = 'interesting')",
        "finalString(s = 'interesting')",
        "finalString(s = 'python')",
        "finalString(s = \"potter\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"python\")",
        "finalString(s = 'interview')",
        "finalString(s = \"pointer\")",
        "finalString(s = \"mister\")",
        "finalString(s = \"it's funnier\")"
    ],
    "sample_231": [
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 5, 7, 9])",
        "countWays(nums = [2, 3, 4, 5])",
        "countWays(nums = [1,2,3,4,5,6,7])",
        "countWays(nums = [0, 2, 4, 6, 8, 10])",
        "countWays(nums = [2, 1, 0, 3, 4])",
        "countWays(nums = [0, 2, 5, 6, 9, 11])",
        "countWays(nums = [3, 4, 7, 4, 3, 2, 7, 5, 9, 2])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [3, 6, 7, 9])",
        "countBeautifulPairs(nums = [12, 21, 23, 29, 30])",
        "countBeautifulPairs(nums = [4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [2, 1, 6, 7, 9])",
        "countBeautifulPairs(nums = [2, 3, 4, 6, 7, 8, 10])",
        "countBeautifulPairs(nums = [12, 40, 60, 100])",
        "countBeautifulPairs(nums = [3, 4, 8, 12, 32])",
        "countBeautifulPairs(nums = [6, 2, 1, 8, 4, 3])",
        "countBeautifulPairs(nums = [3,4,6,7,9,10,15,16,17])",
        "countBeautifulPairs(nums = [12, 22, 12, 20, 29, 5])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 12, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 2, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 1)",
        "makeTheIntegerZero(num1 = 37, num2 = 3)",
        "makeTheIntegerZero(num1 = 29, num2 = 7)",
        "makeTheIntegerZero(num1 = 11, num2 = 7)",
        "makeTheIntegerZero(num1 = 17, num2 = 6)",
        "makeTheIntegerZero(num1 = 121, num2 = 21)",
        "makeTheIntegerZero(num1 = 1025, num2 = 12)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"deed\")",
        "makeSmallestPalindrome(s = \"ev\")",
        "makeSmallestPalindrome(s = \"nenven\")",
        "makeSmallestPalindrome(s = \"aabbc\")",
        "makeSmallestPalindrome(s = \"november\")",
        "makeSmallestPalindrome(s = \"reen\")",
        "makeSmallestPalindrome(s = \"papa\")",
        "makeSmallestPalindrome(s = \"annapenna\")",
        "makeSmallestPalindrome(s = \"evlnen\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"What\", \"must\", \"be\", \"shall\", \"be\"], s = \"WMSBSHB\")",
        "isAcronym(words = [\"pluralsight\", \"web\", \"development\"], s = \"PWWD\")",
        "isAcronym(words = [\"The\", \"Atomic\", \"Kittens\"], s = \"TAK\")",
        "isAcronym(words = [\"plastic\", \"beads\", \"in\", \"your\", \"hair\"], s = \"pbiyh\")",
        "isAcronym(words = ['classic', 'historic', 'opportunity'], s = 'chop')",
        "isAcronym(words = [\"electric\", \"shocking\", \"given\"], s = \"ESG\")",
        "isAcronym(words = ['air', 'soldier'], s = \"AS\")",
        "isAcronym(words = [\"my\", \"dad\", \"says\", \"okay\"], s = \"mids\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,2,3,4,5])",
        "numberOfGoodSubarraySplits(nums = [2,3,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums=[2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [2,1,1,1,2,2,1,2,2,1])",
        "numberOfGoodSubarraySplits([1,0,0,1])",
        "numberOfGoodSubarraySplits(nums=[1,2,3,1])",
        "numberOfGoodSubarraySplits([0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,3,2,1,2])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,3,4,5,1,2,1,2,3,4,5])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1, 1, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 3, 2, 1, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 0)",
        "sumIndicesWithKSetBits(nums = [4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 10, 11], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 6, 9, 13, 14], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 4, k = 9)",
        "minimumSum(n = 3, k = 18)",
        "minimumSum(n = 3, k = 14)",
        "minimumSum(n = 4, k = 20)"
    ],
    "sample_227": [
        "countWays(nums = [-3, -2, -1, 0, 1, 2, 3])",
        "countWays(nums = [-3, 0, 2, 2, 2, 4, 7])",
        "countWays(nums = [0, -1, 0, 1])",
        "countWays(nums = [-1, 1, 2, 4])",
        "countWays(nums = [2, 4, 7, 8])",
        "countWays(nums = [0, 1, 2, 3, 3, 4, 5, 6, 7, 8])",
        "countWays(nums = [2, 1, -1, 0, -2])",
        "countWays(nums = [-3, 0, 1, 2, 2, 2, 3, 3, 4, 7, 8, 9, 9])",
        "countWays(nums = [-5, 0, 5, 10, 100, 1000, 10000])",
        "countWays(nums = [2, 1, -1, 3, 2, -2])"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abaaba\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"leetcode\")",
        "minimumCost(s = \"ababababab\")",
        "minimumCost(s = \"aaabaaa\")",
        "minimumCost(s = \"aaabaab\")",
        "minimumCost(s = \"aabbbcccc\")",
        "minimumCost(s = \"cczcc\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"RLR\")",
        "furthestDistanceFromOrigin(moves = \"RLRL\")",
        "furthestDistanceFromOrigin(moves = \"LL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRL\")",
        "furthestDistanceFromOrigin(moves = \"R_RR_RR\")",
        "furthestDistanceFromOrigin(moves = \"LLLL_RR\")",
        "furthestDistanceFromOrigin(moves = \"L_RR_L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"LLLR__UL\")",
        "furthestDistanceFromOrigin(moves = 'LR__L_LR___R')",
        "furthestDistanceFromOrigin(moves = \"R_RRRRR_RRRLLLLL\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank=3, additionalTank=1)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,1,2,2,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,2,5])",
        "countCompleteSubarrays(nums = [1,1,2,2,3])",
        "countCompleteSubarrays(nums = [1, 1, 3, 3, 5, 7])",
        "countCompleteSubarrays(nums = [1, 3, 1, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 4, 3])",
        "countCompleteSubarrays(nums = [1, 3, 2, 2, 1, 4, 4, 5, 5])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,2,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [4,2,3,3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 2, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,2,2,2], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,4,2,2,4,4,4,2,2], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,4,1,4], threshold = 4)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 4], [2, 4], [1, 5], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [0, 10]])",
        "numberOfPoints(nums = [[1,3],[2,3],[3,4]])",
        "numberOfPoints(nums = [[1,5],[2,3]])",
        "numberOfPoints(nums = [[-1, 3], [3, 4], [-2, 0]])",
        "numberOfPoints(nums = [[3, 4], [1, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [10, 11], [5, 10], [4, 8]])",
        "numberOfPoints(nums = [[-7, 12], [1, 10], [5, 20]])",
        "numberOfPoints(nums = [[-7, 10], [-1, 7], [-6, 1], [-3, 3]])",
        "numberOfPoints(nums = [[-1, 0], [-3, -1], [0, 6], [-6, -1]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [2, 1])",
        "countBeautifulPairs(nums = [2, 21, 12, 1])",
        "countBeautifulPairs(nums = [4, 2, 1, 7, 3])",
        "countBeautifulPairs(nums = [12, 24, 15, 36, 48, 35])",
        "countBeautifulPairs(nums = [2, 2, 3, 3, 4, 4, 5, 5, 10, 11])",
        "countBeautifulPairs(nums = [2, 22, 14, 5, 19, 11])",
        "countBeautifulPairs(nums = [22, 99, 2222])",
        "countBeautifulPairs(nums = [110, 17, 29, 71])",
        "countBeautifulPairs(nums = [23, 74, 65, 86, 61, 29, 91])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [2,4,6,8,10], t = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 1, 8], t = 7)",
        "longestAlternatingSubarray(nums = [1,3,4,1,5,3], t = 1)",
        "longestAlternatingSubarray(nums = [4, 5, 5, 4], t = 0)",
        "longestAlternatingSubarray(nums = [1,4,1,1,1,1,1,1,1,1,1,1,1], t = 1)",
        "longestAlternatingSubarray(nums = [4, 2, 6, 4, 1, 9], t = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 1, 2, 1, 1, 1], t = 3)",
        "longestAlternatingSubarray(nums = [1,3,1,5,1,5,1,3,1,5,1,5,1], t = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 3, 5, 3, 5, 2, 2, 1], t = 3)",
        "longestAlternatingSubarray(nums = [2, 1, 5, 5, 6, 8, 7, 6, 6], t = 3)"
    ],
    "sample_36": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"ccbccbb\")",
        "minimumCost(\"aaba\")",
        "minimumCost(s = \"pppppppp\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABABCDCDA\")",
        "minLength(s = \"ABABACCDC\")",
        "minLength(s = \"ACDBCDA\")",
        "minLength(s = \"ABCDDCDCBA\")",
        "minLength(s = \"ABCDBCA\")",
        "minLength(s = \"ACBDCDCAB\")",
        "minLength(\"ABABCDCDCDCD\")",
        "minLength(s = \"ABCCDABDCDDBCD\")",
        "minLength(s = \"ADCDCBADCDCBADCBAB\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,1,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums=[1,2,3,4], modulo=2, k=1)",
        "countInterestingSubarrays(nums = [1,2,2,2,2,2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,6,5], modulo = 9, k = 3)",
        "countInterestingSubarrays(nums = [2,3,6,7], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,4,5], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [4, 5, 0, 0, 3, 3, 0, 4, 1, 9, 8, 4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,6], modulo = 13, k = 9)",
        "countInterestingSubarrays(nums = [4, 5, 0, 0, 3, 3, 0, 4, 4, 4, 0, 0, 4, 3, 3, 5, 5], modulo = 9, k = 4)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[1, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1], [0, 2]])",
        "colorTheArray(n = 1, queries = [[0, 1], [0, 1], [0, 1]])",
        "colorTheArray(n = 3, queries = [[1, 2], [1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [0, 2], [0, 3]])",
        "colorTheArray(n = 2, queries = [[1, 1], [0, 0], [0, 1], [1, 1]])",
        "colorTheArray(n = 5, queries = [[3, 1], [3, 2], [4, 1], [1, 2], [3, 1], [3, 1], [4, 1], [1, 3], [2, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 5], nums2 = [1, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 12], nums2 = [2, 4, 10, 11])",
        "maxNonDecreasingLength(nums1 = [2, 1, 4], nums2 = [1, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7], nums2 = [4, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7, 1], nums2 = [5, 7, 9, 11, 13])",
        "maxNonDecreasingLength(nums1 = [3, 5, 6, 4], nums2 = [1, 2, 3, 5])",
        "maxNonDecreasingLength(nums1 = [10, 4, 2, 4], nums2 = [1, 8, 2, 4])",
        "maxNonDecreasingLength(nums1 = [100, 111], nums2 = [111, 111])",
        "maxNonDecreasingLength(nums1 = [3, 1, 4, 1, 5], nums2 = [3, 1, 4, 1, 5])",
        "maxNonDecreasingLength(nums1 = [3, 5, 6, 7], nums2 = [9, 7, 1, 9])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 4, target = 2)",
        "minimumPossibleSum(n = 5, target = 100)",
        "minimumPossibleSum(n = 10, target = 45)",
        "minimumPossibleSum(n=10, target=1)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1,3,5,7,9])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findValueOfPartition(nums = [3,1,2,4,7])",
        "findValueOfPartition(nums = [0, 1])",
        "findValueOfPartition(nums = [1, 10])",
        "findValueOfPartition(nums = [1,2,3,5,6,8])",
        "findValueOfPartition(nums = [3, 3, 4, 5, 6])",
        "findValueOfPartition(nums = [10,2,3,5])",
        "findValueOfPartition(nums = [1, 3, 5, 8, 12, 14, 20, 22])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"L_RRL\")",
        "furthestDistanceFromOrigin(\"_RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"R__RRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLL\")",
        "furthestDistanceFromOrigin(moves = \"_RR_LLL_\")",
        "furthestDistanceFromOrigin(moves = \"L_RR_LRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"L_RRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLL_RRRRRR_\")",
        "furthestDistanceFromOrigin(moves = \"RRR_R_RRR_\")",
        "furthestDistanceFromOrigin(\"RRRRRR__R__R__R\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [7, 7, 7, 7, 7, 7, 7, 7])",
        "minimumIndex(nums = [0, 1, 1, 0, 1, 1, 1, 0])",
        "minimumIndex(nums = [7, 7, 7, 7, 7, 7, 7, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7])",
        "minimumIndex(nums = [1,1,1,1,2,2,3,3,4,4,5,5])",
        "minimumIndex(nums = [2,3,2,2,3,5,2,2,2])",
        "minimumIndex(nums = [1, 3, 4, 4, 4, 4, 1])",
        "minimumIndex([7, 6, 7, 7, 7, 7, 6, 6, 6])",
        "minimumIndex(nums = [1, 3, 6, 6, 5, 5, 4, 4])",
        "minimumIndex(nums = [4, 3, 2, 1, 1, 1, 1, 2, 1])",
        "minimumIndex(nums = [0,0,1,0,1,1,2,3,2,1,4,5])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [1, 5, 4, 3, 2])",
        "semiOrderedPermutation(nums = [1, 5, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 4, 5, 3, 2])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n= 2, k= 3)"
    ]
}