{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4])",
        "alternatingSubarray(nums = [1,2,3,3,2])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 5])",
        "alternatingSubarray(nums = [1,2,3,3,4,5])",
        "alternatingSubarray(nums = [0, 1, 1, 2, 2, 3])",
        "alternatingSubarray(nums = [2,2,3,3,3])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 4, 4])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[0, 1], [1, 0]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[0, 1], [0, 0]])",
        "matrixSum(a=[[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "matrixSum(a = [[1, 2], [0, 0]])",
        "matrixSum([[[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 1]]])",
        "matrixSum([[[3, 2], [5, 1]]])",
        "matrixSum(a=[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 1, 1, 1, 1]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1,0,0], [0,1,0], [0,0,1]])",
        "findChampion([[0, 0, 1], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid=[[1,0,0], [0,1,0], [0,0,1]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2, 3], [0, 4, 5], [6, 7, 8]])",
        "matrixSum(a = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(a = [[1, 2], [0, 1]])",
        "matrixSum([[1], [2], [3]])",
        "matrixSum(a = [[1, 2, 3], [2, 3, 1], [3, 1, 2]])",
        "matrixSum(a = [[3, 1, 2], [4, 5, 6]])",
        "matrixSum([[1, 2, 3], [1, 3, 2], [2, 1, 3]])",
        "matrixSum([[1,2,3], [0,1,2], [0,1,1]])",
        "matrixSum(a = [[2, 4, 5], [1, 3, 6], [9, 8, 7]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray([1, 2, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [1,2,3,5,7,9])",
        "alternatingSubarray(nums = [1,2,3,5,7,9])",
        "alternatingSubarray(nums = [1,2,3,5,7,9,11,13])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, -1, 1, -1, 1, -1])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words=[\"apple\", \"orange\", \"banana\"], x=\"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"pineapple\"], x = \"apple\")",
        "findWordsContaining(words = ['apple', 'orange', 'pineapple'], x = 'a')",
        "findWordsContaining(words = [\"dog\", \"cat\", \"dove\", \"caterpillar\"], x = \"cat\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghijk\"], x = \"def\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"grape\"], x = \"p\")",
        "findWordsContaining(words = [\"a\", \"ac\", \"ax\"], x = \"c\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dbca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,2,7,18], target = 18)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,5,10], target = 15)",
        "lengthOfLongestSubsequence(nums = [2,3,5,7,11], target = 15)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5], target=10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 4)",
        "lengthOfLongestSubsequence(nums=[3,3,3,3], target=9)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bdac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bdac\")",
        "canBeEqual(s1 = \"eat\", s2 = \"ate\")",
        "canBeEqual(s1 = \"slep\", s2 = \"pels\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 1, 1, 1])",
        "maxSubarrays([1, 2, 3, 1, 2, 3])",
        "maxSubarrays([2,3,1,4,6])",
        "maxSubarrays(nums = [2,1,2,1,2])",
        "maxSubarrays(nums = [5,10,20,15,30])",
        "maxSubarrays([0x0F, 0xF0, 0x0F, 0xFF])",
        "maxSubarrays(nums = [4, 8, 3, 2, 7, 5])",
        "maxSubarrays([2, 1, 3, 2, 2, 2, 2])",
        "maxSubarrays(nums = [4, 2, 4, 6, 1, 7])",
        "maxSubarrays(nums = [1, 2, 3, 1, 4, 1, 2, 1, 3, 1, 1, 1])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 6)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [2, 3, 1], money = 10)",
        "buyChoco(prices = [3, 2, 3], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices = [3, 2, 3], money = 6)",
        "buyChoco(prices = [10, 15, 5, 20], money = 20)",
        "buyChoco(prices = [2, 3, 4], money = 7)",
        "buyChoco(prices = [4, 2, 3, 1, 5], money = 10)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3,4,5], l = 1, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 1, r = 5)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 1, r = 5)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 6, r = 20)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 6, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 4, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 2, r = 6)",
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 6)",
        "countSubMultisets(nums = [0, 1, 2, 3], l = 1, r = 6)",
        "countSubMultisets(nums = [0,0,0], l = 1, r = 10000)"
    ],
    "sample_322": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"bba\", s2 = \"aab\")",
        "canBeEqual(s1 = \"apple\", s2 = \"orange\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"bacdf\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins([1, 2, 3, 4])",
        "minimumCoins([1, 1, 1, 1])",
        "minimumCoins([1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 3, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins([1, 1, 1, 1, 1, 1])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p=90)",
        "accountBalanceAfterPurchase(p = 245)"
    ],
    "sample_423": [
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations([1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations(nums = [1,2,2,2,2])",
        "minOperations([3,1,3,2,4,2,1,1,2,3,3,4])",
        "minOperations(nums = [2,2,3,4,4,4])",
        "minOperations([1, 2, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 5])",
        "minOperations(nums=[1, 1, 1, 2, 2])",
        "minOperations(nums = [1, 2, 2, 2, 2, 2, 3, 3, 3])"
    ],
    "sample_350": [
        "alternatingSubarray([1,2,3,2,5,6,7,8,9,10,11])",
        "alternatingSubarray([1, 2, 3, 3, 3, 4, 5])",
        "alternatingSubarray([1,2,3,4,4,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,3,2,3,2,1])",
        "alternatingSubarray([1,2,3,3,4,5,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,2,3,4,2])",
        "alternatingSubarray([1, 2, 3, 5, 6, 7, 9, 10])",
        "alternatingSubarray(nums = [0, 1, 1, 2, 2, 3, 3, 4, 4, 5])",
        "alternatingSubarray(nums = [3, 4, 5, 6, 7, 5, 4, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2, 4, 4, 4, 3, 3, 2])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)"
    ],
    "sample_247": [
        "minOperations(s1 = \"aaa\", s2 = \"bbb\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"acbd\", x = 1)",
        "minOperations(s1 = \"bbb\", s2 = \"aaa\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"ade\", x = 1)",
        "minOperations(s1 = \"leetcode\", s2 = \"coats\", x = 2)",
        "minOperations(s1 = \"test\", s2 = \"tset\", x = 2)",
        "minOperations(s1 = \"abcdef\", s2 = \"xyz\", x = 3)",
        "minOperations(s1 = \"caab\", s2 = \"baab\", x = 1)",
        "minOperations(s1 = \"dab\", s2 = \"aab\", x = 3)",
        "minOperations(s1 = \"010110101\", s2 = \"010010101\", x = 1)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 1, y = 2, z = 4)",
        "longestString(x = 2, y = 4, z = 1)",
        "longestString(x = 4, y = 2, z = 1)",
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 1, y = 4, z = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "minOperations(nums = [3, 2, 1, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums=[1,2,3,4,5], k=3)",
        "minOperations(nums = [2, 1, 4, 3, 6, 5], k = 3)",
        "minOperations(nums = [2, 3, 1, 5, 6, 4], k = 3)",
        "minOperations(nums=[1, 2, 3, 5, 6], k=4)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcdb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdba\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabb\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbbd\")",
        "longestSemiRepetitiveSubstring(s = \"aabca\")"
    ],
    "sample_361": [
        "isGood([1, 2, 3, 4, 2])",
        "isGood([1, 2, 3, 4, 2])",
        "isGood(a = [1, 2, 3, 2])",
        "isGood(a = [1, 2, 3, 4, 5])",
        "isGood([1, 2, 3, 4, 5, 2])",
        "isGood([1, 2, 3, 4, 1])",
        "isGood(a = [2, 1, 3, 3])",
        "isGood([1, 2, 1])",
        "isGood([4, 3, 2, 1, 1])",
        "isGood([0, 4, 3, 1, 2, 4])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 7, m = 2)",
        "differenceOfSums(n = 8, m = 2)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums=[1,1,2,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 1, 2, 2, 3, 3, 2, 2])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"5\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs([\"aa\", \"bb\", \"cc\", \"dd\", \"aa\"])",
        "maximumNumberOfStringPairs([\"aa\", \"bb\", \"cc\", \"dd\", \"aa\", \"bb\", \"cc\", \"dd\", \"ee\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"11111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"11010111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11110000\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101111110110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11011111111111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"111111111000000\", k = 3)",
        "shortestBeautifulSubstring(s=\"1111100000111000011111100000\", k=2)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"001101\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"10101\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"ad\", s3 = \"ad\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abcf\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"gha\", s2 = \"gha\", s3 = \"gha\")",
        "findMinimumOperations(s1 = \"aabca\", s2 = \"acbaa\", s3 = \"cabaa\")",
        "findMinimumOperations(s1 = \"be\", s2 = \"bee\", s3 = \"be\")",
        "findMinimumOperations(s1 = \"test\", s2 = \"best\", s3 = \"worst\")",
        "findMinimumOperations(s1 = \"daily\", s2 = \"bily\", s3 = \"trily\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"az\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"azb\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adg\")",
        "canMakeSubsequence(str1 = \"bd\", str2 = \"ad\")",
        "canMakeSubsequence(str1 = \"ace\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"azb\", str2 = \"yza\")",
        "canMakeSubsequence(str1 = \"bbzb\", str2 = \"bza\")",
        "canMakeSubsequence(str1 = \"banan\", str2 = \"nana\")"
    ],
    "sample_364": [
        "isGood(nums = [2,3,1,4,5])",
        "isGood(nums = [2,3,1,4,5])",
        "isGood(nums = [2,1,3])",
        "isGood(nums = [1,2,4,3,5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,3,4,2])",
        "isGood(nums = [4,2,3,5,1])",
        "isGood(nums=[2,1,3])",
        "isGood(nums = [1,2,5,3,4])",
        "isGood(nums = [3,1,2,5,4,6])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 1, 2, 2], target = 4)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [6, 8, 5, 9], moveFrom = [6, 8], moveTo = [5, 9])",
        "relocateMarbles(nums = [5, 5, 8, 6, 6, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [6, 8, 9, 5], moveFrom = [6, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [6, 5, 9, 8, 7], moveFrom = [6, 5], moveTo = [7, 6])",
        "relocateMarbles(nums = [6, 8, 5, 9], moveFrom = [6, 5], moveTo = [8, 5])",
        "relocateMarbles(nums = [3, 5, 6, 8, 9], moveFrom = [6, 3], moveTo = [6, 3])",
        "relocateMarbles(nums = [3, 2, 5, 8, 6], moveFrom = [2, 5], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 5, 6, 7, 8, 8, 9, 9], moveFrom = [5, 8, 9], moveTo = [5, 8, 7])",
        "relocateMarbles(nums = [7, 5, 9, 8, 6, 4, 3, 2, 1], moveFrom = [7, 5, 4], moveTo = [6, 7, 5])",
        "relocateMarbles(nums = [4, 3, 2, 5, 6, 7, 8, 1, 9, 0], moveFrom = [6, 7, 1], moveTo = [6, 7, 0])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [2, 8, 19, 4], target = 23)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,2,7,7,7])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,2,3,3,2,2])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "minLengthAfterRemovals(nums = [1,1,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,1,1,1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,1,1,2,2])"
    ],
    "sample_303": [
        "countSeniors([\"John Doe, 65\", \"Jane Smith, 63\", \"Bob Johnson, 60\", \"Alice Brown, 66\"])",
        "countSeniors([\"John Doe 56\", \"Will Smith 67\", \"Jason Statham 62\"])",
        "countSeniors(details = [\"John Doe, 65\", \"Jane Doe, 63\", \"Jim Doe, 20\", \"Joy Doe, 67\", \"Jeny Doe, 61\"])",
        "countSeniors([\"John Doe 23\", \"Jane Doe 56\", \"Steve Smith 61\", \"Joe Root 65\"])",
        "countSeniors(details = [\"John Smith, 67\", \"John Doe, 65\", \"John Wayne, 70\", \"John Quincy, 68\"])",
        "countSeniors([\"John, 32\", \"Samantha, 60\", \"Paul, 58\", \"Sarah, 65\"])",
        "countSeniors([\"John18M\", \"Alan20F\", \"Alice60F\", \"Tom54M\", \"Jane62F\"])",
        "countSeniors(details = [\"John, 1980\", \"Mike, 1960\", \"Alice, 2002\", \"Rose, 1998\", \"Jane, 1961\"])",
        "countSeniors(details = [\"44568799\", \"8907654321\", \"8976543210\", \"5678901234\"])",
        "countSeniors(details=['John Doe 1981', 'Michael Jordan 1984', 'Anna Smith 1990', 'Jennifer Lawrence 1990', 'Jason Statham 1967', 'Anthony Hopkins 1970'])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"aabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbccddbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcbda\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccdddd\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abc\", s2 = \"dce\")",
        "canBeEqual(s1 = \"abc\", s2 = \"dce\")",
        "canBeEqual(s1 = \"abc\", s2 = \"adc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"bad\", s2 = \"cat\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xyz\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ban\", s2 = \"ana\", s3 = \"nana\")",
        "findMinimumOperations(s1 = \"banan\", s2 = \"banan\", s3 = \"banan\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apple\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"helloworld\", s2 = \"heavenworld\", s3 = \"heavenhelloworld\")",
        "findMinimumOperations(s1 = \"bzz\", s2 = \"baa\", s3 = \"baa\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 1, 2, 4, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 10], target = 15)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4], target=10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8], target = 8)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5, 6], target = 8)",
        "lengthOfLongestSubsequence(nums = [3,2,5,1,7,8,4], target = 18)",
        "lengthOfLongestSubsequence(nums = [2,3,5,1,0,16], target = 17)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum([1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum([3,1,2,4,5])",
        "minimumSum(nums = [2,1,4,3,6])",
        "minimumSum(nums = [2,1,5,1,2,3])",
        "minimumSum([1,2,3,10,5,6])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\",\"ef\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"110110110\", k = 3)",
        "shortestBeautifulSubstring(s = \"00110001\", k = 3)",
        "shortestBeautifulSubstring(s = \"1110000\", k = 3)",
        "shortestBeautifulSubstring(s = \"11111111111111111111\", k = 5)",
        "shortestBeautifulSubstring(s=\"111001101\", k=3)",
        "shortestBeautifulSubstring(s = '0001111000', k = 3)",
        "shortestBeautifulSubstring(s = \"1111011011111111000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abc\", \"bca\", \"cab\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\",\"ef\"])",
        "minimizeConcatenatedLength([\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\"])",
        "minimizeConcatenatedLength([\"abc\",\"bcd\",\"cde\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"cde\",\"dea\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"def\"])",
        "minimizeConcatenatedLength(words = ['cat', 'dog', 'cat', 'dog', 'cat', 'dog'])",
        "minimizeConcatenatedLength(words = ['abc', 'xyz', 'a', 'z'])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n = 6, m = 3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,5,6,7])",
        "alternatingSubarray(nums = [1,2,3,5,6,7])",
        "alternatingSubarray(nums = [1,2,3,5,6,7])",
        "alternatingSubarray([1, 2, 3, 5, 6])",
        "alternatingSubarray([1, 2, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,2,3,3,4,5,5,5,6])",
        "alternatingSubarray([2,3,4,5,7,9])",
        "alternatingSubarray([2, 4, 3, 5, 6])",
        "alternatingSubarray(nums=[10,11,12,1,2,3])",
        "alternatingSubarray([0, 1, 2, 3, 3, 4])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength([1, 2, 3, 4])",
        "findMaximumLength([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "findMaximumLength(nums = [1,2,1,2,1,2,1,2,1,2])",
        "findMaximumLength([1, 2, 3, 3])",
        "findMaximumLength(nums = [2,1,1,1,2])",
        "findMaximumLength(nums = [1,2,1,3,1,3,3,2,2])"
    ],
    "sample_302": [
        "countSeniors(details = [\"John Doe 1981\", \"Will Smith 1965\", \"Samuel Jackson 1967\"])",
        "countSeniors(details = [\"John Doe M 32 YES\", \"Jane Smith A 48 NO\", \"Sam Johnson M 62 YES\", \"Lucy Brown F 65 NO\"])",
        "countSeniors([\"John Doe, 62\", \"Lucy Smith, 65\", \"Peter Jones, 61\", \"Lisa White, 67\"])",
        "countSeniors([\"John Doe 19900101\",\"Anna Smith 19921231\",\"Robert Johnson 19550101\",\"Sophie Brown 19651122\"])",
        "countSeniors(details = [\"John Doe 19900720\", \"Michael Jordan 19920513\", \"Muhammad Ali 19940815\", \"John Wayne 19670720\"])",
        "countSeniors(details = [\"2200 John 40\", \"3300 Alice 25\", \"4400 Bob 61\", \"5500 Kate 63\"])",
        "countSeniors([\"Paul 24 4563 90\", \"John 32 5678 78\", \"Alice 23 7643 75\", \"Bob 45 6789 89\"])",
        "countSeniors(details = [\"John Doe, 23-02-1990\", \"Smith, 21-06-1982\", \"Miller, 05-10-1960\", \"Jones, 01-05-1965\"])",
        "countSeniors([\"Mike 21 123\", \"Matt 55 432\", \"John 65 431\", \"Sara 35 444\"])",
        "countSeniors(details = ['624004559722', '478081239769', '709103489107'])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"1425\", s2 = \"1524\")",
        "canBeEqual(s1 = \"1324\", s2 = \"4312\")",
        "canBeEqual(s1 = \"1234\", s2 = \"1243\")",
        "canBeEqual(s1 = \"1534\", s2 = \"5143\")",
        "canBeEqual(s1 = \"1324\", s2 = \"4321\")",
        "canBeEqual(s1 = \"3412\", s2 = \"1234\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"14xx\", s2 = \"13xx\")",
        "canBeEqual(s1 = \"92:20\", s2 = \"29:90\")",
        "canBeEqual(s1 = \"d2e1f4g3\", s2 = \"d3e2f1g4\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 1])",
        "minimumCoins(prices = [1,1])",
        "minimumCoins([1, 2])",
        "minimumCoins(prices = [1, 3])",
        "minimumCoins(prices = [1,1,2])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [1, 3, 4, 2, 1])",
        "minimumSeconds([0, 1, 2, 3])",
        "minimumSeconds(A = [2, 0, 2, 2, 0])",
        "minimumSeconds(A = [2, 1, 3, 1, 2])",
        "minimumSeconds(A = [2, 3, 2, 1, 2, 3, 2, 1, 2, 3])",
        "minimumSeconds(A = [0, 1, 10, 10])",
        "minimumSeconds([1, 3, 4, 6, 7, 8, 10])",
        "minimumSeconds(A = [2,0,2,1,2,1,2,1,0,2,0,2,1,2,1,0])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs([\"aa\", \"bb\", \"cc\", \"dd\", \"aa\"])",
        "maximumNumberOfStringPairs(words = ['ab', 'ba', 'cd', 'dc', 'aa', 'bb'])",
        "maximumNumberOfStringPairs(words=[\"aa\", \"bb\", \"cc\", \"cc\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ba\", \"na\", \"na\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"ab\",\"cd\",\"dc\",\"ba\"])",
        "maximumNumberOfStringPairs(words = ['aa', 'bb', 'ab', 'ba', 'cc', 'cd', 'dc', 'de'])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10])",
        "minSum(nums1 = [3, 2, 2], nums2 = [1, 1, 4])",
        "minSum(nums1 = [2, 2, 2], nums2 = [1, 1, 1])",
        "minSum(nums1 = [5, 1, 2], nums2 = [3, 3, 3])",
        "minSum(nums1 = [3, 1, 0], nums2 = [5, 2, 0])",
        "minSum(nums1 = [1,2,0], nums2 = [4,5,6])",
        "minSum(nums1 = [0, 2, 3], nums2 = [5, 1, 2])",
        "minSum(nums1 = [1, 1, 2, 1], nums2 = [2, 2, 0, 0])",
        "minSum(nums1 = [4, 3, 2, 1, 1], nums2 = [0, 0, 0, 0, 0])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"de\")",
        "findWordsContaining(words = [\"apple\", \"berry\", \"cherry\"], x = \"ry\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"goodbye\", \"foo\", \"bar\"], x = \"or\")",
        "findWordsContaining(words = [\"hi\", \"how\", \"are\", \"you\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"ba\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"goodbye\", \"book\"], x = \"o\")",
        "findWordsContaining(words = [\"alex\", \"hello\", \"world\"], x = \"ex\")",
        "findWordsContaining(words=['apple', 'orange', 'pineapple', 'kiwi'], x='apple')",
        "findWordsContaining(words = [\"at\", \"bit\", \"bitmap\", \"splash\", \"splot\", \"splat\"], x = \"bit\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 3, k = 3)",
        "maxSum(nums = [5, 2, 1, 4, 3], m = 2, k = 3)",
        "maxSum(nums = [3, 2, 1, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 3, k = 2)",
        "maxSum(nums = [2,1,5,4,3,2,1,2,3,4,5,1,2,3,4,5], m = 5, k = 3)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [3,1])",
        "relocateMarbles(nums = [1, 2, 2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums=[1, 2, 3], moveFrom=[1], moveTo=[2])",
        "relocateMarbles(nums=[1,2,2,3,4], moveFrom=[2,2], moveTo=[5,5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1,2,2], moveFrom = [1,2], moveTo = [3,1])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3,2,1,4,7,6,5])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 6)",
        "buyChoco(prices = [3,2,3], money = 5)",
        "buyChoco(prices = [2, 3, 1, 4, 2], money = 10)",
        "buyChoco(prices = [1, 1, 2, 3], money = 7)",
        "buyChoco(prices = [3,2,3], money = 7)",
        "buyChoco(prices = [2, 2, 1, 4, 3], money = 3)",
        "buyChoco(prices = [1, 2, 2, 1], money = 8)",
        "buyChoco(prices = [2, 1, 5], money = 10)",
        "buyChoco(prices = [5, 3, 1, 4, 2], money = 10)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 8, 7, 3], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 1], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 5, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], target = 12)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7, 9, 11, 13, 15], target = 18)",
        "lengthOfLongestSubsequence(nums = [3, 5, 8, 1, 1, 2], target = 12)",
        "lengthOfLongestSubsequence(nums = [2,3,5,10,40,1], target = 4)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcdb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdb\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"abbccd\")",
        "longestSemiRepetitiveSubstring(s = \"abbccd\")",
        "longestSemiRepetitiveSubstring(s=\"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbabcdb\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"berry\", \"cherry\"], x = \"erry\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"cherry\"], x = \"p\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"app\", \"bat\", \"cat\", \"doll\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"orange\"], x = \"pp\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"pen\"], x = \"apple\")",
        "findWordsContaining(words = ['apple', 'banana', 'cherry'], x = \"b\")",
        "findWordsContaining(words=['apple', 'orange', 'pineapple'], x='a')",
        "findWordsContaining(words = ['apple', 'pear', 'banana'], x = 'a')",
        "findWordsContaining(words = [\"apple\", \"apple pie\", \"banana\", \"banana split\"], x = \"an\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\", \"1\", \"prev\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"aecb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"dca\")",
        "canBeEqual(s1 = \"are\", s2 = \"era\")",
        "canBeEqual(s1 = \"cbaa\", s2 = \"bcaa\")",
        "canBeEqual(s1 = \"1abd\", s2 = \"ab2d\")",
        "canBeEqual(s1 = \"hapax\", s2 = \"apxha\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [3,2,1,5,4,6])",
        "minimumSum(nums = [3,7,2,1,4,8])",
        "minimumSum(nums = [2,1,5,3,6])",
        "minimumSum(nums = [1,2,1,2,1])",
        "minimumSum(nums=[5,2,1,4,3,6])",
        "minimumSum(nums = [1,2,4,10,5])",
        "minimumSum(nums = [5,3,1,9,2,8])",
        "minimumSum(nums=[4,5,7,2,10])",
        "minimumSum(nums = [5,6,3,4,2,1])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 8, 10], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 8, 10], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 15)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 8], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 5)"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"MyPhl\")",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s=\"YmplH\")",
        "sortVowels(s = \"Python\")",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s='YmpHl')",
        "sortVowels(s = \"GYmpH\")",
        "sortVowels(s = \"mPhLy\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 2], [1, 3]])",
        "matrixSum(nums = [[2,5,1],[3,4,4],[1,2,3]])",
        "matrixSum(nums = [[1,0],[2,1],[4,0]])",
        "matrixSum([[1, 0, 2],[2, 1, 1],[1, 2, 0]])",
        "matrixSum([[5, 1, 0], [2, 9, 1], [3, 3, 3]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [2,3,1,5,6])",
        "maximumTripletValue(nums = [1, 2, 3, 1, 2])",
        "maximumTripletValue(nums = [3, 6, 5, 1, 2])",
        "maximumTripletValue(nums = [2, 3, 4, 5, 6, 7])",
        "maximumTripletValue(nums=[3, 4, 5, 1, 2])",
        "maximumTripletValue(nums = [3, 6, 0, 1, 4, 5])",
        "maximumTripletValue(nums = [2,3,5,3,1,0])",
        "maximumTripletValue(nums = [10, 3, 1, 5, 2])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 5])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [2, 3, 5, 7, 11])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 7, 9, 11])",
        "alternatingSubarray(nums = [2, 2, 3, 4, 5])",
        "alternatingSubarray([1, 3, 5, 7])",
        "alternatingSubarray(nums = [3, 1, 2, 4, 5])",
        "alternatingSubarray(nums = [4, 4, 4, 4, 4])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 10)",
        "beautifulSubstrings(s = \"beautiful\", k = 6)",
        "beautifulSubstrings(s = \"awesome\", k = 6)",
        "beautifulSubstrings(s = \"awesome\", k = 5)",
        "beautifulSubstrings(s = \"aeia\", k = 8)",
        "beautifulSubstrings(s = \"aei\", k = 14)",
        "beautifulSubstrings(s = \"beautiful\", k = 40)",
        "beautifulSubstrings(s = \"aeiob\", k = 26)",
        "beautifulSubstrings(s = \"banana\", k = 24)",
        "beautifulSubstrings(s = \"aba\", k = 10)"
    ],
    "sample_449": [
        "minChanges(s = \"0110\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"111000\")",
        "minChanges(s = \"011010\")",
        "minChanges(s = \"ba\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"bab\")",
        "minChanges(\"ba\")",
        "minChanges(s = \"101010101010\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"101101\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"John Doe, M, 40\", \"Smith, M, 65\", \"Jane Doe, F, 55\"])",
        "countSeniors(details=[\"John Doe, 22 years, Male\", \"William Smith, 65 years, Male\", \"Sarah Johnson, 62 years, Female\", \"Jessica Brown, 58 years, Female\"])",
        "countSeniors([\"John Doe 1982/12/02\",\"Alan Smith 1983/11/22\",\"Mary Johnson 1960/05/14\"])",
        "countSeniors([\"John Doe 19811205\", \"Michael Jordan 20030514\", \"Usain Bolt 19860821\"])",
        "countSeniors([\"John Doe,50\", \"Abdul,62\", \"Sara,20\", \"Olivia,6\"])",
        "countSeniors(details = [\"John Doe M 22 61\", \"Jack Daniels M 30 70\", \"Abby Steele F 28 65\"])",
        "countSeniors(['John Doe, Male, 30', 'Samuel Johnson, Male, 65', 'Ada Wong, Female, 51', 'Olivia Miller, Female, 65'])",
        "countSeniors([\"John Doe 1982/07/15\",\"Alan Smith 1985/12/07\",\"Maria Johnson 1988/05/21\",\"Mike Brown 1956/07/15\"])",
        "countSeniors(details = ['a1b119881212', 'b2c199011230', 'c3d199210220', 'd4e1960091220', 'e5f1962081220'])",
        "countSeniors(details = ['3211992022432', '1409196705321', '2812200008442'])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,4])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7])",
        "minGroupsForValidAssignment(nums=[2,1,1,1,2,2,2])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0]], k = 2)",
        "countPairs(coordinates = [[1,1], [2,2], [3,3], [4,4], [5,5], [6,6], [7,7], [8,8], [9,9], [10,10]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]], k = 10)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2], [2, 1]], k = 1)",
        "countPairs(coordinates = [[0,0], [0,1], [1,0], [1,1], [0,2], [1,2], [2,0], [2,1], [2,2], [3,1]], k = 2)",
        "countPairs(coordinates = [[0, 1], [1, 0], [0, 2], [2, 0], [1, 2], [2, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[0,0], [1,0], [0,1], [1,1], [2,1], [2,0], [3,0], [3,1], [4,1], [4,0]], k = 1)",
        "countPairs(coordinates = [[1,2],[3,4],[2,3],[4,1],[1,3],[2,4]], k = 1)",
        "countPairs(coordinates = [[1,2],[2,3],[1,2],[2,3],[2,3],[2,3],[1,2],[1,2],[1,2],[1,2]], k = 1)"
    ],
    "sample_401": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 5, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [4,2,1,7,8,3], m = 2, k = 3)",
        "maxSum(nums = [2,1,3,3,1,2,1,2,3,3], m = 3, k = 2)",
        "maxSum(nums = [3,1,2,1,4,1,3], m = 3, k = 2)",
        "maxSum(nums = [5, 3, 2, 1, 3, 1, 2, 4, 3], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,1,1,1,2,3,4,5,1], m = 4, k = 3)",
        "maxSum(nums = [2, 1, 4, 1, 5, 3, 1, 0, 3, 4, 2, 1, 2, 3, 0, 5, 3, 0, 5, 2, 3], m = 5, k = 3)"
    ],
    "sample_452": [
        "minChanges(s = \"0110\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"bbaa\")",
        "minChanges(s = \"bba\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"xyx\")",
        "minChanges(s = \"101101\")",
        "minChanges(s = \"yexy\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,5,4,3], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [2, 1, 2, 1, 2], nums2 = [1, 2, 1, 2, 1])",
        "minOperations([1,4,3,2,3], [2,1,2,4,3], 4, 4)",
        "minOperations(nums1 = [3, 1, 2, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [3, 2, 1], nums2 = [2, 1, 3])",
        "minOperations(nums1 = [3,4,1,2,1,2], nums2 = [1,2,3,1,2,4])",
        "minOperations(nums1 = [2, 4, 3, 9], nums2 = [1, 6, 3, 8])",
        "minOperations(nums1 = [3, 4, 2, 1, 4], nums2 = [2, 3, 1, 1, 3])",
        "minOperations([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 7, 6], 7, 7)",
        "minOperations(nums1 = [1,1,2,3,4,6,6,8,8,8,9,10], nums2 = [1,2,2,3,4,5,6,8,8,9,10])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"111011\", k = 2)",
        "shortestBeautifulSubstring(s = '111101101', k = 2)",
        "shortestBeautifulSubstring(s = \"111000\", k = 2)",
        "shortestBeautifulSubstring(s = \"111011111011\", k = 3)",
        "shortestBeautifulSubstring(s = \"1110011100111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011011110111001\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111111100000000\", k = 3)",
        "shortestBeautifulSubstring(s='11010111101100111', k=3)",
        "shortestBeautifulSubstring(s = \"111001111110111110101101\", k = 3)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [5, 3, 2, 4, 1])",
        "maximumTripletValue(nums = [1, 2, 6, 4])",
        "maximumTripletValue(nums = [2,3,4,5])",
        "maximumTripletValue(nums = [2, 1, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 0, 2])",
        "maximumTripletValue(nums = [4, 7, 2, 1, 8])",
        "maximumTripletValue(nums = [2,4,1,1,2])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n=4, limit=2)",
        "distributeCandies(n=7, limit=3)",
        "distributeCandies(n=3, limit=1)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,2,3,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums=[1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,1,1,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3,4,4,4,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,2,1,3,2,3,3,1,1])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [6, 5, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [6, 2, 3])",
        "minSum(nums1 = [1, 0, 3], nums2 = [5, 3, 4])",
        "minSum(nums1=[3, 1, 0], nums2=[5, 2, 0])",
        "minSum(nums1 = [3,2,1,0,4], nums2 = [0,0,0,0,0])",
        "minSum(nums1 = [2, 3, 4], nums2 = [5, 6, 7])",
        "minSum(nums1 = [5, 2, 4, 1], nums2 = [3, 2, 0, 5])",
        "minSum(nums1 = [1,5,0], nums2 = [2,3,4])",
        "minSum(nums1 = [4, 3, 2, 1, 1], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [2, 2, 2, 1], nums2 = [1, 1, 1, 1, 1, 1])"
    ],
    "sample_453": [
        "minChanges(s = \"011010\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"ba\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(\"0110\")",
        "minChanges(s = \"000100\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"beauty\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"aeioubcd\", k = 2)",
        "beautifulSubstrings(s = \"auoa\", k = 2)",
        "beautifulSubstrings(s = \"xvwxyz\", k = 2)",
        "beautifulSubstrings(s = \"eaa\", k = 2)",
        "beautifulSubstrings(s = \"aaiuaiau\", k = 4)",
        "beautifulSubstrings(s = \"iccioioicciii\", k = 2)",
        "beautifulSubstrings(s = \"kzxruyvj\", k = 2)",
        "beautifulSubstrings(s = \"mjevjmfowdjevjme\", k = 2)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"aeiobu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaiooiaaaeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiobo\", k = 2)",
        "beautifulSubstrings(s = \"aeioooo\", k = 3)",
        "beautifulSubstrings(s = \"aeaeae\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaiooiaaaeiouaa\", k = 3)",
        "beautifulSubstrings(s = \"aaeaa\", k = 2)",
        "beautifulSubstrings(s=\"aeiooooaieiou\", k=3)",
        "beautifulSubstrings(s=\"aaeeaiiaa\", k=3)"
    ],
    "sample_369": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"HYmpL\")",
        "sortVowels(s = \"MyPh\")",
        "sortVowels(s = \"HymlP\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"HlMy\")",
        "sortVowels(s = \"MyPhl\")",
        "sortVowels(s=\"MyPh\")",
        "sortVowels(s = \"mPhYpL\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0,3,7,2,5,8,4,6,0,1])",
        "minimumSeconds(nums = [0,1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,1])",
        "minimumSeconds([1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "minimumSeconds([1, 1, 2, 2, 3, 3])",
        "minimumSeconds([1,1,1,1])",
        "minimumSeconds(nums = [2, 3, 1, 2, 1])",
        "minimumSeconds(nums = [3,2,0,2,1,4,2,3,1,4])",
        "minimumSeconds(nums = [4,3,2,2,2,1])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [1, 2, 4, 6, 7])",
        "minimumSum(nums = [4, 5, 1, 3, 6])",
        "minimumSum(nums = [4, 5, 1, 3, 6])",
        "minimumSum(nums = [1, 2, 1, 6, 7])",
        "minimumSum([4, 2, 5, 9, 1])",
        "minimumSum(nums = [1, 5, 4, 15, 10, 12])",
        "minimumSum(nums = [5, 9, 1, 7, 2])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "minOperations(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 5)",
        "minOperations(nums = [4, 2, 3, 1], k = 2)",
        "minOperations(nums=[2, 4, 6, 8, 10, 12, 14, 16, 18], k=3)",
        "minOperations(nums = [6,5,4,3,2,1,0], k = 4)",
        "minOperations(nums = [2,3,2,4,3,1], k = 3)",
        "minOperations(nums = [8, 4, 3, 6, 7, 5, 2, 1], k = 3)",
        "minOperations(nums = [2,1,5,6,3,4,2,1], k = 3)",
        "minOperations(nums=[5, 1, 2, 6, 2, 2, 7, 10], k=4)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(A = [1, 1, 1, 7, 7, 7, 7, 2, 2, 2], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 1, 2, 3, 4], m = 3, k = 3)",
        "maxSum(A = [1, 5, 7, 8, 2], m = 2, k = 3)",
        "maxSum(A = [4, 4, 4, 1, 1, 1, 1, 1], m = 2, k = 3)",
        "maxSum(A = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 2, k = 5)",
        "maxSum(A = [7, 2, 3, 4, 1, 2, 8, 1], m = 3, k = 3)",
        "maxSum(A = [2, 2, 2, 2, 3, 3, 3, 3], m = 1, k = 3)",
        "maxSum(A = [1, 4, 2, 3, 4, 5, 1, 2], m = 3, k = 3)",
        "maxSum(A = [5, 2, 4, 1, 7, 6, 3], m = 2, k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [0, 1, 2, 3])",
        "maxSubarrays([12, 9, 7, 8, 10, 11])",
        "maxSubarrays(nums = [4, 7, 8])",
        "maxSubarrays([2,1,3,1,0,2,3])",
        "maxSubarrays(nums = [1, 6, 7, 1])",
        "maxSubarrays([1,2,3,4,5,0,7])",
        "maxSubarrays([2, 1, 3, 2, 1, 0, 2])",
        "maxSubarrays([0, 5, 4, 6, 3, 8, 2, 9, 7])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 6)",
        "buyChoco(prices = [1, 2, 3], money = 6)",
        "buyChoco(prices = [2, 3], money = 5)",
        "buyChoco(prices = [3, 2, 3], money = 7)",
        "buyChoco(prices = [3, 2, 3], money = 6)",
        "buyChoco(prices = [2,5], money = 10)",
        "buyChoco(prices = [2,3,4], money = 8)",
        "buyChoco(prices = [3,2,3], money = 7)",
        "buyChoco(prices = [5,1,2], money = 10)",
        "buyChoco(prices = [5, 3, 10, 100, 20], money = 77)"
    ],
    "sample_290": [
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"111111\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3,4])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [2,2,1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,2,2,2])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [1, 2, 3, 5, 7], k = 3)",
        "minOperations(nums = [3, 4, 2, 3, 2, 1, 2], k = 3)",
        "minOperations(nums = [4, 2, 3, 1], k = 2)",
        "minOperations(nums = [5, 5, 3, 1], k = 2)",
        "minOperations(nums = [3, 5, 2, 4], k = 2)",
        "minOperations(nums = [5,3,2], k = 2)",
        "minOperations(nums = [4, 3, 2, 1, 5], k = 2)"
    ],
    "sample_363": [
        "isGood(nums = [3, 1, 2, 2, 1])",
        "isGood(nums = [1, 2, 2, 3, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 2])",
        "isGood([1, 2, 2, 3, 1])",
        "isGood(nums = [2, 1, 3, 3, 1, 2])",
        "isGood(nums = [2, 1, 1, 3, 4])",
        "isGood([4, 1, 3, 3, 2, 2])",
        "isGood(nums = [3, 4, 5, 1, 2, 1])",
        "isGood(nums = [2, 3, 1, 4, 1, 6])",
        "isGood([4, 1, 3, 2, 5, 2, 1, 4, 5])"
    ],
    "sample_325": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [2,1,1,1,1])",
        "isGood(nums = [2,1,1,1])",
        "isGood(nums = [2,2,2,2,2])",
        "isGood(nums = [3,3,1,2,1])",
        "isGood(nums = [1, 2, 3, 5, 4])",
        "isGood(nums = [2, 1, 2])",
        "isGood(nums = [1, 2, 3, 4, 5, 5, 7])",
        "isGood([1, 2, 2, 3, 4, 5])",
        "isGood(nums = [2,3,2,4,1,1])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [0, 1])",
        "minimumSeconds([0, 1, 2, 3, 4])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8])",
        "minimumSeconds(nums = [4,3,2,1,0])",
        "minimumSeconds(nums = [2, 1, 0])",
        "minimumSeconds([0, 1, 1, 0, 2, 2, 0, 3, 3, 0])",
        "minimumSeconds([2, 2, 2])",
        "minimumSeconds(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39])",
        "minimumSeconds(nums = [2,3,2,2,1,2,3,2,2,1])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [10, 20, 30, 40])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5, 4])",
        "isGood(nums = [1,2,3,5,6])",
        "isGood(nums = [1, 2, 3, 6, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums=[1, 2, 3, 5])",
        "isGood([1, 2, 4, 3, 5])",
        "isGood([1, 2, 3, 4, 5])",
        "isGood([2, 3, 4, 1, 6])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 8, 9])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [2,3,1], nums2 = [1,2,3])",
        "minOperations(nums1 = [2,2,2,1,8], nums2 = [2,1,8,2,2])",
        "minOperations(nums1 = [1,2,5], nums2 = [2,2,2])",
        "minOperations(nums1 = [2, 1], nums2 = [4, 2])",
        "minOperations(nums1 = [2,3,4,1,2,1], nums2 = [1,1,1,1,1,1])",
        "minOperations(nums1 = [2,1,2,1,2,1,2], nums2 = [1,2,1,2,1,2,1])",
        "minOperations(nums1 = [1,2,2,1,0], nums2 = [2,2,2,1,0])",
        "minOperations(nums1 = [2,1,3,2,3,2], nums2 = [2,1,3,2,3,2])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = \"1123456789\", k = 9)",
        "shortestBeautifulSubstring(s = '1234567891011', k = 7)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"11123456789\", k = 4)",
        "shortestBeautifulSubstring(s = \"112233445566778899\", k = 8)",
        "shortestBeautifulSubstring(s='112112', k=4)",
        "shortestBeautifulSubstring(s = '1221121', k = 5)",
        "shortestBeautifulSubstring(s=\"34511\", k=7)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,1,1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [2, 1, 1, 1, 3, 1, 1, 1, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 1, 1, 3, 1, 2, 3, 2, 4])"
    ],
    "sample_289": [
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"000000\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"000000000000\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 5, 10], target = 14)",
        "lengthOfLongestSubsequence(nums = [3, 2, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 11)",
        "lengthOfLongestSubsequence(nums = [2, 1, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [3,5,7,9,2,4,6,8], target = 15)",
        "lengthOfLongestSubsequence(nums = [3, 5, 10, 20, 15, 5], target = 30)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3,1,2,4,5])",
        "minimumSum([3, 2, 1, 4, 5])",
        "minimumSum(nums = [2,4,5,1,5])",
        "minimumSum(nums = [1,5,4,2])",
        "minimumSum(nums = [2,4,6,8])",
        "minimumSum(nums = [1,2,1,4,5,6,7])",
        "minimumSum(nums = [1,1,-1,4,5])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 4, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 4, k = 2)",
        "maxSum(nums = [2, 1, 1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [2,1,1,1,1,1,2,3,4], m = 2, k = 3)",
        "maxSum(nums = [3, 2, 2, 2, 1, 2, 2, 3], m = 3, k = 2)",
        "maxSum(nums = [2,3,4,1,1,2,3,4,1,1,2], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,2,1,4,5,1,2,3], m = 2, k = 3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"acd\", s3 = \"acd\")",
        "findMinimumOperations(s1 = \"bcd\", s2 = \"bcd\", s3 = \"bcd\")",
        "findMinimumOperations(s1 = \"addc\", s2 = \"addc\", s3 = \"addc\")",
        "findMinimumOperations(s1 = \"pqrst\", s2 = \"pqr\", s3 = \"pqrs\")",
        "findMinimumOperations(s1 = \"lover\", s2 = \"loving\", s3 = \"lovely\")",
        "findMinimumOperations(s1 = \"addfddf\", s2 = \"dfdfdf\", s3 = \"dfdfdf\")"
    ],
    "sample_427": [
        "minOperations([2,2,2,3,3])",
        "minOperations([2,2,2,3,3])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1,2,3,4,5,6])",
        "minOperations([2,2,3,3,2,4,4,4])",
        "minOperations(nums = [2,2,2,2,2])",
        "minOperations([1, 1, 1, 2, 2, 2, 2])",
        "minOperations([3,1,3,2,4,4,4,2,2,2])",
        "minOperations(nums = [2, 1, 3, 2, 2, 2])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins([1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins([1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5, 8])",
        "minimumCoins([1,2,3,4])",
        "minimumCoins(prices = [1, 2, 5, 10])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1,2,3,1])",
        "minimumSeconds(nums = [1,2,3,1,2,3,1,2,3])",
        "minimumSeconds(nums = [1,2,1])",
        "minimumSeconds(nums = [2, 1, 4, 3, 2])",
        "minimumSeconds(nums = [0,2,4,6,7])",
        "minimumSeconds([0,1,2,3,4,0])",
        "minimumSeconds(nums = [1,2,2,1,3,4,4,5])",
        "minimumSeconds(nums = [1, 2, 2, 1, 3, 3, 4, 5])"
    ],
    "sample_448": [
        "minChanges(s = \"0110\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"baa\")",
        "minChanges(s = \"111000\")",
        "minChanges(s = \"01100\")",
        "minChanges(s = \"11100\")",
        "minChanges(s = \"011011\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [8, 1, 5, 3, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 1, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 1, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 3, 1, 5, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 1, 3, 5, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 8, 9, 1, 3], limit = 3)",
        "lexicographicallySmallestArray(nums = [4,1,3,5,8,9], limit = 2)",
        "lexicographicallySmallestArray(nums = [4,1,5,2,6,3,9,8,7], limit = 2)",
        "lexicographicallySmallestArray(nums = [4, 1, 5, 8, 3, 9, 1, 7, 5, 3], limit = 2)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,1,2,3])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts([1,2,2,3,3,3])",
        "sumCounts(nums = [1,1,1,1,1])",
        "sumCounts(nums = [2,2,2,2])",
        "sumCounts(nums = [1,2,3,1,2,3])",
        "sumCounts(nums = [1,2,3,4,5,6,7])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0, 1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [0, 1, 2, 3])",
        "maximumTripletValue(nums = [1, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [2, 0, 3])",
        "maximumTripletValue(nums = [2, 7, 1, 8, 3])",
        "maximumTripletValue(nums = [0, -100, -1000])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"baz\", k = 2)",
        "beautifulSubstrings(s = \"b\", k = 2)",
        "beautifulSubstrings(s = \"baa\", k = 2)",
        "beautifulSubstrings(s = \"beautifulstring\", k = 3)",
        "beautifulSubstrings(s = \"bccu\", k = 2)",
        "beautifulSubstrings(s = \"1111\", k = 2)",
        "beautifulSubstrings(s = \"bvowels\", k = 3)",
        "beautifulSubstrings(s = \"oaaaooeua\", k = 3)",
        "beautifulSubstrings(s = \"bnnnbbnnn\", k = 1)"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums=[1,2,3,4,5], target=6)",
        "countPairs(nums = [1, 3, 5, 2, 4, 6], target = 7)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 20, limit = 5)",
        "distributeCandies(n = 11, limit = 3)",
        "distributeCandies(n = 12, limit = 3)",
        "distributeCandies(n = 11, limit = 2)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [2, 3, 2, 4, 2], nums2 = [1, 1, 1, 1, 1])",
        "minOperations(nums1 = [2, 3, 2, 4], nums2 = [1, 2, 1, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [2, 3, 2, 4, 1], nums2 = [1, 2, 2, 4, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1,3,5,7,9], nums2 = [3,3,3,3,3])",
        "minOperations(nums1 = [2, 3, 2, 3], nums2 = [1, 2, 3, 2])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [3,2,1,4])",
        "minOperations(nums1 = [2,5,3,8,1], nums2 = [1,2,6,4,3])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 5])",
        "minOperations([2,2,3,3,2,2])",
        "minOperations(nums = [1,1,1,1,1])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [1,1,2,3,5])",
        "minOperations(nums = [3,3,3,4])",
        "minOperations(nums = [1, 2, 4])",
        "minOperations([2,2,2,2,3,3,3,3])",
        "minOperations([3, 1, 1, 1])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = '11011011', k = 2)",
        "shortestBeautifulSubstring(s = \"110110111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1110111111\", k = 2)",
        "shortestBeautifulSubstring(s = '111001111', k = 2)",
        "shortestBeautifulSubstring(s = \"1101101110\", k = 2)",
        "shortestBeautifulSubstring(s = '11011011101', k = 2)",
        "shortestBeautifulSubstring(s = \"110111111011\", k = 3)",
        "shortestBeautifulSubstring(s = \"11011111101\", k = 2)",
        "shortestBeautifulSubstring(s = \"110011111\", k = 2)",
        "shortestBeautifulSubstring(s='1111111111', k=1)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [0,1,2,3,4,0])",
        "minimumSeconds(nums = [1,2,3,2,1])",
        "minimumSeconds(nums = [1,5,4,2,3,6])",
        "minimumSeconds(nums = [1,2,3,4,5,0])",
        "minimumSeconds(nums = [1,2,3,4,5,1,2,3,4,5])",
        "minimumSeconds(nums = [3,2,1,4,2,1,3])",
        "minimumSeconds([1, 0, 2, 3, 4, 5])",
        "minimumSeconds(nums = [2,3,1,2,1,4,2,1,3,2])",
        "minimumSeconds(nums = [2, 3, 1, 1, 1, 1, 1, 1, 1, 0])",
        "minimumSeconds(nums = [0,3,7,5,9,12,6,14,10,4,8,2])"
    ],
    "sample_428": [
        "minOperations([3, 1, 3, 2, 4, 2, 1, 1])",
        "minOperations([1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations([2, 2, 3, 3, 2, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([1, 2, 1, 2, 1, 2])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "minOperations([1, 2, 1, 2, 1, 2, 1])",
        "minOperations([1, 1, 1, 1, 2, 2, 2, 2, 3, 3])",
        "minOperations([1, 2, 1, 1, 1, 4, 4, 4])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7])",
        "alternatingSubarray([1, 2, 3, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7, 8])",
        "alternatingSubarray([1, 2, 3, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [2, 5, 6, 3, 4, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 4, 3, 2])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [5,5,5,5,5])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals([1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\", \"ca\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"aa\", \"bb\", \"cc\", \"cd\"])",
        "maximumNumberOfStringPairs(words=['ab', 'ba', 'cd', 'dc', 'ef', 'fe', 'gh', 'hg'])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\", \"cd\", \"ad\", \"da\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\", \"xyz\", \"zyx\", \"zyz\"])",
        "maximumNumberOfStringPairs([\"abba\", \"cddc\", \"baab\", \"dcde\", \"edc\"])",
        "maximumNumberOfStringPairs([\"abba\",\"baab\",\"ab\",\"bba\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azced\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azced\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azced\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ad\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ad\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abbab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbb\")",
        "longestSemiRepetitiveSubstring(s=\"abcdb\")",
        "longestSemiRepetitiveSubstring(s = \"abbccd\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 1, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [5,4,3,2,1], m = 2, k = 2)",
        "maxSum(nums = [1,4,1,5,3,2,1,4,3,2], m = 2, k = 3)",
        "maxSum(nums = [1,4,5,2,5,3,1,4,2,3], m = 3, k = 2)",
        "maxSum(nums = [1,1,1,2,3,1,1,1,2,3,4,5,6,7,8,9,10], m = 3, k = 3)",
        "maxSum(nums = [3, 5, 2, 3, 7, 4, 2, 8, 2, 3], m = 2, k = 3)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"ban\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"banana\"], x = \"apple\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"cherry\"], x=\"a\")",
        "findWordsContaining(words = [\"apple\", \"ananas\", \"banana\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"cherry\"], x = \"ange\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"cherry\", \"date\"], x=\"an\")",
        "findWordsContaining(words = [\"hi\", \"mark\"], x = \"ma\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,1,2,3], moveFrom = [1,1], moveTo = [2,2])",
        "relocateMarbles(nums = [1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [2,3], moveTo = [1,2])",
        "relocateMarbles(nums = [1,2,2,3], moveFrom = [2,1], moveTo = [1,2])",
        "relocateMarbles(nums = [2,2,3,3], moveFrom = [2,3], moveTo = [1,1])",
        "relocateMarbles(nums = [1,1,2,2,3,3], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,2,3], moveFrom = [2,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,2,3], moveFrom = [2,1], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,2,3,4,4,4], moveFrom = [2,4], moveTo = [1,2])",
        "relocateMarbles(nums = [1,1,1,2,2,2,3], moveFrom = [1,2,2], moveTo = [2,2,3])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, -1, -2])",
        "maximumTripletValue(nums = [2, 3, 1, 5])",
        "maximumTripletValue([2, 1, 3])",
        "maximumTripletValue(nums = [3,2,1])",
        "maximumTripletValue([4, 5, 6])",
        "maximumTripletValue(nums = [2, 3, 6, 1, 4, 7])",
        "maximumTripletValue(nums = [3, -5, 2])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abcdb\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abbc\")",
        "longestSemiRepetitiveSubstring(s = \"abcdde\")",
        "longestSemiRepetitiveSubstring(s = \"abbccd\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbe\")",
        "longestSemiRepetitiveSubstring(s = \"aababcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbb\")",
        "longestSemiRepetitiveSubstring(s=\"aaaaabbbbbccc\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"dc\", \"ba\"])",
        "maximumNumberOfStringPairs([\"ab\",\"ba\",\"aa\",\"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"dc\", \"ba\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"aaa\",\"bbb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"bca\",\"cab\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum([[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1,2,3],[4,5,1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum([[3,2,1],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[4, 2, 1], [3, 1, 4]])",
        "matrixSum(nums = [[4, 2, 9], [8, 1, 6], [7, 5, 3]])",
        "matrixSum(nums = [[2, 1, 1], [1, 2, 2], [2, 2, 1]])",
        "matrixSum(nums = [[1, 2, 3], [5, 5, 3], [4, 2, 1]])",
        "matrixSum(nums = [[5, 3, 1, 2], [4, 2, 4, 5], [2, 3, 3, 2]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"acd\", s3 = \"acd\")",
        "findMinimumOperations(s1 = \"xxx\", s2 = \"yyy\", s3 = \"zzz\")",
        "findMinimumOperations(s1 = \"pineapple\", s2 = \"apple\", s3 = \"apple\")",
        "findMinimumOperations(s1 = \"bba\", s2 = \"aba\", s3 = \"caa\")",
        "findMinimumOperations(s1 = \"sksd\", s2 = \"sksd\", s3 = \"sksd\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"apple\", s3 = \"pineapple\")",
        "findMinimumOperations(s1 = \"bac\", s2 = \"cab\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"aabd\", s2 = \"abcd\", s3 = \"aacd\")",
        "findMinimumOperations(s1 = \"axxb\", s2 = \"aaxx\", s3 = \"aaab\")",
        "findMinimumOperations(s1 = \"geek\", s2 = \"gak\", s3 = \"g\")"
    ],
    "sample_324": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,1,2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [2,1])",
        "minimumCoins(prices = [1,1,2,1,2])",
        "minimumCoins(prices=[1,2,1])",
        "minimumCoins([1, 2, 1])",
        "minimumCoins(prices = [1,1,1,1,2,2,2,2,1,1])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5,6], target = 7)",
        "countPairs(nums = [2,7,11,15], target = 18)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [2, 7, 11, 15], target = 20)",
        "countPairs(nums = [2, 3, 4, 1], target = 6)",
        "countPairs(nums = [2,4,6,8,10], target = 14)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,2,1,2,3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,2,2,2,2,2,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3,3,4,4,4,1,1,1,1])",
        "minGroupsForValidAssignment(nums= [1,2,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums=[2,1,2,1,3,1,2,1,3,2,1,2,1,3])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [2, 7, 11, 15], target = 20)"
    ],
    "sample_317": [
        "buyChoco(prices = [3,2,3], money = 4)",
        "buyChoco(prices = [3,2,3], money = 4)",
        "buyChoco(prices = [3,2,3], money = 4)",
        "buyChoco(prices = [3,2,3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 6)",
        "buyChoco(prices = [3,2,3], money = 6)",
        "buyChoco(prices = [3,2,3], money = 5)",
        "buyChoco(prices = [3,2,3], money = 5)",
        "buyChoco(prices = [3, 2, 4, 7], money = 10)",
        "buyChoco(prices = [2,3,1], money = 7)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\"])",
        "maximumNumberOfStringPairs(words=[\"ab\",\"ba\",\"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"cd\", \"dc\", \"baab\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"lEOtcedE\")",
        "sortVowels(s = \"lEOtcEd\")",
        "sortVowels(s = \"lEOcved\")",
        "sortVowels(s = \"example\")",
        "sortVowels(s = 'lEOtcedE')",
        "sortVowels(s = \"example\")",
        "sortVowels(s=\"lEOtcede\")",
        "sortVowels(s = \"LEOtcede\")",
        "sortVowels(s = 'eLecTed')",
        "sortVowels(s = 'eLovede')"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts([1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,1,2,3])",
        "sumCounts(nums = [1, 1, 2, 1])",
        "sumCounts(nums = [1,2,2,1,1])",
        "sumCounts(nums = [2, 2, 3, 4, 4, 4])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [1, 1, 2, 4])",
        "minimumCoins(prices = [2,1,1,2,1])",
        "minimumCoins(prices = [2, 3, 4, 1])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n=10, m=3)"
    ],
    "sample_307": [
        "countSeniors(details = [\"John68\", \"Philips65\", \"Anderson98\", \"Alesi76\"])",
        "countSeniors(details = [\"John68\", \"Amanda65\", \"Samantha60\", \"Lisa70\"])",
        "countSeniors(details = [\"John1990\", \"Steve2002\", \"Ann1960\", \"Ron80\"])",
        "countSeniors([\"John68\",\"Steve23\",\"Bob12\",\"George60\"])",
        "countSeniors([\"John Doe 45\", \"John Doe 67\", \"John Doe 61\", \"John Doe 70\"])",
        "countSeniors(details = [\"John68\", \"Steve23\", \"Amy45\", \"James60\", \"Sara60\"])",
        "countSeniors(details = [\"John5678\", \"Jill3456\", \"Jake8905\", \"Laura6789\"])",
        "countSeniors(details = [\"John 22\", \"Peter 40\", \"Jane 50\", \"Alice 62\"])",
        "countSeniors(details = [\"6831245678\", \"9841235678\", \"7541239678\", \"8931245678\"])",
        "countSeniors(details = [\"Paul34\",\"Andrew56\",\"Abdullah67\",\"Bob50\",\"Jason40\",\"Nancy45\",\"Jerry64\"])"
    ],
    "sample_323": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(78)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"10110110110110110110110110110110\")",
        "minimumBeautifulSubstrings(s = \"111110111100000000011111101111000000000\")",
        "minimumBeautifulSubstrings(s = \"111000100010110\")",
        "minimumBeautifulSubstrings(s = \"1110110011001010101010\")",
        "minimumBeautifulSubstrings(s = \"1011001100101110110010\")",
        "minimumBeautifulSubstrings(s = \"11011110001010000101101101110001011101011011110001\")",
        "minimumBeautifulSubstrings(s = \"1101010100110110101010011101001010101010101000101010100101010001000100001100001100000010000000\")",
        "minimumBeautifulSubstrings(s = \"110111001011001011001110011001111001011011010010100110000110100110001110010000011010001100010001\")",
        "minimumBeautifulSubstrings(s = \"1100100110100111100100110010101001011010001110100100011001101010110101100010101010101011110101110101000110010001101100101010100010001000110010110101101101111011011001101110011110011110011101011110110111010101011110100111101110100001100110011110110111010100110011101110011111011100100111011000010111001010111111110000000111111000110110011011110001010010100110100111101001111010010011110110010110000100001000111101011110001011011101100010001110010001011010011111011101001101111110011011110011100010100000110",
        "minimumBeautifulSubstrings(s = \"1111011100100101000100111010100011110011000011101011101101011000100111100101011000101111010000100001010110100101010100000110101100110100000100001000010000001110100010010110000000100011010011111011110111011001111110111001010011010010010111101100011111110010011001001110011110000110000111111000101001000001100011111001011010110001010110101011100101010111000111110100100111110010000110010110100011011110101111000011100000111111011011010001000110010111010111001001000000100101010010011110111011001110010111000"
    ],
    "sample_463": [
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 9, limit = 2)",
        "distributeCandies(n = 9, limit = 2)",
        "distributeCandies(n = 9, limit = 2)",
        "distributeCandies(n=9, limit=3)",
        "distributeCandies(n = 11, limit = 2)"
    ],
    "sample_419": [
        "minOperations(nums = [3,2,4,1], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 4)",
        "minOperations(nums=[1, 2, 3, 4], k=2)",
        "minOperations(nums = [5,3,1,2,6], k = 3)",
        "minOperations(nums = [2, 1, 4, 3, 5], k = 3)",
        "minOperations(nums = [3,2,5,4], k = 2)",
        "minOperations(nums = [3,2,1,0], k = 3)",
        "minOperations(nums = [2,4,6,8,10,2], k = 3)",
        "minOperations(nums = [4, 2, 5, 1, 6, 7], k = 3)",
        "minOperations(nums = [5,6,1,3,7,2,9,8], k = 4)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 2, 1, 3])",
        "sumCounts(nums = [1,1,3,3,3])",
        "sumCounts(nums = [1, 1, 3])",
        "sumCounts(nums = [1,2,3,1,2,3,1,2,3])",
        "sumCounts(nums = [1,2,3,4,5,3])",
        "sumCounts([1,1,2,3,1,1,2,3,1])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2'])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"prev\",\"prev\",\"2\",\"prev\"])",
        "lastVisitedIntegers(words = ['1', 'prev', 'prev', '2', 'prev', '1'])",
        "lastVisitedIntegers(words = ['prev', 'push', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'prev', '4', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '10', 'prev', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '3', 'prev', 'prev', '1', 'prev'])",
        "lastVisitedIntegers(words = ['next', 'next', 'prev', 'prev', '1'])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 6)",
        "minOperations(nums = [1, 2, 3, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [2,2,2,1,1], k = 2)",
        "minOperations(nums = [1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 4)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcdb\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"abcde\")",
        "longestSemiRepetitiveSubstring(s = \"babca\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcd\")",
        "longestSemiRepetitiveSubstring(s = \"bbaaacbd\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabb\")"
    ],
    "sample_443": [
        "sumCounts([1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 1, 2, 2])",
        "sumCounts([1, 1, 1])",
        "sumCounts([1,2,1,3])",
        "sumCounts(nums = [2,1,3])",
        "sumCounts([1, 2, 1, 3, 1, 2])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"1111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111001\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110\", k = 2)",
        "shortestBeautifulSubstring(s = '0110110111', k = 3)",
        "shortestBeautifulSubstring(s = \"1111011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111100111\", k = 2)",
        "shortestBeautifulSubstring(s='110110111011', k=3)",
        "shortestBeautifulSubstring(s = \"1101101110111110101101111111010\", k = 3)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"1010101\")",
        "minimumBeautifulSubstrings(s = \"110101\")",
        "minimumBeautifulSubstrings(s = \"110101\")",
        "minimumBeautifulSubstrings(s = \"1101101101\")"
    ],
    "sample_341": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 4, z = 1)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 2, y = 5, z = 1)",
        "longestString(x = 4, y = 3, z = 1)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 1, y = 4, z = 3)"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid=[[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 0, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [-1, 0, 1], [0, -1, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[0,1,0], [1,0,1], [0,1,0]])",
        "findChampion(grid = [[1,0,1],[1,0,0],[0,1,0]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"b\", k = 1)",
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"ab\", k = 1)",
        "beautifulSubstrings(s = \"ba\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaiooiuuaeiou\", k = 5)",
        "beautifulSubstrings(s = \"na\", k = 2)",
        "beautifulSubstrings(s = \"aeeiba\", k = 2)",
        "beautifulSubstrings(s = \"xvk\", k = 2)"
    ],
    "sample_304": [
        "countSeniors(details = [\"John Doe, M, 32\", \"William Smith, M, 67\", \"Jane Doe, F, 55\"])",
        "countSeniors(details = ['AB1234567890', 'CD5678901234', 'EF1472583690', 'GH3692581470', 'IJ7891234560'])",
        "countSeniors([\"John Doe, 22 years, Male\", \"John Doe, 62 years, Male\", \"John Doe, 45 years, Male\"])",
        "countSeniors(details = ['T1234567890123456', 'F8888888888888888', 'M9001011234567890'])",
        "countSeniors(details = ['AB1234567890', 'CD4523869701', 'EF7861234590'])",
        "countSeniors(details = [\"John Doe\", \"John 56\", \"Alice 60\", \"Bob 80\", \"Alice 20\"])",
        "countSeniors(details = [\"John Doe\", \"1987-08-12\", \"Male\", \"1995-02-15\", \"Senior\"])",
        "countSeniors(details = [\"Alex 1995\", \"John 1987\", \"Anna 2004\", \"Emma 1991\", \"Tom 1967\", \"Jerry 1960\"])",
        "countSeniors(details = ['John Doe Male 34','Alice Miller Female 42','Robert Smith Male 67','Lily Allen Female 7','Samantha Brown Female 63'])",
        "countSeniors(details = ['567895432012', '875490123651', '745612309875', '654901238754'])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 0])",
        "maximumTripletValue(nums = [2, 3, 1, 4])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [3,6,0,30,9,5])",
        "maximumTripletValue([3, 6, 5, 2, 7])",
        "maximumTripletValue(nums=[2,5,1,8,4])",
        "maximumTripletValue([1, 4, 2, 1, 5, 0])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"1010\")",
        "minimumBeautifulSubstrings(s = \"10101010\")",
        "minimumBeautifulSubstrings(s = \"101101111000101010100111001\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays([1, 2, 3, 0, 4, 5])",
        "maxSubarrays(nums = [1, 0, 3, 0, 5])",
        "maxSubarrays(nums = [0, 2, 4, 1, 3])",
        "maxSubarrays(nums = [12, 1, 12, 3, 10, 6, 8])",
        "maxSubarrays(nums = [5, 15, 7, 1, 20, 10])",
        "maxSubarrays(nums = [2, 4, 1, 1, 1, 4, 3, 2, 2, 4])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3, 4], b = [5, 6, 7, 8])",
        "minOperations(a = [5,4,3,2,1], b = [1,2,3,4,5])",
        "minOperations(a = [5, 2, 1], b = [4, 2, 1])",
        "minOperations(a = [3,2,5], b = [1,4,7])",
        "minOperations(a = [5, 2, 1], b = [4, 3, 2])",
        "minOperations(a = [5, 4, 3, 2, 1], b = [6, 6, 6, 6, 6])",
        "minOperations(a = [2, 2], b = [2, 2])",
        "minOperations(a = [1,2,3,4,5,6], b = [1,2,3,4,5,7])",
        "minOperations(a = [5, 1, 2, 3, 4], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [5, 2, 1, 4, 3], b = [5, 2, 1, 3, 3])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\"])",
        "minimizeConcatenatedLength([\"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"gh\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"jkl\"])",
        "minimizeConcatenatedLength(words = [\"ba\",\"nana\"])",
        "minimizeConcatenatedLength([\"abc\", \"de\", \"fgh\"])",
        "minimizeConcatenatedLength(words = ['ab', 'bc'])",
        "minimizeConcatenatedLength(words = [\"apple\", \"nana\", \"banana\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"HymlP\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"Hyml\")",
        "sortVowels(s = \"MyPh\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s=\"MyPh\")"
    ],
    "sample_446": [
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 1, 2, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts([1,2,3])",
        "sumCounts([1,2,1,3])",
        "sumCounts([1,2,1,3,3])"
    ],
    "sample_256": [
        "minimumSum(nums = [3,2,1,5,4,6])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [5,3,2,4,1])",
        "minimumSum(nums = [3, 1, 2, 4, 5])",
        "minimumSum(nums = [2, 1, 5, 4, 3])",
        "minimumSum(nums = [3,1,5,6,4])",
        "minimumSum(nums = [5,2,6,1,5])",
        "minimumSum(nums = [3,1,2,5,1,2,4])",
        "minimumSum(nums = [4, 4, 4, 3, 2, 1])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0,1,0],[1,0,0],[0,0,1]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1,1,0], [0,1,0], [0,0,1]])",
        "findChampion(grid = [[1,0,1], [0,1,0], [1,0,1]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 1], [1, 1, 0]])"
    ],
    "sample_372": [
        "sortVowels(s = \"lEOcTeD\")",
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = 'eLoCated')",
        "sortVowels(s = \"lEetcOde\")",
        "sortVowels(s = \"eLection\")",
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"eLotcEd\")",
        "sortVowels(s = \"EOtlced\")",
        "sortVowels('lEotcedE')",
        "sortVowels(s = 'LOtcEd')"
    ],
    "sample_292": [
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"001101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"00101\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [2,1,3,4,5])",
        "minimumRightShifts(nums = [2, 3, 1, 4, 0])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [5,4,3,2,1])",
        "minimumRightShifts(nums = [3,2,1,4,0])"
    ],
    "sample_425": [
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations([1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations([2,2,2,3,3])",
        "minOperations([1,1,1,1,2,2,2,3,3,3])",
        "minOperations(nums = [1,1,1,1,1,2,2,2,2,2])",
        "minOperations(nums = [1, 1, 1, 1, 2, 2, 2, 2])",
        "minOperations(nums = [3,1,3,2,4,2,1,1,2,2,3,3,4])",
        "minOperations(nums=[3,1,3,2,4,2,1,1,2,2,2,3,3,3])"
    ],
    "sample_367": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"MyPhl\")",
        "sortVowels(s = \"HYmpL\")",
        "sortVowels(s = \"MyPhp\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"HlmpY\")",
        "sortVowels(s = \"mPhlyY\")",
        "sortVowels(s = \"HyLmp\")",
        "sortVowels(s = \"mPhlY\")",
        "sortVowels(s='MpHyL')"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid=[[1, 1, 1], [1, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[0,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1,0,1],[1,0,1],[1,1,0]])",
        "findChampion(grid = [[1, 0, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid=[[1, 1, 0], [1, 1, 1], [0, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [2, 2, 2], nums2 = [1, 1, 1])",
        "minSum(nums1 = [0], nums2 = [2])",
        "minSum(nums1 = [0], nums2 = [])",
        "minSum(nums1 = [2, 2, 2], nums2 = [-1, -2, -3])",
        "minSum(nums1 = [3,2,2], nums2 = [1,1,1])",
        "minSum(nums1 = [2, 2, 2, 2, 0], nums2 = [2, 2, 2, 2, 2])",
        "minSum(nums1=[5, 2, 1], nums2=[1, 3, 1])",
        "minSum(nums1=[4,5,2], nums2=[0])",
        "minSum(nums1 = [2, 3, 4, 1, 0], nums2 = [5, 1, 3, 2, 2])",
        "minSum(nums1 = [0, 3, 4, 2, 1], nums2 = [10, 10, 3, 4, 10])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [3,2,1,2,3], k = 3)",
        "minOperations(nums = [1,2,3,5,6], k = 4)",
        "minOperations(nums = [5,2,1,6,3,7,8], k = 3)",
        "minOperations(nums=[1, 2, 3, 5, 6, 7], k=3)",
        "minOperations(nums = [1, 4, 2, 3, 5], k = 3)",
        "minOperations(nums = [1, 3, 5, 2, 4, 6], k = 4)",
        "minOperations(nums=[2,4,6,1], k=2)",
        "minOperations(nums = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11], k = 4)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 2], moveFrom = [2, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 2, 3], moveFrom = [2, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,2], moveFrom = [2,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [2,3], moveTo = [3,2])",
        "relocateMarbles(nums = [1,1,2,3,3], moveFrom = [1,3], moveTo = [1,2])",
        "relocateMarbles(nums=[1, 2, 2], moveFrom=[2, 1], moveTo=[2, 1])"
    ],
    "sample_402": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 1, k = 2)",
        "maxSum(nums = [4, 2, 1, 7, 8, 4, 4, 4], m = 2, k = 3)",
        "maxSum(nums = [2,3,4,5,6], m = 2, k = 2)",
        "maxSum(nums = [1, 4, 3, 2, 3, 2], m = 2, k = 3)",
        "maxSum(nums = [5, 0, 0, 0, 3, 2, 1], m = 2, k = 2)",
        "maxSum(nums=[1,1,2,1,3,3,2,2,2,3,3,3,1,1,1,1,1], m=3, k=6)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"az\", s2 = \"baa\")",
        "canMakeSubsequence(s1 = \"ba\", s2 = \"nana\")",
        "canMakeSubsequence(s1 = \"azbc\", s2 = \"adcb\")",
        "canMakeSubsequence(s1 = \"b\", s2 = \"ba\")",
        "canMakeSubsequence(s1 = \"azx\", s2 = \"axz\")",
        "canMakeSubsequence(s1 = \"bzb\", s2 = \"azb\")",
        "canMakeSubsequence(s1 = \"ban\", s2 = \"aban\")",
        "canMakeSubsequence(s1 = \"banan\", s2 = \"zanana\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"anan\")",
        "canMakeSubsequence(s1 = \"bzj\", s2 = \"azh\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 1, 2])",
        "minSum(nums1 = [1, 2, 0], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1,7,1], nums2 = [0,0,0])",
        "minSum(nums1 = [1, 2, 0], nums2 = [3, 4])",
        "minSum(nums1 = [1, 0, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 0, 1, 1, 1], nums2 = [0, 1, 1, 1, 1])",
        "minSum(nums1 = [3, 5, 1], nums2 = [2, 1, 0])",
        "minSum(nums1 = [2,1,2,1], nums2 = [1,1,1,1])",
        "minSum(nums1=[2,1,2,2,0], nums2=[0,2,2,1,2])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = ['prev', '2', 'prev', 'prev', '1'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '1', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '3', 'prev', '2', 'prev', '1'])",
        "lastVisitedIntegers(words = ['prev', '3', 'prev', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', '5', 'prev', '3', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'prev', '1', 'prev', '2', 'prev', 'prev'])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 0])",
        "isGood(nums = [2, 0, 1])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [0, 2, 3, 1, 4, 5])"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [2,2,2,3,3])",
        "minOperations([2,2,3,3,2,2])",
        "minOperations([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "minOperations([2,2,3,3,2,4,4,4])",
        "minOperations(nums = [2,2,3,3,2,4,4])",
        "minOperations(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minOperations([1,1,2,2,2,2])",
        "minOperations([1,1,2,2,2,2,3,3,3,4])",
        "minOperations([3,3,3,3,3,3])"
    ],
    "sample_451": [
        "minChanges(s = \"0110\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"01100\")",
        "minChanges(\"0110\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"110011\")",
        "minChanges(s = \"10110\")",
        "minChanges(s = \"aabbccddee\")",
        "minChanges(s = \"bnb\")",
        "minChanges(\"abc\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 10, limit = 4)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [5,6,7])",
        "minSum(nums1 = [1,2,3,0,0], nums2 = [4,5,6,0,0])",
        "minSum(nums1 = [1,2,3], nums2 = [5,6,7])",
        "minSum(nums1 = [1, 1, 4], nums2 = [0, 2, 3])",
        "minSum(nums1 = [3,3,2,2], nums2 = [1,1,4,4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [3, 4, 1, 2])",
        "minSum(nums1 = [3,1,0,0], nums2 = [1,2,3,4])",
        "minSum(nums1 = [5, 1, 1, 0], nums2 = [7, 10])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts([4,3,2,1])",
        "minimumRightShifts([2, 1, 3])"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums=[1, 2, 3, 4, 5], t=7)",
        "countPairs(nums=[1, 2, 3, 4, 5, 6], t=10)",
        "countPairs(nums=[1, 5, 3, 2, 4], t=8)",
        "countPairs(nums = [2,3,4,1,5], t = 7)",
        "countPairs(nums=[2,4,5,6,7,10], t=12)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"push\", \"3\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"push\", \"3\", \"push\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = ['push', '1', 'push', '2', 'pop', 'push', '3', 'pop'])",
        "lastVisitedIntegers(words = ['push', '1', 'push', '2', 'pop', 'peek'])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"push\", \"3\", \"push\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"2\", \"push\", \"p\"])",
        "lastVisitedIntegers(words = ['push', '1', 'push', '2', 'pop', 'push', '3', 'push', 'pop', 'pop', 'push', 'pop'])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"push\", \"pop\", \"peek\"])",
        "lastVisitedIntegers(words = ['push', '4', 'push', '2', 'pop', 'push', '1', 'pop'])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
        "canMakeSubsequence(str1 = \"azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"azzzzzzz\", str2 = \"zz\")",
        "canMakeSubsequence(str1 = \"azzzzz\", str2 = \"zzz\")",
        "canMakeSubsequence(str1 = \"azcbobob\", str2 = \"bob\")",
        "canMakeSubsequence(str1 = \"zzzzzaz\", str2 = \"aaz\")",
        "canMakeSubsequence(str1 = \"xyzab\", str2 = \"xyza\")",
        "canMakeSubsequence(str1 = \"aaybc\", str2 = \"ayz\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [5, 6, 7, 0])",
        "minSum(nums1 = [1,2,3], nums2 = [5,6,7])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [2, 1, 2], nums2 = [1, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [5, 0, 7])",
        "minSum(nums1 = [3,3,1,0,2,0], nums2 = [0,3,0,2,2,0])",
        "minSum(nums1 = [4,3,2,5,0,0], nums2 = [1,2,3,4,0,0])",
        "minSum(nums1 = [3, 5, 2, 0, 0, 0], nums2 = [1, 2, 4])",
        "minSum(nums1 = [4, 1, 0], nums2 = [2, 3, 5])",
        "minSum(nums1 = [3,5,2,3,1], nums2 = [1,3,5,3,1])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0,0],[0,1],[1,0],[1,1],[2,0],[2,1],[3,0],[3,1],[4,0],[4,1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 0], [2, 0], [3, 0], [0, 1], [1, 1], [2, 1], [3, 1], [0, 2], [1, 2]], k = 2)",
        "countPairs(coordinates = [[2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]], k = 2)",
        "countPairs(coordinates = [[2,1],[2,2],[2,3],[2,4],[3,1],[3,2],[3,3],[3,4],[4,1],[4,2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [2, 1], [1, 1], [2, 0]], k = 1)",
        "countPairs(coordinates = [[2, 0], [2, 1], [2, 2], [1, 1], [0, 0]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [0, 1], [0, 2], [1, 0], [2, 0], [3, 0], [2, 1]], k = 2)",
        "countPairs(coordinates = [[0, 1], [0, 2], [1, 2], [2, 3], [1, 3], [3, 4], [2, 4], [4, 5], [0, 5], [0, 6]], k = 2)",
        "countPairs(coordinates = [[3, 1], [1, 2], [2, 2], [1, 3], [4, 2], [2, 1], [5, 4], [3, 3], [1, 1], [4, 4]], k = 2)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ab\", \"na\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [3, -2, 4, -5, 6])",
        "maxStrength([3, -7, 2, 5, -10])",
        "maxStrength([2, -3, 5, -4, 6])",
        "maxStrength(nums = [10, -2, -3, 8, 7])",
        "maxStrength(nums = [2, -4, 6, 8, -10])",
        "maxStrength(nums = [2, 1, 3, -2, -4])",
        "maxStrength([1, -4, 2, -3, 5])",
        "maxStrength(nums = [2, -3, 4, -1, 6, -9])",
        "maxStrength(nums = [5, -2, 3, -4, 10, -2])",
        "maxStrength(nums = [3, -2, 4, 5, -3, 2, -3, -4, 1])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [2, 1, 1, 3])",
        "minimumCoins(prices = [3, 2, 2, 3, 1])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1,2,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,1,1,1])",
        "minLengthAfterRemovals(nums = [3,3,3,1,1,2,2,2])",
        "minLengthAfterRemovals(nums = [1,2,3,3,2,2,1,1,2,3,3,2,2,1])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,2,2,2,2,3,3,3,4,4,4,5,5,5])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 2, 1], money = 4)",
        "buyChoco(prices = [5, 3, 2], money = 10)",
        "buyChoco(prices = [5, 3, 2], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4], money = 6)",
        "buyChoco(prices = [1, 2, 2, 1, 3], money = 3)",
        "buyChoco(prices = [50, 20, 10], money = 50)",
        "buyChoco(prices = [1,2,3,4], money = 8)",
        "buyChoco(prices=[50, 100, 150], money=200)",
        "buyChoco(prices = [2, 3, 1, 5, 4], money = 15)",
        "buyChoco(prices = [10, 15, 20, 5], money = 30)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"2\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3])",
        "sumCounts([1,2,3])",
        "sumCounts([1, 2, 2, 3, 3])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [4, 5, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9, 10], moveFrom = [6, 8], moveTo = [7, 10])",
        "relocateMarbles(nums = [5, 7, 6, 9, 8], moveFrom = [7, 5], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 7, 6, 9, 8], moveFrom = [7, 6], moveTo = [7, 5])",
        "relocateMarbles(nums = [4, 6, 8, 9], moveFrom = [6, 9], moveTo = [5, 8])",
        "relocateMarbles(nums = [5, 3, 9, 6, 8, 7, 2, 1, 4], moveFrom = [3, 7, 2], moveTo = [6, 8, 9])",
        "relocateMarbles(nums = [3, 3, 3, 3, 5, 6, 7, 8], moveFrom = [3, 7], moveTo = [5, 9])",
        "relocateMarbles(nums = [1, 3, 6, 8, 9], moveFrom = [6, 1], moveTo = [5, 9])",
        "relocateMarbles(nums = [4, 8, 5, 6, 7, 9], moveFrom = [4, 7], moveTo = [2, 1])",
        "relocateMarbles(nums = [5, 6, 8, 9, 9], moveFrom = [6, 8, 5], moveTo = [6, 8, 9])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ad\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adh\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adf\")",
        "canMakeSubsequence(str1 = \"azc\", str2 = \"ahz\")",
        "canMakeSubsequence(str1 = \"azc\", str2 = \"ahbgc\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"yb\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"yb\")",
        "canMakeSubsequence(str1 = \"apple\", str2 = \"appzle\")",
        "canMakeSubsequence(str1 = \"apple\", str2 = \"applz\")",
        "canMakeSubsequence(str1 = \"bfj\", str2 = \"ahbgdc\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"orange\"], x = \"ap\")",
        "findWordsContaining(words=[\"apple\", \"berry\", \"cherry\"], x=\"ry\")",
        "findWordsContaining(words = [\"apple\", \"anaconda\", \"banana\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"strawberry\"], x = \"ra\")",
        "findWordsContaining(words=[\"apple\", \"pineapple\", \"banana\", \"applejuice\", \"grape\"], x=\"apple\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"peach\", \"pineapple\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"tree\", \"berry\", \"banana\"], x = \"ba\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[2, 1], [1, 2]])",
        "matrixSum([[1, 2, 3], [0, 5, 4]])",
        "matrixSum(nums = [[1, 2], [0, 0]])",
        "matrixSum(nums = [[2, 3, 4], [1, 2, 5]])",
        "matrixSum(nums = [[1, 3, 2], [4, 0, 5], [7, 6, 9]])",
        "matrixSum(nums=[[2, 1, 4], [1, 2, 3], [5, 4, 2]])",
        "matrixSum([[2, 0, 1], [0, 3, 1], [4, 0, 1]])",
        "matrixSum([[2, 5, 1], [1, 0, 1], [2, 3, 0]])",
        "matrixSum(nums = [[2, 4, 1, 1], [2, 2, 2, 2], [2, 1, 2, 2]])",
        "matrixSum(nums = [[10,5,6],[7,4,12],[1,2,11]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [2, 1, 7], money = 10)",
        "buyChoco(a = [2, 1, 7], money = 20)",
        "buyChoco(a = [1,2,3], money = 5)",
        "buyChoco(a = [2, 1, 7], money = 20)",
        "buyChoco(a=[1, 2, 3], money=5)",
        "buyChoco(a = [1,2,3,4], money = 5)",
        "buyChoco(a = [2, 2, 3, 4], money = 5)",
        "buyChoco(a = [5, 1, 20, 10], money = 30)",
        "buyChoco(a = [30, 20, 50], money = 100)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums=[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3",
        "minGroupsForValidAssignment(nums = [2,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2,3,2,1])",
        "minGroupsForValidAssignment(nums = [2, 1, 1, 1, 1, 2])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts([3,4,5,1,2])",
        "minimumRightShifts(nums = [2,3,1])",
        "minimumRightShifts([4, 5, 1, 2, 3])",
        "minimumRightShifts(nums = [4,5,6,7,1,2,3])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 4, 6])",
        "maxStrength(nums = [2, 4, 6])",
        "maxStrength(nums = [2, 3, 4])",
        "maxStrength(nums = [2, 3, 4])",
        "maxStrength(nums = [2, 4, 5])",
        "maxStrength(nums = [2, 4, 5])",
        "maxStrength(nums = [2, 2, 3, 1])",
        "maxStrength(nums = [4, 2, 3, 1])",
        "maxStrength(nums = [2, 3, 1])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n=10, limit=2)",
        "distributeCandies(n=10, limit=2)",
        "distributeCandies(n=10, limit=2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 20, limit = 3)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,2,2,2,3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,1,0,0])",
        "minLengthAfterRemovals(nums = [3,3,3,4,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3, 4, 4, 4])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"ban\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"cherry\"], x = \"p\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"banana\", \"grape\"], x = \"ap\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"cherry\", \"date\"], x=\"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"java\"], x = \"o\")",
        "findWordsContaining(words=[\"apple\", \"orange\", \"banana\"], x=\"a\")",
        "findWordsContaining(words = [\"a\", \"ab\", \"abc\"], x = \"b\")",
        "findWordsContaining(words=[\"hello\", \"world\", \"hi\", \"earth\"], x=\"or\")",
        "findWordsContaining(words = [\"car\", \"card\", \"word\"], x = \"car\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid=[[0, 1], [1, 0]])",
        "findChampion(grid = [[1,0,0], [0,0,1], [0,1,0]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 1], [1, 0, 1]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [2, 3, 4, 5])",
        "maxSubarrays(nums = [2, 3, 4, 5, 6])",
        "maxSubarrays([1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [2, 1, 2, 1, 2, 1])",
        "maxSubarrays(nums = [1, 2, 3, 0, 1, 2, 3, 0, 1, 2])",
        "maxSubarrays(nums = [5,2,6,1])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"awesome\", k = 2)",
        "beautifulSubstrings(s = \"awesome\", k = 2)",
        "beautifulSubstrings(s = \"awesome\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"aea\", k = 2)",
        "beautifulSubstrings(s = \"awaglknagawunagwkwagl\", k = 4)",
        "beautifulSubstrings(s = \"abciiidef\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beauty\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [2,1,3,1,2,1])",
        "minimumSeconds(nums = [2,2,2,3,3,3])",
        "minimumSeconds(nums = [2,1,3,2,5,3,1,2,3,4,5])",
        "minimumSeconds(nums = [5,6,1,2,3,4])",
        "minimumSeconds(nums = [1,5,6,2,3,2,1])",
        "minimumSeconds(nums = [3,1,4,1,5,9,2,6,5,3,5,8,9,7,9,3,2,3,8,4,1])",
        "minimumSeconds(nums = [1,5,9,10,20])",
        "minimumSeconds(nums = [5,1,3,3,4,2,4,2,1,5])",
        "minimumSeconds(nums = [1, 3, 4, 2, 2, 2, 1, 4, 2, 3, 4])",
        "minimumSeconds(nums = [2,3,3,4,4,4,4,5,6,6,7])"
    ],
    "sample_327": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [3, 5, -7, 8, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 7, 8, 15], target = 12)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [2,3,5,10], target = 12)",
        "lengthOfLongestSubsequence(nums = [4, 2, 3, 1, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 2, 3], target = 3)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[2, 1], [5, 4]])",
        "matrixSum(nums = [[3, 2, 1], [4, 7, 6], [5, 9, 8]])",
        "matrixSum(nums = [[5,3,1,2,4]])",
        "matrixSum(nums = [[3,5,1],[0,4,7],[9,2,8]])",
        "matrixSum(nums = [[3,5,1,4],[2,1,3,4],[4,2,1,2]])"
    ],
    "sample_326": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n=192)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 1, 0], [0, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1,1,0],[0,1,0],[0,1,1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1,0,0], [0,1,0], [0,0,1]])",
        "findChampion([[1, 1, 1], [0, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[0,1,1,1],[1,0,1,1],[0,0,0,1],[0,0,0,0]])",
        "findChampion(grid = [[0,1,1,0,1],[0,0,1,0,1],[0,0,0,1,1],[0,0,0,0,1],[0,0,0,0,0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3, 1, 2, 6, 4, 5])",
        "minimumSum(nums = [3, 6, 2, 8, 7, 5])",
        "minimumSum(nums = [4, 3, 2, 1])",
        "minimumSum(nums = [1,5,10,20,30])",
        "minimumSum(nums = [4,3,1,5,6])",
        "minimumSum([1, 5, 4, 19, 12, 10])",
        "minimumSum(nums = [1,5,3,20,4])"
    ],
    "sample_450": [
        "minChanges(s = \"011001\")",
        "minChanges(s = \"10101\")",
        "minChanges(\"01100\")",
        "minChanges(s = \"abbc\")",
        "minChanges(s = \"xxooxx\")",
        "minChanges(\"10101\")",
        "minChanges(s = \"001101\")",
        "minChanges(s = \"aabbbcc\")",
        "minChanges(s = \"000110\")",
        "minChanges(s = \"baaaaabbbb\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"10101\", s2 = \"01010\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"011\", x = 2)",
        "minOperations(s1 = \"010\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"0110\", x = 3)",
        "minOperations(s1 = \"10101\", s2 = \"01010\", x = 5)",
        "minOperations(s1 = \"1101\", s2 = \"0010\", x = 3)",
        "minOperations(s1 = \"1100\", s2 = \"1110\", x = 2)",
        "minOperations(s1 = \"001\", s2 = \"001\", x = 5)",
        "minOperations(s1 = \"0001\", s2 = \"0001\", x = 3)",
        "minOperations(s1 = \"00110\", s2 = \"01100\", x = 1)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 2, y = 2, z = 4)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 5, y = 5, z = 2)",
        "longestString(x = 3, y = 2, z = 3)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 5, y = 4, z = 3)",
        "longestString(x = 5, y = 4, z = 3)",
        "longestString(x = 5, y = 4, z = 1)",
        "longestString(x = 5, y = 2, z = 5)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [2, 1, 4, 7])",
        "maxSubarrays([1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1,2,3,4,5,0])",
        "maxSubarrays(nums = [12, 17, 15, 13, 19, 15])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21])",
        "maxSubarrays(nums = [15, 10, 20, 4, 8, 6])",
        "maxSubarrays([12, 23, 5, 6, 17, 18])",
        "maxSubarrays(nums = [23, 15, 6, 11, 43, 21, 7])",
        "maxSubarrays(nums = [12, 10, 21, 1, 21, 21, 23, 10, 23, 20])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John Doe, M, 22\", \"William Smith, M, 65\", \"Sarah Johnson, F, 50\", \"Jessica Brown, F, 63\"])",
        "countSeniors(details = [\"John Doe, 40\", \"Jane Doe, 62\", \"John Smith, 65\", \"Jane Smith, 70\"])",
        "countSeniors([\"John Doe, M, 45\", \"Michael Jordan, M, 60\", \"LeBron James, M, 35\", \"Anna Smith, F, 62\"])",
        "countSeniors(details = ['John Doe 45', 'Jane Doe 65', 'Jim Doe 70'])",
        "countSeniors(details = [\"John Doe, M, 40\", \"Jacob Smith, M, 55\", \"Jingleheimer, M, 63\", \"Schmidt, M, 24\"])",
        "countSeniors([\"John Doe, Male, 45\", \"George Stevens, Male, 63\", \"Jennifer Smith, Female, 55\", \"Michael Jackson, Male, 69\"])",
        "countSeniors([\"John Doe, M, 40\", \"Jacob Smith, M, 38\",\"Alex Johnson, M, 65\",\"Emily Davis, F, 55\",\"Michael Miller, M, 70\",\"Jennifer Wilson, F, 62\"])",
        "countSeniors(details = [\"John,19900101,M\", \"Alice,19800523,F\", \"Bob,19650704,M\", \"Sarah,19951201,F\", \"Mike,19600808,M\"])",
        "countSeniors([\"John Doe, 1981-01-26T23:00:00\", \"Will Smith, 1955-11-18T23:00:00\", \"Sarah Johnson, 1997-07-14T23:00:00\"])",
        "countSeniors(details = [\"John,m,52\", \"Alex,m,45\", \"Sarah,f,61\", \"Bob,m,65\", \"Alice,f,68\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [2, 4, 8])",
        "maxSubarrays([1, 0, 2, 3, 0, 4, 5])",
        "maxSubarrays(nums = [1, 0, 2, 4, 3])",
        "maxSubarrays([1, 2, 3, 4, 5, 0, 1, 2, 3])",
        "maxSubarrays(nums = [1, 3, 0, 8, 0, 10])",
        "maxSubarrays(nums = [1, 3, 0, 8, 5, 6, 0, 7, 2, 4])",
        "maxSubarrays([14, 70, 53, 84, 58, 42, 73, 88, 42, 10])",
        "maxSubarrays([12, 17, 14, 24, 25, 23, 18])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7, 5], moveTo = [6, 5])",
        "relocateMarbles(nums = [6, 7, 8, 9], moveFrom = [7, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [6, 8, 9], moveFrom = [6, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 5], moveTo = [7, 7])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom=[1, 2, 3], moveTo=[5, 6, 8])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8], moveFrom=[1, 2], moveTo=[8, 9])",
        "relocateMarbles(nums = [5, 3, 9, 6, 8], moveFrom = [3, 6], moveTo = [6, 9])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom=[1, 4, 7], moveTo=[5, 6, 8])",
        "relocateMarbles(nums = [3, 2, 5, 6, 7, 8, 9], moveFrom = [2, 7], moveTo = [4, 1])",
        "relocateMarbles(nums=[6,8,5,9], moveFrom=[6,5], moveTo=[5,6])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aab\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"bzx\", s2 = \"bzx\", s3 = \"bzx\")",
        "findMinimumOperations(s1 = \"aabd\", s2 = \"ad\", s3 = \"ad\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"abb\", s3 = \"bbb\")",
        "findMinimumOperations(s1 = \"rba\", s2 = \"bba\", s3 = \"bba\")",
        "findMinimumOperations(s1 = \"ybby\", s2 = \"zbby\", s3 = \"zbby\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [0,0,0,0])",
        "minLengthAfterRemovals(nums = [4,3,1,1,3,3,2])",
        "minLengthAfterRemovals(nums = [3,3,3,3,3,3,3,3,3])",
        "minLengthAfterRemovals(nums = [3,1,2,3,3,3,3])",
        "minLengthAfterRemovals(nums = [3,-2,1,-4,-3,3,-4])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [0, 3, 5], [1, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 6], [0, 1, 5], [1, 3, 3], [2, 4, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 3, 5], [2, 3, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 1, 5], [2, 4, 5], [3, 4, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,1],[3,4,5],[2,4,6]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [0, 1, 2], [2, 4, 6], [1, 2, 3], [1, 3, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1,6,5], [2,4,3], [3,7,2], [5,8,1], [6,9,2]])",
        "maximizeTheProfit(n = 7, offers = [[1, 4, 5], [2, 3, 2], [1, 6, 6], [4, 6, 3], [4, 5, 4], [2, 4, 3]])",
        "maximizeTheProfit(n = 8, offers = [[1, 2, 3], [1, 2, 5], [4, 7, 1], [3, 6, 1], [2, 4, 4], [3, 5, 4]])",
        "maximizeTheProfit(n = 10, offers = [[2,5,6],[1,9,1],[5,7,8],[1,8,7],[0,4,5],[5,8,4],[3,4,3],[4,6,6]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [2,3,3,2,1], m = 4)",
        "canSplitArray(nums = [2,3,3,2,3], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 2)",
        "canSplitArray(nums = [1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [5,1,5,1], m = 6)",
        "canSplitArray(nums = [1,1,1,1,1,1,1], m = 4)",
        "canSplitArray(nums = [1, 4, 2, 3, 4], m = 10)",
        "canSplitArray(nums = [10,20,30,10,20,30], m = 15)",
        "canSplitArray(nums = [10,20,10,10,10,10], m = 30)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [2,2,3,3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1,1,2,3], k = 3)",
        "checkArray(nums = [1, 5, 3, 2, 4], k = 3)",
        "checkArray(nums = [5, 3, 1, 2, 6], k = 3)",
        "checkArray(nums = [3, 2, 1, 1, 0, 1], k = 2)",
        "checkArray(nums = [4, 3, 2, 2, 1, 1], k = 2)",
        "checkArray(nums = [1, 3, 4, 2, 4, 3], k = 3)",
        "checkArray(nums = [1, 5, 3, 2, 5, 6, 7], k = 3)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 5, 3, 7], k = 2)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple,banana\", \"cherry,date\"], separator = \",\")",
        "splitWordsBySeparator(words=[\"apple\", \"orange-banana-cherry\"], separator=\"-\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"apple\", \"orange-banana-kiwi\", \"grape\"], separator = \"-\")",
        "splitWordsBySeparator(words=[\"hello,world\", \"how,are,you\"], separator=\",\")",
        "splitWordsBySeparator(words = [\"I love programming\", \"python is fun\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana//apple\"], separator = \"//\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\"], separator = \"o\")",
        "splitWordsBySeparator(words=[\"one\", \"two three\", \"four,five\"], separator=\" \")"
    ],
    "sample_226": [
        "countWays([1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2,3])",
        "countWays([1,2,3,4,5])",
        "countWays([2,1,3])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1, 1, 2, 2])",
        "countWays(nums = [1, 2, 3, 5, 6, 7])",
        "countWays(nums = [1,1,2,3,5])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,2,2,3,3,4])",
        "minimumIndex(nums = [3,3,3,3,2,2,2,2,1,1,1,1])",
        "minimumIndex(nums = [1,2,2,3,3,4,4,4,4,5,5,5,5,5])",
        "minimumIndex(nums = [3,1,3,1,3,2,3])",
        "minimumIndex(nums = [3,4,5,3,1,2,2,2])",
        "minimumIndex(nums = [2,4,3,3,3,2,2,1,1,1])",
        "minimumIndex(nums = [1,2,2,2,3,3,3,2,2,2,1])",
        "minimumIndex(nums = [3,4,5,3,2,2,2,3,3,4,4,4,5])",
        "minimumIndex([1, 2, 2, 3, 2, 2, 2, 3, 1, 1])",
        "minimumIndex(nums = [3,1,3,4,2,1,4,2,1,4])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,5],[2,4],[3,7]])",
        "numberOfPoints(nums = [[1,2],[3,5],[4,7]])",
        "numberOfPoints(nums = [[1,4],[2,3],[3,6]])",
        "numberOfPoints(nums = [[2, 5], [4, 7], [6, 8]])",
        "numberOfPoints([[2, 4], [3, 6], [5, 7]])",
        "numberOfPoints(nums = [[10,20],[20,30],[40,50],[50,60],[70,80],[80,90],[100,101]])",
        "numberOfPoints(nums = [[20,25], [30,40], [5,15]])",
        "numberOfPoints([[3,5],[1,3],[2,4],[3,8]])",
        "numberOfPoints(nums = [[1,2],[2,4],[4,6],[7,8],[7,9],[10,10],[1,3]])",
        "numberOfPoints(nums = [[2, 5], [4, 6], [2, 7], [7, 8], [1, 4], [3, 8], [2, 6]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [4,2,3,1,5])",
        "semiOrderedPermutation(nums = [4,2,3,1,5])",
        "semiOrderedPermutation(nums = [2, 4, 1, 3, 5])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1])",
        "semiOrderedPermutation(nums = [4,3,2,1,6,5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2,4,1,5,3])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n=3, target=2)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n=2, target=4)",
        "minimumPossibleSum(n=10, target=12)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 3, 2, 2])",
        "minimumIndex([1, 2, 3, 2, 2])",
        "minimumIndex(nums = [2,1,1,1,1,2,2])",
        "minimumIndex(nums = [2,1,1,3,1,2,1])",
        "minimumIndex(nums = [0, 1, 0])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [2, 1, 1, 3, 1, 2, 2])",
        "minimumIndex(nums = [1,1,1,2,2,2,2,3,3])",
        "minimumIndex(nums = [0,1,2,3,4,5,6,2,2,2,2])",
        "minimumIndex([2, 3, 2, 3, 2, 3, 2, 2])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n=3, k=5)",
        "minimumSum(n=3, k=4)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1,3],[2,5],[3,7]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints([[1,3],[2,4],[3,5]])",
        "numberOfPoints(nums = [[2, 4], [1, 1], [3, 3]])",
        "numberOfPoints(nums = [[1, 3], [3, 5], [4, 6]])",
        "numberOfPoints([[1, 4], [2, 2], [3, 5]])",
        "numberOfPoints([[1,3],[2,5],[4,6]])",
        "numberOfPoints(nums = [[2, 5], [3, 7], [4, 7]])",
        "numberOfPoints([[3, 4], [1, 2], [5, 5]])",
        "numberOfPoints([[3, 7], [1, 2], [5, 5]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 1)",
        "maximumJumps(nums=[1, 2, 3, 4, 5], target=1)",
        "maximumJumps(nums = [1,2,3,4,7], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5,6,7], target = 2)",
        "maximumJumps(nums = [2, 0, 1, 3], target = 1)",
        "maximumJumps(nums = [1, 3, 6, 10, 14], target = 2)",
        "maximumJumps(nums=[2, 1, 0, 1, 2, 0], target=1)",
        "maximumJumps(nums = [2, 10, 1, 3, 7, 12, 6, 8], target = 3)",
        "maximumJumps(nums = [3,0,0,2,3,3,4,2,4,1,1,0], target = 2)"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n=3, k=5)",
        "minimumSum(n=3, k=5)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n=3, k=10)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [10,20,30,40], m = 35)",
        "canSplitArray(nums = [2, 4, 1, 3], m = 5)",
        "canSplitArray(nums = [2,3,4,1,2], m = 5)",
        "canSplitArray(nums = [3,2,2], m = 6)",
        "canSplitArray(nums = [10, 20, 30, 10], m = 40)",
        "canSplitArray(nums = [2, 4, 5, 1, 3], m = 5)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 7, offers = [[0, 3, 3], [1, 4, 4], [2, 5, 5], [3, 6, 6], [4, 7, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [3, 4, 4]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 2], [0, 5, 3], [4, 7, 2], [3, 6, 1]])",
        "maximizeTheProfit(n = 10, offers = [[1,4,3], [2,5,2], [5,7,4], [7,9,1]])",
        "maximizeTheProfit(n = 10, offers = [[1, 4, 4], [2, 5, 3], [3, 7, 10], [5, 9, 8]])",
        "maximizeTheProfit(n = 10, offers = [[2, 4, 5], [3, 5, 10], [5, 8, 15], [7, 10, 20]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 5], [2, 3, 10], [5, 7, 10], [7, 9, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 5], [2, 4, 7], [3, 5, 10], [4, 7, 9], [5, 9, 11]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [1, 3, 3], [2, 4, 4], [2, 3, 1], [3, 5, 6], [4, 5, 3]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 5], [4, 7, 8], [2, 4, 3], [5, 8, 5], [3, 6, 2]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [10, 2, 8, 3], k = 3)",
        "checkArray(nums = [2, 3, 2, 5, 2], k = 3)",
        "checkArray(nums = [2, 3, 1, 1, 0, 0, 1, 2, 1, 0], k = 3)",
        "checkArray(nums = [4, 2, 3, 4, 0, 0], k = 3)",
        "checkArray(nums = [1, 5, 2, 1, 3, 1, 0], k = 3)",
        "checkArray(nums = [1, 2, 3, 1, 2, 1, 2, 3, 2], k = 3)",
        "checkArray(nums = [0,0,0,1,0,0,1,0,0,0], k = 2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4,1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,1,2,1,2,1,2], k = 1)",
        "longestEqualSubarray(nums = [1,3,1,2,3,4,2,3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 2, 2, 1, 1, 3, 3, 3, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1, 2, 3, 1, 2, 3, 1, 2, 3], k = 4)",
        "longestEqualSubarray(nums = [1,3,2,3,1,2,2,3,3,2,1,3], k = 3)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [3, 1]])",
        "colorTheArray(n=4, queries=[[0, 1], [1, 2], [2, 3], [3, 1]])",
        "colorTheArray(n=3, queries=[[0, 1], [1, 2], [2, 3]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [2,3], [3,1], [4,2]])",
        "colorTheArray(n = 4, queries = [[0,1], [1,2], [2,3], [3,1], [2,2]])",
        "colorTheArray(n = 5, queries = [[2, 1], [2, 2], [1, 1], [2, 1], [1, 2]])"
    ],
    "sample_55": [
        "smallestString(s = 'jddqbncq')",
        "smallestString(s = 'jddqbncq')",
        "smallestString(s = 'jddqbncb')",
        "smallestString(s='kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kdbqncd\")",
        "smallestString(s = 'kddsbncj')",
        "smallestString(s='kddscndc')",
        "smallestString(s = \"kdbbbncd\")",
        "smallestString(s=\"kdmsncd\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [2, 4, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [2,4,6,8], threshold = 8)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [2,4,6,8], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 8, 3, 5, 1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 5, 8, 12, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,4,6,8,9,12], threshold = 10)",
        "longestAlternatingSubarray(nums = [3,2,5,4,7,6,9,8,1,0], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 8, 5, 3, 7, 1, 9, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 6, 4, 1, 7, 5, 3], threshold = 5)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14], threshold = 14)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,12], threshold = 12)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10], threshold = 12)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,12,14], threshold = 14)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,12,14,16], threshold = 14)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 9, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 7, 12, 1, 6, 7], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,12,14], threshold = 16)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,2,4,6,8,10], threshold = 12)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 3, 3, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [3, 3, 3, 2, 2])",
        "distinctDifferenceArray(nums = [3, 3, 3, 5, 5])",
        "distinctDifferenceArray(nums = [3,2,3,4,1])",
        "distinctDifferenceArray(nums = [2, 3, 4, 1, 2])"
    ],
    "sample_22": [
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACBDAB\")",
        "minLength(s = \"ACBDAB\")",
        "minLength(s = \"ACDBB\")",
        "minLength(s = \"ACBD\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"bbaaa\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [2,3,3,2], m = 6)",
        "canSplitArray(nums = [2, 1, 3, 5, 6], m = 4)",
        "canSplitArray(nums = [2, 1, 3, 5, 6], m = 4)",
        "canSplitArray(nums = [10, 20, 30, 40, 50], m = 35)",
        "canSplitArray(nums = [10, 20, 30, 40], m = 40)",
        "canSplitArray(nums = [2, 5, 7, 8], m = 10)",
        "canSplitArray(nums = [10,20,30,40,50], m = 35)",
        "canSplitArray(nums = [5, 3, 3, 2, 1], m = 6)",
        "canSplitArray(nums = [2, 5, 8, 14, 19], m = 17)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0,1,0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0])"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 1)",
        "checkArray(nums = [2, 3, 1, 12, 5], k = 2)",
        "checkArray(nums = [1, 5, 3], k = 1)",
        "checkArray(nums = [5, 2, 3, 1, 0, 2], k = 3)",
        "checkArray(nums = [2, 3, 1, 12, 5, 6], k = 1)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 3], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 34, 67, 23], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [90, 75, 80, 95], target = 85)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 5, 4, 6], k = 2)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "maximumBeauty(nums = [1,3,5,7], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 6, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 5, 3, 9, 10, 8], k = 2)",
        "maximumBeauty(nums = [2, 1, 3, 2, 5, 6], k = 2)",
        "maximumBeauty(nums = [2, 3, 5, 10, 11, 13], k = 2)"
    ],
    "sample_205": [
        "minimumOperations(\"0123456789\")",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"555\")",
        "minimumOperations(\"10110\")",
        "minimumOperations(\"111\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(\"0010\")",
        "minimumOperations(num = \"1021\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"025\")",
        "minimumOperations(s = \"001\")",
        "minimumOperations(s = \"0110\")",
        "minimumOperations(s = \"02250\")",
        "minimumOperations(s = \"01010\")",
        "minimumOperations(s = \"1234\")",
        "minimumOperations(s = \"02025\")",
        "minimumOperations(s = \"15000\")",
        "minimumOperations(s = \"11000\")",
        "minimumOperations(s = \"0101110\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 6])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums = [4,1,2,3])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2, 5])",
        "semiOrderedPermutation(nums = [4,3,2,1,6,5])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LRAR\")",
        "furthestDistanceFromOrigin(moves = \"LRAR\")",
        "furthestDistanceFromOrigin(moves = \"LLAR\")",
        "furthestDistanceFromOrigin(moves = \"RLAR\")",
        "furthestDistanceFromOrigin(moves = \"RRA\")",
        "furthestDistanceFromOrigin(moves = \"RAL\")",
        "furthestDistanceFromOrigin(moves = \"LLAARRA\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"This\", \"Is\", \"A\", \"Test\"], s = \"TIT\")",
        "isAcronym(words = [\"He\", \"llo\"], s = \"H\")",
        "isAcronym(words = [\"It\", \"is\", \"a\", \"beautiful\", \"day\"], s = \"ITAD\")",
        "isAcronym(words=[\"B\", \"A\", \"N\"], s=\"BAN\")",
        "isAcronym(words=[\"For\", \"Your\", \"Information\"], s = \"FYI\")",
        "isAcronym(words=['H', 'e', 'll', 'o'], s='HL')",
        "isAcronym(words = [\"Massachusetts\", \"Systems\", \"Code\"], s = \"MSc\")",
        "isAcronym(words = [\"F\", \"T\", \"S\", \"A\", \"T\", \"U\", \"S\"], s = \"FTSTA\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 5)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=5, k=2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], modulo=5, k=2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], modulo = 7, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,4,6,8,10], modulo = 7, k = 2)",
        "countInterestingSubarrays(nums=[2,4,1,6,5], modulo=5, k=3)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 21, 24])",
        "countBeautifulPairs(nums = [12, 56, 23, 78])",
        "countBeautifulPairs(nums = [12, 21, 26, 31, 41, 56])",
        "countBeautifulPairs(nums = [23, 12, 15])",
        "countBeautifulPairs(nums = [12, 21, 123, 213])",
        "countBeautifulPairs(nums = [25, 75, 100])",
        "countBeautifulPairs(nums = [21, 12, 31, 44])",
        "countBeautifulPairs(nums = [12,56,34,78,42,63])",
        "countBeautifulPairs(nums = [24, 54, 20, 12, 15])",
        "countBeautifulPairs(nums = [12, 21, 26, 43, 45, 56, 60, 67])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 1)",
        "maximumJumps(nums = [2,1], target = 2)",
        "maximumJumps(nums=[1,5,3], target=2)",
        "maximumJumps(nums=[1, 5, 3, 4, 2], target=2)",
        "maximumJumps(nums = [1,2,10,11,12,13,14], target = 2)",
        "maximumJumps(nums = [2,3,5,1,4,7], target = 3)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(nums = [12, 21, 23, 32])",
        "countBeautifulPairs(nums = [12, 21, 23, 32])",
        "countBeautifulPairs(nums = [12, 24, 36, 48])",
        "countBeautifulPairs(nums = [12, 21, 26, 35, 48])",
        "countBeautifulPairs(nums = [25, 50, 75, 100])",
        "countBeautifulPairs(nums = [23, 56, 45, 67])",
        "countBeautifulPairs(nums = [23, 45, 12, 34, 19, 20])",
        "countBeautifulPairs(nums = [51,23,46,48,28])"
    ],
    "sample_18": [
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCDBCD\")",
        "minLength(s = \"ABCCBA\")",
        "minLength(s = \"ABACABADCD\")",
        "minLength(s = \"ABCCDAB\")",
        "minLength(s = \"AABBCCDDEE\")"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist([1,2,3,4,5,6,7,8,9,10])",
        "doesValidArrayExist(derived = [1, 2, 4, 8, 16])",
        "doesValidArrayExist(derived = [1, 2, 4, 8, 1])",
        "doesValidArrayExist(derived = [2, 3, 5, 7, 11, 13, 17, 19])",
        "doesValidArrayExist(derived=[1,2,3,4,5,6])",
        "doesValidArrayExist(derived=[2,2,2,2])",
        "doesValidArrayExist(derived = [2,4,3,1])",
        "doesValidArrayExist([2, 1, 2])",
        "doesValidArrayExist(derived = [3, 2, 4, 1, 6])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 8, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition([1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 8, 4, 3])",
        "findValueOfPartition(nums = [1, 8, 9])",
        "findValueOfPartition(nums = [1, 3, 6, 4])",
        "findValueOfPartition(nums = [1, 8, 10])"
    ],
    "sample_7": [
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [3, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,2]])",
        "colorTheArray(n = 4, queries = [[0,1],[1,2],[2,3],[3,4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[0,1],[1,2],[2,3],[3,2],[2,1]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n=3, target=5)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n = 4, target = 8)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n=3, k=4)",
        "minimumSum(n=3, k=4)",
        "minimumSum(n=3, k=2)",
        "minimumSum(n=3, k=5)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3, 4, 5], target=10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 2, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 2, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8, 9, 10], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 25, 30], target = 26)"
    ],
    "sample_152": [
        "canSplitArray(nums = [2, 3, 3, 2], m = 6)",
        "canSplitArray(nums = [2, 3, 3, 2], m = 6)",
        "canSplitArray(nums = [2,4,1,3], m = 5)",
        "canSplitArray(nums = [3,2,1,0], m = 4)",
        "canSplitArray(nums = [10, 20, 30, 40], m = 50)",
        "canSplitArray(nums = [4, 3, 2, 3, 4], m = 8)",
        "canSplitArray(nums = [3,3,2,2,1,1], m = 6)",
        "canSplitArray(nums = [5, 1, 3, 5, 10, 7, 4, 9, 2, 8], m = 15)",
        "canSplitArray(nums = [5, 5, 2, 6, 4, 2, 1], m = 15)",
        "canSplitArray(nums = [1, 10, 3, 7, 5, 8], m = 12)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 4, 3, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 2, 3, 4, 5, 6], m = 7, k = 2)",
        "countInterestingSubarrays(nums = [4, 3, 2, 3, 4], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 0, 1], m = 10, k = 2)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,5,6,7], t = 7)",
        "longestAlternatingSubarray(nums = [2,7,15,9,6], t = 7)",
        "longestAlternatingSubarray(nums = [2,7,15,9,10,12], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,2,5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,2,5,6,1,7,8,9,10], t = 10)",
        "longestAlternatingSubarray(nums = [2,7,15,9,6,3,2,5], t = 8)",
        "longestAlternatingSubarray(nums = [5,10,2,7,8,9,4,5,6,1,2,3,4,5], t = 15)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits([0,0,0,1,0,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits([0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits([0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1])",
        "numberOfGoodSubarraySplits([0,0,1,1,0,0,0,1,0,1,0,0,0,1,1,0,0,1,0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,0,0,0,0,1,0,1,1,1,0,0,1,0,0,1,0,0,1,1,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,1,1,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1,1,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num=\"512301000\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 7, b = 2)",
        "makeTheIntegerZero(a = 7, b = 2)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a=10, b=3)",
        "makeTheIntegerZero(a=10, b=3)",
        "makeTheIntegerZero(a = 15, b = 3)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 4, 2, 3], m = 6)",
        "canSplitArray(nums = [2, 4, 3], m = 6)",
        "canSplitArray(nums = [10, 20, 30, 40], m = 35)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [2, 3, 5, 7, 9], m = 12)",
        "canSplitArray(nums = [2, 5, 9, 10, 15, 20], m = 14)",
        "canSplitArray(nums = [2, 3, 1, 4, 6, 10], m = 14)",
        "canSplitArray(nums = [2,5,9,8,4,7], m = 11)"
    ],
    "sample_161": [
        "maxSum([55, 33, 22, 11])",
        "maxSum(nums = [55, 33, 72, 99])",
        "maxSum(nums = [51, 21, 32, 43, 54])",
        "maxSum(nums = [13, 31, 34, 42])",
        "maxSum(nums = [55, 23, 56, 89, 46, 34])",
        "maxSum([13, 12])",
        "maxSum(nums = [55, 15, 51, 44])",
        "maxSum(nums = [5, 50, 8, 9, 11])",
        "maxSum(nums = [54, 43, 52, 7])",
        "maxSum([32, 15, 40])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,3,6,8])",
        "findValueOfPartition(nums = [1,3,6,8])",
        "findValueOfPartition(nums = [1, 3, 6, 8, 10])",
        "findValueOfPartition(nums = [1, 3, 6, 8, 10])",
        "findValueOfPartition(nums = [1,3,6,8,10])",
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [2,8,10])",
        "findValueOfPartition(nums = [2, 20, 1, 15])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2],[3,5],[4,7]])",
        "numberOfPoints(nums = [[2,5],[4,6],[6,8],[10,12]])",
        "numberOfPoints(nums = [[1,3],[4,5],[7,10]])",
        "numberOfPoints(nums = [[10,12],[15,16],[18,20]])",
        "numberOfPoints(nums = [[15,20],[30,40],[50,70]])",
        "numberOfPoints(nums = [[3,5],[7,10],[1,4]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,6],[5,7],[7,8],[8,10],[9,11]])",
        "numberOfPoints([[1,3],[2,4],[3,5],[4,6],[5,7]])",
        "numberOfPoints(nums = [[3,6], [4,7], [5,5]])",
        "numberOfPoints([[20,30], [45,50], [55,60], [70,80], [80,90], [95,100], [100,110]])"
    ],
    "sample_219": [
        "numberOfPoints([[1, 3], [2, 5], [3, 7]])",
        "numberOfPoints([[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints([[2, 5], [3, 7]])",
        "numberOfPoints([[2, 4], [3, 6], [5, 7]])",
        "numberOfPoints(nums = [[0, 2], [1, 4], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 5]])",
        "numberOfPoints([[1, 2], [3, 4], [1, 4]])",
        "numberOfPoints([[0, 3], [2, 5], [3, 5]])",
        "numberOfPoints(nums = [[0,2],[1,3],[3,4]])",
        "numberOfPoints([[1,2],[2,3],[1,3]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\", \"\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\", \"\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\", \"\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"one=two=three\", \"four=five=six\"], separator = \"=\")",
        "splitWordsBySeparator(words=[\"one\", \"two\", \"\", \"three\", \"four\", \"five\", \"six\"], separator=\" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three,four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words=[\"one,two,three\", \"four,five,six\"], separator=\",\")"
    ],
    "sample_200": [
        "minOperations(nums = [1,1,1,1,1], target = 5)",
        "minOperations(nums = [1, 2, 3], target = 6)",
        "minOperations(nums = [1,1,2,3], target = 6)",
        "minOperations(nums = [1, 1, 2, 5], target = 5)",
        "minOperations(nums = [1, 1, 2, 3], target = 5)",
        "minOperations(nums = [1,2,3,4,5], target = 100)",
        "minOperations(nums=[1, 1, 2, 5], target=6)",
        "minOperations(nums=[8, 1, 1], target=3)",
        "minOperations(nums = [1,1,1,1,1,2,2,2,3,3], target = 10)",
        "minOperations(nums=[42,26,13,13,13,13,13,26], target=77)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1,2,3,3,4,4], k = 3)",
        "checkArray(nums=[1,2,3,4,5,6,7], k=2)",
        "checkArray(nums = [3, 4, 2, 5, 1, 6], k = 3)",
        "checkArray(nums=[1, 2, 3, 4, 1, 2, 3, 4], k=3)",
        "checkArray(nums = [2, 5, 7, 9, 11, 13], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0,1,0,1,0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0,1,0,1,0,1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 0])",
        "doesValidArrayExist([1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,1,0,1,0,1,0,0,0,1,1,0,1,1,0,1,1,0,1,1,1,0,0,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,0,1,0,1,0,0,1,1,1,1,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,0,1,1,1,0,0,1,1,0,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,1,1,1,0"
    ],
    "sample_159": [
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [50, 10, 15])",
        "maxSum(nums = [15,56,89,32,45])",
        "maxSum(nums = [55,9,73,444,555])",
        "maxSum(nums = [51,23,27,41,18,35])",
        "maxSum([12,31,4,5])",
        "maxSum(nums = [15, 52, 20, 45, 78, 100])",
        "maxSum(nums = [13,25,16,19,22])",
        "maxSum(nums = [54, 51, 90, 84])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1,2,3,2,1,2,3,2,1,4,2])",
        "continuousSubarrays([1, 1, 2, 2, 3, 3])",
        "continuousSubarrays(A = [1,2,3,2,1,2,1,3,2,2])",
        "continuousSubarrays(A = [1,2,3,2,2,3,1,2,3,1,2,3])",
        "continuousSubarrays(A = [1,2,3,1,2,3,3,2,1,2])",
        "continuousSubarrays(A = [1,2,3,4,2,3,4,1,2,3,4,1,2,3,4])",
        "continuousSubarrays(A = [1,2,3,4,2,3,1,4,2,3,4,5,6,7,8,9,0])",
        "continuousSubarrays([2,2,3,4,4,4,4,3,2,3])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 2])",
        "distinctDifferenceArray(nums = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [5,5,5,5,5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [5, 5, 5, 2, 2])",
        "distinctDifferenceArray(nums = [1,1,2,2,3])",
        "distinctDifferenceArray(nums = [3, 4, 1, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 3])",
        "distinctDifferenceArray(nums = [2,3,1,2,2,2])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [0, 1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7], b = [2, 2, 6, 8])",
        "maxNonDecreasingLength(a = [1, 3, 5, 2], b = [2, 4, 6, 3])",
        "maxNonDecreasingLength(a = [10, 22, 9, 33, 4, 50, 6], b = [1, 2, 3, 4, 5, 6, 7])",
        "maxNonDecreasingLength(a = [10, 9, 11, 12], b = [10, 11, 12, 13])",
        "maxNonDecreasingLength(a = [1, 3, 5, 2, 6, 7], b = [1, 2, 5, 7, 6, 8])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)"
    ],
    "sample_160": [
        "maxSum(nums = [512, 321, 123])",
        "maxSum(nums = [10, 2])",
        "maxSum([51, 32, 43, 87, 22, 35])",
        "maxSum([15, 58, 36, 29])",
        "maxSum([25, 40, 12, 9])",
        "maxSum([99, 91, 77, 99])",
        "maxSum(nums = [20,15,10,6,5])",
        "maxSum([123, 234, 345, 135, 246])",
        "maxSum([15, 58, 15, 58, 87, 58])",
        "maxSum([56, 27, 35, 41, 78, 21])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncg\")",
        "smallestString(s = 'kddsaabc')",
        "smallestString(s = 'kddsbanccd')",
        "smallestString(s = \"kddsbnbcda\")",
        "smallestString(s = 'kddsaaab')",
        "smallestString(s = 'kddsbnza')",
        "smallestString(s = 'kdbctda')",
        "smallestString(s = \"kdcsbmbd\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [3, 9, 5, 1, 7])",
        "findValueOfPartition(nums = [1, 3, 10, 5, 7])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"aaa\")",
        "makeSmallestPalindrome(s = \"bba\")",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = 'aab')"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 20, num2 = 4)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1=7, num2=4)",
        "makeTheIntegerZero(num1=13, num2=3)",
        "makeTheIntegerZero(num1=11, num2=5)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[2,4],[4,7]])",
        "numberOfPoints(nums = [[1,3],[2,5],[4,6]])",
        "numberOfPoints(nums = [[2,4], [5,7]])",
        "numberOfPoints(nums=[[1,5],[2,4],[3,3]])",
        "numberOfPoints(nums = [[2,5],[4,7],[1,1],[3,4]])",
        "numberOfPoints(nums = [[2,4],[3,7],[4,5],[7,8],[1,1],[2,2],[3,3]])",
        "numberOfPoints(nums = [[3,5], [6,8], [5,7]])",
        "numberOfPoints(nums = [[2,5], [3,7], [5,8], [7,9], [1,2], [3,4], [6,7]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [2,3,1,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,4,5,6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 1, 2], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,4,2,1,2,3,1,2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [4, 1, 2, 3, 4], m = 2, k = 1)"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"bba\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"0101\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"aaa\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 1, 0, 0])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2,3,4,5,6])",
        "distinctDifferenceArray(nums = [2, 3, 1, 5, 4])",
        "distinctDifferenceArray(nums = [2, 2, 2, 2, 2])",
        "distinctDifferenceArray(nums = [3, 3, 3, 3, 3])",
        "distinctDifferenceArray(nums = [2, 3, 1, 2, 2])",
        "distinctDifferenceArray(nums = [2, 2, 2, 4, 4])",
        "distinctDifferenceArray(nums = [4, 2, 3, 5, 0])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 34, 56, 78], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 12, 18], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 12, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 50, 30, 80, 70], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 34, 67, 54, 33], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [23, 45, 12, 76, 34, 56, 78, 94], target = 40)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s=\"even\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '512301000000')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,2,1,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,0,2,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,2,3,2,1,2,3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 0)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 5)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 5)",
        "distanceTraveled(mainTank = 11, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 1)",
        "minCost(A = [3,2,1], x = 2)",
        "minCost(A = [2,3,1,14,4], x = 3)",
        "minCost(A = [2, 3, 1], x = 2)",
        "minCost(A = [2, 1, 2], x = 3)",
        "minCost(A = [2, 2, 3], x = 2)",
        "minCost(A = [2,5,6], x = 2)",
        "minCost(A = [2, 3, 1, 4, 1], x = 2)",
        "minCost(A = [4, 2, 3, 2], x = 2)"
    ],
    "sample_129": [
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2])",
        "maxIncreasingGroups([1, 1, 1])",
        "maxIncreasingGroups([1, 2, 2])",
        "maxIncreasingGroups([1,2])",
        "maxIncreasingGroups([1, 2, 2, 3])",
        "maxIncreasingGroups([1,2,3])",
        "maxIncreasingGroups([2, 1])",
        "maxIncreasingGroups([1, 2, 3, 4, 5, 6])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 6], k = 2)",
        "checkArray(nums = [2, 2, 3, 3, 1, 0], k = 2)",
        "checkArray(nums = [3, 2, 3, 2, 3], k = 3)",
        "checkArray(nums = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "checkArray(nums = [1,1,2,2,3,3], k = 2)",
        "checkArray(nums = [4, 3, 1, 0, 2, 0, 0], k = 3)",
        "checkArray(nums = [0, 2, 2, 1, 1, 0, 0], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ACBDAB\")",
        "minLength(s = \"ACBDAB\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,2,3], target = 10)",
        "minOperations(nums = [3,2,2], target = 6)",
        "minOperations(nums = [2,3,2], target = 4)",
        "minOperations(nums = [2,3,5], target = 7)",
        "minOperations(nums = [1,2,3,4,5,6], target = 100)",
        "minOperations(nums = [2, 3, 2], target = 6)",
        "minOperations(nums = [1, 1, 2, 2], target = 5)",
        "minOperations(nums=[1,1,1,1,2,2,2,2], target=8)",
        "minOperations(nums = [8,2,12,6], target = 24)",
        "minOperations(nums=[1, 1, 2, 2, 3], target=5)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"apple-pie\", \"banana-split\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"hel--lo\", \"wor--ld\"], separator = \"--\")",
        "splitWordsBySeparator(words = [\"apple-pie\", \"cherry\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"hello_world\", \"good_day\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"one_two\", \"three_four_five\"], separator = \"_\")",
        "splitWordsBySeparator(words= [\"word1_word2\", \"word3_word4\"], separator= \"_\")",
        "splitWordsBySeparator(words = [\"hey,you\", \"what,up\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple-pie-apple\", \"apple-pie-pie\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"Apple_Pie\", \"Mango_smoothie\", \"Cheesecake\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"birch\",\"pine\",\"elm\"], separator = \"-\")"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'jddqbncd')",
        "smallestString(s = 'kdcabncd')",
        "smallestString(s = 'jddpncd')",
        "smallestString(s = 'abz')",
        "smallestString(s = 'kdctnbca')",
        "smallestString(s='kfddsbncd')",
        "smallestString(s = \"kddsaaan\")",
        "smallestString(s = \"zczdsczncz\")",
        "smallestString(s = \"djhvmsd\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LLLR_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLLR_R_\")",
        "furthestDistanceFromOrigin(moves = \"L_LR_R\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_R_\")",
        "furthestDistanceFromOrigin(moves = \"L__R_LR\")",
        "furthestDistanceFromOrigin(moves = \"RL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"L__R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_R\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LR_L_R_L\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 20, num2 = 3)",
        "makeTheIntegerZero(num1 = 13, num2 = 1)",
        "makeTheIntegerZero(num1 = 9, num2 = 1)"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"jddqbncd\")",
        "smallestString(s = \"zddsbncd\")",
        "smallestString(s = 'kdcsbncd')",
        "smallestString(s = \"zddsbncd\")",
        "smallestString(s = 'kdbsbncd')",
        "smallestString(s = 'kddpqncd')",
        "smallestString(s = 'cddsdbncd')",
        "smallestString(s = 'jjibbbkmm')",
        "smallestString(s = 'jdhekndhb')"
    ],
    "sample_146": [
        "finalString(s = \"inter\")",
        "finalString(s = \"inter\")",
        "finalString(s = \"pointeri\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"iter\")",
        "finalString(s = 'iponter')",
        "finalString(s=\"pinteri\")",
        "finalString(s=\"poteir\")",
        "finalString(s='eintrop')",
        "finalString(s = 'ripnetsop')"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,3,1,3,1,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,1,2,3,4,1,2,3,1,2,3,1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,3,1,2,2,3,3,2,2,2], k=2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [2, 3, 3, 2], m = 6)",
        "canSplitArray(nums = [2, 4, 3], m = 6)",
        "canSplitArray(nums = [2,1,3,5,6], m = 4)",
        "canSplitArray(nums = [2,5,1,1,1,1], m = 4)",
        "canSplitArray(nums = [2, 5, 1, 2, 6], m = 8)",
        "canSplitArray(nums = [2, 4, 3, 1, 5], m = 4)",
        "canSplitArray(nums = [2,2,1,1,1,1], m = 4)",
        "canSplitArray(nums = [5, 1, 6], m = 7)",
        "canSplitArray(nums = [2, 5, 3, 8, 7, 6], m = 7)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits([0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 0, 1, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,1,0,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,1,0,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,1,1,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,1,0,1,0,1,0,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0,0,0,1,1,1,0,1,0,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,1,1,1,1,0,1,0,0,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,1,0,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,1,1,0,0,1,0,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,0,1,0,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,1,0,0"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one-two-three\", \"four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words=[\"one-two\", \"three four\", \"five-six\"], separator=\"-\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three-four\", \"five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three four\", \"five six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one:two:three\", \"four:five:six\"], separator = \":\")",
        "splitWordsBySeparator(words=[\"one-two\", \"three-four\", \"five-six\"], separator=\"-\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three-four\", \"five six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one--two\", \"three--four--five\", \"six\"], separator = \"--\")",
        "splitWordsBySeparator(words = [\"one=two\", \"=three=four=five\", \"=six\"], separator = \"=\")",
        "splitWordsBySeparator(words = ['one-two', 'three', 'four-', 'five--six'], separator = '-')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,4,5,6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [90, 120, 150], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8, 9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 34, 67, 12, 45], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [9,10,12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 18, 24, 30], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [12,15,15,18], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 35, 48, 67, 85, 45], target = 40)"
    ],
    "sample_168": [
        "isAcronym(words = [\"For\", \"Your\", \"Information\"], s = \"FYI\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"For\", \"All\", \"Mankind\"], s = \"FAM\")",
        "isAcronym(words = [\"Hey\", \"There\"], s = \"HT\")",
        "isAcronym(words = [\"H\", \"e\", \"ll\", \"o\"], s = \"HH\")",
        "isAcronym(words=[\"Hey\", \"You\"], s=\"HY\")",
        "isAcronym(words = [\"Some\", \"Random\", \"Words\"], s = \"SaRW\")",
        "isAcronym(words = [\"H\", \"e\", \"llo\", \"W\", \"orld\"], s = \"HW\")",
        "isAcronym(words = [\"A\", \"c\", \"r\", \"o\", \"n\", \"y\", \"m\"], s = \"ACRONYM\")",
        "isAcronym(words = ['A', 'P', 'E'], s = \"CAP\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Every\", \"Good\", \"Boy\", \"Does\", \"Fine\"], s = \"EGBDF\")",
        "isAcronym(words = [\"My\", \"name\", \"is\", \"John\", \"Doe\"], s = \"MNJD\")",
        "isAcronym(words = [\"From\", \"Hollywood\"], s = \"FH\")",
        "isAcronym(words = [\"For\", \"Your\", \"Eyes\", \"Only\"], s = \"FYEO\")",
        "isAcronym(words = [\"H\", \"a\", \"p\", \"p\", \"y\"], s = \"HH\")",
        "isAcronym(words = [\"Mass\", \"Action\", \"Cultures\"], s = \"MAC\")",
        "isAcronym(words = [\"You\", \"Need\", \"To\", \"Know\"], s = \"YNTO\")",
        "isAcronym(words = [\"Merry\", \"Christmas\"], s = \"MC\")",
        "isAcronym(words = [\"Man\", \"of\", \"Steel\"], s = \"MOST\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"010\")",
        "minimumCost(s = \"1100\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"01001\")",
        "minimumCost(s = \"01001\")",
        "minimumCost(s = \"100101\")",
        "minimumCost(s = \"010010\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1])",
        "doesValidArrayExist([0,0,0,0])",
        "doesValidArrayExist([0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,1,1,1])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0,0,0,1])",
        "doesValidArrayExist(derived = [1,1,1,0,0,0,0,1,1,0])",
        "doesValidArrayExist([1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s='abc')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = 'bbaa')",
        "makeSmallestPalindrome(s = 'abcba')",
        "makeSmallestPalindrome(s = 'aaab')",
        "makeSmallestPalindrome(s = 'aab')",
        "makeSmallestPalindrome(s = \"car\")",
        "makeSmallestPalindrome(s = 'cba')"
    ],
    "sample_50": [
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"aaab\")",
        "smallestString(s = \"baabb\")",
        "smallestString(s=\"aaabaa\")",
        "smallestString(s=\"aaaaa\")",
        "smallestString(s = \"aaaabaaab\")",
        "smallestString(s = \"zaz\")",
        "smallestString(s = \"abba\")",
        "smallestString(s = \"aaaaab\")",
        "smallestString(s = \"babbb\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,2,4,6,1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 7, 1, 0, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [5,2,3,4,6,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 2, 4, 6, 5, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [3,1,2,3,2,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 6, 2, 5, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 7, 1, 10, 2, 5], k = 1)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ACDAB\")",
        "minLength(s = \"AACDBBCD\")",
        "minLength(s = \"ABCDEFG\")",
        "minLength(s = \"AABBCD\")",
        "minLength(s = \"AABCDBCD\")",
        "minLength(s = \"ABCDBC\")"
    ],
    "sample_158": [
        "maxSum([55, 23, 32, 5])",
        "maxSum(nums = [12, 23, 45])",
        "maxSum([55, 33, 88])",
        "maxSum(nums = [55, 23, 34, 99])",
        "maxSum(nums=[55, 23, 34, 12, 11, 9])",
        "maxSum(nums = [55, 23, 39, 40, 75])",
        "maxSum(nums = [5, 55, 515, 5151])",
        "maxSum(nums = [55, 23, 31, 49, 21, 33])",
        "maxSum([15, 51, 30, 45, 10])",
        "maxSum(nums = [14, 56, 34, 87, 3])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 6])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 4, 1, 3, 5])",
        "semiOrderedPermutation(nums = [2, 4, 1, 3, 5])",
        "semiOrderedPermutation(nums = [2, 4, 1, 3, 5])",
        "semiOrderedPermutation(nums=[2, 1, 4, 3])",
        "semiOrderedPermutation(nums=[2,1,4,3,6])"
    ],
    "sample_162": [
        "maxSum(nums = [51,22,33])",
        "maxSum([15, 30, 45, 60, 75, 90])",
        "maxSum(nums = [51,22,33,46,55,67,78,89])",
        "maxSum(nums = [51,22,33,46,55,61])",
        "maxSum(nums = [24, 15, 12, 5])",
        "maxSum([15, 23, 21, 9, 5, 11, 88])",
        "maxSum(nums = [12, 23, 45, 98, 76, 54, 32, 88])",
        "maxSum([85, 94, 21, 37, 81, 56, 72, 33])",
        "maxSum([123, 222, 321, 444, 555, 666, 777, 888])",
        "maxSum([15, 12, 56, 85, 47, 65, 25])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = '111')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s='0100')",
        "maximumOddBinaryNumber(s='111')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6], target = 4)"
    ],
    "sample_166": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hi\", \"There\"], s = \"HT\")",
        "isAcronym(words = [\"I\", \"love\", \"coding\"], s = \"ILC\")",
        "isAcronym(words = [\"very\", \"important\", \"person\"], s = \"vip\")",
        "isAcronym(words = [\"Local\", \"Area\", \"Network\"], s = \"LAN\")",
        "isAcronym(words = [\"mq\", \"px\", \"zy\"], s = \"mpx\")",
        "isAcronym(words = [\"List\", \"of\", \"strings\"], s = \"LOS\")",
        "isAcronym(words = [\"You\", \"Are\", \"Welcome\"], s = \"YAW\")",
        "isAcronym(words = [\"B\", \"r\", \"o\", \"w\", \"n\"], s = \"B\")",
        "isAcronym(words = [\"man\", \"of\", \"steel\"], s = \"mofs\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank=2, additionalTank=1)",
        "distanceTraveled(mainTank=2, additionalTank=1)",
        "distanceTraveled(mainTank=2, additionalTank=1)"
    ],
    "sample_130": [
        "maxIncreasingGroups([1, 2, 5])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1,2,5])",
        "maxIncreasingGroups([1,2,5])",
        "maxIncreasingGroups([1, 2, 3, 4])",
        "maxIncreasingGroups([1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups([1, 2, 5, 6])",
        "maxIncreasingGroups([1,2,5,9,10])",
        "maxIncreasingGroups([1,2,3,4,5,6])",
        "maxIncreasingGroups([2, 2, 2])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [4, 2, 3, 4, 1])",
        "distinctDifferenceArray(nums = [4, 2, 3, 1, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [4, 2, 5, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 2])",
        "distinctDifferenceArray(nums = [2, 1, 4, 4, 3])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,4,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,2,1,3,4,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 1, 2, 3, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,2,3,4,5,1,2,3,4,5])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 2, 4, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,2,4,6,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 1, 3, 2, 4, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [5,2,4,3,1,0], k = 3)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"ban\")",
        "minimizedStringLength(s = \"mon\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,3,4,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,3,3,3,2,2,2,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,3,1,2,3,4,1], k = 2)",
        "longestEqualSubarray(nums = [1,3,1,2,3,1,2,3], k = 1)",
        "longestEqualSubarray(nums = [1,3,1,2,3,1,1,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,1,2,3,1,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,1,2,2,1,1,2,2,2], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,1,2,1,2,3,4,1,1,1,1,1,1], k = 2)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [2,1], [3,2], [4,1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [1, 1], [2, 2], [3, 1]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[1,3],[3,2],[2,1]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [1,1], [3,1], [3,2]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 25], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10,11,12], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 30, 40], target=50)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 4, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours=[1,1,1,1,1], target=2)",
        "numberOfEmployeesWhoMetTarget(hours = [45, 30, 22, 18, 35], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [3,5,4,6,8,9,2], target = 5)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs([12, 24, 36, 48, 60])",
        "countBeautifulPairs([12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 91])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 72, 84, 96])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180])",
        "countBeautifulPairs([12, 24, 16, 28, 108])",
        "countBeautifulPairs(nums = [12, 21, 123, 45, 54, 32])"
    ],
    "sample_229": [
        "countWays([2, 1, 3])",
        "countWays([0, 1, 2, 3, 4])",
        "countWays([1, 2, 0, 3])",
        "countWays([1, 0, 2, 3])",
        "countWays([0, 1, 2, 3, 4, 5])",
        "countWays([0, 1, 2])",
        "countWays([2, 1, 0])",
        "countWays([3,1,2,0])",
        "countWays([3, 4, 2, 1, 0])",
        "countWays([1,2,3,3,3,4,5,7])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s='000')",
        "maximumOddBinaryNumber(s='00')",
        "maximumOddBinaryNumber(s = \"00100\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 2)"
    ],
    "sample_238": [
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1, 2, 6, 5])",
        "maximumTripletValue(nums = [0, -1, 2])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue([1, 2, 3])",
        "maximumTripletValue(nums=[1,2,3,4,5])",
        "maximumTripletValue(nums = [5, 2, 3, 4, 1])",
        "maximumTripletValue(nums = [3,6,1,3])",
        "maximumTripletValue(nums = [3,1,2])",
        "maximumTripletValue(nums=[2, 1, 1, 4, 2, 3])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 2)",
        "maximumJumps(nums = [1,2,3,4,7], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9], target = 2)",
        "maximumJumps(nums = [1,2,3,4,7,8,9], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 6, 7, 8, 15], target = 3)",
        "maximumJumps(nums = [1,2,3,6,8,15], target = 3)",
        "maximumJumps(nums = [1, 5, 2, 8, 10, 12], target = 3)",
        "maximumJumps(nums=[1, 3, 7, 15], target=2)"
    ],
    "sample_149": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"stringi\")",
        "finalString(s = \"rtsnig\")",
        "finalString(s = \"gngirts\")",
        "finalString(s = \"rsting\")",
        "finalString(s = \"sirgt\")",
        "finalString(s = 'fisrtstring')",
        "finalString(s = 'qfedcba')",
        "finalString(s='rtsngiir')"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 1])",
        "continuousSubarrays([1,2,3,4,5,6,7,8])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,1,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 4, 1, 2])"
    ],
    "sample_228": [
        "countWays([0,1,2,3])",
        "countWays([0,1,2,3])",
        "countWays([0, 1, 2, 3, 4])",
        "countWays([0,1,2,3,4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays([1,2,3,5])",
        "countWays([0, 2, 3, 1, 5])",
        "countWays([2,1,1])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], k = 2)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(a = [3, 4, 5, 3, 4, 6])",
        "distinctDifferenceArray(a = [1,2,3,1,2])",
        "distinctDifferenceArray(a = [1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5])",
        "distinctDifferenceArray(a = [3, 4, 5, 6, 5])",
        "distinctDifferenceArray(a=[2, 4, 6, 8, 10])",
        "distinctDifferenceArray(a = [4, 1, 2, 3, 5])",
        "distinctDifferenceArray(a = [4, 2, 1, 5, 3])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays([0,1,2,3,4,5])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6, 7, 8])",
        "continuousSubarrays([1, 2, 3, 5, 6, 7])",
        "continuousSubarrays(a=[1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(a = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7])",
        "continuousSubarrays([0, 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3])",
        "continuousSubarrays(a=[1,2,2,3,2,1,1,2,2,3,2,1])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(nums = [1,2,3,4,5,6,7])",
        "continuousSubarrays(nums = [1,2,3,4])",
        "continuousSubarrays(nums = [1, 2, 3, 4])",
        "continuousSubarrays(nums = [1,2,3,2,3,2,4])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs([12, 24, 36])",
        "countBeautifulPairs(nums = [23, 45, 67, 89])",
        "countBeautifulPairs(nums = [12, 21, 27, 38, 40])",
        "countBeautifulPairs(nums = [12, 45, 36, 48, 21])",
        "countBeautifulPairs(nums = [25, 30, 35])",
        "countBeautifulPairs(nums = [12,56,345,789,15])",
        "countBeautifulPairs(nums = [52, 24, 11, 33, 15])",
        "countBeautifulPairs(nums = [51, 23, 45, 23, 45, 23])",
        "countBeautifulPairs(nums = [12, 28, 76, 74, 74])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation([3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2,1,3,5,4])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation([2, 3, 1, 4, 5])",
        "semiOrderedPermutation([2, 3, 4, 1, 5])",
        "semiOrderedPermutation([3,1,2,4])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 6])",
        "semiOrderedPermutation([4, 3, 2, 1])",
        "semiOrderedPermutation([4,3,2,1])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation([3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums=[2, 1, 4, 3])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0",
        "numberOfGoodSubarraySplits([0,1,1,0,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,1,0,1,0,0,1,0,1,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,0,0,1,0,1,0,1,1,1,0,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,0,0"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = \"00\")",
        "maximumOddBinaryNumber(s=\"000\")",
        "maximumOddBinaryNumber(s=\"000\")",
        "maximumOddBinaryNumber(s=\"000\")",
        "maximumOddBinaryNumber(s='00')",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = \"10\")"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,2])"
    ],
    "sample_23": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDBCD\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ABCBCD\")",
        "minLength(s = \"ABCCBA\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,1,2,3,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 1, 3, 2, 1])",
        "countCompleteSubarrays(nums = [2,1,3,2,1,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 13, num2 = 3)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 4)",
        "makeTheIntegerZero(num1 = 16, num2 = 3)",
        "makeTheIntegerZero(num1 = 21, num2 = 4)",
        "makeTheIntegerZero(num1=12, num2=3)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 7, 10], target = 2)",
        "maximumJumps(nums = [1, 5, 3, 4, 2], target = 2)",
        "maximumJumps(nums = [2, 5, 3, 7, 8, 6], target = 3)",
        "maximumJumps(nums = [1, 5, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [2,4,6,10,12,14], target = 2)",
        "maximumJumps(nums = [10,20,30,40,70,100,130], target = 50)",
        "maximumJumps(nums = [1, 4, 3, 7, 2, 9], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 6, 7, 13, 14, 15], target = 4)"
    ],
    "sample_131": [
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3, 6])",
        "maxIncreasingGroups([1, 2, 3, 6])",
        "maxIncreasingGroups([1,2,3,4,5])",
        "maxIncreasingGroups([1, 2, 3, 6, 7, 8])",
        "maxIncreasingGroups([1, 2, 3, 6, 10])",
        "maxIncreasingGroups([1, 2, 2])",
        "maxIncreasingGroups(x = [1, 2, 3, 5])",
        "maxIncreasingGroups([1, 2, 2, 3, 3, 4])",
        "maxIncreasingGroups([1,2,3,4,5,6,7,8,9])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLRR__\")",
        "furthestDistanceFromOrigin(moves = \"LLRR__\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRR_\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRR_\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRR__\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRL_\")",
        "furthestDistanceFromOrigin(moves = \"LLLL_RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLL_R_RRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLLLRRL_\")",
        "furthestDistanceFromOrigin(moves = \"LRRR_R_L__L_RR\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = \"001\")"
    ],
    "sample_6": [
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [3, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 0]])",
        "colorTheArray(n=3, queries=[[0,1],[1,2],[2,1]])",
        "colorTheArray(n = 4, queries = [[0,1], [1,2], [2,3], [3,2]])",
        "colorTheArray(n=5, queries=[[0,1], [1,2], [2,1], [3,2], [4,1]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[4,4],[5,5]])",
        "colorTheArray(n = 2, queries = [[0,1], [1,1]])",
        "colorTheArray(n=5, queries=[[1,1], [2,2], [3,3], [4,4], [5,5]])",
        "colorTheArray(n = 10, queries = [[0, 1], [1, 2], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,2], [3,2], [3,1], [4,2], [4,1]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8, 10])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 8, 10])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits([0,0,0,1,0,0,0])",
        "numberOfGoodSubarraySplits([0,0,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "numberOfGoodSubarraySplits([0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,1,1,0,0,1,0,1,1,1,1,0,1,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,1,1,1,1,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 3, 4, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 2, 2])",
        "minimumIndex(nums = [2,0,2,1,1,0])",
        "minimumIndex(nums = [2,1,3,1,1,2,1])",
        "minimumIndex(nums = [2, 1, 1, 1, 1, 2, 2])",
        "minimumIndex(nums = [2,3,1,1,1,2,2,2,1])",
        "minimumIndex([1, 2, 3, 4, 1, 1, 1, 2, 2])",
        "minimumIndex([1,2,3,2,2,2,1,1,1,2,2,2])",
        "minimumIndex(nums = [2,1,3,1,1,2,2,3,1,1,2,2])",
        "minimumIndex(nums = [2,1,2,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 5, 4, 2, 1, 4, 2, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 2, 3, 4, 7, 8, 6, 1], k = 3)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 7, offers = [[1, 3, 3], [2, 5, 1], [4, 7, 4], [6, 8, 5]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 5], [2, 5, 7], [4, 7, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [0, 3, 2], [2, 4, 1], [1, 3, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 3], [2, 3, 5], [1, 2, 2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 3, 4], [1, 1, 1], [2, 2, 2]])",
        "maximizeTheProfit(n=4, offers=[[1, 2, 4], [2, 3, 5], [3, 4, 6], [1, 3, 10]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 2], [2, 7, 3], [4, 8, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 3], [1, 2, 1], [3, 5, 5], [2, 3, 2], [4, 5, 3]])",
        "maximizeTheProfit(n=10, offers=[[1,2,5],[2,3,5],[3,4,10],[4,5,10],[5,6,5]])",
        "maximizeTheProfit(n=4, offers=[[1,2,2],[2,3,2],[3,4,3]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"275\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(\"2500\")",
        "minimumOperations(\"0075\")",
        "minimumOperations(num = \"205\")",
        "minimumOperations(num = \"2222222222\")",
        "minimumOperations(num = \"5025\")",
        "minimumOperations(\"11111\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(\"00\")",
        "minimumOperations(\"010\")",
        "minimumOperations(num = \"05\")",
        "minimumOperations(num = \"5050\")",
        "minimumOperations(num = \"2057\")",
        "minimumOperations(\"207\")",
        "minimumOperations(num = \"52\")",
        "minimumOperations(\"1255750\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 4, offers = [[1,2,1],[2,3,2]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,1],[3,4,2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,1],[2,3,2],[3,4,1]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,1],[2,3,2]])",
        "maximizeTheProfit(n = 5, offers = [[2,5,3], [1,2,2], [0,3,2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 3, 2], [1, 4, 3], [2, 5, 5]])",
        "maximizeTheProfit(n=5, offers=[[2,4,3],[1,3,2],[2,3,2]])",
        "maximizeTheProfit(n = 3, offers = [[0,1,2], [1,2,2], [1,3,2]])",
        "maximizeTheProfit(n=5, offers=[[1,3,2], [2,4,4], [3,5,3]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2,3,4,3,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,7,15,9,10,11], threshold = 7)",
        "longestAlternatingSubarray(nums = [2,4,6,8,9], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], threshold = 12)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,12,4], threshold = 8)",
        "longestAlternatingSubarray(nums=[2,4,6,8,9,10,12], threshold=10)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,2,4,6,8], threshold = 12)",
        "longestAlternatingSubarray(nums = [2, 5, 3, 6, 4, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [2,4,6,7,10,8,9], threshold = 6)"
    ],
    "sample_203": [
        "minimumOperations(num = \"24\")",
        "minimumOperations(num = \"24\")",
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"12\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"99\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(\"1250\")",
        "minimumOperations(\"52\")",
        "minimumOperations(\"0525\")"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 1], [5, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [1, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [1, 2], [2, 1]])",
        "colorTheArray(n=4, queries=[[1, 1], [2, 2], [3, 3], [4, 3], [2, 1]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [2,2,1,1,1,2,2])",
        "minimumIndex(nums = [1,2,2,3,3,3,4,4])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 4])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 4])",
        "minimumIndex(nums = [1, 2, 2, 3, 3])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 4, 4])",
        "minimumIndex(nums = [2, 1, 1, 3, 2, 2])",
        "minimumIndex(nums = [2,1,1,1,1,1,2,2,2,2,2,2])",
        "minimumIndex(nums = [1, 0, 1, 0, 1, 1])",
        "minimumIndex(nums = [2,1,1,3,1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [2, 3, 1, 5, 4], target = 2)",
        "maximumJumps(nums = [0,1,2,3,4], target = 1)",
        "maximumJumps(nums = [1, 2, 1], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5,6], target = 3)",
        "maximumJumps(nums = [4,0,1,2,3], target = 1)",
        "maximumJumps(nums = [3, 5, 7, 10], target = 3)",
        "maximumJumps(nums = [1,3,7,10,15,20], target = 5)",
        "maximumJumps(nums = [7, 1, 2, 11, 13], target = 2)",
        "maximumJumps(nums = [40, 41, 42, 41, 42], target = 1)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = \"512301000000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num='512301000000')"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 1, b = 2)",
        "distanceTraveled(a = 2, b = 2)",
        "distanceTraveled(a=2, b=2)"
    ],
    "sample_65": [
        "findValueOfPartition([1, 3, 5, 7])",
        "findValueOfPartition([1, 3, 6, 4, 1, 2])",
        "findValueOfPartition([1, 5, 3, 7, 2])",
        "findValueOfPartition([1, 5, 3, 7, 2])",
        "findValueOfPartition([3,1,2])",
        "findValueOfPartition([4, 8, 1, 3])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 22])",
        "findValueOfPartition(a = [2, 4, 8, 1])",
        "findValueOfPartition([1, 1, 2, 2, 3, 3])",
        "findValueOfPartition(a = [0, 1, 2, 3])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [3,1,2,4,5])",
        "distinctDifferenceArray(nums = [1,3,5,7,9])",
        "distinctDifferenceArray(nums=[5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 5, 1, 7, 2, 3, 5])",
        "distinctDifferenceArray(nums = [4, 1, 3, 3, 5])",
        "distinctDifferenceArray(nums = [4, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1,1,2,3,3,4,4,5])"
    ],
    "sample_120": [
        "minimumIndex(nums = [1,2,2,3,3,3,4,4])",
        "minimumIndex(nums = [2, 1, 2, 1, 2, 1, 2])",
        "minimumIndex(nums = [2, 3, 4, 5, 6])",
        "minimumIndex(nums = [2, 1, 2, 5, 3, 2, 2, 4, 3, 3])",
        "minimumIndex(nums = [2,2,2,1,1,1,0,0,0])",
        "minimumIndex([2, 2, 3, 4, 5])",
        "minimumIndex(nums = [2,2,2,3,3,3,2,2,2])",
        "minimumIndex(nums = [1,1,1,1,1,2,2,2,2,2])",
        "minimumIndex(nums = [2,1,2,1,2,2,3,2,1,2])",
        "minimumIndex(nums = [1,2,3,4,2,3,2,2,2,2])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"URR\")",
        "furthestDistanceFromOrigin(moves = \"LMR\")",
        "furthestDistanceFromOrigin(moves = \"RRRUU\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"bana\")",
        "minimizedStringLength(s = \"bana\")",
        "minimizedStringLength(s = \"mango\")",
        "minimizedStringLength(s = \"aaab\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [4, 3, 2, 3, 5], k = 3)",
        "checkArray(nums = [10, 20, 30], k = 2)",
        "checkArray(nums = [3, 2, 3, 2, 2], k = 3)",
        "checkArray(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], k = 5)",
        "checkArray(nums = [5,3,3,4,2,1], k = 3)",
        "checkArray(nums = [10, 5, 10, 15, 20], k = 3)",
        "checkArray(nums = [1, 4, 1, 3, 2, 5], k = 3)",
        "checkArray(nums = [2, 3, 0, 1, 1, 0], k = 4)"
    ],
    "sample_132": [
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([2, 1, 1, 0])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups([1, 2, 1, 1])",
        "maxIncreasingGroups(usageLimits = [2, 3, 1, 1, 1])",
        "maxIncreasingGroups([3, 1, 2, 1])",
        "maxIncreasingGroups([6, 5, 4, 3, 2, 1])",
        "maxIncreasingGroups([5, 2, 4, 3, 1])",
        "maxIncreasingGroups([2,2,1,0])",
        "maxIncreasingGroups([2, 3, 2, 1, 0])"
    ],
    "sample_206": [
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"001\")",
        "minimumOperations(num = \"205\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(num = \"2025\")",
        "minimumOperations(\"00\")",
        "minimumOperations(num = \"0125\")",
        "minimumOperations(\"205\")",
        "minimumOperations(\"00150\")",
        "minimumOperations(num = '52')"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 6])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 1])"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aaaabbb\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"aaabba\")",
        "minimumCost(s = \"baa\")",
        "minimumCost(s = \"00110\")",
        "minimumCost(s = \"rbrb\")"
    ],
    "sample_133": [
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups([1, 1, 1])",
        "maxIncreasingGroups([1, 1, 2])",
        "maxIncreasingGroups([1,2,3])",
        "maxIncreasingGroups(usageLimits = [2, 1, 3])",
        "maxIncreasingGroups([3, 5])",
        "maxIncreasingGroups(usageLimits = [2, 4, 3, 1, 1, 0])"
    ],
    "sample_53": [
        "smallestString(s = 'baabc')",
        "smallestString(s = 'baazc')",
        "smallestString(s = 'baazc')",
        "smallestString(s = 'bzzc')",
        "smallestString(s = 'baaac')",
        "smallestString(s = 'baaaa')",
        "smallestString(s = 'bbbc')",
        "smallestString(s = 'bcabc')",
        "smallestString(s = 'bbbbbaaab')",
        "smallestString(s = \"baacb\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 3)",
        "minAbsoluteDifference(nums = [4,5,2,3], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6], x = 2)",
        "minAbsoluteDifference(nums = [4,1,3,5,8], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7,8,9,10], x = 4)",
        "minAbsoluteDifference(nums = [4,5,2,3,1,6,7], x = 3)",
        "minAbsoluteDifference(nums = [4, 2, 7, 5, 9], x = 2)",
        "minAbsoluteDifference(nums = [3,4,5,1,2], x = 2)",
        "minAbsoluteDifference(nums = [1,5,6,7,8,2,3,4,9], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 4, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 5, offers = [[0, 2, 1], [1, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 5, offers = [[0, 2, 1], [1, 2, 2], [3, 4, 1]])",
        "maximizeTheProfit(N = 6, offers = [[1, 3, 2], [2, 4, 1], [3, 6, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 2], [3, 4, 1], [4, 5, 3]])",
        "maximizeTheProfit(N = 5, offers = [[0, 3, 3], [1, 4, 4], [2, 5, 5]])",
        "maximizeTheProfit(N = 6, offers = [[2, 4, 1], [1, 3, 2], [0, 5, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 2], [3, 4, 2], [0, 2, 1], [3, 5, 1]])",
        "maximizeTheProfit(N = 7, offers = [[2, 5, 3], [4, 7, 2], [3, 6, 2]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"apple-orange-banana\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"apple-banana-cherry\", \"dog-cat-mouse\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"apple-pie\", \"cherry-tart\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"one,two,three\", \"four,five\"], b = \",\")",
        "splitWordsBySeparator(a = ['apple-banana-cherry', 'dog-cat-mouse'], b = \"-\")",
        "splitWordsBySeparator(a = ['abcd', 'efgh'], b = 'b')",
        "splitWordsBySeparator(a = [\"\", \"a\", \"b\", \"c\"], b = \"a\")",
        "splitWordsBySeparator(a = ['this', 'is', 'a', 'test'], b = 'i')",
        "splitWordsBySeparator(a = [\"I am a string\", \"and I am also\"], b = \"a\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = \"512301000\")",
        "removeTrailingZeros(a='5123010000')",
        "removeTrailingZeros(a= '512301000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s=\"never\")",
        "makeSmallestPalindrome(s = \"nine\")",
        "makeSmallestPalindrome(s = \"neven\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 5, 3, 1, 3, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4,1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4,1,2,3,4], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,1,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,1,2,1,2,1,2,3,4], k = 1)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 2, 7, 6, 9, 10, 4], k = 2)"
    ],
    "sample_163": [
        "maxSum(nums = [55,9])",
        "maxSum(nums = [55,9])",
        "maxSum(nums = [55,9])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51,52,53,54])",
        "maxSum([55, 23, 32, 41, 18])",
        "maxSum(nums = [1,2,3,5])",
        "maxSum(nums = [55, 33, 31, 0])",
        "maxSum([55, 23, 32, 67, 12, 15])",
        "maxSum([15, 51, 12, 11, 12, 11, 14])"
    ],
    "sample_151": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'rtsnig')",
        "finalString(s = \"sirgnt\")",
        "finalString(s = 'sirgnsirt')",
        "finalString(s = \"rtsng\")",
        "finalString(s = 'itrtsing')",
        "finalString(s='sirgitu')"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num='51230100')",
        "removeTrailingZeros(num='51230100')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s=\"000\")",
        "maximumOddBinaryNumber(s = \"00000\")",
        "maximumOddBinaryNumber(s='0000')",
        "maximumOddBinaryNumber(s = '011')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words=[\"easy-problem\"], separator=\"-\")",
        "splitWordsBySeparator(words=[\"easy-problem\"], separator=\"-\")",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words=[\"easy,problem\"], separator=\",\")",
        "splitWordsBySeparator(words = [\"hard_problem\"], separator = \"_\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3,1,2,3], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3,1,2,3], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3,1,2,3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 1, 2, 3, 4], K = 1)",
        "longestEqualSubarray(A = [3,3,3,3,3,3,3], K = 2)",
        "longestEqualSubarray(A = [2,2,2,2,2,2,2], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 1, 2, 3, 1, 2, 3, 4, 5, 6], K = 2)",
        "longestEqualSubarray(A = [3, 1, 2, 3, 1, 2, 3, 3], K = 2)",
        "longestEqualSubarray(A = [1,3,5,3,1,3,1,3,5,7,7,7,5,3,1,1,5,7,7,7,7,3], K = 2)",
        "longestEqualSubarray(A = [5, 5, 5, 1, 5, 5, 5, 5, 1, 5, 1, 5, 5, 5, 5, 1, 5, 5, 5, 5], K = 2)"
    ],
    "sample_230": [
        "countWays([3, 2, 1])",
        "countWays([1, 2, 3])",
        "countWays([2, 1, 0])",
        "countWays([2, 2, 3])",
        "countWays([2, 2, 2, 2])",
        "countWays([4, 5, 6])",
        "countWays([4,2,1,3,5])",
        "countWays([7, 5, 4])",
        "countWays([6,5,2,1])",
        "countWays(nums = [10, 8, 7, 1, 2, 3])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [2,4,6,7,9], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 2, 3, 6, 1, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 5, 6, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums=[3, 4, 1, 2, 1, 5], k=2)",
        "sumIndicesWithKSetBits(nums = [5, 4, 2, 7, 1, 13], k = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512301000000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"For\", \"You\"], s = \"FY\")",
        "isAcronym(words = [\"Brave\", \"New\", \"World\"], s = \"BNW\")",
        "isAcronym(words = [\"From\", \"Who\"], s = \"FW\")",
        "isAcronym(words = [\"This\", \"Is\", \"Python\"], s = \"TIP\")",
        "isAcronym(words = [\"B\", \"a\", \"n\", \"a\", \"n\", \"a\"], s = \"B\")",
        "isAcronym(words = [\"From\", \"Hard\", \"To\", \"Wire\"], s = \"FHTW\")",
        "isAcronym(words = [\"Word\", \"Another\", \"Random\"], s = \"WAR\")",
        "isAcronym(words=[\"International\", \"Space\", \"Station\"], s = \"ISS\")",
        "isAcronym(words = [\"very\", \"important\", \"person\"], s = \"vmp\")",
        "isAcronym(words = [\"Th\", \"e\", \"r\", \"es\", \"ta\", \"te\"], s = \"TH\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,2])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [2,3,1,2,1,2,3,2,3])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n=4, target=1)",
        "minimumPossibleSum(n = 5, target = 8)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = 'ring')",
        "finalString(s = \"string\")",
        "finalString(s = \"rtsni\")",
        "finalString(s = \"stringi\")",
        "finalString(s = 'rting')",
        "finalString(s = 'rtsiugng')",
        "finalString(s = 'rings')",
        "finalString(s = \"sntri\")",
        "finalString(s = \"rtgnsi\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s='even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = \"never\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[0, 3, 6], [1, 2, 5], [2, 3, 4], [3, 4, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 8], [0, 3, 6]])",
        "maximizeTheProfit(n = 4, offers = [[0,1,2],[1,2,4],[2,3,2],[1,3,3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 4], [1, 2, 5], [0, 3, 2], [2, 4, 6], [1, 3, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 3], [1, 2, 2], [2, 4, 1], [3, 5, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [0, 2, 2], [2, 3, 2], [1, 4, 2], [3, 4, 5]])",
        "maximizeTheProfit(n=5, offers=[[2,3,3], [1,2,5], [3,4,4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [0, 4, 6], [2, 3, 7], [1, 3, 9]])",
        "maximizeTheProfit(n = 6, offers = [[1,3,5],[2,5,10],[1,4,6],[3,5,15]])",
        "maximizeTheProfit(n = 6, offers = [[0, 2, 2], [0, 3, 10], [1, 2, 5]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [0,1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [10,20,30,40,50], target = 10)",
        "maximumJumps(nums = [1, 3, 5, 10, 15, 20], target = 5)",
        "maximumJumps(nums = [7,1,3,4,8,10,14,15], target = 2)",
        "maximumJumps(nums = [7,1,3,4,2,5,6], target = 2)",
        "maximumJumps(nums = [0, 3, 9, 10, 12], target = 2)",
        "maximumJumps(nums = [2,5,3,1,4,5,5], target = 2)",
        "maximumJumps(nums = [2, 0, 2, 3, 1, 4, 1, 2, 0], target = 2)",
        "maximumJumps(nums = [50, 15, 70, 25, 60, 35], target = 30)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,1,0,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0,0,0,0,1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1,1,1,0,1,1,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,1,1,1,0,0,1,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,0,0,1,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,0,",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,1,0,1,0,0,0,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,0,1,1,0,1,0,0,1,1,1,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,0,1,1,0,1,1,0,1,"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"0010\")",
        "maximumOddBinaryNumber(s='000')",
        "maximumOddBinaryNumber(s = \"0000\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n=3, k=5)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 14, num2 = 3)",
        "makeTheIntegerZero(num1 = 14, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1=10, num2=2)",
        "makeTheIntegerZero(num1=7, num2=2)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 6, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], modulo=2, k=1)",
        "countInterestingSubarrays(nums = [2,1,3,5,4], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [4,2,2,2,1,1], modulo = 5, k = 2)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9,2,4,6,8,10], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9,11], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9,11], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 5, 4, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6], k = 1)",
        "maximumBeauty(nums = [1,2,3,5,6], k = 2)",
        "maximumBeauty(nums = [2, 3, 1, 5, 6, 4], k = 2)",
        "maximumBeauty(nums = [2, 2, 3, 4, 5, 6], k = 2)"
    ],
    "sample_148": [
        "finalString(s = 'inter')",
        "finalString(s = 'inter')",
        "finalString(s = \"inter\")",
        "finalString(s = \"pinteri\")",
        "finalString(s = 'pinteri')",
        "finalString(s = \"rntepoi\")",
        "finalString(s = \"rreter\")",
        "finalString(s = 'ipointer')",
        "finalString(s = 'pointer')",
        "finalString(s= 'rifepni')"
    ],
    "sample_231": [
        "countWays([1, 0, 2])",
        "countWays([1, 0, 2])",
        "countWays([2, 0, 1])",
        "countWays([1, 0, 2, 3])",
        "countWays([2, 1, 0, 3])",
        "countWays([0, 2, 3, 1, 5, 4])",
        "countWays([2, 0, 1, 3])",
        "countWays([0,2,3,1,5])",
        "countWays([3,2,1,0,4])",
        "countWays(nums = [2, 1, 3])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(nums = [12, 21, 23, 32])",
        "countBeautifulPairs(nums = [12, 24, 36, 48])",
        "countBeautifulPairs(nums = [12, 21, 25, 32])",
        "countBeautifulPairs(nums = [51, 22, 13, 44, 55])",
        "countBeautifulPairs(nums = [22,33,44,55,66])",
        "countBeautifulPairs(nums = [51,22,33,44,55])",
        "countBeautifulPairs(nums = [24, 5, 18, 6])",
        "countBeautifulPairs(nums = [52, 123, 444, 101])",
        "countBeautifulPairs(nums = [23, 56, 1234, 236, 89])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1=10, num2=4)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"nevn\")",
        "makeSmallestPalindrome(s = \"nine\")",
        "makeSmallestPalindrome(s = \"nenve\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"nenev\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"Hi\", \"There\"], s = \"HT\")",
        "isAcronym(words = [\"Hi\", \"There\"], s = \"HT\")",
        "isAcronym(words = [\"Your\", \"Own\", \"Acronym\"], s = \"YOA\")",
        "isAcronym(words = [\"For\", \"Your\", \"Innocent\", \"Victims\"], s = \"FYIV\")",
        "isAcronym(words = [\"Internet\", \"Service\", \"Provider\"], s = \"ISP\")",
        "isAcronym(words = [\"What\", \"a\", \"wonderful\", \"world\"], s = \"WaWo\")",
        "isAcronym(words = [\"From\", \"the\", \"Department\", \"of\", \"Defense\"], s = \"FtDoD\")",
        "isAcronym(words=['H', 'e', 'll', 'o'], s='HL')",
        "isAcronym(words = [\"Hi\", \"I\", \"am\", \"John\"], s = \"HIAJ\")",
        "isAcronym(words=[\"H\", \"a\", \"p\", \"p\", \"y\"], s=\"HA\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0,0,0,0,0,1,0,0,0])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,1,1,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,1,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,0,0,0,1,1,0,1,0,1,1,1,0,1,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,1,0,0,1"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,5,6,7,2,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,1,5,2,6], k = 2)",
        "sumIndicesWithKSetBits(nums=[3, 1, 2, 3, 1, 2], k=2)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 5])",
        "countWays(nums = [1, 2, 3, 5])",
        "countWays(nums = [1, 3, 5, 7, 9])",
        "countWays([1, 2, 3, 4])",
        "countWays([-1, 1, 3])",
        "countWays([1, 2, 3, 4, 6])",
        "countWays(nums = [1, 2, 4, 5, 6])",
        "countWays([2, 4, 5, 1])",
        "countWays([1, 4, 7, 3, 2])",
        "countWays(nums = [1, 3, 4, 2, 0, 5, 7, 6])"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"bba\")",
        "minimumCost(s = \"bba\")",
        "minimumCost(s = \"01001\")",
        "minimumCost(s = \"1010\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"L__R\")",
        "furthestDistanceFromOrigin(moves = \"L__R\")",
        "furthestDistanceFromOrigin(moves = \"__R_L\")",
        "furthestDistanceFromOrigin(moves = \"__LR_\")",
        "furthestDistanceFromOrigin(moves = \"_____LR\")",
        "furthestDistanceFromOrigin(moves = \"__R__L\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank=3, additionalTank=1)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,2,1,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,2,2,3,1])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,2,1,4,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 1, 2, 3, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,3,1,2,3,4,6,7,8,9])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4, 1, 2, 1, 5, 6, 1, 2, 1, 4, 5, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,1,3,2,2,2,1,2,3,2,1,2,1,3,2,2,2,1])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [2,3,4,5,6], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9,10,11], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8], threshold = 7)",
        "longestAlternatingSubarray(nums = [2, 7, 12, 6, 9], threshold = 7)",
        "longestAlternatingSubarray(nums=[2,3,4,5], threshold=5)",
        "longestAlternatingSubarray(nums = [4, 6, 2, 5], threshold = 6)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9,10,11,12,13,14], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,7,3,9,4,6], threshold = 4)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[1,3], [2,5], [3,7]])",
        "numberOfPoints(nums = [[1,2],[2,3],[4,5]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [2, 4]])",
        "numberOfPoints([[2,4],[3,6],[4,5]])",
        "numberOfPoints([[3,5],[1,2],[4,5]])",
        "numberOfPoints([[1,3], [3,5], [5,7]])",
        "numberOfPoints([[1,5],[3,7]])",
        "numberOfPoints(nums = [[0,1], [2,4], [1,3]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 24, 36, 48])",
        "countBeautifulPairs([12, 21, 24])",
        "countBeautifulPairs(nums = [12, 21, 24])",
        "countBeautifulPairs([12, 21, 27])",
        "countBeautifulPairs([12, 21, 33])",
        "countBeautifulPairs(nums = [12, 24, 16, 20])",
        "countBeautifulPairs(nums = [12, 21, 27, 48])",
        "countBeautifulPairs([123, 124, 234])",
        "countBeautifulPairs(nums = [25, 50, 12, 60, 44, 3])",
        "countBeautifulPairs(nums = [24, 5, 67, 82, 90])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,5,7,9], t = 7)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 6)",
        "longestAlternatingSubarray(nums = [2,3,5,4], t = 5)",
        "longestAlternatingSubarray(nums = [5,6,2,3,4,5,6,7], t = 6)",
        "longestAlternatingSubarray(nums = [1,2,3,5,7,7,9], t = 7)",
        "longestAlternatingSubarray(nums = [1,2,3,5,7,8,9], t = 9)",
        "longestAlternatingSubarray(nums = [3,2,4,6,7,8], t = 7)",
        "longestAlternatingSubarray(nums = [5,3,7,10,9,8,6,4,2], t = 10)",
        "longestAlternatingSubarray(nums = [5, 9, 9, 5, 5, 7, 8, 2, 3, 4, 1, 7], t = 7)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"bba\")",
        "minimumCost(s = \"bba\")",
        "minimumCost(s = \"0101\")",
        "minimumCost(s = \"ababa\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDEFGHIJKL\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"AACDBB\")",
        "minLength(s = \"AABBBCCCD\")",
        "minLength(s = \"ABCCDCDAB\")",
        "minLength(s = \"ABCDA\")",
        "minLength(s = \"ABCDBCDAB\")",
        "minLength(s = \"ABCDEFGHIJKLMN\")",
        "minLength(s = \"ACBADABC\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,4], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,4,5,6,7], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums = [2,1,3,1,2,1], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [4,5,1,2,3,4,5], modulo = 7, k = 3)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 3]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n=2, queries=[[0,1],[1,2]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [2,3], [3,2], [4,1]])",
        "colorTheArray(n = 4, queries = [[0,1], [1,2], [2,3], [3,2]])",
        "colorTheArray(n=5, queries=[[0,1],[1,2],[2,1],[3,2],[4,1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2], nums2 = [2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [2,4,5], nums2 = [1,2,3])",
        "maxNonDecreasingLength(nums1 = [2, 3, 4], nums2 = [2, 1, 4])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n=2, target=1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1,3,6,8])",
        "findValueOfPartition(nums = [1,3,6,8])",
        "findValueOfPartition(nums=[1, 3, 6, 8])",
        "findValueOfPartition(nums = [3, 1, 2])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [1, 3, 7, 8])",
        "findValueOfPartition([1, 3, 6, 8])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"L__R_LR\")",
        "furthestDistanceFromOrigin(moves = \"L__R_LR\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LLLR_RR_\")",
        "furthestDistanceFromOrigin(moves = 'LLRR__')",
        "furthestDistanceFromOrigin(moves = \"LRR__LL_\")",
        "furthestDistanceFromOrigin(moves = \"LRR_LRL_R\")",
        "furthestDistanceFromOrigin(moves = \"LLLL_RRR_LLLLLLLLL\")",
        "furthestDistanceFromOrigin(moves = 'L_____LR_')",
        "furthestDistanceFromOrigin(moves = \"LLL_RRR_LRL_RR_\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [1,2,2,2,3,3,4,4])",
        "minimumIndex(nums = [3,3,2,2,1,1])",
        "minimumIndex(nums = [2,1,1,2,2,1,1,1,1,2,2,2])",
        "minimumIndex(nums = [1,0,0,1])",
        "minimumIndex([1, 2, 2, 3, 3, 3, 2, 2, 1, 1])",
        "minimumIndex(nums = [1,0,0,0,2,2])",
        "minimumIndex(nums = [2, 3, 2, 4, 1, 2, 2, 3, 3, 4, 4])",
        "minimumIndex(nums = [1,2,2,2,3,4,5,6])",
        "minimumIndex(nums = [2, 2, 1, 1, 1, 2, 2, 3, 3, 2])",
        "minimumIndex([1,2,2,2,3,3,2,2,1,1,1,4,4,4])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [4,2,3,1,5])",
        "semiOrderedPermutation(nums = [4,2,3,1,5])",
        "semiOrderedPermutation(nums = [4,2,3,1,5])",
        "semiOrderedPermutation(nums = [4,2,3,1,5])",
        "semiOrderedPermutation(nums = [4,1,2,3,5])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums = [4,3,2,1,7,6,5])",
        "semiOrderedPermutation(nums = [3,2,4,1,5])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n=3, k=2)",
        "minimumSum(n = 3, k = 3)"
    ]
}