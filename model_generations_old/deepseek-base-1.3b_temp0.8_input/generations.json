{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 1, 1])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 1, 1])",
        "alternatingSubarray(nums = [1, 3, 4, 2])",
        "alternatingSubarray(nums = [0,2,1,1,3])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6, 10, 11])",
        "alternatingSubarray(nums = [4, 2, 1, 3, 4, 4, 5, 6])",
        "alternatingSubarray(nums = [3,4,5,2,4,4,9,12,5,4])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[3, 2, 1], [4, 5, 6]])",
        "matrixSum(a = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(a = [[1, 2, 3],\n                      [4, 5, 6],\n                      [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3],\n                     [4, 5, 6],\n                     [7, 8, 9]])",
        "matrixSum(a = [[5, 5, 5], [5, 5, 5], [5, 5, 5]])",
        "matrixSum(a = [[4, 6, 7], [1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[10, 20, 30], [100, 200, 300], [1000, 2000, 3000]])",
        "matrixSum(a = [[2, 7, 3], [4, 1, 9], [1, 1, 1]])",
        "matrixSum(a = [\n    [10000000, 2, 30],\n    [2, 10000000, 50],\n    [30, 50, 10000000000]\n])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1],\n                            [1, 1, 1],\n                            [1, 1, 1]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1, 0], [0, 0, 0, 0], [0, 1, 0, 0], [1, 0, 0, 0]])",
        "findChampion(grid = [[1,2,3],[3,4,5],[6,5,4],[7,8,9]])",
        "findChampion(grid = [[0,1,1,1], [1,0,0,1], [1,0,1,1]])",
        "findChampion(grid = [[2, 2, 1, 1], [0, 1, 1, 2], [0, 0, 2, 2], [0, 0, 1, 1]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a=[[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2], [4, 5]])",
        "matrixSum(a = [[1, 2, 3], [2, 3, 1], [3, 2, 1]])",
        "matrixSum(a = [[1,2,3], [5,6,7]])",
        "matrixSum(a = [[1, 3, 5], [6, 7, 10]])",
        "matrixSum(a = [\n    [1, 2, 3],\n    [1, 2, 3],\n    [1, 2, 3],\n])",
        "matrixSum(a = [[2, 4, 3], [8, 1, 7]])",
        "matrixSum(a = [[5, 1, 1],\n                     [1, 5, 1],\n                     [5, 5, 5]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3])",
        "alternatingSubarray(nums = [1, 2, 1, 3, 1])",
        "alternatingSubarray(nums=[1, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 3, 4])",
        "alternatingSubarray(nums=[1, 3, 2, 3, 1])",
        "alternatingSubarray(nums = [-2, -2, 2, 2, 2])",
        "alternatingSubarray(nums = [4, 3, 4, 4, 6, 4])",
        "alternatingSubarray(nums = [3, 7, 3, 5, 2, 4, 2, 3, 6, 2])",
        "alternatingSubarray(nums = [-5, 5, -5, 4, 4, -5, -5, 4, -5, 5, 5])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"a\", \"b\", \"c\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"an\")",
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\"], x = \"m\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"or\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"banana\", \"mango\", \"apple\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"coco\"], x = \"an\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"], x = \"t\")",
        "findWordsContaining(words = [\"car\", \"air\", \"cloud\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"Hello\", \"my\", \"name\", \"is\", \"Nadeem\"], x = \"name\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"aba\", s2 = \"abb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"xabcd\")",
        "canBeEqual(s1 = \"xyz\", s2 = \"qwx\")",
        "canBeEqual(s1 = \"california\", s2 = \"new york\")",
        "canBeEqual(s1 = \"baloney\", s2 = \"coffee\")",
        "canBeEqual(s1 = \"mqdqj\", s2 = \"tbgd\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 4)",
        "lengthOfLongestSubsequence(nums = [4, 10, 4, 3, 8, 9], target = 10)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5,6],target=10)",
        "lengthOfLongestSubsequence(nums = [4,3,2,6,2], target = 10)",
        "lengthOfLongestSubsequence(nums=[1,2,4,3,5,4], target=9)",
        "lengthOfLongestSubsequence(nums=[3,1,2,4,5], target=8)",
        "lengthOfLongestSubsequence(nums = [3,4,2,1,6,7,8,9], target = 10)",
        "lengthOfLongestSubsequence(nums=[-1,3,-2,5,0,1,4], target=6)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abba\", s2 = \"abba\")",
        "canBeEqual(s1 = \"xyz\", s2 = \"zyx\")",
        "canBeEqual(s1 = \"acb\", s2 = \"cab\")",
        "canBeEqual(s1 = \"a\", s2 = \"a\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"qw\", s2 = \"wq\")",
        "canBeEqual(s1 = \"ab\", s2 = \"eidbaooo\")",
        "canBeEqual(s1 = \"mom\", s2 = \"nom\")",
        "canBeEqual(s1 = \"nnnn\", s2 = \"nnnn\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 3, 2, 2])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1])",
        "maxSubarrays(nums=[1, 2, 3, 4])",
        "maxSubarrays(nums = [2, 4, 8, 16, 32, 64, 128, 256])",
        "maxSubarrays(nums = [3, 2, 5, 5])",
        "maxSubarrays(nums=[-1,0,0,0,-1,0,1])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [4, 2, 1], money = 5)",
        "buyChoco(prices = [3, 2, 3], money = 10)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 3, 5], money = 10)",
        "buyChoco(prices = [5,2,3], money = 6)",
        "buyChoco(prices=[1, 2, 3, 4], money=10)",
        "buyChoco(prices=[4, 2, 2, 6], money=9)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,1,1], l = 0, r = 2)",
        "countSubMultisets(nums = [1,1,1,2,2], l = 1, r = 3)",
        "countSubMultisets(nums = [2, 2, 2, 2], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 2, r = 6)",
        "countSubMultisets(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], l = 0, r = 15)",
        "countSubMultisets(nums = [1,1,2,1], l = 0, r = 2)",
        "countSubMultisets(nums = [1,2,2,3,4], l = 2, r = 4)",
        "countSubMultisets(nums=[1,2,3,4,5,6,7,8,9,10], l=1, r=9)",
        "countSubMultisets(nums = [1, 3, 5, 7, 9, 11, 13], l = 1, r = 11)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], l = 0, r = 11)"
    ],
    "sample_322": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 7254)",
        "isFascinating(n = 78)",
        "isFascinating(n = 725)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ac\")",
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"xx\", s2 = \"yy\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bab\")",
        "canBeEqual(s1 = \"xxxx\", s2 = \"xxxx\")",
        "canBeEqual(s1 = \"asd\", s2 = \"qwe\")",
        "canBeEqual(s1 = \"bca\", s2 = \"ccb\")",
        "canBeEqual(s1 = \"mob\", s2 = \"mia\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [3, 2, 1, 4])",
        "minimumCoins(prices = [2, 5, 7, 1, 4, 3, 1, 3, 2])",
        "minimumCoins(prices=[3, 2, 4, 1])",
        "minimumCoins(prices = [1, 5, 10, 25, 100])",
        "minimumCoins(prices = [1, 3, 5, 6, 7, 8])",
        "minimumCoins(prices = [3, 10, 5])",
        "minimumCoins(prices = [5, 3, 8, 7])",
        "minimumCoins(prices = [10, 2, 1, 4, 5, 6])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 110)",
        "accountBalanceAfterPurchase(p = 110)",
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 500)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 25)",
        "accountBalanceAfterPurchase(p = 60)",
        "accountBalanceAfterPurchase(p = 520)",
        "accountBalanceAfterPurchase(p = 23)"
    ],
    "sample_423": [
        "minOperations(nums = [4, 3, 4, 4, 4])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1,1,2,2,3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [3, 2, 2, 4])",
        "minOperations(nums = [3,3,3,3,4,4])",
        "minOperations(nums = [3, 2, 5, 3])",
        "minOperations(nums = [1, 2, 2, 2, 3])",
        "minOperations(nums = [2,1,4,3])",
        "minOperations(nums = [1, 3, 5, 7, 9, 15])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 1, 1, 2, 2])",
        "alternatingSubarray(nums = [1, 1, 3, 3, 4, 4])",
        "alternatingSubarray(nums = [4,4,3,3,2,2,1])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7, 9, 10, 11])",
        "alternatingSubarray(nums = [1, 3, 5, 1, 1, 1, 2])",
        "alternatingSubarray(nums = [-4, -1, 2, 3])",
        "alternatingSubarray(nums = [4, 3, 2, 3, 4, 4, 1, 2])",
        "alternatingSubarray(nums=[5, 6, 3, 8, 3, 4])"
    ],
    "sample_460": [
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 2, limit = 7)",
        "distributeCandies(n = 5, limit = 7)",
        "distributeCandies(n = 6, limit = 5)",
        "distributeCandies(n=10, limit=5)"
    ],
    "sample_247": [
        "minOperations(s1 = \"1111\", s2 = \"0000\", x = 2)",
        "minOperations(s1 = \"a\", s2 = \"b\", x = 3)",
        "minOperations(s1 = \"a\", s2 = \"a\", x = 3)",
        "minOperations(s1 = \"xzy\", s2 = \"xxz\", x = 3)",
        "minOperations(s1 = \"abacaba\", s2 = \"bbbaba\", x = 2)",
        "minOperations(s1 = \"bq\", s2 = \"qw\", x = 4)",
        "minOperations(s1 = \"aacbb\", s2 = \"aaaacbb\", x = 3)",
        "minOperations(s1 = \"abaccab\", s2 = \"accabac\", x = 3)",
        "minOperations(s1 = \"aa\", s2 = \"aa\", x = 0)",
        "minOperations(s1 = \"seo\", s2 = \"noes\", x = 2)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 1, y = 1, z = 1)",
        "longestString(x = 3, y = 5, z = 3)",
        "longestString(x = 3, y = 6, z = 5)",
        "longestString(x=4, y=10, z=1)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 1)",
        "minOperations(nums = [1, 2, 3], k = 3)",
        "minOperations(nums = [1, 2, 3, 3, 2, 2, 2], k = 4)",
        "minOperations(nums = [5,1,3,4,2], k = 6)",
        "minOperations(nums = [3,1,3,2,4,3], k = 3)",
        "minOperations(nums=[1,2,3,4,5], k=3)",
        "minOperations(nums=[3,5,2,4,6], k=5)",
        "minOperations(nums=[2, 7, 9, 3, 1], k=1)",
        "minOperations(nums = [2, 3, 7, 6, 10], k = 2)",
        "minOperations(nums = [5,2,10,7,5,4,8,6,9,4,3,3,8,7,6,5,4,7,7,6,1,8,3,4,9,4,2,7,4,4,7,7,6,5,2,4,9,9,7,6,3,4,4,5,7,4,4,2,7,3,6,9,9,9,2,4,6,9,9,8,8,7,5,5,7,6,3,7,7,8,3,4,9,2,3,5,6,7,5,2,6,6,7,9,9,3,9,7,2,2,4,3,4,4,8,5,2,4,7,8,7,2,2,8,9,9,4,5,3,9,9,7,3,5,4,2,4,9,8,4,2,4,4,2,4,2,8,7,3,9,9,8,9,7,2,9,9,2,6,4,3,6,5,7,9,2,3,6,2,2,8,9,3,8,7,4,4,3,5,4,2,3,8,2,4,8,7,9,7,9,8,8,5,9,3,8,8,7,7,5,5,9,7,5,6,6,8,6,9,7,6,5,9,9,6,8,8,3,3,7,7,9,7,4,3,7,4,8,9,7,6,8,5,6,2,2,3,4,2,2,9,7,7,5,9,6,4,4,5,4,7,5,7,6,2,3,7,5,2,2,6,8,8,5,8,2,7,6,7,3,6,7,8,8,2,7,4,5,7,3,4,9,9,8,3,6,4,5,3,4,3,7,2,9,2,2,4,9,9,4,9,4,5,2,8,5,3,3,8,9,9,5,9,7,5,4,2,7,6,"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s=\"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"abppplee\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"mqmzx\")",
        "longestSemiRepetitiveSubstring(s = \"xzbzxxz\")",
        "longestSemiRepetitiveSubstring(s=\"jyilnvlj\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 2])",
        "isGood(a = [1, 2, 3, 4, 3, 2, 1])",
        "isGood(a = [1, 1, 2, 3, 3, 4])",
        "isGood(a = [2, 3, 1, 1, 4, 5])",
        "isGood(a = [2, 1, 2, 3, 3])",
        "isGood(a=[1, 3, 1, 1, 3])",
        "isGood(a=[1, 2, 3, 4, 1, 2, 5])",
        "isGood(a = [2, 2, 4, 5, 10])",
        "isGood(a = [1, 3, 1, 3, 4, 1, 3, 4])",
        "isGood(a = [4, 2, 4, 2, 4, 2, 4, 4, 1])"
    ],
    "sample_244": [
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 3, m = 5)",
        "differenceOfSums(n = 10, m = 20)",
        "differenceOfSums(n = 3, m = 1)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 100, m = 10)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 1, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 1, 6, 2, 4, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 3, 3, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minGroupsForValidAssignment(nums = [1, 3, 5, 7, 2, 4, 6, 8])",
        "minGroupsForValidAssignment(nums = [2, 1, 6, 5, 3, 2])",
        "minGroupsForValidAssignment(nums = [0, 0, 0, 0, 0, 0, 0, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 5, 2, 2, 1, 5, 5, 5, 4, 4, 4])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"1\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"1\", \"2\", \"2\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"4\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"1\", \"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"5\", \"prev\", \"7\", \"prev\", \"9\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\",\"1\",\"3\",\"prev\",\"2\",\"3\",\"5\",\"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"4\", \"6\", \"next\", \"1\", \"next\", \"2\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cde\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"aa\", \"aaa\", \"aaaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"eb\", \"eb\"])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ba\", \"ba\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"ef\", \"cd\", \"cd\"])",
        "maximumNumberOfStringPairs(words=[\"abc\", \"cba\", \"efg\"])",
        "maximumNumberOfStringPairs(words=[\"the\", \"of\", \"and\", \"hi\", \"a\", \"b\", \"a\", \"an\", \"an\", \"an\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 2)",
        "shortestBeautifulSubstring(s = \"01111\", k = 1)",
        "shortestBeautifulSubstring(s = \"01001111\", k = 3)",
        "shortestBeautifulSubstring(s=\"00011001\", k=3)",
        "shortestBeautifulSubstring(s=\"11010101\", k=3)",
        "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'z' * 101\n\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1')",
        "shortestBeautifulSubstring(s
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [1, 3, 6, 5, 4])",
        "minimumRightShifts(nums = [3, 7, 2, 1, 2])",
        "minimumRightShifts(nums = [10, 1, 100, 1, 0])",
        "minimumRightShifts(nums = [10, 13, 20, 21, 23])"
    ],
    "sample_294": [
        "minimumSteps(s = \"011101\")",
        "minimumSteps(s = \"001101\")",
        "minimumSteps(s = \"011100\")",
        "minimumSteps(s = \"00110101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"000110011\")",
        "minimumSteps(s = \"11000101\")",
        "minimumSteps(s
        "minimumSteps(s = '0101010110100')",
        "minimumSteps(s = '1110001000110011110')"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcde\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"pqr\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"bananas\", s3 = \"bananasbanana\")",
        "findMinimumOperations(s1 = \"axx\", s2 = \"bx\", s3 = \"cx\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcda\", s3 = \"daab\")",
        "findMinimumOperations(s1 = \"mads\", s2 = \"hack\", s3 = \"hackathon\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1=\"abc\", str2=\"abd\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abacbc\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"abacaba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aaabbb\")",
        "canMakeSubsequence(str1 = \"acb\", str2 = \"adbca\")",
        "canMakeSubsequence(str1 = \"sho\", str2 = \"shoe\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"adfj\")",
        "canMakeSubsequence(str1 = \"zqczq\", str2 = \"zq\")",
        "canMakeSubsequence(str1=\"ab\", str2=\"bbbaaabbbabbbab\")"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,2,4,3])",
        "isGood(nums = [1,3,5])",
        "isGood(nums=[1,2,3,5,6])",
        "isGood(nums=[2,1,3,4])",
        "isGood(nums = [1, 2, 4, 6, 5, 9, 7, 8])",
        "isGood(nums=[3,2,5,1])",
        "isGood(nums=[3,1,4,2,6])",
        "isGood(nums = [2,0,0])",
        "isGood(nums=[2,3,4,5,6,7,0,1])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=7)",
        "countPairs(nums = [1, 2, 4, 4, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1, 1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 7, 9, 2, 4, 5, 10, 3], target = 10)",
        "countPairs(nums = [1, 7, 9, 2, 5], target = 8)",
        "countPairs(nums = [5, 4, 2, 1, 1, 4, 3, 2], target = 6)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [8, 5, 9, 6], moveFrom = [6, 8, 9], moveTo = [5, 8, 6])",
        "relocateMarbles(nums = [9, 5, 6, 8], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7], moveFrom = [1, 3], moveTo = [4, 6])",
        "relocateMarbles(nums = [5, 8, 5, 6, 9], moveFrom = [5, 8, 5], moveTo = [6, 9, 5])",
        "relocateMarbles(nums = [3, 1, 4, 1, 5, 9, 2, 6], moveFrom = [1, 3, 5], moveTo = [4, 2, 9])",
        "relocateMarbles(nums = [5, 2, 8, 3, 9], moveFrom = [3, 2], moveTo = [8, 6])",
        "relocateMarbles(nums = [5,6,7,8,9,1,2,3], moveFrom = [5,6], moveTo = [9,10])",
        "relocateMarbles(nums = [1, 3, 5, 7, 9], moveFrom = [1, 2, 4, 5, 6, 7, 9], moveTo = [3, 4, 5, 7, 9, 10, 11])",
        "relocateMarbles(nums = [5, 8, 1, 6, 9, 7, 2, 3, 4], moveFrom = [5, 9, 7], moveTo = [8, 6])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 8)",
        "countPairs(nums = [1, 7, 5, 9, 2, 12, 3], target = 20)",
        "countPairs(nums = [2, 4, 6, 10], target = 10)",
        "countPairs(nums=[2, 7, 11, 15], target=24)",
        "countPairs(nums = [1, 2, 4, 5], target = 8)",
        "countPairs(nums = [1,2,7,9], target = 8)",
        "countPairs(nums = [1, 5, 3, 2, 1], target = 6)",
        "countPairs(nums = [1, 5, 10, 2, 10, 15], target = 17)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [3, 2, 2, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [2, 2, 2])",
        "minLengthAfterRemovals(nums = [4, 3, 1, 1, 2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [3,3,3,2,2,2])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [2,4,0,3,0,5,2,3])",
        "minLengthAfterRemovals(nums = [0,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [4,4,2,3,3,1,1,5,5,5,5])"
    ],
    "sample_303": [
        "countSeniors(details = [\"78 Sunny Day\", \"77 Sunny Day\", \"76 Sunny Day\", \"75 Sunny Day\"])",
        "countSeniors(details = [\"78 Sunny Day\", \"34 Day\", \"21 Sunny Day\"])",
        "countSeniors(details = [\"12:45PM\", \"12:00AM\", \"6:00AM\"])",
        "countSeniors(details = [\"12:40 pm\", \"12:40 pm\", \"12:40 pm\", \"12:40 pm\", \"12:40 pm\", \"12:40 pm\"])",
        "countSeniors(details = [\"12:45 PM\", \"12:00 AM\", \"12:34 PM\", \"12:34 AM\"])",
        "countSeniors(details = [\"12:44AM-12:00AM\", \"1:43PM-12:00AM\", \"1:44PM-12:00AM\"])",
        "countSeniors(details = [\"12:18:00PM\", \"12:18:00AM\"])",
        "countSeniors(details = [\"44 Tina Carlton\", \"10 Geoffrey Cox\", \"50 Tina Carlton\", \"90 Tina Carlton\"])",
        "countSeniors(details = [\"Julia000148\",\"Julia000183\"])",
        "countSeniors(details = [\"78 Drew Thorne 67\", \"71 Mack Laurie 33\", \"96 Cody Harris 88\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"aabcc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"baa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcbdabb\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"ccdd\")",
        "canBeEqual(s1 = \"lazy\", s2 = \"eager\")",
        "canBeEqual(s1 = \"aaaabb\", s2 = \"bbbaaa\")",
        "canBeEqual(s1 = \"1s2\", s2 = \"2s1\")",
        "canBeEqual(s1 = \"s34\", s2 = \"s43\")",
        "canBeEqual(s1 = \"adc\", s2 = \"aac\")",
        "canBeEqual(s1 = \"yzy\", s2 = \"xxy\")",
        "canBeEqual(s1 = \"tg\", s2 = \"xp\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"stv\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aabaa\", s2 = \"aaba\", s3 = \"aabaa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"d\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"code\", s2 = \"coder\", s3 = \"coderack\")",
        "findMinimumOperations(s1 = \"abracadabra\", s2 = \"ac\", s3 = \"cba\")",
        "findMinimumOperations(s1 = \"abcdefgh\", s2 = \"bcd\", s3 = \"aef\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,3,5,4,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 30)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 30)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 6)",
        "lengthOfLongestSubsequence(nums = [4,5,6], target = 10)",
        "lengthOfLongestSubsequence(nums=[1,2,1,2,1], target=3)",
        "lengthOfLongestSubsequence(nums = [1,2,4,5,6,3], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 5, 2, 3, 4, 5, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [4,1,2,2,7,1,2,1], target = 8)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [4, 2, 3])",
        "minimumSum(nums = [3, 4, 9, 5, 1])",
        "minimumSum(nums = [10, 9, 8])",
        "minimumSum(nums = [2, 2, 2, 2, 2, 2, 2, 2])",
        "minimumSum(nums=[5, 3, 1, 3, 2])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"bc\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"aaa\", \"bbb\", \"ccc\", \"ddd\"])",
        "minimizeConcatenatedLength(words = [\"abcde\", \"fghij\", \"klmno\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bca\",\"cab\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"angr\", \"lemon\"])",
        "minimizeConcatenatedLength(words = [\"bac\",\"dad\"])",
        "minimizeConcatenatedLength(words = [\"aabb\", \"cde\", \"dc\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"e\", \"f\", \"g\", \"m\"])",
        "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dfs(i, l, r):\n        if i",
        "minimizeConcatenatedLength(words = [\"ad\", \"de\", \"f\", \"b\", \"ce\", \"ab\", \"fe\", \"d\", \"f\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"0110101\", k = 3)",
        "shortestBeautifulSubstring(s = \"110001\", k = 2)",
        "shortestBeautifulSubstring(s = \"0100101\", k = 4)",
        "shortestBeautifulSubstring(s=\"110101\", k=1)",
        "shortestBeautifulSubstring(s = \"0101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1110110011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11110010101\", k = 4)",
        "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ones = []\n    for i, c in enumerate(s):\n        if c",
        "shortestBeautifulSubstring(s=\"10101010\", k=3)",
        "shortestBeautifulSubstring(s = \"0110111001101101\", k = 4)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"arp\", \"live\", \"strong\"])",
        "minimizeConcatenatedLength(words = [\"xy\", \"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words=[\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"abcde\",\"",
        "minimizeConcatenatedLength(words = [\"ab\", \"cde\", \"fgh\", \"ijklm\"])",
        "minimizeConcatenatedLength(words = [\"you\", \"will\", \"never\", \"understand\"])",
        "minimizeConcatenatedLength(words = [\"eat\", \"sales\", \"sent\"])",
        "minimizeConcatenatedLength(words = [\"ant\",\"ban\",\"ant\",\"cat\",\"cat\",\"cat\",\"dog\",\"cat\"])",
        "minimizeConcatenatedLength(words=[\"b\",\"ban\",\"bana\",\"banan\",\"banana\",\"n\",\"ana\",\"nan\",\"nana\",\"a\",\"an\",\"an\",\"n\",\"b\"])",
        "minimizeConcatenatedLength(words = [\"milk\", \"caa\", \"bab\", \"dad\", \"dog\", \"caa\"])",
        "minimizeConcatenatedLength(words = [\"djhfy\",\"knvj\",\"djmh\",\"fyjd\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 3, m = 1)",
        "differenceOfSums(n = 9, m = 4)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 2, m = 2)",
        "differenceOfSums(n = 25, m = 15)",
        "differenceOfSums(n=8, m=2)",
        "differenceOfSums(n = 100, m = 10)",
        "differenceOfSums(n = 9, m = 10)",
        "differenceOfSums(n = 20, m = 4)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 1, 1, 3])",
        "alternatingSubarray(nums = [-1,0,1,2,3])",
        "alternatingSubarray(nums = [3, 1, 3, 1, 3])",
        "alternatingSubarray(nums = [3, 3, 4])",
        "alternatingSubarray(nums = [2, 3, 1, 1, 4])",
        "alternatingSubarray(nums=[5, 2, 8, 3, 10, 4, 11])",
        "alternatingSubarray(nums=[2,5,11,12,4])",
        "alternatingSubarray(nums = [5, 8, 9, 10, 10, 10, 11, 15])",
        "alternatingSubarray(nums = [2, 4, 6, 4, 6, 6, 4, 8, 10, 10, 10, 10, 12, 14, 14, 16, 18, 20])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [3,2,1,4,5,6])",
        "findMaximumLength(nums = [5,4,0,3,1,6,2])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findMaximumLength(nums = [1,2,3,2,2])",
        "findMaximumLength(nums = [1,2,3,4,5,4,3,2,1])",
        "findMaximumLength(nums = [1,2,4,3])",
        "findMaximumLength(nums = [1,3,2,5,2,2])",
        "findMaximumLength(nums = [0,1,1,0,0])",
        "findMaximumLength(nums = [1,1,1,1,2,1,1,1])",
        "findMaximumLength(nums=[0,1,1,1,0,0,1,1,0,1,1,0,1,1])"
    ],
    "sample_302": [
        "countSeniors(details = [\"12:45 PM\", \"12:40 AM\", \"12:34 PM\"])",
        "countSeniors(details = [\"78 Sunny Day\", \"12 Grad Day\", \"21 Fall Day\"])",
        "countSeniors(details = [\"7868190130M7522\", \"7868190145M7711\", \"7868190231M0133\"])",
        "countSeniors(details = [\"12:45 PM\", \"12:40 AM\", \"05:00 P M\", \"10:45 A M\"])",
        "countSeniors(details = [\"78 Sunny Derby 57\", \"83 Jake St Rob 53\", \"37 Cindy Catch 32\"])",
        "countSeniors(details = [\"12:12:12PM\", \"12:33:11PM\", \"13:11:11PM\"])",
        "countSeniors(details = [\"78 Sunny Frunk 69\", \"12 Cammy Snay 62\", \"23 Bruce Willis 56\", \"35 Louise Rapunzel 37\"])",
        "countSeniors(details=[\"7868190150557246948362679924\",\"50273516356565482832972727993\",\"5105725635465185973370285329\"])",
        "countSeniors(details = [\"Joiiee73563\", \"Faeede7736\", \"Faeede7736\", \"Vaneee1234\"])",
        "countSeniors(details = [\"Fernando:42456368584718461\", \"Jamie:88695910737790987\", \"Jessie:95726144936268204\", \"Amanda:81555284966975397\", \"John:69281776465279629\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"cde\")",
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abd\")",
        "canBeEqual(s1 = \"aba\", s2 = \"cdc\")",
        "canBeEqual(s1 = \"xzy\", s2 = \"xyz\")",
        "canBeEqual(s1 = \"mqz\", s2 = \"mzq\")",
        "canBeEqual(s1 = \"the\", s2 = \"of\")",
        "canBeEqual(s1 = \"bab\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abdqxc\", s2 = \"abdqxc\")",
        "canBeEqual(s1 = \"jjc\", s2 = \"cwm\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices=[1,2,5])",
        "minimumCoins(prices=[2, 5, 7])",
        "minimumCoins(prices = [2, 3, 5, 9])",
        "minimumCoins(prices = [1, 4, 5, 6, 7, 8])",
        "minimumCoins(prices = [1, 3, 7, 1, 5])",
        "minimumCoins(prices = [1, 11, 2, 12, 5])",
        "minimumCoins(prices = [1, 5, 4, 3, 8, 9, 12])",
        "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n: return 0\n    elif n"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "minimumSeconds(A = [1,1,1,1,1])",
        "minimumSeconds(A = [2, 1, 4, 3, 5, 6])",
        "minimumSeconds(A = [1,3,3,2,5,2,2,5,5])",
        "minimumSeconds(A = [1,3,3,2,5,2,2,1])",
        "minimumSeconds(A = [0, 1, 2, 1, 0, 0])",
        "minimumSeconds(A = [1, 5, 10, 15, 20])",
        "minimumSeconds(A = [6, 5, 2, 3, 1, 4])",
        "minimumSeconds(A = [2, 3, 5, 1, 1, 1, 4, 4])",
        "minimumSeconds(A = [5, 6, 1, 1, 7, 3, 8, 10, 1, 100, 2, 2])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"ada\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"mass\",\"as\",\"hero\",\"superhero\"])",
        "maximumNumberOfStringPairs(words=[\"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\",",
        "maximumNumberOfStringPairs(words = [\"a\", \"ab\", \"abc\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"ef\", \"cd\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"aaa\", \"bbb\", \"bbb\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"bd\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"ac\", \"dc\", \"bad\", \"dac\", \"adc\", \"dca\"])",
        "maximumNumberOfStringPairs(words = [\"hey\", \"yey\", \"hey\", \"dog\", \"dog\", \"dog\", \"cat\", \"cat\", \"cat\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1,2,3,4,5,6], nums2 = [1,2,3,4,5,6])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [0], nums2 = [1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [3, 2, 1, 4])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minSum(nums1 = [0, 1, 2, 3, 4], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [5, 3], nums2 = [2, 7])",
        "minSum(nums1 = [1,4,1], nums2 = [1,2])",
        "minSum(nums1 = [2, 1, 1, 2, 2, 5], nums2 = [1, 1, 1, 2, 3, 4])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"na\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"lo\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"mouse\"], x = \"mouse\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"], x = \"t\")",
        "findWordsContaining(words = [\"abc\", \"pqr\", \"def\"], x = \"ab\")",
        "findWordsContaining(words = [\"hi\", \"hello\", \"hey\", \"hola\"], x = \"hello\")",
        "findWordsContaining(words = [\"banana\", \"aardvark\", \"apple\", \"orange\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"sky\", \"the\", \"sky\", \"the\", \"sky\"], x = \"ky\")",
        "findWordsContaining(words = [\"brain\", \"cat\", \"shoes\", \"radical\", \"childhood\"], x = \"c\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 1, k = 3)",
        "maxSum(nums = [3, 2, 6, 4, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 12, 5, 111, 200, 1, 1, 1], m = 3, k = 2)",
        "maxSum(nums = [1,1,3,2,4,2], m = 2, k = 3)",
        "maxSum(nums=[-5, -5, -5, 5, 5, 5], m=2, k=3)",
        "maxSum(nums = [1, 4, 1, 6, 7, 3, 4, 1, 5], m = 3, k = 5)",
        "maxSum(nums = [1,2,4,5,1,2,3,5], m = 3, k = 4)",
        "maxSum(nums = [1, 10, 10, 10, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 4)",
        "maxSum(nums = [0, 2, 5, 7, 1, 0, 5], m = 4, k = 4)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 3, 4], moveFrom = [1, 4], moveTo = [2, 3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2,3], moveTo = [2,3,1])",
        "relocateMarbles(nums = [2,1,3], moveFrom = [2,3], moveTo = [1,4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 3, 5], moveTo = [0, 2, 4])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [3, 1], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [4, 3, 2], moveTo = [1, 4, 3])",
        "relocateMarbles(nums = [2, 1, 5], moveFrom = [2, 1, 4], moveTo = [1, 3, 4])",
        "relocateMarbles(nums = [1, 2, 5, 3, 6, 7, 4], moveFrom = [1, 2, 3, 4, 5], moveTo = [4, 5, 6, 7, 8])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [6, 5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [6, 5, 4])",
        "minimumRightShifts(nums = [1, 2, 2, 3])",
        "minimumRightShifts(nums = [5, 3, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 2, 1, 3])",
        "minimumRightShifts(nums = [4, 4])",
        "minimumRightShifts(nums = [9, 10, 11])",
        "minimumRightShifts(nums = [1,2,3,3,4])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 2)",
        "buyChoco(prices = [4, 2, 1], money = 5)",
        "buyChoco(prices = [2, 5], money = 10)",
        "buyChoco(prices = [3, 2, 1, 7, 4, 10], money = 10)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,3,5,2,4,6], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 101, 2, 3, 100, 4, 5], target = 99)",
        "lengthOfLongestSubsequence(nums = [0, 0, 1], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 5, 3, 6, 7], target = 10)",
        "lengthOfLongestSubsequence(nums=[1, 3, 4, 4, 2, 2, 4], target=2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccddddeeeeedcba\")",
        "longestSemiRepetitiveSubstring(s = \"abacab\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabcc\")",
        "longestSemiRepetitiveSubstring(s = \"abcaabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcbdca\")",
        "longestSemiRepetitiveSubstring(s = \"ABABC\")",
        "longestSemiRepetitiveSubstring(s = \"qwwqwwqww\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"mango\", \"apple\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"coconut\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"ball\", \"cat\", \"dog\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"elephant\"], x = \"at\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"mno\", \"pqr\"], x = \"q\")",
        "findWordsContaining(words = [\"x\", \"y\", \"x\", \"y\"], x = \"x\")",
        "findWordsContaining(words = [\"tst\", \"est\", \"tst\"], x = \"t\")",
        "findWordsContaining(words = [\"candy\", \"ice cream\", \"banana\", \"apple\", \"pizza\"], x = \"a\")",
        "findWordsContaining(words = [\"hey\", \"asd\", \"qwe\", \"ab\"], x = \"as\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push 1\", \"push 2\", \"prev\", \"push 4\", \"push 3\", \"prev\"])",
        "lastVisitedIntegers(words=[\"2\",\"1\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"next\", \"3\", \"prev\", \"4\", \"prev\", \"5\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"print\", \"1\", \"next\", \"print\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"1\", \"5\", \"prev\", \"4\", \"6\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"1\", \"4\", \"3\", \"5\", \"prev\", \"2\", \"2\"])",
        "lastVisitedIntegers(words
    ],
    "sample_394": [
        "canBeEqual(s1 = \"ab\", s2 = \"bc\")",
        "canBeEqual(s1 = \"aa\", s2 = \"ab\")",
        "canBeEqual(s1 = \"ba\", s2 = \"ca\")",
        "canBeEqual(s1 = \"baa\", s2 = \"baa\")",
        "canBeEqual(s1 = \"hi\", s2 = \"ho\")",
        "canBeEqual(s1 = \"abca\", s2 = \"cbca\")",
        "canBeEqual(s1 = \"cba\", s2 = \"ab\")",
        "canBeEqual(s1 = \"1a0\", s2 = \"0a1\")",
        "canBeEqual(s1 = \"abcdef\", s2 = \"adbde\")",
        "canBeEqual(s1 = \"27315\", s2 = \"27315\")"
    ],
    "sample_255": [
        "minimumSum(nums = [3,5,2,3])",
        "minimumSum(nums = [3,5,2,3])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums=[1,3,5,7])",
        "minimumSum(nums = [5,4,3,2])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [4, 7, 5])",
        "minimumSum(nums = [2, 1, 5, 10])",
        "minimumSum(nums = [2,6,3,4,7])",
        "minimumSum(nums = [1, 3, 3, 5])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 7], target=6)",
        "lengthOfLongestSubsequence(nums = [1, 5, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2], target = 5)",
        "lengthOfLongestSubsequence(nums=[2,3,7,8,10], target=10)",
        "lengthOfLongestSubsequence(nums = [5, 2, 1, 3, 4, 2], target = 7)",
        "lengthOfLongestSubsequence(nums=[0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 2"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'pYTHOn')",
        "sortVowels(s = \"sord\")",
        "sortVowels(s = \"aeiuoE\")",
        "sortVowels(s=\"LMHYMP\")",
        "sortVowels(s = \"LoVeL\")",
        "sortVowels(s = \"eIOUy\")",
        "sortVowels(s = \"pRAva\")",
        "sortVowels(s = \"HappyNewYear\")",
        "sortVowels(s = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2],[3,4],[5,6]])",
        "matrixSum(nums = [[1,2,3],[3,4,5],[4,5,6]])",
        "matrixSum(nums = [[5, 5],[5, 5]])",
        "matrixSum(nums = [[3, 4, 5], [4, 5, 6]])",
        "matrixSum(nums = [[1,2], [10, 100]])",
        "matrixSum(nums = [[4, 2, 5], [3, 2, 1]])",
        "matrixSum(nums=[[1, 3, 5, 7], [2, 4, 6, 8], [3, 5, 7, 9]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [2, 1, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [1, 3, 2, 4])",
        "maximumTripletValue(nums = [0, 1, 0])",
        "maximumTripletValue(nums = [3, 1, 4, 6, 5])",
        "maximumTripletValue(nums = [-10000, -10000, -10000])",
        "maximumTripletValue(nums=[0, 1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 3, 2, 5])",
        "maximumTripletValue(nums = [2, 3, 1, 5, 6])",
        "maximumTripletValue(nums = [1, 1, -2, -3, 4, -2])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 3, 2, 2, 5, 2, 3, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2, 1])",
        "alternatingSubarray(nums = [5, 4, 2, 1, 3])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 2, 1, 4, 3, 3])",
        "alternatingSubarray(nums=[0,3,2,4,2,1])",
        "alternatingSubarray(nums=[-1, 2, 3, 5, 7, 11])",
        "alternatingSubarray(nums = [1,1,3,5,9,9,9,10])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"abracadabra\", k = 5)",
        "beautifulSubstrings(s = \"abcac\", k = 2)",
        "beautifulSubstrings(s = \"ae\", k = 2)",
        "beautifulSubstrings(s = \"aaa\", k = 3)",
        "beautifulSubstrings(s = \"amazon\", k = 3)",
        "beautifulSubstrings(s = \"abcde\", k = 10)",
        "beautifulSubstrings(s = \"uva\", k = 2)",
        "beautifulSubstrings(s = \"awesome\", k = 4)",
        "beautifulSubstrings(s=\"aebc\", k=4)",
        "beautifulSubstrings(s = \"bcbcbba\", k = 3)"
    ],
    "sample_449": [
        "minChanges(s = \"aa\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"aaaabbbb\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"x\")",
        "minChanges(s=\"abaa\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s=\"0110011\")",
        "minChanges(s = \"ABBB\")",
        "minChanges(s = \"xkodke\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"1001101\")",
        "minimumSteps(s = \"1001101\")",
        "minimumSteps(s = \"1111111\")",
        "minimumSteps(s = \"001101\")",
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s = \"1100111\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1001010\")",
        "minimumSteps(s = \"10111\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"78SunLight\",\"79Sunny\",\"80Sunny\",\"81Sunny\",\"82Sunny\"])",
        "countSeniors(details = [\"12/05/1998 seniors\", \"11/10/1967 juniors\"])",
        "countSeniors(details = [\"78 Sunny Day\", \"38 Sunny Day\", \"21 Sunny Day\", \"93 Dreary Day\"])",
        "countSeniors(details = [\"78 Sunny Dorado 34 Alive\", \"12 No Rain 90 Die2\", \"10 Yosemite 1 Rain 91\", \"11 No Rain 93 Die\"])",
        "countSeniors(details = [\"01-01-1953\", \"02-07-1957\", \"07-01-1959\", \"07-08-1958\", \"04-06-1960\", \"01-12-1961\"])",
        "countSeniors(details = [\"21-04-1978\", \"21-04-2002\", \"21-05-1979\", \"21-05-2002\"])",
        "countSeniors(details = [\"78 Sunny Derby 59\", \"12 San Jose 92\", \"4001 Los Angeles 18\", \"106011 Hollywood Blvd 82\", \"22 Saratoga 51\"])",
        "countSeniors(details=[\"7213089214 6744425230\", \"1937193719 3719371939\", \"9811080807 1717969798\"])",
        "countSeniors(details = [\"Age: 7796\", \"Age: 3711\", \"Age: 1483\", \"Age: 832\", \"Age: 2669\", \"Age: 3246\", \"Age: 7720\"])",
        "countSeniors(details=[\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\",\"8496370560M4615\",\"6460715730M9647\",\"5611893360F4273\",\"4159543630F4572\",\"9811158250M7964\",\"4556056180M9731\",\"5062259290F4530\",\"4291580140M9136\",\"8532430670M9763\",\"4559350130F4530\",\"7573489960F4211\",\"7411594530F4111\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [2,1,6,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3])",
        "minGroupsForValidAssignment(nums = [3,3,5,5,5,5,5])",
        "minGroupsForValidAssignment(nums = [1,4,5,7])",
        "minGroupsForValidAssignment(nums = [1, 2, 4, 1, 2, 3])",
        "minGroupsForValidAssignment(nums = [4, 1, 1, 2, 2, 5])",
        "minGroupsForValidAssignment(nums=[1,2,2,2,3,5,5,6])",
        "minGroupsForValidAssignment(nums = [3, 5, 1, 2, 6, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [5, 8, 2, 7, 5, 7, 9, 5, 7, 3, 4, 5, 5, 3, 7, 5, 1, 3, 3, 7, 2, 6, 8, 8, 8, 5, 5, 6, 1, 1, 3, 8, 3, 2, 4, 4, 8, 3, 10, 5, 5, 3, 6, 2, 4, 5, 4, 4, 9, 2, 9, 2, 9, 4, 5, 1, 8, 9, 6, 2, 5, 9, 3, 8, 6, 1, 1, 2, 5, 8, 2, 7, 4, 1, 9, 10, 4, 7, 3, 9, 2, 7, 2, 2, 3, 4, 4, 4, 9, 2, 4, 2, 2, 1, 6, 2, 7, 7, 5, 2, 1, 8, 3, 6, 2, 7, 4, 1, 9, 10, 4, 7, 3, 9, 2, 7, 2, 2, 3, 4, 4, 4, 9, 2, 4, 2, 2, 1, 6, 2, 7, 7, 5, 2, 1, 8, 3, 6, 2, 7, 4, 1, 9, 10, 4, 7, 3, 9, 2, 7, 2, 2, 3, 4, 4, 4, 9, 2, 4, 2, 2, 1, 6, 2,"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 3], [3, 3], [5, 3], [2, 2]], k = 3)",
        "countPairs(coordinates = [[1, 3], [3, 3], [5, 3], [2, 2]], k = 3)",
        "countPairs(coordinates = [[0, 0], [2, 2], [3, 4], [3, 5]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 0]], k = 3)",
        "countPairs(coordinates=[[1, 3], [3, 3], [5, 3], [2, 2]], k=2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [3, 4], [1, 2], [1, 3], [1, 4]], k = 3)",
        "countPairs(coordinates = [[1, 2], [3, 5], [1, 5], [5, 10]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 0], [1, -1]], k = 2)",
        "countPairs(coordinates = [[1, 0], [0, 0], [0, -1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 3)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 4, 2, 10, 2, 3, 1, 0, 20], m = 4, k = 4)",
        "maxSum(nums = [0, 0, 0, 0], m = 2, k = 1)",
        "maxSum(nums = [1,2,3,1,4,5], m = 3, k = 3)",
        "maxSum(nums = [2, 5, 4, 1, 3, 6, 7], m = 3, k = 5)",
        "maxSum(nums = [1,2,1,1,1,5,6], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 2, 2, 3, 3, 3, 4, 5, 6, 7], m = 4, k = 4)",
        "maxSum(nums=[2, 2, 2, 7, 7, 2, 2], m=5, k=3)",
        "def maxSum(nums: List[int], m: int, k: int) -> int:\n    ans = 0\n    n = len(nums)\n    cur = 0\n    dic = Counter()\n    for i in range(k):\n        cur += nums[i]\n        dic[nums[i]] += 1\n    if len(dic) >= m:\n        ans = cur\n    for i in range(k, n):\n        cur += nums[i]\n        cur -= nums[i - k]\n        dic[nums[i]] += 1\n        dic[nums[i - k]] -= 1\n        if dic[nums[i - k]]"
    ],
    "sample_452": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abcc\")",
        "minChanges(s = \"abbaa\")",
        "minChanges(s=\"abaa\")",
        "minChanges(s = \"mqmqm\")",
        "minChanges(s = \"AABABB\")",
        "minChanges(s = \"aaabbbbccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    ],
    "sample_279": [
        "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]),\n        min_swaps(nums1, nums2, nums2[-1], nums1[-1]))",
        "minOperations(nums1 = [1, 3, 5, 4], nums2 = [1, 2, 3, 7])",
        "minOperations(nums1 = [1,3,5,2], nums2 = [2,6,5,4])",
        "minOperations(nums1 = [2, 3, 2], nums2 = [1, 3, 2])",
        "minOperations(nums1 = [2, 3, 2], nums2 = [3, 2, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [2,3,2], nums2 = [4,4,1])",
        "minOperations(nums1 = [1,2,2,1,1,2,2,1], nums2 = [1,2,1,2,1,2,2,1])",
        "minOperations(nums1 = [1, 3, 5, 2], nums2 = [2, 6, 5, 4])",
        "min_swaps([1, 5, 4, 2, 6, 9, 7], [0, 4, 4, 5, 9, 1, 6], 9, 1)"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"1111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101111\", k = 2)",
        "shortestBeautifulSubstring(s=\"10101\", k=2)",
        "shortestBeautifulSubstring(s='10111', k=2)",
        "shortestBeautifulSubstring(s = '10101', k = 2)",
        "shortestBeautifulSubstring(s=\"011111\", k=5)",
        "shortestBeautifulSubstring(s = \"11001011\", k = 2)",
        "shortestBeautifulSubstring(s=\"11100010010001010100\", k=3)",
        "shortestBeautifulSubstring(s
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 7, 3, 4])",
        "maximumTripletValue(nums = [1, 4, 1])",
        "maximumTripletValue(nums=[1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 10, 2, 6, 3])",
        "maximumTripletValue(nums = [-3, -2, -1, 0, 0, 1, 2, 3])",
        "maximumTripletValue(nums = [3, 2, 5, 4, 1, 6, 7])",
        "maximumTripletValue(nums = [1, 3, 2, 6, 4, 8])",
        "maximumTripletValue(nums = [3,2,7,1])",
        "maximumTripletValue(nums = [1, 12, 3, 13])",
        "maximumTripletValue(nums = [-10,-7,-5,12,15])"
    ],
    "sample_465": [
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n=10, limit=4)",
        "distributeCandies(n=7, limit=6)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1,4,3,2,5,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,1,2,2])",
        "minGroupsForValidAssignment(nums = [2,2,1,3,3,1])",
        "minGroupsForValidAssignment(nums = [1,3,6,13,15,18])",
        "minGroupsForValidAssignment(nums=[2, 2, 3, 3, 4, 4, 5, 5, 6, 6])",
        "minGroupsForValidAssignment(nums = [5, 6, 7])",
        "minGroupsForValidAssignment(nums=[2,2,3,3,4,4,4,6,6,6,8,8,8,10,10,10])",
        "minGroupsForValidAssignment(nums = [6,4,10,10,10])",
        "minGroupsForValidAssignment(nums=[1, 4, 16, 16, 4])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 4, 1], nums2 = [5, 7, 2])",
        "minSum(nums1 = [4,1,2,3], nums2 = [2,2,2,2])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1,4,5,2], nums2 = [6,5,2,2])",
        "minSum(nums1 = [2,4,3], nums2 = [5,6,7])",
        "minSum(nums1 = [1,1], nums2 = [1,0])",
        "minSum(nums1 = [0,0,0,0,0], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [3, 4, 6], nums2 = [1, 5, 7])",
        "minSum(nums1 = [5, 7, 0, 2], nums2 = [2, 1, 4, 4])"
    ],
    "sample_453": [
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabcc\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"bad\")",
        "minChanges(s = \"ababaa\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"abbcccdddd\")",
        "minChanges(s = \"daaddaad\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"aiai\", k = 3)",
        "beautifulSubstrings(s = \"aabaa\", k = 1)",
        "beautifulSubstrings(s = \"aia\", k = 1)",
        "beautifulSubstrings(s=\"aaaa\", k=2)",
        "beautifulSubstrings(s=\"aaiai\", k=1)",
        "beautifulSubstrings(s = \"aaaabaaa\", k = 3)",
        "beautifulSubstrings(s = \"baj\", k = 2)",
        "beautifulSubstrings(s=\"aiaoiai\", k=5)",
        "beautifulSubstrings(s = \"ccaaaaccaaaacaa\", k = 3)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 4)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"bbaaaaabb\", k = 3)",
        "beautifulSubstrings(s = \"aeee\", k = 2)",
        "beautifulSubstrings(s = \"aabe\", k = 3)",
        "beautifulSubstrings(s=\"leetcode\", k=3)",
        "beautifulSubstrings(s = \"abcbabcb\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaeeeiaaeiou\", k = 2)",
        "beautifulSubstrings(s = \"abcdedfghi\", k = 4)"
    ],
    "sample_369": [
        "sortVowels(s = \"lemon\")",
        "sortVowels(s = 'happy')",
        "sortVowels(s=\"hello\")",
        "sortVowels(s = 'lemon')",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"ruby\")",
        "sortVowels(s = 'puppy')",
        "sortVowels(s = \"heLlO\")",
        "sortVowels(s = \"My name is Karthik\")",
        "sortVowels(s = \"My name is John\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5])",
        "minimumSeconds(nums=[1,2,3])",
        "minimumSeconds(nums = [0, 1, 2, 2])",
        "minimumSeconds(nums = [1, 2, 2, 1, 3])",
        "minimumSeconds(nums = [1, 3, 5, 2])",
        "minimumSeconds(nums=[1, 3, 2])",
        "minimumSeconds(nums = [1, 2, 4, 7])",
        "minimumSeconds(nums = [1, 2, 10])",
        "minimumSeconds(nums = [2, 1, 3, 4, 3, 2, 3])",
        "minimumSeconds(nums=[1, 1, 3, 2, 1, 1, 2])"
    ],
    "sample_258": [
        "minimumSum(nums = [5, 4, 9])",
        "minimumSum(nums = [5, 4, 9, 2, 3])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [6, 10, 15])",
        "minimumSum(nums = [2, 1, 3])",
        "minimumSum(nums = [1, 3, 6, 10, 15])",
        "minimumSum(nums = [4, 5, 10, 1])",
        "minimumSum(nums = [6, 7, 10, 11, 15])",
        "minimumSum(nums = [2,2,4,4,1,1])",
        "minimumSum(nums = [20, 1, 18, 3, 10, 17, 13])"
    ],
    "sample_417": [
        "minOperations(nums = [3, 2, 20, 1, 1, 3], k = 10)",
        "minOperations(nums = [3, 2, 20, 1, 1, 3], k = 5)",
        "minOperations(nums = [1, 1, 4, 2, 3], k = 5)",
        "minOperations(nums = [1,2,3], k = 3)",
        "minOperations(nums=[1,2,3,4], k=5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 6)",
        "minOperations(nums = [1, 2, 3, 3, 4, 4], k = 5)",
        "minOperations(nums = [2,3,1,1,5], k = 5)",
        "minOperations(nums = [5, 10, 7, 2, 10], k = 2)",
        "minOperations(nums = [2,5,4,5,2,3,4,1], k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 1, 3, 4], m = 2, k = 3)",
        "maxSum(A = [1, 2, 1, 4], m = 3, k = 2)",
        "maxSum(A = [4, 5, 1, 6, 2, 7, 8], m = 3, k = 4)",
        "maxSum(A = [1, 2, 2, 4, 4], m = 3, k = 2)",
        "maxSum(A = [5, 6, 7, 8, 9, 10], m = 3, k = 4)",
        "maxSum(A=[1, 2, 2, 1, 3, 1], m=3, k=4)",
        "maxSum(A = [5, 2, 2, 2, 6, 5], m = 3, k = 2)",
        "def maxSum(A, m, k):\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]]",
        "def maxSum(A, m, k):\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]]"
    ],
    "sample_293": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s=\"00110\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"100\")",
        "minimumSteps(s = \"0100101010\")",
        "minimumSteps(s = \"0001110\")",
        "minimumSteps(s = \"0010110\")",
        "minimumSteps(s = \"0011110\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1,2,3,4])",
        "maxSubarrays(nums = [-2, -3, 4, -1, -2, 1, 5, -3])",
        "maxSubarrays(nums = [-2, -3, 4, -1, -2, 1, 5, -3])",
        "maxSubarrays(nums = [3, 10, 2, 4, 8])",
        "maxSubarrays(nums=[-4, -2, -2, -2, 4, 2, 2])",
        "maxSubarrays(nums = [1000000000000000000])",
        "maxSubarrays(nums = [3,5,7,2,1,6,9])",
        "maxSubarrays(nums = [2, 4, 4, 6, 1, 1, 1, 0, 2, 4])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [3, 2, 3], money = 2)",
        "buyChoco(prices = [2, 2], money = 5)",
        "buyChoco(prices = [2, 5], money = 10)",
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices = [2, 3, 4], money = 10)",
        "buyChoco(prices = [5, 5], money = 10)"
    ],
    "sample_290": [
        "minimumSteps(s = \"101010\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"00101101\")",
        "minimumSteps(s = \"011100\")",
        "minimumSteps(s = \"0001010101\")",
        "minimumSteps(s = \"1010101010\")",
        "minimumSteps(s = \"100101010\")",
        "minimumSteps(s=\"0001010111\")",
        "minimumSteps(s=\"000110111\")",
        "minimumSteps(s = \"100001001000001001000001001000001\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,2,3,3])",
        "minLengthAfterRemovals(nums=[1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 5, 3, 4])",
        "minLengthAfterRemovals(nums = [3,3,3,4,3])",
        "minLengthAfterRemovals(nums = [5, 5, 5, 5, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [3,2,3,2,3,2,3,2,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4,4,5,5])"
    ],
    "sample_420": [
        "minOperations(nums = [3, 2, 20, 1, 1, 3], k = 5)",
        "minOperations(nums = [3,2,20,1,1,3], k = 5)",
        "minOperations(nums = [3, 2, 20, 1, 1, 3], k = 3)",
        "minOperations(nums = [1, 5, 6, 7], k = 3)",
        "minOperations(nums=[3,5,2,6], k=2)",
        "minOperations(nums = [1, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [4,2,3], k = 4)",
        "minOperations(nums = [2, 14, 11, 26], k = 5)",
        "minOperations(nums=[5,2,3,1,6,4], k=7)",
        "minOperations(nums = [2,4,6,7,3,3,1,3,1,1], k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 2, 1, 1])",
        "isGood(nums = [1, 1, 2, 2, 3, 3, 3])",
        "isGood(nums = [1, 1, 3, 3, 5, 5, 7, 9])",
        "isGood(nums = [2, 1, 1, 2])",
        "isGood(nums = [1, 2, 3, 1, 2, 3, 4])",
        "isGood(nums = [3, 1, 1, 3])",
        "isGood(nums=[1, 3, 3, 1, 4])",
        "isGood(nums = [1, 2, 2, 5, 3, 4])",
        "isGood(nums = [1, 2, 1, 2, 1, 4, 1, 2])"
    ],
    "sample_325": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n=192)",
        "isFascinating(n = 7)",
        "isFascinating(n = 7)",
        "isFascinating(n = 209)",
        "isFascinating(n = 39)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [2,1,3])",
        "isGood(nums = [5, 6, 7, 8])",
        "isGood(nums = [1, 3, 1, 2])",
        "isGood(nums = [3,2,5,1,4])",
        "isGood(nums = [4, 4, 5, 5])",
        "isGood(nums = [2, 4, 2, 2, 4])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 1, 2, 2])",
        "minimumSeconds(nums = [3,2,1,4,5,6])",
        "minimumSeconds(nums = [1,2,3,1])",
        "minimumSeconds(nums = [2, 3, 3, 4, 5])",
        "minimumSeconds(nums = [1, 5, 2, 3])",
        "minimumSeconds(nums = [2, 4, 3, 2])",
        "minimumSeconds(nums = [0, 0, 0, 1, 1, 2, 2, 3, 4, 4])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [2, 4, 1, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 0])",
        "minimumRightShifts(nums = [1, 0, 1, 0])",
        "minimumRightShifts(nums = [1, 2, 3, 10, 5, 6])",
        "minimumRightShifts(nums = [2, 5, 6, 3, 1, 4, 10])",
        "minimumRightShifts(nums=[3, 4, 7, 12, 11, 9, 10])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [3, 1, 2, 4, 5])",
        "isGood(nums = [3,1,2,4])",
        "isGood(nums = [0, 1, 2, 4, 5, 6])",
        "isGood(nums = [3,2,4,1])",
        "isGood(nums = [1,2,3,4,4])",
        "isGood(nums = [1, 3, 2, 2, 4])",
        "isGood(nums = [1, 2, 4, 6, 7, 8, 9, 10])",
        "isGood(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4,5,6,7], nums2 = [1,1,2,2,2,2,7])",
        "minOperations(nums1 = [3,2,5], nums2 = [1,4,7])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [3,5,2,4,6], nums2 = [5,6,7,8,9])",
        "minOperations(nums1 = [1,2,4,3], nums2 = [5,6,6,5])",
        "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    @cache\n    def f(idx, a, b):\n        if idx",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,5])",
        "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    ans = float(\"inf\")\n    @cache\n    def f(idx, a, b):\n        nonlocal ans\n        if idx",
        "minOperations(nums1 = [0, 10, 10], nums2 = [4, 11, 7])",
        "minOperations(nums1 = [2, 9, 4, 6, 1, 3, 5, 8, 10, 11, 12], nums2 = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"101101\", k = 4)",
        "shortestBeautifulSubstring(s = \"111000\", k = 1)",
        "shortestBeautifulSubstring(s = \"0110101\", k = 4)",
        "shortestBeautifulSubstring(s = \"111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101011\", k = 1)",
        "shortestBeautifulSubstring(s='101011010', k=4)",
        "shortestBeautifulSubstring(s = \"21345\", k = 2)",
        "shortestBeautifulSubstring(s = \"2384626224\", k = 3)",
        "shortestBeautifulSubstring(s = \"523432\", k = 3)",
        "shortestBeautifulSubstring(s = \"23825886273852555352294436634959748923\", k = 2)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3])",
        "minGroupsForValidAssignment(nums = [4, 5, 2, 1, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 3, 4, 4, 5, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [3, 2, 1, 1, 1, 2])",
        "minGroupsForValidAssignment(nums = [3,3,5,5,5,5,4,3,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,4,4,4,4,8,8,8,8])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"0001101\")",
        "minimumSteps(s = \"010110\")",
        "minimumSteps(s = \"11101\")",
        "minimumSteps(s = \"0100010\")",
        "minimumSteps(s = \"010110100\")",
        "minimumSteps(s = \"010010111\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 30)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 4, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 101, 2, 3, 100, 4, 5], target = 102)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 4, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,3,5,7], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 5, 7, 9, 10], target = 8)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1,2,1,2,1])",
        "minimumSum(nums = [3,1,1,1,9])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3,1,2,10])",
        "minimumSum(nums=[1,2,3,4,5,6])",
        "minimumSum(nums=[3,4,5,1,6])",
        "minimumSum(nums = [2, 3, 5, 4, 6, 1, 3])",
        "minimumSum(nums = [1,15,7,3,12,2,14,5,11,10])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [3, 5, 2, 6], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 1], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,1,2], m = 2, k = 3)",
        "maxSum(nums=[5, 2, 1, 3, 4], m=2, k=3)",
        "maxSum(nums = [10, 2, 5, 7, 2, 2, 1], m = 3, k = 2)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"gx\", s2 = \"gx\", s3 = \"gx\")",
        "findMinimumOperations(s1=\"abc\", s2=\"fgh\", s3=\"ijk\")",
        "findMinimumOperations(s1 = \"aabcbc\", s2 = \"aabcbd\", s3 = \"aabccb\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdabcdab\", s3 = \"acbacbac\")",
        "findMinimumOperations(s1 = \"abcdefgh\", s2 = \"bcde\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"defghi\", s3 = \"ghijkl\")",
        "findMinimumOperations(s1 = \"h\", s2 = \"b\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"mcm\", s2 = \"zom\", s3 = \"xom\")",
        "findMinimumOperations(s1 = \"vqv\", s2 = \"mhm\", s3 = \"mhm\")"
    ],
    "sample_427": [
        "minOperations(nums = [3,3,2,4,2])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [5, 5, 5])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 2])",
        "minOperations(nums = [2,2,2,2,2])",
        "minOperations(nums = [2, 1, 2, 2, 2, 2])",
        "minOperations(nums=[1, 3, 4, 2, 6, 8])",
        "minOperations(nums = [3, 2, 5, 5, 5])",
        "minOperations(nums = [3, 6, 5, 2, 5, 2, 1])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [2, 7, 4, 1, 8, 1])",
        "minimumCoins(prices = [2, 5, 10, 1])",
        "minimumCoins(prices = [2, 3, 5, 7, 11])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 3, 5, 2, 8])",
        "minimumCoins(prices = [3, 2, 10, 4, 1, 6])",
        "minimumCoins(prices = [6, 3, 1, 3, 1, 3])",
        "minimumCoins(prices = [3, 3, 4, 10, 10, 10])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums=[1,1,1])",
        "minimumSeconds(nums=[1,2,3,1,2,3])",
        "minimumSeconds(nums=[1,1,1,1,2,2,2])",
        "minimumSeconds(nums = [1,1,1,2,2,3])",
        "minimumSeconds(nums = [3,5,1,2,3])",
        "minimumSeconds(nums = [1, 1, 2, 1, 1, 2, 2, 2])",
        "minimumSeconds(nums=[1,3,2,4,3,5])",
        "minimumSeconds(nums=[2,6,8,9,10])",
        "minimumSeconds(nums = [3, 2, 2, 5, 1, 5, 4])"
    ],
    "sample_448": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"baaa\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"aaaabbbb\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aaabbca\")",
        "minChanges(s = \"abbbbba\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 6, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [10, 2, 5, 1, 1], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5, 6], limit = 5)",
        "lexicographicallySmallestArray(nums=[2, 1, 4, 3, 6, 5], limit=1)",
        "lexicographicallySmallestArray(nums = [10, 2, 7, 5, 8], limit = 3)",
        "lexicographicallySmallestArray(nums = [3, 2, 1, 4, 2, 3, 3], limit = 2)",
        "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    \n    order = sorted(range(n), key = lambda x: nums[x])\n    \n    out = [-1] * n\n    \n    l = 0\n    for i in range(n):\n        if i",
        "lexicographicallySmallestArray(nums = [10, 11, 13, 17, 18, 19, 20, 22, 23, 25, 29, 30, 32, 33, 34, 35], limit = 5)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums=[1,1,2,2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums=[1, 2, 1])",
        "sumCounts(nums = [1, 1, 1, 1])",
        "sumCounts(nums=[2, 2, 2])",
        "sumCounts(nums = [1, 1, 2, 1, 1, 1])",
        "sumCounts(nums=[1,2,3,1,4])",
        "sumCounts(nums = [1,1,1,1,2,2,2,2])",
        "sumCounts(nums = [1, 2, 2, 2, 2, 2])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [3, 4, 5, 2])",
        "maximumTripletValue(nums = [3, 4, 5, 2])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [3, 4, 2])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [-1,-2,-3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [10, 10, 10, 10])",
        "maximumTripletValue(nums = [1, 2, 10, 5, 5])",
        "maximumTripletValue(nums = [10, 3, 2, 20])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"xyyx\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 3)",
        "beautifulSubstrings(s = \"codeforces\", k = 7)",
        "beautifulSubstrings(s = \"aeeeee\", k = 2)",
        "beautifulSubstrings(s = \"bcbca\", k = 4)",
        "beautifulSubstrings(s = \"aeiouaeiouaeiou\", k = 5)",
        "beautifulSubstrings(s=\"abcabc\", k=10)",
        "beautifulSubstrings(s = \"iiij\", k = 5)"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 4, 2, 7], target = 12)",
        "countPairs(nums = [1,1,1,1], target = 2)",
        "countPairs(nums = [1,4,2,7], target = 12)",
        "countPairs(nums = [1,1,1], target = 2)",
        "countPairs(nums = [1, 7, 9, 2, 5, 4, 0, 3, 6], target = 12)",
        "countPairs(nums = [1, 2, 5, 6, 9, 10], target = 6)",
        "countPairs(nums = [3, 5, 1, 3], target = 8)",
        "countPairs(nums = [2, 3, 3, 3], target = 7)"
    ],
    "sample_462": [
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n = 10, limit = 7)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3], nums2 = [2,1,3])",
        "minOperations(nums1 = [1,2,3], nums2 = [2,1,3])",
        "minOperations(nums1 = [2,2], nums2 = [2,2])",
        "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans",
        "minOperations(nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,1])",
        "minOperations(nums1 = [5,6,7], nums2 = [3,6,100])",
        "minOperations(nums1 = [1,2,3,4,5,6,10], nums2 = [9,8,7,6,5,4,3])",
        "minOperations(nums1 = [1,2,2,2], nums2 = [1,2,2,1])",
        "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans",
        "minOperations(nums1 = [5, 7, 9], nums2 = [2, 5, 1])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 1, 2, 2, 3])",
        "minOperations(nums = [1,1,1,1,1])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 3])",
        "minOperations(nums = [1, 3, 2, 4, 5, 6])",
        "minOperations(nums = [2,2,1,3])",
        "minOperations(nums = [1, 1, 1, 1, 2, 2])",
        "minOperations(nums = [2,5,3,4,6])",
        "minOperations(nums=[1,1,1,2,3,4,4])",
        "minOperations(nums = [3,3,2,4,2,2,3,3,4,3,1,1,4,4,1,4,2,4,1,1,4,3,3,4,3,1,3,3,3,2,4,1,1,4,1,2,3,1,2,1,2,1,3,1,1,4,4,1,3,2,1,3,1,1,4,4,2,2,3,4,1,2,1,1,2,2,4,3,3,3,4,1,2,1,4,4,1,4,2,1,1,2,1,4,3,1,1,2,1,1,1,1,2,3,4,2,4,3,2,3,2,1,4,1,1,4,3,1,1,4,4,3,4,4,4,1,2,1,3,4,1,1,2,4,3,1,2,4,1,3,2,1,4,1,3,1,4,2,3,2,1,4,1,2,1,3,2,1,3,2,1,1,4,3,3,3,4,1,2,4,1,1,2,1,3,1,1,1,2,1,2,2,4,1,1,4,4,2,4,3,2,4,1,3,3,1,3,2,1,1,4,4,3,1,4,4,3,3,1,1,4,3,2,3,2,4,2,2,2,3,3,1,3,1,4,4,4,4,3,4,2,4,3,1,1,1,3,1,4,1,1,1,4,1,4,4,3,4,1,1,2,1,2,4,2,4,3,2,1,3,1,2,1,1,2,3,3,1,3,3,3,2,2,1,4,4,4,1,3,2,4,4,2,4,1,1"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"11101\", k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11101\", k = 4)",
        "shortestBeautifulSubstring(s = \"1101100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110101\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110101\", k = 4)",
        "shortestBeautifulSubstring(s = \"10010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"010111100010\", k = 6)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1, 1, 2, 2, 2])",
        "minimumSeconds(nums = [4, 2, 1, 3])",
        "minimumSeconds(nums = [1, 3, 5, 2])",
        "minimumSeconds(nums = [4, 1, 7, 2, 3])",
        "minimumSeconds(nums = [1,3,4,2,5,8,10,6,9,11])",
        "minimumSeconds(nums = [1, 1, 2, 2, 4, 4, 4, 4, 1000, 1000, 1000])",
        "minimumSeconds(nums = [5, 4, 9, 1, 2, 5, 3, 6])"
    ],
    "sample_428": [
        "minOperations(nums = [3,3,2,4,3])",
        "minOperations(nums = [3,3,2,4,4,4])",
        "minOperations(nums = [2,2,2,2])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations(nums = [3, 3, 3, 3])",
        "minOperations(nums = [3,3,3,3])",
        "minOperations(nums = [1,2,3])",
        "minOperations(nums = [2,1,2])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [2, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 1, 2, 3])",
        "alternatingSubarray(nums = [1, 1, 1, 1, 1, 1])",
        "alternatingSubarray(nums = [5, 5, 5, 5, 5])",
        "alternatingSubarray(nums = [1, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 7, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 1])",
        "alternatingSubarray(nums = [1,2,1,1,4,5])",
        "alternatingSubarray(nums = [1, 1, 1, 2, 4, 3, 5])",
        "alternatingSubarray(nums = [2, 3, 10, 2, 1, 4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 1])",
        "minLengthAfterRemovals(nums = [2, 2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minLengthAfterRemovals(nums = [3, 3, 3, 2, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 1])",
        "minLengthAfterRemovals(nums=[1, 2, 1, 1, 3])",
        "minLengthAfterRemovals(nums = [3, 2, 3, 4, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 4])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [3,2,4,3,2,4,3,2])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyx\", \"bbbON\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"xyx\",\"poi\",\"rlp\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"dd\", \"aa\", \"dd\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"aa\", \"bc\", \"ca\"])",
        "maximumNumberOfStringPairs(words = [\"x\", \"y\", \"za\", \"a\", \"z\"])",
        "maximumNumberOfStringPairs(words = [\"ca\",\"bc\",\"ac\",\"cb\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"mass\", \"am\", \"a\", \"sticky\", \"bag\", \"add\", \"ads\", \"deny\", \"dam\", \"dan\", \"drop\", \"eat\", \"pea\", \"pap\", \"pep\", \"pen\", \"pap\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abracadabra\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ad\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azbc\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"bnnn\")",
        "canMakeSubsequence(str1 = \"dab\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"befc\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"kpq\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s=\"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"baaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabaaa\")",
        "longestSemiRepetitiveSubstring(s
        "longestSemiRepetitiveSubstring(s = \"xxyzy\")",
        "longestSemiRepetitiveSubstring(s = \"apple\")",
        "longestSemiRepetitiveSubstring(s = \"qwertyuiopasdfghjklzxcvbnm\")",
        "longestSemiRepetitiveSubstring(s = \"abaaaaaaaaaaaaaaaaa\")"
    ],
    "sample_399": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums=[1,2,3,4,5,6,7,8,9,10], m=3, k=2)",
        "maxSum(nums=[5,2,1,3,4,1], m=3, k=2)",
        "maxSum(nums = [1,1,4,1], m = 3, k = 4)",
        "maxSum(nums = [1,2,1,4,3,1], m = 4, k = 2)",
        "maxSum(nums = [5, 5, 2, 3, 3], m = 3, k = 2)",
        "maxSum(nums = [1, 3, 6, 8, 10, 11, 12, 13, 15], m = 3, k = 2)",
        "def maxSum(nums: List[int], m: int, k: int) -> int:\n    # print(nums)\n    cnt = defaultdict(int)\n    ans = 0\n    c = 0\n    s = 0\n    for r,x in enumerate(nums):\n        cnt[x] += 1\n        if cnt[x]",
        "maxSum(nums = [3,4,6,4,5,3,4,6,3,4,4,6,3,5,4,5,3,4,6,3,4,3,6,3,5,4,6,3,5,3,4,4,5,3,6,3,4,6,3,4,3,5,6,3,4,6,3,5,6,3,4,5,3,4,4,6,3,5,4,3,4,5,3,4,6,3,4,5,6,3,4,3,4,3,4,6,3,4,5,3,4,5,3,4,6,3,5,4,6,3,5,3,4,3,4,5,6,3,4,3,4,5,3,4,6,3,5,4,3,4,5,3,4,6,3,4,5,6,3,4,6,3,5,4,3,4,5,6,3,4,5,3,4,6,3,4,5,6,3,5,4,3,4,5,3,4,6,3,5,4,6,3,4,5,3,4,6,3,5,4,5,3,4,6,3,4,5,6,3,4,3,4,3,4,6,3,4,5,3,4,6,3,4,5,6,3,5,4,3,4,5,3,4,6,3,5,4,3,4,5,3,4,6,3,4,5,6,3,5,4,3,4,5,3,4,6,3,5,4,3,4,5,6,3,4,3,4,5,3,4,6,3,5,4,3,4,5,3,4,6,3,4,5,6,3,5,4,3,4,5,3,4,6,3,4,5,6,3,5,4,3,4,5,3,4,6,3",
        "maxSum(nums=[2,7,9,4,3,2,3,5,1,0,2,6,8,1,9,6,3,7,5,6,9,9,6,0,7,1,2,6,1,9,1,6,1,3,0,9,8,0,6,2,2,3,5,4,2,4,6,5,6,9,4,1,1,9,3,9,1,2,0,4,4,6,2,4,3,5,9,9,9,1,5,2,5,7,8,9,0,2,6,2,8,2,4,3,2,8,6,9,5,6,6,8,4,8,6,7,2,9,1,6,5,4,2,1,1,4,0,8,1,8,1,2,9,9,4,7,7,0,6,8,6,0,7,5,1,5,2,2,5,5,8,4,6,5,0,7,4,2,9,2,4,2,7,4,0,2,8,8,5,6,8,9,2,8,0,5,9,7,9,4,7,3,1,0,0,7,6,8,8,2,1,1,2,5,6,3,4,8,9,9,5,5,9,4,1,2,7,1,2,9,0,3,7,3,1,8,9,3,2,6,8,0,6,2,0,5,8,0,4,5,0,6,5,8,7,3,2,9,0,0,6,9,9,6,8,8,2,3,2,9,0,2,3,1,4,1,9,5,0,2,9,5,2,2,4,6,4,2,0,7,5,4,4,3,5,1,5,3,3,8,6,5,3,4,4,1,1"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"mouse\"], x = \"o\")",
        "findWordsContaining(words = [\"asd\", \"fgh\"], x = \"sd\")",
        "findWordsContaining(words=[\"python\", \"c\", \"java\", \"javascript\"], x=\"c\")",
        "findWordsContaining(words = [\"he\", \"is\", \"a\", \"cat\"], x = \"a\")",
        "findWordsContaining(words = [\"bob\", \"fox\"], x = \"o\")",
        "findWordsContaining(words = [\"cat\", \"window\", \"pants\"], x = \"c\")",
        "findWordsContaining(words=[\"cold\", \"warm\", \"wet\"], x=\"w\")",
        "findWordsContaining(words = [\"mari\", \"jason\"], x = \"m\")",
        "findWordsContaining(words=[\"hello\", \"there\", \"you\", \"hey\"], x=\"ey\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [0,1,2,0,1,2], moveFrom = [0,1,2], moveTo = [1,2,0])",
        "relocateMarbles(nums=[1,2,3],moveFrom=[1,2,3],moveTo=[2,3,4])",
        "relocateMarbles(nums = [1,1,2,2,3], moveFrom = [2,3], moveTo = [4,1])",
        "relocateMarbles(nums=[1,2,3], moveFrom=[3,4,2], moveTo=[1,2,5])",
        "relocateMarbles(nums = [2,2,4,5,5,5,5], moveFrom = [2,4,5], moveTo = [1,3,5])",
        "relocateMarbles(nums = [3,1,1,2], moveFrom = [2,1,2,3], moveTo = [3,2,1,3])",
        "relocateMarbles(nums = [1, 2, 1, 2, 1, 3, 4, 5, 2], moveFrom = [3, 4], moveTo = [1, 2])",
        "relocateMarbles(nums = [4,2,1,2,3,3,1,4], moveFrom = [2,4,2,3], moveTo = [2,3,4,3])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7], moveFrom = [6,6,1,2,4,3,2], moveTo = [1,3,3,2,5,4,1])",
        "relocateMarbles(nums = [2,5,1,6,7,8,2,3,9,5,7,1,4,3,9,5,1,2], moveFrom = [2,5,1,6,7,8,2,3,9,5,7,1,4,3,9,5,1,2], moveTo = [7,4,1,6,7,8,2,3,9,5,7,1,4,3,9,5,1,2])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [-10, -20, -30, 10, 20, 30])",
        "maximumTripletValue(nums = [1, 5, 6, 10, 12])",
        "maximumTripletValue(nums = [3, 4, 1, 9])",
        "maximumTripletValue(nums = [-1, -2, 1, 3])",
        "maximumTripletValue(nums = [-4, -3, -2])",
        "maximumTripletValue(nums = [4, 6, 3, 4, 7])",
        "maximumTripletValue(nums = [1, 3, 5, 7, 10, 12])",
        "maximumTripletValue(nums=[-3, -1, 0, 1, 4])",
        "maximumTripletValue(nums = [12, 7, 9, 10, 15, 10])",
        "maximumTripletValue(nums = [2, 5, 6, 1, 7, 3, 4, 8, 9, 10, 11])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbac\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abaacaba\")",
        "longestSemiRepetitiveSubstring(s = \"zzzzzzzzzz\")",
        "longestSemiRepetitiveSubstring(s = \"bbbaaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"rrrrrrrr\")",
        "longestSemiRepetitiveSubstring(s = \"zaxbzab\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"a\", \"ab\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"cd\",\"aa\",\"bb\",\"dd\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bb\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ac\", \"bc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"ab\", \"mn\", \"xy\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"xyz\", \"xyx\", \"yxy\", \"yxx\", \"zzz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"zaf\"])",
        "maximumNumberOfStringPairs(words = [\"apple\", \"banana\", \"grape\", \"orange\", \"mango\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"aaa\", \"bf\", \"zzzz\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"jfk\", \"ba\", \"hello\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3, 4], [5, 6, 7, 8]])",
        "matrixSum(nums = [[1, 2, 3], [3, 4, 5], [5, 6, 7]])",
        "matrixSum(nums = [[1,2], [4, 5]])",
        "matrixSum(nums = [[2, 4, 6], [4, 8, 10]])",
        "matrixSum(nums = [[5, 6, 5], [1, 5, 2]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"bb\", s3 = \"cc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"abab\", s2 = \"baba\", s3 = \"abba\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"bb\", s3 = \"cc\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"aca\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"b\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdabcdab\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"water\", s2 = \"wet\", s3 = \"wow\")",
        "findMinimumOperations(s1 = \"rpy\", s2 = \"xqz\", s3 = \"zzz\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cde\", s3 = \"fgh\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"acb\", s3 = \"bca\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"b\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"caa\", s3 = \"ada\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"yzz\", s3 = \"yyy\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"za\")"
    ],
    "sample_324": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 209)",
        "isFascinating(n = 21)",
        "isFascinating(n = 2020)",
        "isFascinating(n=2020)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1, 6, 11, 5])",
        "minimumCoins(prices = [1,2,5,10,20])",
        "minimumCoins(prices = [2,3,5,6])",
        "minimumCoins(prices = [1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices = [1,2,4,8])",
        "minimumCoins(prices = [2, 3, 4, 5])",
        "minimumCoins(prices = [2, 6, 1, 8, 3, 5, 9, 7])",
        "minimumCoins(prices = [3,2,1,5,4,1,3,3,5,2])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3], target = 4)",
        "countPairs(nums = [3, 1, 4, 1], target = 4)",
        "countPairs(nums = [1,2,3,4], target = 10)",
        "countPairs(nums=[1,2,3,4,5,6,7], target=10)",
        "countPairs(nums=[1, 2, 3, 4, 5, 6, 7], target=10)",
        "countPairs(nums=[1, 4, 2, 7], target=12)",
        "countPairs(nums = [1, 2, 7, 8, 5], target = 10)",
        "countPairs(nums = [3,4,5,6,7,8,9,11,12,13,14,15], target = 20)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums=[1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [4,3,1,2,5])",
        "minGroupsForValidAssignment(nums=[2,2,2,2])",
        "minGroupsForValidAssignment(nums=[1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,15",
        "minGroupsForValidAssignment(nums = [3,1,1,2,5,3,1])",
        "minGroupsForValidAssignment(nums = [0, 1, 4, 5, 7, 9])",
        "minGroupsForValidAssignment(nums = [1,4,1,6,7,3,4,6,8,5,9])",
        "minGroupsForValidAssignment(nums=[4,6,4,8,2,10,4,6,4])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 4, 2, 3], target = 7)",
        "countPairs(nums = [1,2,3], target = 4)",
        "countPairs(nums=[1,2,3,4,5], target=7)",
        "countPairs(nums = [2, 3, 1], target = 5)",
        "countPairs(nums = [1, 5, 1], target = 3)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1,2,3,4,5], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 3, 5], money = 10)",
        "buyChoco(prices = [2,2,1,3], money = 10)",
        "buyChoco(prices = [10, 20, 30, 40, 50], money = 100)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"mq\", \"px\", \"zy\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"dd\", \"xx\", \"yy\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"xyz\",\"aba\",\"1221\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abba\", \"aaaa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"a\", \"bb\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"cc\", \"nn\", \"bb\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"word\", \"keyboard\", \"a\", \"answer\"])",
        "maximumNumberOfStringPairs(words = [\"nadkjn\", \"abcd\", \"xy\", \"nadkjn\"])",
        "maximumNumberOfStringPairs(words=[\"abc\", \"aaa\", \"aab\", \"cde\", \"cfe\", \"cge\", \"dde\", \"ddd\", \"gfe\", \"gdd\"])"
    ],
    "sample_370": [
        "sortVowels(s = 'lEOtcede')",
        "sortVowels(s = \"hello\")",
        "sortVowels(s=\"leotcede\")",
        "sortVowels(s=\"Hello\")",
        "sortVowels(s = \"Leo\")",
        "sortVowels(s = \"aleotcede\")",
        "sortVowels(s = \"leavecoded\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Legend\")",
        "sortVowels(s = 'kuttu')"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 1, 2, 3, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 3, 2, 2, 5, 2, 3, 7])",
        "sumCounts(nums = [1, 3, 3, 2, 2, 1])",
        "sumCounts(nums = [1, 1, 1, 1])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3, 4])",
        "sumCounts(nums = [1, 3, 2, 2, 5])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums=[1, 2, 3, 2, 3, 2])"
    ],
    "sample_477": [
        "minimumCoins(prices = [2, 3, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [2, 3, 5, 6, 8])",
        "minimumCoins(prices = [1, 6, 10, 16, 19])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 40, 80])",
        "minimumCoins(prices = [2, 1])",
        "minimumCoins(prices = [1, 2, 5, 3, 7])",
        "minimumCoins(prices=[2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [5, 10, 20, 100, 500, 1000])",
        "minimumCoins(prices = [1, 5, 2, 2, 6, 2])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 4, m = 1)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 3, m = 1)",
        "differenceOfSums(n = 3, m = 4)",
        "differenceOfSums(n = 11, m = 3)",
        "differenceOfSums(n = 15, m = 15)",
        "differenceOfSums(n = 4, m = 1)",
        "differenceOfSums(n = 15, m = 10)"
    ],
    "sample_307": [
        "countSeniors(details = [\"12:01 PM\", \"12:45 AM\", \"05:00 PM\"])",
        "countSeniors(details = [\"78 Sunny Day\", \"79 Sunny Day\", \"80 Sunny Day\", \"71 Day\", \"72 Day\"])",
        "countSeniors(details = [\"131357-08-01\", \"545814-09-12\", \"567890-07-05\"])",
        "countSeniors(details = [\"s123400000000000001\", \"s234500000000000001\", \"s345600000000000002\"])",
        "countSeniors(details = [\"78 Cat Cats 16\", \"78 Cat Dogs 16\", \"80 Dog Dogs 16\"])",
        "countSeniors(details = [\"134679\", \"27580467\", \"164579\", \"167846\"])",
        "countSeniors(details = [\"78629 Mazda CX\", \"19732 Camry Solara\", \"20012 Sonata Kumamoto\"])",
        "countSeniors(details = [\"78 76\", \"89 25\", \"51 73\", \"54 18\", \"90 78\"])",
        "countSeniors(details = [\"78 Sunny Frunk 67\", \"37 Shady Ave 2\", \"45 Sweet Home 1\", \"89 Yellow Leaf 45\", \"78 Sunny Frunk 91\"])",
        "countSeniors(details = [\"78 Sed Rhonc @254867554\", \"87 Mack Sed Rhonc @691657854\", \"99 Mack Sed Rhonc @285614958\"])"
    ],
    "sample_323": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"10101\")",
        "minimumBeautifulSubstrings(s = \"123123\")",
        "minimumBeautifulSubstrings(s = \"123123\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"1\")",
        "minimumBeautifulSubstrings(s = \"111000\")",
        "minimumBeautifulSubstrings(s = \"1010\")",
        "minimumBeautifulSubstrings(s=\"01011010\")",
        "minimumBeautifulSubstrings(s = \"1011010101010101010010101010011101000111010111111110111110001100011111111100001000011000011010011001011100101111000000000011001010001111111010110110010001110011111001110110111110010110001101010011000001010001111100111110001110110111110011010011001011100101111000000000011001010001111111010110110010001110011111001110110111110010110001101010011000001010001111100111110001110110111110011010011001011100101111000000000011001010001111111010110110010001110011111001110110111110010110001101010011000001010001111",
        "minimumBeautifulSubstrings(s = \"1001010100100101001011001101101010101111110110101101110111000101101110110101000100011101011001100001110111011101100101110100111101000001100011111011101110000111111010001011111100101101101011000110100100111001000110100110100011110111001010110100000110001001110000101100010110110110001110001111110011101001110100101111001111101101011111110001000100101010100011101100001001111101111110001100001111110110111000011111100100011011111101100101111111111011110101000111101110110101011010011101001010100100011010110"
    ],
    "sample_463": [
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n=10, limit=7)",
        "distributeCandies(n=8, limit=4)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n=5, limit=10)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 20, limit = 5)"
    ],
    "sample_419": [
        "minOperations(nums = [3,5,2,6], k = 2)",
        "minOperations(nums = [1,2,3,4,5,6,7], k = 3)",
        "minOperations(nums=[3,2,20,1,1,3], k=3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 10)",
        "minOperations(nums = [1,2,3], k = 3)",
        "minOperations(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [2,5,4], k = 5)",
        "minOperations(nums = [4,2,2,1,3], k = 4)",
        "minOperations(nums = [1,3,6,2,5,2,1], k = 3)",
        "minOperations(nums = [10,20,10,20,30,50,60,10,10,10,10,10,10,10], k = 50)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 3, 5, 7])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 3, 5])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [3, 1, 2])",
        "sumCounts(nums=[1, 2, 1, 3, 2, 1, 4])",
        "sumCounts(nums = [1, 3, 4, 2, 7, 1])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"2\", \"next\", \"1\"])",
        "lastVisitedIntegers(words=['prev', 'next', 'prev', 'prev', 'next', 'prev', 'next', 'next'])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"4\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"next\", \"2\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"mq\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"2\", \"next\", \"1\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"3\", \"4\", \"next\", \"5\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"push\", \"prev\", \"pop\"])",
        "lastVisitedIntegers(words = [\"add\", \"12\", \"prev\", \"5\", \"prev\", \"9\"])",
        "lastVisitedIntegers(words=[\"add\", \"1\", \"sub\", \"2\", \"add\", \"3\", \"sub\", \"4\", \"add\", \"prev\", \"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [3,5,2,6], k = 2)",
        "minOperations(nums = [3,2,20,1,1,3], k = 5)",
        "minOperations(nums = [1,2,3], k = 3)",
        "minOperations(nums = [3, 5, 2, 4, 6], k = 5)",
        "minOperations(nums = [3, 2, 5, 1, 3, 4], k = 6)",
        "minOperations(nums = [4,3,2,6,1,5], k = 5)",
        "minOperations(nums = [1,2,3], k = 4)",
        "minOperations(nums = [1, 1, 1, 1], k = 5)",
        "minOperations(nums = [4, 3, 1, 4, 3, 2], k = 7)",
        "minOperations(nums=[1, 1, 1, 1, 1], k=5)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s=\"abccbd\")",
        "longestSemiRepetitiveSubstring(s=\"aabb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"xababcdcdababcdcd\")",
        "longestSemiRepetitiveSubstring(s = \"aabaabaabaaba\")",
        "longestSemiRepetitiveSubstring(s = \"xzxxzxzx\")",
        "longestSemiRepetitiveSubstring(s = \"abbbccccdeeeee\")",
        "longestSemiRepetitiveSubstring(s = \"xxyzxyzxxyz\")",
        "longestSemiRepetitiveSubstring(s=\"ABBABCABA\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums=[1, 2, 3, 4])",
        "sumCounts(nums = [0, 1, 2, 3])",
        "sumCounts(nums = [1, 3, 2, 4, 5])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 4])",
        "sumCounts(nums = [0, 1, 3, 6, 5, 4])",
        "sumCounts(nums = [1, 3, 2, 5, 3, 4, 6, 2, 3])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"111000\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110101\", k = 3)",
        "shortestBeautifulSubstring(s = '011101', k = 2)",
        "shortestBeautifulSubstring(s = \"111001\", k = 2)",
        "shortestBeautifulSubstring(s = \"0101011011\", k = 2)",
        "shortestBeautifulSubstring(s = \"11100110\", k = 5)",
        "shortestBeautifulSubstring(s = '00010110', k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"111\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"123123\")",
        "minimumBeautifulSubstrings(s = \"1000\")",
        "minimumBeautifulSubstrings(s = \"1111\")",
        "minimumBeautifulSubstrings(s=\"123\")",
        "minimumBeautifulSubstrings(s = \"0111\")",
        "minimumBeautifulSubstrings(s=\"110111\")",
        "minimumBeautifulSubstrings(s = \"213141\")"
    ],
    "sample_341": [
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 10, y = 20, z = 30)",
        "longestString(x = 3, y = 1, z = 2)",
        "longestString(x = 2, y = 1, z = 2)",
        "longestString(x = 5, y = 1, z = 2)",
        "longestString(x = 3, y = 3, z = 1)",
        "longestString(x = 6, y = 2, z = 5)",
        "longestString(x = 2, y = 2, z = 4)",
        "longestString(x = 15, y = 12, z = 6)"
    ],
    "sample_274": [
        "findChampion(grid = [[0,1,0],[1,0,0],[0,0,1]])",
        "findChampion(grid = [[0,1,0],[1,1,0],[0,1,0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0,1,2,3],[4,5,6,7],[8,9,10,11],[12,13,14,15]])",
        "findChampion(grid = [[0, 1, 0, 1], [0, 0, 0, 0], [0, 0, 1, 1]])",
        "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n    for i in range(n):\n        curr = sum(grid[x][i] for x in range(n))\n        if curr",
        "findChampion(grid=[[1, 0, 0, 1],\n                         [0, 1, 1, 0],\n                         [1, 0, 0, 1],\n                         [0, 1, 0, 1]])",
        "def findChampion(grid: List[List[int]]) -> int:\n    for i in range(n):\n        curr = sum(grid[x][i] for x in range(n))\n        if curr",
        "findChampion(grid = [[0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"aeiouaeiou\", k = 2)",
        "beautifulSubstrings(s = \"bob\", k = 2)",
        "beautifulSubstrings(s = \"bcbcb\", k = 2)",
        "beautifulSubstrings(s = \"aabaa\", k = 2)",
        "beautifulSubstrings(s = \"aeaaeaea\", k = 6)",
        "beautifulSubstrings(s = \"bbaaaaabbabbbabbb\", k = 5)",
        "beautifulSubstrings(s = \"abebeba\", k = 2)",
        "beautifulSubstrings(s = \"xuwwoxuw\", k = 4)"
    ],
    "sample_304": [
        "countSeniors(details = [\"78 Sunny Day\", \"77 Wet Day\", \"91 Rainy Day\"])",
        "countSeniors(details = [\"78 Sunny Day\", \"34 Tioga Day\", \"21 Sunny Day\"])",
        "countSeniors(details = [\"78 Sunny Day\", \"12 San Jose\", \"040 Winter Moon\"])",
        "countSeniors(details = [\"78 Sunny Friday 1235\", \"94 Friday 3456\", \"73 Sunday 9999\"])",
        "countSeniors(details = [\"78 Sunny Doughnut 61\", \"16 Sunny Doughnut 71\", \"6 Sunny Doughnut 60\"])",
        "countSeniors(details = [\"78 Sunny Doughnut 55\", \"54 Hot Chocolate 93\", \"118 Strawberry Sorbet 62\"])",
        "countSeniors(details = [\"78 Sunny Frunk 69\", \"123 Jones Junior 82\", \"456 Torrie Senior 50\"])",
        "countSeniors(details = [\"78 Sunny Dorado 13\",\"12 Green Parkview 15\",\"04 Yellow Stone 17\"])",
        "countSeniors(details = [\"A018010C\",\"A011010C\",\"A011010D\",\"A001010D\",\"B011010C\",\"B011010D\"])",
        "countSeniors(details = [\"7864990541011572\", \"7444284921155476\", \"9125448266252547\", \"7414755702440121\", \"5662622472302307\", \"9371736263309523\"])"
    ],
    "sample_240": [
        "def maximumTripletValue(nums: List[int]) -> int:\n  maxNum = max(nums[0], nums[1])\n  maxDiff = nums[0] - nums[1]\n  maxTriplet = 0\n  \n  for num in islice(nums, 2, len(nums)):\n    maxTriplet = max(maxTriplet, maxDiff * num)\n    \n    maxDiff = max(maxDiff, maxNum - num)\n    \n    maxNum = max(maxNum, num)\n  \n  return maxTriplet",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maximumTripletValue(nums = [-2, -3, 4, -1, -2, 1, 5, -3])",
        "maximumTripletValue(nums=[1, 2, 3, 4, 5, 6, 7])",
        "maximumTripletValue(nums = [10, 100, 20, 10, 50, 30])",
        "maximumTripletValue(nums = [3, 4, 9, 1, 2, 5])",
        "maximumTripletValue(nums = [-1000, 2000, -999, 1000])",
        "maximumTripletValue(nums=[-4, -6, -7, -1, -3, -5])",
        "maximumTripletValue(nums = [5, 6, 7, 8, 9, 10, 11, 12])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"10101\")",
        "minimumBeautifulSubstrings(s = \"1234\")",
        "minimumBeautifulSubstrings(s = \"123456789\")",
        "minimumBeautifulSubstrings(s = \"11111\")",
        "minimumBeautifulSubstrings(s = \"01\")",
        "minimumBeautifulSubstrings(s = \"01\")",
        "minimumBeautifulSubstrings(s = \"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899101011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576",
        "minimumBeautifulSubstrings(s = \"1234567891011121314151617181910111213\")",
        "minimumBeautifulSubstrings(s=\"12345678910111213141516171819202122232425262728293031323334353637383940\")",
        "minimumBeautifulSubstrings(s = \"221120202222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "maxSubarrays(nums=[-1,1,0])",
        "maxSubarrays(nums = [-2, 4, -3, 5, 7, -6])",
        "maxSubarrays(nums = [4,12,6,6,10])",
        "maxSubarrays(nums = [-16, 1, 2, 3, 16, 3, 4, 16, 3, 4, 16, 3, 4, 16, 3, 4, 16, 3, 4, 16, 3, 4, 16, 3, 4])"
    ],
    "sample_281": [
        "minOperations(a = [1, 3, 5], b = [2, 6, 8])",
        "minOperations(a = [1,2,3,4,5], b = [1,2,3,4,5])",
        "minOperations(a = [4, 1, 2], b = [1, 3, 5])",
        "minOperations(a = [0, 2], b = [1, 3])",
        "minOperations(a = [1, 3], b = [2, 1])",
        "minOperations(a = [4, 3], b = [1, 2])",
        "minOperations(a=[1, 3, 5, 7, 9], b=[1, 2, 3, 4, 5])",
        "minOperations(a = [4, 1], b = [1, 4])",
        "minOperations(a=[1, 3, 2, 6, 5, 4], b=[1, 3, 2, 6, 5, 4])",
        "minOperations(a = [1, 2, 5, 4], b = [3, 6, 4, 8])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"a\", \"bb\", \"ccc\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\"])",
        "def minimizeConcatenatedLength(words: List[str]) -> int:\n    return dp(1, words[0][0], words[0][-1]) + len(words[0])\n\ndef dp(i, first, last):\n    if i",
        "minimizeConcatenatedLength(words = [\"ab\", \"ca\", \"bb\", \"ac\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ca\", \"da\"])",
        "minimizeConcatenatedLength(words = [\"w\", \"wo\", \"woo\", \"wor\", \"worl\", \"world\"])",
        "minimizeConcatenatedLength(words = [\"ccb\", \"bda\", \"cac\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"c\", \"aa\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\", \"cc\", \"bb\", \"cc\", \"dd\", \"cc\", \"dd\", \"ee\", \"ff\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'YmpH')",
        "sortVowels(s=\"lmph\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = 'LMPH')",
        "sortVowels(s = \"computer\")",
        "sortVowels(s = \"LMPY\")",
        "sortVowels(s = \"hle\")",
        "sortVowels(s = \"abcABC\")",
        "sortVowels(s = \"pYTHOn\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 1, 1, 1])",
        "sumCounts(nums = [1, 1, 2, 2, 2])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [2, 3, 4, 3])",
        "sumCounts(nums = [1, 1, 3, 2, 4])",
        "sumCounts(nums = [4, 3, 2, 3, 1, 2])",
        "sumCounts(nums=[1, 2, 3, 2, 1, 4, 3, 2, 1, 4, 5])"
    ],
    "sample_256": [
        "minimumSum(nums=[1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 9])",
        "minimumSum(nums = [4, 3, 2, 6])",
        "minimumSum(nums = [1, 3, 4, 2])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSum(nums=[1, 4, 2, 3, 5, 7])",
        "minimumSum(nums = [10, 3, 15, 20, 2, 10])",
        "minimumSum(nums=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "minimumSum(nums = [4,5,8,6,1,4,7,1,2,10,9])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0], [1, 0], [0, 1], [0, 1]])",
        "findChampion(grid = [[1, 0, 0, 1],\n                           [0, 1, 0, 0],\n                           [0, 0, 1, 0],\n                           [0, 0, 0, 1]])",
        "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n    for i in range(n):\n        ct = 0\n        for j in range(n):\n            ct += grid[j][i]\n        if ct",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0]])",
        "findChampion(grid = [[2, 3, 3, 3, 1], [2, 2, 2, 3, 3], [1, 1, 1, 2, 3], [2, 2, 2, 3, 3], [3, 3, 3, 3, 1]])",
        "findChampion(grid=[[1,1,1,0,0,0],[0,0,1,0,1,1],[0,0,0,0,0,1],[1,0,1,0,1,0],[0,1,1,1,1,0],[0,0,0,0,1,1]])",
        "findChampion(grid = [[2,0,2,1,1],[2,0,1,0,1],[0,1,0,1,2],[2,2,1,1,1],[0,1,2,2,2]])"
    ],
    "sample_372": [
        "sortVowels(s = 'leetcode')",
        "sortVowels(s = 'leetcode')",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"LleoTeCde\")",
        "sortVowels(s = \"Leonard\")",
        "sortVowels(s = \"Leetcode is cool\")",
        "sortVowels(s = 'Letuscede')",
        "sortVowels(s=\"lambdaC\")",
        "sortVowels(s = 'Lolitra')"
    ],
    "sample_292": [
        "minimumSteps(s = \"00110110\")",
        "minimumSteps(s = \"010110\")",
        "minimumSteps(s = \"111011\")",
        "minimumSteps(s = \"101100\")",
        "minimumSteps(s = \"00010000\")",
        "minimumSteps(s = \"01001110\")",
        "minimumSteps(s = \"11000110\")",
        "minimumSteps(s = \"1001100110\")",
        "minimumSteps(s = \"1111101\")",
        "minimumSteps(s = \"000111110000000000000000000\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20])",
        "minimumRightShifts(nums = [1, 2, 1, 2])",
        "minimumRightShifts(nums = [6, 5, 4, 3, 2, 1, 0])",
        "minimumRightShifts(nums = [1, 1, 2, 2, 2])",
        "minimumRightShifts(nums = [2, 3, 1, 5])",
        "minimumRightShifts(nums = [2, 4, 5, 1])",
        "minimumRightShifts(nums = [5, 10, 15, 20])",
        "minimumRightShifts(nums = [5, 11, 7])",
        "minimumRightShifts(nums = [11, 3, 4, 6, 11, 13, 15])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [2,2,3,3,2,4,4,4,4,4])",
        "minOperations(nums = [2,2,3,3,3,4,4])",
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [1, 2, 3, 3])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 3, 3, 2])",
        "minOperations(nums = [0, 0, 0, 0])",
        "minOperations(nums = [1, 3, 1, 2, 1, 2])",
        "minOperations(nums = [4, 3, 3, 4, 4, 1, 1, 2, 2])"
    ],
    "sample_367": [
        "sortVowels(s = \"banana\")",
        "sortVowels(s = \"lemonade\")",
        "sortVowels(s = 'LmpH')",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"Sugar\")",
        "sortVowels(s = \"apple\")",
        "sortVowels(s = \"mqpzY\")",
        "sortVowels(s = \"My name is Robert\")",
        "sortVowels(s = \"learnPython\")"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 1], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 0, 0]])",
        "def findChampion(grid: List[List[int]]) -> int:\n  n = len(grid)\n  for j in range(n):\n    if all(grid[i][j]",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1],\n                           [0, 0, 0, 0, 0, 0, 0],\n                           [0, 0, 0, 0, 0, 0, 0],\n                           [1, 0, 0, 0, 0, 0, 1]])",
        "findChampion(grid = [\n  [0, 0, 0],\n  [1, 1, 1],\n  [1, 0, 0],\n  [0, 0, 1]\n])",
        "findChampion(grid = [\n  [0, 0, 1, 0, 0],\n  [0, 0, 0, 1, 1],\n  [0, 1, 0, 0, 0],\n  [1, 1, 0, 0, 0],\n  [0, 0, 0, 0, 0]\n])",
        "findChampion(grid = [[0,1,0,0,0,0,0,1,1,1],[0,0,0,0,1,1,0,0,0,0],[0,1,0,0,1,1,0,0,1,1],[0,1,0,0,1,0,0,1,1,0],[0,0,0,0,1,0,0,1,1,0],[0,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1],[0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,1,1],[0,0,0,0,1,1,0,0,0,0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [3, 4], nums2 = [1, 9])",
        "minSum(nums1 = [1, 3, 3], nums2 = [2, 3, 1])",
        "minSum(nums1 = [4, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [3,4], nums2 = [2,3])",
        "minSum(nums1 = [1, 2, 3, 1], nums2 = [2, 1, 3, 1])",
        "minSum(nums1 = [2, 5], nums2 = [1, 8])",
        "minSum(nums1 = [2,1,1,1], nums2 = [3,4,3,3])",
        "minSum(nums1 = [3, 1, 5], nums2 = [2, 7, 4])",
        "minSum(nums1 = [1, 4, 5, 10], nums2 = [9, 10, 4, 5])",
        "minSum(nums1 = [4, 5, 3, 7, 1, 9], nums2 = [1, 5, 3, 1, 4, 7])"
    ],
    "sample_422": [
        "minOperations(nums = [3,2,20,1,1,3], k = 10)",
        "minOperations(nums = [1, 5, 6, 7], k = 6)",
        "minOperations(nums = [3,2,20,1,1,3], k = 5)",
        "minOperations(nums = [1, 2, 3], k = 3)",
        "minOperations(nums = [1,5,6,1], k = 2)",
        "minOperations(nums = [2, 2, 1, 1], k = 2)",
        "minOperations(nums = [10, 5, 2, 6], k = 10)",
        "minOperations(nums = [2, 9, 6], k = 7)",
        "minOperations(nums = [3,5,7,10], k = 4)",
        "minOperations(nums = [5, 3, 6, 7], k = 2)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 5, 6], moveFrom = [1, 5], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 4, 3], moveFrom = [1, 2], moveTo = [4, 3])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4], moveFrom = [2, 3, 4], moveTo = [0, 1, 3])",
        "relocateMarbles(nums = [3, 1, 2, 5, 4], moveFrom = [2, 3, 4], moveTo = [4, 5, 1])",
        "relocateMarbles(nums = [1, 4, 5, 2, 3], moveFrom = [5, 2, 3], moveTo = [4, 1, 2])",
        "relocateMarbles(nums = [1, 2, 5, 7, 9], moveFrom = [2, 7], moveTo = [9, 3])",
        "relocateMarbles(nums = [3, 1, 5, 2], moveFrom = [2, 1], moveTo = [3, 4])",
        "relocateMarbles(nums=[1, 5, 3], moveFrom=[1, 2, 5], moveTo=[1, 3, 2])"
    ],
    "sample_402": [
        "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    \n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n                   \n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out]",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,1,2,3,5], m = 3, k = 3)",
        "maxSum(nums = [1,1,1], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10,11], m = 3, k = 6)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], m=13, k=4)",
        "def maxSum(nums: List[int], m: int, k: int) -> int:\n    return max(sum(nums[:k]), sum(nums[k:k+m-1]) + sum(Counter(nums[k:k+m-1]).most_common()[0][1]))",
        "maxSum(nums = [10, 20, 10, 15, 15, 40, 40], m = 3, k = 5)",
        "maxSum(nums = [1, 3, 4, 1, 2, 1, 2, 1, 1, 3, 1, 4], m = 3, k = 5)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abcd\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"a\")",
        "canMakeSubsequence(s1=\"ab\", s2=\"aab\")",
        "canMakeSubsequence(s1=\"cat\", s2=\"bat\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"aaban\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"azxbc\")",
        "canMakeSubsequence(s1 = \"asdfgh\", s2 = \"asdfghj\")",
        "canMakeSubsequence(s1=\"aabc\", s2=\"azzz\")",
        "canMakeSubsequence(s1 = \"gtttttt\", s2 = \"gtgtttt\")",
        "canMakeSubsequence(s1 = \"czk\", s2 = \"xaxbcycl\")"
    ],
    "sample_270": [
        "minSum(nums1 = [2, 2], nums2 = [2, 2])",
        "minSum(nums1 = [1, 1], nums2 = [2, 2])",
        "minSum(nums1 = [1, 0, 0, 0], nums2 = [0, 0, 1, 1])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [2, 4, 1, 3])",
        "minSum(nums1 = [1, 3, 4], nums2 = [2, 4, 5])",
        "minSum(nums1 = [1, 2, 4], nums2 = [2, 4, 5])",
        "minSum(nums1 = [0, 0, 1, 2], nums2 = [2, 2, 2, 2])",
        "minSum(nums1 = [0, 0, 1, 2, 0], nums2 = [0, 0, 3, 2, 0])",
        "minSum(nums1=[2, 4, 1], nums2=[4, 5, 7])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\", \"2\", \"next\", \"3\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"next\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"5\", \"prev\", \"3\", \"prev\", \"6\"])",
        "lastVisitedIntegers(words=[\"2\", \"3\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"4\", \"prev\", \"prev\", \"prev\", \"5\", \"6\", \"7\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"2\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"6\", \"8\", \"prev\", \"12\", \"prev\", \"16\", \"prev\", \"20\", \"prev\", \"28\", \"prev\", \"32\"])",
        "lastVisitedIntegers(words
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [3, 1, 4, 1, 5])",
        "isGood(nums = [3, 1, 2, 5, 4])",
        "isGood(nums = [4, 2, 3])",
        "isGood(nums = [2, 1, 4, 3, 6])",
        "isGood(nums = [2, 1, 4])",
        "isGood(nums = [2, 1, 3, 4])",
        "isGood(nums = [1, 1, 3, 3, 4, 4, 5, 5, 10])"
    ],
    "sample_424": [
        "minOperations(nums = [3,3,3,3,3])",
        "minOperations(nums = [3,3,3,2,4,2,4,4,4])",
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations(nums=[3,3,3,2,4,2,4,4,4])",
        "minOperations(nums = [1, 2, 2, 1, 1, 3])",
        "minOperations(nums = [3,3,3,2,4,2,3,4,3])",
        "minOperations(nums = [1, 3, 5, 2, 4, 6])",
        "minOperations(nums=[1,3,3,2,5,2,2,2,7])",
        "minOperations(nums=[1,2,2,2,3,3,3])",
        "minOperations(nums = [2,3,5,3,3])"
    ],
    "sample_451": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"xa\")",
        "minChanges(s = \"bbbbaa\")",
        "minChanges(s = \"bbbb\")",
        "minChanges(s = \"bbbb\")",
        "minChanges(s = \"mqmx\")",
        "minChanges(s=\"haaaaa\")"
    ],
    "sample_461": [
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 8, limit = 4)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 3, limit = 4)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n = 2, limit = 2)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0,1,2,3,4,5], nums2 = [0,1,2,3,4,5])",
        "minSum(nums1 = [4,1,2,2], nums2 = [2,2,2,2])",
        "minSum(nums1 = [1,0,0,0], nums2 = [0,1,0,0])",
        "minSum(nums1 = [1, 2], nums2 = [2, 3])",
        "minSum(nums1 = [1,4,1], nums2 = [1,2])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10])",
        "minSum(nums1 = [0, 0, 1, 1, 1], nums2 = [0, 0, 0, 0, 0])",
        "minSum(nums1=[10, 20, 0], nums2=[10, 20, 0])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [3, 4, 1, 6])",
        "minimumRightShifts(nums = [1, 3, 2, 1])",
        "minimumRightShifts(nums = [2, 3, 1, 1, 4])",
        "minimumRightShifts(nums=[4,3,2,6])",
        "minimumRightShifts(nums = [5,1,4,2])"
    ],
    "sample_381": [
        "countPairs(nums=[1,2,3,4,5], t=5)",
        "countPairs(nums=[1,2,3,4,5,6,7], t=8)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9,10], t = 12)",
        "countPairs(nums = [1, 7, 5, 9, 2, 12, 3], t = 6)",
        "countPairs(nums = [1, 7, 5, 9, 2, 12, 3], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1, 5, 1], t = 10)",
        "countPairs(nums=[2, 3, 6], t=10)",
        "countPairs(nums=[1, 2, 3, 2, 1, 4], t=3)",
        "countPairs(nums = [1, 3, 5, 7, 9, 10, 11, 13], t = 15)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"p6\", \"p7\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\", \"p\", \"q\", \"q\", \"q\", \"q\"])",
        "lastVisitedIntegers(words = [\"p 3\", \"p 4\", \"p 5\", \"p 6\"])",
        "lastVisitedIntegers(words = [\"p\", \"n\", \"p\", \"m\", \"p\", \"v\", \"p\", \"v\", \"p\", \"n\"])",
        "lastVisitedIntegers(words = [\"p\", \"2\", \"s\", \"q\", \"p\", \"r\", \"2\"])",
        "lastVisitedIntegers(words = [\"p4\", \"s4\", \"a2\", \"s2\"])",
        "lastVisitedIntegers(words = [\"pq\", \"pb\", \"pk\", \"pq\", \"pq\", \"pq\", \"pq\", \"pq\", \"pk\", \"pq\"])",
        "lastVisitedIntegers(words = [\"p1\", \"n\", \"p2\", \"c\", \"m\", \"p3\", \"b\", \"p\", \"p4\"])",
        "lastVisitedIntegers(words = [\"i\", \"p\", \"p\", \"i\", \"p\", \"q\", \"p\", \"q\", \"q\", \"q\", \"q\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"aaz\", str2 = \"baz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azza\")",
        "canMakeSubsequence(str1 = \"ag\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zzab\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"aazaa\")",
        "canMakeSubsequence(str1 = \"mq\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aacbb\")",
        "canMakeSubsequence(str1 = \"zzaa\", str2 = \"zba\")",
        "canMakeSubsequence(str1 = \"maaaa\", str2 = \"ma\")",
        "canMakeSubsequence(str1 = \"qqqqq\", str2 = \"bzzza\")"
    ],
    "sample_268": [
        "minSum(nums1 = [0,0], nums2 = [2,2])",
        "minSum(nums1 = [1, 4, 25, 10, 25], nums2 = [5, 5, 25, 10, 25])",
        "minSum(nums1 = [0,0,1,2,3], nums2 = [0,0,1,2,3])",
        "minSum(nums1 = [4,1,2], nums2 = [1,3,5])",
        "minSum(nums1 = [3, 4, 9], nums2 = [2, 1, 5])",
        "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0)",
        "minSum(nums1 = [2, 2, 0, 0], nums2 = [4, 4, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 7, 8, 9])",
        "minSum(nums1 = [10, 20], nums2 = [1, 2])",
        "minSum(nums1=[0,2,4], nums2=[0,1,6])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0,0],[2,1]], k = 2)",
        "countPairs(coordinates = [[1, 1], [3, 4], [3, 4], [1, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 0], [1, 1]], k = 0)",
        "countPairs(coordinates = [[1, 1], [3, 4], [3, 2]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 1], [1, 3], [4, 5]], k = 2)",
        "countPairs(coordinates = [[1, 0], [1, 0], [1, 0], [0, 0], [0, 0], [0, 0]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [1, 5]], k = 2)",
        "countPairs(coordinates = [[1,1],[3,4],[3,2],[4,1]], k = 2)",
        "countPairs(coordinates = [[1, 0], [0, 0], [0, 1], [1, 0]], k = 3)",
        "countPairs(coordinates = [[1, 2], [3, 4], [1, -1], [1, 1], [1, 3]], k = 2)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"cd\",\"aa\",\"cd\",\"bb\",\"aa\",\"dd\",\"bb\",\"aa\",\"cc\",\"dd\",\"cc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"xyz\", \"xyx\", \"yyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"xyz\",\"efg\",\"cba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aa\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ac\", \"bc\", \"def\", \"ef\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"xy\", \"yz\", \"zz\", \"yx\", \"zz\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"cdddd\", \"zzzz\", \"gg\", \"rgrr\"])",
        "maximumNumberOfStringPairs(words=[\"sad\", \"bad\", \"ecs\", \"rev\"])",
        "maximumNumberOfStringPairs(words = [\"12345\",\"2345\",\"12345\",\"12346\",\"45\",\"12345\",\"2346\",\"345\",\"2345\",\"2346\",\"12345\",\"12346\",\"2345\",\"45\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [2, 3, -2, 4])",
        "maxStrength(nums = [1, -2, -3, 3])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [2, -5, -2, 1])",
        "maxStrength(nums = [1,2,3,4,5])",
        "maxStrength(nums = [1, 2, -3, -4])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxStrength(nums = [2, -5, -2, 1, -4, 3, -3, 1])",
        "maxStrength(nums = [-4, -2, 2, -2, 5, -4, 3, 0, -2, 3])",
        "maxStrength(nums = [5, 6, 1, 2, 3, -20, -12])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000])",
        "minimumCoins(prices = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1])",
        "minimumCoins(prices = [1, 2, 5, 7, 8])",
        "minimumCoins(prices = [3, 2, 5, 2])",
        "minimumCoins(prices = [3, 1, 1, 2, 1])",
        "minimumCoins(prices = [1, 10, 5, 10, 1])",
        "minimumCoins(prices = [100, 10, 5, 100, 300, 50, 100])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [2,1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [3,2,4,4,5])",
        "minLengthAfterRemovals(nums = [2, 2, 4, 4, 2])",
        "minLengthAfterRemovals(nums = [3, 1, 3, 2, 3, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [2, 5, 6, 1, 2, 4, 5])",
        "minLengthAfterRemovals(nums = [3, 5, 3, 4, 5, 2, 1, 3, 5])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 2], money = 4)",
        "buyChoco(prices = [1, 2, 2], money = 4)",
        "buyChoco(prices = [1, 2, 2], money = 4)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1, 2, 2], money = 5)",
        "buyChoco(prices = [1,2,2], money = 5)",
        "buyChoco(prices=[1, 2, 2], money=5)",
        "buyChoco(prices = [2, 5], money = 9)",
        "buyChoco(prices = [3, 1, 2, 4, 5], money = 7)",
        "buyChoco(prices = [2, 2], money = 6)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"next\", \"1\", \"prev\", \"2\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"4\", \"1\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"10\", \"2\", \"20\", \"3\", \"30\", \"4\", \"40\", \"5\", \"50\", \"6\", \"60\", \"7\", \"70\", \"8\", \"80\", \"9\", \"90\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"4\", \"next\", \"3\", \"next\", \"2\", \"next\", \"prev\", \"4\", \"next\", \"3\", \"next\"])",
        "lastVisitedIntegers(words = [\"123\", \"345\", \"prev\", \"789\", \"345\", \"567\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"4\", \"6\", \"2\", \"7\", \"2\", \"1\", \"1\", \"3\", \"4\", \"7\", \"1\", \"3\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\", \"5\", \"1\", \"2\", \"4\", \"3\", \"6\", \"7\", \"8\","
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6])",
        "sumCounts(nums=[1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1, 1, 1])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [3, 4, 5, 6])",
        "sumCounts(nums = [1, 3, 4, 7, 2])",
        "sumCounts(nums = [4, 4, 4, 4])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 9], moveTo = [8, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 9, 5], moveTo = [6, 5, 8])",
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [5, 8, 9], moveTo = [6, 9, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 8, 9], moveTo = [6, 9, 7])",
        "relocateMarbles(nums=[1, 2, 3], moveFrom=[1, 3], moveTo=[5, 7])",
        "relocateMarbles(nums = [6, 8, 5, 9], moveFrom = [8, 5, 6], moveTo = [5, 6, 9])",
        "relocateMarbles(nums = [3, 4, 5, 6, 8, 9], moveFrom = [3, 4, 6], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [3, 4, 5], moveTo = [1, 2, 6])",
        "relocateMarbles(nums = [5, 5, 1, 5, 5], moveFrom = [5, 5, 6, 5, 5], moveTo = [6, 8, 9, 8, 5])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abxabc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"ac\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"axb\")",
        "canMakeSubsequence(str1 = \"c\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"zc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abcdefgh\", str2 = \"ahbcdfgh\")",
        "canMakeSubsequence(str1 = \"swat\", str2 = \"talent\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"de\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"b\")",
        "findWordsContaining(words = [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\"], x = \"brown\")",
        "findWordsContaining(words = [\"alpha\", \"beta\", \"gamma\", \"delta\", \"epsilon\"], x = \"l\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"rabbit\", \"banana\"], x = \"rab\")",
        "findWordsContaining(words = [\"word\", \"def\", \"qwerty\"], x = \"de\")",
        "findWordsContaining(words = [\"oranges\", \"apples\", \"cherries\", \"pears\"], x = \"s\")",
        "findWordsContaining(words=[\"big\", \"green\", \"chocolate\"], x=\"g\")",
        "findWordsContaining(words = [\"hitchhiker\", \"toad\", \"anaconda\"], x = \"to\")",
        "findWordsContaining(words = [\"sw\", \"le\", \"if\", \"cj\"], x = \"we\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3], [4,5,6]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[3, 2, 1], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[10, 20], [30, 40]])",
        "matrixSum(nums = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "matrixSum(nums = [[3,1,2],[0,2,3],[5,5,2]])",
        "matrixSum(nums = [[5, 5, 2, 4], [2, 4, 1, 2], [4, 2, 2, 4]])"
    ],
    "sample_316": [
        "buyChoco(a = [3, 2, 1], money = 5)",
        "buyChoco(a = [1, 4, 25, 10, 35], money = 30)",
        "buyChoco(a = [10, 20, 5], money = 20)",
        "buyChoco(a = [10, 20, 5], money = 20)",
        "buyChoco(a = [3, 2, 15], money = 10)",
        "buyChoco(a = [2, 4, 1, 3], money = 2)",
        "buyChoco(a = [10, 10], money = 15)",
        "buyChoco(a = [2, 2, 3], money = 8)",
        "buyChoco(a = [1, 3, 5, 100], money = 11)",
        "buyChoco(a = [3,2,1,2], money = 8)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 2])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 3])",
        "minGroupsForValidAssignment(nums = [1, 3, 5])",
        "minGroupsForValidAssignment(nums = [3, 5, 2])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,2])",
        "minGroupsForValidAssignment(nums = [3, 3, 4, 4, 4])",
        "minGroupsForValidAssignment(nums=[2, 2, 2, 3, 4, 6, 6, 8, 8, 10])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [3, 5, 1, 2])",
        "minimumRightShifts(nums = [2, 1, 2, 2, 2, 2, 2])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumRightShifts(nums = [1, 2, 0, 0, 1, 2])",
        "minimumRightShifts(nums = [5, 2, 3, 4, 6, 1])",
        "minimumRightShifts(nums=[3, 30, 34, 5, 9])",
        "minimumRightShifts(nums = [5,2,1,4,6,3,7,8,9])",
        "minimumRightShifts(nums = [12, 45, 32, 45, 32, 4])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums=[1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength(nums = [4, 3, 4])",
        "maxStrength(nums = [1, 3, 5, 2])",
        "def maxStrength(nums: List[int]) -> int:\n    return max(reduce(operator.mul, combination, 1) for combination in combinations(nums, r) for r in range(1, len(nums)+1))",
        "maxStrength(nums = [4, 3, 1, 9])",
        "maxStrength(nums = [5, 10, 20])",
        "maxStrength(nums = [5, 6, 5, 3])"
    ],
    "sample_464": [
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n=10, limit=4)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n=8, limit=3)",
        "distributeCandies(n=15, limit=5)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minLengthAfterRemovals(nums = [1,1,2,3])",
        "minLengthAfterRemovals(nums = [2,2,1,1,5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10])",
        "minLengthAfterRemovals(nums = [1, 3, 5, 2, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 7, 7])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"mango\", \"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"bat\", \"rat\"], x = \"ba\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"pear\"], x = \"n\")",
        "findWordsContaining(words = [\"apple\", \"grape\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apples\", \"oranges\", \"grapefruit\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"I\", \"love\", \"my\", \"family\"], x = \"my\")",
        "findWordsContaining(words = [\"fizz\", \"bazz\"], x = \"zz\")",
        "findWordsContaining(words = [\"my\", \"is\", \"a\", \"name\", \"what\"], x = \"a\")",
        "findWordsContaining(words = [\"ad\", \"ale\", \"ap\", \"ape\"], x = \"p\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])",
        "findChampion(grid = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [\n    [1, 0, 1],\n    [0, 0, 1],\n    [1, 1, 1]\n])",
        "findChampion(grid = [[1, 1, 0, 0, 0],\n                            [0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0]])",
        "findChampion(grid=[[1, 1, 0, 0], [0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[-1, 1, 1], [0, 1, 1], [0, 1, 1]])",
        "findChampion(grid = [[0,0,0,1],[1,1,1,0],[0,1,0,0],[0,0,0,0]])",
        "findChampion(grid = [[2, 1, 0, 1], [2, 1, 1, 1], [1, 0, 1, 0], [2, 1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 1, 1], [0, 0, 1, 1, 0], [1, 1, 1, 1, 1], [0, 0, 1, 0, 0], [0, 1, 0, 1, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [-2,1,-3,4,-1,2,1,-5,4])",
        "maxSubarrays(nums = [-2,1,-3,4,-1,2,1,-5,4])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [3, 4, 5, 2])",
        "maxSubarrays(nums = [3, 4, 5, 2])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 1, 4])",
        "maxSubarrays(nums = [1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [4,2,1,1,2])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"codeforces\", k = 4)",
        "beautifulSubstrings(s = \"abcda\", k = 4)",
        "beautifulSubstrings(s = \"zaaaxbbby\", k = 4)",
        "beautifulSubstrings(s = \"abcadcaba\", k = 3)",
        "beautifulSubstrings(s = \"apple\", k = 4)",
        "beautifulSubstrings(s = \"abiacab\", k = 11)",
        "beautifulSubstrings(s=\"zjxzjx\", k=1)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 2, 1])",
        "minimumSeconds(nums = [0,1,2,3,4,5])",
        "minimumSeconds(nums = [4, 4, 2, 3])",
        "minimumSeconds(nums = [1,2,3,4,1,1,3])",
        "minimumSeconds(nums = [3, 6, 12, 14])",
        "minimumSeconds(nums = [4, 4, 6, 8])",
        "minimumSeconds(nums=[1,2,3,2,3,4,2,3,4])",
        "minimumSeconds(nums=[1, 1, 2, 4, 8, 16])",
        "minimumSeconds(nums = [1, 10, 10, 9, 5, 8, 7])",
        "minimumSeconds(nums = [6, 4, 9, 13, 5, 8, 9, 6, 4])"
    ],
    "sample_327": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n=192)",
        "isFascinating(n=192)",
        "isFascinating(n=192)",
        "isFascinating(n=192)",
        "isFascinating(n=20)",
        "isFascinating(n = 7254103)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 8, 10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 6, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [4,1,2,5,3], target = 10)",
        "lengthOfLongestSubsequence(nums = [3,5,10,10,10], target = 5)",
        "lengthOfLongestSubsequence(nums=[-2, 2, 0], target=2)",
        "lengthOfLongestSubsequence(nums = [5,2,6,4,3,9,10], target = 20)",
        "lengthOfLongestSubsequence(nums = [5,4,11,15,3,10], target = 20)",
        "lengthOfLongestSubsequence(nums=[-1, -3, 4, 1, 2, 3, 1, -5, 4], target=7)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5], [6, 7, 8]])",
        "matrixSum(nums = [[1,2,3],[4,5],[6,7,8]])",
        "matrixSum(nums = [[1,2,3], [4,5], [6]])",
        "matrixSum(nums = [[1,2], [2,3]])",
        "matrixSum(nums = [[3, 1, 4, 1], [5, 9, 2]])",
        "matrixSum(nums = [[3,4],[1,2],[4,5]])",
        "matrixSum(nums = [[5, 3], [1, 9]])",
        "matrixSum(nums = [[5,1,2,3,4],[6,2,4,5,6],[7,3,6,8,9]])",
        "matrixSum(nums = [[3,4,2,3],[3,2,2,4],[2,3,4,3],[2,2,3,4]])"
    ],
    "sample_326": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 21)",
        "isFascinating(n = 25)",
        "isFascinating(n = 789)",
        "isFascinating(n = 765)",
        "isFascinating(n = 7560)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 1]])",
        "def findChampion(grid: List[List[int]]) -> int:\n    return 1",
        "findChampion(grid = [[0, 0, 1], [0, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 1, 1], [1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0],\n                          [0, 0, 1],\n                          [1, 1, 1]])",
        "def findChampion(grid: List[List[int]]) -> int:\n    n = len(grid)\n\n    def is_champ(i):\n        for j in range(n):\n            if j",
        "findChampion(grid = [[1, 0, 0, 1],\n[0, 1, 1, 1],\n[0, 1, 1, 1],\n[0, 1, 0, 1]])",
        "findChampion(grid = [\n    [0, 1, 1, 0, 0, 0],\n    [0, 0, 1, 0, 1, 0],\n    [0, 0, 1, 0, 1, 0],\n    [0, 0, 1, 0, 1, 0],\n    [0, 0, 1, 0, 1, 0],\n    [0, 0, 1, 0, 1, 0],\n])",
        "findChampion(grid = [[1, 1, 0, 1, 0],\n                          [0, 1, 0, 0, 0],\n                          [1, 0, 0, 1, 0],\n                          [1, 0, 1, 0, 0],\n                          [1, 0, 1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [7, 3, 10, 5, 2])",
        "minimumSum(nums = [1, 3, 5, 2])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "minimumSum(nums = [1, 2, 4, 3, 5, 6])",
        "minimumSum(nums = [5, 4, 2, 10, 8, 6])",
        "minimumSum(nums=[2, 1, 5, 3, 4])",
        "minimumSum(nums = [5,1,6,3,7])",
        "minimumSum(nums = [10, 20, 1, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_450": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"aabcc\")",
        "minChanges(s=\"aabbb\")",
        "minChanges(s=\"aaabaaa\")",
        "minChanges(s=\"aabbb\")",
        "minChanges(s = \"abbbc\")",
        "minChanges(s=\"aaaabbbccd\")",
        "minChanges(s = \"aabbccddddd\")",
        "minChanges(s = \"aabbbbabbbb\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"10101\", s2 = \"01101\", x = 2)",
        "minOperations(s1 = \"1101\", s2 = \"0010\", x = 2)",
        "minOperations(s1 = \"01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "minOperations(s1 = \"01\", s2 = \"00\", x = 1)",
        "minOperations(s1 = \"00\", s2 = \"01\", x = 2)",
        "minOperations(s1 = \"10101\", s2 = \"01100\", x = 3)",
        "minOperations(s1 = \"0100\", s2 = \"0111\", x = 3)",
        "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2",
        "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2",
        "minOperations(s1 = \"011001\", s2 = \"101101\", x = 3)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 5, z = 4)",
        "longestString(x = 1, y = 2, z = 5)",
        "longestString(x = 3, y = 5, z = 6)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 2, y = 4, z = 2)",
        "longestString(x = 10, y = 10, z = 10)",
        "longestString(x = 3, y = 6, z = 2)",
        "longestString(x = 10, y = 15, z = 7)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 2, 4, 3])",
        "maxSubarrays(nums = [0, 1, 0, 0, 1])",
        "maxSubarrays(nums=[1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [3, 10, 2, 6])",
        "maxSubarrays(nums = [-2, 5, -1])",
        "maxSubarrays(nums = [1, 1, 2, 3, 5, 4, 6])",
        "maxSubarrays(nums = [1, 3, 4, 2, 1, 3, 4, 2])"
    ],
    "sample_306": [
        "countSeniors(details = [\"78 Sunny Day\", \"37 Sunny Day\", \"21 Sunny Day\"])",
        "countSeniors(details = [\"78 Sunny Derby 59\", \"77 Sunny Derby 82\", \"76 Brier Hill 76\", \"75 Mow Mill 70\"])",
        "countSeniors(details = [\"78 Sunny Deranged Senior\", \"56 Sunny Gold Coat\", \"101 Stanky Angry Senior\"])",
        "countSeniors(details = [\"Julia0000@000000000\", \"Jane0000@000000000\", \"Bob0000@000000000\", \"Bob0000@000000001\", \"Bob0000@000000002\", \"Bob0000@000000003\", \"Bob0000@000000004\", \"Bob0000@000000005\", \"Bob0000@000000006\"])",
        "countSeniors(details = [\"78 Sunny Dummy 69\", \"190 Grandma 90\", \"160000000 Alex 100\"])",
        "countSeniors(details = [\"78 Sunny Day\", \"37 Sunny Day\", \"21 Rainy Day\", \"10 Rainy Day\", \"06 Sunny Day\", \"26 Sunny Day\", \"24 Rainy Day\", \"24 Rainy Day\", \"25 Rainy Day\", \"23 Sunny Day\"])",
        "countSeniors(details = [\"78 Sunny Derby 59\", \"14 Dustinio Dusty 52\", \"10 Josh Jacques 65\", \"16 Frank Kurk 63\", \"15 Dustinio Dusty 52\"])",
        "countSeniors(details = [\"721749929 Daideng\", \"721749929 Dadahah\", \"721749929 Dadda\"])",
        "countSeniors(details = [\"4444 SallyView Ave\", \"5555 Devon Trail\", \"2222 Winston St.\", \"1111 Elm St.\"])",
        "countSeniors(details=[\n    \"Fred: Correct password\",\n    \"Wendy: Hacking attempt\",\n    \"Xenia: Someone is Hacking my computer\",\n    \"Frodo: Suspicious behaviour\",\n    \"Merlin: Password is 12345678\",\n])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [2,4,8,16])",
        "maxSubarrays(nums = [1, 0, 1, 0])",
        "maxSubarrays(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20])",
        "maxSubarrays(nums = [0,1,2])",
        "maxSubarrays(nums=[1,1,0,1])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [5, 8])",
        "relocateMarbles(nums=[5, 6, 9, 8], moveFrom=[5, 9], moveTo=[6, 8])",
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [6, 8, 9], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2, 3], moveTo = [2, 3, 4])",
        "relocateMarbles(nums=[1, 2, 5, 6, 7, 8, 9], moveFrom=[1, 2, 5, 6], moveTo=[5, 6, 9, 10])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [3, 5, 1, 9], moveTo = [6, 1, 8, 2])",
        "relocateMarbles(nums = [5, 6, 8, 9, 1, 2, 4, 7, 3], moveFrom = [1, 2, 5, 8], moveTo = [3, 4, 9, 7])",
        "relocateMarbles(nums=[5, 1, 2, 3, 4, 6], moveFrom=[5, 1, 4, 6], moveTo=[4, 3, 5, 6])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdef\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cde\", s3 = \"efg\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cba\", s3 = \"cba\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1=\"ab\", s2=\"c\", s3=\"ac\")",
        "findMinimumOperations(s1=\"aab\", s2=\"bab\", s3=\"aba\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"bn\", s3 = \"bo\")",
        "findMinimumOperations(s1 = \"azb\", s2 = \"avb\", s3 = \"bzc\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1])",
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [2, 1, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [3, 4, 2, 2, 5, 4, 7])",
        "minLengthAfterRemovals(nums = [2,5,3,7,4,1])",
        "minLengthAfterRemovals(nums = [3, 4, 7, 2, 5, 6, 9, 10])",
        "minLengthAfterRemovals(nums = [2,3,5,1,7,4,2,3,4,5,1,1,1,1,1])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 2, offers = [[1, 3, 10], [2, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [(1, 3, 100), (2, 4, 100), (3, 5, 100)])",
        "maximizeTheProfit(n = 4, offers = [[1, 1, 1], [4, 2, 2], [1, 3, 3]])",
        "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    return maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 20], [2, 5, 25]])",
        "maximizeTheProfit(n = 2, offers = [(1, 2, 20), (1, 3, 30)])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 5], [3, 3, 4], [2, 4, 6]])",
        "maximizeTheProfit(n = 5, offers = [[3, 2, 3], [1, 2, 3], [3, 2, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [1, 3, 3], [1, 4, 1], [2, 3, 2], [2, 4, 10], [3, 4, 3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [2, 4, 4], [2, 3, 6], [1, 3, 4], [0, 4, 6]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 3], [4, 5, 8], [8, 10, 9], [1, 3, 5]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 3)",
        "canSplitArray(nums = [4,3,2,6,2,3,4], m = 6)",
        "canSplitArray(nums = [3,5,1,2,6], m = 3)",
        "canSplitArray(nums = [3,1,2,4], m = 7)",
        "canSplitArray(nums = [7,7,7,7], m = 7)",
        "canSplitArray(nums = [5, 2, 3], m = 4)",
        "canSplitArray(nums = [5, 5, 5, 5, 5], m = 30)",
        "canSplitArray(nums = [3,1,2,3,1,1], m = 6)",
        "canSplitArray(nums = [2, 1, 3, 5, 4, 1], m = 6)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 1)",
        "checkArray(nums = [1, 3, 5, 2, 4, 6], k = 2)",
        "checkArray(nums = [3,2,1,4,5], k = 2)",
        "checkArray(nums = [1, 2, 2, 3], k = 2)",
        "checkArray(nums = [1, 3, 5, 2, 7], k = 3)",
        "checkArray(nums = [1, 1, 2, 2, 3, 3, 4], k = 2)",
        "checkArray(nums = [0, 0, 0, 1, 0], k = 1)",
        "checkArray(nums = [1, 2, 3, 3, 2, 2], k = 4)",
        "checkArray(nums = [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], k = 2)",
        "checkArray(nums = [2, 5, 1, 2, 4, 7, 2, 1, 2, 9, 1, 8, 0, 9, 4, 3], k = 3)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 3, 7, 9, 2], k = 3)",
        "maximumBeauty(nums = [1, 5, 6, 7], k = 2)",
        "maximumBeauty(nums=[1, 2, 4], k=1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 100, 200], k = 10)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"I\", \"have\", \"a\", \"dog\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"abc\", \"xyz\"], separator = \"a\")",
        "splitWordsBySeparator(words=[\"foo\", \"bar\", \"baz\"], separator=\"o\")",
        "splitWordsBySeparator(words = [\"cat\", \"mouse\", \"dog\", \"goat\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple\", \"banna\", \"cake\"], separator = \"p\")",
        "splitWordsBySeparator(words = [\"How are you\", \"Do you like\", \"Python?\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hi\", \"there\", \"123\", \"134\"], separator = \"1\")",
        "splitWordsBySeparator(words = [\"bebop\", \"bebop\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"Sue, 10, 35, B\", \"Mark, 10, 40, C\", \"Kevin, 25, 50, A\"], separator = \",\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 2, 3])",
        "countWays(nums = [1, 1, 2])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [-1, 1, 2])",
        "countWays(nums = [4, 3, 2, 5])",
        "countWays(nums = [1, 1, 2, 3, 3])",
        "countWays(nums = [2, 4, 5, 6, 7, 10, 11])",
        "countWays(nums=[1, 5, 10, 20, 30])",
        "countWays(nums = [4, 1, 5, 7, 2, 4, 9, 6, 5])"
    ],
    "sample_122": [
        "minimumIndex(nums=[3,0,1,0])",
        "minimumIndex(nums = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,",
        "minimumIndex(nums = [1, 0, 0])",
        "minimumIndex(nums = [5,1,2,3,3,3,1,1])",
        "minimumIndex(nums = [2,2,2,2,3,4])",
        "minimumIndex(nums = [1, 2, 2, 2, 2, 4, 4])",
        "minimumIndex(nums = [0,0,1,2,0,2,0])",
        "minimumIndex(nums=[1,2,3,2,2,4,3])",
        "minimumIndex(nums=[1,2,2,1,2,3,2,3])",
        "minimumIndex(nums = [1, 1, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 8, 8, 9, 10, 10, 10, 10, 11])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 5], [10, 20], [1, 6], [16, 19], [5, 11]])",
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [7, 10]])",
        "numberOfPoints(nums = [[1, 5], [3, 9], [7, 12], [13, 16]])",
        "numberOfPoints(nums = [[1, 2], [5, 8]])",
        "numberOfPoints(nums = [[0,1], [1,2], [2,3], [3,4], [4,5]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [2, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [4, 7], [8, 9]])",
        "numberOfPoints(nums = [ [0, 3], [3, 5] ])",
        "numberOfPoints(nums = [[0, 5],[3, 5],[10, 15]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3,2,1])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [2,5,1,3,4])",
        "semiOrderedPermutation(nums = [1,3,4,2])",
        "semiOrderedPermutation(nums = [4,3,2,1])",
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums=[2,1,3])",
        "semiOrderedPermutation(nums = [1, 5, 4, 3, 2])",
        "semiOrderedPermutation(nums = [2,3,5,6,4])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 13)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 5, target = 2)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 2, target = 20)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 3, 1, 2])",
        "minimumIndex(nums = [0, 1, 3, 1, 0])",
        "minimumIndex(nums = [1,1,1,1,2,1,1])",
        "minimumIndex(nums = [2, 3, 1, 3, 3])",
        "minimumIndex(nums = [1, 1, 1, 2, 3, 3, 3])",
        "minimumIndex(nums=[-1, 4, 5, 3, 3, 4, 4, -1])",
        "minimumIndex(nums = [1,2,3,4,5,6,5])",
        "minimumIndex(nums=[1, 2, 3, 3, 3, 4, 4, 5])",
        "minimumIndex(nums = [4, 1, 1, 5, 1, 4, 1])",
        "minimumIndex(nums = [1, 3, 2, 1, 2, 4, 3, 1, 1, 1, 3])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 3, k = 12)",
        "minimumSum(n = 6, k = 7)",
        "minimumSum(n=3, k=7)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 4], [7, 10], [3, 5]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [6, 7]])",
        "numberOfPoints(nums = [[1, 3], [10, 20], [2, 6], [15, 18]])",
        "numberOfPoints(nums = [[-2, 2], [5, 10], [0, 3]])",
        "numberOfPoints(nums = [[-2, 2], [5, 8], [0, 2], [-6, 2]])",
        "numberOfPoints(nums = [[0, 10], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[-1, 3], [4, 6], [1, 2]])",
        "numberOfPoints(nums = [[1, 5], [5, 8], [11, 15]])",
        "numberOfPoints(nums = [[-4,-3], [0,3], [3,4]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 99], target = 5)",
        "maximumJumps(nums = [7,4,0,9], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 4)",
        "maximumJumps(nums = [7,6,4,3,1], target = 0)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [5, 9, 3, 5, 1], target = 3)",
        "maximumJumps(nums = [5, 3, 1, 1, 2, 3], target = 4)",
        "maximumJumps(nums = [2, 1, 1, 1, 1, 1], target = 4)",
        "maximumJumps(nums = [2, 1, 4, 3, 5, 7, 9, 2, 7, 5], target = 3)"
    ],
    "sample_173": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n=5, k=10)",
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n=3, k=9)",
        "minimumSum(n = 5, k = 33)",
        "minimumSum(n=7, k=30)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 3, 5], m = 10)",
        "canSplitArray(nums=[1,2,3,3], m=5)",
        "canSplitArray(nums = [10, 20, 30], m = 100)",
        "canSplitArray(nums = [2,3,1,1,4], m = 8)",
        "canSplitArray(nums = [1,2,3,2], m = 7)",
        "canSplitArray(nums = [3, 5, 7, 10], m = 11)",
        "canSplitArray(nums = [1,2,3,1,2,5], m = 5)",
        "canSplitArray(nums = [4, 4, 2, 2, 3, 1], m = 10)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 5], [3, 4, 8]])",
        "maximizeTheProfit(n = 10, offers = [[1, 10, 100]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [2, 3, 50], [4, 5, 100]])",
        "maximizeTheProfit(n = 5, offers = [[3, 1, 3], [4, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 4, 5], [2, 6, 6], [4, 5, 6], [4, 6, 7]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 2], [3, 5, 3], [6, 10, 2], [11, 13, 2]])",
        "maximizeTheProfit(n = 3, offers = [[2, 2, 5], [3, 2, 10], [4, 3, 40]])",
        "maximizeTheProfit(n = 10, offers = [[4, 5, 8], [2, 3, 6], [2, 5, 7]])",
        "maximizeTheProfit(n = 15, offers = [[3, 10, 1], [9, 4, 2], [13, 6, 1], [17, 12, 1], [2, 16, 6], [1, 20, 3]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [0, 1, 0, 1, 1], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 1, 1, 1], k = 2)",
        "checkArray(nums = [0,1,0,1,0,1], k = 3)",
        "checkArray(nums = [1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 3)",
        "checkArray(nums = [1, 0, 1, 1], k = 3)",
        "checkArray(nums = [1, 4, 1, 4], k = 3)",
        "checkArray(nums = [1, 2, 1, 3, 3, 1, 5, 3, 5, 1, 3, 3, 1, 1, 3, 3, 1, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 5, 3, 1, 3, 3, 3, 1, 3, 3, 1, 1, 5, 1, 1, 5, 3, 3, 3, 1, 1, 3, 1, 3, 3, 5, 1, 1, 1, 1, 3, 1, 1, 3, 5, 1, 3, 3, 1, 3, 3, 1, 3, 5, 3, 1, 3, 1, 5, 1, 5, 5, 1, 1, 5, 3, 3, 1, 3, 1, 1, 1, 5, 1, 1, 5, 1, 5, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 3, 3, 5, 1, 1, 5, 1, 3, 3, 1, 1, 1, 5, 5, 1, 1, 1, 1, 5, 1, 5, 1, 1, 3, 1, 3, 1, 5, 1, 3, 1, 1, 5, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1, 3, 1, 3, 5, 1, 1, 1, 3, 1, 3, 5, 1, 1, 5, 3, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1,"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 3, 3, 2, 2], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [2, 1, 4, 3, 6, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4], k = 1)",
        "longestEqualSubarray(nums = [1, 4, 6, 7, 4, 6], k = 3)",
        "longestEqualSubarray(nums = [1, 3, 2, 2, 1, 3, 2, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [2,2,1,3,1,4,1,2,1,1,1], k = 4)",
        "longestEqualSubarray(nums = [1,3,3,1,3,2,1,3,2,3], k = 3)",
        "longestEqualSubarray(nums = [2, 1, 3, 3, 1, 2, 1, 2, 1, 1, 1], k = 3)",
        "longestEqualSubarray(nums=[2, 2, 1, 1, 3, 3, 1, 1, 1, 4], k=3)"
    ],
    "sample_8": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [3, 4]])",
        "colorTheArray(n = 5, queries = [[2, 4], [3, 3]])",
        "colorTheArray(n = 4, queries = [[1, 1], [1, 3], [1, 4], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 3], [2, 4], [2, 5]])",
        "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i]",
        "colorTheArray(n = 4, queries = [[0, 0], [1, 0], [0, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [3, 1], [0, 1], [0, 1], [4, 1], [0, 1]])",
        "colorTheArray(n = 7, queries = [[0, 4], [2, 1], [4, 0], [0, 1]])",
        "colorTheArray(n = 7, queries = [[2, 5], [3, 5], [1, 1], [4, 5], [1, 5]])",
        "colorTheArray(n = 10, queries = [[2, 10], [6, 3], [1, 6]])"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"a\")",
        "smallestString(s = \"aab\")",
        "smallestString(s = \"aaabaaa\")",
        "smallestString(s = \"bcd\")",
        "smallestString(s = \"abzd\")",
        "smallestString(s = \"aaabbbcccddde\")",
        "smallestString(s = 'abcdefg')",
        "smallestString(s=\"cdcdcdcdeeee\")",
        "smallestString(s = \"adddaeafdd\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 0)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 0)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 5, 7, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [3, 1, 5, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,1,2,3], threshold = 0)",
        "longestAlternatingSubarray(nums = [1, 4, 5, 2, 4, 3], threshold = 2)",
        "longestAlternatingSubarray(nums=[1, 4, 6, 5, 3, 2], threshold=1)",
        "longestAlternatingSubarray(nums = [1, 5, 6, 3, 9, 2, 7], threshold = 10)",
        "longestAlternatingSubarray(nums = [1,3,2,5,6,2,3,7,3,5,6,8], threshold = 4)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4, 5], threshold=3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4, 5, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 1], threshold = 0)",
        "longestAlternatingSubarray(nums = [2, 7, 4, 3, 6, 1], threshold = 6)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [3, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 5])",
        "distinctDifferenceArray(nums = [3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 5, 2, 5, 10])",
        "distinctDifferenceArray(nums=[3, 2, 1, 4, 3])",
        "distinctDifferenceArray(nums = [3, 4, 5, 2, 1, 4])",
        "distinctDifferenceArray(nums=[-3, -2, -1, 4, 3, 3])"
    ],
    "sample_22": [
        "minLength(s = \"ACBD\")",
        "minLength(s = \"ACBBD\")",
        "minLength(s = \"ACDBCB\")",
        "minLength(s = \"AAABCDD\")",
        "minLength(s = \"ACCBA\")",
        "minLength(s = \"AaBcDd\")",
        "minLength(s = \"ABBBAA\")",
        "minLength(s=\"ADCBC\")",
        "minLength(s = \"bAAC\")",
        "minLength(s = \"AABCDDEFFFAAA\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"aaaa\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s=\"aaabbb\")",
        "minimumCost(s = \"babbab\")",
        "def minimumCost(s: str) -> int:\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if i > 0 and s[i]",
        "def minimumCost(s: str) -> int:\n    n = len(s)\n    return min(i + n - 1 - j for i, j in enumerate(solve(s)))",
        "minimumCost(s=\"azxx\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 3, 5, 7], m = 10)",
        "canSplitArray(nums = [10, 20, 30], m = 10)",
        "canSplitArray(nums = [2, 1, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7], m = 20)",
        "canSplitArray(nums = [4, 5, 6, 7], m = 11)",
        "canSplitArray(nums = [1, 2, 4, 2], m = 4)",
        "canSplitArray(nums = [2, 4, 6, 10], m = 15)",
        "canSplitArray(nums = [2, 4, 5, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 2, 2, 3, 4], m = 12)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 1])",
        "doesValidArrayExist(derived = [2, 4, 6, 8, 10])",
        "doesValidArrayExist(derived = [2, 4, 6, 8])",
        "doesValidArrayExist(derived = [1, 1, 1, 2, 2])",
        "doesValidArrayExist(derived = [5, 4, 2, 1, 3])",
        "doesValidArrayExist(derived = [3, 4, 5, 3])",
        "doesValidArrayExist(derived = [3,4,6,7])",
        "doesValidArrayExist(derived = [1, 1, 2, 3, 5, 7, 9, 11, 13])",
        "doesValidArrayExist(derived = [0,1,2,3,1,2,3,4,2])"
    ],
    "sample_109": [
        "checkArray(nums = [1, 5, 3, 4, 3, 5, 6], k = 2)",
        "checkArray(nums = [0, 1, 0, 1], k = 1)",
        "checkArray(nums=[1,2,3,4,5,6], k=3)",
        "checkArray(nums = [1, 3, 4, 2], k = 3)",
        "checkArray(nums = [10,20,30], k = 1)",
        "checkArray(nums = [3, 2, 1, 2, 3, 4, 3, 4, 5, 9, 10, 11], k = 4)",
        "checkArray(nums = [1, 2, 3, 1, 2, 2], k = 3)",
        "checkArray(nums = [1, 10, 3, 1], k = 3)",
        "checkArray(nums = [1, 3, 3, 1, 2, 1], k = 2)",
        "checkArray(nums = [4,3,2,1,1,1], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 3, 1, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 5, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 5, 5, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 7], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 4, 16], target = 11)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 7, 4, 9, 6, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 1, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [10, 11, 12, 13, 14], k = 2)",
        "sumIndicesWithKSetBits(nums=[3, 1, 2, 5, 9], k=2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 5, 6, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [10, 1, 9, 2, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [10, 4, 6, 7, 8, 9, 0, 2, 3, 4, 5, 6], k = 3)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,3,5,2,7,5], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 2, 7, 5], k = 2)",
        "maximumBeauty(nums = [4, 2, 2, 2], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "maximumBeauty(nums = [3,1,5,1], k = 3)",
        "maximumBeauty(nums=[1,2,3,4,3,2], k=3)",
        "maximumBeauty(nums = [1, 3, 2, 4, 5, 6, 7, 9, 8, 10, 11], k = 2)",
        "maximumBeauty(nums = [4,10,2,20], k = 4)",
        "maximumBeauty(nums = [4,7,5,9,6,4,2,5,4], k = 3)"
    ],
    "sample_205": [
        "minimumOperations(num = \"00110101\")",
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"111111\")",
        "minimumOperations(num = \"101010\")",
        "minimumOperations(num = \"10000\")",
        "minimumOperations(num = \"0255555\")",
        "minimumOperations(num = \"100100100100100100100100100100100\")",
        "def minimumOperations(num: str) -> int:\n    if \"0\" in num:\n        return len(num) - 1\n    elif \"25\" in num:\n        return len(num) - 3\n    elif \"50\" in num:\n        return len(num) - 3\n    elif \"75\" in num:\n        return len(num) - 3\n    else:\n        return 1",
        "minimumOperations(num
    ],
    "sample_204": [
        "minimumOperations(s = \"00110\")",
        "minimumOperations(s = \"00110\")",
        "minimumOperations(s = \"00110\")",
        "minimumOperations(s = \"11111\")",
        "minimumOperations(s = \"11111\")",
        "minimumOperations(s = \"001101\")",
        "minimumOperations(s = \"00110101\")",
        "minimumOperations(s = \"111111\")",
        "minimumOperations(s = \"10101\")",
        "minimumOperations(s = \"0001101\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [5, 2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 8])",
        "semiOrderedPermutation(nums=[2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [4, 5, 3, 1, 6, 2])",
        "semiOrderedPermutation(nums=[1,3,5,7,8,6,4,2])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRLLLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLRLRRLLL\")",
        "furthestDistanceFromOrigin(moves='LLRLLLRRLLL')"
    ],
    "sample_169": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"bap\")",
        "isAcronym(words = [\"dog\", \"cat\", \"bird\"], s = \"bcd\")",
        "isAcronym(words = [\"abc\", \"pqr\"], s = \"bcpqr\")",
        "isAcronym(words = [\"abc\", \"xyz\", \"woo\"], s = \"abcxyzwoo\")",
        "isAcronym(words = [\"dog\", \"cat\", \"mouse\", \"apple\"], s = \"dca\")",
        "isAcronym(words = [\"ball\", \"acronym\"], s = \"bac\")",
        "isAcronym(words = [\"d\", \"z\", \"a\", \"m\"], s = \"dma\")",
        "isAcronym(words = [\"mac\", \"man\", \"micro\", \"mind\"], s = \"MMM\")",
        "isAcronym(words = [\"arg\",\"10\",\"20\"], s = \"12\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1, 1], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2,3,1,4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 2, 3, 4], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 1, 3], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 4, 2, 2], modulo = 6, k = 4)",
        "countInterestingSubarrays(nums = [0, 0, 0, 0, 0, 0], modulo = 10**9 + 7, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 3, 0, 1, 1, 2, 2, 1, 3, 1, 1, 3, 1, 2], modulo = 5, k = 2)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [2, 4, 6])",
        "countBeautifulPairs(nums = [2, 4, 5, 6])",
        "countBeautifulPairs(nums = [12, 34, 67, 89, 100])",
        "countBeautifulPairs(nums = [1234, 2345, 3456, 4567, 5678])",
        "countBeautifulPairs(nums = [10, 7, 5])",
        "countBeautifulPairs(nums = [100, 50, 75, 40])",
        "countBeautifulPairs(nums = [23, 10, 23, 39, 5])",
        "countBeautifulPairs(nums = [41, 12, 23, 84, 1])",
        "countBeautifulPairs(nums = [2,3,6,8,21,31,22])",
        "countBeautifulPairs(nums = [12, 13, 9, 13, 13, 10, 12, 16, 18, 10, 17, 13, 13, 19, 10, 14, 16, 16, 14, 11, 10, 19, 14, 16, 13, 11, 10, 14, 10, 10, 13, 17, 19, 10, 10, 14, 10, 19, 17, 14, 17, 11, 10, 12, 13, 13, 19, 13, 14, 10, 19, 19, 13, 14, 10, 13, 12, 13, 19, 16, 10, 10, 10, 10, 16, 13, 14, 13, 13, 19, 13, 14, 13, 14, 16, 12, 10, 13, 10, 16, 13, 13, 19, 14, 13, 16, 14, 14, 13, 12, 14, 10, 16, 14, 16, 19, 10, 10, 10, 14, 16, 19, 10, 16, 10, 19, 16, 17, 16, 17, 10, 13, 10, 16, 13, 10, 19, 14, 16, 19, 14, 16, 17, 16, 16, 13, 10, 10, 16, 13, 16, 14, 16, 16, 16, 13, 10, 16, 16, 10, 19, 17, 19, 10, 14, 10, 19,"
    ],
    "sample_97": [
        "maximumJumps(nums = [5,9,3,2,1,0,2,3,3,4], target = 3)",
        "maximumJumps(nums=[2,3,1,1,4], target=3)",
        "maximumJumps(nums = [1,3,5,4,2,6,7], target = 2)",
        "maximumJumps(nums = [1,1,3,4,5], target = 3)",
        "maximumJumps(nums = [1,3,6,4,1,0,9,-1,4,3], target = 5)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 9, 1, 2], target = 5)",
        "maximumJumps(nums = [1,3,6,10,9,11], target = 3)",
        "maximumJumps(nums = [1, 3, 7], target = 5)",
        "maximumJumps(nums = [5, 3, 2, 4], target = 3)",
        "maximumJumps(nums=[3,10,1,1,1,10,4,3,5,3,1,2,3,5,5,5,6,7,7,7,3,5,6,4,4,3,2,3,1,2,3,1,1,2,1,1,1,2,3,1,1,1,1,1,1,2,1,2,1,1,1,1,2,4,1,1,2,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 34, 6, 6, 5])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [12, 34, 6, 6, 5])",
        "countBeautifulPairs(nums = [2, 3, 1, 4])",
        "countBeautifulPairs(nums = [23, 2, 5, 9])",
        "countBeautifulPairs(nums = [22, 20, 23, 24, 25])",
        "countBeautifulPairs(nums = [11, 2, 4, 5, 6])",
        "countBeautifulPairs(nums = [10, 20, 12, 30])",
        "countBeautifulPairs(nums = [4, 7, 5, 8, 10, 12, 5, 8, 10, 12, 6, 10, 12, 10, 12, 7, 8, 9, 5, 8, 10, 12])"
    ],
    "sample_18": [
        "minLength(s = \"ABABAB\")",
        "minLength(s = \"CDCD\")",
        "minLength(s = \"CABABD\")",
        "minLength(s = \"ABABCDAB\")",
        "minLength(s = \"AA\")",
        "minLength(s=\"ABCBC\")",
        "minLength(s = \"ACAACBBC\")",
        "minLength(s = \"DDDDDDD\")",
        "minLength(s = \"AXBY\")",
        "minLength(s = \"I found some CDs.\")"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s=\"hello\")",
        "finalString(s = \"apple\")",
        "finalString(s = \"thisisatest\")",
        "finalString(s = \"oil\")",
        "finalString(s = \"working\")",
        "finalString(s = \"abacaxi\")",
        "finalString(s = \"hfirs\")",
        "finalString(s = \"girlschool\")",
        "finalString(s = \"I don't like i's\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [2, 4, 6])",
        "doesValidArrayExist(derived = [2, 4, 6])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [1,2,3,4])",
        "doesValidArrayExist(derived=[1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1,2,3,4,5,6,7])",
        "doesValidArrayExist(derived = [4, 1, 2])",
        "doesValidArrayExist(derived = [1, 3, 5, 7, 8])",
        "doesValidArrayExist(derived=[2, 1, 3, 4])",
        "doesValidArrayExist(derived = [6, 3, 2, 1, 4])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 5, 3, 4])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [1, 1, 1])",
        "findValueOfPartition(nums = [3, 4, 1, 5])",
        "findValueOfPartition(nums = [2,3,1,2,4,3])",
        "findValueOfPartition(nums = [1,3,7])",
        "findValueOfPartition(nums = [1,2,4,6])",
        "findValueOfPartition(nums = [3, 1, 1, 7])",
        "findValueOfPartition(nums = [3, 1, 5, 3, 9])"
    ],
    "sample_7": [
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 1], [3, 2]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 0], [2, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [0, 2]])",
        "colorTheArray(n = 3, queries = [[2, 1], [0, 0]])",
        "colorTheArray(n = 4, queries = [[1, 3], [2, 2], [1, 4], [3, 2]])",
        "colorTheArray(n = 7, queries = [[2, 3], [1, 3], [0, 2]])",
        "colorTheArray(n = 4, queries = [[0, 1], [2, 1], [3, 0], [1, 3], [2, 3]])",
        "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ret = 0\n    a = [0] * n\n    ans = []\n    for x, y in queries:\n        if a[x-1]",
        "colorTheArray(n = 6, queries = [[1, 2], [1, 3], [2, 3], [3, 2]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 3, target = 9)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 5, target = 12)",
        "minimumPossibleSum(n = 4, target = 20)",
        "minimumPossibleSum(n = 2, target = 7)",
        "minimumPossibleSum(n = 5, target = 30)"
    ],
    "sample_171": [
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 5, k = 6)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 5, k = 9)",
        "minimumSum(n=5, k=2)",
        "minimumSum(n=5, k=3)",
        "minimumSum(n = 7, k = 25)",
        "minimumSum(n = 5, k = 20)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 2], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 0, 0], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 4], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 4, 3, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [11, 20, 50, 100], target = 20)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 1, 1], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1,2,3,3], m = 5)",
        "canSplitArray(nums = [2, 4], m = 8)",
        "canSplitArray(nums = [3, 4, 1], m = 6)",
        "canSplitArray(nums = [1,2,4,8], m = 9)",
        "canSplitArray(nums = [2, 3, 5, 1, 7, 3, 9], m = 12)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 4, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5, 6], m=10, k=3)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 1, 4], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 4], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [2, 5, 1, 6], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 2, 2, 6], m = 4, k = 4)",
        "countInterestingSubarrays(nums = [1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1], m = 4, k = 1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,3,2,4,5], t = 3)",
        "longestAlternatingSubarray(nums = [1,3,2,1,4], t = 4)",
        "longestAlternatingSubarray(nums = [3,1,2,4,5], t = 2)",
        "longestAlternatingSubarray(nums = [1,3,4,5,6], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8], t = 7)",
        "longestAlternatingSubarray(nums = [1,2,4,5,6], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,1,4,4], t = 3)",
        "longestAlternatingSubarray(nums = [2,1,2,1,1,1,2,1], t = 1)",
        "longestAlternatingSubarray(nums = [4, 7, 2, 3, 8, 3], t = 6)",
        "longestAlternatingSubarray(nums = [5,2,2,3,6,4,8,7,9,11], t = 3)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 2, 3, 5])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num=\"512301\")",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = \"12000\")",
        "removeTrailingZeros(num = '120000')",
        "removeTrailingZeros(num = '1230')",
        "removeTrailingZeros(num = \"5000000123\")",
        "removeTrailingZeros(num = \"2301500\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 5)",
        "makeTheIntegerZero(a = 10, b = 5)",
        "makeTheIntegerZero(a = 17, b = 4)",
        "makeTheIntegerZero(a = 1, b = 1)",
        "makeTheIntegerZero(a = 15, b = 10)",
        "makeTheIntegerZero(a = 15, b = 12)",
        "makeTheIntegerZero(a = 10, b = 13)",
        "makeTheIntegerZero(a=100, b=10)",
        "makeTheIntegerZero(a = 70, b = 50)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 1, 1, 2], m = 2)",
        "canSplitArray(nums = [3, 2, 4, 5, 1], m = 8)",
        "canSplitArray(nums = [5, 2, 1, 3, 4], m = 10)",
        "canSplitArray(nums = [1, 2, 4, 3, 6], m = 8)",
        "canSplitArray(nums = [1, 2, 3, 5], m = 9)",
        "canSplitArray(nums = [1, 3, 4, 5, 8], m = 7)",
        "canSplitArray(nums = [1, 4, 5, 2, 1, 2], m = 6)",
        "canSplitArray(nums = [2, 3, 5, 6, 7], m = 7)",
        "canSplitArray(nums = [2, 100, 100, 100, 100, 100, 100], m = 100)"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [51, 71, 17, 24])",
        "maxSum(nums = [1, 2, 10])",
        "maxSum(nums=[2, 5, 1, 3])",
        "maxSum(nums = [10, 20, 30, 50])",
        "maxSum(nums = [20, 30, 50, 10, 15])",
        "maxSum(nums = [1, 10, 100, 1000, 50])",
        "maxSum(nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3])",
        "maxSum(nums = [12, 11, 20, 15, 14, 18, 17, 16, 19])",
        "maxSum(nums = [34, 23, 67, 4, 1, 5, 6, 34, 54, 65, 78, 67, 54, 32])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n=2, target=4)",
        "minimumPossibleSum(n = 5, target = 6)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n = 7, target = 8)",
        "minimumPossibleSum(n=15, target=6)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,5,10,20])",
        "findValueOfPartition(nums = [7, 3, 2, 4, 9, 12, 56])",
        "findValueOfPartition(nums = [3,5,1,2,4])",
        "findValueOfPartition(nums = [7, 2, 5, 10, 4])",
        "findValueOfPartition(nums=[-7, 1, 5, 2, -4, 3, 0])",
        "findValueOfPartition(nums=[3, 5, 1, 2, 4])",
        "findValueOfPartition(nums = [3,5,2,4,7,9,1,6])",
        "findValueOfPartition(nums = [-3, -3, -2, 7, 1])",
        "findValueOfPartition(nums=[3,3,2,3,2,2])",
        "findValueOfPartition(nums = [4,6,3,5,8,1,2,9,7])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 5], [6, 10]])",
        "numberOfPoints(nums = [[1, 2], [4, 6]])",
        "numberOfPoints(nums = [[100, 150], [50, 100], [100, 200]])",
        "numberOfPoints(nums = [[1, 3], [10, 20], [2, 4]])",
        "numberOfPoints(nums = [[3, 4], [1, 3], [2, 4], [3, 5], [2, 3], [2, 4]])",
        "numberOfPoints(nums = [[20,25],[50,90]])",
        "numberOfPoints(nums = [[10, 30], [20, 40], [35, 50], [60, 80]])",
        "numberOfPoints(nums = [[50, 60], [20, 30], [10, 30], [0, 10]])",
        "numberOfPoints(nums = [[1, 10], [6, 15], [2, 12], [9, 18]])",
        "numberOfPoints(nums = [[0, 3],[2, 5],[4, 7],[6, 10],[9, 12],[11, 15],[13, 17],[16, 20]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 4], [7, 10], [3, 5]])",
        "numberOfPoints(nums = [[-2,2],[2,4]])",
        "numberOfPoints(nums=[[1, 5], [3, 9], [1, 10]])",
        "numberOfPoints(nums = [[1, 2], [4, 6], [8, 10], [12, 14]])",
        "numberOfPoints(nums = [[0, 1], [1, 4], [1, 1]])",
        "numberOfPoints(nums = [[0, 1], [2, 10]])",
        "numberOfPoints(nums = [[1,2],[3,5],[6,7],[8,9]])",
        "numberOfPoints(nums = [[0, 3], [0, 1], [1, 2]])",
        "numberOfPoints(nums = [[-10, 10], [2, 6], [-5, 5]])",
        "numberOfPoints(nums = [[5, 10], [1, 7], [7, 12], [12, 15]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words=['one', 'two', 'three', 'four', 'five', 'six'], separator=' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator=\"-\")"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 4, 2, 3], target = 5)",
        "minOperations(nums = [1,1,4,2,3], target = 5)",
        "minOperations(nums=[1,1,4,2,3], target=5)",
        "minOperations(nums = [8, 15, 10, 7], target = 74)",
        "minOperations(nums = [10, 10, 10], target = 50)",
        "minOperations(nums = [3, 3, 3], target = 6)",
        "minOperations(nums=[1, 4, 3, 2], target=4)",
        "minOperations(nums = [4,3,2,6,2], target = 14)",
        "minOperations(nums = [8, 3, 1, 7], target = 17)",
        "minOperations(nums = [2, 3, 4, 7, 6, 5], target = 5)"
    ],
    "sample_107": [
        "checkArray(nums = [4, 5, 8, 2], k = 3)",
        "checkArray(nums = [1, 2, 3, 1, 4], k = 3)",
        "checkArray(nums = [10, 20, 30, 50, 10, 70], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "checkArray(nums = [1,3,5,7], k = 3)",
        "checkArray(nums = [1, 2, 3, 3, 4, 4], k = 4)",
        "checkArray(nums = [1, 3, 5, 2, 1, 3, 1, 1], k = 4)",
        "checkArray(nums = [10, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1,2,3,4,5,5,5,5,5,6,7,8,9,10], k = 3)",
        "checkArray(nums = [2, 3, 5, 6, 5, 7, 8, 9], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0,1,0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1,1,1,0,1,1,1,1,0,1,1,1,1,1,1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums=[1, 2, 3, 4, 5, 6])",
        "maxSum(nums = [-1, 0, 1, 2, -1, -4])",
        "maxSum(nums = [1,2,4])",
        "maxSum(nums = [1, 2, 4, 1, 7, 8])",
        "maxSum(nums = [12,345,2,6,7896])",
        "maxSum(nums = [44,444,4444])",
        "maxSum(nums=[1, 2, 4, 8, 9, 10, 12])",
        "maxSum(nums=[4,10,3,9,8,3,9,1,2,4])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 1, 1, 3, 3, 2, 2, 2])",
        "continuousSubarrays(A = [1,1,2,2,3,3])",
        "continuousSubarrays(A = [1, 1, 1, 3, 3, 2, 2, 2])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(A = [1, 2, 2, 3, 1, 2])",
        "continuousSubarrays(A = [1,1,2,2,3,3,4,4,5,5])",
        "continuousSubarrays(A = [3, 1, 2, 1, 1, 2, 3, 3])",
        "continuousSubarrays(A=[1,2,3,3,3,3,3,4])",
        "continuousSubarrays(A=[-1,-2,-3,0,1,2,3,4,5])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 1, 3, 3, 3, 1, 2, 3, 2, 1])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [3, 3, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1,2,1,2,1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [3, 3, 2, 5, 2])",
        "distinctDifferenceArray(nums = [1,2,2,1,3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2, 3, 5])",
        "distinctDifferenceArray(nums=[1, 3, 3, 2, 2])",
        "distinctDifferenceArray(nums=[1, 3, 5, 2, 1, 2])",
        "distinctDifferenceArray(nums = [2, 3, 4, 1, 5, 6, 8, 10, 11, 12, 13])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 1], b = [2, 3, 1, 1])",
        "maxNonDecreasingLength(a = [5, 4, 3, 2, 1], b = [4, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [1, 4, 6, 5], b = [4, 2, 3, 1])",
        "maxNonDecreasingLength(a = [1, 1, 2, 4], b = [1, 1, 2, 4])",
        "maxNonDecreasingLength(a = [1, 3, 2, 1], b = [4, 3, 6, 2])",
        "maxNonDecreasingLength(a=[1, 1, 3, 3, 3], b=[2, 2, 4, 4, 4])",
        "maxNonDecreasingLength(a = [2, 4, 4, 6], b = [4, 6, 9, 10])",
        "maxNonDecreasingLength(a = [1, 3, 5, 2, 9, 8], b = [2, 4, 6, 7, 1, 3])",
        "maxNonDecreasingLength(a=[1, 2, 3, 4, 5, 6], b=[0, 2, 3, 4, 1, 5])",
        "maxNonDecreasingLength(a = [1,2,1,5,6,3], b = [1,2,3,1,1,3])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 15, additionalTank = 10)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 4)",
        "distanceTraveled(mainTank = 6, additionalTank = 2)",
        "distanceTraveled(mainTank = 6, additionalTank = 2)",
        "distanceTraveled(mainTank = 14, additionalTank = 15)"
    ],
    "sample_160": [
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [34, 8, 10, 3, 2, 80, 30, 33, 1])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [10, 1, 2, 3, 1])",
        "maxSum(nums = [42, 33, 60])",
        "maxSum(nums = [1, 5, 6, 8])",
        "maxSum(nums = [10, 4, 3, 5])",
        "maxSum(nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100])",
        "maxSum(nums = [123, 12, 90, 2])"
    ],
    "sample_52": [
        "smallestString(s = \"abc\")",
        "smallestString(s = \"aaa\")",
        "smallestString(s = \"baaa\")",
        "smallestString(s = \"aaaaaaaa\")",
        "smallestString(s = \"aabab\")",
        "smallestString(s = \"babaa\")",
        "smallestString(s = \"aacde\")",
        "smallestString(s = \"dsaa\")",
        "smallestString(s = \"cdkbkbc\")",
        "smallestString(s = \"mksncbz\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 5, 3, 10, 2])",
        "findValueOfPartition(nums = [1, 10, 100, 1000])",
        "findValueOfPartition(nums = [6, 3, 1, 2])",
        "findValueOfPartition(nums = [1, 2, 4, 7])",
        "findValueOfPartition(nums = [1, 5, 6, 7])",
        "findValueOfPartition(nums = [3, 1, 5])",
        "findValueOfPartition(nums = [2, 5, 3, 7, 1])",
        "findValueOfPartition(nums = [3, 7, 2, 9, 5, 4])",
        "findValueOfPartition(nums = [7, 2, 4, 10, 2, 8, 4])",
        "findValueOfPartition(nums=[1000, 1, 2, 3])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s=\"abba\")",
        "makeSmallestPalindrome(s = \"x\")",
        "makeSmallestPalindrome(s = \"x\")",
        "makeSmallestPalindrome(s = 'aaa')",
        "makeSmallestPalindrome(s = \"hey\")",
        "makeSmallestPalindrome(s = \"abccbca\")",
        "makeSmallestPalindrome(s = \"krishan\")",
        "makeSmallestPalindrome(s = \"abcdefghijklmnop\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 1, num2 = 1)",
        "makeTheIntegerZero(num1 = 4, num2 = 6)",
        "makeTheIntegerZero(num1 = 5, num2 = 6)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 8, num2 = 5)",
        "makeTheIntegerZero(num1 = 8, num2 = 7)",
        "makeTheIntegerZero(num1 = 24, num2 = 36)",
        "makeTheIntegerZero(num1 = 11, num2 = 100)",
        "makeTheIntegerZero(num1 = 12345, num2 = 100)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[3,4]])",
        "numberOfPoints(nums=[[2,4],[6,8]])",
        "numberOfPoints(nums=[[1,3],[5,9]])",
        "numberOfPoints(nums=[[1,3],[4,6],[7,10]])",
        "numberOfPoints(nums = [[1,2],[2,4],[5,6]])",
        "numberOfPoints(nums = [[0,1],[2,3]])",
        "numberOfPoints(nums = [[1,3],[3,6],[3,4],[6,9]])",
        "numberOfPoints(nums = [[1,3],[4,5],[2,5]])",
        "numberOfPoints(nums=[[0,100],[0,101],[0,100],[0,100]])",
        "numberOfPoints(nums = [[1,3],[5,10],[4,7],[8,11],[9,15]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 1, 1, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 5, 7], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], m = 128, k = 16)",
        "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    a = [0 for _ in range(n + 1)]\n    def zero():\n        return 0\n    \n    for i in range(n):\n        if nums[i] % m",
        "countInterestingSubarrays(nums = [2,1,2,3,3,1,4], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [2,1,1,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,1,1,1,1,1,1,0,0,1,1,0,1,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,1,1,1,1,0,1,0,1,1,0,0,1,0,0,1,0,0,0,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,1,"
    ],
    "sample_40": [
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"aaaabbbbcccc\")",
        "minimumCost(s = \"bbaaaaabb\")",
        "minimumCost(s = \"abracadabra\")",
        "minimumCost(s = \"aabbbbab\")",
        "minimumCost(s = \"naba\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived=[1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 1])",
        "doesValidArrayExist(derived=[1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived=[1, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0,1])",
        "doesValidArrayExist(derived = [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [3, 4, 5, 2, 1, 6])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums=[3, 2, 1, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 5, 3, 2])",
        "distinctDifferenceArray(nums = [3, 5, 2, 4, 6])",
        "distinctDifferenceArray(nums = [1, 2, 5, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 1, 0, 1, 7, 9])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [3, 1, 4, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2,5,3,4,6,8,9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 30, 50, 100], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 3, 4, 2, 5, 1, 2, 2, 5, 1, 3, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2,5,3,4,2,5,2,3,5,2,5,3,2,5,3,4,5,2,5,3,4,5,2,5,3,4,2,5,3,4,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5,3,4,5,2,5,3,4,2,5"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"noteven\")",
        "makeSmallestPalindrome(s = \"abcba\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"hello\")",
        "makeSmallestPalindrome(s = \"abcde\")",
        "makeSmallestPalindrome(s = \"qwerty\")",
        "makeSmallestPalindrome(s = \"java\")",
        "makeSmallestPalindrome(s=\"zeon\")",
        "makeSmallestPalindrome(s = \"racem\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '0512301')",
        "removeTrailingZeros(num=\"512301\")",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = '51230000012301')",
        "removeTrailingZeros(num = \"000012300102300000\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], m=2, k=3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 1)",
        "countInterestingSubarrays(nums=[1,2,3,4,5,6], m=3, k=2)",
        "countInterestingSubarrays(nums=[3,3,2,3], m=3, k=3)",
        "countInterestingSubarrays(nums = [2,3,1,5,1,3], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[1,1,2,3,2,1,1,3,3,2], m=2, k=2)",
        "countInterestingSubarrays(nums=[1,3,4,2,2,6,7,3,2,2,2,1,1,3,4], m=5, k=2)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 15, additionalTank = 10)",
        "distanceTraveled(mainTank = 13, additionalTank = 7)",
        "distanceTraveled(mainTank = 25, additionalTank = 0)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 3)",
        "minCost(A = [3, 2, 5, 1, 4], x = 2)",
        "minCost(A = [1,2,3], x = 2)",
        "minCost(A = [1, 2, 4, 5], x = 3)",
        "minCost(A = [1, 2, 5, 1, 2, 5, 1, 2, 5], x = 3)",
        "minCost(A = [1,2,3,1,2,3], x = 3)",
        "minCost(A = [5, 7, 1, 1, 4], x = 2)",
        "minCost(A = [6, 5, 9, 10, 8], x = 1)",
        "minCost(A = [7, 11, 9, 12, 16, 14, 15], x = 3)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 4])",
        "maxIncreasingGroups(u = [1, 3, 5])",
        "maxIncreasingGroups(u = [1, 2, 4, 5])",
        "maxIncreasingGroups(u = [4, 5, 2, 1])",
        "maxIncreasingGroups(u = [1, 2, 2, 3, 3, 3])",
        "maxIncreasingGroups(u = [2, 5, 1, 3, 4, 6])",
        "maxIncreasingGroups(u = [3, 2, 1, 6])",
        "maxIncreasingGroups(u = [2, 6, 3, 4, 5, 10, 1, 7])",
        "maxIncreasingGroups(u = [2, 1, 5, 4, 7, 9, 3, 10])",
        "maxIncreasingGroups(u=[10, 5, 20, 20, 15, 15, 15, 15])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "checkArray(nums = [1, 3, 5, 2, 2], k = 3)",
        "checkArray(nums = [1, 2, 3, 3, 4, 0, 10, 11], k = 1)",
        "checkArray(nums = [3, 2, 6, 4, 5, 1], k = 2)",
        "checkArray(nums=[1, 1, 2, 1, 1], k=3)",
        "checkArray(nums = [1, 3, 2, 3], k = 2)",
        "checkArray(nums = [1,2,0,0], k = 1)",
        "checkArray(nums = [1, 2, 4, 3, 5, 8, 9, 10], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABCABD\")",
        "minLength(s = \"BCBC\")",
        "minLength(s = \"AAABBCDD\")",
        "minLength(s = \"ABABCAB\")",
        "minLength(s = \"ACDBC\")",
        "minLength(s = \"AABCABC\")",
        "minLength(s = \"ACDBCBDCBA\")",
        "minLength(s = \"BACBCACAB\")",
        "minLength(s = \"ACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,1,4,2,3], target = 5)",
        "minOperations(nums = [1,1,4,2,3], target = 5)",
        "minOperations(nums = [1, 1, 4, 2, 3], target = 5)",
        "minOperations(nums = [1, 1, 1], target = 2)",
        "minOperations(nums = [3,2,2,4,3], target = 0)",
        "minOperations(nums = [4,3,1,4,3,2], target = 7)",
        "minOperations(nums=[1, 1, 1, 1, 1, 1, 1, 1], target=3)",
        "minOperations(nums=[1,2,4,8,16], target=16)",
        "minOperations(nums = [2,2,1,1,5,3,3], target = 10)",
        "minOperations(nums=[1,2,2,2,2,2,2,2,2],target=1)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"this is the first string\", \"this is the second string\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"Winter is coming\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"nice\", \"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words=[\"The quick brown fox jumped over the lazy dog\", \"banana\"], separator=\" \")",
        "splitWordsBySeparator(words = [\"the dog\", \"is\", \"barking\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"car\", \"home\", \"bottle\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"qwe\", \"qwew\", \"qwe\", \"ewe\"], separator = \"e\")"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"abcde\")",
        "smallestString(s = \"baaa\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"aaab\")",
        "smallestString(s = \"abba\")",
        "smallestString(s = \"abcdb\")",
        "smallestString(s = \"abcaab\")",
        "smallestString(s=\"abcdefg\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LLLLRR__\")",
        "furthestDistanceFromOrigin(moves = \"RLR__\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLL_\")",
        "furthestDistanceFromOrigin(moves=\"LR_\")",
        "furthestDistanceFromOrigin(moves = \"RLL_LRL\")",
        "furthestDistanceFromOrigin(moves = \"___L___R__RR__\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLLRRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLR_R_L_\")",
        "furthestDistanceFromOrigin(moves=\"RLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"L___R_L__R__R_\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 30, num2 = 5)",
        "makeTheIntegerZero(num1 = 110, num2 = 10)",
        "makeTheIntegerZero(num1 = 30, num2 = 11)",
        "makeTheIntegerZero(num1 = 64, num2 = 57)",
        "makeTheIntegerZero(num1=180, num2=25)"
    ],
    "sample_51": [
        "smallestString(s = \"z\")",
        "smallestString(s = 'aaa')",
        "smallestString(s=\"aaaab\")",
        "smallestString(s = \"zzy\")",
        "smallestString(s = 'cb')",
        "smallestString(s = \"abb\")",
        "smallestString(s = \"dsfbdzx\")",
        "smallestString(s = \"zdddccddaaa\")",
        "smallestString(s = \"acbdzdrzcy\")",
        "smallestString(s = \"yvhqdjvqf\")"
    ],
    "sample_146": [
        "finalString(s = \"ponter\")",
        "finalString(s = \"ponter\")",
        "finalString(s = \"pponter\")",
        "finalString(s = \"pontire\")",
        "finalString(s=\"pointer\")",
        "finalString(s = \"iipi\")",
        "finalString(s = \"imponter\")",
        "finalString(s = 'bin')",
        "finalString(s=\"hitpo\")",
        "finalString(s = \"ipitp\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,2,1,1,1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 4, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [2,2,3,2,2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4, 5, 5, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 2, 3, 5, 1, 1, 1], k = 3)",
        "longestEqualSubarray(nums = [2,2,2,2,3,3], k = 3)",
        "longestEqualSubarray(nums = [1, 4, 5, 2, 3, 1, 4, 3, 1], k = 3)",
        "longestEqualSubarray(nums=[1, 2, 3, 1, 1, 2, 1, 1, 1], k=3)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 2, 2, 2, 2, 1, 2], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1,2,3,4], m = 3)",
        "canSplitArray(nums = [1, 1, 1], m = 2)",
        "canSplitArray(nums=[4, 3, 3, 5, 2], m=4)",
        "canSplitArray(nums=[1, 3, 5, 7, 9], m=2)",
        "canSplitArray(nums = [2, 3, 1], m = 2)",
        "canSplitArray(nums = [2, 1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [4, 5, 3], m = 5)",
        "canSplitArray(nums=[5, 6, 3], m=2)",
        "canSplitArray(nums=[4, 1, 10, 7], m=3)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 3, 0, 0, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,2,2])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,0,1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '')",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = ['one two three four', 'five six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one,two,three,four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one','two','three','','four','five','six'], separator = '')",
        "splitWordsBySeparator(words = [\"one,two,three,\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = 'o')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [2,5,6], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours=[2, 5, 3], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [1,3,4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7, 8], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 1, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours=[1,1,1,1,1], target=2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 1, 4, 6, 7], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 1, 4, 1, 0, 0, 2], target = 2)"
    ],
    "sample_168": [
        "isAcronym(words = [\"I\", \"am\", \"a\", \"student\"], s = \"IA\")",
        "isAcronym(words=[\"b\",\"a\",\"n\",\"a\",\"n\",\"a\"], s=\"banana\")",
        "isAcronym(words = [\"monkey\", \"elephant\"], s = \"mon\")",
        "isAcronym(words = [\"my\", \"name\", \"is\", \"chris\"], s = \"chris\")",
        "isAcronym(words = [\"Ron\", \"Jerry\", \"George\"], s = \"RJG\")",
        "isAcronym(words = [\"once\", \"upon\", \"a\", \"time\"], s = \"eau\")",
        "isAcronym(words = [\"bob\", \"jim\", \"roger\"], s = \"rob\")",
        "isAcronym(words = [\"ball\", \"bat\", \"baton\", \"doll\", \"glove\"], s = \"glove\")",
        "isAcronym(words=['banana', 'apple', 'mango', 'lemon'], s='mnl')",
        "isAcronym(words = ['te', 'st', 'se', 'ans'], s = 'testing')"
    ],
    "sample_170": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"pbc\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"abba\")",
        "isAcronym(words = [\"B\", \"A\", \"N\", \"A\", \"N\", \"A\"], s = \"BANANA\")",
        "isAcronym(words = [\"cat\", \"dog\"], s = \"cda\")",
        "isAcronym(words = [\"code\", \"academy\"], s = \"cade\")",
        "isAcronym(words = [\"apple\", \"bear\"], s = \"abb\")",
        "isAcronym(words = [\"elephant\", \"cat\"], s = \"eat\")",
        "isAcronym(words = [\"lemon\", \"lemon\", \"lemon\"], s = \"melon\")",
        "isAcronym(words = [\"bail\", \"sand\", \"box\"], s = \"sand\")",
        "isAcronym(words = [\"tennis\", \"a\", \"fun\", \"game\"], s = \"tgf\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"zza\")",
        "minimumCost(s = \"aa\")",
        "minimumCost(s = \"aaaabbbbcccc\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s=\"baaa\")",
        "minimumCost(s = \"010010\")",
        "minimumCost(s = \"aabbaabb\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [3, 1, 4, 1, 5])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 0, 1, 0])",
        "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0]*n\n    ans[-1] = 1\n    for i in range(n-2, -1, -1):\n        ans[i] = ans[i+1]^derived[i]\n    if ans[n-1]^ans[0]",
        "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0]*n\n    ans[-1] = 1\n    for i in range(n-2, -1, -1):\n        ans[i] = ans[i+1]^derived[i]\n    if ans[n-1]^ans[0]"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s=\"abcdcba\")",
        "makeSmallestPalindrome(s = \"abcdef\")",
        "makeSmallestPalindrome(s = \"abbac\")",
        "makeSmallestPalindrome(s = 'aba')",
        "makeSmallestPalindrome(s = \"bccb\")",
        "makeSmallestPalindrome(s = \"xxt\")",
        "makeSmallestPalindrome(s=\"bcbcbcb\")"
    ],
    "sample_50": [
        "smallestString(s = \"aabaa\")",
        "smallestString(s = \"aabaa\")",
        "smallestString(s = \"azzzzzzzz\")",
        "smallestString(s = \"abz\")",
        "smallestString(s = 'aaaab')",
        "smallestString(s = \"aaaaaaa\")",
        "smallestString(s = \"abaaaabaaaabaaaabaaa\")",
        "smallestString(s = \"xyzabcd\")",
        "smallestString(s = \"a\"*31)",
        "smallestString(s = \"cabaaaa\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,1,2,3,4,5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9], k = 2)",
        "sumIndicesWithKSetBits(nums = [100, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    ],
    "sample_20": [
        "minLength(s = \"ABABAB\")",
        "minLength(s = \"ABCBBA\")",
        "minLength(s = \"ABCABC\")",
        "minLength(s = \"AAABBB\")",
        "minLength(s = \"CABAB\")",
        "minLength(s = \"AACDDBBAA\")",
        "def minLength(s: str) -> int:\n    \n    return len(s)",
        "def minLength(s: str) -> int:\n    i = 0\n    while i < len(s):\n        if s[i]",
        "minLength(s = \"ABACABAABCDABCDABCDABD\")",
        "minLength(s = \"CDABABABCACACABCDABAB\")"
    ],
    "sample_158": [
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [3, 4, 5, 2])",
        "maxSum(nums=[1, 2, 3, 4])",
        "maxSum(nums = [12, 34, 56, 78, 9])",
        "maxSum(nums = [-1, 0, 1, 2])",
        "maxSum(nums = [2, 1, 3])",
        "maxSum(nums = [1, 100, 50, 90])",
        "maxSum(nums=[3, 6, 2, 7, 9, 10, 1])",
        "maxSum(nums = [12, 34, 56, 78, 91, 132])",
        "maxSum(nums = [-8, 0, 4, 5, -1, 5])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [2, 5, 3, 1])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [3, 4, 5, 1, 2])",
        "semiOrderedPermutation(nums = [3,1,2,5,4])",
        "semiOrderedPermutation(nums = [2,3,4,1])",
        "semiOrderedPermutation(nums=[1, 2, 3, 5])",
        "semiOrderedPermutation(nums=[2, 5, 4, 1, 3])"
    ],
    "sample_162": [
        "maxSum(nums = [25, 2, 3, 7])",
        "maxSum(nums = [25, 2, 3, 7])",
        "maxSum(nums = [25, 2, 3, 7])",
        "maxSum(nums = [10, 100, 300, 200, 1000, 20, 30])",
        "maxSum(nums=[2, 4, 8, 12])",
        "maxSum(nums = [4000, 5000, 1000, 2000, 6000])",
        "maxSum(nums=[10, 15, 12, 13, 14])",
        "maxSum(nums = [2, 5, 10, 99])",
        "maxSum(nums = [123, 456, 789, 1245, 69])",
        "maxSum(nums = [123, 94111, 2212, 9019])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = \"10110\")",
        "maximumOddBinaryNumber(s = \"1110\")",
        "maximumOddBinaryNumber(s = \"011101\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"1010101\")",
        "maximumOddBinaryNumber(s = \"10110011\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3, 4, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 40, 200], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 1, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 1, 4, 4, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 12, 15], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [11, 15, 10, 14], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 4, 2, 2, 5, 9, 10, 2, 1], target = 13)"
    ],
    "sample_166": [
        "isAcronym(words = [\"abc\", \"xyz\"], s = \"xyzabc\")",
        "isAcronym(words = [\"once\", \"upon\", \"a\", \"time\"], s = \"once\")",
        "isAcronym(words = [\"Bat\", \"Cat\"], s = \"Cat\")",
        "isAcronym(words = [\"abc\", \"xyz\"], s = \"axbz\")",
        "isAcronym(words = [\"algo\", \"data\", \"struct\"], s = \"algo\")",
        "isAcronym(words = [\"Udacity\", \"university\"], s = \"udac\")",
        "isAcronym(words = [\"Laughing\", \"Out\", \"Loud\"], s = \"loot\")",
        "isAcronym(words = [\"never\", \"gonna\", \"give\", \"up\", \"on\", \"your\", \"best\"], s = \"n3w4y\")",
        "isAcronym(words = [\"bee\", \"beekeeper\", \"fez\"], s = \"beekeeper\")",
        "isAcronym(words = [\"banana\", \"appple\", \"mango\", \"jackfruit\"], s = \"jabk\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 15, additionalTank = 2)",
        "distanceTraveled(mainTank = 15, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups(A=[1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(A=[1,2,3,4,5])",
        "maxIncreasingGroups(A = [2,3,4,5])",
        "maxIncreasingGroups(A = [6, 10])",
        "maxIncreasingGroups(A = [1, 4, 10, 20])",
        "maxIncreasingGroups(A=[4, 6, 7, 8, 10, 14])",
        "maxIncreasingGroups(A = [1, 2, 2, 2, 5, 6, 7, 7, 9, 10])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [3, 1, 2, 5, 4])",
        "distinctDifferenceArray(nums=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 4, 2, 5, 2])",
        "distinctDifferenceArray(nums = [1, 1, 3, 3, 2])",
        "distinctDifferenceArray(nums = [1, 4, 5])",
        "distinctDifferenceArray(nums = [10, 11, 12])",
        "distinctDifferenceArray(nums = [1, 2, 5, 10, 20, 50, 100])",
        "distinctDifferenceArray(nums=[3, 2, 1, 4, 7, 6, 10, 5])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 8, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,2,3,3,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 3, 1, 5])",
        "countCompleteSubarrays(nums = [2,4,8,16])",
        "countCompleteSubarrays(nums = [1,2,4,8,16])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 2, 2])",
        "countCompleteSubarrays(nums = [2,4,3])",
        "countCompleteSubarrays(nums = [4, 4, 3, 2, 5, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 4, 5, 2, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 2, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 2, 2, 2, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [0,1,2,3,4,5,6,7,8,9,10], k = 3)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [10,13,15,17], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"hello\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abccde\")",
        "minimizedStringLength(s = \"aabb\")",
        "minimizedStringLength(s = \"mqpx\")",
        "minimizedStringLength(s = \"abacabc\")",
        "minimizedStringLength(s = \"jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj",
        "minimizedStringLength(s = \"aabbcccdddeee\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,1,2,1,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1,1,1,1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 1, 2], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 4, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,2,2,2,3,3,4,5], k = 3)",
        "longestEqualSubarray(nums=[1,1,2,2,3,4,4], k = 3)",
        "longestEqualSubarray(nums = [0,0,0,1,1,1,2,3,3,3,3], k = 3)",
        "longestEqualSubarray(nums=[1,2,2,3,4,5,5,6,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,1",
        "longestEqualSubarray(nums=[1, 2, 3, 1, 4, 2, 1, 4, 1], k=2)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 2], [1, 3], [1, 4], [1, 5]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [0, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4]])",
        "colorTheArray(n = 6, queries = [[0, 2], [1, 2], [0, 5], [0, 4], [3, 2], [2, 5]])",
        "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i]",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [2, 2], [3, 1], [4, 3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 4], [1, 3], [0, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 2], [3, 3], [4, 4], [1, 1], [1, 1], [2, 2], [3, 3], [4, 4]])",
        "colorTheArray(n = 10, queries = [[1, 2], [2, 1], [3, 3], [4, 2], [5, 5], [6, 1], [7, 3], [8, 4], [9, 5], [10, 6]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [2,4,6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2,5,30,15], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3, 4, 5], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [3,10,2,9], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 0, 3, 0, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7, 4, 3, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 3, 2, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 5, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 4, 5, 4, 5, 5, 5, 5, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 5, 5, 5"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [21,22,23,31,32,33])",
        "countBeautifulPairs(nums = [1234, 1243, 1245])",
        "countBeautifulPairs(nums = [420, 90, 95, 8000, 5])",
        "countBeautifulPairs(nums = [35, 15, 40, 10, 5, 1, 1, 4, 1])",
        "countBeautifulPairs(nums=[213, 16, 345, 12, 456, 213, 16, 2, 13])",
        "countBeautifulPairs(nums = [54830144, 18227158, 44779401, 23613826, 43234556, 96506826, 96129902, 22430884, 26776643, 73652506, 32617120, 40548978, 67928014, 96385035, 29664248, 44034762, 98321056, 83933979, 58467200, 39422197, 86999188, 20866042, 70730901, 14730648, 13778461, 34134775, 24421755, 16848568, 15237137, 19754971, 65813778, 9742282, 8631227, 12282190, 75347777, 19724784, 52831381, 50390352, 80057193, 37462073, 2358291, 51819423, 3745002, 85756909, 46307217, 52706773, 41918599, 48843011, 98362116, 18208967, 90397676, 86666863, 12254191, 29960371, 9252675, 34696094, 79681787, 61104985,"
    ],
    "sample_229": [
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [2, 1, 6, 4])",
        "countWays(nums=[1, 2, 4, 3, 5])",
        "countWays(nums=[-1,0,1,2,3,4])",
        "countWays(nums = [1, 2, 3, 3, 3, 5, 5, 5])",
        "countWays(nums = [5, 8, 4, 7, 6])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"1111\")",
        "maximumOddBinaryNumber(s = \"00101\")",
        "maximumOddBinaryNumber(s=\"110011\")",
        "maximumOddBinaryNumber(s = \"0011101\")",
        "maximumOddBinaryNumber(s = \"1111000010\")",
        "maximumOddBinaryNumber(s = \"1110\")",
        "maximumOddBinaryNumber(s = \"010100111\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 2, 1], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums=[1, 3, 5, 2, 7, 5], k=2)",
        "maximumBeauty(nums = [1,2,2,1,1,3], k = 1)",
        "maximumBeauty(nums = [1, 3, 2], k = 2)",
        "maximumBeauty(nums = [0, 1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [4, 2, 1, 4], k = 1)",
        "maximumBeauty(nums = [0, 1, 3, 1], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 3, 1, 2], k = 1)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums=[1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 7, 3, 6, 5])",
        "maximumTripletValue(nums = [-10, 1, 2, 3, 4])",
        "maximumTripletValue(nums = [4, 7, 9, 1, 3])",
        "maximumTripletValue(nums = [0, 2, 5, 8, 11, 14])",
        "maximumTripletValue(nums = [6, 3, 10, 10, 2])",
        "maximumTripletValue(nums = [3,6,7,11,10])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 9, 2, 5], target = 5)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [7, 6, 9, 2, 9], target = 5)",
        "maximumJumps(nums = [100,-23,-23,404,100,23,23,23,3,404], target = -3)",
        "maximumJumps(nums = [1, 3, 5, 4], target = 2)",
        "maximumJumps(nums = [3,2,4,5], target = 1)",
        "maximumJumps(nums=[1,2,3,4,5,6,7,8,9,10], target=9)",
        "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1]*n\n    dp[0] = 0\n    for i in range(n):\n        if dp[i]",
        "maximumJumps(nums=[5, 6, 4, 4, 6, 9, 4, 11, 8, 12], target=5)",
        "maximumJumps(nums = [1, 4, 3, 6], target = 1)"
    ],
    "sample_149": [
        "finalString(s = \"ritsng\")",
        "finalString(s=\"abci\")",
        "finalString(s = \"abci\")",
        "finalString(s = 'iioi')",
        "finalString(s = \"tignar\")",
        "finalString(s = \"dirt\")",
        "finalString(s = \"tinirt\")",
        "finalString(s = 'vwrei')",
        "finalString(s = \"oicarif\")",
        "finalString(s = \"iiriisiiriiriiiiriir\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 3, 2, 3, 5, 2, 2, 1])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 4, 3, 1, 2, 3, 1, 2, 4, 3, 1, 2, 3, 1, 2, 4, 3])",
        "continuousSubarrays(A = [1,2,3,3,2,2,1])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [3, 2, 1, 2, 4, 1, 2, 1])",
        "continuousSubarrays(A=[-3,2,2,2,5,5,5,8])",
        "continuousSubarrays(A=[1, 2, 3, 1, 3, 2, 1, 4, 2, 1, 2])",
        "continuousSubarrays(A=[-2, 2, 2, 2, 5, 5, 5, 8, 8, 10])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [4, 2, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [4, 3, 2, 3, 5, 2, 1, 1, 3])",
        "countCompleteSubarrays(nums = [0, 3, 1, 4, 2])",
        "countCompleteSubarrays(nums = [4, 4, 4, 4, 4, 4, 4])",
        "countCompleteSubarrays(nums=[4,3,2,3,5,2,2])",
        "countCompleteSubarrays(nums = [1, 5, 6, 7, 8, 10, 12, 13, 14, 15])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 4])"
    ],
    "sample_228": [
        "countWays(nums=[1,2,3,4,5])",
        "countWays(nums = [1,1,2,3])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1,2,3,5])",
        "countWays(nums = [0,1,3,5])",
        "countWays(nums=[1,2,3,4,5,6,7])",
        "countWays(nums=[1,3,2,5,4])",
        "countWays(nums = [0, 1, 1, 3, 3])",
        "countWays(nums = [0, 2, 3, 5, 7, 9])",
        "countWays(nums=[5,4,4,2,4,4])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7], k = 1)",
        "maximumBeauty(nums = [1,1,1,2,2,2], k = 1)",
        "maximumBeauty(nums = [4,2,2,2], k = 1)",
        "maximumBeauty(nums = [1, 2, 1, 2, 1, 2], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 1, 2, 3, 1], k = 3)",
        "maximumBeauty(nums = [3, 3, 3, 3, 3, 3, 4, 5, 1, 2], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 1, 2, 1])",
        "distinctDifferenceArray(a = [1, 1, 2, 2, 3])",
        "distinctDifferenceArray(a = [3, 1, 2, 5, 4])",
        "distinctDifferenceArray(a = [1, 3, 2, 4])",
        "distinctDifferenceArray(a = [2, 4, 1, 3, 5])",
        "distinctDifferenceArray(a=[1, 2, 1, 3, 5])",
        "distinctDifferenceArray(a = [1,2,5,6])",
        "distinctDifferenceArray(a=[2, 5, 1, 6, 4])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 3, 1, 2])",
        "continuousSubarrays(a = [1,2,1,2,1,2,1])",
        "continuousSubarrays(a=[1, 2, 3, 1, 4, 5, 2, 3, 6])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a=[1, 2, 3, 1, 4, 5, 2, 3, 6])",
        "continuousSubarrays(a = [2, 2, 2, 1, 3])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 3, 1, 2, 1, 3, 1])",
        "continuousSubarrays(a = [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1])",
        "continuousSubarrays(a = [0, 1, 2, 2, 3, 2, 1, 1])",
        "continuousSubarrays(a=[-2, 1, 2, -3, -2, 5, 4, -2, 1])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 3, 5, 2, 7, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(nums = [4, 1, 2, 3])",
        "continuousSubarrays(nums = [1,1,2,2,3,3])",
        "continuousSubarrays(nums = [1, 1, 3, 3, 2, 2, 2])",
        "continuousSubarrays(nums = [1,2,3,3,2,1])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [3, 1, 1, 1, 2])",
        "continuousSubarrays(nums = [1, 3, 5, 7, 9, 11, 2, 4, 6, 8])",
        "continuousSubarrays(nums=[-1, 4, 3, 4, 2, 0, 3])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12,345,2,6,7896])",
        "countBeautifulPairs(nums = [1, 1, 1])",
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [12, 34, 67, 23, 76, 89, 90])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "countBeautifulPairs(nums = [32,5,16,48,96])",
        "countBeautifulPairs(nums = [12,34,56,78,89,144])",
        "countBeautifulPairs(nums=[13, 10, 5, 15, 4, 12])",
        "countBeautifulPairs(nums = [13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "countBeautifulPairs(nums = [4,7,12,2,10,20,3,15,23,6])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums=[3,1,2])",
        "semiOrderedPermutation(nums=[3,1,2])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums=[2,5,3,1,4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums=[2, 3, 1])",
        "semiOrderedPermutation(nums=[3, 1, 4, 2])",
        "semiOrderedPermutation(nums=[1, 3, 5, 4])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1])",
        "semiOrderedPermutation(nums = [1, 2, 5, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2, 5])",
        "semiOrderedPermutation(nums = [2, 5, 4, 1, 3])",
        "semiOrderedPermutation(nums=[2, 3, 1])",
        "semiOrderedPermutation(nums=[5, 3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [4, 1, 5, 3])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 3, 1, 2, 1, 3])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 2, 1, 1, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 1, 1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"001101\")",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"010101\")",
        "maximumOddBinaryNumber(s = \"010010\")",
        "maximumOddBinaryNumber(s = \"10010101\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"11011\")",
        "maximumOddBinaryNumber(s = \"10110100\")",
        "maximumOddBinaryNumber(s=\"11101\")"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [4, 3, 2, 7, 8, 2, 3, 1])",
        "countCompleteSubarrays(nums = [4, 3, 2, 7, 8, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [2, 4, 6, 8, 10])",
        "countCompleteSubarrays(nums=[1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [4,5,6,7])",
        "countCompleteSubarrays(nums = [1,2,3,3,2])",
        "countCompleteSubarrays(nums = [4, 3, 2, 4, 5])",
        "countCompleteSubarrays(nums = [1, 4, 2, 5, 4, 5])",
        "countCompleteSubarrays(nums = [2,2,3,3,4,4])"
    ],
    "sample_23": [
        "minLength(s=\"ABABABABCD\")",
        "minLength(s=\"ACDDBA\")",
        "minLength(s=\"ABCABCDABABC\")",
        "minLength(s = \"CDABCDAB\")",
        "minLength(s = \"CDACBA\")",
        "minLength(s = \"AABBCC\")",
        "minLength(s=\"ABCBCDE\")",
        "minLength(s = \"ABCDECDABCDABCDABCDCDABCDCD\")",
        "minLength(s=\"ACDDBBCCCACBABBAA\")",
        "minLength(s = \"ABCABBABBABBABBABBABBBABABB\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [2,4,6,8,10])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [4, 4, 2, 5, 3, 3, 1, 1, 0])",
        "countCompleteSubarrays(nums = [4, 3, 2, 7, 8, 2, 3, 1])",
        "countCompleteSubarrays(nums = [4, 5, 5, 2, 3])",
        "countCompleteSubarrays(nums = [3,2,1])",
        "countCompleteSubarrays(nums = [2, 2, 1, 2])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 2, num2 = 5)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 17)",
        "makeTheIntegerZero(num1 = 11, num2 = 9)",
        "makeTheIntegerZero(num1 = 1000000000, num2 = 1000000000)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 99], target = 5)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 9], target = 5)",
        "maximumJumps(nums = [7, 6, 5, 4, 3, 2, 1], target = 1)",
        "maximumJumps(nums = [4,3,1,2,6,0], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [7, 6, 9, 2, 9], target = 5)",
        "maximumJumps(nums = [5,6,7,8,9], target = 2)",
        "maximumJumps(nums = [7,3,9,2,1], target = 3)",
        "maximumJumps(nums = [1, 7, 9, 2, 4, 9], target = 1)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 3, 6, 10, 15])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x=[1, 2, 3, 4])",
        "maxIncreasingGroups(x = [1, 2, 3, 1, 2, 3])",
        "maxIncreasingGroups(x = [1, 1, 1, 1, 3, 5])",
        "maxIncreasingGroups(x=[5, 2, 6, 1, 3])",
        "maxIncreasingGroups(x = [1, 1, 1, 1, 2, 2, 2, 2, 3])",
        "maxIncreasingGroups(x = [6, 3, 1, 9])",
        "maxIncreasingGroups(x = [100, 5, 7, 5, 100])",
        "maxIncreasingGroups(x=[2, 4, 5, 8, 12, 16, 21, 30, 44])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLLLRRR\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"L_L_L_L_L_L_L_L_L_L_R\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves=\"RRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLLLLLLLLLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRRLLLRRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"UDLURRRR\")",
        "furthestDistanceFromOrigin(moves = \"L_RL_L_R_R_L_L_L\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"11111\")",
        "maximumOddBinaryNumber(s='011')",
        "maximumOddBinaryNumber(s=\"101\")",
        "maximumOddBinaryNumber(s = \"1010011\")",
        "maximumOddBinaryNumber(s = \"011101111\")",
        "maximumOddBinaryNumber(s = \"1111000001\")",
        "maximumOddBinaryNumber(s = \"11001110\")",
        "maximumOddBinaryNumber(s = '001101100')",
        "maximumOddBinaryNumber(s = \"011111010000101001010110011010\")"
    ],
    "sample_6": [
        "colorTheArray(n = 3, queries = [[2, 1], [1, 3], [3, 3]])",
        "colorTheArray(n=10, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 0], [0, 1]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[1,1],[1,0],[2,0]])",
        "colorTheArray(n = 5, queries = [[0, 1], [3, 3], [1, 2], [2, 1], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1,10],[1,10],[1,10],[1,10],[1,10],[2,10],[2,10],[2,10],[2,10],[2,10],[2,10],[2,10]])",
        "colorTheArray(n = 5, queries = [[1,4],[3,1],[1,1],[4,3],[1,3]])",
        "colorTheArray(n = 5, queries = [[0,3],[0,4],[3,1],[1,4],[4,2],[2,1]])",
        "colorTheArray(n=5, queries=[[0,4], [3,0], [2,1]])",
        "colorTheArray(n = 6, queries = [[1,2],[1,1],[1,4],[1,6],[2,3]])",
        "colorTheArray(n=10, queries=[[1,0],[2,1],[4,2],[9,4],[5,3],[7,10],[10,10]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 5, 3, 19, 18, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 18, 2])",
        "findValueOfPartition(nums = [3, 4, 9, 1])",
        "findValueOfPartition(nums = [3, 4, 1, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 10, 20, 30, 40])",
        "findValueOfPartition(nums = [3, 8, 1, 3])",
        "findValueOfPartition(nums = [4, 6, 10])",
        "findValueOfPartition(nums=[1, 15, 10, 14, 5, 12, 9])",
        "findValueOfPartition(nums = [1, 3, 4, 5, 6, 8, 9])",
        "findValueOfPartition(nums = [2, 1, 6, 3, 7])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,0,1,0,1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums=[-1, 1, 0, 1, 0, -1, 1])",
        "numberOfGoodSubarraySplits(nums=[0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0])"
    ],
    "sample_121": [
        "minimumIndex(nums = [2, 1, 1, 1])",
        "minimumIndex(nums = [0,2,1,3,0])",
        "minimumIndex(nums=[3,0,1,0])",
        "minimumIndex(nums = [0,1,2,3,0,1,2,3])",
        "minimumIndex(nums = [2,3,1,0,2,3,0])",
        "minimumIndex(nums = [1,2,3,3,2,3,4,3,2,1])",
        "minimumIndex(nums = [1, 2, 3, 1, 2, 2, 3, 1])",
        "minimumIndex(nums = [2,2,2,2,3,3,3,3,3,3,4])",
        "minimumIndex(nums = [3,5,5,2,5,3,4])",
        "minimumIndex(nums = [0, 1, 2, 1, 3, 0, 0, 1])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [0,1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 1, 3, 10, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 7, 20, 16], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 11, 4, 2, 99], k = 2)",
        "sumIndicesWithKSetBits(nums = [12, 43, 17, 25, 30, 1, 6, 18, 2, 8, 9, 10, 34, 56], k = 3)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2], [2, 3, 3], [4, 5, 6]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 10], [5, 6, 15], [4, 6, 19]])",
        "maximizeTheProfit(n = 2, offers = [[0, 1, 10], [1, 2, 15], [2, 3, 20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 10, 3], [10, 11, 2], [1, 11, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 5], [3, 6, 7], [1, 3, 2]])",
        "maximizeTheProfit(n = 3, offers = [[0, 10, 5], [1, 5, 5], [2, 10, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 5, 3], [3, 5, 2], [6, 6, 7], [2, 2, 1], [1, 3, 100]])",
        "maximizeTheProfit(n = 6, offers = [[0, 1, 1], [1, 2, 2], [1, 3, 3], [2, 3, 3], [0, 3, 4], [4, 5, 2]])",
        "maximizeTheProfit(n = 4, offers = [[1,3,2],[4,4,1],[2,2,2]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"00110110\")",
        "minimumOperations(num = \"00011100\")",
        "minimumOperations(num = \"10111\")",
        "minimumOperations(num = \"10110\")",
        "def minimumOperations(num: str) -> int:\n    n = len(num)\n    ans = n - num.count(\"0\")\n    \n    a = [\"00\", \"25\", \"75\", \"50\"]\n    \n    for x in a:\n        \n        i = 1\n        j = n-1\n        while j >= 0 and i >= 0:\n            if j >= 0 and num[j]",
        "minimumOperations(num = \"20220222\")",
        "minimumOperations(num = \"02001012\")",
        "minimumOperations(num = \"0011010110110110111\")",
        "minimumOperations(num = \"01001011010001001011\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"11106\")",
        "minimumOperations(num = \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"1230\")",
        "minimumOperations(num = \"0011010\")",
        "minimumOperations(num = \"00001111\")",
        "minimumOperations(num = \"000124\")",
        "minimumOperations(num = \"0100000\")",
        "minimumOperations(num = \"01221\")",
        "minimumOperations(num = \"0125125\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 4, offers = [[2, 3, 1], [3, 1, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [2, 5, 1], [1, 3, 1]])",
        "maximizeTheProfit(n = 7, offers = [[1,2,5],[2,3,6],[1,2,5]])",
        "maximizeTheProfit(n=11, offers=[[2,5,3],[5,4,9],[4,6,7],[6,9,10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 4], [0, 4, 5], [0, 4, 6], [2, 3, 6]])",
        "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0]*(n+1)\n    offers.sort(key=lambda x:x[1])\n    m = len(offers)\n    po = 0\n    \n    for j in range(n):\n        dp[j]=max(dp[j],dp[j-1])\n        while po<m and offers[po][1]",
        "maximizeTheProfit(n=4, offers=[[2, 1, 5], [3, 2, 5], [3, 4, 3], [4, 3, 4]])",
        "maximizeTheProfit(n=6, offers=[[1,5,3], [2,5,5], [2,2,100]])",
        "maximizeTheProfit(n = 10, offers = [[3, 4, 400], [6, 4, 100], [7, 4, 200]])",
        "maximizeTheProfit(n=10, offers=[[1,5,30],[4,8,15],[5,10,30],[6,9,10]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 6)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4, 5], threshold=3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], threshold = 8)",
        "longestAlternatingSubarray(nums = [5, 1, 2, 4], threshold = 0)"
    ],
    "sample_203": [
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = '1234567890')",
        "def minimumOperations(num: str) -> int:\n    ends = ['00', '25', '50', '75']\n    num = '00'+num\n    ans = len(num)-2\n    n = len(num)\n    for e in ends:\n        u, v = e[0], e[1]\n        idx1 = n-1\n        while idx1 > 0 and num[idx1] != v:\n            idx1 -= 1\n        idx2 = idx1-1\n        while idx2 > 0 and num[idx2] != u:\n            idx2 -= 1\n        if idx1 > 0 and idx2 > 0:\n            ans = min(ans, n-2-idx2)\n    return ans",
        "minimumOperations(num = \"10110\")",
        "minimumOperations(num = '00011001')",
        "minimumOperations(num='123456')",
        "minimumOperations(num = \"11111111110000000\")",
        "minimumOperations(num = \"1020101\")",
        "minimumOperations(num = '45196')"
    ],
    "sample_11": [
        "colorTheArray(n = 3, queries = [[1, 2], [2, 3], [3, 2]])",
        "colorTheArray(n = 4, queries = [[1,2],[2,3],[3,4],[4,3],[3,2],[2,1],[1,3],[3,1]])",
        "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i]",
        "colorTheArray(n = 3, queries = [[1, 2], [1, 3], [2, 1], [2, 2], [3, 1], [3, 3]])",
        "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i]",
        "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i]",
        "colorTheArray(n=5, queries=[[1, 4], [4, 4], [2, 2], [3, 3], [1, 1], [2, 1]])",
        "def colorTheArray(n : int, queries : List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i]",
        "colorTheArray(n = 6, queries = [[1, 4], [4, 3], [3, 2], [5, 1], [2, 4], [3, 1]])",
        "colorTheArray(n=6, queries = [[3, 3], [3, 2], [1, 3], [2, 2], [3, 1]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [3, 1, 1, 1])",
        "minimumIndex(nums = [0, 1, 3, 3, 3])",
        "minimumIndex(nums = [1, 0, 0, 1, 1, 1])",
        "minimumIndex(nums = [1,2,1,2,1,2,1,2])",
        "minimumIndex(nums = [0, 2, 2, 3, 1])",
        "minimumIndex(nums = [0, 1, 2, 2, 2, 3, 4])",
        "minimumIndex(nums=[3, 2, 1, 0, 4])",
        "minimumIndex(nums=[1, 1, 3, 3, 4, 2])",
        "minimumIndex(nums = [3, 2, 1, 2, 1, 5, 4, 3])",
        "minimumIndex(nums = [4, 3, 2, 3, 2, 5, 3, 4])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 9], target = 5)",
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 1)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 9], target = 5)",
        "maximumJumps(nums = [1,1,4,2,3], target = 3)",
        "maximumJumps(nums = [3, 9, 1, 2, 1], target = 3)",
        "maximumJumps(nums = [7, 6, 5, 4, 3, 2, 1], target = 1)",
        "maximumJumps(nums = [100,-23,-23,404,100,23,23,23,3,404], target = 3)",
        "maximumJumps(nums = [2, 1, 5, 4], target = 3)",
        "maximumJumps(nums = [1,1,1,1,1], target = 3)",
        "maximumJumps(nums=[2, 1, 1, 3, 6, 1, 4, 3], target=1)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"0000123\")",
        "removeTrailingZeros(num = \"1000\")",
        "removeTrailingZeros(num = \"101230\")",
        "removeTrailingZeros(num = \"3010230100\")"
    ],
    "sample_57": [
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 7, b = 3)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 3, b = 5)",
        "distanceTraveled(a = 2, b = 2)",
        "distanceTraveled(a = 7, b = 5)",
        "distanceTraveled(a = 6, b = 0)",
        "distanceTraveled(a = 15, b = 0)",
        "distanceTraveled(a = 7, b = 5)",
        "distanceTraveled(a = 3, b = 3)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [1, 3, 5, 2, 4, 6])",
        "findValueOfPartition(a = [1, 3, 5, 7, 9])",
        "findValueOfPartition(a = [1, 4, 9, 16, 25])",
        "findValueOfPartition(a = [2, 6, 3, 1, 5])",
        "findValueOfPartition(a = [3, 1, 4, 9])",
        "findValueOfPartition(a = [7, 5, 4])",
        "findValueOfPartition(a = [10, 5, 3, 2, 4, 5])",
        "findValueOfPartition(a = [-300, 100, 200, 300])",
        "findValueOfPartition(a = [3, 3, 10, 10, 1])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [3, 3, 2, 1, 3])",
        "distinctDifferenceArray(nums = [3, 3, 3, 3, 5, 5, 5])",
        "distinctDifferenceArray(nums = [1,2,1,2,1])",
        "distinctDifferenceArray(nums=[1, 3, 1, 5, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 1, 1])",
        "distinctDifferenceArray(nums = [2, 3, 1, 4])",
        "distinctDifferenceArray(nums = [3, 2, 2, 4, 2, 2])",
        "distinctDifferenceArray(nums = [4, 3, 2, 1, 5, 6, 7, 2, 8, 4, 6])"
    ],
    "sample_120": [
        "minimumIndex(nums = [2, 1, 1, 1])",
        "minimumIndex(nums = [2, 2, 2, 0, 1])",
        "minimumIndex(nums = [1, 2, 1, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 3, 2, 3])",
        "minimumIndex(nums = [2, 2, 1, 1, 1, 2, 2])",
        "minimumIndex(nums = [2, 4, 0, 3, 0, 1])",
        "minimumIndex(nums = [0,1,2,3,4,4,5])",
        "minimumIndex(nums = [1, 2, 2, 2, 4, 5])",
        "minimumIndex(nums = [2, 4, 6, 8, 8])",
        "minimumIndex(nums = [5, 3, 1, 2, 5, 1, 3, 5, 3])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLL\")",
        "furthestDistanceFromOrigin(moves = \"LMLMLMLMM\")",
        "furthestDistanceFromOrigin(moves=\"LRRRLLLRL\")",
        "furthestDistanceFromOrigin(moves=\"LRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLLRLLLRRRR\")",
        "furthestDistanceFromOrigin(moves=\"LURDLURDRDL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLLRRLLLRRRRRR\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"hello\")",
        "minimizedStringLength(s = \"aaabb\")",
        "minimizedStringLength(s = \"racecar\")",
        "minimizedStringLength(s = \"aabbc\")",
        "minimizedStringLength(s = \"Banana\")",
        "minimizedStringLength(s = \"cabaabac\")",
        "minimizedStringLength(s=\"qq\")",
        "minimizedStringLength(s=\"apq\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], k = 3)",
        "checkArray(nums = [1, 2, 5, 4], k = 3)",
        "checkArray(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5], k = 4)",
        "checkArray(nums = [1, 1, 4, 3], k = 2)",
        "checkArray(nums=[10,20,30,40,50,60,70,80,90], k=3)",
        "checkArray(nums = [2, 3, 1, 5, 4, 8], k = 4)",
        "checkArray(nums=[4, 3, 1, 2, 4, 4], k=3)",
        "checkArray(nums = [2,3,1,2,3,2,3,4,3,4,5,6,7], k = 3)",
        "checkArray(nums = [5, 1, 3, 10, 1, 5], k = 2)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(usageLimits = [3, 2, 4])",
        "maxIncreasingGroups(usageLimits = [2, 3, 5, 7])",
        "maxIncreasingGroups(usageLimits = [1, 3, 3, 2, 4])",
        "maxIncreasingGroups(usageLimits = [1, 3, 3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [5, 3, 1, 4, 1, 1])",
        "maxIncreasingGroups(usageLimits = [2, 2, 5, 4, 10, 5])",
        "maxIncreasingGroups(usageLimits=[10, 10, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2])",
        "maxIncreasingGroups(usageLimits = [3, 5, 8, 9, 13, 14, 15, 21, 27])"
    ],
    "sample_206": [
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"24\")",
        "minimumOperations(num=\"123456789\")",
        "minimumOperations(num = \"999\")",
        "minimumOperations(num = '2025')",
        "minimumOperations(num = \"0123456789\")",
        "minimumOperations(num = \"2314\")",
        "minimumOperations(num = \"6269854\")",
        "minimumOperations(num=\"025321101\")",
        "minimumOperations(num = \"0291361616718395\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 4, 2, 5])",
        "doesValidArrayExist(derived = [4, 1, 3, 2])",
        "doesValidArrayExist(derived = [1, 2, 1, 3, 1, 2, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 4, 5, 7, 9, 12, 13, 15])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])"
    ],
    "sample_38": [
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s=\"aabaa\")",
        "minimumCost(s = \"babab\")",
        "minimumCost(s = \"aabcb\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"nab\")",
        "minimumCost(s = \"baabbaaaa\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7])",
        "maxIncreasingGroups(usageLimits = [1, 3, 6])",
        "maxIncreasingGroups(usageLimits = [3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [3, 5, 2])",
        "maxIncreasingGroups(usageLimits = [2, 2, 5])",
        "maxIncreasingGroups(usageLimits = [3, 7, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 5, 6, 10, 11])",
        "maxIncreasingGroups(usageLimits = [1, 4, 2, 5, 7, 10])",
        "maxIncreasingGroups(usageLimits = [100, 3, 1, 1, 3])",
        "maxIncreasingGroups(usageLimits = [2, 10, 1, 5, 4, 6, 7])"
    ],
    "sample_53": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = \"baabz\")",
        "smallestString(s = \"abaabc\")",
        "smallestString(s = \"azbaz\")",
        "smallestString(s = \"cde\")",
        "smallestString(s = \"azt\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4], x = 2)",
        "minAbsoluteDifference(nums = [4, 5, 2, 1, 3], x = 1)",
        "minAbsoluteDifference(nums = [1, 2, 3], x = 2)",
        "minAbsoluteDifference(nums=[1, 3, 4, 7], x=3)",
        "minAbsoluteDifference(nums = [10,10,10,10], x = 1)",
        "minAbsoluteDifference(nums = [4,3,2,5,6,7,3,2,1], x = 3)",
        "minAbsoluteDifference(nums = [4,5,2,3,7,8,9,3,2,1,5], x = 3)",
        "minAbsoluteDifference(nums = [90, 65, 120, 100, 160, 145, 175, 90, 195], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 2, offers = [[1, 2, 5], [2, 3, 10]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 100], [2, 3, 200], [3, 4, 300]])",
        "maximizeTheProfit(N = 2, offers = [[1, 2, 2], [2, 3, 3]])",
        "maximizeTheProfit(N = 2, offers = [[1, 2, 5], [1, 3, 10]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 2]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 2], [2, 3, 2], [3, 4, 10]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 5], [1, 3, 10], [3, 4, 40]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 2], [4, 5, 4], [1, 4, 6]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [1, 3, 3]])",
        "maximizeTheProfit(N = 5, offers = [\n    [1, 2, 100],\n    [2, 3, 300],\n    [1, 3, 200],\n    [1, 4, 400],\n    [5, 6, 100],\n    [3, 5, 200]\n])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"mq\", \"px\", \"zy\"], b = \"x\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\", \"mango\"], b = \"an\")",
        "splitWordsBySeparator(a = [\"x-y-z\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"apple\", \"boy\", \"cat\"], b = \" \")",
        "splitWordsBySeparator(a = [\"hi\"], b = \"i\")",
        "splitWordsBySeparator(a = [\"\",\" \",\"\"], b = \" \")",
        "splitWordsBySeparator(a = [\"apple\", \"pear\", \"orange\"], b = \"r\")",
        "splitWordsBySeparator(a = [\"mq\", \"mq\", \"zx\"], b = \"zx\")",
        "splitWordsBySeparator(a = [\"apple\", \"pear\", \"peach\", \"banana\", \"apple\"], b = \"e\")",
        "splitWordsBySeparator(a = [\"cute\", \"characters\", \"if\", \"i\", \"fine\", \"what\", \"you\", \"think\", \"of\", \"have\", \"life\"], b = \"o\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '000512301')",
        "removeTrailingZeros(a = \"5012301\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"naveen\")",
        "makeSmallestPalindrome(s = \"benev\")",
        "makeSmallestPalindrome(s = \"needle\")",
        "makeSmallestPalindrome(s = \"hello\")",
        "makeSmallestPalindrome(s = \"magnus\")",
        "makeSmallestPalindrome(s = \"abbccdd\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,4,4,3,3,0,9,2,3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1, 1, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 1], k = 2)",
        "longestEqualSubarray(nums = [2, 3, 1, 2, 4, 2], k = 3)",
        "longestEqualSubarray(nums = [4, 2, 2, 5, 6, 3, 3, 1, 1, 4], k = 4)",
        "longestEqualSubarray(nums = [2, 5, 7, 12, 20], k = 1)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 3, 3, 2], k = 2)",
        "maximumBeauty(nums=[1,2,3,4], k=2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 0)",
        "maximumBeauty(nums = [1,2,3,4,1], k = 3)",
        "maximumBeauty(nums = [1,2,4,7,8,10], k = 2)",
        "maximumBeauty(nums = [4, 1, 5, 10], k = 1)",
        "maximumBeauty(nums = [5, 10, 1, 3, 2, 8, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0], k = 1)"
    ],
    "sample_163": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums=[51, 2, 63, 55])",
        "maxSum(nums=[1,2,3,4,5,6])",
        "maxSum(nums = [11,12,13,14,15])",
        "maxSum(nums = [34, 54, 60, 23, 66, 98])",
        "maxSum(nums = [2, 12, 4, 1, 23])",
        "maxSum(nums = [10, 4, 1, 3, 8, 9])",
        "maxSum(nums = [2,2,1,9,5])",
        "maxSum(nums = [11,22,33,3,44,55,66,77,88,99,100])"
    ],
    "sample_151": [
        "finalString(s = \"rtsng\")",
        "finalString(s = \"abri\")",
        "finalString(s = \"irntsg\")",
        "finalString(s = \"test\")",
        "finalString(s = \"birish\")",
        "finalString(s = \"tea\")",
        "finalString(s = \"world\")",
        "finalString(s = 'itis')",
        "finalString(s = \"ifish\")",
        "finalString(s = \"goooog\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num = '12301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512300\")"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = \"100111\")",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = \"11011\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s = \"000111\")",
        "maximumOddBinaryNumber(s=\"101\")",
        "maximumOddBinaryNumber(s = \"00110101\")",
        "maximumOddBinaryNumber(s = '1101100')",
        "maximumOddBinaryNumber(s = \"111110000000000000000000\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \",\")",
        "splitWordsBySeparator(words = ['easy problem'], separator = ' ')",
        "splitWordsBySeparator(words = [\"easy problem\", \"hard problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy, problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\", \"is\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy-problem\", \"hard-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['easy', 'problem', 'is', 'easy'], separator = '')",
        "splitWordsBySeparator(words = [\"easy\", \"problem\", \"cat\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"ab-c\", \"ef-gh-ij-k\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['easy-problem-split', 'easy,problem-split'], separator = ',' )"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 1, 2, 3, 1], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5], K = 2)",
        "longestEqualSubarray(A = [1,1,1,1,1,1], K = 2)",
        "longestEqualSubarray(A = [1, 5, 5, 2, 5, 3, 5, 1, 1, 1], K = 3)",
        "longestEqualSubarray(A=[1, 2, 1, 2, 1, 2, 1, 2, 1], K=2)",
        "longestEqualSubarray(A = [1, 2, 3, 1, 3, 1], K = 1)",
        "longestEqualSubarray(A = [5, 4, 2, 4, 3, 1, 5, 2], K = 2)",
        "longestEqualSubarray(A=[2, 2, 3, 3, 4, 3, 4], K=3)",
        "longestEqualSubarray(A = [1, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 7, 8, 8, 8, 8], K = 3)",
        "longestEqualSubarray(A = [1, 2, 4, 5, 2, 1, 2, 3, 4, 5, 5, 1, 2, 2, 3, 4], K = 3)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [3, 2, 4, 1])",
        "countWays(nums = [1, 3, 5, 7, 9])",
        "countWays(nums = [1, 2, 1, 2, 1])",
        "countWays(nums = [3, 3, 1, 2, 4])",
        "countWays(nums = [0, 1, 4, 14])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 2, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 12, 16], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "sumIndicesWithKSetBits(nums = [3, 5, 4, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 3, 5, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [10, 2, 1, 13], k = 1)",
        "sumIndicesWithKSetBits(nums = [12, 4, 13, 6, 15], k = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = '100')",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"501200301\")"
    ],
    "sample_167": [
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"sentence\"], s = \"tias\")",
        "isAcronym(words=[\"decision\", \"making\"], s=\"dma\")",
        "isAcronym(words=[\"lebron\", \"james\"], s=\"ljb\")",
        "isAcronym(words = [\"stereo\", \"trio\"], s = \"str\")",
        "isAcronym(words=[\"slow\", \"and\", \"slow\", \"and\", \"fast\"], s=\"slfsaf\")",
        "isAcronym(words = [\"michael\", \"josh\", \"jay\", \"jayden\"], s = \"mj\")",
        "isAcronym(words = [\"beware\", \"the\", \"vast\", \"entire\", \"state\"], s = \"batman\")",
        "isAcronym(words = [\"numb\", \"b-day\", \"tobi\"], s = \"nbdt\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,3,1,2,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [2,4,6,8,10])",
        "countCompleteSubarrays(nums = [1,2,3,3,2,2])",
        "countCompleteSubarrays(nums = [1, 3, 5, 2, 7, 5])",
        "countCompleteSubarrays(nums = [4,3,1,9,5,2])",
        "countCompleteSubarrays(nums = [1, 3, 2, 3, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 4])",
        "countCompleteSubarrays(nums = [4,3,2,3,5,2,1])",
        "countCompleteSubarrays(nums=[1, 2, 3])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 5, target = 17)",
        "minimumPossibleSum(n = 10, target = 25)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 8, target = 11)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n=5, target=7)"
    ],
    "sample_147": [
        "finalString(s = \"rtsng\")",
        "finalString(s = \"string\")",
        "finalString(s = \"iwillwork\")",
        "finalString(s = \"apple\")",
        "finalString(s = \"ritsen\")",
        "finalString(s=\"apples\")",
        "finalString(s = \"abirtsni\")",
        "finalString(s = 'ikrnit')",
        "finalString(s = \"This is a simple sentence\")",
        "finalString(s = \"sitelenin\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s = \"x\")",
        "makeSmallestPalindrome(s = \"neve\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s=\"abcdedcba\")",
        "makeSmallestPalindrome(s = 'nceevn')",
        "makeSmallestPalindrome(s = \"sagem\")",
        "makeSmallestPalindrome(s = \"needles\")",
        "makeSmallestPalindrome(s=\"osjb\")",
        "makeSmallestPalindrome(s = 'abacaba')"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 3, offers = [[1, 1, 1], [2, 2, 2], [1, 1, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 2, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 6], [2, 4, 7], [3, 5, 8]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 5], [3, 5, 2], [1, 2, 1]])",
        "maximizeTheProfit(n = 5, offers = [[4, 5, 6], [2, 4, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 3, 4], [3, 5, 5], [4, 6, 6]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 6], [2, 4, 2], [3, 5, 1]])",
        "maximizeTheProfit(n=5, offers=[[1,2,5],[1,3,6],[3,4,8]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [5, 10, 4], [11, 5, 2]])",
        "maximizeTheProfit(n=6, offers=[[4,5,10],[4,5,10],[4,5,10],[4,5,10],[4,5,10],[4,5,10],[5,6,15],[5,6,15],[5,6,15],[5,6,15],[5,6,15],[5,6,15],[6,7,20],[6,7,20],[6,7,20],[6,7,20],[6,7,20],[6,7,20],[6,7,20],[7,8,25],[7,8,25],[7,8,25],[7,8,25],[7,8,25],[7,8,25],[8,9,30],[8,9,30],[8,9,30],[8,9,30],[8,9,30],[8,9,30],[9,10,35],[9,10,35],[9,10,35],[9,10,35],[9,10,35],[9,10,35]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 99], target = 5)",
        "maximumJumps(nums = [1,3,6,4,1,0,9], target = 5)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 3)",
        "maximumJumps(nums = [1,3,5,10,15], target = 3)",
        "maximumJumps(nums = [4, 3, 1, 2, 6, 0], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 0, 9, 1, 4, 3, 0], target = 5)",
        "maximumJumps(nums = [1, 2, 3, 9, 2], target = 3)",
        "maximumJumps(nums=[2,4,6,8], target=10)",
        "maximumJumps(nums = [5, 4, 3, 2, 1, 100000], target = 3031)",
        "maximumJumps(nums = [1,4,7,7,5,2,3,1,3,1,8,5,6,2,6,8,6,9,7,9,3,1,5,2,5,1,3,6,4,9,3,9,3,5,1,8,4,8,7,8,5,3,8,2,7,4,4,9,4,2,2,9,4,2,7,1,5,1,5,7,4,5,4,8,7,8,7,3,1,6,3,2,6,8,3,2,2,4,6,5,4,1,6,4,6,3,5,8,6,8,9,5,2,8,1,4,5,6,5,7,9,7,1,9,4,5,9,3,4,7,2,6,4,7,5,7,5,7,2,8,5,2,7,2,4,9,3,1,4,7,3,1,1,2,9,7,2,3,5,7,6,1,4,7,7,5,3,1,1,2,9,6,7,8,2,2,9,8,8,8,2,3,1,7,3,8,9,9,4,6,5,9,7,4,9,5,1,4,1,2,9,6,8,7,6,5,4,1,3,4,2,1,1,4,7,7,5,3,4,7,7,8,8,4,1,9,3,2,6,6,4,8,5,6,7,7,9,9,4,1,6,5,7,1,7,6,8,9,3,6,3,4,9,4,5,3,3,3,5,7,5,4,6,9,9,5,3,9,5,1,9,7,3,2,8,9,8,8,6,4,1,6,3,5,2,4,6,2,2,8,8,2"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,2])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 1, 0])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"00110\")",
        "maximumOddBinaryNumber(s = \"1111\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s
        "maximumOddBinaryNumber(s=\"110111\")",
        "maximumOddBinaryNumber(s = \"1101011010\")",
        "maximumOddBinaryNumber(s = \"010100100101110001\")",
        "maximumOddBinaryNumber(s = \"0000101101011101\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 5, k = 11)",
        "minimumSum(n = 5, k = 14)",
        "minimumSum(n = 6, k = 23)",
        "minimumSum(n = 3, k = 14)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 4)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 21, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 6)",
        "makeTheIntegerZero(num1 = 8, num2 = 7)",
        "makeTheIntegerZero(num1 = 5, num2 = 5)",
        "makeTheIntegerZero(num1 = 18, num2 = 11)",
        "makeTheIntegerZero(num1 = 100, num2 = 15)",
        "makeTheIntegerZero(num1 = 100000000, num2 = 200000000)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 5, target = 15)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 5, target = 13)",
        "minimumPossibleSum(n = 10, target = 23)",
        "minimumPossibleSum(n=10, target=21)",
        "minimumPossibleSum(n = 10, target = 3)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=10, k=3)",
        "countInterestingSubarrays(nums = [1, 0, 1, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [0, 0, 0, 0], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums=[2, 3, 1, 5, 4], modulo=5, k=3)",
        "countInterestingSubarrays(nums = [2, 5, 1, 7], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 5, 3, 7, 8], modulo = 3, k = 3)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [3,1,4,3,2], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 3)",
        "maximumBeauty(nums = [1, 1, 2, 2, 1], k = 3)",
        "maximumBeauty(nums = [2, 1, 5, 3, 6], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 7, 10, 11, 12, 13, 14, 15], k = 2)",
        "maximumBeauty(nums = [4, 1, 5, 9, 2, 7], k = 4)",
        "maximumBeauty(nums = [1, 3, 1, 2, 4, 4, 3], k = 4)",
        "maximumBeauty(nums=[1, 1, 4, 3, 2, 2, 1, 1, 1], k=4)",
        "maximumBeauty(nums = [1, 2, 4, 3, 5, 7, 8, 10, 9, 13, 11, 6], k = 10)"
    ],
    "sample_148": [
        "finalString(s = \"ponter\")",
        "finalString(s = 'pointer')",
        "finalString(s = \"bipin\")",
        "finalString(s = \"ponitore\")",
        "finalString(s = \"caterpillar\")",
        "finalString(s = \"piou\")",
        "finalString(s = \"hippo\")",
        "finalString(s = \"iionnner\")",
        "finalString(s = \"abobo\")",
        "finalString(s = \"badgei\")"
    ],
    "sample_231": [
        "countWays(nums = [0, 2, 1, 3])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [2, 1])",
        "countWays(nums = [0, 2, 3, 4, 6])",
        "countWays(nums = [0, 1, 2, 4, 5, 6, 7])",
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "countWays(nums = [-1, 0, 1, 2, 4, 5])",
        "countWays(nums = [1, 4, 4, 5])",
        "countWays(nums = [0, 2, 3, 5, 7, 9, 11, 13])",
        "countWays(nums = [0, 1, 1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 8, 8, 9, 10])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12,345,2,6,7896])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 67, 89])",
        "countBeautifulPairs(nums = [2, 4, 6, 8])",
        "countBeautifulPairs(nums = [1, 2, 3])",
        "countBeautifulPairs(nums = [5,19,10,12])",
        "countBeautifulPairs(nums = [12,23])",
        "countBeautifulPairs(nums = [3, 4, 6, 5, 2])",
        "countBeautifulPairs(nums=[12, 34, 67, 10])",
        "countBeautifulPairs(nums = [13,14,15,23,24,25,33,34,35])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 7, num2 = 12)",
        "makeTheIntegerZero(num1 = 1000000000, num2 = 1000000000)",
        "makeTheIntegerZero(num1 = 15, num2 = 14)",
        "makeTheIntegerZero(num1 = 70, num2 = 11)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s='neven')",
        "makeSmallestPalindrome(s = \"nene\")",
        "makeSmallestPalindrome(s = 'nodd')",
        "makeSmallestPalindrome(s = \"qven\")",
        "makeSmallestPalindrome(s = \"kite\")",
        "makeSmallestPalindrome(s=\"nevne\")",
        "makeSmallestPalindrome(s = \"abbaa\")",
        "makeSmallestPalindrome(s = \"steven\")",
        "makeSmallestPalindrome(s=\"longest\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"apple\", \"banana\"], s = \"ab\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"cat\", \"dog\"], s = \"ca\")",
        "isAcronym(words = [\"how\", \"now\", \"brown\", \"cow\"], s = \"how\")",
        "isAcronym(words = [\"no\", \"long\", \"gaps\"], s = \"nlg\")",
        "isAcronym(words = [\"very\", \"cool\"], s = \"vvc\")",
        "isAcronym(words = [\"m\", \"y\", \"a\", \"n\"], s = \"may\")",
        "isAcronym(words = [\"AdHoc\", \"Algebraic\", \"Analog\"], s = \"AAA\")",
        "isAcronym(words = [\"saturday\", \"sundays\", \"season\"], s = \"summer\")",
        "isAcronym(words = [\"wad\", \"dog\", \"doggo\", \"do\", \"dogs\"], s = \"dodg\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 2, 3, 5])",
        "numberOfGoodSubarraySplits(nums = [1,1,2])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,0,1,1,1,1,1,1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4], k=1)",
        "sumIndicesWithKSetBits(nums = [2, 1, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 10, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 2, 3, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 5, 6, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31], k = 3)"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 6, k = 5)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 6, k = 24)",
        "minimumSum(n = 6, k = 16)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [2, 2, 2, 2])",
        "countWays(nums = [1, 4, 5, 6, 7, 8])",
        "countWays(nums = [2, 1, 0, 3])",
        "countWays(nums = [1, 3, 5, 11])",
        "countWays(nums = [2, 2, 2, 1, 1])",
        "countWays(nums = [1, 1, 1, 1, 0, 0, 0])",
        "countWays(nums = [5, 5, 5, 7, 5])",
        "countWays(nums = [1, 3, 5, 1, 3, 5, 10])"
    ],
    "sample_39": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"baaa\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"aabbb\")",
        "minimumCost(s = \"10001\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"RRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLR\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"LRR_\")",
        "furthestDistanceFromOrigin(moves = \"___LR\")",
        "furthestDistanceFromOrigin(moves = \"LRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLL_RR\")",
        "furthestDistanceFromOrigin(moves = 'LL_')",
        "furthestDistanceFromOrigin(moves = 'R_R_R_R_R_R_L_L_L_L_L_L_')",
        "furthestDistanceFromOrigin(moves = \"LRRLLRLRLRLRLRL\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 3)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 15, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 3)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 5)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [4, 3, 2, 7, 8, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [4, 4, 2, 4, 3])",
        "countCompleteSubarrays(nums = [2, 4, 6, 8, 10])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2])",
        "countCompleteSubarrays(nums=[4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,4,2,1])",
        "countCompleteSubarrays(nums = [0, 1, 1, 2])",
        "countCompleteSubarrays(nums = [2, 3, 1, 4, 2, 1])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 1)",
        "longestAlternatingSubarray(nums=[1,2,3,4], threshold=4)",
        "longestAlternatingSubarray(nums = [1,3,2,4,5,6], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 1, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 3, 4, 1, 3, 10], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 1, 2, 2, 1, 3, 4, 3, 1, 5, 4, 3], threshold = 2)",
        "longestAlternatingSubarray(nums=[2, 6, 4, 8, 10, 11, 10], threshold = 5)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[0, 3], [2, 6], [3, 4], [6, 9]])",
        "numberOfPoints(nums = [[1, 3], [3, 5], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [5, 7], [8, 10]])",
        "numberOfPoints(nums = [[2, 3], [2, 3]])",
        "numberOfPoints(nums = [[0, 2], [4, 6], [7, 9], [1, 10]])",
        "numberOfPoints(nums = [[1, 3], [5, 8], [9, 10]])",
        "numberOfPoints(nums = [[-2, 2], [1, 5], [3, 9]])",
        "numberOfPoints(nums = [[1,3],[4,6],[9,10]])",
        "numberOfPoints(nums = [[-3,3], [1,2], [-2,2]])",
        "numberOfPoints(nums = [[5, 1], [7, 3], [4, 2]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [4, 6, 12])",
        "countBeautifulPairs(nums = [1,2,3,4,5])",
        "countBeautifulPairs(nums = [31, 25, 72, 37, 82])",
        "countBeautifulPairs(nums=[1,3,5])",
        "countBeautifulPairs(nums=[12, 24, 6, 32])",
        "countBeautifulPairs(nums = [420, 870])",
        "countBeautifulPairs(nums = [10, 30, 20, 24, 15])",
        "countBeautifulPairs(nums = [23, 10, 20, 30, 40, 14])",
        "countBeautifulPairs(nums = [34, 28, 31, 43, 11])",
        "countBeautifulPairs(nums = [47, 10, 81, 43, 13])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 3)",
        "longestAlternatingSubarray(nums=[3,1,2,4,5], t=5)",
        "longestAlternatingSubarray(nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 13",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 11], t = 12)",
        "longestAlternatingSubarray(nums=[1,2,1,2,1,2,1,2,1], t=2)",
        "longestAlternatingSubarray(nums=[1,3,2,1,4,1,9,2,1,1], t=7)",
        "longestAlternatingSubarray(nums=[2,1,5,3,1], t=2)",
        "longestAlternatingSubarray(nums = [1, 3, 4, 6, 3, 5], t = 3)",
        "longestAlternatingSubarray(nums = [3,2,4,5,6,4,3], t = 2)",
        "longestAlternatingSubarray(nums=[1,2,1,3,3,4,2,1], t=3)"
    ],
    "sample_36": [
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"baa\")",
        "minimumCost(s = \"zza\")",
        "minimumCost(s = \"aaaa\")",
        "minimumCost(s = \"aaab\")"
    ],
    "sample_21": [
        "minLength(s = \"AABCD\")",
        "minLength(s = \"AABCDD\")",
        "minLength(s = \"ABCBA\")",
        "minLength(s = \"AAB\")",
        "minLength(s = \"ABCABABCD\")",
        "minLength(s = \"CDCDCDCDEE\")",
        "minLength(s = \"ADCDABA\")",
        "minLength(s=\"ACDDBBAAA\")",
        "minLength(s = \"ABBAAABBAAABBAABB\")",
        "minLength(s = \"ACCBACABCCBB\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums=[1,3,5,2,7,5], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums=[2,4,6,8,10], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 1)",
        "countInterestingSubarrays(nums = [2,1,3,4,2], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,1], modulo = 10, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8], modulo = 10, k = 5)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 3, 3, 1, 1], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 1, 1, 2, 3, 4, 5, 5, 5, 5], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [3,1,2,5,1,3,3,2,1,6,1,2,1,1], modulo = 3, k = 1)"
    ],
    "sample_9": [
        "colorTheArray(n = 3, queries = [[0, 0], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [2, 0]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 4], [4, 0]])",
        "colorTheArray(n = 6, queries = [[2, 1], [1, 4], [2, 2]])",
        "colorTheArray(n = 6, queries = [[1,1],[1,2],[1,3],[2,2],[2,3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 3], [1, 4], [3, 1], [2, 4]])",
        "colorTheArray(n = 1, queries = [[0,1],[0,2],[0,1]])",
        "colorTheArray(n = 6, queries = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 4], [3, 5], [0, 5]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 1], [2, 2], [2, 4], [4, 3], [4, 0]])",
        "colorTheArray(n = 5, queries = [[2, 2], [3, 1], [4, 1], [1, 3], [4, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1,2,3], nums2 = [2,3,4])",
        "maxNonDecreasingLength(nums1 = [2, 1, 3], nums2 = [5, 3, 4])",
        "maxNonDecreasingLength(nums1 = [2, 1, 3, 1, 4], nums2 = [3, 2, 5, 1, 4])",
        "maxNonDecreasingLength(nums1 = [4, 5, 6, 5], nums2 = [3, 4, 2, 3])",
        "maxNonDecreasingLength(nums1 = [10, 9, 11], nums2 = [8, 7, 11])",
        "maxNonDecreasingLength(nums1=[10, 9, 2, 5, 3, 7, 101, 18], nums2=[1, 4, 6, 8, 16, 15, 20, 40])",
        "maxNonDecreasingLength(nums1 = [4, 8, 7, 2], nums2 = [5, 6, 7, 8])",
        "maxNonDecreasingLength(nums1 = [1, 1, 2, 3, 2, 5, 6], nums2 = [1, 1, 2, 3, 2, 5, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 4, 6, 7], nums2 = [2, 1, 5, 3, 8, 10])",
        "maxNonDecreasingLength(nums1 = [1, 3, 4, 3, 3, 7, 6, 2, 1, 1], nums2 = [2, 3, 4, 4, 6, 7, 7, 9, 8, 9])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 100)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 4, target = 15)",
        "minimumPossibleSum(n = 3, target = 100)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n = 3, target = 100)",
        "minimumPossibleSum(n = 10, target = 5)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 18, 2])",
        "findValueOfPartition(nums = [3, 4, 1, 9, 56, 7, 9, 12])",
        "findValueOfPartition(nums = [1,5,3,19,18,2])",
        "findValueOfPartition(nums = [4, 1, 3, 2])",
        "findValueOfPartition(nums = [3, 5, 2, 1, 4, 6])",
        "findValueOfPartition(nums=[2, 5, 1, 3, 4])",
        "findValueOfPartition(nums = [1, 4, 20, 3, 10, 5])",
        "findValueOfPartition(nums = [7, 2, 5, 4, 3, 9])",
        "findValueOfPartition(nums=[-10, -5, 3, 2, 10, 100, 150])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LL__RRR\")",
        "furthestDistanceFromOrigin(moves = \"L___R____\")",
        "furthestDistanceFromOrigin(moves = \"LR_RL\")",
        "furthestDistanceFromOrigin(moves = \"__R__\")",
        "furthestDistanceFromOrigin(moves = \"L_L___R_L__\")",
        "furthestDistanceFromOrigin(moves = \"RLRLLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LL_R__RL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRRRLRLLL\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [2, 1, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 1, 1])",
        "minimumIndex(nums = [1, 2, 2, 2, 2, 3])",
        "minimumIndex(nums = [1,1,2,2,3])",
        "minimumIndex(nums = [1, 1, 3, 1, 1])",
        "minimumIndex(nums = [1,1,1,1,1,1,2])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 2, 3, 4, 3, 3])",
        "minimumIndex(nums = [0, 2, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,",
        "minimumIndex(nums = [1, 4, 9, 10, 10, 9, 4, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1, 1, 1, 2, 2, 3])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 5, 1, 4, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [3, 2, 0, 1])",
        "semiOrderedPermutation(nums = [2,1,3,4,5,6])",
        "semiOrderedPermutation(nums=[4,2,3,1])",
        "semiOrderedPermutation(nums = [2, 3, 5, 1, 4])",
        "semiOrderedPermutation(nums=[1, 5, 3, 4])"
    ],
    "sample_172": [
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n=5, k=10)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n=5, k=4)",
        "minimumSum(n = 10, k = 5)",
        "minimumSum(n=2,k=3)",
        "minimumSum(n=5, k=30)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n=4, k=13)"
    ]
}