{
    "sample_178": [
        "maximizeTheProfit(n = 6, offers = [[2, 5, 4], [1, 5, 10], [2, 3, 10]])",
        "maximizeTheProfit(n = 3, offers = [[2, 1, 5], [1, 0, 4]])",
        "maximizeTheProfit(n = 2, offers = [[2, 1, 100], [1, 0, 1]])",
        "maximizeTheProfit(n = 6, offers = [[2, 5, 4], [2, 5, 3], [3, 5, 10], [1, 3, 1], [5, 6, 2]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 10], [1, 3, 5], [4, 3, 1]])",
        "maximizeTheProfit(n = 3, offers = [[2, 1, 3], [1, 2, 2]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 10], [1, 3, 12]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2], [2, 1, 3], [1, 3, 5]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 4], [2, 4, 3], [3, 2, 5], [3, 5, 2], [4, 2, 3], [5, 2, 6]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 5], [1, 2, 3], [4, 1, 5], [5, 1, 7]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1,2,3,3,4,5], m = 3)",
        "canSplitArray(nums = [1,2,3], m = 3)",
        "canSplitArray(nums=[3,2,1,2,3,4,3,2,1], m=3)",
        "canSplitArray(nums = [2,2,2,2,5,5,5,8], m = 3)",
        "canSplitArray(nums = [2,2,2,2,5,5,5,10,10,10], m = 5)",
        "canSplitArray(nums = [2,1,2,1,2,1,2,1], m = 4)",
        "canSplitArray(nums = [2,1,1,1,1], m = 5)",
        "canSplitArray(nums=[2,1,2], m = 2)"
    ],
    "sample_106": [
        "checkArray(nums = [0, 1, 0, 1], k = 1)",
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [1, 2, 3, 0], k = 2)",
        "checkArray(nums = [1, 1, 0], k = 1)",
        "checkArray(nums = [1, 2, 3, 5], k = 3)",
        "checkArray(nums = [2, 1, 1, 2], k = 2)",
        "checkArray(nums = [0, 0, 10, 0], k = 2)",
        "checkArray(nums = [1, 2, 2, 3, 3, 4, 5], k = 1)",
        "checkArray(nums = [4, 2, 1, 6, 8], k = 3)",
        "checkArray(nums = [1, 5, 3, 7, 1, 2], k = 2)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [2, 4, 5, 3], k = 1)",
        "maximumBeauty(nums = [1, 3, 1, 4, 5], k = 2)",
        "maximumBeauty(nums = [3, 3, 1, 1], k = 3)",
        "maximumBeauty(nums = [10, 2, 6, 8, 3], k = 3)",
        "maximumBeauty(nums = [1, 12, 123, 1235, 567], k = 9)",
        "maximumBeauty(nums=[1,2,3,4,3,2,1], k=3)",
        "maximumBeauty(nums = [1, 2, 2, 3, 3, 4, 4, 5, 6], k = 1)",
        "maximumBeauty(nums=[2, 3, 4, 7, 8], k=1)",
        "maximumBeauty(nums = [2, 4, 7, 8, 13, 18, 21], k = 3)",
        "maximumBeauty(nums = [2, 8, 10, 1, 5, 3], k = 3)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"foo\", \"bar\", \"baz\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"abc\", \"def\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"pear\", \"grape\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"my\", \"name\", \"is\", \"luke\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"abc\", \"defg\", \"hi\"], separator = \" \")",
        "splitWordsBySeparator(words=[\"banana\", \"mango\", \"apple\"], separator=\"\")",
        "splitWordsBySeparator(words = [\"hello\", \"there\"], separator = \"e\")",
        "splitWordsBySeparator(words = [\"the\", \"brown\", \"fox\", \"jumped\"], separator = \"b\")"
    ],
    "sample_226": [
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [1,2,3,4,5,6,7,8,9])",
        "countWays(nums = [1, 1, 1, 1, 1, 1])",
        "countWays(nums = [3, 5, 6, 1, 2])",
        "countWays(nums = [0, 1, 2, 5, 7, 8, 9])",
        "countWays(nums = [2, 5, 1, 4, 10])",
        "countWays(nums=[3,3,4,4,5,5,6])",
        "countWays(nums = [0, 1, 4, 6, 9, 11])",
        "countWays(nums=[3,3,5,5,6,7,9,9,10,10])"
    ],
    "sample_122": [
        "minimumIndex(nums = [3, 4, 3, 2, 3, 1, 3])",
        "minimumIndex(nums = [3, 4, 3, 2, 3, 1, 3])",
        "minimumIndex(nums = [2,2,1])",
        "minimumIndex(nums = [1, 1, 2])",
        "minimumIndex(nums = [4, 3, 1, 4, 2])",
        "minimumIndex(nums = [3,3,3,2,2,2,1,1,1])",
        "minimumIndex(nums = [2,2,1,0,0,2,2])",
        "minimumIndex(nums=[3,3,3,2,2,1])",
        "minimumIndex(nums = [1, 1, 1, 3, 3, 3, 3, 2, 2, 2, 2])",
        "minimumIndex(nums = [2,2,2,1,2,3,3,4])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1,4],[4,5]])",
        "numberOfPoints(nums = [[1,10],[10,20]])",
        "numberOfPoints(nums = [[1,1],[1,1],[1,1]])",
        "numberOfPoints(nums = [[1, 10], [10, 20]])",
        "numberOfPoints(nums = [[1,5],[2,3],[4,7]])",
        "numberOfPoints(nums = [[1,10],[4,4],[9,10]])",
        "numberOfPoints(nums = [[1,1],[2,4],[5,9]])",
        "numberOfPoints(nums = [[1, 5], [5, 7], [3, 4], [2, 8]])",
        "numberOfPoints(nums = [[1,2],[3,3],[5,8],[4,9]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,4,3])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums=[1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1, 2, 5, 4, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 5, 3, 2, 6, 4])",
        "semiOrderedPermutation(nums = [1,4,5,6,3])",
        "semiOrderedPermutation(nums=[3, 4, 1, 2, 5])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 4, target = 3)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 15, target = 30)"
    ],
    "sample_118": [
        "minimumIndex(nums = [3, 4, 3, 2, 3, 1, 3])",
        "minimumIndex(nums = [1, 2, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 1, 3, 1])",
        "minimumIndex(nums = [1, 2, 1, 2, 1])",
        "minimumIndex(nums = [1, 2, 2, 2, 1])",
        "minimumIndex(nums = [1,2,2,3,4,4,4,5])",
        "minimumIndex(nums = [6,1,2,0,3,2])",
        "minimumIndex(nums = [3,4,3,2,3,1,3,2,3,6])",
        "minimumIndex(nums = [1, 1, 3, 2, 3, 1, 4, 2])",
        "minimumIndex(nums = [2, 1, 2, 0, 1, 2, 1, 1, 1, 1, 0])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 2, k = 9)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 4, k = 15)",
        "minimumSum(n = 1, k = 2)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[0,2], [5,10], [13,23], [24,25]])",
        "numberOfPoints(nums = [[1,2], [2,4], [4,5]])",
        "numberOfPoints(nums = [[1, 1], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[1, 5], [4, 8], [10, 15]])",
        "numberOfPoints(nums = [[2, 5], [4, 7]])",
        "numberOfPoints(nums = [[1,2], [3,4], [3,6]])",
        "numberOfPoints(nums = [[3, 5], [2, 6], [1, 5]])",
        "numberOfPoints(nums = [[-2, 2], [-3, 3], [-1, 1], [1, 1]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 2)",
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 3)",
        "maximumJumps(nums=[2, 3, 1, 1, 4], target=2)",
        "maximumJumps(nums = [5, 6, 4, 4, 6, 9, 4, 4, 7, 4, 4, 8, 2, 6], target = 3)",
        "maximumJumps(nums=[100, -23, 100, -23, 100, -23], target=1)",
        "maximumJumps(nums = [5, 3, 6, 3, 1, 3], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 3, 8, 9, 3], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 10, 4], target = 5)",
        "maximumJumps(nums = [4, 2, 4, 4, 6, 9, 4, 4, 7, 4, 4, 8, 2, 6, 8, 1, 5, 9, 6, 5, 2, 7, 9, 7, 9, 5, 9, 6, 9, 4, 1, 6, 8, 8, 4, 4, 2, 6, 5, 8, 5, 7, 4, 5, 8, 2, 8, 8, 1, 1, 3, 6, 6, 9, 3, 2, 7, 7, 4, 7, 6, 6, 6, 9, 9, 1, 9, 1, 9, 3, 9, 7, 4, 7, 2, 5, 2, 7, 9, 5, 9, 8, 9, 2, 9, 9, 7, 9, 2, 8, 9, 9, 5, 9, 9, 4, 8, 5, 9, 9, 5, 4, 6, 4, 5, 3, 8, 7, 5, 9, 5, 6, 9, 3, 2, 2, 9, 4, 9, 9, 2, 1, 8, 4, 6, 7, 8, 1, 8, 9, 9, 5, 4, 9, 5, 9, 9, 9, 8, 9, 9, 9, 9, 9, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n=3, k=5)",
        "minimumSum(n=2, k=2)",
        "minimumSum(n = 10, k = 7)",
        "minimumSum(n = 2, k = 1)"
    ],
    "sample_154": [
        "canSplitArray(nums = [3,2,1,2,3,4,3,2,1], m = 5)",
        "canSplitArray(nums = [1,4,4], m = 5)",
        "canSplitArray(nums = [1,4,5,10,11,12], m = 9)",
        "canSplitArray(nums = [1,2,3,4,5], m = 5)",
        "canSplitArray(nums = [3, 2, 1, 2, 3, 4, 3, 2, 1], m = 5)",
        "canSplitArray(nums=[1,1,1], m=2)",
        "canSplitArray(nums = [1,1,1,1,1,1,1,1], m = 1)",
        "canSplitArray(nums = [1,2,2,2], m = 2)",
        "canSplitArray(nums = [3,2,2,2,5], m = 1)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 1)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[2, 1, 5], [3, 2, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 5], [3, 2, 10]])",
        "maximizeTheProfit(n = 6, offers = [[2, 5, 4], [1, 3, 10]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 5], [3, 2, 6]])",
        "maximizeTheProfit(n = 2, offers = [[2, 1, 4], [2, 2, 3]])",
        "maximizeTheProfit(n=6, offers=[[2, 5, 3], [5, 10, 4]])",
        "maximizeTheProfit(n = 6, offers = [[2, 3, 4], [1, 5, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1, 1, 10], [2, 1, 5], [2, 2, 4]])",
        "maximizeTheProfit(\n    n = 5,\n    offers = [\n        [2, 1, 5],\n        [3, 2, 10],\n        [4, 2, 9],\n        [2, 3, 100]\n    ]\n)",
        "maximizeTheProfit(n=20, offers=[[5, 2, 3], [6, 10, 4], [1, 11, 10]])"
    ],
    "sample_108": [
        "checkArray(nums = [10, 5, 2, 7], k = 3)",
        "checkArray(nums = [1, 1, 1], k = 1)",
        "checkArray(nums = [1, 1, 1], k = 1)",
        "checkArray(nums = [1, -1, 5, -2, 3], k = 3)",
        "checkArray(nums = [10, 10, 2, 2, 2, 2], k = 2)",
        "checkArray(nums=[1, -1, 5, -2, 3], k=3)",
        "checkArray(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], k = 3)",
        "checkArray(nums=[5, 4, 3, 2, 1], k=1)",
        "checkArray(nums = [4, 4, 3, 2, 6, 1], k = 2)",
        "checkArray(nums = [1, -2, 0, 1, -1, 0, -1, -2, 1, -2, 0, -2, -1, -2, -3], k = 2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,2,3], k = 2)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 3, queries = [[1,1],[1,2],[2,1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 2], [1, 3], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 0], [1, 2], [0, 1]])",
        "colorTheArray(n = 4, queries = [[1, 0], [2, 1], [2, 2], [0, 3], [2, 1]])",
        "colorTheArray(n=3, queries=[[0, 2], [1, 2], [1, 0], [2, 2]])",
        "colorTheArray(n = 2, queries = [[1, 1], [0, 1], [1, 2], [1, 0], [0, 2]])",
        "colorTheArray(n=5, queries=[[0,1],[1,2],[2,1],[1,3],[1,4]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 3], [3, 1], [1, 3], [2, 1], [3, 2], [4, 3]])",
        "colorTheArray(n=10, queries=[[0, 1], [1, 2], [2, 0], [1, 0], [1, 1], [1, 0], [2, 2], [3, 4], [3, 4], [4, 5], [5, 6], [5, 6]])"
    ],
    "sample_55": [
        "smallestString(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "smallestString(s = 'kddsbc')",
        "smallestString(s = 'abcd')",
        "smallestString(s = \"aaaaaaaaz\")",
        "smallestString(s = 'abaa')",
        "smallestString(s = \"kddsbn\")",
        "smallestString(s = \"bbb\")",
        "smallestString(s = \"aaaak\")",
        "smallestString(s = 'adkddbcd')",
        "smallestString(s = 'bardnddbrd')"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19], threshold = 3)",
        "longestAlternatingSubarray(nums = [0, 1, 0, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [4,2,3,3,4,4,2,2], threshold = 0)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 7, 2, 5, 8], threshold = 3)",
        "longestAlternatingSubarray(nums = [6, 4, 1, 3, 10, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 2, 5], threshold = 3)",
        "longestAlternatingSubarray(nums=[7, 1, 14, 4, 12, 15], threshold=2)",
        "longestAlternatingSubarray(nums = [4, 0, 4, 2, 4, 4, 0], threshold = 2)",
        "longestAlternatingSubarray(nums = [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1], threshold = 2)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 1, 2, 4, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 2], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 3, 1, 2, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], threshold = 3)",
        "longestAlternatingSubarray(nums = [4, 2, 4, 4, 4, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 3, 1, 2, 4, 3, 1, 2, 2], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 9, 2, 1, 4, 7, 9, 2, 1, 4, 7, 9], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 4, 2, 7, 4, 2, 6], threshold = 3)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 3, 2])",
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 3, 5, 3, 3])",
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 4, 3])",
        "distinctDifferenceArray(nums = [5, 2, 1, 3, 4, 3])"
    ],
    "sample_22": [
        "minLength(s = \"ADCB\")",
        "minLength(s = \"CDABAB\")",
        "minLength(s = \"CDAA\")",
        "minLength(s = \"AABCDD\")",
        "minLength(s = \"AACCDDDD\")",
        "minLength(s = \"AAABBBCD\")",
        "minLength(s = \"ABABDABACDABABCABAB\")",
        "minLength(s = \"ABDCAB\")",
        "minLength(s
        "minLength(s = \"BACDGABCD\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"mbadm\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaaba\")",
        "minimumCost(s = \"baabaa\")",
        "minimumCost(s = \"zzyzx\")",
        "minimumCost(s = \"abcda\")",
        "minimumCost(s = \"aabcc\")",
        "minimumCost(s = \"xxcaabxaaaz\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [3, 2, 1, 2, 3, 4, 3, 2, 1], m = 5)",
        "canSplitArray(nums = [1], m = 1)",
        "canSplitArray(nums = [1,2,3,4,5], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [3, 1, 4, 2], m = 4)",
        "canSplitArray(nums = [1,4,5,10,7], m = 8)",
        "canSplitArray(nums = [3,2,2,2,5], m = 4)",
        "canSplitArray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 6], m = 5)",
        "canSplitArray(nums = [3, 2, 2, 2, 2, 2, 2, 2, 2], m = 6)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1,0,1,0])",
        "doesValidArrayExist(derived = [1,0,0,1,0])",
        "doesValidArrayExist(derived = [1, 3, 7])",
        "doesValidArrayExist(derived = [2, 4, 1, 3, 0])",
        "doesValidArrayExist(derived = [3, 5, 8, 12])",
        "doesValidArrayExist(derived = [0, 2, 1, 3, 2])",
        "doesValidArrayExist(derived = [3, 6, 1, 3, 3, 3, 3, 1])"
    ],
    "sample_109": [
        "checkArray(nums = [10, 5, 2, 3], k = 2)",
        "checkArray(nums = [10, 5, 2, 3], k = 2)",
        "checkArray(nums = [10, 5, 2, 7], k = 3)",
        "checkArray(nums = [1, -1, 5, -2, 3], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums=[1,2,3], k=1)",
        "checkArray(nums = [1,2,3,4], k = 0)",
        "checkArray(nums=[1, 2, 3], k=4)",
        "checkArray(nums = [1, 2, 3, 4, 5, 1], k = 2)",
        "checkArray(nums = [5, 1, 3, 2], k = 2)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15, 20, 25], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 2, 1], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 10, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 40, 40, 20, 20], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 5, 5, 6, 6], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 1, 4, 3, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 8, 11, 20, 30], target = 10)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 0, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 5, 6, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 6, 12, 24, 48], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 5, 7, 10], k=1)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1,4,2,3], k = 3)",
        "maximumBeauty(nums = [1,4,2,3], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [3, 3, 1, 8, 1], k = 2)",
        "maximumBeauty(nums = [1, 3, 7, 11], k = 2)",
        "maximumBeauty(nums = [1,1,1,2,2,2,3,3], k = 2)",
        "maximumBeauty(nums = [2,3,5,7,9], k = 5)",
        "maximumBeauty(nums=[2, 8, 20, 1, 8, 20], k=2)",
        "maximumBeauty(nums = [1, 5, 8, 10, 20, 22], k = 5)"
    ],
    "sample_205": [
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"01010\")",
        "minimumOperations(num = \"050\")",
        "minimumOperations(num = \"5005\")",
        "minimumOperations(num = \"1900\")",
        "minimumOperations(num = \"0500\")",
        "minimumOperations(num = \"7250\")",
        "minimumOperations(num = \"00111111\")",
        "minimumOperations(num = \"875\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"5050\")",
        "minimumOperations(s = \"0110110\")",
        "minimumOperations(s = \"110011\")",
        "minimumOperations(s = \"0100000\")",
        "minimumOperations(s = \"0102050\")",
        "minimumOperations(s = \"0100100100100\")",
        "minimumOperations(s=\"1001\")",
        "minimumOperations(s = \"110000000000000000000\")",
        "minimumOperations(s = \"0200050000\")",
        "minimumOperations(s = \"01001111101011\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1,2,4,3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [5, 4, 3, 2, 1])",
        "semiOrderedPermutation(nums=[1,2,3,4,5])",
        "semiOrderedPermutation(nums=[1, 3, 5, 2])",
        "semiOrderedPermutation(nums = [1,2,5,7,8])",
        "semiOrderedPermutation(nums = [3,2,1,2])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRR\")",
        "furthestDistanceFromOrigin(moves = 'LLRR')",
        "furthestDistanceFromOrigin(moves = \"RLLLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRDDLLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRRD\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRLRLL\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"abc\", \"def\"], s = \"abc\")",
        "isAcronym(words = [\"banana\", \"orange\"], s = \"bna\")",
        "isAcronym(words = [\"AC\", \"DC\"], s = \"DCA\")",
        "isAcronym(words = [\"amazon\", \"apple\", \"microsoft\", \"facebook\"], s = \"am\")",
        "isAcronym(words = [\"may\", \"can\", \"me\"], s = \"mayc\")",
        "isAcronym(words = [\"tkh\", \"d\"], s = \"tkhd\")",
        "isAcronym(words = [\"dog\", \"toilet\", \"road\"], s = \"dorto\")",
        "isAcronym(words = [\"Civil\", \"Informatics\", \"Volunteer\"], s = \"CIVIC\")",
        "isAcronym(words = [\"python\", \"java\", \"kotlin\", \"js\", \"go\"], s = \"JP\")",
        "isAcronym(words = [\"allergy\", \"asthma\", \"lung\", \"supercalifragilisticexpialidocious\"], s = \"ASA\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 2, 2, 1, 2, 2, 1, 2, 2, 2], modulo = 5, k = 2)",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo",
        "countInterestingSubarrays(nums = [4,3,2,6,2,3,4], modulo = 5, k = 4)",
        "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 34, 57, 88, 145])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "countBeautifulPairs(nums = [\"12\", \"34\", \"56\", \"78\"])",
        "countBeautifulPairs(nums = [12, 23, 345, 4567, 56789, 67890])",
        "countBeautifulPairs(nums = [\"12\", \"3456\", \"10\", \"9999\"])",
        "countBeautifulPairs(nums = [2, 2, 3, 3, 4, 4, 5, 5, 6])",
        "countBeautifulPairs(nums = [\"11\", \"23\", \"45\", \"56\", \"77\", \"88\"])",
        "countBeautifulPairs(nums = [1111, 22, 1, 2])",
        "countBeautifulPairs(nums = [12, 28, 36, 56, 65, 69, 100, 101, 103, 112])"
    ],
    "sample_97": [
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 1000)",
        "maximumJumps(nums = [100,-23,-23,404,100,23,23,23,3,404], target = 1000)",
        "maximumJumps(nums = [4,2,3,0,3,1,2], target = 5)",
        "maximumJumps(nums = [10,13,12,14,15], target = 5)",
        "maximumJumps(nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
        "maximumJumps(nums = [3,3,3,3,3], target = 3)",
        "maximumJumps(nums=[100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target=100)",
        "maximumJumps(nums=[2,3,1,1,4], target=2)",
        "maximumJumps(nums = [9, 8, 6, 6, 7, 8, 9], target = 3)",
        "maximumJumps(nums=[9, 4, 2, 1, 0, 2, 3, 8, 6, 7, 5], target=9)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums=[1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [12, 28, 46, 32, 50])",
        "countBeautifulPairs(nums = [12,23,34,45,56,67,78,89,90,101,112])",
        "countBeautifulPairs(nums = [3, 8, 15, 32])",
        "countBeautifulPairs(nums = [42, 144, 149, 441])",
        "countBeautifulPairs(nums = [31, 12, 17, 29, 30, 7, 27])",
        "countBeautifulPairs(nums = [23, 67, 98, 89, 45, 66, 55])",
        "countBeautifulPairs(nums = [213, 4444, 66, 9, 1311, 555, 124, 2555, 2000])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"A\")",
        "minLength(s = \"ABCDC\")",
        "minLength(s = \"AABCDBBABCD\")",
        "minLength(s = \"CDADBAA\")",
        "minLength(s = \"AXXCDZAB\")"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'banana')",
        "finalString(s = 'this is a test')",
        "finalString(s = 'abcdi')",
        "finalString(s = 'hiiiii')",
        "finalString(s = \"rtsnig\")",
        "finalString(s = 'pqrtsng')",
        "finalString(s = \"this is a funny string\")",
        "finalString(s = \"cbaises\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7])",
        "doesValidArrayExist(derived = [2, 3, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [2, 0, 3, 2])",
        "doesValidArrayExist(derived = [0, 1, 3, 5, 8, 11])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 3, 6, 10, 11, 15])",
        "findValueOfPartition(nums = [30, 15, 60, 75, 45, 15, 15, 45])",
        "findValueOfPartition(nums = [1, 5, 10, 20, 28, 3])",
        "findValueOfPartition(nums = [6, 2, 4, 7])",
        "findValueOfPartition(nums = [1, 1, 3, 4, 6])",
        "findValueOfPartition(nums = [3, 5, 2, 6])",
        "findValueOfPartition(nums = [1, 9, 4, 10, 7, 8])",
        "findValueOfPartition(nums = [3, 5, 8, 9])",
        "findValueOfPartition(nums = [5, 10, 12, 15, 20])",
        "findValueOfPartition(nums = [10, 9, 4, 5, 1, 2, 8])"
    ],
    "sample_7": [
        "colorTheArray(n = 4, queries = [[3,1],[1,2],[0,3],[0,3]])",
        "colorTheArray(n = 3, queries = [[2,1], [1,2], [2,1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [2, 3]])",
        "colorTheArray(n = 3, queries = [[0,1],[0,1],[0,1]])",
        "colorTheArray(n = 3, queries = [[1,1],[2,2],[1,1]])",
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [3, 1], [1, 2], [2, 2], [5, 0]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [2, 1], [2, 2], [3, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[1,2],[3,2],[2,3],[5,1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [1, 5]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 0], [2, 0], [0, 2], [3, 0], [3, 1], [0, 3], [2, 1], [1, 2]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 4, target = 12)",
        "minimumPossibleSum(n = 3, target = 11)",
        "minimumPossibleSum(n = 4, target = 13)",
        "minimumPossibleSum(n = 5, target = 14)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 4, k = 12)",
        "minimumSum(n = 4, k = 1)",
        "minimumSum(n = 1, k = 7)",
        "minimumSum(n = 5, k = 12)",
        "minimumSum(n = 4, k = 13)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 4, 2], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 16, 24, 32], target = 24)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 2, 4, 3, 4, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 40, 5, 80], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 2, 3, 3, 2, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 9, 13, 16, 11, 8], target = 13)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 12, 14, 17, 13, 19, 15, 12], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 2, 3, 2, 3, 1, 1, 1, 2, 2, 1, 2, 1, 1, 3, 1, 3, 3, 1, 3, 1, 3, 3, 3], target = 3)"
    ],
    "sample_152": [
        "canSplitArray(nums = [3, 2, 1, 2, 3, 4, 3, 2, 1], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 9)",
        "canSplitArray(nums = [1,2,3,4,5], m = 9)",
        "canSplitArray(nums = [1, 1, 1], m = 2)",
        "canSplitArray(nums = [3,2,1,2,3], m = 5)",
        "canSplitArray(nums = [1, 2, 1], m = 2)",
        "canSplitArray(nums = [3, 2, 1, 1], m = 5)",
        "canSplitArray(nums = [3,3,2,2,5,5], m = 5)",
        "canSplitArray(nums = [1,2,3,3,4,5,6], m = 10)",
        "canSplitArray(nums = [2,3,1,2,4,5], m = 11)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [5, 3, 1, 4, 7], t = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19], t = 5)",
        "longestAlternatingSubarray(nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
        "longestAlternatingSubarray(nums = [2,2,2,2,1], t = 2)",
        "longestAlternatingSubarray(nums = [3, 4, 1, 1, 6], t = 3)",
        "longestAlternatingSubarray(nums = [1,1,2,2,2], t = 2)",
        "longestAlternatingSubarray(nums=[1,0,1,1,1,0], t=1)",
        "longestAlternatingSubarray(nums = [1,1,2,1,1,1,1,1], t = 0)",
        "longestAlternatingSubarray(nums = [2,2,2,2,3,4,5,2,2,2,2], t = 3)",
        "longestAlternatingSubarray(nums = [2,3,4,3,4,5,4,3,4,5,6,3,4,5,6,7,3,4,5,6,7,8,3,4,5,6,7,8,9], t = 5)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,0,1,1,0,1,1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num='512300')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"000000000512301\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 4, b = 3)",
        "makeTheIntegerZero(a = 3, b = 5)",
        "makeTheIntegerZero(a = 19, b = 3)",
        "makeTheIntegerZero(a = 1000, b = 5)",
        "makeTheIntegerZero(a = 11, b = 7)",
        "makeTheIntegerZero(a = 5, b = 15)",
        "makeTheIntegerZero(a = 1001, b = 100)",
        "makeTheIntegerZero(a=10, b=13)",
        "makeTheIntegerZero(a = 527, b = 65)",
        "makeTheIntegerZero(a = 9293, b = 140)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1,2,3,4,5], m = 9)",
        "canSplitArray(nums = [3, 2, 1, 2, 3, 4, 3, 2, 1], m = 5)",
        "canSplitArray(nums = [1, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 1], m = 3)",
        "canSplitArray(nums = [3,2,2,2,5,2], m = 5)",
        "canSplitArray(nums = [1,4,5,10,7,6,8], m = 15)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7], m = 3)",
        "canSplitArray(nums = [1,2,2,2,2,2], m = 6)",
        "canSplitArray(nums = [2, 1, 1, 1, 1, 1, 1, 1], m = 2)"
    ],
    "sample_161": [
        "maxSum(nums = [2, 3, 1, 8, 2])",
        "maxSum(nums = [12, 1, 15])",
        "maxSum(nums = [5, 2, 4, 1, 2])",
        "maxSum(nums = [4, 2, 5, 90, 12])",
        "maxSum(nums = [2, 6, 1, 4, 8, 10, 9])",
        "maxSum(nums = [2, 5, 3, 7, 10, 20])",
        "maxSum(nums = [100, 10, 100, 10, 10, 100, 100, 10, 10])",
        "maxSum(nums = [10, 4, 6, 2, 7, 9, 5, 1, 3, 8])",
        "maxSum(nums=[34, 56, 90, 13, 56, 99, 2, 8])",
        "maxSum(nums = [23, 45, 67, 12, 99, 90, 65, 89])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n=2, target=4)",
        "minimumPossibleSum(n=3, target=4)",
        "minimumPossibleSum(n = 2, target = 11)",
        "minimumPossibleSum(n=5, target=8)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [3, 1, 4, 2, 5])",
        "findValueOfPartition(nums = [10, 9, 1, 2, 3, 8, 5])",
        "findValueOfPartition(nums = [3, 5, 10, 2, 7])",
        "findValueOfPartition(nums=[1, 2, 5, 10, 11, 15])",
        "findValueOfPartition(nums = [10,12,13,14,15,16,17,18,19])",
        "findValueOfPartition(nums=[1, 100, 1000, 1000000])",
        "findValueOfPartition(nums = [1, 10, 2, 20, 5, 50])",
        "findValueOfPartition(nums=[1, 11, 2, 10, 6, 3, 16])",
        "findValueOfPartition(nums=[5, 10, 11, 13, 14])",
        "findValueOfPartition(nums=[10, 4, 6, 5, 3, 1, 4])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,3]])",
        "numberOfPoints(nums = [[1,2], [2,3], [3,4]])",
        "numberOfPoints(nums = [[1,2], [2,3], [4,5]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,5],[5,7]])",
        "numberOfPoints(nums = [[2,2],[3,3]])",
        "numberOfPoints(nums = [[0, 0], [1, 1], [2, 2]])",
        "numberOfPoints(nums = [[1, 4], [4, 5], [8, 10]])",
        "numberOfPoints(nums = [[1,3], [5,5], [1,7]])",
        "numberOfPoints(nums = [[1,10], [4,7]])",
        "numberOfPoints(nums = [[1,5], [3,5], [4,5], [5,5], [5,6], [6,6]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,3]])",
        "numberOfPoints(nums = [[0,2], [5,10], [13,23], [24,25]])",
        "numberOfPoints(nums = [[0,1], [1,2], [2,3], [3,4], [4,5], [5,6], [6,7]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [2, 4]])",
        "numberOfPoints(nums = [[0, 2], [2, 4]])",
        "numberOfPoints(nums = [[-1, 3], [0, 1], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[0, 2], [4, 5], [10, 11], [10, 12], [13, 15]])",
        "numberOfPoints(nums = [[1,4], [2,5], [100,110]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ', ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ';')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-_-')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-&-')"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 4, 2, 3], target = 5)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], target = 9)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 13)",
        "minOperations(nums = [2,4,8,5], target = 14)",
        "minOperations(nums = [2,3,5], target = 6)",
        "minOperations(nums = [2,4,8,16], target = 42)",
        "minOperations(nums = [50, 40, 45, 5, 2, 1, 35, 3], target = 110)"
    ],
    "sample_107": [
        "checkArray(nums = [10, 5, 2, 7, 8, 7], k = 3)",
        "checkArray(nums = [1, 5, 0, 10, 14], k = 3)",
        "checkArray(nums = [9, 1, 2, 3, 9], k = 3)",
        "checkArray(nums = [10, 5, 2, 7, 8], k = 3)",
        "checkArray(nums = [1,5,0,-7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 12, 123, 1235, 12358], k = 3)",
        "checkArray(nums = [3, 2, 1, 5, 6, 4], k = 3)",
        "checkArray(nums = [1,11,2,3,17,5,13,19], k = 3)",
        "checkArray(nums = [1, 2, 1, 4, 6, 3, 2, 1, 6, 8], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3,4,5,6])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [54, 546, 548, 60])",
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [12, 121])",
        "maxSum(nums = [1, 2, 1])",
        "maxSum(nums = [2,3,5,7,9])",
        "maxSum(nums = [23, 34, 54, 23, 45])",
        "maxSum(nums = [4332,332,2,4,43,32,2,3,2,4,4])",
        "maxSum(nums = [123,321,456,1234,12,1,2,43,1,43,1,1,123,45,12,43,5,2,1,12,31,45,1,4,1,23,4,1,45,1,2,12,123,123,1,12,12,1,34,123,123,43,1,12,1,45])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 2, 3, 1, 4, 2])",
        "continuousSubarrays(A = [6, 2, 4, 7, 5, 1, 7, 5])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 3, 3])",
        "continuousSubarrays(A = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "continuousSubarrays(A = [1,1,2,2,3,3,4,4])",
        "continuousSubarrays(A = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "continuousSubarrays(A = [1,0,1,2,1,1,0])",
        "continuousSubarrays(A = [2, 4, 2, 1, 7, 2, 3])",
        "continuousSubarrays(A = [1,1,1,1,2,1,3,2,1])",
        "continuousSubarrays(A = [2,4,2,1,0,2,2,0,2])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 1, 3])",
        "distinctDifferenceArray(nums = [2, 1, 3])",
        "distinctDifferenceArray(nums = [2, 1, 3])",
        "distinctDifferenceArray(nums = [3, 3, 3, 2, 5])",
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 4, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 2])",
        "distinctDifferenceArray(nums = [1, 3, 3, 5, 4, 2])",
        "distinctDifferenceArray(nums = [3, 4, 4, 3])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 3, 6, 10, 15], b = [4, 8, 12, 16, 20])",
        "maxNonDecreasingLength(a = [1, 0, 1, 0], b = [0, 1, 0, 1])",
        "maxNonDecreasingLength(a = [1, 1, 1, 1, 2], b = [1, 3, 2, 2, 1])",
        "maxNonDecreasingLength(a = [1, 5, 10, 100], b = [1, 2, 10, 20])",
        "maxNonDecreasingLength(a = [0, 2, 4, 7], b = [1, 5, 6, 8])",
        "maxNonDecreasingLength(a = [10, 20, 30, 100, 200], b = [10, 20, 30, 40, 50])",
        "maxNonDecreasingLength(a = [1, 2, 3, 5, 8, 10], b = [2, 4, 8, 9, 10])",
        "maxNonDecreasingLength(a = [2, 2, 1, 3, 3, 2, 1], b = [2, 3, 1, 2, 1, 3, 2])",
        "maxNonDecreasingLength(a = [5, 10, 2, 4, 2], b = [9, 10, 2, 3, 1])",
        "maxNonDecreasingLength(a = [10, 2, 1, 4, 7, 2, 6, 3], b = [5, 4, 1, 2, 7, 5, 7, 2])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 4)",
        "distanceTraveled(mainTank = 20, additionalTank = 5)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 12, additionalTank = 6)"
    ],
    "sample_160": [
        "maxSum(nums = [34,23,1,24,75,33,54,8])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum(nums=[1,2,3,4])",
        "maxSum(nums = [9, 1, 2, 3])",
        "maxSum(nums = [34, 8, 10, 3, 2, 80, 30])",
        "maxSum(nums = [2,3,7,5,1,8,2,9,6,4])",
        "maxSum(nums = [34,78,12,56,89,100,101])",
        "maxSum(nums=[2, 7, 3, 4, 5, 9, 3, 4, 3, 7, 4])",
        "maxSum(nums = [2,4,5,2,1,4,2,4,2,4,4,2,2,4,1,4,1,4,2,4,4,4,4,4,2,4,2,4,2,4,4,1,4,4,4,2,4,4,1,2,4,4,4,1,2,4,4,4,4,4,2,4,1,4,4,4,4,4,1,4,1,4,1,2,2,1,4,1,2,4,4,4,2,4,4,2,4,1,4,4,1,4,1,4,4,4,1,4,4,1,4,2,4,2,4,4,2,2,4,4,1,4,4,1,2,2,4,2,4,4,4,4,4,2,4,1,4,4,4,1,4,4,1,2,2,4,1,4,4,4,2,4,4,1,4,1,2,2,4,1,4,4,2,4,2,4,4,1,4,4,1,2,2,4,1,4,4,2,4,2,4,4,2,4,2,4,4,1,4,4,4,1,4,4,4,1,4,4,2,4,1,2,2,4,4,1,2,2,4,4,4,4,4,1,4,1,2,4,4,4,1,4,4,1,2,2,4,2,4,4,2,4,2,4,4,1,4,4,4,1,4,4,4,1,4,4,2,4,1,2,2,4,1,4,4,1,4,4,2,4,2,4,4,1,4,4,4,1,4,4,4,1,4,4,2,4,1,2,2,4,2,4,4,1,4,4,1,2,2,4,1,4,4,4,1,4,4,1,2,2,4,1,4,4,4,1,4,4,2,4,2,4,4,1,4,4,4,1,4,4,4,1,4,4,2,4,1,2,2,4,2"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kdddcbncd')",
        "smallestString(s = \"kddsbncb\")",
        "smallestString(s = \"aaaz\")",
        "smallestString(s = 'abaa')",
        "smallestString(s = \"acaz\")",
        "smallestString(s = \"bba\")",
        "smallestString(s = \"aabcccc\")",
        "smallestString(s = \"badddcba\")",
        "smallestString(s = \"kkhkhjjjjjbb\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [10, 9, 2, 5, 3, 7, 101, 18])",
        "findValueOfPartition(nums = [10, 9, 8])",
        "findValueOfPartition(nums = [2, 1, 4, 3])",
        "findValueOfPartition(nums = [1, 10, 3, 5])",
        "findValueOfPartition(nums = [1, 6, 5, 4, 3, 2])",
        "findValueOfPartition(nums = [3, 2, 1, 1, 1, 1, 1])",
        "findValueOfPartition(nums = [1, 2, 6, 1, 5, 4])",
        "findValueOfPartition(nums = [1, 8, 2, 23, 7, 16, 12])",
        "findValueOfPartition(nums = [1, 10, 15, 2, 16, 18])",
        "findValueOfPartition(nums = [1, 8, 5, 9, 6, 7, 4, 5])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'abccba')",
        "makeSmallestPalindrome(s = 'a')",
        "makeSmallestPalindrome(s = 'race')",
        "makeSmallestPalindrome(s = 'madam')",
        "makeSmallestPalindrome(s = 'babad')",
        "makeSmallestPalindrome(s = \"acdcba\")",
        "makeSmallestPalindrome(s = 'abcc')",
        "makeSmallestPalindrome(s = 'deere')",
        "makeSmallestPalindrome(s = \"abcbbbcc\")",
        "makeSmallestPalindrome(s='aabcccc')"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 1, num2 = 1)",
        "makeTheIntegerZero(num1 = 12, num2 = 10)",
        "makeTheIntegerZero(num1 = 6, num2 = 9)",
        "makeTheIntegerZero(num1 = 13, num2 = 4)",
        "makeTheIntegerZero(num1 = 1010101010, num2 = 111)",
        "makeTheIntegerZero(num1 = 2645321, num2 = 1233)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,4],[4,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints(nums = [[1,100]])",
        "numberOfPoints(nums = [[1,4],[4,5]])",
        "numberOfPoints(nums = [[1,4], [4,5]])",
        "numberOfPoints(nums = [[1,10],[10,20]])",
        "numberOfPoints(nums = [[1,10],[2,5],[4,7]])",
        "numberOfPoints(nums = [[1,10],[1,2],[2,3]])",
        "numberOfPoints(nums = [[1, 4], [2, 7], [3, 9]])",
        "numberOfPoints(nums=[[2, 3], [4, 6], [1, 9]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1, 1, 2, 1, 1], m=3, k=0)",
        "countInterestingSubarrays(nums = [2, 4, 6], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6], m = 2, k = 1)"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabbbcc\")",
        "minimumCost(s = \"baab\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"baabaa\")",
        "minimumCost(s = \"sea\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"baaaac\")",
        "minimumCost(s = \"xxxyyyzzz\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0,1,0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,1,0,1,1,1])",
        "doesValidArrayExist(derived = [2, 4, 2])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 4, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 3, 4, 4, 4, 4, 5, 5, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 7, 5, 9, 3, 4, 2], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 4, 2, 5, 2, 6, 2, 7, 3, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 8, 10, 3, 3, 7, 10, 12, 14], target = 12)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"neve\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"banana\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"abac\")",
        "makeSmallestPalindrome(s = \"abcbcd\")",
        "makeSmallestPalindrome(s = \"mere\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num='512301')",
        "removeTrailingZeros(num = '00512301')",
        "removeTrailingZeros(num='51230100')",
        "removeTrailingZeros(num = \"5120300\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], m = 2, k = 3)",
        "countInterestingSubarrays(nums=[1,1,2,1,1], m=3, k=0)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,2,5,5,5,8,8], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [4, 4, 4, 4, 4], m = 1, k = 4)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 5)",
        "distanceTraveled(mainTank = 11, additionalTank = 2)",
        "distanceTraveled(mainTank = 50, additionalTank = 20)",
        "distanceTraveled(mainTank = 24, additionalTank = 10)",
        "distanceTraveled(mainTank = 60, additionalTank = 20)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1,2,3,4,5,6], x = 3)",
        "minCost(A = [3, 1, 2, 4, 3], x = 2)",
        "minCost(A = [1, 2, 5], x = 3)",
        "minCost(A = [1, 2, 4, 5, 7], x = 3)",
        "minCost(A = [1,2,3,4,1,2,3], x = 3)",
        "minCost(A = [2, 3, 1, 1, 3], x = 3)",
        "minCost(A = [2, 4, 4, 4, 5], x = 2)",
        "minCost(A = [5, 2, 6, 8, 1], x = 3)",
        "minCost(A = [10, 6, 9, 10, 13, 11], x = 1)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 1, 2, 2, 3])",
        "maxIncreasingGroups(u = [1, 3, 2, 3, 4, 1])",
        "maxIncreasingGroups(u = [1, 1, 2, 2, 3, 3, 4, 4, 5])",
        "maxIncreasingGroups(u = [1,3,2,4,5])",
        "maxIncreasingGroups(u = [1, 3, 4, 2, 3, 6])",
        "maxIncreasingGroups(u = [1,3,2,4,2])",
        "maxIncreasingGroups(u = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1",
        "maxIncreasingGroups(u = [2, 1, 5, 3, 6, 4, 7])",
        "maxIncreasingGroups(u = [3, 1, 2, 3, 3, 4, 3, 2, 2, 4, 6])",
        "maxIncreasingGroups(u = [0, 1, 2, 5, 8, 13, 21, 34, 55, 89, 144])"
    ],
    "sample_110": [
        "checkArray(nums = [10, 5, 2, 7, 8, 7], k = 3)",
        "checkArray(nums = [1, 2, 0], k = 1)",
        "checkArray(nums = [4, 5, 0, -2, -3, 1], k = 3)",
        "checkArray(nums = [10, 5, 2, -7, 3], k = 3)",
        "checkArray(nums = [1, 2, 3], k = 3)",
        "checkArray(nums = [10, 5, 2, 6], k = 2)",
        "checkArray(nums = [1, -1, 1, -1, 1], k = 1)",
        "checkArray(nums = [1, 2, 1, -1, 0], k = 2)",
        "checkArray(nums = [0, -1, 0, 1, 0], k = 1)",
        "checkArray(nums = [5, 2, 3, 6, 4, 5, 5], k = 4)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABABABAB\")",
        "minLength(s = \"CABABC\")",
        "minLength(s = \"CAABAACB\")",
        "minLength(s = \"ABCABABCABCDABCDABDE\")",
        "minLength(s = \"ACBDEFFG\")",
        "minLength(s = \"ZZCDADAAABBB\")",
        "minLength(s = \"BBABCABABCDCD\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,1,1,1,1], target = 3)",
        "minOperations(nums=[1,1,1,1,1], target=3)",
        "minOperations(nums=[1,1,1,1,1], target=3)",
        "minOperations(nums = [2,2,2,2,2], target = 4)",
        "minOperations(nums=[1,1,1,1,1], target=3)",
        "minOperations(nums = [2, 3, 5], target = 10)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3], target = 10)",
        "minOperations(nums=[2,2,3,3,3,4,4,5,5], target=8)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums=[5,1,6,10,2,9], target=12)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"This\", \"is\", \"a\", \"sentence\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"orange\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple, orange\", \"banana\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"bananas\", \"apples\", \"oranges\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"orange\", \"grape\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"word\", \"word2\", \"word3\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cactus\"], separator = \"n\")",
        "splitWordsBySeparator(words = [\"cartoon\", \"dog\", \"cat\", \"bear\", \"rabbit\"], separator = \"a\")"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"abcd\")",
        "smallestString(s = 'kddsbncc')",
        "smallestString(s = \"aaakddsbncd\")",
        "smallestString(s='abcd')",
        "smallestString(s = 'zzazbzc')",
        "smallestString(s = 'azbazz')",
        "smallestString(s = \"aacaabac\")",
        "smallestString(s = \"aaaabbbbccca\")",
        "smallestString(s = \"aaaaabaaaaacaa\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"R_R_R_L_L_L\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"L_L_R_R_\")",
        "furthestDistanceFromOrigin(moves = \"RRLRRLLRRL\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLRUULR\")",
        "furthestDistanceFromOrigin(moves = \"L_L_L_L_R\")",
        "furthestDistanceFromOrigin(moves = \"R_L__R_\")",
        "furthestDistanceFromOrigin(moves = \"L_RRR_LL_L\")",
        "furthestDistanceFromOrigin(moves = \"LLL_R__RRR_RR\")",
        "furthestDistanceFromOrigin(moves = 'R')"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 4)",
        "makeTheIntegerZero(num1 = 11, num2 = 1)",
        "makeTheIntegerZero(num1 = 12, num2 = 1)",
        "makeTheIntegerZero(num1 = 13, num2 = 5)",
        "makeTheIntegerZero(num1 = 12, num2 = 7)",
        "makeTheIntegerZero(num1 = 34, num2 = 3)",
        "makeTheIntegerZero(num1 = 50, num2 = 2)",
        "makeTheIntegerZero(num1 = 985, num2 = 5)"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbnca')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'ba')",
        "smallestString(s = \"kddsbncde\")",
        "smallestString(s = \"abacaba\")",
        "smallestString(s = 'kddsbncdaa')",
        "smallestString(s = 'zxcvbanana')",
        "smallestString(s = 'abca')",
        "smallestString(s = \"abczazazazaza\")"
    ],
    "sample_146": [
        "finalString(s = 'inter')",
        "finalString(s = 'poiter')",
        "finalString(s = 'this is a test')",
        "finalString(s = \"pointer\")",
        "finalString(s = 'iponter')",
        "finalString(s = \"iter\")",
        "finalString(s = 'night')",
        "finalString(s = 'sith')",
        "finalString(s='piiimpt')",
        "finalString(s='pinsot')"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [0, 1, 0], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1], k = 0)",
        "longestEqualSubarray(nums = [0,1,0], k = 1)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,2,3,4,5], m = 9)",
        "canSplitArray(nums = [1,4,4], m = 3)",
        "canSplitArray(nums = [1], m = 1)",
        "canSplitArray(nums = [1,2,3,4,5], m = 11)",
        "canSplitArray(nums = [2,2,2], m = 5)",
        "canSplitArray(nums = [1,1,1,1], m = 3)",
        "canSplitArray(nums = [1,2,2,2,2], m = 5)",
        "canSplitArray(nums = [2,3,1,2], m = 4)",
        "canSplitArray(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2], m = 3)",
        "canSplitArray(nums = [1], m = 1)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,0,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1,0,1,1,0])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one two three', 'four five six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one two', 'three', 'four five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one two three four', 'five six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one-two\", \"three-four\", \"five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one-two-three-four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one two three\", \"four\", \"five six\"], separator = \" \")",
        "splitWordsBySeparator(words = \"one,two,three,four,five,six\".split(\",\"), separator=\",\")",
        "splitWordsBySeparator(words = 'one, two, three', separator = ',')",
        "splitWordsBySeparator(words = ['one,two,,three,four,,five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one, two,, three,four,\", \"five, six\"], separator = \",\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours=[1,2,3], target=2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 1, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 3, 0, 0], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 10, 20, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 3, 7, 5, 8], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 5, 10, 20, 30], target = 25)"
    ],
    "sample_168": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"banana\", \"bananas\"], s = \"bn\")",
        "isAcronym(words = [\"py\", \"to\"], s = \"pyto\")",
        "isAcronym(words = [\"cat\", \"act\"], s = \"cact\")",
        "isAcronym(words = [\"Hey\", \"how\", \"are\", \"you\"], s = \"ahoy\")",
        "isAcronym(words = [\"mcdonalds\", \"burger king\", \"subway\"], s = \"bk\")",
        "isAcronym(words = [\"banana\", \"machine\", \"account\"], s = \"ban\")",
        "isAcronym(words = [\"Toyota\", \"Corolla\", \"Tesla\"], s = \"ToCoTes\")",
        "isAcronym(words = [\"abc\", \"abdf\", \"aaa\"], s = \"aac\")",
        "isAcronym(words = [\"she\", \"sell\", \"sells\", \"shells\", \"shy\"], s = \"shessell\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"and\", \"or\", \"not\"], s = \"and\")",
        "isAcronym(words = [\"A\", \"P\"], s = \"AP\")",
        "isAcronym(words = [\"a\", \"apple\", \"b\", \"banana\"], s = \"apb\")",
        "isAcronym(words = [\"be\", \"for\", \"bananas\"], s = \"b\")",
        "isAcronym(words = [\"absorbing\", \"backoff\"], s = \"ba\")",
        "isAcronym(words = [\"need\", \"no\", \"one\"], s = \"nno\")",
        "isAcronym(words = [\"green\", \"frog\", \"red\", \"blue\"], s = \"gfbr\")",
        "isAcronym(words = [\"bs\", \"ba\", \"bn\", \"bo\"], s = \"b\")",
        "isAcronym(words = [\"Tehran\", \"Moscow\", \"Beijing\"], s = \"MCB\")",
        "isAcronym(words = [\"profound\", \"meow\", \"cute\"], s = \"PROFOUND\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabbbcc\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"aabccbb\")",
        "minimumCost(s = \"aabbccdd\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [3, 4, 1, 2, 5])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0,"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s='abba')",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abcba\")",
        "makeSmallestPalindrome(s = 'ac')",
        "makeSmallestPalindrome(s = 'bananas')",
        "makeSmallestPalindrome(s = \"x\")",
        "makeSmallestPalindrome(s = \"bcaa\")",
        "makeSmallestPalindrome(s = \"adc\")"
    ],
    "sample_50": [
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"abaaba\")",
        "smallestString(s = \"abaabb\")",
        "smallestString(s = \"aabaa\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"baaa\")",
        "smallestString(\"aa\")",
        "smallestString(s = \"abcb\")",
        "smallestString(s = \"zzzabaaba\")",
        "smallestString(s = 'a'*(5**5))"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [12, 34, 6, 1, 1, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,2,1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 3, 2], k = 3)",
        "sumIndicesWithKSetBits(nums = [10, 12, 13, 14, 15], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 3, 4, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 4, 7, 1, 13], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABA\")",
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"AAAABBBCCDAA\")",
        "minLength(s = \"ABACDABACD\")",
        "minLength(s = \"BBCDAB\")",
        "minLength(s = \"ACACA\")",
        "minLength(s = \"ABACBABACD\")",
        "minLength(s = \"ABACABABA\")",
        "minLength(s = \"CABDABCABCDEAB\")"
    ],
    "sample_158": [
        "maxSum(nums = [12, 345, 2, 6, 7896])",
        "maxSum(nums = [12, 345, 2, 6, 7896])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [34, 23, 1, 24, 75, 33, 54, 8])",
        "maxSum(nums = [9, 2, 3, 4, 6])",
        "maxSum(nums = [10, 2, 3, 20])",
        "maxSum(nums = [34, 50, 60, 30])",
        "maxSum(nums = [34, 56, 33, 52, 34])",
        "maxSum(nums = [34, 50, 91, 3, 55, 13, 7, 27])",
        "maxSum(nums = [34, 3, 12, 5, 17, 22, 31, 14, 22, 10, 11, 4, 15, 24, 6, 2, 8, 14, 10, 23, 13, 19, 9, 23, 8, 17, 12, 17, 22, 11, 12, 11, 13, 18, 24, 12, 13, 10, 16, 26, 14, 11, 11, 9, 13, 11, 10, 10, 21, 13, 15, 20, 13, 21, 16, 19, 19, 21, 13, 11, 10, 16, 28, 12, 11, 13, 15, 28, 11, 13, 11, 20, 15, 18, 18, 17, 20, 21, 12, 12, 18, 18, 19, 27, 19, 11, 16, 15, 16, 12, 15, 12, 13, 17, 13, 18, 20, 14, 18, 15, 14, 23, 20, 16, 14, 16, 18, 14, 25, 20, 15, 18, 23, 16, 18, 17, 23, 19, 16, 19, 18, 15, 17, 24, 13, 22, 21, 19, 16, 16, 16, 17, 20, 18, 12, 13, 11, 11, 16, 10, 20, 14, 22, 13, 21, 15, 22, 20, 15, 19, 26, 11, 17, 18, 19, 15, 17, 20, 22, 17, 13, 1"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [1, 2, 4, 5, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "semiOrderedPermutation(nums = [1, 5, 3, 4, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [1, 2, 4, 5, 7, 8, 9])"
    ],
    "sample_162": [
        "maxSum(nums = [12, 345, 2, 6, 7896])",
        "maxSum(nums = [12, 345, 2, 6, 7896])",
        "maxSum(nums = [2, 3, 1, 6, 4])",
        "maxSum(nums = [1,12,123,1235,12358])",
        "maxSum(nums = [24, 59, 1001, 13])",
        "maxSum(nums = [1, 5, 6, 2, 3])",
        "maxSum(nums = [256, 512, 1024, 2048])",
        "maxSum(nums = [9, 3, 1, 8, 4, 9, 9, 4, 8, 2])",
        "maxSum(nums = [2, 89, 6, 10, 8, 2, 6, 1, 7, 10, 9])",
        "maxSum(nums = [2355, 365, 233, 345, 212, 356, 223, 357, 233, 345])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '10010')",
        "maximumOddBinaryNumber(s = \"10011\")",
        "maximumOddBinaryNumber(s='1101')",
        "maximumOddBinaryNumber(s = \"1111\")",
        "maximumOddBinaryNumber(s = '0111000')",
        "maximumOddBinaryNumber(s = \"1001001001\")",
        "maximumOddBinaryNumber(s = '10000010100010')",
        "maximumOddBinaryNumber(s
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 3, 1, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 2, 1, 3, 2, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 6, 7, 6, 4, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 4, 12, 3, 4, 4, 10, 11, 12, 10, 4, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [33, 39, 10, 3, 7, 2, 5, 4, 10], target = 10)"
    ],
    "sample_166": [
        "isAcronym(words = [\"cat\", \"bat\", \"rat\"], s = \"cat\")",
        "isAcronym(words = [\"two\", \"words\"], s = \"tw\")",
        "isAcronym(words = [\"pro\", \"gram\", \"ming\"], s = \"pm\")",
        "isAcronym(words = [\"I\", \"Like\", \"to\", \"Code\"], s = \"ILC\")",
        "isAcronym(words=[\"aba\", \"baa\", \"bab\", \"bab\"], s=\"baa\")",
        "isAcronym(words=[\"Hey\", \"dog\"], s=\"Dog\")",
        "isAcronym(words = [\"ababa\", \"cabala\"], s = \"baba\")",
        "isAcronym(words = [\"The\", \"H\", \"Tt\", \"Pp\"], s = \"TT\")",
        "isAcronym(words = [\"a\", \"bc\", \"k\", \"ap\", \"a\", \"k\"], s = \"ask\")",
        "isAcronym(words = [\"he\", \"llo\", \"he\", \"y\", \"e\", \"d\", \"ba\"], s = \"hello\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank=10, additionalTank=5)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank=5, additionalTank=2)",
        "distanceTraveled(mainTank=11, additionalTank=2)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1,2,3,4,5])",
        "maxIncreasingGroups(A = [1, 1, 2, 2, 3, 3, 4, 4, 5])",
        "maxIncreasingGroups(A = [1, 1, 2, 2, 3, 3, 4, 4, 5])",
        "maxIncreasingGroups(A = [1,2,3,4,5,6])",
        "maxIncreasingGroups(A = [1, 1, 1, 1, 1, 1, 1, 1])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maxIncreasingGroups(A = [1, 2, 2, 3, 3, 4, 5])",
        "maxIncreasingGroups(A = [2, 1, 2, 3, 3, 3, 4, 5])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1])",
        "distinctDifferenceArray(nums = [1, 3, 5, 3, 3])",
        "distinctDifferenceArray(nums = [1, 1, 3, 5, 5, 7, 7])",
        "distinctDifferenceArray(nums = [-4, -3, -2, -1, 0])",
        "distinctDifferenceArray(nums = [-1, -1, -2, -3, -4, -5])",
        "distinctDifferenceArray(nums=[1,2,3,5,4,8])",
        "distinctDifferenceArray(nums = [5, 1, 3, 5, 5, 1, 3, 5])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 15, additionalTank = 2)",
        "distanceTraveled(mainTank = 15, additionalTank = 3)",
        "distanceTraveled(mainTank = 6, additionalTank = 2)",
        "distanceTraveled(mainTank = 8, additionalTank = 1)",
        "distanceTraveled(mainTank = 12, additionalTank = 1)",
        "distanceTraveled(mainTank = 25, additionalTank = 2)",
        "distanceTraveled(mainTank = 6, additionalTank = 3)",
        "distanceTraveled(mainTank = 50, additionalTank = 2)",
        "distanceTraveled(mainTank = 100, additionalTank = 0)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1,0,1,0,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,2,1,2,1,2,1,2])",
        "countCompleteSubarrays(nums = [5,2,3,4,6])",
        "countCompleteSubarrays(nums = [1,1,2,3,5,7])",
        "countCompleteSubarrays(nums = [2, 3, 2, 3, 4, 3])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [12, 345, 2, 6, 7896], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 1, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [12, 34, 6, 1, 17], k = 2)",
        "sumIndicesWithKSetBits(nums=[0, 1, 1, 0, 1], k=2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 3, 3, 3, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 2, 3, 3, 6, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 5, 2, 4, 3, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 15, 10, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [6, 7, 9, 3, 8, 2, 4, 6, 1], k = 4)",
        "sumIndicesWithKSetBits(nums = [3,1,1,0,0,1,2,0,0,2,0,0,1,0,0,1,1,0,1,2,1,0,0,1,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"aabbccdd\")",
        "minimizedStringLength(s = \"aabc\")",
        "minimizedStringLength(s = \"aaabccddd\")",
        "minimizedStringLength(s = \"ababab\")",
        "minimizedStringLength(s = \"time\")",
        "minimizedStringLength(s = \"abab\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums=[1, 2, 1, 2, 3], k=2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [0,1,0,1,0,1,0,1,0,1], k = 4)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[0,3],[0,4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 2], [1, 4], [2, 5], [3, 5]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[0, 3], [1, 2], [2, 3], [0, 2], [0, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[0, 3], [1, 2], [2, 4], [0, 1], [1, 3], [2, 3], [0, 2], [1, 4], [2, 2]])",
        "colorTheArray(n = 5, queries = [[2, 0], [4, 0], [3, 2], [1, 4]])",
        "colorTheArray(n = 5, queries = [[2,1],[4,3],[1,1],[2,1],[2,3],[0,2]])",
        "colorTheArray(n = 4, queries = [[3, 1], [1, 3], [0, 3], [0, 2], [2, 2], [3, 2], [3, 0], [0, 1], [2, 3], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1,1], [2, 1], [0, 2], [3, 2], [1, 3]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,2], [0,1], [2,1], [1,3], [2,3]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1, 1, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [4,5,6,7], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [11, 12, 13, 14, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours=[8,10,5,6], target=8)",
        "numberOfEmployeesWhoMetTarget(hours=[3,6,12,24,48], target=24)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7, 1, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours=[5, 1, 1, 2, 4], target=2)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 24, 12, 11, 12, 10, 9, 15, 11, 16], target = 16)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12,23,345,4567,56789])",
        "countBeautifulPairs(nums = [12,34,1,6,3])",
        "countBeautifulPairs(nums = [12, 23, 11, 24, 1211, 1112, 1311])",
        "countBeautifulPairs(nums = [22, 44, 55, 77, 88, 99])",
        "countBeautifulPairs(nums = [123, 432, 56, 1221, 13])",
        "countBeautifulPairs(nums = [12, 22, 34, 45, 56, 77, 88])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 1])",
        "countWays(nums = [1, 3, 5, 7, 9])",
        "countWays(nums = [2,3,4,2])",
        "countWays(nums = [1, 2, 3, 5, 8])",
        "countWays(nums = [2, 1, 4, 2])",
        "countWays(nums = [1, 2, 5, 3, 7, 4])",
        "countWays(nums = [1, 2, 4, 6, 9, 12])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = '01010')",
        "maximumOddBinaryNumber(s = '11101')",
        "maximumOddBinaryNumber(s = \"01101\")",
        "maximumOddBinaryNumber(s = \"01101\")",
        "maximumOddBinaryNumber(s = \"11110000\")",
        "maximumOddBinaryNumber(s = '11110011')",
        "maximumOddBinaryNumber(s = \"0010\")",
        "maximumOddBinaryNumber(s = \"110001001\")",
        "maximumOddBinaryNumber(s = \"001010010\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 6, 8, 10], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 8], k = 3)",
        "maximumBeauty(nums = [4, 2, 4, 6], k = 1)",
        "maximumBeauty(nums=[1, 12, 9, 16], k=3)",
        "maximumBeauty(nums = [1, 3, 3, 1, 3], k = 1)",
        "maximumBeauty(nums = [1, 5, 3, 4, 7, 8, 10], k = 2)",
        "maximumBeauty(nums=[5,6,2,1], k=2)",
        "maximumBeauty(nums = [4, 12, 1, 2, 8], k = 3)",
        "maximumBeauty(nums = [1, 4, 8, 5, 7, 6, 5, 3, 9, 10], k = 5)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-1, 0, 1, 2, -1, -4])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [4,2,3,4])",
        "maximumTripletValue(nums = [-3, -2, -6, -8, -1, -10])",
        "maximumTripletValue(nums = [-1, 4, 1, 5, 2, 3])",
        "maximumTripletValue(nums=[2, 3, 6, 8, 10, 1, 12])",
        "maximumTripletValue(nums = [5, 2, 4, 8, 9, 2, 0])",
        "maximumTripletValue(nums = [-1, -3, -10, 5, 6, 10])",
        "maximumTripletValue(nums = [-2, 0, -1, -2, 1, 3, -3, -2, 3, 4, 5, 0, -1])"
    ],
    "sample_98": [
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [10,13,12,14,15], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 404], target = 3)",
        "maximumJumps(nums = [6, 2, 4, 0, 5, 1, 1, 4, 2, 9], target = 2)",
        "maximumJumps(nums = [1, 4, 2, 1, 1, 3], target = 2)",
        "maximumJumps(nums = [4, 2, 1, 1, 0, 1, 1], target = 2)"
    ],
    "sample_149": [
        "finalString(s = 'banana')",
        "finalString(s = 'rtsng')",
        "finalString(s = \"abcde\")",
        "finalString(s = 'this')",
        "finalString(s = 'w3resource')",
        "finalString(s = 'tinker')",
        "finalString(s = \"ngrst\")",
        "finalString(s = 'i love to code')",
        "finalString(s = 'water')",
        "finalString(s = 'internationalization')"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 2, 3, 1, 4, 2])",
        "continuousSubarrays(A = [1, 2, 2, 3, 1, 4, 2])",
        "continuousSubarrays(A = [1, 2, 2, 3, 1, 4, 2])",
        "continuousSubarrays(A = [6, 2, 4, 7, 5, 1, 7, 5])",
        "continuousSubarrays(A = [1, 3, 1, 2, 2])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4])",
        "continuousSubarrays(A = [2, 4, 7, 1, 5, 3, 8, 6])",
        "continuousSubarrays(A = [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0])",
        "continuousSubarrays(A = [5, 5, 2, 4, 2, 2, 2])",
        "continuousSubarrays(A = [3, 4, 1, 2, 2, 4, 3, 2, 5, 3, 3])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,7,5,6,8])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3])",
        "countCompleteSubarrays(nums = [2,3,3,3,6,9])",
        "countCompleteSubarrays(nums = [1,2,2,2,2,3])",
        "countCompleteSubarrays(nums=[1, 3, 3, 2, 2, 2])",
        "countCompleteSubarrays(nums = [3, 6, 1, 7, 5, 1, 7])"
    ],
    "sample_228": [
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [0,1,2,3,4,5])",
        "countWays(nums = [0, 1, 1, 1])",
        "countWays(nums = [1,0,0,1,1])",
        "countWays(nums = [0, 0, 2, 2])",
        "countWays(nums = [2, 0, 0, 1])",
        "countWays(nums = [2,3,1,1,4])",
        "countWays(nums = [2,0,3,0,4,0])",
        "countWays(nums = [0, 1, 2, 3, 5, 7])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [2, 4, 6, 4, 1], k = 1)",
        "maximumBeauty(nums = [1, 12, 9, 16, 5, 3, 24, 8, 6], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 3], k = 2)",
        "maximumBeauty(nums = [1, 12, 123, 1235, 5, 6], k = 3)",
        "maximumBeauty(nums = [5, 2, 1, 4, 3], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 3, 5, 6], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13], k = 3)",
        "maximumBeauty(nums = [2,4,7,5,3,11], k = 2)",
        "maximumBeauty(nums = [1,2,1,4,3,2,1], k = 3)",
        "maximumBeauty(nums = [3, 4, 1, 3, 4, 2], k = 3)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3])",
        "distinctDifferenceArray(a = [1, 2, 1, 3, 2, 3])",
        "distinctDifferenceArray(a = [3, 3, 2, 5, 1, 7])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 2, 3, 1, 4, 2])",
        "continuousSubarrays(a = [1, 0, 1, 0, 1])",
        "continuousSubarrays(a = [1, 3, 7, 1, 7, 5])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7,8,9,10])",
        "continuousSubarrays(a = [3,4,5,3,4,5])",
        "continuousSubarrays(a = [3,4,7,7,5])",
        "continuousSubarrays(a = [4,6,5,4,6])",
        "continuousSubarrays(a=[-1, -1, -1, -1, 3, 3, 3, 3])",
        "continuousSubarrays(a = [4, 2, 4, 4, 4, 4, 2, 4])",
        "continuousSubarrays(a = [5, 4, 1, 6, 1, 4, 6, 4, 5, 1])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [8, 2, 4, 7])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [8, 2, 4, 7])",
        "continuousSubarrays(nums = [8,2,4,7])",
        "continuousSubarrays(nums = [1, 2, 1, 2, 6, 7, 5, 1])",
        "continuousSubarrays(nums = [1,2,2,2,5,0])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "continuousSubarrays(nums = [3, 4, 3, 2, 3])",
        "continuousSubarrays(nums = [1, 3, 4, 2, 3])",
        "continuousSubarrays(nums=[5, 4, 1, 2, 3, 7])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12,345,2,6,7896])",
        "countBeautifulPairs(nums = [6, 5, 10, 3])",
        "countBeautifulPairs(nums = [12,34,45,61,71,89])",
        "countBeautifulPairs(nums = [11,1,12,21,2])",
        "countBeautifulPairs(nums = [55, 99, 101, 102, 104])",
        "from math import gcd\n\ndef countBeautifulPairs(nums: List[int]) -> int:\n\n    n = len(nums)\n    \n    ct = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            f = int(str(nums[i])[0])\n            s = int(str(nums[j])[-1])\n            \n            #print(f,s)\n            \n            if gcd(s, f)",
        "countBeautifulPairs(nums = [23, 111, 134, 222, 212])",
        "countBeautifulPairs(nums = [12, 23, 37, 53, 70, 101, 131, 163, 199, 241])",
        "countBeautifulPairs(nums = [32,16,43,56,35,78,22])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1,4,2,3])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 1, 2, 2])",
        "semiOrderedPermutation(nums = [1, 2, 5, 3, 4])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [1, 5, 2, 3, 4, 6, 7])",
        "semiOrderedPermutation(nums = [1, 3, 1])",
        "semiOrderedPermutation(nums=[2, 1, 4, 3, 5])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [1, 2, 5, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1, 5])",
        "semiOrderedPermutation(nums = [1, 2, 5, 4, 3, 6, 7, 8])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"101100\")",
        "maximumOddBinaryNumber(s = \"0101001\")",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = \"010011\")",
        "maximumOddBinaryNumber(s = \"1100111\")",
        "maximumOddBinaryNumber(s = \"01101010\")",
        "maximumOddBinaryNumber(s = '00010110')",
        "maximumOddBinaryNumber(s = \"11001010110\")",
        "maximumOddBinaryNumber(s
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [0, 0, 0, 0, 0])",
        "countCompleteSubarrays(nums = [3,1,2,2,3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [5,2,3,4,7])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,2,2])",
        "countCompleteSubarrays(nums = [3,6,1,8,2,1,1])",
        "countCompleteSubarrays(nums=[3, 4, 7, 7, 8, 1, 1, 2])"
    ],
    "sample_23": [
        "minLength(s = \"CDABAB\")",
        "minLength(s = \"ABABABABAB\")",
        "minLength(s = \"ABABAB\")",
        "minLength(s = \"AAAAA\")",
        "minLength(s = \"ABABCDABCDABABAB\")",
        "minLength(s = \"ABCDBAABCDB\")",
        "minLength(s = \"ABCDCDBBABCDABAB\")",
        "minLength(s = \"BABAABAA\")",
        "minLength(s = \"CDABBCDCDCDCD\")",
        "minLength(s = \"ABAAABCDBBCB\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [2,3,1,6,7])",
        "countCompleteSubarrays(nums=[1,2,3,4,5,6,7])",
        "countCompleteSubarrays(nums = [2,2,2,2,2,2,2,2,2,2])",
        "countCompleteSubarrays(nums=[1,2,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,3,2,5,3])",
        "countCompleteSubarrays(nums = [2,2,1,5])",
        "countCompleteSubarrays(nums = [2, 3, 1, 6, 4, 3, 8, 10, 1, 4])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 5)",
        "makeTheIntegerZero(num1 = 4, num2 = 6)",
        "makeTheIntegerZero(num1 = 132, num2 = 55)",
        "makeTheIntegerZero(num1 = 1000000000, num2 = 3600)"
    ],
    "sample_100": [
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 9)",
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 9)",
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 9)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 5)",
        "maximumJumps(nums=[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
        "maximumJumps(nums = [100, 200, 1, 1000], target = 999)",
        "maximumJumps(nums=[3, 3, 3, 3, 3, 3, 3], target=3)",
        "maximumJumps(nums=[9, 4, 2, 1, 4, 7, 6, 9, 14, 12], target=3)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1,3,2,4,2])",
        "maxIncreasingGroups(x = [1,3,2,4,2])",
        "maxIncreasingGroups(x = [1,3,2,4,2])",
        "maxIncreasingGroups(x = [1, 3, 2, 4, 5])",
        "maxIncreasingGroups(x = [1, 3, 2, 3, 4, 3])",
        "maxIncreasingGroups(x = [1,2,3,4,5])",
        "maxIncreasingGroups(x = [1, 3, 2, 4, 5, 6])",
        "maxIncreasingGroups(x = [1,3,2,5,3,7])",
        "maxIncreasingGroups(x = [1, 3, 9, 8, 5, 10, 20])",
        "maxIncreasingGroups(x = [1,3,8,9,4,10,11])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLL__RRRRRR\")",
        "furthestDistanceFromOrigin(moves = 'LLLRRR')",
        "furthestDistanceFromOrigin(moves = \"LLLLUUUUURRRRDDDDD\")",
        "furthestDistanceFromOrigin(moves = \"LRU_\")",
        "furthestDistanceFromOrigin(moves = \"LLR_L\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLLLURRRRRRRRRUUUUD\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRUUUURRRDDDDDD\")",
        "furthestDistanceFromOrigin(moves = \"URDDLLRRRD\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '10101010')",
        "maximumOddBinaryNumber(s = '101100')",
        "maximumOddBinaryNumber(s = '1001101')",
        "maximumOddBinaryNumber(s = '011110')",
        "maximumOddBinaryNumber(s = '1110110')",
        "maximumOddBinaryNumber(s = '0111110')",
        "maximumOddBinaryNumber(s = \"00100011\")",
        "maximumOddBinaryNumber(s = \"100101011\")",
        "maximumOddBinaryNumber(s = \"010111001\")",
        "maximumOddBinaryNumber(s = \"0100110101\")"
    ],
    "sample_6": [
        "colorTheArray(n = 2, queries = [[0,0],[1,1]])",
        "colorTheArray(n = 3, queries = [[0,1],[2,1]])",
        "colorTheArray(n = 3, queries = [[1,2],[2,3]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,0],[2,0]])",
        "colorTheArray(n = 5, queries = [[1,0],[1,2],[1,3],[1,4]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,1], [3,2], [4,3]])",
        "colorTheArray(n = 6, queries = [[1,2],[2,3],[3,2],[2,4],[4,5],[5,6]])",
        "colorTheArray(n= 4, queries = [[2,0],[3,2],[2,3]])",
        "colorTheArray(n = 4, queries = [[2,1],[1,1],[3,3],[4,4]])",
        "colorTheArray(n = 6, queries = [[0,1],[1,2],[2,3],[0,2],[3,1],[3,2],[2,1]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [6, 2, 3, 4, 5, 1])",
        "findValueOfPartition(nums = [6, 2, 3, 4, 5, 1])",
        "findValueOfPartition(nums = [6, 2, 1, 8, 10, 9, 3])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [3, 5, 8, 10, 12, 18])",
        "findValueOfPartition(nums = [5, 4, 0, 3, 1])",
        "findValueOfPartition(nums = [1, 10, 2, 1, 2])",
        "findValueOfPartition(nums = [1, 3, 8, 4, 10, 12, 3, 2, 24])",
        "findValueOfPartition(nums = [2, 10, 6, 9])",
        "findValueOfPartition(nums = [1, 4, 10, 2, 13, 8])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [3, 1, 3])",
        "minimumIndex(nums = [3, 4, 3, 2, 3, -1, 3, 3])",
        "minimumIndex(nums = [3, 3, 1, 3, 3])",
        "minimumIndex(nums = [1, 1, 3, 3, 5, 5, 7, 7])",
        "minimumIndex(nums = [3, 2, 1, 3])",
        "minimumIndex(nums = [3, 1, 3, 1, 1, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])",
        "minimumIndex(nums = [1,2,2,0,2,0,2,0])",
        "minimumIndex(nums=[2, 3, 4, 3, 4, 5, 4, 3, 2])",
        "minimumIndex(nums = [3, 3, 1, 3, 3, 2, 2, 3, 1, 3, 1, 3, 3, 2, 2, 2])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 6, 7, 9, 10, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 0, 1, 0, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 5, 3, 4, 2, 7, 6, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [12, 29, 23, 34, 55], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 12, 13, 14, 15, 22, 23, 25], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 5], [2, 4, 15]])",
        "maximizeTheProfit(n = 2, offers = [[2, 10, 5], [5, 15, 2]])",
        "maximizeTheProfit(n = 2, offers = [[2, 5, 4], [1, 8, 10]])",
        "maximizeTheProfit(n = 3, offers = [[2, 10, 3], [5, 15, 4], [19, 20, 5]])",
        "maximizeTheProfit(n = 3, offers = [[2, 3, 1], [5, 10, 2], [10, 20, 3]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 15], [3, 4, 11]])",
        "maximizeTheProfit(n = 3, offers = [[2,3,10], [5,6,5]])",
        "maximizeTheProfit(\n    n = 4, offers = [[2, 3, 10], [1, 1, 5], [2, 2, 3]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 2, 10], [2, 4, 10], [2, 5, 10], [5, 8, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 1, 5], [2, 2, 100], [3, 4, 1]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"01000\")",
        "minimumOperations(num = \"0101010\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"110001\")",
        "minimumOperations(num = \"1230\")",
        "minimumOperations(num = \"0000100000\")",
        "minimumOperations(num = \"77077\")",
        "minimumOperations(num = \"25720257025720250\")",
        "minimumOperations(num = \"001000110000100001110000100001\")"
    ],
    "sample_207": [
        "minimumOperations(num
        "minimumOperations(num = \"050\")",
        "minimumOperations(num = \"001\")",
        "minimumOperations(num = \"1500\")",
        "minimumOperations(num = '1000')",
        "minimumOperations(num = \"10101010\")",
        "minimumOperations(num = \"5250\")",
        "minimumOperations(num = \"1925\")",
        "minimumOperations(num = '80070000')",
        "minimumOperations(num = \"154788787878\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[2, 1, 10], [3, 2, 15]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 10], [3, 0, 15]])",
        "maximizeTheProfit(n=5, offers=[[2, 3, 10], [5, 6, 2]])",
        "maximizeTheProfit(n=3, offers=[[1, 2, 3], [2, 1, 4]])",
        "maximizeTheProfit(n= 3, offers = [[1,1,2],[2,2,3]])",
        "maximizeTheProfit(n=3, offers= [[1, 1, 10], [2, 2, 5]])",
        "maximizeTheProfit(n=2, offers=[[2,1,10],[1,1,2]])",
        "maximizeTheProfit(n=5, offers = [[1,2,4],[2,3,2],[3,4,3]])",
        "maximizeTheProfit(n=6, offers=[[1,1,3], [2,2,2], [3,3,2], [4,4,2]])",
        "maximizeTheProfit(n=5, offers=[[3,2,5],[1,1,4],[2,1,3]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 0)",
        "longestAlternatingSubarray(nums = [8, 4, 0, 10, 12, 6, 14], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 1, 3, 1, 3, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 4, 45, 6, 0, 19], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,2,2,2,2,2,2,2,2,2], threshold = 1)",
        "longestAlternatingSubarray(nums = [3, 2, 4, 2, 4, 2, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [5, 3, 6, 4, 3, 3, 6, 5], threshold = 4)"
    ],
    "sample_203": [
        "minimumOperations(num = \"12345678\")",
        "minimumOperations(num = \"48\")",
        "minimumOperations(num = \"325\")",
        "minimumOperations(num = \"250750\")",
        "minimumOperations(num = \"50050\")",
        "minimumOperations(num = \"252525252525252525\")",
        "minimumOperations(num = \"4547\")",
        "minimumOperations(num = \"0000255\")",
        "minimumOperations(num = '1460')",
        "minimumOperations(num = '909000')"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [1, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [1, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [1, 5]])",
        "colorTheArray(n = 6, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]])",
        "colorTheArray(n = 5, queries = [[1, 0], [1, 1], [1, 0], [0, 1], [1, 1]])",
        "colorTheArray(n = 7, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]])",
        "colorTheArray(n = 5, queries = [[1,1], [1,2], [1,3], [2,3], [3,3]])",
        "colorTheArray(n = 3, queries = [[1,1], [1,2], [2,1], [3,1]])",
        "colorTheArray(n = 5, queries = [[1, 0], [1, 1], [1, 0], [2, 1], [2, 2], [2, 0], [3, 1], [3, 2], [3, 0], [4, 1]])",
        "colorTheArray(n = 5, queries = [[2,1],[1,2],[4,4],[1,3],[2,2],[5,5]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [3, 4, 3, 2, 3, -1, 3, 3])",
        "minimumIndex(nums = [2, 2, 2, 0, 1])",
        "minimumIndex(nums = [3, 4, 3, 2, 3, 1, 3, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 4, 5, 5])",
        "minimumIndex(nums = [1, 1, 2, 4, 4, 4, 7, 7])",
        "minimumIndex(nums = [1,2,2,2,3,4,2])",
        "minimumIndex(nums = [1, 1, 1, 1, 2, 3, 3])",
        "minimumIndex(nums = [5, 3, 4, 3, 3, 3])",
        "minimumIndex(nums = [0, 3, 1, 6, 2, 2, 3, 6])",
        "minimumIndex(nums = [2,1,1,2,1,1,1,1,1,1,1,1,2,1])"
    ],
    "sample_102": [
        "maximumJumps(nums = [6,4,14,6,8,13,9,7,10,6,12], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 2)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 2)",
        "maximumJumps(nums = [100, -23, -23, 404, 404], target = 3)",
        "maximumJumps(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
        "maximumJumps(nums = [1, 2, 3, 4, 3, 2, 1, 0, 4], target = 3)",
        "maximumJumps(nums = [9, 4, 2, 1, 4, 7, 9, 7, 4, 5], target = 2)",
        "maximumJumps(nums = [9,4,2,1,4,7,8,4,3], target = 3)",
        "maximumJumps(nums = [2, 1, 1, 1, 4, 3, 1, 1, 1, 1], target = 2)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"5123000001\")",
        "removeTrailingZeros(num
    ],
    "sample_57": [
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 10, b = 5)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 3, b = 4)",
        "distanceTraveled(a = 2, b = 2)",
        "distanceTraveled(a = 10, b = 4)",
        "distanceTraveled(a = 15, b = 5)",
        "distanceTraveled(a = 20, b = 1)",
        "distanceTraveled(a = 11, b = 1)",
        "distanceTraveled(a = 9, b = 5)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 3, 4, 7, 9])",
        "findValueOfPartition(a = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20])",
        "findValueOfPartition(a = [1, 7, 5, 9, 10, 3])",
        "findValueOfPartition(a = [1, 2, 4, 6, 8])",
        "findValueOfPartition(a = [5, 2, 3, 8, 1])",
        "findValueOfPartition(a = [1, 10, 11, 100])",
        "findValueOfPartition(a = [2, 4, 7, 1, 8, 3])",
        "findValueOfPartition(a = [1, 9, 3, 10, 11, 12])",
        "findValueOfPartition(a = [5, 1, 10, 100])",
        "findValueOfPartition(a = [7, 4, 10, 2, 5, 8, 1, 3, 6])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3])",
        "distinctDifferenceArray(nums = [2, 1, 3, 5, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [-3, 1, -3, 4, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 3, 4, 4, 4, 5])",
        "distinctDifferenceArray(nums = [4, 2, 3, 5, 3])"
    ],
    "sample_120": [
        "minimumIndex(nums = [3, 4, 3, 2, 3, 1, 3])",
        "minimumIndex(nums = [1, 2, 2, 1])",
        "minimumIndex(nums = [1, 2, 1, 2, 1])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 1, 1, 1])",
        "minimumIndex(nums = [2, 3, 1, 1, 1])",
        "minimumIndex(nums = [1, 3, 5, 7, 2, 3])",
        "minimumIndex(nums = [4,3,3,3,2,2,2,1,1])",
        "minimumIndex(nums = [2, 1, 3, 3, 4, 2, 4, 5, 5, 6])",
        "minimumIndex(nums = [1, 2, 2, 1, 3, 4, 1, 5, 7, 9, 5, 2])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves=\"LLL\")",
        "furthestDistanceFromOrigin(moves=\"LR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLLLRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"URDDLUUDRRRRURDDLLLLUURRDRDRURLDLLL\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abcb\")",
        "minimizedStringLength(s = \"aaa\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"aabc\")",
        "minimizedStringLength(s = \"aabc\")",
        "minimizedStringLength(s = \"abba\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"mississippi\")",
        "minimizedStringLength(s = \"babcb\")",
        "minimizedStringLength(s = \"abd\")"
    ],
    "sample_105": [
        "checkArray(nums = [10, 5, 2, 7], k = 3)",
        "checkArray(nums = [10, 5, 2, 6], k = 1)",
        "checkArray(nums = [10, 5, 2, 6], k = 1)",
        "checkArray(nums = [10, 5, 2, 7, 8, 7], k = 3)",
        "checkArray(nums = [1, -1, 1], k = 2)",
        "checkArray(nums = [10, 5, 2, 6], k = 3)",
        "checkArray(nums = [10, 5, 2, 6], k = 4)",
        "checkArray(nums = [10, 5, 2, 6], k = 100)",
        "checkArray(nums = [1, 2, 0], k = 3)",
        "checkArray(nums=[1, 1, 1, 1], k=2)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 1, 3])",
        "maxIncreasingGroups(usageLimits = [3,3,3,1,3])",
        "maxIncreasingGroups(usageLimits = [3, 3, 2, 1, 3])",
        "maxIncreasingGroups(usageLimits = [10,20,30,40,50])",
        "maxIncreasingGroups(usageLimits = [0, 0, 0, 0])",
        "maxIncreasingGroups(usageLimits=[2, 1, 5, 6, 2, 2])",
        "maxIncreasingGroups(count = [1,1,1,2,2,2,3,3,3])",
        "maxIncreasingGroups(usageLimits = [2, 5, 11, 18])",
        "maxIncreasingGroups(usageLimits = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5])",
        "maxIncreasingGroups(count=[100,100,100])"
    ],
    "sample_206": [
        "minimumOperations(num = \"2550\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"12550\")",
        "minimumOperations(num = \"7505025\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"789\")",
        "minimumOperations(num = \"00123456789\")",
        "minimumOperations(num = \"01010101010101\")",
        "minimumOperations(num = \"011101000\")",
        "minimumOperations(num = \"000076\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 3, 2])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 2])",
        "doesValidArrayExist(derived = [1,2,3,3])"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"baab\")",
        "minimumCost(s = \"aabbbcc\")",
        "minimumCost(s = \"abcbba\")",
        "minimumCost(s = \"zzz\")",
        "minimumCost(s = \"zzbaab\")",
        "minimumCost(s = \"abcddcba\")",
        "minimumCost(s = \"bbaab\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 3, 2])",
        "maxIncreasingGroups(usageLimits = [1,3,2])",
        "maxIncreasingGroups(usageLimits = [1,3,2])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
        "maxIncreasingGroups(usageLimits = [2, 1, 2, 2, 2, 2, 1])",
        "maxIncreasingGroups(usageLimits = [10, 2, 3, 4, 8])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5])",
        "maxIncreasingGroups(usageLimits = [5, 6, 8, 9, 10, 11, 13])",
        "maxIncreasingGroups(usageLimits = [5, 5, 5, 6, 7, 8])"
    ],
    "sample_53": [
        "smallestString(s = \"baabc\")",
        "smallestString(s = 'baabc')",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"baaz\")",
        "smallestString(s = \"baaac\")",
        "smallestString(s = \"aba\")",
        "smallestString(s = \"baaaa\")",
        "smallestString(s = \"aab\")",
        "smallestString(s = 'baaab')",
        "smallestString(s = 'abc')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,4,6,8,10], x = 3)",
        "minAbsoluteDifference(nums = [2,4,6,8,10], x = 3)",
        "minAbsoluteDifference(nums = [2,4,6,8,10], x = 3)",
        "minAbsoluteDifference(nums = [2,4,5,9,10,14,19], x = 2)",
        "minAbsoluteDifference(nums = [1, 3, -1, -3, 5, 3, 6, 7], x = 3)",
        "minAbsoluteDifference(nums = [1,4,8,10,20,30,50], x = 4)",
        "minAbsoluteDifference(nums = [1, 4, 8, 10, 20], x = 3)",
        "minAbsoluteDifference(nums = [1, 4, 6, 8, 10, 15], x = 3)",
        "minAbsoluteDifference(nums=[3,2,5,1,4,7],x=3)",
        "minAbsoluteDifference(nums=[1,4,8,10,23,39,40,41,42,43,47,55,56,57,58,59],x=6)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 2, offers = [[2, 1, 3]])",
        "maximizeTheProfit(N = 2, offers = [[1, 2, 20], [2, 1, 10]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 2], [2, 1, 3], [3, 1, 2]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30]])",
        "maximizeTheProfit(N = 5, offers = [[2, 1, 10], [3, 2, 20], [4, 1, 30]])",
        "maximizeTheProfit(N = 5, offers = [[2, 1, 2], [3, 2, 3], [4, 3, 2], [5, 4, 1]])",
        "maximizeTheProfit(N = 5, offers = [[2, 1, 3], [5, 5, 5]])",
        "maximizeTheProfit(N = 2, offers = [[2, 1, 1], [2, 2, 1], [1, 1, 1]])",
        "maximizeTheProfit(N = 3, offers = [[2, 1, 3], [1, 3, 10]])",
        "maximizeTheProfit(offers = [[1, 2, 5], [3, 4, 10]], N = 4)"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"this\", \"is\", \"a\", \"test\"], b = \" \")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"c\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"banana\", \"carrot\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"hello world\", \"welcome to the jungle\"], b = \" \")",
        "splitWordsBySeparator(a = [\"1,2,3\", \"3,4,5\"], b = \",\")",
        "splitWordsBySeparator(a = [\"bread\", \"cheese\", \"wine\"], b = \"e\")",
        "splitWordsBySeparator(a = [\"banana\", \"apples\", \"potatoes\"], b = \",\")",
        "splitWordsBySeparator(a = [\"Welcome\", \"to\", \"CodeChef!\"], b = \" \")",
        "splitWordsBySeparator(a = [\"horse\", \"horse\", \"zebra\"], b = \"r\")",
        "splitWordsBySeparator(a = [\"my\", \"name\", \"is\", \"zahara\"], b = \"i\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '5123001')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = \"51230100\")",
        "removeTrailingZeros(a='5123010')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a = '512300000')",
        "removeTrailingZeros(a = '51230000000000000000000')",
        "removeTrailingZeros(a = \"120300\")",
        "removeTrailingZeros(a = '1234000010')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"abac\")",
        "makeSmallestPalindrome(s = \"aven\")",
        "makeSmallestPalindrome(s = \"ana\")",
        "makeSmallestPalindrome(s = \"madam\")",
        "makeSmallestPalindrome(s = \"elephant\")",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s = \"kelb\")",
        "makeSmallestPalindrome(s = \"meren\")",
        "makeSmallestPalindrome(s = \"cdedcb\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [0, 0, 0, 0, 1], k = 1)",
        "longestEqualSubarray(nums=[1, 2, 1, 3, 1, 2, 1], k=1)",
        "longestEqualSubarray(nums = [1,2,1,2,3,4,5,6,7,8,9,10], k = 4)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 12, 123, 1234, 345], k = 3)",
        "maximumBeauty(nums=[1,2,3,4,5], k=1)",
        "maximumBeauty(nums = [1, 5, 2, 4, 3], k = 1)",
        "maximumBeauty(nums=[1, 2, 3, 4, 5], k=1)",
        "maximumBeauty(nums = [1,2,4,7,8,8,10], k = 3)",
        "maximumBeauty(nums = [1, 3, 1, 4, 5, 1, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 1, 1, 2, 1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1,1,1,1,1,2,2,2,2,2,2,2,2], k = 3)",
        "maximumBeauty(nums = [1, 3, 3, 2, 4, 4, 2, 2, 1], k = 2)",
        "maximumBeauty(nums = [5,3,8,1,2,11,13,5,4,5,14,8,5,8,16], k = 2)"
    ],
    "sample_163": [
        "maxSum(nums = [12, 345, 2, 6, 7896])",
        "maxSum(nums = [12, 345, 2, 6, 7896])",
        "maxSum(nums = [3, 4, 6, 10])",
        "maxSum(nums=[2,4,6,2,5])",
        "maxSum(nums = [100, 200, 1000, 20])",
        "maxSum(nums = [23, 45, 16, 78])",
        "maxSum(nums=[9, 4, 1, 7])",
        "maxSum(nums = [6, 7, 15, 2])",
        "maxSum(nums=[53, 35, 17, 30, 2, 8, 4, 2, 9])",
        "maxSum(nums = [34, 3, 32, 19, 32, 13, 26, 24, 27, 35, 33, 39, 28, 12, 21, 20, 24, 13, 28, 35, 14, 20, 33, 1, 29, 4, 6, 3, 33, 27, 39, 32, 35, 16, 32, 37, 11, 25, 35, 4, 21, 24, 1, 35, 25, 38, 4, 27, 30, 30, 4, 12, 36, 22, 21, 22, 33, 8, 3, 25, 26, 31, 10, 14, 32, 20, 11, 22, 31, 28, 10, 30, 13, 23, 38, 12, 25, 34, 28, 12, 36, 26, 33, 21, 4, 14, 31, 10, 23, 33, 27, 29, 13, 24, 37, 11, 35, 21, 15, 38, 17, 14, 26, 18, 22, 18, 34, 24, 28, 19, 24, 34, 15, 26, 31, 11, 37, 20, 18, 12, 27, 20, 24, 32, 21, 18, 25, 27, 10, 25, 25, 36, 34, 10, 12, 19, 23, 21, 34, 17, 10, 20, 37, 21, 10, 35, 30, 23, 31, 13, 20, 32, 30, 24, 39, 36, 14, 25, 21, 10,"
    ],
    "sample_151": [
        "finalString(s = 'hello')",
        "finalString(s = 'snig')",
        "finalString(s = 'this is a test')",
        "finalString(s = 'Python')",
        "finalString(s = 'fish')",
        "finalString(s='a')",
        "finalString(s = 'park')",
        "finalString(s = \"poop\")",
        "finalString(s = 'algorithms')",
        "finalString(s = 'p')"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512300\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '00000512301')",
        "removeTrailingZeros(num = \"512000301\")",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num='500000')",
        "removeTrailingZeros(num = \"500\")",
        "removeTrailingZeros(num = '51230000000000000')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = \"01001\")",
        "maximumOddBinaryNumber(s = \"110011\")",
        "maximumOddBinaryNumber(s = \"01111\")",
        "maximumOddBinaryNumber(s = \"0110111\")",
        "maximumOddBinaryNumber(s = '00011101')",
        "maximumOddBinaryNumber(s = '10001001')",
        "maximumOddBinaryNumber(s = \"111010001\")",
        "maximumOddBinaryNumber(s = \"100100001010110\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = \"easy,problem\", separator = \",\")",
        "splitWordsBySeparator(words = \"easy,problem\".split(\",\"), separator = \",\")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = ', ')",
        "splitWordsBySeparator(words=[\"easy\", \"problem\"], separator=\" \")",
        "splitWordsBySeparator(words = ['easy problem', 'hard problem'], separator = ' ')",
        "splitWordsBySeparator(words = [\"easy problem\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = 'o')",
        "splitWordsBySeparator(words = [\"easy, problem\", \"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"e\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1,2,1,2,3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 1, 3, 2, 3], K = 2)",
        "longestEqualSubarray(A = [0, 0, 1, 1, 0], K = 2)",
        "longestEqualSubarray(A = [5,5,5,5,5], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "longestEqualSubarray(A = [0, 1, 0, 1, 0, 0, 1], K = 2)",
        "longestEqualSubarray(A = [1, 1, 2, 2, 2, 2, 2, 1, 1, 1], K = 2)",
        "longestEqualSubarray(A = [4, 6, 3, 4, 4, 6, 6], K = 2)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [3, 2, 2])",
        "countWays(nums = [2, 4, 3, 2, 6])",
        "countWays(nums = [1, 3, 5, 10, 20])",
        "countWays(nums = [3, 1, 4, 2, 5])",
        "countWays(nums = [1, 2, 4, 6, 8, 10])",
        "countWays(nums = [3, 4, 4, 4, 4])",
        "countWays(nums = [2, 0, 2, 2, 0, 1])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4], k = 1)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5], k=3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 3, 7], k = 2)",
        "sumIndicesWithKSetBits(nums=[0, 1, 1, 2, 2, 3, 3, 3], k=3)",
        "sumIndicesWithKSetBits(nums = [12, 34, 6, 3, 2, 5, 34], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 4)",
        "sumIndicesWithKSetBits(nums = [10, 2, 12, 4, 6, 11, 8, 3, 15, 1, 9, 7], k = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num='512300')",
        "removeTrailingZeros(num = '512000301')",
        "removeTrailingZeros(num = '500000')",
        "removeTrailingZeros(num = '500000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"a\", \"b\"], s = \"a\")",
        "isAcronym(words = [\"Banana\"], s = \"Banana\")",
        "isAcronym(words = [\"banana\", \"cream\"], s = \"bananacream\")",
        "isAcronym(words = [\"aa\", \"bb\", \"cc\", \"dd\"], s = \"aacc\")",
        "isAcronym(words = [\"program\", \"for\", \"android\"], s = \"pfa\")",
        "isAcronym(words = [\"Python\", \"for\", \"data\", \"science\"], s = \"PFDSC\")",
        "isAcronym(words = [\"banana\", \"pistachio\", \"loquat\"], s = \"bplq\")",
        "isAcronym(words = [\"tu\", \"s\", \"u\"], s = \"us\")",
        "isAcronym(words = [\"wonderful\", \"brilliant\", \"amazing\", \"cool\"], s = \"abracadabra\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [2, 2, 3, 7])",
        "countCompleteSubarrays(nums = [2, 3, 1, 6])",
        "countCompleteSubarrays(nums = [1,2,3,4,7])",
        "countCompleteSubarrays(nums = [0,0,0,0])",
        "countCompleteSubarrays(nums = [0,0,0,0])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 11)",
        "minimumPossibleSum(n = 5, target = 16)",
        "minimumPossibleSum(n = 100000, target = 10000)"
    ],
    "sample_147": [
        "finalString(s = 'hello')",
        "finalString(s = 'sting')",
        "finalString(s = 'sting')",
        "finalString(s = \"sting\")",
        "finalString(s = 'Python')",
        "finalString(s = 'hello')",
        "finalString(s = 'howdy')",
        "finalString(s = \"bibble\")",
        "finalString(s = 'bank')",
        "finalString(s = 'this is fun')"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'neve')",
        "makeSmallestPalindrome(s = \"abcdc\")",
        "makeSmallestPalindrome(s = \"anna\")",
        "makeSmallestPalindrome(s = \"nevennn\")",
        "makeSmallestPalindrome(s = 'aba')",
        "makeSmallestPalindrome(s = \"meet\")",
        "makeSmallestPalindrome(s = \"veerr\")",
        "makeSmallestPalindrome(s = 'a')"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 2, offers = [[1, 2, 10], [2, 1, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 4], [5, 11, 3], [1, 6, 2]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 10], [4, 3, 5]])",
        "maximizeTheProfit(n=5, offers=[[2, 1, 5], [3, 2, 6], [4, 1, 5]])",
        "maximizeTheProfit(n = 5, offers = [[2, 4, 10], [1, 2, 5], [4, 2, 3]])",
        "maximizeTheProfit(n = 2, offers = [[2, 3, 5], [2, 1, 3]])",
        "maximizeTheProfit(n=4, offers=[[1, 2, 10], [2, 3, 20], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[3, 1, 2], [5, 3, 1], [2, 2, 2]])",
        "maximizeTheProfit(n = 5, offers = [[2, 4, 1], [2, 3, 0], [1, 2, 0], [0, 1, 0], [0, 0, 0]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target = 3)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 3)",
        "maximumJumps(nums=[100, -23, -23, 404, 100, 23, 23, 23, 3, 404], target=3)",
        "maximumJumps(nums=[6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target=5)",
        "maximumJumps(nums = [4, 2, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [5, 6, 4, 4, 6, 9, 4, 4, 7, 4, 4, 8, 2, 6], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 0, 3, 0, 2, 1, 0, 2], target = 3)",
        "maximumJumps(nums = [2, 0, 4, 0, 0, 4, 4, 4, 0], target = 4)",
        "maximumJumps(nums = [8,10,2,9,11,5,7,4,6,1,3], target = 3)",
        "maximumJumps(nums=[904, 984, 914, 949, 988, 916, 975], target=950)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = '10001')",
        "maximumOddBinaryNumber(s = '1000')",
        "maximumOddBinaryNumber(s = '10100')",
        "maximumOddBinaryNumber(s = '10010010')",
        "maximumOddBinaryNumber(s='1000')",
        "maximumOddBinaryNumber(s = '1011100')",
        "maximumOddBinaryNumber(s = '00100101')",
        "maximumOddBinaryNumber(s = '100000100')"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 5, k = 12)",
        "minimumSum(n = 5, k = 8)",
        "minimumSum(n = 5, k = 8)",
        "minimumSum(n = 2, k = 9)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 4, k = 12)",
        "minimumSum(n = 6, k = 12)",
        "minimumSum(n = 4, k = 23)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 5)",
        "makeTheIntegerZero(num1 = 9, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 4)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 10, target = 100)",
        "minimumPossibleSum(n = 5, target = 13)",
        "minimumPossibleSum(n = 3, target = 1)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 1, 2, 1, 1], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 6], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums=[1, 1, 2, 1, 1], modulo=3, k=0)",
        "countInterestingSubarrays(nums = [2,4,6], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 2, 1, 2, 1, 2, 2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 3, 6, 3], k = 3)",
        "maximumBeauty(nums = [1, 12, 123, 1235, 56], k = 3)",
        "maximumBeauty(nums = [3, -1, 0, 2], k = 1)",
        "maximumBeauty(nums = [1, 2, 1, 3, 3, 4, 2, 1], k = 3)",
        "maximumBeauty(nums = [10, 2, 3, 1, 6, -1], k = 2)",
        "maximumBeauty(nums=[4, 2, 5, 1], k=1)",
        "maximumBeauty(nums = [1, 5, 3, 1, 7, 4, 9, 2], k = 3)"
    ],
    "sample_148": [
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = \"pointer\")",
        "finalString(s = 'ponter')",
        "finalString(s = 'inter')",
        "finalString(s = 'inter')",
        "finalString(s = 'intention')"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [0, 0, 0])",
        "countWays(nums = [2, 3, 4])",
        "countWays(nums = [0, 0, 1, 2, 2, 3])",
        "countWays(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "countWays(nums = [1, 3, 5, 7, 9, 11])",
        "countWays(nums = [2, 1, 1, 0, 1])",
        "countWays(nums = [0, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [12,24,8,32])",
        "countBeautifulPairs(nums = [12,345,2,6,7896])",
        "countBeautifulPairs(nums = [12, 24, 8, 32])",
        "countBeautifulPairs(nums = [13, 14, 15, 16, 17])",
        "countBeautifulPairs(nums = [12, 24, 18, 30, 15, 13])",
        "countBeautifulPairs(nums = [6, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])",
        "countBeautifulPairs(nums = [2, 1, 6, 4, 8, 3, 5, 7, 4])",
        "countBeautifulPairs(nums = [22, 555, 11, 333, 777])",
        "countBeautifulPairs(nums = [12,34,95,234,3,23,10,20,100,34,95,96,123,3])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 6)",
        "makeTheIntegerZero(num1 = 1, num2 = 5)",
        "makeTheIntegerZero(num1 = 100, num2 = 5)",
        "makeTheIntegerZero(num1 = 25, num2 = 7)",
        "makeTheIntegerZero(num1 = 16, num2 = 12)",
        "makeTheIntegerZero(num1 = 20, num2 = 30)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"neve\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s = 'banana')",
        "makeSmallestPalindrome(s = 'banana')",
        "makeSmallestPalindrome(s = \"nev\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"nev\")",
        "makeSmallestPalindrome(s = \"hannah\")",
        "makeSmallestPalindrome(s = \"aaab\")",
        "makeSmallestPalindrome(s = \"abcd\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"this\", \"is\", \"an\", \"example\"], s = \"thisisanexample\")",
        "isAcronym(words = ['ab', 'ba'], s = 'ba')",
        "isAcronym(words = [\"banana\", \"apple\", \"elephant\"], s = \"baea\")",
        "isAcronym(words = [\"cat\", \"mouse\", \"elephant\"], s = \"catm\")",
        "isAcronym(words = [\"best\", \"time\", \"to\", \"buy\", \"a\", \"computer\"], s = \"btc\")",
        "isAcronym(words = ['a', 'an', 'on', 'the'], s = 'at')",
        "isAcronym(words = [\"banana\", \"peach\", \"watermelon\", \"apple\"], s = \"bpa\")",
        "isAcronym(words = ['banana', 'pineapple', 'raptor'], s = 'rap')",
        "isAcronym(words = [\"Google\", \"Gone\", \"Gopher\"], s = \"GGoG\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,2,2,5,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums=[0,1,1,1,1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [12, 22, 23, 1, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 5, 2, 1, 4, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [6, 2, 1, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums=[1, 2, 5], k=1)",
        "sumIndicesWithKSetBits(nums = [1, 4, 1, 4, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 2, 2, 2, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 5, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [12, 7, 13, 2], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 5, k = 5)",
        "minimumSum(n = 5, k = 8)",
        "minimumSum(n = 4, k = 20)",
        "minimumSum(n = 1, k = 5)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [1, 2, 3, 3])",
        "countWays(nums = [1, 2, 1, 2])",
        "countWays(nums = [3, 1, 2, 4])",
        "countWays(nums = [4, 3, 2, 1, 5])",
        "countWays(nums = [1, 3, 5, 10, 100])",
        "countWays(nums = [1, 2, 1, 3, 4])",
        "countWays(nums = [0, 2, 3, 4, 5, 6, 8, 9, 10])"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabbbcc\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"baanaa\")",
        "minimumCost(s = \"baanana\")",
        "minimumCost(s = \"aabbbbc\")",
        "minimumCost(s = \"yyyx\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LL\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRDD\")",
        "furthestDistanceFromOrigin(moves = \"LL__RR_\")",
        "furthestDistanceFromOrigin(moves = \"_LL__RR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRUULR\")",
        "furthestDistanceFromOrigin(moves = 'R')",
        "furthestDistanceFromOrigin(moves = \"LLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLL\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 6, additionalTank = 2)",
        "distanceTraveled(mainTank = 20, additionalTank = 5)",
        "distanceTraveled(mainTank = 6, additionalTank = 3)",
        "distanceTraveled(mainTank = 6, additionalTank = 3)",
        "distanceTraveled(mainTank = 8, additionalTank = 3)",
        "distanceTraveled(mainTank = 7, additionalTank = 4)",
        "distanceTraveled(mainTank = 26, additionalTank = 5)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4, 7])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4, 7])",
        "countCompleteSubarrays(nums = [1,2,2,2])",
        "countCompleteSubarrays(nums=[1, 2, 1, 2, 3, 4, 7, 8])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [5, 6, 7, 8], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 2, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [5, 6, 7, 8], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,2,3,4,4,3,2,1], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 1, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 4, 7], threshold = 1)",
        "longestAlternatingSubarray(nums = [0, 1, 1, 0, 0, 1, 1, 0], threshold = 1)",
        "longestAlternatingSubarray(nums = [2,2,2,2,2,2,2,2,2,2,2,2], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "longestAlternatingSubarray(nums = [1, 3, 4, 3, 4, 1, 3, 3], threshold = 3)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1,2],[2,4],[1,3]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums=[[0, 1], [1, 2], [2, 3]])",
        "numberOfPoints(nums = [[3, 4], [1, 2], [0, 0]])",
        "numberOfPoints(nums = [[0, 1], [2, 3], [0, 4]])",
        "numberOfPoints(nums = [[1,3],[5,9],[2,6]])",
        "numberOfPoints(nums = [[1, 5], [3, 6], [7, 10]])",
        "numberOfPoints(nums = [[1,2],[1,2],[2,3],[3,4],[3,4]])",
        "numberOfPoints(nums = [[3, 4], [1, 5], [10, 11]])",
        "numberOfPoints(nums = [[1,3],[5,7],[2,5],[3,6]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 345, 2, 6, 7896])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countBeautifulPairs(nums = [12, 34, 45, 67])",
        "countBeautifulPairs(nums=[4, 3, 1])",
        "countBeautifulPairs(nums = [2, 1, 8, 5, 6, 3])",
        "countBeautifulPairs(nums = [12, 1, 23, 22, 11, 12])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5, 12, 34, 45, 6, 7, 8, 12, 34])",
        "countBeautifulPairs(nums = [10, 20, 20, 11, 22, 44, 21, 33])",
        "countBeautifulPairs(nums = [22, 44, 12, 78, 13, 89, 76, 31, 11, 23])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 2, 4, 2, 5], t = 3)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 1, 5], t = 3)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 4, 3], t = 3)",
        "longestAlternatingSubarray(nums = [5, 4, 3, 2, 1], t = 2)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 0], t = 0)",
        "longestAlternatingSubarray(nums = [2, 4, 7, 1, 5, 3], t = 5)",
        "longestAlternatingSubarray(nums = [5, 10, 100, 1000], t = 3000)",
        "longestAlternatingSubarray(nums = [5, 7, 8, 4, 2, 1, 6, 3], t = 3)",
        "longestAlternatingSubarray(nums = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
        "longestAlternatingSubarray(nums = [3,1,7,5,4,6,10], t = 5)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabbbcc\")",
        "minimumCost(s = \"aabbbcc\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aaaa\")",
        "minimumCost(s = \"aabca\")",
        "minimumCost(s = \"mmpp\")",
        "minimumCost(s = \"aabbbbc\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"AABCDD\")",
        "minLength(s = \"ABCDCDA\")",
        "minLength(s = \"BAC\")",
        "minLength(s = \"ABAA\")",
        "minLength(s = \"AAABBBC\")",
        "minLength(s = \"ABABAAB\")",
        "minLength(s = \"ACABCDABE\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,2,5,5,5,8,8], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1,2,0,0,2,1], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums=[1,2,3,4], modulo=4, k=1)",
        "countInterestingSubarrays(nums=[-1, 0, 0, 0, 1, 1, 1, 1], modulo=3, k=1)",
        "countInterestingSubarrays(nums = [0, 2, 1, 1, 1, 0, 0, 0, 0, 0, 2, 1, 1, 0, 2, 1, 2, 1, 0, 2, 1, 1, 0, 1, 1, 0, 2, 1, 1, 2, 0, 1, 0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 0, 2, 1, 0, 0, 1, 2, 1, 2, 0, 0, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 2, 1, 2, 1, 2, 2, 2, 0, 0, 0, 0, 0, 1, 2, 0, 2, 0, 1, 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 2, 2, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 0, 1, 0, 0, 2, 2, 2, 0, 0, 2, 1, 2, 0, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 1, 2, 2, 0, 2, 1, 2, 2, 2, 2, 0, 0, 2, 1, 2, 0, 1, 0, 0, 0, 2, 1, 2, 1, 1, 0, 2, 1, 2, 0, 0, 1, 0, 1, 2, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 2, 2, 2, 2, 1, 2, 2, 0, 2, 1, 0, 2"
    ],
    "sample_9": [
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [0, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 1], [3, 1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [0, 3]])",
        "colorTheArray(n = 4, queries = [[0,1],[1,2],[2,3]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n=5, queries=[[1, 1], [2, 2], [2, 3], [0, 3], [0, 4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 3], [4, 2], [1, 3]])",
        "colorTheArray(n=5, queries=[[1, 1], [2, 1], [2, 2], [3, 1], [3, 2], [4, 1], [4, 2]])",
        "colorTheArray(n = 6, queries = [[0, 1], [0, 2], [0, 3], [1, 4], [2, 5]])",
        "colorTheArray(n = 6, queries = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 2], [5, 3]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 4, 7], nums2 = [1, 3, 6, 7])",
        "maxNonDecreasingLength(nums1 = [1, 2, 1], nums2 = [2, 2, 2])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 4, 7], nums2 = [1, 6, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [2, 6, 3, 4, 5, 6], nums2 = [3, 5, 5, 6, 7, 9])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 2, 5], nums2 = [2, 1, 3, 3, 5, 4])",
        "maxNonDecreasingLength(nums1 = [10, 2, 5, 3, 7, 101, 18], nums2 = [5, 3, 101, 18, 7, 2, 10])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1, 2], nums2 = [2, 1, 2, 1, 2])",
        "maxNonDecreasingLength(nums1 = [4, 3, 5, 7], nums2 = [4, 6, 8, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 1, 5, 5, 1, 5, 5, 1, 5, 5, 5, 5], nums2 = [1, 5, 1, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5])",
        "maxNonDecreasingLength(nums1 = [4, 4, 6, 1, 3, 3, 5, 1, 1, 4, 4, 1], nums2 = [5, 4, 3, 2, 1, 2, 2, 1, 5, 3, 3, 1])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n = 6, target = 6)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 10, 100, 1000])",
        "findValueOfPartition(nums = [1,1,1,1,1])",
        "findValueOfPartition(nums = [1, 10, 12])",
        "findValueOfPartition(nums = [6, 2, 5, 4, 5, 2])",
        "findValueOfPartition(nums = [2, 5, 10, 1, 3])",
        "findValueOfPartition(nums = [6, 2, 10, 8, 1, 3, 9])",
        "findValueOfPartition(nums = [10,12,3,5,6])",
        "findValueOfPartition(nums = [10, 15, 17, 2, 3])",
        "findValueOfPartition(nums = [0,2,2,1,5,6])",
        "findValueOfPartition(nums=[2,12,3,11,1])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"R_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLL___RRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LL\")",
        "furthestDistanceFromOrigin(moves = \"R_________\")",
        "furthestDistanceFromOrigin(moves = \"LLLRR_\")",
        "furthestDistanceFromOrigin(moves = \"RRRRRLDD\")",
        "furthestDistanceFromOrigin(moves = 'R')",
        "furthestDistanceFromOrigin(moves = \"LLLLL_R_RRRR_L_LLL__RR_L_L\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [3, 4, 3, 2, 3, -1, 3, 3])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 3])",
        "minimumIndex(nums = [1, 2, 2, 2, 3])",
        "minimumIndex(nums = [1, 2, 3, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 1, 1, 3])",
        "minimumIndex(nums = [5, 2, 3, 4, 1])",
        "minimumIndex(nums = [1, 2, 3, 3, 1, 1, 2, 1])",
        "minimumIndex(nums = [2, 3, 1, 2, 3, 3, 2, 3])",
        "minimumIndex(nums = [4, 2, 5, 7, 1, 6, 3])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])",
        "semiOrderedPermutation(nums = [1, 3, 2, 5, 4, 6])",
        "semiOrderedPermutation(nums = [1, 5, 3, 7])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 5, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n=6, k=11)"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 3])",
        "alternatingSubarray(nums = [1, 1, 1, 1, 1])",
        "alternatingSubarray(nums = [3, 1, 4, 2])",
        "alternatingSubarray(nums = [2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1,2,2,1])",
        "alternatingSubarray(nums = [0, 1, 0, 1, 0])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 3, 4, 5])",
        "alternatingSubarray(nums = [0, 0, 1, 1, 1, 2, 2, 2])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2], [2, 1]])",
        "matrixSum(a = [[1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0]])",
        "matrixSum(a = [[2, 3, 1], [1, 1, 1]])",
        "matrixSum(a = [[3, 1, 6], [5, 2, 7]])",
        "matrixSum(a = [[1], [3], [2], [3], [2], [2], [3], [3]])",
        "matrixSum(a = [[2, 0, 1, 0], [4, 1, 0, 0], [0, 2, 0, 0]])",
        "matrixSum(a = [[5,1,4,3], [2,3,7,1], [1,2,0,5]])",
        "matrixSum(a = [[5, 3, 10, 1, 10], [8, 5, 5, 3, 4], [1, 1, 1, 1, 1]])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[2, 0, 1], [1, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 0], [0, 1, 1, 0], [0, 0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 1, 1], [0, 1, 0, 1, 0], [0, 0, 1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0]])",
        "findChampion(grid = [[1, 1, 0, 1, 1], [1, 1, 1, 1, 1], [0, 0, 1, 1, 1], [1, 1, 1, 0, 1], [1, 1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 4], [3, 2]])",
        "matrixSum(a = [[0, 1], [1, 1]])",
        "matrixSum(a = [[1,1,0],[0,1,0],[0,0,1]])",
        "matrixSum(a = [[1, 2], [3, 1]])",
        "matrixSum(a = [[1, 3], [4, 1]])",
        "matrixSum(a = [[2, 1, 3], [3, 2, 1]])",
        "matrixSum(a = [[1, 2, 3], [1, 3, 4], [1, 2, 4]])",
        "matrixSum(a = [[1, 3, 2, 5], [4, 1, 6, 2], [1, 2, 0, 1]])",
        "matrixSum(a = [[4, 3, 6, 5], [3, 2, 4, 3], [1, 1, 1, 1]])",
        "matrixSum(a = [[1,3,6], [5,3,6], [2,2,6]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [4, 2, 5, 3, 7])",
        "alternatingSubarray(nums = [6, 2, 4, 8, 10, 9, 15])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 7, 10, 11, 12])",
        "alternatingSubarray(nums = [1, 3, -1, 0])",
        "alternatingSubarray(nums = [1, 3, 4, 5])",
        "alternatingSubarray(nums = [5, 6, 1, 4, 8, 9])",
        "alternatingSubarray(nums = [2, 4, 1, 3, 4, 2, 3])",
        "alternatingSubarray(nums=[3, -8, 0, 5, -9, 1, 3, -5, 2])",
        "alternatingSubarray(nums = [3, -1, 1, -1, -1, 1, -1, 3])",
        "alternatingSubarray(nums = [1, 3, 4, 5, 6, 1, 3, 9, 9])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\"], x = \"p\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"candy\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"aba\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\", \"melon\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"bear\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"an\", \"apple\", \"apricot\"], x = \"a\")",
        "findWordsContaining(words = [\"bat\", \"banana\", \"panda\"], x = \"n\")",
        "findWordsContaining(words = [\"bananas\", \"pineapple\", \"plums\"], x = \"p\")",
        "findWordsContaining(words = [\"b\", \"aaa\", \"aabb\", \"ab\"], x = \"a\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ab\", s2 = \"a\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"a\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcad\")",
        "canBeEqual(s1 = \"aaab\", s2 = \"aaac\")",
        "canBeEqual(s1 = \"x\", s2 = \"xx\")",
        "canBeEqual(s1 = \"1122\", s2 = \"1222\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 10)",
        "lengthOfLongestSubsequence(nums = [5, 7, 7, 8, 8, 10], target = 16)",
        "lengthOfLongestSubsequence(nums=[10,9,2,5,3,7,101,18],target=9)",
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 7, 6, 1, 5], target = 8)",
        "lengthOfLongestSubsequence(nums=[1,1,1,1,1], target=2)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4], target=5)",
        "lengthOfLongestSubsequence(nums=[1,1,2,3,3,4,5,6], target=6)",
        "lengthOfLongestSubsequence(nums=[4,3,1,2], target=10)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"waterbottle\", s2 = \"erbottlewat\")",
        "canBeEqual(s1 = \"apple\", s2 = \"pleap\")",
        "canBeEqual(s1 = \"mom\", s2 = \"mom\")",
        "canBeEqual(s1 = \"mnop\", s2 = \"qbnm\")",
        "canBeEqual(s1 = \"azcbobobegghakl\", s2 = \"begaklbobegghakl\")",
        "canBeEqual(s1 = \"2345\", s2 = \"2543\")",
        "canBeEqual(s1 = \"asdfg\", s2 = \"fdsa1\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1,0,1,0,1])",
        "maxSubarrays(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "maxSubarrays(nums = [1,1,2,1,1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1,2,3,2,1])",
        "maxSubarrays(nums = [1,1,1])",
        "maxSubarrays(nums = [2,2,2,2,2])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8])",
        "maxSubarrays(nums = [2,3,1,2,4,3])",
        "maxSubarrays(nums = [3, 4, 5, 6, 2, 2])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 3, 4], money = 3)",
        "buyChoco(prices = [10, 5], money = 10)",
        "buyChoco(prices = [1, 7, 5], money = 10)",
        "buyChoco(prices = [3, 5, 4], money = 6)",
        "buyChoco(prices = [6, 2, 1], money = 10)",
        "buyChoco(prices = [3, 5, 6, 9], money = 8)",
        "buyChoco(prices = [1, 1, 1, 2, 2, 2, 3, 3, 3], money = 2)",
        "buyChoco(prices = [2, 5, 1, 4, 10, 6, 8], money = 13)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "countSubMultisets(nums = [1,2,3,4,5], l = 3, r = 7)",
        "countSubMultisets(nums = [1,2,2], l = 2, r = 2)",
        "countSubMultisets(nums = [1,2,2,2,2], l = 2, r = 5)",
        "countSubMultisets(nums = [1,1,1,1,1], l = 1, r = 2)",
        "countSubMultisets(nums = [1, 1, 2, 2, 3], l = 0, r = 4)",
        "countSubMultisets(nums = [1, 3, 5, 7], l = 1, r = 1)",
        "countSubMultisets(nums=[1,1,2,2], l = 2, r = 3)",
        "countSubMultisets(nums = [2, 3, 3, 2, 3, 2, 2, 3, 3, 2, 2], l = 4, r = 7)",
        "countSubMultisets(nums = [4,5,2,2,2,1,1,4], l = 3, r = 10)"
    ],
    "sample_322": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 123)",
        "isFascinating(n=1)",
        "isFascinating(n = 11)",
        "isFascinating(n = 999)",
        "isFascinating(n = 30)",
        "isFascinating(n = 32)",
        "isFascinating(n = 6)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"ab\", s2 = \"a\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"abab\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"aba\", s2 = \"cdc\")",
        "canBeEqual(s1 = \"aabbcc\", s2 = \"aabcc\")",
        "canBeEqual(s1 = \"mnn\", s2 = \"nmm\")",
        "canBeEqual(s1 = \"728\", s2 = \"278\")",
        "canBeEqual(s1 = \"mrr\", s2 = \"mdr\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17])",
        "minimumCoins(prices = [2, 5, 3, 6, 1])",
        "minimumCoins(prices = [1, 4, 6, 7, 10])",
        "minimumCoins(prices = [1, 2, 5, 20])",
        "minimumCoins(prices = [1, 5, 10, 20, 100, 1000])",
        "minimumCoins(prices = [3, 4, 5, 2])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 55)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 65)",
        "accountBalanceAfterPurchase(p = 91)",
        "accountBalanceAfterPurchase(p = 155)",
        "accountBalanceAfterPurchase(p = 250)",
        "accountBalanceAfterPurchase(p = 103)",
        "accountBalanceAfterPurchase(p = 185)",
        "accountBalanceAfterPurchase(p = 400)",
        "accountBalanceAfterPurchase(p = 64)"
    ],
    "sample_423": [
        "minOperations(nums = [2,2,2,2])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [3, 4, 4, 6])",
        "minOperations(nums = [1, 2, 2, 3])",
        "minOperations(nums = [3,3,3,3,3,3,3])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5])",
        "minOperations(nums = [3, 4, 4, 6])",
        "minOperations(nums = [3, 3, 2, 2, 2])",
        "minOperations(nums=[3,5,2,4,4])",
        "minOperations(nums = [1, 2, 3, 4, 5, 10, 15, 11, 12])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,1,1,1,1])",
        "alternatingSubarray(nums = [1, 1, 0, 1, 1, 1])",
        "alternatingSubarray(nums = [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19])",
        "alternatingSubarray(nums = [5, 3, 1, 3, 5, 6, 2])",
        "alternatingSubarray(nums = [1,3,4,5])",
        "alternatingSubarray(nums = [2,1,3,3,2])",
        "alternatingSubarray(nums = [2, 2, 2, 1, 1, 3])",
        "alternatingSubarray(nums=[2,2,2,2,5,5,5,5,5,5])",
        "alternatingSubarray(nums = [3,1,-4,2,1])",
        "alternatingSubarray(nums = [6, 4, 0, 10, 1, 5, 2, 7, 8, 3, 9])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 13, limit = 2)"
    ],
    "sample_247": [
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 0)",
        "minOperations(s1 = \"aba\", s2 = \"bca\", x = 2)",
        "minOperations(s1 = \"aba\", s2 = \"bca\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"bcd\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"cba\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"bcd\", x = 2)",
        "minOperations(s1 = \"aba\", s2 = \"bab\", x = 2)",
        "minOperations(s1 = \"cba\", s2 = \"cdb\", x = 2)",
        "minOperations(s1 = \"cba\", s2 = \"cbd\", x = 1)",
        "minOperations(s1 = \"bttn\", s2 = \"bttm\", x = 2)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 4, y = 5, z = 6)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 5, y = 6, z = 7)",
        "longestString(x = 4, y = 2, z = 1)",
        "longestString(x = 1, y = 3, z = 0)",
        "longestString(x = 5, y = 6, z = 8)"
    ],
    "sample_418": [
        "minOperations(nums = [1,1,4,2,3], k = 2)",
        "minOperations(nums = [1,1,1,1,1], k = 0)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 1)",
        "minOperations(nums = [1,2,1,2,3], k = 2)",
        "minOperations(nums = [10,20,30,40,50], k = 4)",
        "minOperations(nums = [1, 4, 2, 5], k = 3)",
        "minOperations(nums = [1, 1, 2, 3, 3], k = 1)",
        "minOperations(nums = [2, 1, 5, 1, 2, 2], k = 3)",
        "minOperations(nums = [5, 1, 4, 2, 7, 3, 9], k = 2)",
        "minOperations(nums = [7, 3, 5, 4, 6], k = 3)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abacabad\")",
        "longestSemiRepetitiveSubstring(s = \"abacabad\")",
        "longestSemiRepetitiveSubstring(s = \"abbbc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbccdddd\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbaaccc\")",
        "longestSemiRepetitiveSubstring(s = \"abcbcbacb\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 2, 3])",
        "isGood(a = [1, 2, 3, 2])",
        "isGood(a = [1, 2, 2])",
        "isGood(a = [1, 2, 2, 3, 3])",
        "isGood(a = [1,2,3,4,5])",
        "isGood(a = [1, 2, 2, 3, 3, 4])",
        "isGood(a = [1, 2, 3, 2, 4])",
        "isGood(a = [1, 1, 2, 3, 4, 5, 6])",
        "isGood(a = [0, 2, 2, 1])",
        "isGood(a = [3, 4, 3, 2, 3])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 6, m = 5)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 1, m = 2)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [4,3,2])",
        "minGroupsForValidAssignment(nums = [2,1,3,3,3,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,5])",
        "minGroupsForValidAssignment(nums = [3,3,6,3,5,1])",
        "minGroupsForValidAssignment(nums = [3, 3, 6, 2, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 5, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5])",
        "minGroupsForValidAssignment(nums = [1,2,2,4,6])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"5\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"next\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\", \"3\", \"next\", \"4\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"1\", \"prev\", \"prev\", \"4\", \"0\", \"prev\", \"6\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"3\", \"3\", \"prev\", \"1\", \"next\", \"prev\", \"4\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"mq\", \"px\", \"zy\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ab\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"a\", \"c\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"apple\", \"banana\", \"orange\", \"apple\"])",
        "maximumNumberOfStringPairs(words=[\"a\", \"aa\", \"aaa\", \"aaaa\"])",
        "maximumNumberOfStringPairs(words=[\"abc\", \"ab\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"ab\", \"a\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"caa\",\"aaa\",\"aab\",\"bab\"])",
        "maximumNumberOfStringPairs(words = [\"mr\", \"apple\"])",
        "maximumNumberOfStringPairs(words = [\"mmmxm\", \"mom\", \"mmmmm\", \"oo\", \"moo\", \"mmmmmmmm\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"010010\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"110010\", k = 1)",
        "shortestBeautifulSubstring(s = \"10101\", k = 3)",
        "shortestBeautifulSubstring(s = \"0110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1001100\", k = 1)",
        "shortestBeautifulSubstring(s = \"0100100\", k = 1)",
        "shortestBeautifulSubstring(s = \"00110010\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110000000110001\", k = 4)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [4, 3, 1, 2])",
        "minimumRightShifts(nums = [3, 5, 1, 2, 4, 3])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7])",
        "minimumRightShifts(nums = [1, 2, 4, 2, 1])",
        "minimumRightShifts(nums=[1,1,1])",
        "minimumRightShifts(nums = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumRightShifts(nums = [1,1,2,1])",
        "minimumRightShifts(nums=[0,1,2,3,4,8,9,11,15])",
        "minimumRightShifts(nums = [3, 1, 5, 7, 9, 2, 4, 8, 6])"
    ],
    "sample_294": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"10001\")",
        "minimumSteps(s = \"110011\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"011011\")",
        "minimumSteps(s = \"1100011\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"11001001\")",
        "minimumSteps(s = \"10101001\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"pale\", s2 = \"ple\", s3 = \"pales\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"ab\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ca\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"nab\")",
        "findMinimumOperations(s1 = \"lovely\", s2 = \"lovely\", s3 = \"lovely\")",
        "findMinimumOperations(s1 = \"aaaaaa\", s2 = \"bbbbbb\", s3 = \"ccccccc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cdab\")",
        "findMinimumOperations(s1 = \"abca\", s2 = \"cbab\", s3 = \"abac\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"adcde\", s3 = \"aeecde\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"acb\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"axc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"ae\", str2 = \"aea\")",
        "canMakeSubsequence(str1 = \"geeks\", str2 = \"eke\")",
        "canMakeSubsequence(str1 = \"geek\", str2 = \"eke\")",
        "canMakeSubsequence(str1 = \"abab\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abac\", str2 = \"abca\")",
        "canMakeSubsequence(str1 = \"azbk\", str2 = \"za\")"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood(nums=[1,2,3,4,5])",
        "isGood(nums = [5,4,3,2,1])",
        "isGood(nums = [1,2,4,3])",
        "isGood(nums = [2, 5, 1, 4, 3])",
        "isGood(nums=[2, 4, 6, 8, 10])",
        "isGood(nums=[2, 5, 3, 1, 4])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 1, 1, 3], target = 6)",
        "countPairs(nums = [1, 2, 3], target = 3)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 0, 1, 1], target = 0)",
        "countPairs(nums = [0, 0, 0], target = 0)",
        "countPairs(nums = [5, 2, 1, 4, 3], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 6, 7, 8, 9, 10], target = 13)",
        "countPairs(nums = [0, -1, 3, 2], target = 2)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [0, 1], moveTo = [9, 8])",
        "relocateMarbles(nums = [6, 5, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 2, 5, 6, 8, 9], moveFrom = [5, 6, 8], moveTo = [8, 9, 5])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5], moveTo = [6, 8, 9])",
        "relocateMarbles(nums = [4, 9, 5, 6, 8], moveFrom = [4, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 5, 8], moveTo = [5, 6, 9])",
        "relocateMarbles(nums = [1, 5, 8, 9, 10], moveFrom = [1, 9], moveTo = [5, 10])",
        "relocateMarbles(nums = [1,2,3,5,6,8,9], moveFrom = [2,8], moveTo = [6,9])",
        "relocateMarbles(nums = [2, 6, 5, 8, 9], moveFrom = [2, 5, 9], moveTo = [6, 8, 9])",
        "relocateMarbles(nums = [1, 2, 4, 5, 7, 8, 9], moveFrom = [2, 8], moveTo = [9, 7])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 4)",
        "countPairs(nums = [3, 2, 3], target = 6)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 5], target = 8)",
        "countPairs(nums = [3, 4, 5, 6, 10], target = 10)",
        "countPairs(nums = [1,2,3,1], target = 3)",
        "countPairs(nums = [1, 5, 6, 2], target = 7)",
        "countPairs(nums = [3, 3, 5, 7, 11], target = 10)",
        "countPairs(nums = [3, 3, 5, 5, 5, 5, 8, 8, 11], target = 10)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [3,3,3,3,3,4])",
        "minLengthAfterRemovals(nums = [4,3,3,2,2,2,1,1])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 5, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 4, 6, 6, 6, 6, 7, 7])",
        "minLengthAfterRemovals(nums=[3,1,2,1,5,6])",
        "minLengthAfterRemovals(nums = [4, 2, 3, 6, 3, 2, 5, 4, 6, 6])"
    ],
    "sample_303": [
        "countSeniors(details = [\"24\", \"42\", \"61\", \"70\"])",
        "countSeniors(details = [\"1998\", \"1999\", \"2000\", \"60\", \"65\"])",
        "countSeniors(details=[\"<NAME>, 88\", \"<NAME>, 92\", \"<NAME>, 65\"])",
        "countSeniors(details=[\"<NAME> 58\", \"<NAME> 70\", \"<NAME> 57\", \"<NAME> 68\"])",
        "countSeniors(details = [\"m90\", \"g80\", \"m70\", \"m60\"])",
        "countSeniors(details = [\"18-20\", \"18-20\", \"21-30\", \"65-70\", \"18-20\", \"18-20\"])",
        "countSeniors(details = [\"16031997\", \"16051995\", \"16051997\", \"17031996\"])",
        "countSeniors(details = [\"Jack(65)\", \"Kate(27)\", \"Jessie(49)\"])",
        "countSeniors(details = [\"Ryan:55\", \"Patrick:42\", \"Claire:37\"])",
        "countSeniors(details = [\"291\", \"653\", \"154\", \"646\", \"664\", \"665\", \"294\", \"663\", \"298\", \"657\", \"295\", \"650\", \"293\", \"651\", \"290\", \"652\", \"660\", \"292\", \"658\", \"296\", \"654\", \"297\", \"655\", \"656\", \"299\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcbbbbcccbbd\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbca\")",
        "longestSemiRepetitiveSubstring(s = \"aacbbbaacba\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"ab\", s2 = \"a\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdef\")",
        "canBeEqual(s1 = \"apple\", s2 = \"app\")",
        "canBeEqual(s1 = \"apple\", s2 = \"pale\")",
        "canBeEqual(s1 = \"cba\", s2 = \"cbb\")",
        "canBeEqual(s1 = \"qq\", s2 = \"ww\")",
        "canBeEqual(s1 = \"banan\", s2 = \"annba\")",
        "canBeEqual(s1 = \"pqrs\", s2 = \"srsq\")",
        "canBeEqual(s1 = \"mab\", s2 = \"mab\")",
        "canBeEqual(s1 = \"by\", s2 = \"yc\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"bac\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bbb\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"m\", s2 = \"q\", s3 = \"qq\")",
        "findMinimumOperations(s1 = \"z\", s2 = \"zx\", s3 = \"zzx\")",
        "findMinimumOperations(s1 = \"1234\", s2 = \"123\", s3 = \"456\")",
        "findMinimumOperations(s1 = \"bcd\", s2 = \"c\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"acbbdc\", s2 = \"cbbd\", s3 = \"bcbad\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [3,5,6,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [10,1,2,4,7,11,15], target = 9)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5, 6, 7], target=9)",
        "lengthOfLongestSubsequence(nums = [2,3,6,8,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums=[2,2,2,2,2], target=4)",
        "lengthOfLongestSubsequence(nums = [1,1,2,3,3,4,4,5,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [2,1,3,5,3,3], target = 4)",
        "lengthOfLongestSubsequence(nums=[3,5,10,2,1,7,12,9,8,2], target=9)",
        "lengthOfLongestSubsequence(nums=[2, 5, 10, 13, 15, 20, 7, 5, 8], target=10)"
    ],
    "sample_257": [
        "minimumSum(nums = [3, 1, 2, 4, 3])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 2, -6, 4, 0])",
        "minimumSum(nums = [4, 3, 1, 2])",
        "minimumSum(nums = [2, 1, 5, 1, 2, 1])",
        "minimumSum(nums = [2, 2, 1])",
        "minimumSum(nums = [3, 5, 2, 9, 4, 8])",
        "minimumSum(nums = [3, 2, 5, 7, 4, 8, 1, 6, 0])",
        "minimumSum(nums=[2, 4, 5, 10, 7, 1, 9])",
        "minimumSum(nums = [3, 5, 2, 8, 11, 13, 7, 10])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\", \"de\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\", \"banana\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"efg\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"a\", \"b\", \"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\", \"abb\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"ade\", \"ace\"])",
        "minimizeConcatenatedLength(words = [\"xz\", \"xh\", \"yz\"])",
        "minimizeConcatenatedLength(words=[\"zy\", \"z\", \"c\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101\", k = 3)",
        "shortestBeautifulSubstring(s = \"100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0101110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0001100\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\",\"ef\",\"gh\",\"ij\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"ab\", \"abcd\"])",
        "minimizeConcatenatedLength(words = [\"w\", \"wo\", \"wor\", \"worl\", \"world\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"abd\", \"abe\"])",
        "minimizeConcatenatedLength(words = [\"aaa\", \"abc\", \"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words=[\"car\", \"bar\", \"abc\"])",
        "minimizeConcatenatedLength(words=[\"do\", \"ray\", \"me\", \"me\", \"one\", \"maybe\"])",
        "minimizeConcatenatedLength(words = [\"am\",\"be\",\"aq\",\"xc\",\"yk\"])",
        "minimizeConcatenatedLength(words = [\"m\", \"qu\", \"m\", \"a\", \"x\", \"a\", \"i\", \"n\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"berry\", \"apple\", \"coconut\", \"orange\", \"walnut\", \"cherry\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 7, m = 5)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,1,2,1])",
        "alternatingSubarray(nums = [1,2,2,1])",
        "alternatingSubarray(nums = [1,2,1,2])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,2,1,1,2])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1,1,1,1,1,1])",
        "alternatingSubarray(nums = [2, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [3,1,1,5])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums=[0, 1, 0, 3, 2, 3])",
        "findMaximumLength(nums = [1, 2, 3, 4])",
        "findMaximumLength(nums=[1,2,3,4,5,6,7])",
        "findMaximumLength(nums=[3,2,6,4,5,1])",
        "findMaximumLength(nums=[1,2,5,2,8,1,5])",
        "findMaximumLength(nums=[1, 2, 3, 1, 4, 5, 6, 7])",
        "findMaximumLength(nums = [1, 1, 3, 3, 3, 3])",
        "findMaximumLength(nums = [4,3,2,1,4,3,2,1,4,3,2,1])",
        "findMaximumLength(nums = [1, 4, 2, 3, 4, 5])"
    ],
    "sample_302": [
        "countSeniors(details = [\"<NAME> 63\", \"<NAME> 74\", \"<NAME> 62\"])",
        "countSeniors(details = [\"i3\", \"t4\", \"c5\"])",
        "countSeniors(details = [\"Joe 85\", \"Harry 120\", \"Bob 55\"])",
        "countSeniors(details = [\"<NAME> 45\", \"Ronald 74 <NAME> 67\"])",
        "countSeniors(details = [\"12-10-2002\", \"16-12-2012\", \"15-1-2010\"])",
        "countSeniors(details = [\"1991-12-09T08:00:00Z\", \"1992-04-12T08:00:00Z\", \"1992-09-09T08:00:00Z\", \"1991-12-09T08:00:00Z\"])",
        "countSeniors(details = [\"Name, Class, Age, Height\", \"Ashley, Class 2, 14, 180\", \"Damian, Class 10, 72, 185\"])",
        "countSeniors(details = [[\"John\", \"James\", \"1995\", \"1996\"], [\"Taylor\", \"John\", \"1995\", \"1996\"], [\"Richard\", \"James\", \"1996\", \"1997\"], [\"John\", \"James\", \"1995\", \"1997\"], [\"Peter\", \"James\", \"1995\", \"1996\"], [\"Richard\", \"James\", \"1996\", \"1997\"], [\"Peter\", \"James\", \"1996\", \"1997\"]])",
        "countSeniors(details = [\"28-03-2015 13:01:59\", \"28-03-2015 15:44:23\", \"29-05-2015 15:44:23\", \"15-01-2016 15:44:23\", \"28-03-2015 12:01:59\", \"28-03-2015 13:01:59\", \"28-03-2015 15:44:23\", \"28-03-2015 13:01:59\", \"28-03-2015 15:44:23\", \"28-03-2015 15:44:23\"])",
        "countSeniors(details = [\"1995-01-18 15:47:06 A40501 S\", \"1996-05-25 11:42:19 A40502 S\", \"1998-10-01 17:58:57 A40501 S\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"a\", s2 = \"aa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"aaz\", s2 = \"zza\")",
        "canBeEqual(s1 = \"a\", s2 = \"aa\")",
        "canBeEqual(s1 = \"aaaaaa\", s2 = \"aaaaab\")",
        "canBeEqual(s1 = \"11111111\", s2 = \"22222222\")",
        "canBeEqual(s1 = \"2212\", s2 = \"1231\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 5, 11, 5])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [1, 5, 8, 12])",
        "minimumCoins(prices = [1, 5, 8, 10, 17])",
        "minimumCoins(prices = [2, 1, 4, 3])",
        "minimumCoins(prices = [3, 1, 2, 4, 5])",
        "minimumCoins(prices = [1, 3, 4, 5, 2])",
        "minimumCoins(prices = [3, 2, 3])",
        "minimumCoins(prices = [2, 5, 7, 3, 9])",
        "minimumCoins(prices=[3, 2, 5])"
    ],
    "sample_378": [
        "minimumSeconds(A = [0, 1, 1, 0, 1, 1])",
        "minimumSeconds(A = [3, 1, 4, 1, 5])",
        "minimumSeconds(A = [1,4,2,3])",
        "minimumSeconds(A = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumSeconds(A = [1,3,2,4,5,6,7])",
        "minimumSeconds(A = [5, 3, 2, 1])",
        "minimumSeconds(A = [1,1,0,0,0])",
        "minimumSeconds(A = [1, 2, 2, 2, 1])",
        "minimumSeconds(A = [5, 3, 1, 5, 3, 1])",
        "minimumSeconds(A = [2, 3, 5, 6, 2, 3])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"aba\", \"cdc\", \"eae\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"baab\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"abcdde\", \"baccd\", \"eeabg\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"abab\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"a\", \"b\", \"b\", \"ab\", \"ab\", \"ba\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"aaaa\", \"bbbb\", \"aaaa\", \"bbbb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ab\", \"a\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"yy\", \"bb\", \"yy\", \"aa\", \"cc\", \"ee\", \"ff\", \"ee\", \"dd\", \"bb\", \"dd\", \"cc\", \"ff\", \"ff\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1, 2, 3, 0, 0, 0], nums2 = [0, 0, 0, 4, 5, 6])",
        "minSum(nums1 = [0, 2, 3, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0, 0, 0, 0, 0, 0, 0, 0, 0], nums2 = [0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "minSum(nums1 = [1, 0, 0, 0, 1], nums2 = [0, 0, 0, 1, 0])",
        "minSum(nums1 = [1, 4, 6, 10], nums2 = [2, 3, 5, 7])",
        "minSum(nums1 = [0, 4, 3, 0, 0, 0], nums2 = [4, 0, 0, 0, 4, 3])",
        "minSum(nums1 = [2, 4, 8, 16], nums2 = [1, 0, 1, 0])",
        "minSum(nums1 = [3, -2, 6, -3, 4], nums2 = [4, -4, -3, 4, 3])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"mango\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"l\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"strawberry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"bat\", \"tab\", \"cat\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"banana\", \"abc\"], x = \"ban\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"orange\", \"banana\", \"lemon\", \"grapes\"], x = \"ban\")",
        "findWordsContaining(words = [\"x\", \"aaa\", \"aa\", \"aaa\", \"a\"], x = \"aaa\")",
        "findWordsContaining(words = [\"the\", \"cat\", \"dog\", \"zebra\", \"abcd\"], x = \"d\")"
    ],
    "sample_397": [
        "maxSum(nums = [2, 1, 5, 1, 3, 2], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 4, k = 3)",
        "maxSum(nums = [2, 2, 2, 2, 5, 5, 5, 8], m = 3, k = 2)",
        "maxSum(nums = [1, 4, 2, 10, 23, 3, 1, 0, 20], m = 4, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [5, 2, 1, 8, 2], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8], m = 3, k = 3)",
        "maxSum(nums=[10, 10, 2, 2, 2, 5, 1, 5, 2, 2], m=2, k=2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [3, 1], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 3, 4, 1, 2], moveFrom = [3, 1], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 3, 4], moveFrom = [1, 3], moveTo = [2])",
        "relocateMarbles(nums = [1, 3, 2], moveFrom = [1, 3], moveTo = [3, 2])",
        "relocateMarbles(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3], moveFrom = [1, 2, 3], moveTo = [2, 3, 1])",
        "relocateMarbles(nums = [1, 2, 4, 5], moveFrom = [2], moveTo = [4])",
        "relocateMarbles(nums = [1,2,3,4,5,6], moveFrom = [3,4,6], moveTo = [4,5,6])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5], moveFrom = [0, 4], moveTo = [3, 5])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5, 6, 7], moveFrom = [4, 0], moveTo = [3, 1])",
        "relocateMarbles(nums = [3, 2, 4, 1, 1, 3, 1], moveFrom = [2, 1, 1, 3], moveTo = [4, 1, 2, 3])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 3, 6, 4, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums=[1,2,3,4,5])",
        "minimumRightShifts(nums = [2, 2, 2])",
        "minimumRightShifts(nums = [4, 3, 6, 2])",
        "minimumRightShifts(nums=[4,3,7,8])",
        "minimumRightShifts(nums = [5, 6, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [2, 2, 2])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 6)",
        "buyChoco(prices = [1, 2, 4], money = 4)",
        "buyChoco(prices = [1, 4, 2], money = 3)",
        "buyChoco(prices = [1, 1, 1], money = 4)",
        "buyChoco(prices = [2, 3, 4, 5, 6], money = 9)",
        "buyChoco(prices = [6, 10, 5], money = 10)",
        "buyChoco(prices = [3, 10, 8], money = 15)",
        "buyChoco(prices = [10, 12, 4], money = 20)",
        "buyChoco(prices = [3, 4, 5, 10, 2], money = 20)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 9)",
        "lengthOfLongestSubsequence(nums = [3,5,6,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,3,5,4,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 100)",
        "lengthOfLongestSubsequence(nums = [3, 5, 6, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [5,7,7,8,8,10], target = 8)",
        "lengthOfLongestSubsequence(nums = [1,3,5,4,7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9], target = 4)",
        "lengthOfLongestSubsequence(nums = [3, 4, 6, 7], target = 7)",
        "lengthOfLongestSubsequence(nums=[-8, 1, 2, 2, 3], target=4)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"bananas\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abbabb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aababcabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abbbababa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaabaabaaaa\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words=[\"banana\", \"orange\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"bar\", \"baz\", \"foo\"], x = \"a\")",
        "findWordsContaining(words = [\"hi\", \"hello\", \"bye\"], x = \"l\")",
        "findWordsContaining(words = [\"banana\", \"kiwi\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"this\", \"is\", \"banana\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"blueberry\"], x = \"berry\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"apple\", \"tomato\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"apricot\", \"banana\", \"bananana\"], x = \"banana\")",
        "findWordsContaining(words = [\"bread\", \"butter\", \"cheese\"], x = \"ea\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"push\", \"prev\", \"prev\", \"push\", \"push\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"2\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"10\", \"prev\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"next\", \"next\", \"next\", \"1\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"1\", \"prev\", \"6\", \"7\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"3\", \"2\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"1\", \"next\", \"1\", \"5\", \"prev\", \"4\", \"next\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"prev\", \"2\", \"3\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"prev\", \"prev\", \"3\", \"prev\", \"push\", \"1\", \"push\", \"2\", \"prev\", \"prev\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"banana\", s2 = \"banana\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"abab\")",
        "canBeEqual(s1 = \"xx\", s2 = \"yy\")",
        "canBeEqual(s1 = \"mno\", s2 = \"mno\")",
        "canBeEqual(s1 = \"example\", s2 = \"samples\")",
        "canBeEqual(s1 = \"aaaa\", s2 = \"aaab\")",
        "canBeEqual(s1 = \"xxy\", s2 = \"xyy\")",
        "canBeEqual(s1 = \"effg\", s2 = \"ffff\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [3,2,1])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [2, 3, 1, 4, 5])",
        "minimumSum(nums = [1,2,3,100])",
        "minimumSum(nums = [4,5,6,7])",
        "minimumSum(nums = [7,1,9,6])",
        "minimumSum(nums = [9,8,5,2,3,4])",
        "minimumSum(nums = [1,2,5,4,6,7,6])",
        "minimumSum(nums = [-3, 1, 3, 5, 9])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 22)",
        "lengthOfLongestSubsequence(nums = [3, 5, -4, 8, 11, 1, -1, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 5, -4, 8, 11, 12], target = 10)",
        "lengthOfLongestSubsequence(nums = [5, 3, 7, 8, 10], target = 16)",
        "lengthOfLongestSubsequence(nums = [2, 1, 4, 7, 3, 2, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [0, 1, 0, 3, 2, 3, 1, 2, 3, 3], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 1, 3, 2], target = 3)"
    ],
    "sample_368": [
        "sortVowels(s = \"Hello\")",
        "sortVowels(s='lYmph')",
        "sortVowels(s = \"This is a string\")",
        "sortVowels(s = \"hIrE\")",
        "sortVowels(s = \"Hill\")",
        "sortVowels(s = 'Hello World!')",
        "sortVowels(s = \"HyggeL\")",
        "sortVowels(s = 'eEieH')",
        "sortVowels(s = \"aIoUaIou\")",
        "sortVowels(s = \"aBiEeOi\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 3], [2, 2]])",
        "matrixSum(nums = [[1, 4], [3, 2]])",
        "matrixSum(nums = [[1, 3, 5], [2, 4, 6], [8, 9, 10]])",
        "matrixSum(nums = [[1,1,1,1,1,1], [1,1,1,1,1,1], [1,1,1,1,1,1], [1,1,1,1,1,1]])",
        "matrixSum(nums = [[1,4,5],[5,6,7],[8,2,3]])",
        "matrixSum(nums = [[4,5,7], [1,3,6], [8,9,10]])",
        "matrixSum(nums = [[5,4,2], [3,3,3], [2,2,2]])",
        "matrixSum(nums = [[1,3,2],[0,2,0],[5,5,5]])",
        "matrixSum(nums = [[3, 4, 2], [3, 3, 3], [2, 2, 2]])",
        "matrixSum(nums = [[3,1,4,6],[1,8,3,2],[7,4,9,5]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [0, -3, -1, 5, -4])",
        "maximumTripletValue(nums = [-2,0,1,3])",
        "maximumTripletValue(nums = [-1, -3, 4, 5, -1, -2])",
        "maximumTripletValue(nums = [3, 4, 5, 6, 2])",
        "maximumTripletValue(nums = [3, -1, -2])",
        "maximumTripletValue(nums=[0, 3, 4, 2, 3])",
        "maximumTripletValue(nums = [-1, 0, 2, 4, -1, 2, -10])",
        "maximumTripletValue(nums = [100000, 999, 999, 999, 999, 999, 999, 999, 999])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1, 1, 1, 1, 1])",
        "alternatingSubarray(nums = [1,2,1,2,1])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [2, 1, 3, 4])",
        "alternatingSubarray(nums = [1, -1, 5, -2, 3])",
        "alternatingSubarray(nums = [0, 0, 0, 0, 0])",
        "alternatingSubarray(nums = [5, 3, 1, 2, 5, 2])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 5)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 5)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aabbcc\", k = 3)",
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"bbaaa\", k = 2)",
        "beautifulSubstrings(s=\"a\", k=1)",
        "beautifulSubstrings(s = \"aibc\", k = 2)",
        "beautifulSubstrings(s = \"bacd\", k = 1)"
    ],
    "sample_449": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"nnnnnnnn\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"pa\")",
        "minChanges(s = \"baanaa\")",
        "minChanges(s = \"nnmm\")",
        "minChanges(s = \"zzzab\")",
        "minChanges(s = \"ccz\")",
        "minChanges(s=\"pql\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"10100\")",
        "minimumSteps(s = \"1100111\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"101010101\")",
        "minimumSteps(s = \"011001\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details=[\"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details=[\"<NAME>\", \"<NAME>\", \"<NAME>\"])",
        "countSeniors(details=[\"<NAME> 36\", \"<NAME> 48\"])",
        "countSeniors(details = [\"xyz,18\",\"abc,20\"])",
        "countSeniors(details = [\"<NAME> 30 years old\", \"<NAME> 18 years old\", \"<NAME> 35 years old\"])",
        "countSeniors(details = [\"m111222333444\",\"m111222333444\",\"m111222333444\",\"m111222333444\",\"f111222333444\",\"f111222333444\",\"f111222333444\",\"f111222333444\"])",
        "countSeniors(details = [\"<NAME> 1982-10-02\", \"Sawyer 1982-10-02\"])",
        "countSeniors(details = [\"23/04/2002\", \"03/02/2004\", \"01/09/2003\", \"02/07/2003\", \"23/04/2001\"])",
        "countSeniors(details = [\"Nasir\", \"120\", \"Jamal\", \"10\", \"Saad\", \"90\", \"Ranaz\", \"65\", \"Omer\", \"75\", \"Ali\", \"60\", \"Nazmul\", \"65\", \"Shahin\", \"100\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,6,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,6,3,3])",
        "minGroupsForValidAssignment(nums = [1,3,2])",
        "minGroupsForValidAssignment(nums = [3,3,6,3,5,6])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,3,2,1])",
        "minGroupsForValidAssignment(nums=[3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [5,5,4,4,4,3])",
        "minGroupsForValidAssignment(nums = [5,2,2,3,3,4,4,5,6])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 1]], k = 0)",
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3]], k = 1)",
        "countPairs(coordinates = [[1,1], [2,2], [3,3]], k = 2)",
        "countPairs(coordinates = [[1, 0], [0, 1], [1, 1], [1, 0]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 1], [1, 2]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[-1, -1], [0, 1], [1, 0], [1, -1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1],",
        "countPairs(coordinates = [[1, 2], [2, 2], [3, 4], [3, 5], [1, 1], [2, 3], [2, 1]], k = 3)"
    ],
    "sample_401": [
        "maxSum(nums = [1, -1, 5, -2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 4, 2, 1, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,1], m = 2, k = 3)",
        "maxSum(nums = [9, 1, 2, 5, 10, 4, 2, 7], m = 4, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 2)",
        "maxSum(nums=[1, 2, 3, 2, 5], m=2, k=3)",
        "maxSum(nums = [3, 1, 4, 1, 5, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 3, 4, 5, 2], m = 3, k = 4)",
        "maxSum(nums = [3, 2, 1, 5, 4, 2, 5, 3, 6, 8, 1], m = 2, k = 3)"
    ],
    "sample_452": [
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abca\")",
        "minChanges(s = \"aabc\")",
        "minChanges(s = \"abb\")",
        "minChanges(s = \"abaabaa\")",
        "minChanges(s = \"aacaac\")",
        "minChanges(s = \"ppss\")",
        "minChanges(s = \"xyyy\")",
        "minChanges(s = \"xxax\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 3, 5, 4], nums2 = [2, 4, 1, 3])",
        "minOperations(nums1 = [1, 3, 5, 4], nums2 = [2, 6, 8, 10])",
        "minOperations(nums1 = [1, 1, 9, 1], nums2 = [2, 2, 8, 2])",
        "minOperations(nums1 = [4,3,1,2], nums2 = [3,4,2,1])",
        "minOperations(nums1 = [5,1,3,4,2], nums2 = [2,4,1,3,5])",
        "minOperations(nums1 = [2,1,5,6,2,3], nums2 = [4,4,6,1,7,5])",
        "minOperations(nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums1 = [1, 1, 1, 1, 1, 1], nums2 = [2, 2, 2, 2, 2, 2])",
        "minOperations(nums1 = [1, 1, 1, 2, 2, 2], nums2 = [4, 4, 5, 5, 6])",
        "minOperations(nums1 = [1, 1, 4, 2, 3], nums2 = [2, 7, 9, 3, 4])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '1101', k = 2)",
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101010\", k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"00110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"010010\", k = 1)",
        "shortestBeautifulSubstring(s = \"110101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s='011010', k=3)",
        "shortestBeautifulSubstring(s='001111101', k=1)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [-2,0,1,3])",
        "maximumTripletValue(nums = [-2,1,-3,4,-1,2,1,-5,4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [3, 2, 6, 8, 2, 3])",
        "maximumTripletValue(nums = [1,3,2,2,5,4])",
        "maximumTripletValue(nums=[-12, 1, -6, 4, -1, 2, 1, -5, 4])",
        "maximumTripletValue(nums = [3, 1, 2, 7, 8, 9])",
        "maximumTripletValue(nums=[1, -2, -5, 6, -2, 4, -1, 2, 1, -5, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n=3, limit=3)",
        "distributeCandies(n = 4, limit = 4)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 24, limit = 3)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minGroupsForValidAssignment(nums = [2,1,3,3,3,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [1,3,2,5,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 4, 4, 6, 6])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,3,3,3,3,4,4,4,4,4])",
        "minGroupsForValidAssignment(nums=[5,3,2,4,3,2,1])",
        "minGroupsForValidAssignment(nums=[2,2,2,1,1,2])",
        "minGroupsForValidAssignment(nums=[1,2,4,6,1,2])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 1, 0, 1], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [4, 5, 6, 7, 8])",
        "minSum(nums1 = [1, 0, 1, 0], nums2 = [1, 1, 0])",
        "minSum(nums1 = [0, 1, 0, 0], nums2 = [0, 0, 1, 1])",
        "minSum(nums1 = [1, 1, 0, 1, 1], nums2 = [0, 1, 1, 0, 0])",
        "minSum(nums1 = [0, 0, 1, 0, 1], nums2 = [0, 1, 1, 1, 1])",
        "minSum(nums1 = [2, 0, 3], nums2 = [1, 5, 3])",
        "minSum(nums1 = [0, 3, 0, 0, 2, 0], nums2 = [0, 0, 3, 0, 1, 0])",
        "minSum(nums1 = [0, 0, 0, 1, 0, 1, 0, 1, 1, 0], nums2 = [1, 0, 1, 1, 1, 0, 0, 0, 0, 1])",
        "minSum(nums1 = [1, 0, 0, 2, 1], nums2 = [3, 0, 0, 0, 3])"
    ],
    "sample_453": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abca\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn",
        "minChanges(s = \"pp\")",
        "minChanges(s = \"abcdc\")",
        "minChanges(s = \"dd\")",
        "minChanges(s = \"rrrrmmd\")",
        "minChanges(s = \"cgt\")",
        "minChanges(s = \"banaan\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aiueo\", k = 1)",
        "beautifulSubstrings(s=\"aba\", k=2)",
        "beautifulSubstrings(s = \"uuu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"cbbebi\", k = 3)",
        "beautifulSubstrings(s = \"baiauau\", k = 2)",
        "beautifulSubstrings(s=\"beautiful\", k=2)",
        "beautifulSubstrings(s=\"mississippi\", k=3)",
        "beautifulSubstrings(s=\"abaiaiueo\", k=4)",
        "beautifulSubstrings(s = \"xaxbbbxxaxbbbxxaxbbbx\", k = 3)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaei\", k = 3)",
        "beautifulSubstrings(s = \"azcbobobegghakl\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"xxyyzz\", k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = \"Hey, what's up?\")",
        "sortVowels(s = \"Hello World!\")",
        "sortVowels(s = 'lYmPH')",
        "sortVowels(s = 'LomPh')",
        "sortVowels(s = \"sTay\")",
        "sortVowels(s = \"Zebra\")",
        "sortVowels(s = \"hghg\")",
        "sortVowels(s = 'eEaoou')",
        "sortVowels(s = \"Sadness\")",
        "sortVowels(s = \"hmmm, i love you\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [1, 2, 4, 7, 8, 13])",
        "minimumSeconds(nums = [900000000, 900000000, 900000000, 900000000, 900000000, 900000000, 900000000, 900000000, 900000000])",
        "minimumSeconds(nums = [1, 2, 4, 7, 8, 10])",
        "minimumSeconds(nums = [1,2,1])",
        "minimumSeconds(nums = [1, 1, 0, 1])",
        "minimumSeconds(nums = [4, 3, 1, 3, 2])",
        "minimumSeconds(nums = [9, 4, 1, 7, 4, 1])",
        "minimumSeconds(nums = [9, 8, 6, 4, 1, 3, 2, 0])",
        "minimumSeconds(nums = [1,1,9,3,4,1,3,5,8])"
    ],
    "sample_258": [
        "minimumSum(nums = [3, 1, 2, 4, 3])",
        "minimumSum(nums = [3, 1, 2, 4, 3])",
        "minimumSum(nums = [1, 2, 5])",
        "minimumSum(nums = [1, 5, 3, 4, 2])",
        "minimumSum(nums = [10, 2, 5, 1, 8, 20])",
        "minimumSum(nums = [1, 3, 7])",
        "minimumSum(nums = [2, 1, 5, 7, 3, 9])",
        "minimumSum(nums = [3, 5, 1, 3, 4, 2])",
        "minimumSum(nums = [3, -1, 2, 5, 6])",
        "minimumSum(nums = [7, 3, 4, 5])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 1, 4, 2, 3], k = 4)",
        "minOperations(nums = [1,4,16], k = 4)",
        "minOperations(nums = [1,4,2,3], k = 4)",
        "minOperations(nums = [3,2,20,1,1,3], k = 3)",
        "minOperations(nums = [1,4,1,5], k = 4)",
        "minOperations(nums = [1,2,1,2,1], k = 4)",
        "minOperations(nums = [5, 2, 3, 1], k = 3)",
        "minOperations(nums = [1, 2, 1, 2, 1, 1, 2, 2], k = 2)",
        "minOperations(nums = [2,3,5,1,3], k = 4)",
        "minOperations(nums = [2,1,5,1,2,1,2,4,1,2,1,2,1,3], k = 4)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(A = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(A = [2, 3, 4, 2, 6, 2, 5, 1], m = 3, k = 4)",
        "maxSum(A = [1, 2, 3], m = 1, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 1, 2, 3], m = 3, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5], m = 3, k = 4)",
        "maxSum(A = [1, 0, -1, 0, -2, 2], m = 3, k = 3)",
        "maxSum(A = [1, 3, 2, 2, 5, 6, 7, 1, 1], m = 3, k = 2)",
        "maxSum(A = [3, 2, 5, 4, 1, 3, 5, 2, 4, 4], m = 2, k = 3)",
        "maxSum(A = [1, 5, 9, 2, 13, 8, 12, 11], m = 3, k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"11000\")",
        "minimumSteps(s = \"0011100\")",
        "minimumSteps(s = \"00111\")",
        "minimumSteps(s = \"0101011111111111111111111110001\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "maxSubarrays(nums = [1,1,2])",
        "maxSubarrays(nums = [1,0,1,1,1])",
        "maxSubarrays(nums = [1,0,1,1,1])",
        "maxSubarrays(nums = [1,2,3,2,1])",
        "maxSubarrays(nums=[1,1,2,1,1])",
        "maxSubarrays(nums = [5,4,0,3,1,6,2])",
        "maxSubarrays(nums = [0,0,0])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "maxSubarrays(nums = [1,1,1,1,1])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 4], money = 4)",
        "buyChoco(prices = [3, 4], money = 8)",
        "buyChoco(prices = [5, 10, 20], money = 30)",
        "buyChoco(prices = [2, 3, 2], money = 6)",
        "buyChoco(prices = [3, 3], money = 6)",
        "buyChoco(prices = [3, 2, 5], money = 10)",
        "buyChoco(prices = [10, 20, 5], money = 8)",
        "buyChoco(prices = [10, 15, 20, 25, 30], money = 55)",
        "buyChoco(prices = [40, 60, 20, 10], money = 60)",
        "buyChoco(prices = [12, 4, 23, 14, 27], money = 66)"
    ],
    "sample_290": [
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"011101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"111100\")",
        "minimumSteps(s = \"0101100\")",
        "minimumSteps(s=\"100110\")",
        "minimumSteps(s = \"00101110\")",
        "minimumSteps(s = \"000100100100\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [1,2,1,2,1,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,",
        "minLengthAfterRemovals(nums = [7, 9, 12])",
        "minLengthAfterRemovals(nums = [5, 3, 2, 2, 2, 2, 2, 5, 5])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 4)",
        "minOperations(nums = [1,4,16], k = 4)",
        "minOperations(nums = [1, 4, 2, 3, 3, 4, 1, 2], k = 4)",
        "minOperations(nums = [4, 5, 6, 7, 8], k = 4)",
        "minOperations(nums = [1, 2, 1, 1, 1], k = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1)",
        "minOperations(nums = [1, 4, 2, 3, 3, 3, 4, 4], k = 4)",
        "minOperations(nums = [1, 4, 2, 3, 3, 3, 4, 3, 2, 4, 2], k = 4)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1], k = 1)",
        "minOperations(nums=[3,1,1,3], k=3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 2, 1])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 2, 3, 3])",
        "isGood(nums = [1, 2, 2, 1])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3, 3, 3])",
        "isGood(nums = [2, 4, 2, 2])",
        "isGood(nums = [3, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1])"
    ],
    "sample_325": [
        "isFascinating(n = 1)",
        "isFascinating(n = 3)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 5)",
        "isFascinating(n = 4)",
        "isFascinating(n = 1)",
        "isFascinating(n=3)",
        "isFascinating(n=9)",
        "isFascinating(n = 15)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 1])",
        "isGood(nums = [1, 2, 1])",
        "isGood(nums = [1, 2, 2, 3])",
        "isGood(nums = [1, 1, 2, 3, 3])",
        "isGood(nums = [1, 1, 2, 3, 3, 4, 4])",
        "isGood(nums = [4, 6, 2, 1])",
        "isGood(nums=[3,4,3])",
        "isGood(nums=[1,2,3,4,5,4,4])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [30, 15, 60, 75, 45, 15, 15, 45])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [5, 4, 9, 7, 10, 12])",
        "minimumSeconds(nums = [1, 3, 1, 3, 1, 3, 1])",
        "minimumSeconds(nums = [2,2,1,1,1])",
        "minimumSeconds(nums = [4,2,3,1,5])",
        "minimumSeconds(nums = [5, 4, 9, 7, 10, 12, 11])",
        "minimumSeconds(nums=[5, 3, 2, 1, 3, 5, 7])",
        "minimumSeconds(nums = [6, 3, 10, 8, 9, 7, 1, 11, 2, 5])",
        "minimumSeconds(nums = [6, 19, 3, 5, 7, 13, 2, 12, 18, 9])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [0, 1, 0, 3, 12])",
        "minimumRightShifts(nums = [0, 1, 0, 3, 12])",
        "minimumRightShifts(nums = [1, 1, 1, 1])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 5])",
        "minimumRightShifts(nums=[1, 3, 2])",
        "minimumRightShifts(nums = [3,2,4,1])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [3, 4, 2, 1, 3, 4, 2, 1])",
        "minimumRightShifts(nums=[0, 1, 1, 0, 1])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [3, 1, 4, 2])",
        "isGood(nums = [1, 2, 5])",
        "isGood(nums = [5, 1, 2, 3, 4, 6])",
        "isGood(nums = [2, 1, 1, 3])",
        "isGood(nums = [1,2,3,4,5,6,8,7])",
        "isGood(nums=[2, 1, 3, 5, 4, 6, 8])",
        "isGood(nums = [3, 4, 1, 6, 0, 2, 8])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 1, 1], nums2 = [1, 1, 3])",
        "minOperations(nums1 = [1, 1], nums2 = [2, 2])",
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "minOperations(nums1 = [1, 1, 4, 2, 3], nums2 = [2, 7, 5, 8, 4])",
        "minOperations(nums1 = [1, 1, 4, 2, 3], nums2 = [3, 2, 4, 1, 1])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [2,3,4,5])",
        "minOperations(nums1=[1, 5, 3, 6, 7], nums2=[1, 6, 2, 4])",
        "minOperations(nums1 = [2, 4, 7, 1, 3], nums2 = [5, 6, 2, 4, 6])",
        "minOperations(nums1 = [5, 2, 3, 8], nums2 = [1, 4, 7, 6])",
        "minOperations(nums1 = [1, 2, 5], nums2 = [4, 1, 5, 10, 20, 100])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"cbbd\", k = 2)",
        "shortestBeautifulSubstring(s = \"bbaaabb\", k = 3)",
        "shortestBeautifulSubstring(s = \"110011\", k = 3)",
        "shortestBeautifulSubstring(s = \"a1c1e1\", k = 4)",
        "shortestBeautifulSubstring(s = \"2404\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010111101\", k = 3)",
        "shortestBeautifulSubstring(s = '1101001100011', k = 1)",
        "shortestBeautifulSubstring(s = \"21222212111111112222211111112211112212211\", k = 12)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 4, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [2,3,5,7,9])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"01100\")",
        "minimumSteps(s = \"01100\")",
        "minimumSteps(s = \"1011101\")",
        "minimumSteps(s = \"0100111\")",
        "minimumSteps(s = \"1111010110111010001\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [3,5,6,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [5, 7, 7, 8, 8, 10], target = 16)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [2, 4, 6, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,5,3,7,8,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, -1, 2, 1, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [5,1,3,10,4,7,6,8], target = 13)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 3, 1, 6, 9], target = 9)"
    ],
    "sample_259": [
        "minimumSum(nums = [3,1,2,4])",
        "minimumSum(nums = [4,3,1,2])",
        "minimumSum(nums = [4, 3, 1, 2])",
        "minimumSum(nums = [4,3,1,2])",
        "minimumSum(nums = [3, 1, 2, 4, 3])",
        "minimumSum(nums = [3, 2, -6, 4, 0])",
        "minimumSum(nums = [2, 4, 6, 2, 5])",
        "minimumSum(nums = [1, 5, 3, 4, 2])",
        "minimumSum(nums=[3, 1, 2, 4])",
        "minimumSum(nums = [5, 10, 15, 20, 25, 30])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 4, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1, -1, 1], m = 1, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 4, k = 3)",
        "maxSum(nums = [1, 4, 2, 1, 3, 5, 6, 2, 3, 7], m = 3, k = 4)",
        "maxSum(nums = [2, 4, 1, 0, 9, 5, 13, 3], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,1,2,2,2,2,3,3,3], m = 3, k = 1)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"aba\", s2 = \"baba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"cdc\", s3 = \"eae\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"caa\", s3 = \"aba\")",
        "findMinimumOperations(s1=\"abc\", s2=\"cde\", s3=\"ace\")",
        "findMinimumOperations(s1 = \"aabbaa\", s2 = \"adcaa\", s3 = \"aadcaa\")",
        "findMinimumOperations(s1 = \"abacaba\", s2 = \"cbabac\", s3 = \"bcbcbac\")",
        "findMinimumOperations(s1 = \"xyxxz\", s2 = \"xxyxx\", s3 = \"xxxyz\")",
        "findMinimumOperations(s1 = \"ade\", s2 = \"aed\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"cabx\", s2 = \"acbd\", s3 = \"cabd\")",
        "findMinimumOperations(s1 = \"25147\", s2 = \"34463\", s3 = \"57894\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 2, 1, 4])",
        "minOperations(nums = [1, 1, 1, 1, 3, 3, 3, 3])",
        "minOperations(nums = [1, 3, 4, 1, 5])",
        "minOperations(nums = [3,3,6,6])",
        "minOperations(nums = [4, 5, 6, 7])",
        "minOperations(nums = [5, 1, 3, 2, 2])",
        "minOperations(nums = [1, 3, 6, 3, 1, 3])",
        "minOperations(nums=[1, 1, 1, 1, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5])",
        "minOperations(nums = [2, 1, 3, 3, 3, 2, 4, 2])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 2, 4, 8])",
        "minimumCoins(prices = [1, 5, 10, 25, 50])",
        "minimumCoins(prices = [1, 4, 2, 5])",
        "minimumCoins(prices = [1, 2, 4, 5, 6, 8])",
        "minimumCoins(prices = [2, 3, 5, 7, 8])",
        "minimumCoins(prices = [3, 6, 5, 7, 4])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 3, 1, 4, 2, 3, 6])",
        "minimumSeconds(nums = [1,2,3,4,7])",
        "minimumSeconds(nums = [9001, 9001, 9001, 9001])",
        "minimumSeconds(nums = [1,2,3,4,7])",
        "minimumSeconds(nums=[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "minimumSeconds(nums
        "minimumSeconds(nums = [3,1,5,4,2])",
        "minimumSeconds(nums = [3,2,3,4,2])",
        "minimumSeconds(nums = [5, 10, 20, 40, 42, 45, 47])",
        "minimumSeconds(nums = [1, 2, 1, 5, 8, 16, 32, 32, 64, 128, 256, 512, 1024, 2048])"
    ],
    "sample_448": [
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abca\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"ba\")",
        "minChanges(s = \"cabaabac\")",
        "minChanges(s = \"aabab\")",
        "minChanges(s = \"pale\")",
        "minChanges(s = \"haha\")",
        "minChanges(s = \"acbd\")",
        "minChanges(s = \"pqp\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [8, 1, 3, 5, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [1, 5, 3, 9, 8], limit = 4)",
        "lexicographicallySmallestArray(nums = [5, 3, 1, 8, 9], limit = 7)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 5, 8], limit = 6)",
        "lexicographicallySmallestArray(nums = [5, 1, 8, 9, 3], limit = 7)",
        "lexicographicallySmallestArray(nums = [6, 8, 1, 3, 5, 4, 7, 9], limit = 10)",
        "lexicographicallySmallestArray(nums = [3, 5, 1, 4, 2, 8], limit = 7)",
        "lexicographicallySmallestArray(nums = [4, 2, 9, 3], limit = 10)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,1,1,1,1])",
        "sumCounts(nums=[1,2,3,4,5,6,7,8])",
        "sumCounts(nums = [0,1,2])",
        "sumCounts(nums = [3, 4, 5])",
        "sumCounts(nums = [1,2,2,3,3,3])",
        "sumCounts(nums = [2, 4, 6])",
        "sumCounts(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5])",
        "sumCounts(nums=[0, 1, 2, 3, 4, 5])",
        "sumCounts(nums=[0, 1, 1])",
        "sumCounts(nums=[2, 3, 3, 5, 5])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [-2, 0, 3, -5, 2, -1])",
        "maximumTripletValue(nums = [3, 5, 2, 3])",
        "maximumTripletValue(nums = [-2,0,1,3])",
        "maximumTripletValue(nums = [3, -1, 2, -1])",
        "maximumTripletValue(nums = [2,3,1])",
        "maximumTripletValue(nums = [3, 2, 4, 5])",
        "maximumTripletValue(nums = [-3, -2, -1, 1, 2])",
        "maximumTripletValue(nums = [0, 2, 5, 2, 7])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [4, 5, 10, 2, 1, 20])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 1)",
        "beautifulSubstrings(s = \"abba\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 5)",
        "beautifulSubstrings(s = \"uyy\", k = 5)",
        "beautifulSubstrings(s = \"abcbaba\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuueaeiou\", k = 5)",
        "beautifulSubstrings(s = \"lynk\", k = 2)",
        "beautifulSubstrings(s = \"zaaazzzzzzbaaazzzzzzzzzzzz\", k = 3)"
    ],
    "sample_385": [
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], target = 8)",
        "countPairs(nums = [1,4,2,1,3], target = 5)",
        "countPairs(nums = [3,1,2,2], target = 4)",
        "countPairs(nums = [1, 3, 2, 4], target = 6)",
        "countPairs(nums = [3, 5, 6, 7, 8], target = 10)",
        "countPairs(nums = [3,5,1,2,5], target = 10)",
        "countPairs(nums=[1, 1, 3, 4, 5], target=4)",
        "countPairs(nums=[2,2,2,2,2,2,2], target=4)",
        "countPairs(nums=[1, 3, 5, 2], target=9)",
        "countPairs(nums = [0,0,0,0,0,0,0,0,0,0,1], target = 1)"
    ],
    "sample_462": [
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 11, limit = 10)",
        "distributeCandies(n = 2, limit = 1)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 1, 4, 2, 3], nums2 = [7, 6, 4, 3, 1])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [4,5,6,7,8,9])",
        "minOperations(nums1 = [1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 6, 3, 3])",
        "minOperations(nums1 = [2, 4, 8, 16], nums2 = [4, 8, 16, 32])",
        "minOperations(nums1 = [1, 10, 6, 4, 8, 3], nums2 = [1, 7, 8, 5])",
        "minOperations(nums1 = [2,5,9], nums2 = [6,5,10])",
        "minOperations(nums1 = [2, 3, 4, 5], nums2 = [2, 3, 4, 5])",
        "minOperations(nums1=[2, 5, 10, 40, 80], nums2=[10, 9, 20, 50, 81])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2])",
        "minOperations(nums = [2,2,2,2,2,2,2,2,2,2])",
        "minOperations(nums=[1, 2, 3])",
        "minOperations(nums = [3, 1, 1, 2, 2])",
        "minOperations(nums = [1, 2, 2, 3, 4, 4, 5])",
        "minOperations(nums = [3,2,1,4,5,6,3,1,1,1])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"110110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110100\", k = 2)",
        "shortestBeautifulSubstring(s = \"0010111\", k = 2)",
        "shortestBeautifulSubstring(s = '011010010', k = 2)",
        "shortestBeautifulSubstring(s = \"011110\", k = 2)",
        "shortestBeautifulSubstring(s = \"101010011\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101001101111110\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,3,2])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [60, 60, 60])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8])",
        "minimumSeconds(nums = [1,3,0,2,4,3,6,7])",
        "minimumSeconds(nums = [3, 2, 1, 5, 4, 6, 7])",
        "minimumSeconds(nums = [1,2,3,3,3,3,4,5,5,6])",
        "minimumSeconds(nums = [1,2,3,3,6,1,7,3,3,3])",
        "minimumSeconds(nums=[4,8,1,10,5,12,20,7,15,13,11,3])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 2, 2, 3])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 5])",
        "minOperations(nums = [3, 3, 2, 1, 3])",
        "minOperations(nums = [2,2,3,2])",
        "minOperations(nums = [3, 1, 1, 2])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [5, 2, 8, 3, 7, 5, 1, 2, 3, 7])",
        "minOperations(nums = [1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [6, 4, -7, 3, 1])",
        "alternatingSubarray(nums = [5, 6, 2, 7, 4, 0, 1, 8])",
        "alternatingSubarray(nums = [5, 3, 1, 2, 4, 3])",
        "alternatingSubarray(nums=[1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [-1, -1, -1, 0, 1])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 7, 8, 9, 11])",
        "alternatingSubarray(nums = [5, 6, 2, 4, 7, 8, 8, 10])",
        "alternatingSubarray(nums = [6, 4, -7, 1, -7, 1, -7, 1, -7, 1])",
        "alternatingSubarray(nums = [-1, 1, -1, 2, -1, 1, -1, 2, -1, 2, -1, 2])",
        "alternatingSubarray(nums = [6, 4, 2, 1, 3, 2, 2, 4, 2, 2, 4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 3, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 2, 3, 4, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 1, 5, 1, 6, 1, 7, 1])",
        "minLengthAfterRemovals(nums=[2, 3, 10, 2, 20, 1, 11, 20, 20, 20, 20, 1])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"apple\", \"mango\", \"papaya\", \"pineapple\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aaa\", \"aab\", \"aba\", \"baa\", \"abb\", \"bab\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"abc\", \"aba\", \"aba\", \"abc\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"computer\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"dog\", \"cat\", \"dog\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"da\", \"bd\", \"cb\"])",
        "maximumNumberOfStringPairs(words = [\"mom\", \"mommy\", \"mm\", \"m\", \"moom\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"baba\", \"aba\", \"xzxb\", \"ab\", \"zaba\", \"zxzxb\", \"aba\", \"xzxb\"])",
        "maximumNumberOfStringPairs(words = [\"c\", \"b\", \"a\", \"a\", \"c\", \"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"aa\", \"bbb\", \"cc\", \"bb\", \"b\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aac\")",
        "canMakeSubsequence(str1 = \"ae\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"axyz\", str2 = \"1234\")",
        "canMakeSubsequence(str1 = \"zebra\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"axby\", str2 = \"abyz\")",
        "canMakeSubsequence(str1 = \"bcdf\", str2 = \"acdfg\")",
        "canMakeSubsequence(str1 = \"aebcf\", str2 = \"beadgcf\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"abacabad\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"aabccbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabccbb\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"abaabaab\")",
        "longestSemiRepetitiveSubstring(s = \"abacab\")",
        "longestSemiRepetitiveSubstring(s=\"cabaabac\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbbcc\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 4, k = 3)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 2, k = 3)",
        "maxSum(nums = [1,12,-5,-6,50,3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 4, k = 3)",
        "maxSum(nums = [5,2,1,2,5,2,1,2,5], m = 3, k = 3)",
        "maxSum(nums = [1, 101, 2, 3, 100, 4, 5], m = 3, k = 4)",
        "maxSum(nums = [1,2,3,4,5,1,2,3,1,2,3], m = 3, k = 2)",
        "maxSum(nums = [9,1,2,4,3,5,7,2,5,6,7,9,5], m = 4, k = 3)",
        "maxSum(nums = [5,1,4,8,7,3,9,6,5,7,4], m = 3, k = 3)",
        "maxSum(nums=[7,2,1,5,3,4,6,8,1,2,5,3,2,4,6,1], m=3, k=2)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"grapes\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pineapple\"], x = \"a\")",
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\"], x = \"y\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"kiwi\", \"pineapple\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"panda\"], x = \"na\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"bcd\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"abd\"], x = \"a\")",
        "findWordsContaining(words = [\"peach\", \"kiwi\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"abcs\", \"bares\", \"car\", \"bike\", \"boat\"], x = \"ba\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1, 3, 2], moveFrom = [3], moveTo = [2])",
        "relocateMarbles(nums=[1,2,3,4,5,6,7], moveFrom=[3,4,5], moveTo=[6,7,8])",
        "relocateMarbles(nums = [1, 2, 1], moveFrom = [0,1], moveTo = [1,0])",
        "relocateMarbles(nums=[1,2,3,4,5],moveFrom=[1,2,3,4,5],moveTo=[2,3,4,5,1])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7], moveFrom = [1,2,5], moveTo = [4,6,3])",
        "relocateMarbles(nums = [1,2,1,2,2,1,1,2,2,2], moveFrom = [1,2,1,2,2], moveTo = [2,1,2,1,2])",
        "relocateMarbles(nums = [1, 3, 2, 4, 6, 5, 7, 8, 9, 10], moveFrom = [3, 7, 8, 9], moveTo = [4, 5, 6])",
        "relocateMarbles(nums = [0,1,2,3,4,5,6,7], moveFrom = [4,7,5,3,6,1,0,2], moveTo = [4,5,6,7,0,2,3,1])",
        "relocateMarbles(nums = [4, 3, 4, 5, 6, 4, 8, 5, 3, 3, 4, 2], moveFrom = [2, 3, 4, 5, 6, 7], moveTo = [3, 4, 5, 6, 7, 2])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [4, 2, 5, 3])",
        "maximumTripletValue(nums = [5, 1, 3, 5, 6])",
        "maximumTripletValue(nums = [3, 2, 6, 8, 2, 3])",
        "maximumTripletValue(nums = [0, 2, 3])",
        "maximumTripletValue(nums = [-2, 0, 3, -5, 2, -1])",
        "maximumTripletValue(nums = [-3, 0, 2, 4, 0])",
        "maximumTripletValue(nums = [3, 2, 5, 7, 11])",
        "maximumTripletValue(nums=[10, 12, 5, 2, 7])",
        "maximumTripletValue(nums=[10, 20, 5, 1, 8, 25])",
        "maximumTripletValue(nums = [3, 0, 1, -5, 4])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abacabad\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"aabb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaba\")",
        "longestSemiRepetitiveSubstring(s = \"abbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbcbbaaabab\")",
        "longestSemiRepetitiveSubstring(s = \"asdqweasdqweasdqweasdqwe\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"a\",\"aa\",\"aaa\",\"aaaa\"])",
        "maximumNumberOfStringPairs(words = [\"dog\", \"cat\", \"doggy\", \"catdog\"])",
        "maximumNumberOfStringPairs(words = [\"some\", \"word\", \"some\"])",
        "maximumNumberOfStringPairs(words = [\"apple\", \"elephant\", \"plea\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"bc\", \"bd\", \"cd\", \"da\", \"db\", \"dd\", \"eb\", \"ed\", \"fb\", \"fd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"xy\", \"cx\", \"by\", \"xo\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aaa\", \"aab\", \"acb\", \"bbc\", \"bbd\", \"bca\", \"bcb\"])",
        "maximumNumberOfStringPairs(words = [\"n\", \"o\", \"a\", \"o\", \"n\", \"a\", \"n\", \"n\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abd\", \"aba\", \"acb\", \"bac\", \"bca\", \"cba\", \"cbc\", \"ccc\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"mp\", \"mop\", \"mum\", \"otp\", \"opt\", \"pup\", \"pupu\", \"pop\", \"pupu\", \"mum\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [1, 2, 3]])",
        "matrixSum(nums=[[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 1, 1, 1], [1, 0, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "matrixSum(nums = [[1, 3, -1], [-2, -3, 4]])",
        "matrixSum(nums = [[2,1,5],[4,3,7]])",
        "matrixSum(nums = [[1, 4, 5], [2, 7, 10]])",
        "matrixSum(nums = [[1, 4, 7, 10, 10], [2, 5, 8, 11, 12], [3, 6, 9, 10, 10]])",
        "matrixSum(nums = [[2, 2, 3, 4], [1, 4, 2, 2], [5, 2, 6, 2], [3, 2, 1, 4]])",
        "matrixSum(nums = [[2, 6, 1, 4], [5, 3, 3, 5], [8, 8, 1, 3]])",
        "matrixSum(nums = [[7, 9, 1, 12], [4, 10, 5, 11], [3, 10, 6, 11]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"adcaa\", s3 = \"aadcc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"baba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"abca\", s2 = \"abca\", s3 = \"abca\")",
        "findMinimumOperations(s1 = \"waterbottle\", s2 = \"erbottlewat\", s3 = \"erbottlewat\")",
        "findMinimumOperations(s1 = \"abcbdab\", s2 = \"bdcaba\", s3 = \"cbadab\")",
        "findMinimumOperations(s1 = \"ABCDE\", s2 = \"BCDEF\", s3 = \"CDEFG\")",
        "findMinimumOperations(s1 = \"baaa\", s2 = \"ppp\", s3 = \"aaaa\")",
        "findMinimumOperations(s1 = \"mbbmm\", s2 = \"bmmm\", s3 = \"mmm\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"aa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"111\", s2 = \"111\", s3 = \"111\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cab\", s3 = \"cat\")",
        "findMinimumOperations(s1 = \"cabca\", s2 = \"abccba\", s3 = \"aabc\")"
    ],
    "sample_324": [
        "isFascinating(n = 1)",
        "isFascinating(n = 3)",
        "isFascinating(n = 5)",
        "isFascinating(n = 123)",
        "isFascinating(n = 12345678)",
        "isFascinating(n = 44)",
        "isFascinating(n = 100)",
        "isFascinating(n = 490)",
        "isFascinating(n = 732)",
        "isFascinating(n = 1901)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 8])",
        "minimumCoins(prices = [1,5,8,9,10])",
        "minimumCoins(prices = [1, 2, 4, 5])",
        "minimumCoins(prices = [1,3,4])",
        "minimumCoins(prices = [1,5,11,50,100,200,1000])",
        "minimumCoins(prices = [1, 2, 4, 7])",
        "minimumCoins(prices=[2, 3, 5])",
        "minimumCoins(prices = [2,3,4,2,3,3])"
    ],
    "sample_380": [
        "countPairs(nums = [1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1,1,2,2,3], target = 4)",
        "countPairs(nums = [1,2,3], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,0,2,1,0], target = 1)",
        "countPairs(nums = [2,7,11,15], target = 24)",
        "countPairs(nums = [1, 0, 1, 0, 1], target = 0)",
        "countPairs(nums = [1, 1, 2, 2, 3, 4, 5, 5], target = 7)",
        "countPairs(nums = [1, 2, 4, 4, 4], target = 8)",
        "countPairs(nums = [5,1,2,4,7,8,9], target = 12)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,3,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1,3,2,3,1])",
        "minGroupsForValidAssignment(nums = [3,3,6,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,4,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,1,3,3,2,1,2])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,4,4,6])",
        "minGroupsForValidAssignment(nums = [1,3,2,3,3,1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [6,6,6,6,6,12,12,12,24,36,36,36,36,36,36])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 4)",
        "countPairs(nums = [3, 5, 2, -4, 8, 11], target = 10)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 4, 2, 3, 0], target = 5)",
        "countPairs(nums = [1, 3, 5], target = 9)",
        "countPairs(nums = [5, 1, 3, 4, 2], target = 9)",
        "countPairs(nums = [2, 6, 10, 14], target = 16)",
        "countPairs(nums = [2,1,5,3,4,8,6,7,11], target = 10)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1,2,3,4], money = 6)",
        "buyChoco(prices = [2, 1, 4], money = 5)",
        "buyChoco(prices = [1, 2], money = 5)",
        "buyChoco(prices = [1,2,3,4], money = 3)",
        "buyChoco(prices=[1, 2, 4], money=5)",
        "buyChoco(prices = [1, 2, 4, 3], money = 6)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1, 3, 12, 9, 8], money = 11)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"ab\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"bc\", \"cd\", \"da\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ax\", \"bx\", \"ay\", \"by\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"dab\", \"bac\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ac\", \"bb\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"s\", \"a\", \"b\", \"aa\", \"ac\"])",
        "maximumNumberOfStringPairs(words = [\"la\", \"na\", \"da\", \"na\", \"l\"])",
        "maximumNumberOfStringPairs(words = [\"aaaa\", \"bb\", \"cc\", \"dd\", \"aa\", \"bb\", \"bb\", \"cc\", \"dd\", \"dd\", \"dd\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = 'Hello World')",
        "sortVowels(s = \"leOtcede\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = 'eCeDeLoT')",
        "sortVowels(s = 'LOOt')",
        "sortVowels(s = \"dEecEtiO\")",
        "sortVowels(s = \"The quick brown fox jumps over the lazy dog\")",
        "sortVowels(s = 'Heyyey, Baby!')"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 2, 3])",
        "sumCounts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "sumCounts(nums = [1,2,2,2,3])",
        "sumCounts(nums = [1,1,1])",
        "sumCounts(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3])",
        "sumCounts(nums = [2, 1, 5, 7, 2, 3, 5, 1, 7])",
        "sumCounts(nums = [3, 4, 4, 3, 4, 4, 3, 4, 4])",
        "sumCounts(nums = [1, 3, 5, 3, 6, 2, 3])",
        "sumCounts(nums = [5, 3, 7, 9, 2, 1, 4, 5, 3])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 5, 10, 25])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17])",
        "minimumCoins(prices = [1, 5, 8, 12])",
        "minimumCoins(prices = [1, 5, 10, 25, 100])",
        "minimumCoins(prices = [1, 5, 10, 10, 25, 100])",
        "minimumCoins(prices = [3, 4, 2, 9, 3])",
        "minimumCoins(prices = [2, 1, 3, 0, 4])",
        "minimumCoins(prices = [3, 1, 2, 2, 5, 0, 2])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 10, m = 4)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 7, m = 4)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n = 25, m = 3)"
    ],
    "sample_307": [
        "countSeniors(details = [\"1999-01-01\", \"2000-01-01\", \"1966-01-01\"])",
        "countSeniors(details = [\"joe1\", \"joe2\", \"joe3\", \"joe4\", \"joe5\", \"joe6\", \"joe7\", \"joe8\"])",
        "countSeniors(details = [\"1998\", \"1997\", \"1989\", \"1964\"])",
        "countSeniors(details = [\"2019-09-01\", \"2019-09-01\", \"2019-09-01\", \"2019-09-01\", \"2019-09-01\", \"2019-09-01\", \"2019-09-01\", \"2019-09-01\", \"2019-09-01\", \"2019-09-01\", \"2019-09-01\"])",
        "countSeniors(details = [\"1999-02-04\", \"1965-02-04\", \"1978-02-04\"])",
        "countSeniors(details = [\"1980-01-02\", \"1994-09-03\", \"1980-01-02\"])",
        "countSeniors(details = [\"Fred\", \"Amy\", \"John\", \"Anna\", \"Jason\"])",
        "countSeniors(details = [\"29-04-1980\", \"23-05-1965\", \"30-12-1985\"])",
        "countSeniors(details = [\"02/10/2003\", \"05/02/2007\", \"01/03/2002\"])",
        "countSeniors(details = [\"1971-05-15 11:30:00\", \"1975-01-01 11:30:00\", \"1975-01-01 11:30:00\"])"
    ],
    "sample_323": [
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 5)",
        "isFascinating(n = 12)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1)",
        "isFascinating(n = 12345)",
        "isFascinating(n = 50)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "minimumBeautifulSubstrings(s = \"10101\")",
        "minimumBeautifulSubstrings(s = \"10101\")",
        "minimumBeautifulSubstrings(s
        "minimumBeautifulSubstrings(s = \"110010100\")",
        "minimumBeautifulSubstrings(s = \"1100100000000000111\")",
        "minimumBeautifulSubstrings(s = \"111011011101111111111111111110101101101101101101111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"101111011000010111101111111001100100110010010111001100101101011010101110101001000100011110111101111100011101001011101100101100110101011000001011011011100101000000110100101011001001010101010110010010001000111101111011111000111010010111011001011001101010110010110101010110101010111001010101100100101010001110101100101101010000101010001110101100101101010000101010001110101100101101010000101010001110101100101101010000101010001110101100101101010000101010001110101100101101010000101010001110101100101101010000101010001110101100101101010000101010001110101100101101",
        "minimumBeautifulSubstrings(s = \"100111010110111100110001001001101110101110100100000101111011010011110001010100000101010110001110100011000011110100010110000010111000110111001110101111001101100000100110011101001001110111100001110100101011101001001010100010101000001010100000101011011010110001100011111010010000010110101000001011101011001010101100000101100011011111000011110001111011110011101011011010111100011111010010100100100110010110111100111101101110101100101111011001011000001010010111011101001001111010011110100101001001001111011101001001111010011110100101001001001111011101001001111010",
        "minimumBeautifulSubstrings(s
    ],
    "sample_463": [
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n=2, limit=1)"
    ],
    "sample_419": [
        "minOperations(nums = [2,3,1,1,3], k = 3)",
        "minOperations(nums = [2,3,1,1,3], k = 3)",
        "minOperations(nums = [5,5,4], k = 5)",
        "minOperations(nums = [3,4,9,6], k = 5)",
        "minOperations(nums = [1,4,2,5,7], k = 9)",
        "minOperations(nums = [1,1,1,1,1], k = 1)",
        "minOperations(nums = [1,2,3,2,1], k = 3)",
        "minOperations(nums = [5, 25, 75], k = 50)",
        "minOperations(nums = [3,3,3,3,5,5,5,5,2,2,7], k = 5)",
        "minOperations(nums = [1, 1, 2, 2, 2, 2], k = 3)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "sumCounts(nums = [1, 2, 3, 3])",
        "sumCounts(nums=[1, 2, 3, 4])",
        "sumCounts(nums = [2,2,2,2,2,2,2])",
        "sumCounts(nums=[1, 2, 1, 2])",
        "sumCounts(nums = [5, 5, 4, 2, 2, 2, 2, 1])",
        "sumCounts(nums = [1, 4, 3, 6, 3, 5])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"next\", \"2\", \"prev\", \"6\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"3\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"2\", \"prev\", \"4\", \"5\", \"prev\", \"6\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"c\", \"prev\", \"d\", \"e\", \"prev\", \"prev\", \"c\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"3\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"10\", \"2\", \"prev\", \"20\"])",
        "lastVisitedIntegers(words = [\"prev\", \"10\", \"next\", \"prev\", \"prev\", \"next\", \"20\", \"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1,2,3,4,5], k = 4)",
        "minOperations(nums = [2, 4, 9, 5], k = 5)",
        "minOperations(nums = [1, 2, 3], k = 3)",
        "minOperations(nums = [3,1,1,2,2,3], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 4], k = 4)",
        "minOperations(nums = [1, 1, 0, 0], k = 1)",
        "minOperations(nums = [3, 1, 1, 3, 5, 2], k = 5)",
        "minOperations(nums=[1, 3, 4, 2], k=2)",
        "minOperations(nums = [100, 100, 300, 200], k = 1)",
        "minOperations(nums = [1, 1, 2, 3, 2, 2, 3, 3, 4, 5, 6, 6, 7, 7], k = 8)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"bananas\")",
        "longestSemiRepetitiveSubstring(s = \"ababb\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbac\")",
        "longestSemiRepetitiveSubstring(s = \"baaaac\")",
        "longestSemiRepetitiveSubstring(s = \"abcabca\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaxyz\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 3, 2, 1])",
        "sumCounts(nums = [2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 3])",
        "sumCounts(nums=[1, 2, 3, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 6, 6, 6])",
        "sumCounts(nums = [1, 1, 2, 3, 3, 4, 4, 5, 5])",
        "sumCounts(nums = [1,2,2,2,3,4,5,6,7])",
        "sumCounts(nums = [1, 3, 3, 4, 5, 5, 6, 8, 8, 8, 8])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"011011\", k = 2)",
        "shortestBeautifulSubstring(s = \"01100\", k = 2)",
        "shortestBeautifulSubstring(s = '1001', k = 2)",
        "shortestBeautifulSubstring(s = \"01101001\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011000\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110110\", k = 3)",
        "shortestBeautifulSubstring(s = \"01101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"11010001101101001\", k = 3)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"010110\")",
        "minimumBeautifulSubstrings(s
        "minimumBeautifulSubstrings(s
        "minimumBeautifulSubstrings(s = \"22222222\")",
        "minimumBeautifulSubstrings(s = \"321\")",
        "minimumBeautifulSubstrings(s = \"471\")",
        "minimumBeautifulSubstrings(s = \"204111\")",
        "minimumBeautifulSubstrings(s = \"25217\")",
        "minimumBeautifulSubstrings(s = \"0111100000111111111000000111111111110000000000000000000000001111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumBeautifulSubstrings(s
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 4, y = 5, z = 6)",
        "longestString(x = 2, y = 4, z = 6)",
        "longestString(x = 2, y = 5, z = 1)",
        "longestString(x = 4, y = 3, z = 6)",
        "longestString(x = 7, y = 4, z = 5)",
        "longestString(x = 6, y = 3, z = 10)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, -1, 0], [-1, 0, -1], [0, -1, 0]])",
        "findChampion(grid = [[1,1,0], [0,0,1], [1,0,0]])",
        "findChampion(grid = [[1, 0, 0], [2, 2, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 0, 1, 0], [1, 1, 0, 1], [0, 1, 1, 1]])",
        "findChampion(grid=[[1, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 2, 1], [2, 1, 0, 0, 0], [0, 1, 0, 0, 1], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[3, 1, 0, 3], [2, 1, 3, 3], [2, 1, 3, 1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"bbbaacdafe\", k = 3)",
        "beautifulSubstrings(s = \"abbba\", k = 3)",
        "beautifulSubstrings(s = \"aebcbda\", k = 3)",
        "beautifulSubstrings(s = \"aeeeoou\", k = 4)",
        "beautifulSubstrings(s = \"abdcaba\", k = 3)",
        "beautifulSubstrings(s = \"bbbaaabaaaaababaabaaabaaaabaa\", k = 2)"
    ],
    "sample_304": [
        "countSeniors(details = [\"<NAME> 1996\", \"<NAME> 1993\", \"<NAME> 1975\"])",
        "countSeniors(details = [\"60\", \"80\", \"60\", \"70\", \"100\"])",
        "countSeniors(details = [\"<NAME> 1993-12-03\", \"<NAME> 1991-09-03\"])",
        "countSeniors(details = [\"17/02/2017\", \"31/07/2017\", \"01/08/2017\"])",
        "countSeniors(details = [\"name age\", \"tom 29\", \"john 45\", \"mike 62\"])",
        "countSeniors(details = [\"(901) 2323232\", \"(101) 2323232\"])",
        "countSeniors(details = [\"<NAME> 20 7 600000\", \"<NAME> 21 3 40000\"])",
        "countSeniors(details = [\"1982-07-02 <NAME>\", \"1991-09-24 <NAME>\", \"2002-01-01 <NAME>\"])",
        "countSeniors(details = [\"mrs jenny 21\", \"mr nicholas 15\"])",
        "countSeniors(details = [\"S0001:18:35:07:787:787:31:7:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:7:1:787:"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [-3, -5, -8, -4, -10])",
        "maximumTripletValue(nums = [-2,0,1,3])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maximumTripletValue(nums = [0, 1, 2, 3])",
        "maximumTripletValue(nums = [3, 1, 2])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "maximumTripletValue(nums = [100, 4, 200, 1, 3, 2])",
        "maximumTripletValue(nums=[-2,0,1,3,4])",
        "maximumTripletValue(nums = [-78, -78, -78, 12, -35])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"10101\")",
        "minimumBeautifulSubstrings(s = \"011101\")",
        "minimumBeautifulSubstrings(s = \"2020\")",
        "minimumBeautifulSubstrings(s = \"cba\")",
        "minimumBeautifulSubstrings(s = \"leetcode\")",
        "minimumBeautifulSubstrings(s = \"0110101\")",
        "minimumBeautifulSubstrings(s = \"bb\")",
        "minimumBeautifulSubstrings(s = \"201003\")",
        "minimumBeautifulSubstrings(s = \"100110011001100110011001\")",
        "minimumBeautifulSubstrings(s = \"475123124\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [2, 4, 6, 2, 5])",
        "maxSubarrays(nums=[1,1,1])",
        "maxSubarrays(nums = [1,0,1,1,1,0,1,0,1])",
        "maxSubarrays(nums = [8,0,1,4,7,3,1,4,2,6])",
        "maxSubarrays(nums = [3, 3, 3, 3, 3, 3, 3, 3])",
        "maxSubarrays(nums = [8, 0, 6, 2, 2, 6, 4, 0, 8, 4])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [2, 1, 3])",
        "minOperations(a = [1, 1, 1, 1], b = [2, 2, 3, 3])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [4, 3, 2, 1, 5])",
        "minOperations(a = [1, 2, 3, 4, 5, 6], b = [4, 4, 4, 4, 4, 4])",
        "minOperations(a = [2, 3, 4, 5, 6, 7], b = [2, 3, 4, 5, 6, 7])",
        "minOperations(a = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], b = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minOperations(a = [2, 5, 8], b = [4, 4, 10])",
        "minOperations(a = [5, 3, 2, 4, 1], b = [2, 3, 4, 5, 1])",
        "minOperations(a = [1, 5, 3, 7, 4], b = [2, 6, 4, 7, 5])",
        "minOperations(a = [5,1,10,3], b = [5,4,10,2])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"aa\", \"bb\", \"cc\"])",
        "minimizeConcatenatedLength(words=[\"banana\", \"apple\", \"orange\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"a\", \"xyz\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"cats\", \"catsdogcats\", \"dog\", \"dogcatsdog\", \"hippopotamuses\", \"rat\", \"ratcatdogcat\"])",
        "minimizeConcatenatedLength(words = [\"m\", \"q\", \"n\", \"z\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cdef\", \"de\"])",
        "minimizeConcatenatedLength(words = [\"qwerty\", \"asdfgh\", \"zxcvbn\"])",
        "minimizeConcatenatedLength(words = [\"zyx\", \"xxx\", \"mp\", \"ap\", \"aa\"])",
        "minimizeConcatenatedLength(words=[\"tiger\", \"dino\", \"bison\", \"cactus\"])",
        "minimizeConcatenatedLength(words = [\"mzr\", \"nnf\", \"bxb\", \"sgt\", \"fjy\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"HympHyl\")",
        "sortVowels(s = 'hello')",
        "sortVowels(s = 'Why?')",
        "sortVowels(s = \"Hello, World!\")",
        "sortVowels(s = \"YimPho\")",
        "sortVowels(s = 'PhoBic')",
        "sortVowels(s = 'Oh My')",
        "sortVowels(s = \"My Phymn\")",
        "sortVowels(s = \"IrghNys\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts(nums = [1,2,3,4,5,6])",
        "sumCounts(nums = [2, 4, 6, 8])",
        "sumCounts(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "sumCounts(nums = [3, 4, 5, 2, 6, 7])",
        "sumCounts(nums = [1, 2, 2, 2, 1, 2, 2, 1, 2])"
    ],
    "sample_256": [
        "minimumSum(nums = [3, 1, 2, 4, 3])",
        "minimumSum(nums = [1, 3, 5, 4, 2])",
        "minimumSum(nums = [3, 2, 1, 1])",
        "minimumSum(nums = [1, 5, 3, 9])",
        "minimumSum(nums = [1, 1, 3, 2, 3])",
        "minimumSum(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "minimumSum(nums = [6, 8, 2, 3, 1, 9])",
        "minimumSum(nums = [2, 4, 6, 1, 5, 3, 8, 7, 9])",
        "minimumSum(nums = [2,3,1,4,2,6,3,8,4,4])",
        "minimumSum(nums=[-8, 0, 6, 5, -12, 10])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[1,0,0], [0,1,0], [0,0,1]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1,0,0,0],[0,1,0,0],[0,0,1,1],[1,0,0,0]])",
        "findChampion(grid = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 0, 0, 0], [1, 1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 1, 0, 0], [1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 1, 0]])"
    ],
    "sample_372": [
        "sortVowels(s = 'Hello World!')",
        "sortVowels(s = \"hello\")",
        "sortVowels('EOtcede')",
        "sortVowels(s = 'eLtOtcde')",
        "sortVowels(s = 'EtcedeoL')",
        "sortVowels(s = \"adieu\")",
        "sortVowels(s = 'bEaRuRe')",
        "sortVowels(s = 'Telescopes')",
        "sortVowels(s = 'AbCdEfG')",
        "sortVowels(s = 'oOcoeoTcede')"
    ],
    "sample_292": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"10011\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"110001\")",
        "minimumSteps(s = \"101011\")",
        "minimumSteps(s = \"0101000\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [3, 8, 9, 7, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [5, 1, 7, 2, 3, 6, 4])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [4, 3, 7, 8, 6, 2, 1, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 5, 6, 8, 10, 11, 12])",
        "minimumRightShifts(nums=[4, 3, 7, 8, 1, 2, 5, 6, 10, 9])",
        "minimumRightShifts(nums = [3, 8, 2, 9, 7, 1, 6, 4, 5])",
        "minimumRightShifts(nums=[3, 5, 7, 10, 14, 15, 16, 25, 30, 40])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [3,3,6,6,6,6])",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minOperations(nums = [3,3,3,3,3])",
        "minOperations(nums = [1, 2, 2, 3, 4, 4, 5, 6])",
        "minOperations(nums = [3,3,6,1,3])",
        "minOperations(nums = [5,5,5,5,5,5,5,5])",
        "minOperations(nums = [2, 4, 9])",
        "minOperations(nums = [4, 4, 6, 2, 3, 1, 4, 2])",
        "minOperations(nums = [4,1,1,1,1,1,1])"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = 'HelLo')",
        "sortVowels(s = \"hYmple\")",
        "sortVowels(s = 'PythOn')",
        "sortVowels(s = \"phLymp\")",
        "sortVowels(s = \"Pittsburgh\")",
        "sortVowels(s='Mikle')",
        "sortVowels(s = \"SObvAly\"))",
        "sortVowels(s = 'What a Brilliant Little Duck')"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1], [0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1,1,1],[1,1,1],[1,1,1]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1,0,0], [0,1,0], [0,0,0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 1, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0,0,1,0],[0,1,0,1],[0,0,1,0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0], nums2 = [1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4, 5, 6])",
        "minSum(nums1 = [1, 2, 4], nums2 = [1, 3, 5])",
        "minSum(nums1 = [1, 2, 4], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 10], nums2 = [2, 3, 4, 5, 6, 7])",
        "minSum(nums1 = [1, 4, 5, 20], nums2 = [0, 2, 3, 10])",
        "minSum(nums1 = [3, -2, 1, 0], nums2 = [-1, -2, 1, 1])",
        "minSum(nums1 = [4, 2, 5, 7, 9], nums2 = [2, 4, 9, 2, 1, 10])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 2, 1, 1, 3], k = 2)",
        "minOperations(nums = [1,1,1,1,1], k = 2)",
        "minOperations(nums = [1,1,1,1,1], k = 2)",
        "minOperations(nums = [2, 2, 2, 2], k = 2)",
        "minOperations(nums = [1, 4, 5, 6], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 6], k = 3)",
        "minOperations(nums = [1, 2, 1, 1, 1, 1, 1, 1], k = 3)",
        "minOperations(nums = [5, 1, 4, 2, 3, 2, 1], k = 2)",
        "minOperations(nums = [1,2,4,5,6,7,8,9,10,11,12,15], k = 3)",
        "minOperations(nums = [5, 3, 1, 2, 4, 5, 4], k = 4)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4], moveFrom = [0, 1], moveTo = [4, 5])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5], moveFrom = [0, 1], moveTo = [5, 6])",
        "relocateMarbles(nums = [0, 1, 3, 4, 10], moveFrom = [3, 10], moveTo = [0, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [3, 2, 4], moveTo = [4, 1, 3])",
        "relocateMarbles(nums = [1, 3, 5, 7, 8], moveFrom = [4, 8], moveTo = [4])",
        "relocateMarbles(nums = [1, 2, 3, 5, 4], moveFrom = [1, 3, 5], moveTo = [1, 2, 5])",
        "relocateMarbles(nums = [1, 3, 5, 7], moveFrom = [3, 7, 4], moveTo = [6, 5])",
        "relocateMarbles(nums = [0, 1, 5, 3, 2], moveFrom = [2, 3], moveTo = [0, 2])",
        "relocateMarbles(nums = [1, 3, 5, 7, 9, 10, 11, 12, 15], moveFrom = [1, 11, 12], moveTo = [2, 5])"
    ],
    "sample_402": [
        "maxSum(nums = [9, 1, 2, 3, 9], m = 3, k = 3)",
        "maxSum(nums = [1, 12, -5, -6, 50, 3], m = 2, k = 4)",
        "maxSum(nums = [1, -1, 5, -2, 3], m = 2, k = 3)",
        "maxSum(nums = [1,4,2,10,2,3,1,0,20], m = 4, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 4)",
        "maxSum(nums=[2, 4, 6, 2, 5], m=2, k=4)",
        "maxSum(nums = [2, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums=[1, 2, 3, 2, 1], m=3, k=2)",
        "maxSum(nums = [7, 4, 6, 2, 1, 8, 9], m = 2, k = 4)",
        "maxSum(nums = [1,1,3,2,1,3,3,4,5], m = 3, k = 4)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"azced\", s2 = \"ace\")",
        "canMakeSubsequence(s1 = \"ac\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"baxyz\", s2 = \"abyz\")",
        "canMakeSubsequence(s1 = \"axy\", s2 = \"xbaz\")",
        "canMakeSubsequence(s1 = \"axy\", s2 = \"xbaz\")",
        "canMakeSubsequence(s1 = \"zyx\", s2 = \"xzy\")"
    ],
    "sample_270": [
        "minSum(nums1 = [0, 0], nums2 = [0, 0])",
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [0, 1], nums2 = [0])",
        "minSum(nums1 = [1, 4, 5], nums2 = [7, 5, 0])",
        "minSum(nums1 = [0, 2], nums2 = [3, 0])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 2, 3, 4, 5, 6, 0])",
        "minSum(nums1 = [0, 0], nums2 = [0, 2, 4])",
        "minSum(nums1 = [3, 4, 5, 0], nums2 = [99, 98, 97, 96, 95])",
        "minSum(nums1 = [0, 1, 1, 0, 0, 0, 1, 1, 1], nums2 = [0, 1, 0, 1, 1, 1])",
        "minSum(nums1 = [0, 3, 4, 0, 3, 1, 2, 2, 3], nums2 = [4, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"3\", \"1\", \"prev\", \"5\", \"prev\", \"4\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = ['push', 'prev', 'push', 'push', 'prev', 'push', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"next\", \"next\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = ['prev', '1', 'next', '3', 'next', '2'])",
        "lastVisitedIntegers(words = ['prev', '3', '9', 'prev', '2', 'prev', '6'])",
        "lastVisitedIntegers(words = [\"7\", \"1\", \"prev\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"5\", \"6\", \"prev\", \"1\", \"2\", \"3\"])",
        "lastVisitedIntegers(words=[\"prev\", \"6\", \"6\", \"1\", \"prev\", \"1\", \"prev\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [4, 3, 2, 1])",
        "isGood(nums = [4, 5, 6, 1, 2, 3])",
        "isGood(nums = [3, 5, 7])",
        "isGood(nums = [1, 3, 5, 6, 7, 9])",
        "isGood(nums = [2, 3, 6, 1])",
        "isGood(nums = [4, 5, 6, 2, 1])"
    ],
    "sample_424": [
        "minOperations(nums = [2,2,3,2])",
        "minOperations(nums = [2,2,3,2])",
        "minOperations(nums = [2,2,3,2])",
        "minOperations(nums = [2,2,3,2])",
        "minOperations(nums = [3,3,6,7])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [2,2,2,3,3,3,4,4,4,5,5,5])",
        "minOperations(nums = [1,1,1,2,3,3])",
        "minOperations(nums=[3,2,3,4,2])",
        "minOperations(nums = [5,2,3,5,6,7,7])"
    ],
    "sample_451": [
        "minChanges(s = \"aabaac\")",
        "minChanges(s = \"cabca\")",
        "minChanges(s = \"zzyyxx\")",
        "minChanges(s = \"aaab\")",
        "minChanges(s = \"acca\")",
        "minChanges(s = \"caaabc\")",
        "minChanges(s = \"ccabba\")",
        "minChanges(s = \"nnnnnppp\")",
        "minChanges(s = \"aabacbebebe\")",
        "minChanges(s = \"ybcb\")"
    ],
    "sample_461": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 6, limit = 4)",
        "distributeCandies(n = 12, limit = 3)",
        "distributeCandies(n = 20, limit = 5)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [0, 0, 1, 1], nums2 = [1, 0, 1, 0])",
        "minSum(nums1 = [0,2,2,0], nums2 = [1,2,0])",
        "minSum(nums1 = [1,2,3,0,0], nums2 = [1,1,1])",
        "minSum(nums1 = [1,0,0,0,0], nums2 = [0,0,0,0,0])",
        "minSum(nums1 = [1,0,0], nums2 = [1,1,1])",
        "minSum(nums1=[1, 2, 4], nums2=[3, 6, 0])",
        "minSum(nums1 = [0,0,0,0,1,1,1,2,2], nums2 = [0,0,0,1,1,1,1,2,2])",
        "minSum(nums1 = [1, 0, 0, 0, 1, 1, 0, 1, 1, 1], nums2 = [1, 1, 0, 1, 0, 1, 1, 0, 1, 1])",
        "minSum(nums1=[1,0,0,0], nums2=[0,0,0,0])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [3, 8, -10, 23, 19, -4, -14, 27])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [3,8,9,7,6])",
        "minimumRightShifts(nums = [3, 5, 1, 2, 4, 6])",
        "minimumRightShifts(nums = [4, 3, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 3])",
        "minimumRightShifts(nums = [5, 2, 7, 8, 3])",
        "minimumRightShifts(nums = [1, 2, 5, 3, 2, 2, 2])"
    ],
    "sample_381": [
        "countPairs(nums = [3, 1, 4, 1, 5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4], t = 6)",
        "countPairs(nums = [1, 1, 1], t = 2)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [7, 4], t = 10)",
        "countPairs(nums=[-1, 0, 1, 2, -1, -4], t=0)",
        "countPairs(nums = [1,3,2,2], t = 5)",
        "countPairs(nums = [1,1,1,1], t = 2)",
        "countPairs(nums = [1,4,2,3], t = 5)",
        "countPairs(nums=[-1, 0, 1, 2, -1, -4], t=2)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"pop\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"push\", \"pop\", \"push\", \"push\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"pop\", \"push\", \"2\", \"push\", \"3\", \"pop\", \"push\", \"4\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = ['p2', 'p1', 'p0', 'p1', 'p2', 'p2'])",
        "lastVisitedIntegers(words = [\"p1\", \"p0\", \"p-1\", \"p0\", \"p-1\", \"p1\", \"p2\"])",
        "lastVisitedIntegers(words = ['push', 'pushed', 'push', 'pushed', 'pop', 'pop', 'pop'])",
        "lastVisitedIntegers(words=[\"p\", \"p\", \"w\", \"p\", \"p\", \"p\", \"p\", \"r\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"p0\", \"a0\", \"b1\", \"p2\", \"a1\", \"c2\"])",
        "lastVisitedIntegers(words = [\"py\", \"e\", \"g\", \"h\", \"z\", \"u\", \"p\", \"e\", \"f\", \"a\", \"n\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"zzz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"banana\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"axyz\", str2 = \"abyz\")",
        "canMakeSubsequence(str1 = \"zzz\", str2 = \"zaba\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ea\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"zbananaz\")",
        "canMakeSubsequence(str1 = \"apple\", str2 = \"abazdbec\")"
    ],
    "sample_268": [
        "minSum(nums1 = [0, 2, 1, 0], nums2 = [3, 4, 5, 2])",
        "minSum(nums1 = [1, 2, 0], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [0, 0, 0, 0, 0], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [0, 0, 0, 0, 0], nums2 = [0, 0, 0, 0, 0])",
        "minSum(nums1 = [0, 0], nums2 = [0, 0])",
        "minSum(nums1 = [1, 2, 3, 4, 0], nums2 = [0, 0, 0, 0, 5])",
        "minSum(nums1 = [0,2,3,0], nums2 = [1,2,3])",
        "minSum(nums1 = [1, 2, 3, 4, 0, 0], nums2 = [0, 0, 5, 6, 7, 0])",
        "minSum(nums1 = [3, 0, 2, 5, 0], nums2 = [0, 0, 0, 0, 0])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 1], [1, 2]], k = 1)",
        "countPairs(coordinates = [[0, 1], [1, 2], [2, 3], [3, 4]], k = 3)",
        "countPairs(coordinates = [[0, 0], [1, 1]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4]], k = 1)",
        "countPairs(coordinates=[[0, 0], [1, 1], [2, 2], [3, 3]], k=1)",
        "countPairs(coordinates = [[0, 1], [1, 1], [1, 0]], k = 0)",
        "countPairs(coordinates = [[1,3],[2,3]], k = 1)",
        "countPairs(coordinates = [[0, 1], [0, 2], [1, 1]], k = 1)",
        "countPairs(coordinates = [[2,1],[2,1]], k = 1)",
        "countPairs(coordinates = [[3, 4], [0, 2], [1, 4], [0, 3], [3, 3], [0, 4], [1, 0]], k = 2)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"zebra\", \"dog\", \"duck\", \"dove\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"aa\", \"bb\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"ab\", \"ba\", \"aa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"man\", \"banana\", \"orange\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"aba\", \"a\", \"az\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyx\", \"yxx\", \"zzy\"])",
        "maximumNumberOfStringPairs(words = [\"l\", \"on\", \"ly\", \"lo\", \"ol\", \"oo\", \"ll\"])",
        "maximumNumberOfStringPairs(words = [\"zbc\",\"zbf\",\"zbi\",\"zbk\",\"zbn\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [-2, -1, 0, 1, 2])",
        "maxStrength(nums = [6, -3, -1, -3, 7, 1])",
        "maxStrength(nums = [1, -2, -3, 4, 5])",
        "maxStrength(nums=[-1, 2, -3, 4, -5])",
        "maxStrength(nums = [2, 3, -2, -4, 6])",
        "maxStrength(nums = [4, 3, 2, 1, 5])",
        "maxStrength(nums=[3, 3, 1, -2, -4, 5, 6])",
        "maxStrength(nums = [-6, 6, -3, -10, -4, -1, -2])",
        "maxStrength(nums = [-5, 4, -2, 0, 2, -1, 1, 6])",
        "maxStrength(nums = [-1, -2, 0, -1, 0, 1, 0, 1, 0, 1, 0, 1, -2, -2, 0, 1, 1, 0, 0, -1])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 5, 8, 9, 10, 17, 17, 20])",
        "minimumCoins(prices = [1, 2, 4])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100, 200])",
        "minimumCoins(prices = [1, 3, 4, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 2])",
        "minimumCoins(prices = [1, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 4, 10, 2])",
        "minimumCoins(prices = [1, 3, 4])",
        "minimumCoins(prices = [3, 1, 1, 5])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [3, 2, 1])",
        "minLengthAfterRemovals(nums = [3, 2, 3, 3, 5, 4])",
        "minLengthAfterRemovals(nums = [4, 4, 3, 1])",
        "minLengthAfterRemovals(nums = [2, 3, 3, 3, 1, 2, 1])",
        "minLengthAfterRemovals(nums = [5, 3, 3, 5])",
        "minLengthAfterRemovals(nums = [6, 3, 8, 4, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 4, 3, 2, 3, 4, 5, 2, 3])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [3, 5], money = 7)",
        "buyChoco(prices = [1, 3, 4, 2], money = 6)",
        "buyChoco(prices = [1, 5, 10, 25], money = 6)",
        "buyChoco(prices = [4, 3, 2, 5], money = 11)",
        "buyChoco(prices = [3, 6, 1], money = 6)",
        "buyChoco(prices = [20, 30, 10], money = 20)",
        "buyChoco(prices = [5, 10, 3, 8], money = 20)",
        "buyChoco(prices = [10, 5, 10, 10, 10, 10], money = 50)",
        "buyChoco(prices = [15, 10, 6, 1], money = 34)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"1\", \"prev\", \"5\", \"prev\", \"4\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"2\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push\", \"prev\", \"push\", \"push\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"3\", \"prev\", \"6\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"4\", \"prev\", \"2\", \"3\", \"4\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"3\", \"5\", \"1\", \"prev\", \"1\", \"1\", \"prev\", \"2\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums=[1, 2, 3, 4, 5])",
        "sumCounts(nums = [0, 1, 2, 3])",
        "sumCounts(nums = [1, 3, 2])",
        "sumCounts(nums = [1, 1, 2, 3, 3, 3])",
        "sumCounts(nums = [5, 1, 3, 4, 5])",
        "sumCounts(nums = [4, 3, 2, 1, 2, 3])",
        "sumCounts(nums=[1, 3, 6, 7, 8, 9, 10])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 6], moveTo = [9, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 3], moveTo = [2, 7])",
        "relocateMarbles(nums = [1, 4, 5, 6, 7, 8, 9], moveFrom = [4, 6], moveTo = [5, 7])",
        "relocateMarbles(nums = [3, 5, 6, 8, 9], moveFrom = [5, 6], moveTo = [6, 8])",
        "relocateMarbles(nums = [3, 4, 5, 6, 7, 8, 9], moveFrom = [6, 7], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 4, 5, 7, 8, 9], moveFrom = [1, 4, 7], moveTo = [9, 8, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9, 10], moveFrom = [3, 4], moveTo = [4, 6])",
        "relocateMarbles(nums = [3, 7, 9], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [2, 6], moveTo = [3, 4])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"geeksforgeeks\", str2 = \"geeks\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"zba\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"aa\", str2 = \"zz\")",
        "canMakeSubsequence(str1 = \"adcd\", str2 = \"abde\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"mq\", \"px\", \"zy\"], x = \"z\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"ba\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"bananas\"], x = \"banan\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pinapple\", \"pineapple\"], x = \"p\")",
        "findWordsContaining(words = [\"a\", \"b\", \"cat\", \"c\"], x = \"a\")",
        "findWordsContaining(words = [\"spaghetti\", \"rice\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"asdf\", \"bn\", \"c\"], x = \"c\")",
        "findWordsContaining(words = [\"coyote\", \"river\", \"snake\"], x = \"o\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]])",
        "matrixSum(nums = [[1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1]])",
        "matrixSum(nums = [[0, 0, 1], [0, 1, 1], [1, 1, 1]])",
        "matrixSum(nums = [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])",
        "matrixSum(nums = [[2,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[2, 1, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,0,2],[3,0,5]])",
        "matrixSum(nums = [[1, 0, 1, 0], [0, 0, 1, 1], [0, 0, 1, 0], [1, 0, 1, 0]])",
        "matrixSum(nums = [[4, 3, 4, 4], [4, 3, 4, 4], [0, 2, 2, 2], [5, 3, 3, 3]])",
        "matrixSum(nums = [[3, 1, 7, 8], [9, 4, 5, 2], [2, 3, 1, 9]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 5)",
        "buyChoco(a = [1, 3], money = 4)",
        "buyChoco(a = [1, 1], money = 2)",
        "buyChoco(a = [1, 1], money = 4)",
        "buyChoco(a = [1, 5], money = 2)",
        "buyChoco(a = [3, 10], money = 10)",
        "buyChoco(a = [1,2,3], money = 8)",
        "buyChoco(a = [2, 4, 3], money = 11)",
        "buyChoco(a = [7, 1, 3, 2], money = 9)",
        "buyChoco(a = [20, 30, 25], money = 70)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3, 3, 6, 3, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 6, 3, 3])",
        "minGroupsForValidAssignment(nums = [4, 3, 2])",
        "minGroupsForValidAssignment(nums = [3, 1, 3, 3, 3, 2])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1])",
        "minGroupsForValidAssignment(nums=[2, 3, 4, 3, 2, 3, 6])",
        "minGroupsForValidAssignment(nums = [3, 1, 3, 3, 3, 1, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [23,12,35,48,55,23])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 2, 1, 3])",
        "minimumRightShifts(nums = [4, 3, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 2, 1, 5, 6])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [1, 5, 3, 6, 2])",
        "minimumRightShifts(nums = [3, 4, 3, 1, 2])",
        "minimumRightShifts(nums = [5, 7, 9, 11, 12, 14, 15])",
        "minimumRightShifts(nums = [1, 1, 0, 3, 0])",
        "minimumRightShifts(nums = [3, 6, 2, 4, 8, 1, 5])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength(nums = [1, 2, 3])",
        "maxStrength(nums = [1, 3, 2])",
        "maxStrength(nums = [1,2,3,4,5,6,7,8])",
        "maxStrength(nums = [1, 3, 5, 7])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_464": [
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 4, limit = 4)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 20, limit = 10)",
        "distributeCandies(n=3, limit=4)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 3, 2, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 1, 3, 3, 3, 3, 2, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 3, 5, 1, 1, 1, 2, 3, 2, 1])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"banana\", \"orange\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"monkey\"], x = \"na\")",
        "findWordsContaining(words = [\"banana\", \"zoo\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pineapple\", \"mango\"], x = \"p\")",
        "findWordsContaining(words = [\"python\", \"programming\"], x = \"p\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"man\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"bxc\", \"axc\"], x = \"xc\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grapes\", \"pineapple\", \"pineapples\", \"papaya\"], x = \"p\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"ferret\", \"robe\", \"kitten\"], x = \"r\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1,1,1,1,1,1,1], [1,1,1,1,1,1,1], [1,1,1,1,1,1,1], [1,1,1,1,1,1,1], [1,1,1,1,1,1,1], [1,1,1,1,1,1,1], [1,1,1,1,1,1,1]])",
        "findChampion(grid = [\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0]\n])",
        "findChampion(grid = [\n    [0, 0, 1],\n    [0, 1, 1],\n    [1, 0, 0],\n])",
        "findChampion(grid = [[1, 0, 0, 1, 0], [1, 0, 1, 0, 0], [1, 0, 1, 1, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1,0,1,0,1])",
        "maxSubarrays(nums = [1,0,1,0,1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1,0,1,1,1])",
        "maxSubarrays(nums = [1,1,1,0,1,1,1,1])",
        "maxSubarrays(nums = [1,1,2,1,1,1,1,1,1])",
        "maxSubarrays(nums = [1,2,2,3,4,5])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,2,4,7,8,10])",
        "minimumSeconds(nums = [3,2,2,4,2])",
        "minimumSeconds(nums = [5, 2, 10, 3])",
        "minimumSeconds(nums = [2, 3, 4, 7, 10, 11, 12])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 3])",
        "minimumSeconds(nums = [2, 4, 3, 1, 5, 3])",
        "minimumSeconds(nums=[1,1,2,2,4,5,6,6])",
        "minimumSeconds(nums = [9, 10, 7, 10, 10, 7])",
        "minimumSeconds(nums=[2, 5, 3, 7, 6, 4])",
        "minimumSeconds(nums = [4, 6, 10, 8, 15, 12, 18, 11, 17])"
    ],
    "sample_327": [
        "isFascinating(n = 3)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 123)",
        "isFascinating(n = 13)",
        "isFascinating(n = 987)",
        "isFascinating(n=12345)",
        "isFascinating(n=12345)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 5)",
        "lengthOfLongestSubsequence(nums = [3,5,6,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [5,7,7,8,8,10], target = 16)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 1)",
        "lengthOfLongestSubsequence(nums = [10,9,2,5,3,7,101,18], target = 20)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 3)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 2], target = 5)",
        "lengthOfLongestSubsequence(nums = [5, 3, 9, 2, 7, 8], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,7,3,1,4,6,9,8,5], target = 5)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1,2],[3,4],[5,6]])",
        "matrixSum(nums = [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])",
        "matrixSum(nums = [[2, 1], [3, 4], [1, 3]])",
        "matrixSum(nums = [[1, 2], [1, 2], [3, 1]])",
        "matrixSum(nums = [[0, -1], [1, 0], [1, 1]])",
        "matrixSum(nums = [[2, 7, 4], [5, 6, 8], [3, 2, 4]])",
        "matrixSum(nums = [\n    [3, 7, 8],\n    [4, 5, 6],\n    [1, 2, 3]\n])",
        "matrixSum(nums = [[1, 2, 4], [4, 4, 5], [6, 8, 4]])",
        "matrixSum(nums = [[5, 1, 3, 5], [6, 8, 1, 3], [7, 1, 3, 1]])"
    ],
    "sample_326": [
        "isFascinating(n = 5)",
        "isFascinating(n = 4)",
        "isFascinating(n = 7)",
        "isFascinating(n = 9)",
        "isFascinating(n = 6)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 35)",
        "isFascinating(n = 2399)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid=[[0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 1, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 1, 1], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 0, 1], [0, 1, 0, 0, 1], [0, 1, 0, 0, 1], [0, 1, 1, 0, 1], [0, 1, 0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1, 1, 0], [1, 1, 1, 1, 1], [0, 0, 1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1, 2], [0, 0, 2, 2], [1, 0, 1, 0], [1, 0, 1, 0]])",
        "findChampion(grid = [[1, 1, 0, 1],\n                            [0, 1, 1, 1],\n                            [0, 1, 0, 0],\n                            [0, 1, 1, 1]])",
        "findChampion(grid=[[1, 1, 0, 1, 1], [1, 0, 1, 0, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0, 1, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [3, 1, 2, 4, 3])",
        "minimumSum(nums = [1, 3, 2, 5])",
        "minimumSum(nums = [-1, 1, -6, 4, 5])",
        "minimumSum(nums = [-2, -1, -3])",
        "minimumSum(nums = [9, 1, 8, 2, 7, 3, 6, 4, 5])",
        "minimumSum(nums = [1, 2, 5, 3, 8, 6])",
        "minimumSum(nums = [7, 1, 2, 6])",
        "minimumSum(nums=[1,3,8,9])",
        "minimumSum(nums=[2, 3, -5, 6, 2, -2])"
    ],
    "sample_450": [
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"zzyyxx\")",
        "minChanges(s = \"yy\")",
        "minChanges(s = \"zzyzx\")",
        "minChanges(s = \"cccaaa\")",
        "minChanges(s = \"aabab\")",
        "minChanges(s = \"balloon\")",
        "minChanges(s = \"nnnnn\")",
        "minChanges(s = \"yxxxyxx\")",
        "minChanges(s=\"abcdc\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"010\", s2 = \"101\", x = 3)",
        "minOperations(s1 = \"11\", s2 = \"1\", x = 1)",
        "minOperations(s1 = \"1100\", s2 = \"1010\", x = 3)",
        "minOperations(s1 = \"100\", s2 = \"010\", x = 0)",
        "minOperations(s1 = \"01110\", s2 = \"00110\", x = 3)",
        "minOperations(s1 = \"1010\", s2 = \"0001\", x = 3)",
        "minOperations(s1 = \"010\", s2 = \"0101010\", x = 3)",
        "minOperations(s1 = \"001\", s2 = \"110\", x = 100)",
        "minOperations(s1 = \"0101111\", s2 = \"1111000\", x = 4)",
        "minOperations(s1 = \"111100\", s2 = \"100100\", x = 16)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 1, z = 1)",
        "longestString(x = 1, y = 1, z = 3)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 4, y = 5, z = 3)",
        "longestString(x = 4, y = 6, z = 2)",
        "longestString(x = 2, y = 4, z = 2)",
        "longestString(x = 5, y = 10, z = 15)",
        "longestString(x = 3, y = 4, z = 6)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1,0,1,0,1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [5, 4, 0, 3, 1, 6, 2])",
        "maxSubarrays(nums = [1, 1, 1])",
        "maxSubarrays(nums=[1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 1, 1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 2, 1, 2, 1, 1, 2])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_306": [
        "countSeniors(details=[\"<NAME>,23\", \"<NAME>,30\"])",
        "countSeniors(details = [\"<NAME> 48\", \"<NAME> 67\", \"<NAME> 82\"])",
        "countSeniors(details = [\"Name: Alice, Age: 40\", \"Name: Bob, Age: 59\", \"Name: Charlie, Age: 60\"])",
        "countSeniors(details = [\"<NAME> 1997\", \"<NAME> 1950\", \"<NAME> 1944\"])",
        "countSeniors(details=[\"ID: 0123456789\", \"Name: John\", \"Age: 20\"])",
        "countSeniors(details = [\"Joe 75\", \"Jack 35\", \"Jane 67\", \"Jill 25\"])",
        "countSeniors(details = [\"Jeff 24\", \"Tom 45\", \"Mike 56\", \"Bob 67\"])",
        "countSeniors(details = [\"181999999999999979\", \"191999999999999998\", \"182099999999999978\"])",
        "countSeniors(details = [\"<NAME>, 45\", \"<NAME>, 60\", \"<NAME>, 80\", \"Louis, 28\", \"<NAME>, 28\"])",
        "countSeniors(details = [\"s162267 2013-05-04 13:58:06.151\",\"s162268 2013-05-04 13:58:06.151\",\"s162269 1990-05-04 13:58:06.151\",\"s162270 2013-05-04 13:58:06.151\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1,0,1,0,1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1,0,1,1,0])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1,1,1,1,1,1,1,1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 0])",
        "maxSubarrays(nums = [0,1,0,1,0,1,1])",
        "maxSubarrays(nums=[1,1,1])",
        "maxSubarrays(nums = [1,0,1,1,1,1,1,0,1])",
        "maxSubarrays(nums = [8, 4, 2, 12, 2, 1, 6, 2])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 3, 5, 6, 8, 9], moveFrom = [3, 6], moveTo = [5, 8])",
        "relocateMarbles(nums = [5, 6, 9, 8], moveFrom = [9, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9], moveFrom = [1, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [4, 5], moveTo = [9, 10])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6, 8], moveTo = [5, 6, 8, 9])",
        "relocateMarbles(nums = [4, 7, 8, 9], moveFrom = [4, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [1, 4, 5, 8, 9], moveFrom = [5, 8, 9], moveTo = [5, 9, 8])",
        "relocateMarbles(nums = [0, 5, 1, 6, 2, 8, 3, 9, 4], moveFrom = [4, 9, 7, 5], moveTo = [8, 2, 1, 6])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"caa\", s3 = \"ada\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cde\", s3 = \"bcd\")",
        "findMinimumOperations(s1 = \"zzz\", s2 = \"zyy\", s3 = \"zzz\")",
        "findMinimumOperations(s1 = \"abca\", s2 = \"cbda\", s3 = \"ccba\")",
        "findMinimumOperations(s1 = \"xxzzyy\", s2 = \"zzyyxx\", s3 = \"xxxxxy\")",
        "findMinimumOperations(s1=\"acca\", s2=\"caca\", s3=\"cb\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minLengthAfterRemovals(nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "minLengthAfterRemovals(nums = [3,1,2,10,1])",
        "minLengthAfterRemovals(nums = [2, 1, 5])",
        "minLengthAfterRemovals(nums = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [4,3,1,1,5,6])",
        "minLengthAfterRemovals(nums=[1,1,3,3,4,4,5,5,5,5,7,8,8])",
        "minLengthAfterRemovals(nums=[0, 1, 3, 3, 4, 6, 7, 9, 9])"
    ]
}