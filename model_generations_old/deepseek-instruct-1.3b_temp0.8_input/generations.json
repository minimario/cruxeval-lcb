{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [3, 2, 1, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [2,3,4,5,6])",
        "alternatingSubarray(nums = [2,3,4,6,7,8,9,10])",
        "alternatingSubarray(nums = [4, 2, 3, 5, 1, 2, 3])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[3, 2, 1], [4, 5, 6]])",
        "matrixSum(a = [[7, 2, 9], [3, 8, 1]])",
        "matrixSum(a = [[7, 9, 2, 5], [6, 8, 1, 4], [3, 7, 9, 5]])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 1], [0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 1, 0, 0], [0, 1, 0, 1], [0, 0, 1, 0], [0, 1, 0, 1]])",
        "findChampion(grid = [[1,0,1,1,0], [0,1,1,1,0], [1,1,1,1,1], [0,0,1,1,1], [1,0,0,1,1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 1], \n                         [0, 1, 0, 0, 0, 0, 0, 0, 0, 1],\n                         [0, 0, 1, 0, 0, 0, 0, 0, 0, 1],\n                         [0, 0, 0, 1, 0, 0, 0, 0, 0, 1],\n                         [0, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n                         [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],\n                         [0, 0, 0, 0, 0, 0, 1, 0, 0, 1],\n                         [0, 0, 0, 0, 0, 0, 0, 1, 0, 1],\n                         [0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\n                         [1, 1, 1, 1, 1, 1, 1, 1, 1, 0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[3, 4, 6], [8, 2, 1], [5, 9, 7]])",
        "matrixSum(a = [[3, 5, 7], [1, 3, 9], [2, 4, 6]])",
        "matrixSum(a = [[3, 7, 8], [1, 2, 3], [1, 2, 3]])",
        "matrixSum(a = [[5, 1, 3], [7, 2, 4], [6, 8, 1]])",
        "matrixSum(a = [[7, 1, 3, 9], [4, 6, 7, 5], [2, 7, 8, 3]])",
        "matrixSum(a = [[7, 5, 1], [3, 2, 8], [4, 1, 2]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16])",
        "alternatingSubarray(nums = [3, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2, 4, 6, 7])",
        "alternatingSubarray(nums = [2, 4, 6, 10, 8, 12])",
        "alternatingSubarray(nums = [2, 2, 1, 5, 4])",
        "alternatingSubarray(nums = [5, 7, 7, 5, 3, 1, 5, 7, 7, 3, 2])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"grape\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"apple\", \"grape\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"grape\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"I am\", \"an\", \"apple\"], x = \"a\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"apple\", s2 = \"mange\")",
        "canBeEqual(s1 = \"karan\", s2 = \"ankit\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,3,7,13], target = 15)",
        "lengthOfLongestSubsequence(nums=[1, 3, 5, 7], target=7)",
        "lengthOfLongestSubsequence(nums=[1, 5, 7, 8, 9, 2, 4], target=9)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 7, 8, 9], target=10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 6, 7, 9, 4, 10, 13, 15], target = 20)",
        "lengthOfLongestSubsequence(nums=[1,3,7,13,1,9,15,3], target=20)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,7,1,2,3,7,8,8,8,8,7,7,7,7], target = 20)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"xyz\", s2 = \"wxy\")",
        "canBeEqual(s1 = \"xyz\", s2 = \"wxy\")",
        "canBeEqual(s1 = \"bcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"attack\", s2 = \"defend\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maxSubarrays(nums = [1, 2, 3, 3, 4, 5])",
        "maxSubarrays(nums = [2, 3, 5, 7, 11])",
        "maxSubarrays(nums = [1, 2, 3, 3, 4, 4, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 2, 2, 2, 1])",
        "maxSubarrays(nums = [2, 4, 1, 2, 3, 2, 4, 1])",
        "maxSubarrays(nums = [2, 3, 4, 3, 3, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 2, 3, 4, 2, 1, 2, 3])",
        "maxSubarrays(nums = [2, 4, 5, 2, 4, 6, -1, 2, 3, 5, 7])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 6, 3, 1], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 10)",
        "buyChoco(prices = [1, 6, 3], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 16)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], money = 10)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9,10], l = 2, r = 5)",
        "countSubMultisets(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "countSubMultisets(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], l = 0, r = 9)",
        "countSubMultisets(nums=[1,2,3,4,5], l=2, r=4)",
        "countSubMultisets(nums = [2,2,2,3,3,4,4,4,4], l = 1, r = 3)",
        "countSubMultisets(nums = [1, 1, 2, 3], l = 0, r = 3)",
        "countSubMultisets(nums = [1, 2, 3, 2, 1], l = 0, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], l = 0, r = 1)",
        "countSubMultisets(nums = [1,1,2,3,3,4,5,6,7,7,8,9,9], l = 1, r = 5)",
        "countSubMultisets(nums = [1,2,3,2,1,2,3], l = 0, r = 4)"
    ],
    "sample_322": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 5, 6, 7])",
        "minimumCoins(prices = [1, 5, 6])",
        "minimumCoins(prices = [1, 5, 6])",
        "minimumCoins(prices = [1, 5, 11])",
        "minimumCoins(prices = [1, 5, 2, 10])",
        "minimumCoins(prices = [1, 5, 2, 10])",
        "minimumCoins(prices = [1, 5, 6, 7, 4, 3, 2, 10])",
        "minimumCoins(prices = [1, 1, 1, 5, 1, 10])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 150)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 30)",
        "accountBalanceAfterPurchase(p = 120)",
        "accountBalanceAfterPurchase(p = 190)",
        "accountBalanceAfterPurchase(p = 54)",
        "accountBalanceAfterPurchase(p = 54)"
    ],
    "sample_423": [
        "minOperations(nums = [3, 3, 3, 3])",
        "minOperations(nums = [3,3,3,6,6,6,9])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [3, 3, 3, 6, 1, 1, 1])",
        "minOperations(nums = [2, 4, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [2, 2, 2, 1, 1, 1])",
        "minOperations(nums = [2, 2, 2, 1, 1, 1])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,4,5,5])",
        "alternatingSubarray(nums = [1,1,2,2,3,3,4,4])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9, 10, 12, 14, 16, 18, 20])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,5,5])",
        "alternatingSubarray(nums = [1,2,3,4,3,2,1,1])",
        "alternatingSubarray(nums = [1, 1, 2, 3, 4, 4, 4, 5, 5, 5])",
        "alternatingSubarray(nums = [3, 2, 3, 3, 2, 4, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 5])"
    ],
    "sample_460": [
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 2, limit = 7)",
        "distributeCandies(n = 20, limit = 10)"
    ],
    "sample_247": [
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"adc\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"def\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"def\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"bca\", x = 1)",
        "minOperations(s1 = \"aaa\", s2 = \"aaa\", x = 1)",
        "minOperations(s1 = \"leetcode\", s2 = \"coeite\", x = 2)",
        "minOperations(s1 = \"abcde\", s2 = \"cde\", x = 2)",
        "minOperations(s1 = \"10101\", s2 = \"01010\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"cdef\", x = 1)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 5, y = 3, z = 1)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 1, y = 1, z = 1)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 1, 2], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 5)",
        "minOperations(nums = [1,2,3,4,5,6], k = 10)",
        "minOperations(nums = [1, 2, 3, 1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [3,1,4,2,2], k = 3)",
        "minOperations(nums = [1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5], k = 5)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcca\")",
        "longestSemiRepetitiveSubstring(s = \"abbbabbbba\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 4, 5, 5, 5])",
        "isGood(a = [3, 1, 2, 3, 2])",
        "isGood(a = [1, 2, 2, 4, 4, 3])",
        "isGood(a = [1, 3, 2, 1, 2, 3, 1])",
        "isGood(a = [3, 2, 1, 1, 3])",
        "isGood(a = [1, 1, 3, 2, 4, 4, 3, 2, 4, 4, 4])",
        "isGood(a = [2, 3, 3, 5, 7, 11, 11, 13])",
        "isGood(a = [0, 1, 2, 3, 4, 2])",
        "isGood(a = [5, 5, 5, 1, 1, 1, 2, 2, 2])",
        "isGood(a = [3, 2, 4, 2, 2, 2])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 30, m = 7)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2])",
        "minGroupsForValidAssignment(nums = [2,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [2,3,3,4,5,5,5,5,5])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", 2, \"prev\", \"next\", 1, \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"3\", \"1\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"3\",\"2\",\"1\",\"prev\",\"prev\",\"2\",\"3\"])",
        "lastVisitedIntegers(words = [\"0\",\"1\", \"0\", \"2\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"dede\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ca\",\"za\",\"fc\",\"da\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"cd\",\"bb\",\"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"llo\", \"oella\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0111\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110\", k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110011\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)",
        "shortestBeautifulSubstring(s=\"1101\", k=2)",
        "shortestBeautifulSubstring(s = \"01100110101100110\", k = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 1, 2, 4, 5])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(nums = [2, 3, 4, 1, 5])",
        "minimumRightShifts(nums = [3, 1, 2, 5, 4, 6])",
        "minimumRightShifts(nums = [2, 1, 3, 5, 4])",
        "minimumRightShifts(nums = [2, 3, 0, 1, 2])"
    ],
    "sample_294": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"1001001\")",
        "minimumSteps(s = \"0001001\")",
        "minimumSteps(s = \"000110\")",
        "minimumSteps(s = \"100100\")",
        "minimumSteps(s = '010101')",
        "minimumSteps(s = \"1001000101\")",
        "minimumSteps(s = \"100011\")",
        "minimumSteps(s = '1001001')",
        "minimumSteps(s = '100010001')"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"adc\", s3 = \"aec\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"fghi\", s3 = \"jkls\")",
        "findMinimumOperations(s1 = \"aaaaaa\", s2 = \"aa\", s3 = \"a\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"coffee\", str2 = \"mouse\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"coffee\", str2 = \"mouse\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azbc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"coffee\", str2 = \"man\")"
    ],
    "sample_364": [
        "isGood(nums = [3,1,2,4,5])",
        "isGood(nums = [3,2,1,5,6,4])",
        "isGood(nums=[2,1,3,5,4])",
        "isGood(nums = [3,2,4,1])",
        "isGood(nums = [3, 1, 2, 5, 4])",
        "isGood(nums=[1, 2, 3, 5, 6])",
        "isGood(nums=[1,2,3,5,6,7,8])",
        "isGood(nums = [1,2,3,4,6,5,7])",
        "isGood(nums = [2,3,4,1,6])",
        "isGood(nums = [0,1,2,3,4,5,7])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [2, 3, 5, 7], target = 10)",
        "countPairs(nums = [3, 1, 4, 1, 5, 9], target = 6)",
        "countPairs(nums = [1, 7, 3, 5, 9], target = 10)",
        "countPairs(nums = [1, 7, 2, 5, 3], target = 10)",
        "countPairs(nums = [1, 3, 2, 5, 6], target = 7)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 5, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 5, 6, 8, 9], moveFrom = [5, 6], moveTo = [6, 8])",
        "relocateMarbles(nums = [8, 5, 6, 9, 5], moveFrom = [5, 6], moveTo = [9, 8])",
        "relocateMarbles(nums = [8, 6, 5, 9], moveFrom = [5, 6], moveTo = [9, 8])",
        "relocateMarbles(nums = [9, 8, 7, 6, 5], moveFrom = [4, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [8, 5, 6, 5, 9, 9, 6], moveFrom = [5, 6], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9, 5, 6], moveFrom = [5, 6], moveTo = [5, 6])",
        "relocateMarbles(nums = [9, 5, 6, 5, 8, 9, 9, 6], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 2, 5, 5, 6, 8, 9], moveFrom = [2, 5], moveTo = [6, 8])",
        "relocateMarbles(nums=[9, 8, 7, 6, 5, 4, 3, 2, 1], moveFrom=[2, 1, 4, 3], moveTo=[3, 4, 1, 2])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 3, 5, 7], target = 6)",
        "countPairs(nums = [1, 5, 7, 8], target = 10)",
        "countPairs(nums = [1, 3, 2, 5, 7], target = 6)",
        "countPairs(nums = [1, 3, 2, 4], target = 5)",
        "countPairs(nums = [1, 1, 1, 1], target = 3)",
        "countPairs(nums = [1, 3, 2, 4, 6], target = 7)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [3, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 0, 1, 0, 0, 1, 1, 0, 0])"
    ],
    "sample_303": [
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1968s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1950s\", \"2010s\"])",
        "countSeniors(details = [\"John Doe\", \"Jane Doe\", \"Jim Doe\", \"Jill Doe\"])",
        "countSeniors(details = [\"John18\", \"Emily24\", \"Michael35\", \"Sarah43\", \"David55\"])",
        "countSeniors(details = [\"david10\", \"maria80\", \"john35\"])",
        "countSeniors(details = [\"John Doe;45\", \"Mary Jane;68\", \"Alex Smith;75\"])",
        "countSeniors(details = [\"16years old\", \"30years old\", \"55years old\", \"75years old\"])",
        "countSeniors(details = [\"19560715\", \"20071122\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abbcca\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"bbcbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabca\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"dad\", s2 = \"bad\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abce\", s3 = \"abcz\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"bbbb\", s3 = \"cccc\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aca\", s3 = \"ada\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"bc\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,5,7,8,9,2,4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,7], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,3,5,7,9], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,11], target = 8)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 7, 7, 1], target=7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 8], target = 10)",
        "lengthOfLongestSubsequence(nums=[1,2,3,7,9], target=10)",
        "lengthOfLongestSubsequence(nums=[3, 7, 5, 8, 9, 4, 10, 2, 1, 6], target=8)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1,5,1,5])",
        "minimumSum(nums = [5, 4, 9, 2, 4])",
        "minimumSum(nums = [1,5,3,4,2])",
        "minimumSum(nums = [1, 5, 7, 2, 3, 6])",
        "minimumSum(nums = [5, 4, 9, 8, 1, 7, 6, 5, 9])",
        "minimumSum(nums = [3, 7, 1, 6, 9, 5, 7, 9, 1])",
        "minimumSum(nums = [5, 3, 13, 2, 13, 11])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"efg\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"efg\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"efg\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"abc\", \"abcd\", \"abcde\", \"abcdefgh\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"a\", \"xyx\"])",
        "minimizeConcatenatedLength(words = [\"aabbb\", \"acd\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101\", k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"10111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"001101\", k = 2)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"efg\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"jkl\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\",\"ef\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tac\", \"god\", \"odg\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\", \"da\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"ant\", \"tar\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"ant\", \"bad\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"ab\",\"abc\",\"abcd\",\"abcde\",\"abcdef\"])",
        "minimizeConcatenatedLength(words = [\"ca\", \"ba\", \"ac\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 100, m = 5)",
        "differenceOfSums(n = 20, m = 3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 4, 5, 6])",
        "alternatingSubarray(nums=[1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3])",
        "alternatingSubarray(nums = [1,2,3,3,2,2])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 7, 9, 11, 13, 15, 17])",
        "alternatingSubarray(nums = [1,2,3,2,5,6,7,8,9,10,11])",
        "alternatingSubarray(nums = [5,6,4,7,5,3,6])",
        "alternatingSubarray(nums = [1,2,3,4,5,7,6,7,9,10])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findMaximumLength(nums = [7,7,7,7,7,7,7])",
        "findMaximumLength(nums = [1, 5, 6, 2, 3, 1, 10])",
        "findMaximumLength(nums=[3,6,7,8,2,10,15,17])",
        "findMaximumLength(nums = [73,98,83,8,34,89,63])",
        "findMaximumLength(nums = [5,3,7,12,6,8,1])"
    ],
    "sample_302": [
        "countSeniors(details = [\"John Doe61\", \"Jane Doe65\", \"Jim Doe70\"])",
        "countSeniors(details = [\"a1234567891\", \"b1234567891\", \"c1234567891\"])",
        "countSeniors(details = [\"John Doe, 65\", \"Jane Doe, 70\", \"Jack Doe, 69\"])",
        "countSeniors(details = [\"John Doe;25\", \"Marry Jane;65\", \"Jane Smith;72\"])",
        "countSeniors(details = [\"Alex:18-07-2000\", \"Alexander:19-08-1998\", \"Alex:18-12-2001\"])",
        "countSeniors(details = [\"John Doe97\", \"Marry Smith65\", \"Tom Johnson79\"])",
        "countSeniors(details = [\"1995-12-03T00:00:00-06:00\", \"1972-01-17T00:00:00-07:00\"])",
        "countSeniors(details = [\"ID1234 1970-05-30\", \"ID1235 2000-11-23\"])",
        "countSeniors(details = [\"1922-03-25T00:00:00+05:30\", \"1988-08-31T12:34:56+05:30\"])",
        "countSeniors(details = [\"mq1214676B99\", \"px345678F11\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"adcbe\")",
        "canBeEqual(s1 = \"acb\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abd\")",
        "canBeEqual(s1 = \"abcdefghijklmnopqrstuvwxyz\", s2 = \"zyxwvutsrqponmlkjihgfedcba\")",
        "canBeEqual(s1 = \"bca\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"za\")",
        "canBeEqual(s1 = \"adb\", s2 = \"cda\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [2, 3, 5])",
        "minimumCoins(prices = [2, 3, 0, 2, 1])",
        "minimumCoins(prices = [2, 7, 3, 5, 1, 4])",
        "minimumCoins(prices = [1, 2, 5, 7, 4, 3, 2, 6])",
        "minimumCoins(prices = [1, 4, 5, 7, 2, 6, 3, 4, 6, 9, 3])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(A = [1,2,3,4,5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(A = [3,4,1,2,5])",
        "minimumSeconds(A = [1,2,3,2,1,0,0])",
        "minimumSeconds(A = [1, 1, 0, 0, 1, 1, 1, 1])",
        "minimumSeconds(A = [0, 3, 0, 2, 1, 0, 3, 2, 1, 0])",
        "minimumSeconds(A = [1, 2, 3, 2, 3, 2, 4, 1, 3, 2, 3])",
        "minimumSeconds(A = [1, 3, 2, 5, 5, 5, 5, 5, 3, 1, 1, 1, 1])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aab\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"ba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"cc\", \"cb\", \"ba\", \"cc\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [5,5,5,5,5], nums2 = [1,1,1,1,1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 0])",
        "minSum(nums1 = [3, 4, 1, 2], nums2 = [1, 3, 3])",
        "minSum(nums1 = [1,2,1,2,1], nums2 = [2,3,2,3,2])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"one\", \"two\", \"three\"], x = \"o\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\"], x = \"th\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\"], x = \"o\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [2, 1, 5, 1, 3, 2], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=3, k=5)",
        "maxSum(nums = [2,1,3,1,4], m = 4, k = 2)",
        "maxSum(nums = [2, 2, 2, 2, 3, 3, 3, 3, 4, 4], m = 2, k = 4)",
        "maxSum(nums = [2, 1, 5, 3, 6, 4], m = 3, k = 3)",
        "maxSum(nums = [2,1,3,3,1,3], m = 4, k = 3)",
        "maxSum(nums = [2, 3, 5, 8, 1, 4, 6], m = 3, k = 2)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5], moveFrom=[1, 2], moveTo=[3, 4])",
        "relocateMarbles(nums = [2, 1, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [2,1,2], moveFrom = [0, 1], moveTo = [1, 2])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 0])",
        "minimumRightShifts(nums = [3, 2, 1, 5, 4])",
        "minimumRightShifts(nums = [7, 6, 5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [1,2,3,5,6,7,8])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 6, 3], money = 10)",
        "buyChoco(prices = [1, 6, 3, 1], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7], money = 11)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 10)",
        "buyChoco(prices = [1, 6, 3], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 20)",
        "buyChoco(prices = [1, 6, 7], money = 11)",
        "buyChoco(prices = [1, 2, 3], money = 8)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 5, 12, 13, 15], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 7, 13, 2, 9], target = 15)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbcca\")",
        "longestSemiRepetitiveSubstring(s = \"bbab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aababcaab\")",
        "longestSemiRepetitiveSubstring(s = \"bbbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbaabb\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"Hello\", \"World\"], x = \"o\")",
        "findWordsContaining(words = [\"word1\", \"word2\", \"word3\"], x = \"or\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\"], x = \"p\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"4\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"visit\", \"prev\", \"prev\", \"visit\", \"prev\", \"visit\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"10\", \"prev\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"abb\", s2 = \"def\")",
        "canBeEqual(s1 = \"bcd\", s2 = \"dca\")",
        "canBeEqual(s1 = \"abb\", s2 = \"cdd\")",
        "canBeEqual(s1 = \"abb\", s2 = \"ddd\")",
        "canBeEqual(s1 = \"anagram\", s2 = \"nagaram\")",
        "canBeEqual(s1 = \"abac\", s2 = \"cdfe\")",
        "canBeEqual(s1 = \"dcd\", s2 = \"cdc\")",
        "canBeEqual(s1 = \"fbi\", s2 = \"hif\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1, 5, 7, 8, 9])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [5,1,3,8,6])",
        "minimumSum(nums = [5, 5, 1, 1])",
        "minimumSum(nums = [1, 5, 7, 8, 9])",
        "minimumSum(nums = [5,1,3,8,6])",
        "minimumSum(nums = [3, 5, 6, 7])",
        "minimumSum(nums = [3,5,2,4,7])",
        "minimumSum(nums = [5, 5, 1, 2])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 11], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [2,3,5,7], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 5, 12, 13, 1, 5], target = 10)"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = 'yMPH')",
        "sortVowels(s = \"Ymplhp\")",
        "sortVowels(s=\"aeiou\")",
        "sortVowels(s = \"mY\")",
        "sortVowels(s = \"AEIOUaeiou\")",
        "sortVowels(s = 'lempH')",
        "sortVowels(s = \"meAt\")",
        "sortVowels(s = \"My name is Yummi\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[7, 2, 1], [3, 4, 5], [6, 9, 8]])",
        "matrixSum(nums=[[1,2,3],[3,4,5],[5,6,1]])",
        "matrixSum(nums = [[5, 1, 3], [2, 3, 4], [1, 2, 4]])",
        "matrixSum(nums = [[5, 7], [9, 3], [6, 1]])",
        "matrixSum(nums = [[2,5,3],[1,8,9],[4,7,5]])",
        "matrixSum(nums = [[3,6,1,2,5],[9,3,4,8,5],[1,7,9,2,4]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [2, 5, 6])",
        "maximumTripletValue(nums = [2, 5, 6])",
        "maximumTripletValue(nums = [1, 4, 7, 8, 3, 9])",
        "maximumTripletValue(nums = [1, 2, 4, 8, 16, 32])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10])",
        "alternatingSubarray(nums = [2, 4, 6, 4, 2])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16])",
        "alternatingSubarray(nums = [3, 2, 1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [2, 4, 6, 7, 4, 6, 8, 10])",
        "alternatingSubarray(nums = [2,4,6,7,9,9,7,5,3,1])",
        "alternatingSubarray(nums = [1, 2, 3, 1, 3, 4])",
        "alternatingSubarray(nums = [1,2,3,1,2,3,4,5])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aabca\", k = 4)",
        "beautifulSubstrings(s = \"aei\", k = 3)",
        "beautifulSubstrings(s = \"apple\", k = 3)",
        "beautifulSubstrings(s = \"abcd\", k = 4)",
        "beautifulSubstrings(s = \"apple\", k = 2)",
        "beautifulSubstrings(s = \"babbb\", k = 2)",
        "beautifulSubstrings(s = \"bcacba\", k = 5)",
        "beautifulSubstrings(s = \"bab\", k = 4)",
        "beautifulSubstrings(s = \"rabbbit\", k = 7)",
        "beautifulSubstrings(s = \"abcaee\", k = 5)"
    ],
    "sample_449": [
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"1101\")",
        "minChanges(\"abc\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"0011\")",
        "minChanges(s = \"abac\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"001001\")",
        "minimumSteps(s = \"001001\")",
        "minimumSteps(s = \"0001101\")",
        "minimumSteps(s = \"1001001\")",
        "minimumSteps(s = \"0001001\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"01001100\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"110101\")",
        "minimumSteps(s = \"1100110011001100\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"John Doe\", \"Jane Doe\", \"Alice Smith\", \"Bob Johnson\"])",
        "countSeniors(details = [\"John Doe,62\", \"Jane Doe,52\", \"Jim Smith,75\"])",
        "countSeniors(details = [\"john73\", \"alex22\", \"tom48\"])",
        "countSeniors(details = [\"1995-12-05T00:00:00-05:00\", \"1997-12-13T00:00:00-05:00\"])",
        "countSeniors(details = [\"John Doe;52;60\", \"Marry Smith;65;75\", \"Peter Johnson;70;80\"])",
        "countSeniors(details = [\"1995092312345678\", \"2003121212345678\"])",
        "countSeniors(details = [\"0000000001A3\", \"1111111111A3\", \"2222222222A4\"])",
        "countSeniors(details = [\"1990-01-01T00:00:00Z\",\"1985-12-20T00:00:00Z\",\"1976-09-15T00:00:00Z\"])",
        "countSeniors(details = [\"1998-05-12T00:00:00Z\", \"1972-11-29T01:00:00Z\", \"2005-12-14T01:00:00Z\"])",
        "countSeniors(details = [\"1926-03-22T01:34:34Z\", \"1986-07-14T04:32:59Z\", \"2005-03-19T09:18:16Z\", \"1999-05-06T14:07:21Z\", \"2017-06-10T10:40:22Z\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums=[1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [3,1,3,2,1,2])",
        "minGroupsForValidAssignment(nums = [3,7,10])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]], k = 4)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 1]], k = 1)",
        "countPairs(coordinates=[[0, 0], [1, 1], [2, 2], [2, 3]], k=2)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 4, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums=[1,2,3,4,5,6,7,8,9,10], m=2, k=5)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 4)",
        "maxSum(nums = [1, 1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums=[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], m=2, k=4)",
        "maxSum(nums=[3, 5, 1, 4, 2, 9, 8], m=3, k=5)",
        "maxSum(nums = [1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], m = 4, k = 5)"
    ],
    "sample_452": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(\"abc\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"bri\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [2,3,2,4,3], nums2 = [5,1,2,4,4])",
        "minOperations(nums1 = [2,3,2,4,3], nums2 = [5,1,2,4,4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [3,1,2], nums2 = [1,2,3])",
        "minOperations(nums1 = [3, 5, 2, 6], nums2 = [3, 2, 5, 6])",
        "minOperations(nums1 = [1, 3, 5, 6], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [3, 5, 2, 6], nums2 = [2, 4, 1, 3])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [3, 4, 1, 2])",
        "minOperations(nums1 = [3,5,2,6], nums2 = [2,5,1,3,4])",
        "minOperations(nums1 = [2, 4, 2, 3], nums2 = [5, 1, 2, 4])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11111\", k = 1)",
        "shortestBeautifulSubstring(s = \"1111111\", k = 3)",
        "shortestBeautifulSubstring(s=\"11100\", k=2)",
        "shortestBeautifulSubstring(s=\"1110001111\", k=2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 3, 2, 4])",
        "maximumTripletValue(nums = [10, 20, 30, 40, 50])",
        "maximumTripletValue(nums = [10,20,30,40,50])",
        "maximumTripletValue(nums = [5,1,3,2,4])",
        "maximumTripletValue(nums=[2, 1, 3, 2, 4, 7])",
        "maximumTripletValue(nums = [3,5,9])",
        "maximumTripletValue(nums = [5, 2, 10, 8, 12])"
    ],
    "sample_465": [
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n = 7, limit = 10)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5,6,6])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1,2,1], nums2 = [3,4,3])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minSum(nums1 = [2,1,4,5,2], nums2 = [1,3,3])",
        "minSum(nums1 = [1,1,1,1,1], nums2 = [1,1,1,1,1])",
        "minSum(nums1 = [1,2,1,2], nums2 = [1,1,1,1])",
        "minSum(nums1 = [2, 3, 5, 1, 4], nums2 = [2, 3, 5, 1, 4])"
    ],
    "sample_453": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abccba\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aaaaa\", k = 5)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"aaaa\", k = 1)",
        "beautifulSubstrings(s = \"bcbcbcbc\", k = 1)",
        "beautifulSubstrings(s = \"aabcbcbc\", k = 2)",
        "beautifulSubstrings(s = \"bcbcbcbcb\", k = 1)",
        "beautifulSubstrings(s = \"iea\", k = 3)",
        "beautifulSubstrings(s = \"bbaaababaa\", k = 5)",
        "beautifulSubstrings(s = \"aaabaaab\", k = 1)",
        "beautifulSubstrings(s = \"baanabanana\", k = 4)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"apple\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 1)",
        "beautifulSubstrings(s = \"bbaa\", k = 2)",
        "beautifulSubstrings(s = \"bbc\", k = 2)",
        "beautifulSubstrings(s = \"aabcbc\", k = 3)",
        "beautifulSubstrings(s = \"bbaaa\", k = 2)",
        "beautifulSubstrings(s = \"aabbbc\", k = 3)",
        "beautifulSubstrings(s = \"agbbbb\", k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = 'YmpH')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s=\"YmpH\")",
        "sortVowels(s = \"mYthOn\")",
        "sortVowels(s='lYmpH')",
        "sortVowels(s = 'YmPhil')",
        "sortVowels(s = \"ApplY\")",
        "sortVowels(s = \"YmPht\")",
        "sortVowels(s = 'mpaH')"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 3, 3, 3, 2, 4, 3, 2, 1, 2])",
        "minimumSeconds(nums = [3, 2, 1, 4, 3])",
        "minimumSeconds(nums = [1, 2, 2, 3, 3, 3])",
        "minimumSeconds(nums = [1, 2, 3, 3])",
        "minimumSeconds(nums = [1,2,3,2,1,3])",
        "minimumSeconds(nums = [1, 1, 2, 2, 1])",
        "minimumSeconds(nums = [1, 5, 3, 19, 18, 25])",
        "minimumSeconds(nums = [1, 1, 2, 3, 3, 2, 2, 3])",
        "minimumSeconds(nums = [3, 5, 8, 1, 6, 7, 3, 1, 6, 4, 7, 9])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [5, 5, 1, 1, 5])",
        "minimumSum(nums = [5, 5, 1, 1, 2])",
        "minimumSum(nums = [5, 5, 1, 7, 1, 8])",
        "minimumSum(nums = [1, 5, 7, 8, 10])",
        "minimumSum(nums = [5,5,1,1,1,2,2,2,3,3,3,3])",
        "minimumSum(nums = [12, 34, 45, 11, 23, 34])",
        "minimumSum(nums = [12, 3, 37, 11, 12])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [2,3,1,2,4,3], k = 5)",
        "minOperations(nums = [2, 7, 10, 2, 1, 5], k = 15)",
        "minOperations(nums = [2, 7, 11, 15], k = 18)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [2, 7, 10, 2, 2], k = 1)",
        "minOperations(nums=[2, 3, 1, 5, 4], k=3)",
        "minOperations(nums = [2,3,4,6,7,9], k = 8)",
        "minOperations(nums = [2, 4, 6, 7, 4, 6, 8], k = 2)",
        "minOperations(nums=[3, 5, 6, 7, 8, 9], k=8)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 4)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 3)",
        "maxSum(A = [2, 1, 5, 1, 3, 2], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 3)",
        "maxSum(A = [1,2,3,4,5,6,7,8,9,10], m = 5, k = 3)",
        "maxSum(A=[1,2,3,1,2,3,1,2,3,4,5], m=2, k=4)",
        "maxSum(A = [2, 2, 2, 2, 1, 3, 4, 5, 6, 7, 8], m = 3, k = 5)"
    ],
    "sample_293": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"01000\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"10001\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"001010\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [2,3,1,2,4,3])",
        "maxSubarrays(nums = [1, 2, 3, 3, 2, 3])",
        "maxSubarrays(nums = [2, 3, 1, 2])",
        "maxSubarrays(nums = [1, 2, 3, 3, 4])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1,1,1,0,1,1,0,1,1,1])",
        "maxSubarrays(nums = [2,3,4,2,3,4,2,3,4])",
        "maxSubarrays(nums = [2, 3, 4, 3, 6, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1,2,3,2,3,4,2,2,5,6,7])",
        "maxSubarrays(nums = [3, 2, 3, 4, 2, 2, 4, 3, 2, 3, 4, 4])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 6, 7], money = 10)",
        "buyChoco(prices = [1, 6, 7], money = 12)",
        "buyChoco(prices = [1, 6, 7], money = 11)",
        "buyChoco(prices = [3, 2, 1], money = 5)",
        "buyChoco(prices = [1, 6, 5, 4, 3, 2, 1], money = 20)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 10)",
        "buyChoco(prices = [1, 6, 5, 1], money = 20)",
        "buyChoco(prices = [1, 6, 7, 8], money = 11)",
        "buyChoco(prices = [1, 6, 5, 3], money = 10)",
        "buyChoco(prices = [1, 6, 3, 1], money = 13)"
    ],
    "sample_290": [
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"010011\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"010011\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"11100\")",
        "minimumSteps(s = \"100010001000\")",
        "minimumSteps(s = \"010011010100110101\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [0, 0, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 4, 2, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 1, 2, 2, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 3, 3])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [3, 1, 4, 1, 5], k = 3)",
        "minOperations(nums = [3, 1, 4, 1, 5], k = 3)",
        "minOperations(nums = [2,3,1,4,3], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1, 5, 7], k = 3)",
        "minOperations(nums = [1, 5, 7], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [3, 1, 4, 1, 5], k = 2)",
        "minOperations(nums = [2, 3, 5, 6, 7, 9], k = 5)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 2, 3, 4])",
        "isGood(nums = [3, 3, 3, 2, 2, 2])",
        "isGood(nums = [3,3,3,2,2,2])",
        "isGood(nums = [1,1,2,2,3,3,4,4,5,5,6,6])",
        "isGood(nums = [1, 3, 2, 3, 1, 1])",
        "isGood(nums = [3, 2, 3, 4, 2, 3])",
        "isGood(nums = [1, 2, 2, 3, 4, 3, 3, 2, 2, 1])",
        "isGood(nums = [1, 3, 2, 1, 2, 3, 1])",
        "isGood(nums = [3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 4])",
        "isGood(nums = [4, 5, 5, 6, 7, 7, 7, 8])"
    ],
    "sample_325": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 1928)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,3,4,5])",
        "isGood(nums = [3, 2, 1, 5])",
        "isGood(nums = [4,1,3,2])",
        "isGood(nums = [3, 1, 2])",
        "isGood(nums = [2, 4, 1, 5])",
        "isGood(nums = [5, 4, 2, 3, 1])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [3, 1, 3, 2, 4, 3])",
        "minimumSeconds(nums = [3, 2, 1, 4, 5])",
        "minimumSeconds(nums = [3, 1, 4, 2, 3])",
        "minimumSeconds(nums = [3, 1, 4, 2, 3, 2])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 0, 1, 2, 3, 4])",
        "minimumSeconds(nums = [3,2,1,4,3])",
        "minimumSeconds(nums = [3, 3, 4, 4, 4])",
        "minimumSeconds(nums = [5, 1, 2, 3, 4, 1, 2, 3, 5])",
        "minimumSeconds(nums = [3, 1, 4, 2, 3, 2, 4, 2, 1])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 1, 5, 6])",
        "minimumRightShifts(nums = [10, 20, 30, 40, 50])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 2, 1, 5, 4])",
        "minimumRightShifts(nums = [4, 5, 6, 1, 2])",
        "minimumRightShifts(nums = [3, 1, 2])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 4, 5])",
        "isGood(nums = [4, 2, 3, 1, 5])",
        "isGood(nums = [1, 2, 4, 3, 6])",
        "isGood(nums = [3,2,1,4])",
        "isGood(nums = [2, 3, 4, 6])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [5, 6, 7], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minOperations(nums1 = [2,3,5], nums2 = [1,2,3])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minOperations(nums1 = [1,1,1,1,1], nums2 = [1,1,1,1,1])",
        "minOperations(nums1 = [5,6,7,8], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,5,3,19,26,38,34,47,53,58,69,73,81,93], nums2 = [1,10,15,22,26,33,41,55,61,72,85,93])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"110101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111111111111111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"56742356123512356666\", k = 13)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 3, 4, 3, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,1,1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,3,3,3,2,3,2,1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [3, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 7, 1, 1, 2, 4, 1, 2])"
    ],
    "sample_289": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"110011\")",
        "minimumSteps(s = \"00011\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"000101\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 10], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 5, 3, 6, 7, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,3,6,7,9,10,11,12,14,15,16,17,18,19,20], target = 30)"
    ],
    "sample_259": [
        "minimumSum(nums = [5,1,3,8,6])",
        "minimumSum(nums = [1,2,3,4,3])",
        "minimumSum(nums = [1,5,6,8,10])",
        "minimumSum(nums = [1, 5, 3, 9, 2, 8])",
        "minimumSum(nums = [1, 2, 3, 4, 3])",
        "minimumSum(nums = [5,6,7,8,9])",
        "minimumSum(nums = [1,5,3,9,2])",
        "minimumSum(nums = [6,8,7,9,2,3,1,5])",
        "minimumSum(nums=[1, 5, 7, 3, 2, 9, 6])",
        "minimumSum(nums = [5,1,3,3,1,5])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 5)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 5)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 4)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=2, k=5)",
        "maxSum(nums = [2, 4, 6, 2, 3, 4, 6, 7], m = 2, k = 4)",
        "maxSum(nums = [1, 3, 4, 2, 5, 2, 3, 4, 1, 2, 2, 3, 4, 4, 5, 5, 1, 3, 1, 2], m = 3, k = 5)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"de\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aabab\", s2 = \"abab\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"aabbbcc\", s2 = \"bbbaa\", s3 = \"cbbabb\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [2, 2, 2, 3, 3, 4])",
        "minOperations(nums = [1,1,1,2,2,2,2])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 5, 1, 1, 1])",
        "minimumCoins(prices = [1, 5, 1, 1, 1])",
        "minimumCoins(prices = [1,5,1,1,1,10])",
        "minimumCoins(prices = [3, 1, 4, 2, 3])",
        "minimumCoins(prices = [3, 2, 1, 5, 4])",
        "minimumCoins(prices = [1, 1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices = [1,5,1,2,5])",
        "minimumCoins(prices = [2, 3, 1, 7, 5, 4, 6])",
        "minimumCoins(prices = [1, 1, 1, 4, 3, 7, 2, 9])",
        "minimumCoins(prices = [4, 1, 2, 7, 5, 3, 1, 1])"
    ],
    "sample_377": [
        "minimumSeconds(nums=[1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 1, 2, 3, 1])",
        "minimumSeconds(nums = [1,1,2,3,5])",
        "minimumSeconds(nums = [1, 1, 2, 3, 3])",
        "minimumSeconds(nums = [1,3,6,13,15,21])",
        "minimumSeconds(nums = [3,4,2,1,5])",
        "minimumSeconds(nums = [1, 3, 2, 4, 1])",
        "minimumSeconds(nums = [2,3,4,1,2])",
        "minimumSeconds(nums=[3, 5, 7, 10, 15, 17])"
    ],
    "sample_448": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(\"abc\")",
        "minChanges(\"abc\")",
        "minChanges(\"abc\")",
        "minChanges(\"abc\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aaabbb\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 1, 3, 8, 6], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 7, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 1, 8, 6, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 5, 3, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 5, 1, 4, 3], limit = 6)",
        "lexicographicallySmallestArray(nums=[5, 1, 3, 8, 6], limit=2)",
        "lexicographicallySmallestArray(nums = [1, 5, 8, 9, 3, 7, 2], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 7, 8, 6, 9, 4], limit = 2)",
        "lexicographicallySmallestArray(nums = [2, 6, 1, 3, 5, 8, 9], limit = 1)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 2, 1])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1,1,2,2,2])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "sumCounts(nums = [1,1,2,3,4,4,4,5,6,6,6,6])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 3, 2, 5])",
        "maximumTripletValue(nums = [1,2,3,4,5,6,7,8,9])",
        "maximumTripletValue(nums = [3, 4, 1, 2])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"bbaaba\", k = 10)",
        "beautifulSubstrings(s = \"abc\", k = 10)",
        "beautifulSubstrings(s = \"eaabea\", k = 5)",
        "beautifulSubstrings(s = \"pqrst\", k = 2)",
        "beautifulSubstrings(s = \"bcbcbcbcbc\", k = 1000)",
        "beautifulSubstrings(s = \"bvhj\", k = 6)"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 3, 2, 4], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 5, 7, 8, 9], target = 16)",
        "countPairs(nums = [1, 2, 7, 9], target = 11)",
        "countPairs(nums = [1,2,3,4,5], target = 8)",
        "countPairs(nums = [1,3,2,4,6], target = 10)",
        "countPairs(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], target = 11)"
    ],
    "sample_462": [
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 3, limit = 6)",
        "distributeCandies(n = 20, limit = 10)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,1,1,1,1])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minOperations(nums1 = [5, 6, 7], nums2 = [4, 6, 7])",
        "minOperations(nums1 = [2, 4, 6, 8], nums2 = [1, 3, 5, 7])",
        "minOperations(nums1 = [2,3,4,5], nums2 = [1,1,1,1])",
        "minOperations(nums1 = [1,3,5], nums2 = [2,3,4])",
        "minOperations(nums1 = [5, 6, 7], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1,2,3,6], nums2 = [1,2,3,4])",
        "minOperations(nums1 = [2,3,3], nums2 = [2,3,3])"
    ],
    "sample_426": [
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [3, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [3, 3, 3, 3, 3])",
        "minOperations(nums = [5,5,5,2,2,2])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [4, 2, 1, 3])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)",
        "shortestBeautifulSubstring(s = \"01110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1110\", k = 2)",
        "shortestBeautifulSubstring(s = \"11100011110011\", k = 5)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 2, 3, 3, 3])",
        "minimumSeconds(nums = [2, 1, 3, 5, 4, 3, 2, 6, 7])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "minimumSeconds(nums = [2, 3, 3, 2, 5])",
        "minimumSeconds(nums = [3, 6, 9, 1, 6, 3])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations(nums = [2,2,2,1,1,1])",
        "minOperations(nums = [2, 2, 2, 1, 2])",
        "minOperations(nums = [1, 2, 3, 4])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18])",
        "alternatingSubarray(nums = [3, 2, 1, 4, 7, 8, 6, 5])",
        "alternatingSubarray(nums = [2, 4, 1, 2, 3, 2, 4, 1, 2, 3])",
        "alternatingSubarray(nums = [3, 2, 3, 1, 2, 4, 5, 5, 6])",
        "alternatingSubarray(nums = [1, 3, 5, 9, 10, 11, 12, 13, 14, 15])",
        "alternatingSubarray(nums = [0, 0, -1, 1, -1, 1, 0, 0])",
        "alternatingSubarray(nums = [1, 3, 4, 6, 7, 9, 10, 11])",
        "alternatingSubarray(nums = [3, 2, 3, 2, 2, 3, 3, 1])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,2,3,1])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3,1,2,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3,2,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 5, 5, 5, 5, 4, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,3,2,7,8,8,2,1])",
        "minLengthAfterRemovals(nums = [3, 1, 3, 2, 4])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"llop\", \"poll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"zyx\", \"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"bob\", \"dod\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"dcba\", \"abcd\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bza\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bza\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcz\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"za\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbb\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 5, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums=[1,2,3,4,5], m=2, k=2)",
        "maxSum(nums = [1,1,2,3,4], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 3)",
        "maxSum(nums = [1,1,1,4,0,0,0,0,3,1,2,2], m = 3, k = 2)",
        "maxSum(nums=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m=4, k=10)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], m = 3, k = 5)",
        "maxSum(nums = [1, 1, 1, 4, 4, 4, 2, 2, 2, 2], m = 3, k = 2)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\"], x = \"p\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1, 2, 3, 2, 1, 3], moveFrom = [1, 2], moveTo = [3, 2])",
        "relocateMarbles(nums=[2, 2, 1, 3, 3, 1], moveFrom=[1, 2], moveTo=[3, 1])",
        "relocateMarbles(nums = [1,2,2,3], moveFrom = [1,2], moveTo = [3,3])",
        "relocateMarbles(nums = [1,1,1,2,2,2,3,3,3], moveFrom = [1,2,3], moveTo = [2,3,4])",
        "relocateMarbles(nums = [2,1,1,3,2,3,4,2,1], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1,2,3,2,5,1], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,3,4,5,5,5,6,7,7,7], moveFrom = [1,3], moveTo = [2,4])",
        "relocateMarbles(nums = [1,2,3,2,3,1,2,2], moveFrom = [1,2,3], moveTo = [3,1,2])",
        "relocateMarbles(nums=[1,2,3,4,1,2,3,1,2,1], moveFrom=[2,3,4], moveTo=[3,4,5])",
        "relocateMarbles(nums=[2,2,2,3,3,3,3,4,4,4,4,4], moveFrom=[1,2,3,1,2,3,1,4,2,3,4,4], moveTo=[3,4,5,3,4,5,3,4,5,4,5,4])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 3, 2, 4])",
        "maximumTripletValue(nums = [1, 3, 2, 4])",
        "maximumTripletValue(nums = [1, 3, 2, 4])",
        "maximumTripletValue(nums = [1, 3, 2, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 5, 3])",
        "maximumTripletValue(nums = [1, 3, 2])",
        "maximumTripletValue(nums = [2, 3, 1, 5, 4])",
        "maximumTripletValue(nums = [2, 4, 1, 0, 3, 5])",
        "maximumTripletValue(nums = [3, 7, 1, 2, 8, 4, 6])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccddbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"bb\")",
        "longestSemiRepetitiveSubstring(s = \"bbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"aaa\", \"bbb\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"mom\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"yxz\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"adfa\", \"abba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])",
        "matrixSum(nums = [[3, 2, 1], [1, 2, 3]])",
        "matrixSum(nums = [[5, 1, 3], [2, 1, 1], [1, 1, 4]])",
        "matrixSum(nums = [[3, 1, 4], [2, 6, 5], [1, 9, 8]])",
        "matrixSum(nums = [[2, 5, 3, 1], [1, 2, 3, 4], [5, 5, 5, 5]])",
        "matrixSum(nums = [[7,2,1],[9,6,7],[4,7,8]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aaaaa\", s2 = \"bbbbb\", s3 = \"aaaaa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"abca\", s2 = \"abcb\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"xycd\", s3 = \"abcxy\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"acb\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"aabbb\", s2 = \"bb\", s3 = \"bb\")",
        "findMinimumOperations(s1 = \"abacaba\", s2 = \"bababa\", s3 = \"abacaaba\")",
        "findMinimumOperations(s1 = \"aaaaa\", s2 = \"bbb\", s3 = \"cc\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"ada\", s3 = \"aab\")"
    ],
    "sample_324": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5,7,10])",
        "minimumCoins(prices = [1, 4, 5, 7])",
        "minimumCoins(prices = [1,3,7])",
        "minimumCoins(prices = [2,5,7,8])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [2, 3, 0, 1, 4])",
        "minimumCoins(prices = [1, 5, 6, 7, 20])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 7, 9], target = 10)",
        "countPairs(nums = [1, 5, 7, 8, 9], target = 11)",
        "countPairs(nums = [1, 3, 2, 5], target = 6)",
        "countPairs(nums = [1,3,2,4,5], target = 8)",
        "countPairs(nums=[1, 2, 7, 11, 5], target=13)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,4,4,4,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,5,5,6,7,7,8,9,9,9,10,10,10,10])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [2, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 3, 5, 7], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 5, 7, 8, 9], target = 12)",
        "countPairs(nums = [2, 3, 5, 7, 11], target = 18)",
        "countPairs(nums = [1, 3, 2, 5, 7, 8, 9], target = 6)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1,1], money = 4)",
        "buyChoco(prices = [1,1], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 6)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"xyzz\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"tac\", \"god\", \"odg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"apple\", \"grape\", \"banana\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"programming\")",
        "sortVowels(s=\"lEOtcede\")",
        "sortVowels(s = \"Educated\")",
        "sortVowels(s = 'program')",
        "sortVowels(s = \"Let's eat, Grandma\")",
        "sortVowels(s = \"Leeotcede\")",
        "sortVowels(s = \"Letter\")",
        "sortVowels(s = \"programming\")",
        "sortVowels(s = 'Letuce')",
        "sortVowels(s = 'HellO')"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 1, 2])"
    ],
    "sample_477": [
        "minimumCoins(prices = [25, 10, 5, 2, 1])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [25, 10, 5, 21, 33])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [2, 5, 7, 8, 10])",
        "minimumCoins(prices = [1, 5, 6, 7, 10, 1, 1, 1])",
        "minimumCoins(prices = [25, 10, 5, 17])",
        "minimumCoins(prices = [1, 5, 3, 10])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n = 100, m = 50)",
        "differenceOfSums(n = 30, m = 4)"
    ],
    "sample_307": [
        "countSeniors(details = [\"1990-01-01M\", \"2002-12-31F\"])",
        "countSeniors(details = [\"John Doe;25\", \"Jane Doe;68\", \"Jim Doe;55\"])",
        "countSeniors(details = [\"1945-01-01M\", \"1985-12-25F\", \"2000-05-15M\"])",
        "countSeniors(details = [\"JohnDoe84\", \"JaneDoe79\"])",
        "countSeniors(details = [\"1990-01-01T07:13:37Z\", \"1969-12-31T23:59:59Z\"])",
        "countSeniors(details = [\"04/12/2012 60\", \"31/12/2012 70\"])",
        "countSeniors(details = [\"1990-08-01M55S00\", \"1976-03-01M20S00\"])",
        "countSeniors(details = [\"02-08-2010\", \"20-09-1984\", \"25-12-1999\"])",
        "countSeniors(details = [\"1992-09-15 02:13:10\", \"1982-09-15 02:13:10\"])",
        "countSeniors(details = [\"19450803-0349\", \"19960916-0334\", \"19780903-0334\"])"
    ],
    "sample_323": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 123)",
        "isFascinating(n = 198)",
        "isFascinating(n = 1)",
        "isFascinating(n = 248)",
        "isFascinating(n = 21)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"1101110111011101\")",
        "minimumBeautifulSubstrings(s = \"111000\")",
        "minimumBeautifulSubstrings(s = \"11011101110111\")",
        "minimumBeautifulSubstrings(s = \"1101110111011101\")",
        "minimumBeautifulSubstrings(s = \"110111011101\")",
        "minimumBeautifulSubstrings(s = \"110111011110111\")",
        "minimumBeautifulSubstrings(s = \"110111011101110\")",
        "minimumBeautifulSubstrings(s = \"111011101110111\")",
        "minimumBeautifulSubstrings(s = \"11111111111111111111\")",
        "minimumBeautifulSubstrings(s = \"11100010001100100011\")"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 6)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 3, limit = 2)"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [2,3,1,4,3], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"-1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"visit\", \"prev\", \"prev\", \"visit\", \"visit\"])",
        "lastVisitedIntegers(words = [\"prev\", \"15\", \"incr\", \"10\", \"incr\", \"incr\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [2, 7, 4, 1, 8, 1], k = 11)",
        "minOperations(nums = [2, 7, 4, 1, 8, 1], k = 10)",
        "minOperations(nums = [2, 2, 1, 1, 5], k = 3)",
        "minOperations(nums = [2, 7, 4, 1, 8, 1], k = 11)",
        "minOperations(nums = [2, 3, 4, 7], k = 6)",
        "minOperations(nums = [2, 1, 2, 5], k = 3)",
        "minOperations(nums = [1, 1, 1, 2, 2, 3], k = 3)",
        "minOperations(nums = [1, 1, 3, 4, 1, 1, 1], k = 4)",
        "minOperations(nums = [2, 1, 2, 2], k = 3)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaaab\")",
        "longestSemiRepetitiveSubstring(s = \"abaa\")",
        "longestSemiRepetitiveSubstring(s = \"bbbaaa\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 2])",
        "sumCounts(nums = [2, 1, 2, 3, 4])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 4)",
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"110101\", k = 4)",
        "shortestBeautifulSubstring(s = \"001110\", k = 4)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"111111\")",
        "minimumBeautifulSubstrings(s = \"1111111111\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"110111\")",
        "minimumBeautifulSubstrings(s = \"110111\")",
        "minimumBeautifulSubstrings(s = \"110111\")",
        "minimumBeautifulSubstrings(s = \"111000\")",
        "minimumBeautifulSubstrings(s = \"1567\")",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111\")",
        "minimumBeautifulSubstrings(s = \"111111111111\")"
    ],
    "sample_341": [
        "longestString(x = 5, y = 6, z = 7)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 4, y = 5, z = 6)",
        "longestString(x = 10, y = 15, z = 20)",
        "longestString(x = 5, y = 7, z = 1)",
        "longestString(x = 4, y = 3, z = 1)",
        "longestString(x = 7, y = 5, z = 6)",
        "longestString(x = 5, y = 6, z = 2)",
        "longestString(x=10, y=20, z=30)",
        "longestString(x = 6, y = 5, z = 1)"
    ],
    "sample_274": [
        "findChampion(grid = [[1,0,1],[0,1,0],[1,0,1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 1, 1], [1, 0, 1, 0], [0, 1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1, 0, 1], \n                          [0, 1, 0, 1, 0], \n                          [1, 0, 1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1, 0], [0, 1, 1, 1], [1, 0, 1, 0], [0, 1, 1, 1]])",
        "findChampion(grid = [[0, 0, 1, 0, 1], [0, 1, 1, 0, 0], [1, 1, 1, 0, 0], [0, 0, 0, 1, 1], [1, 0, 0, 1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0, 1], [1, 1, 1, 1, 0], [1, 1, 1, 1, 1], [1, 0, 0, 0, 0], [1, 1, 1, 1, 1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"apple\", k = 1)",
        "beautifulSubstrings(s = \"be\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"bac\", k = 4)",
        "beautifulSubstrings(s = \"bc\", k = 4)",
        "beautifulSubstrings(s = \"abcde\", k = 5)"
    ],
    "sample_304": [
        "countSeniors(details = [\"1990-01-01M50\", \"1985-12-25M45\"])",
        "countSeniors(details = [\"J123456781011\", \"B23456781011\", \"A123456781011\"])",
        "countSeniors(details = [\"1990-08-15 01:30:00 PM\", \"1995-10-10 12:00:00 AM\"])",
        "countSeniors(details = [\"john18\", \"sam54\", \"alice65\"])",
        "countSeniors(details = [\"0001023456781830\", \"0001023456781835\", \"0001023456781840\"])",
        "countSeniors(details = [\"1991-08-05T00:00:00-06:00\", \"1982-04-05T00:00:00-06:00\"])",
        "countSeniors(details = [\"000000001385\", \"110000000133\", \"221111111111\"])",
        "countSeniors(details = [\"1990-05-25T19:30\", \"2005-07-05T12:25\", \"2002-11-05T09:10\"])",
        "countSeniors(details = [\"1945090312345671\", \"1985121416000001\"])",
        "countSeniors(details = [\"1990-01-01M45\", \"1985-12-25F35\", \"1994-05-15M25\", \"1975-09-01F10\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0])",
        "maximumTripletValue(nums = [2, 1, 3, 2, 4, 3, 5])",
        "maximumTripletValue(nums = [1, 3, 2, 5, 7, 6, 4])",
        "maximumTripletValue(nums = [1, 0, 0, 1, 0, 1])",
        "maximumTripletValue(nums = [2, 5, 7, 1, 8, 0])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"1111111111\")",
        "minimumBeautifulSubstrings(s = \"1111111111\")",
        "minimumBeautifulSubstrings(s = \"1111111111\")",
        "minimumBeautifulSubstrings(s = \"1567\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"111111\")",
        "minimumBeautifulSubstrings(s = \"111111\")",
        "minimumBeautifulSubstrings(s = \"11111111111\")",
        "minimumBeautifulSubstrings(s = \"11111111111111111111111111111111111111111111111111111111111111111\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1, 2, 2, 3, 4, 4, 4])",
        "maxSubarrays(nums = [1, 2, 2, 3, 4, 4, 4])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 2, 4])",
        "maxSubarrays(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 1, 0, 0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 0, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "minOperations(a = [3, 2, 1], b = [1, 2, 3])",
        "minOperations(a = [3, 2, 1], b = [1, 2, 3])",
        "minOperations(a = [1, 2, 3, 4], b = [4, 3, 2, 1])",
        "minOperations(a = [2, 3, 4, 5], b = [1, 1, 2, 4])",
        "minOperations(a = [1, 2, 3], b = [2, 1, 0])",
        "minOperations(a = [1, 1, 1, 1, 1], b = [2, 2, 2, 2, 2])",
        "minOperations(a = [2,1,3], b = [1,2,3])",
        "minOperations(a = [5, 3, 2], b = [10, 1, 1])",
        "minOperations(a = [5, 2, 4, 6], b = [5, 1, 3, 6])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"cherry\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tiger\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"efg\", \"hij\", \"klm\"])",
        "minimizeConcatenatedLength(words = [\"bb\", \"ba\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"john\", \"mary\", \"susan\", \"anna\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mnop\", \"qrs\", \"tuv\", \"wxyz\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"Ymplh\")",
        "sortVowels(s = \"Ymplh\")",
        "sortVowels(s = \"mYthOn\")",
        "sortVowels(s = \"I love python\")",
        "sortVowels(s = \"Emily\")",
        "sortVowels(s = \"IMPLEMENTATION\")",
        "sortVowels(s = \"My name is Alice\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 2, 1])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 5, 3, 4, 2])",
        "minimumSum(nums = [5, 5, 1, 2, 3, 4])",
        "minimumSum(nums = [2, 1, 5, 2, 3, 2])",
        "minimumSum(nums = [5, 5, 1, 1, 5])",
        "minimumSum(nums = [5, 5, 1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "minimumSum(nums = [6, 4, 1])",
        "minimumSum(nums = [5, 9, 6, 10, 2, 3, 8, 1, 4, 7])",
        "minimumSum(nums = [5, 9, 6, 1, 5, 8])",
        "minimumSum(nums = [2, 1, 5, 3, 3, 2, 2])",
        "minimumSum(nums = [1, 5, 3, 4, 2, 6, 9, 8, 7])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1, 1],[0, 1, 0, 1],[1, 1, 0, 0]])",
        "findChampion(grid = [[1,2,1,2,1],[2,1,2,1,2],[1,2,1,2,1],[2,1,2,1,2],[1,2,1,2,1]])",
        "findChampion(grid = [[2, 1, 0, 0],[0, 2, 0, 0],[0, 0, 2, 1],[0, 0, 0, 2]])",
        "findChampion(grid = [[0, 0, 0, 1], [1, 1, 1, 0], [2, 0, 0, 0]])",
        "findChampion(grid = [[2, 1, 2, 2],[1, 1, 0, 1],[2, 1, 1, 2]])",
        "findChampion(grid = [[0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0]])",
        "findChampion(grid = [[2, 1, 3, 1, 0], [1, 2, 2, 0, 1], [2, 2, 1, 2, 0], [0, 1, 1, 2, 2], [2, 0, 0, 1, 1]])"
    ],
    "sample_372": [
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"apple\")",
        "sortVowels(s=\"banana\")",
        "sortVowels(s = \"lEoTcedE\")",
        "sortVowels(s = \"Electricity\")",
        "sortVowels(s = \"TrEaKcOdNG\")",
        "sortVowels(s = \"Eloctwed\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"11001100\")",
        "minimumSteps(s = \"100010001\")",
        "minimumSteps(s = \"11010011\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [3, 1, 4, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7])",
        "minimumRightShifts(nums = [2, 3, 1, 4])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumRightShifts(nums = [1, 2, 4, 4, 5, 6])",
        "minimumRightShifts(nums = [7, 1, 3, 2, 6, 8, 4, 5])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 4])",
        "minOperations(nums = [1,1,1,2,2,2,3,3,3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 5, 5, 5])",
        "minOperations(nums = [1,1,1,2,2,2,3,3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2])"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"mYpH\")",
        "sortVowels(s = \"lmpHY\")",
        "sortVowels(s = \"ymPhl\")",
        "sortVowels(s = \"mpHliY\")",
        "sortVowels(s = \"language\")",
        "sortVowels(s = \"you\")",
        "sortVowels(s = \"banana\")"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0,0,0,0], [1,1,1,1], [2,2,2,2]])",
        "findChampion(grid = [[1, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1, 0, 0], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 0, 1, 0, 1]])",
        "findChampion(grid = [[0,0,0,0],[0,0,0,1],[0,0,1,0]])",
        "findChampion(grid = [[0,1,1,1,0], [0,0,1,1,0], [1,1,1,1,0], [0,0,0,0,0]])",
        "findChampion(grid = [[1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [3, 2, 1], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 1, 1])",
        "minSum(nums1 = [1, 5, 1, 5], nums2 = [1, 5, 1, 5])",
        "minSum(nums1 = [2,1,1,1,0], nums2 = [1,1,1,1,1])",
        "minSum(nums1 = [1, 1, 2, 4], nums2 = [3, 4, 1, 2])",
        "minSum(nums1 = [1, 2, 3, 1, 4], nums2 = [3, 2, 3, 1, 0])",
        "minSum(nums1 = [1, 5, 7, 9, 2, 3, 4], nums2 = [2, 2, 2, 2, 2, 2, 2])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [2, 3, 1, 4, 3], k = 4)",
        "minOperations(nums = [2, 3, 1, 5, 3, 2], k = 4)",
        "minOperations(nums = [3, 1, 4, 2], k = 6)",
        "minOperations(nums=[1, 2, 3, 4, 5], k=5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 5, 6, 2], k = 3)",
        "minOperations(nums = [1, 3, 2, 4, 5], k = 5)",
        "minOperations(nums=[1, 5, 3, 6, 8, 10], k=4)",
        "minOperations(nums = [2, 5, 8, 1, 10], k = 2)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [2, 1, 3, 2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3, 2, 1], moveFrom = [2, 1], moveTo = [3, 2])",
        "relocateMarbles(nums = [1, 2, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 3], moveTo = [2, 5])",
        "relocateMarbles(nums = [5, 1, 4, 2, 3], moveFrom = [1, 2], moveTo = [2, 5])",
        "relocateMarbles(nums = [1,2,3,5], moveFrom = [1,2], moveTo = [4,5])",
        "relocateMarbles(nums = [0, 2, 3, 1], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [2, 1, 2, 3, 2, 1, 1, 2], moveFrom = [2, 1], moveTo = [3, 2])",
        "relocateMarbles(nums = [0, 1, 2, 1, 0, 2, 1, 2], moveFrom = [0, 1, 1, 0], moveTo = [1, 2, 2, 1])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums=[1,2,3,4,5], m=2, k=4)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 3, k = 6)",
        "maxSum(nums = [3, 2, 1, 5, 6, 4], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1], m = 2, k = 5)",
        "maxSum(nums = [1, 2, 3, 1, 4, 5], m = 3, k = 4)",
        "maxSum(nums = [2, 1, 3, 1, 4, 3, 2, 1, 5], m = 3, k = 4)",
        "maxSum(nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2], m = 4, k = 5)",
        "maxSum(nums = [5, 2, 9, 7, 8, 1, 6, 4, 3, 1], m = 3, k = 3)",
        "maxSum(nums = [2, 3, 5, 7, 2, 1, 4, 2, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7, 2, 3], m = 4, k = 30)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"azcz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"azc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"azcb\")",
        "canMakeSubsequence(s1 = \"coffee\", s2 = \"mouse\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"zaaad\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"aace\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"adc\")",
        "canMakeSubsequence(s1 = \"coffee\", s2 = \"mug\")",
        "canMakeSubsequence(s1 = \"coffee\", s2 = \"ychae\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 1, 1], nums2 = [1, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [0,0,0,0,0])",
        "minSum(nums1 = [1, 0, 0, 1], nums2 = [0, 0, 1, 0])",
        "minSum(nums1 = [1, 2, 3, 0, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4, 0], nums2 = [3, 0, 5])",
        "minSum(nums1 = [1,0,1,2,0,1], nums2 = [1,0,1,2,0,1])",
        "minSum(nums1 = [1, 0, 3, 0, 2, 0, 2], nums2 = [3, 0, 2, 0, 0, 0, 2])",
        "minSum(nums1 = [1,2,3,4,5,6], nums2 = [0,0,0,0,0,1])",
        "minSum(nums1 = [2,0,1,2,0], nums2 = [0,3,2,0,2])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"visit\", \"prev\", \"prev\", \"visit\", \"prev\", \"prev\", \"visit\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"3\", \"2\", \"prev\", \"1\"])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 4, 5, 6])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0,1,2,4,5,6])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [0, 1, 2, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [1, 2, 3, 5, 6, 4, 7, 8, 9])",
        "isGood(nums = [1,2,3,5,7,8])",
        "isGood(nums = [0, 2, 3, 4, 5, 6, 8, 9])"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [3,3,3,6,6,6])",
        "minOperations(nums = [2,2,2,3,3])",
        "minOperations(nums = [2,2,2,3,3])",
        "minOperations(nums = [1,1,3,3,3,2,2,2])",
        "minOperations(nums = [2, 2, 2, 2, 1, 1])",
        "minOperations(nums = [2,3,6,5,2])",
        "minOperations(nums = [2, 1, 2, 1])",
        "minOperations(nums = [2,1,2,2,1,2,2])",
        "minOperations(nums = [2,2,2,2,2,2,2,3,3,3,3])"
    ],
    "sample_451": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1101\")",
        "minChanges(s = \"1001\")",
        "minChanges(s = \"abbbc\")",
        "minChanges(s = \"bca\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 30, limit = 20)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [4,3,5,2,6,7], nums2 = [5,5,5,5,5,5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [2,4,6,8,10])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [0, 0, 0, 0, 5])",
        "minSum(nums1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])",
        "minSum(nums1=[2,1,3,20,7], nums2=[3,2,3,0,9])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,0])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1,2,3,0,2,3,0,2,1])"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 5, 7, 8, 9], t = 11)",
        "countPairs(nums=[1, 1, 2, 3, 4], t=6)",
        "countPairs(nums=[1,3,2,4], t=7)",
        "countPairs(nums=[1, 1, 2, 3], t=6)",
        "countPairs(nums=[2, 1, 5, 7, 2, 0, 5], t=10)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"picked\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"pushed\", \"incorrect\", \"pushed\", \"correct\", \"incorrect\", \"pushed\"])",
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"reset\"])",
        "lastVisitedIntegers(words = [\"visit1\", \"visit2\", \"visit3\", \"visit1\", \"visit2\"])",
        "lastVisitedIntegers(words = [\"pushed\", \"incorporated\", \"pushed\", \"incremented\"])",
        "lastVisitedIntegers(words = [\"visit1\",\"visit2\",\"visit3\",\"p3\"])",
        "lastVisitedIntegers(words = [\"purchase\", \"view\", \"purchase\", \"purchase\", \"view\", \"purchase\"])",
        "lastVisitedIntegers(words = [\"jh\", \"jh\", \"jh\", \"jh\", \"jk\"])",
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"opened\", \"picked\", \"picked\", \"opened\", \"picked\"])",
        "lastVisitedIntegers(words = [\"pickup\", \"8\", \"9\", \"drop\", \"pickup\", \"10\", \"pickup\", \"7\", \"8\", \"drop\", \"drop\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcz\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcz\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abcdz\", str2 = \"abcda\")",
        "canMakeSubsequence(str1 = \"lmn\", str2 = \"abmno\")",
        "canMakeSubsequence(str1 = \"lmnop\", str2 = \"aabp\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [0, 2, 1, -6], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,1,1,1,1])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [3,4,5,6,7])",
        "minSum(nums1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], nums2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1])",
        "minSum(nums1 = [2, 1, 3, 1], nums2 = [2, 1, 3, 1])",
        "minSum(nums1 = [0,0,0,0,1], nums2 = [2,2,3,0,0])",
        "minSum(nums1 = [2,3,5,7,11], nums2 = [1,1,3,4,7,13])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4]], k = 2)",
        "countPairs(coordinates = [[0,0], [0,1], [1,0], [1,1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 1], [0, 2]], k = 1)",
        "countPairs(coordinates=[[0, 0], [0, 1], [1, 1], [2, 2]], k=1)",
        "countPairs(coordinates=[(1, 1), (2, 2), (3, 3), (1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2), (4, 4)], k=3)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1,2,3,4,5])",
        "maxStrength(nums = [1, -2, -3, 4, -5])",
        "maxStrength(nums = [1, 4, 3, 2, 5])",
        "maxStrength(nums = [1, -2, 3, 4, -5])",
        "maxStrength(nums = [4, -2, 3, -1])",
        "maxStrength(nums = [2,3,3,1,3])",
        "maxStrength(nums = [1, 3, 3, 2, -1, -2])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 4, 2, 7])",
        "minimumCoins(prices = [1, 5, 2, 4])",
        "minimumCoins(prices = [1, 2, 4, 2, 5, 4, 8, 1])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 2])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3,1,2,3,5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,4,3,2,1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 4, 4, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 11)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 12)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 15)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 11)",
        "buyChoco(prices = [1, 6, 7, 8], money = 11)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"forward\", \"forward\", \"prev\"])",
        "lastVisitedIntegers(words = [\"visit\", \"prev\", \"prev\", \"visit\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 1, 2])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 5, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 5, 6, 6, 8, 9], moveFrom = [5, 6], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 6, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2], moveTo = [5])",
        "relocateMarbles(nums = [8, 6, 9, 5], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [9, 8, 7, 6, 5], moveFrom = [5, 6, 7], moveTo = [3, 4, 2])",
        "relocateMarbles(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom=[1, 3, 5], moveTo=[4, 6, 8])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcbac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcbc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcbaz\")",
        "canMakeSubsequence(str1 = \"coz\", str2 = \"subsiceuq\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"acd\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"aed\")",
        "canMakeSubsequence(str1 = \"coffee\", str2 = \"abcdefgzzz\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"one\", \"two\", \"three\"], x = \"o\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\"], x = \"o\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1,2,3,4],[5,6,7,8],[9,10,11,12]])",
        "matrixSum(nums = [[7, 1, 3], [5, 9, 8]])",
        "matrixSum(nums = [[1, 7, 3], [9, 2, 8], [5, 4, 7]])",
        "matrixSum(nums = [[0,1,0,0,0,6], [1,2,1,2,1,7], [2,2,0,2,1,7], [0,1,2,2,1,8]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 6, 5, 2], money = 10)",
        "buyChoco(a = [1, 6, 5, 2], money = 10)",
        "buyChoco(a = [1, 6, 5, 2], money = 13)",
        "buyChoco(a = [1, 6, 1], money = 8)",
        "buyChoco(a = [1, 2, 3, 4, 5], money = 9)",
        "buyChoco(a = [3, 1], money = 8)",
        "buyChoco(a = [1, 2], money = 6)",
        "buyChoco(a = [1, 7, 1], money = 15)",
        "buyChoco(a = [2, 3, 5], money = 10)",
        "buyChoco(a = [1, 7, 5, 4, 2], money = 10)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minGroupsForValidAssignment(nums = [3, 1, 3, 1, 5])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 3, 5, 8])",
        "minGroupsForValidAssignment(nums = [4, 5, 6, 7])",
        "minGroupsForValidAssignment(nums = [3, 6, 7, 8, 10, 12, 15, 16])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [2, 3, 1, 5])",
        "minimumRightShifts(nums = [3, 1, 3])",
        "minimumRightShifts(nums = [3, 2, 1, 5, 4, 3])",
        "minimumRightShifts(nums = [1,2,4,3,2])",
        "minimumRightShifts(nums = [1,2,3,4,5,6])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 6, 7])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [2, 5, 6, 7, 4])",
        "maxStrength(nums = [1, 3, 3, 7])",
        "maxStrength(nums = [1, 3, 3, 3, 2, 4])"
    ],
    "sample_464": [
        "distributeCandies(n=5, limit=3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 20, limit = 5)",
        "distributeCandies(n = 10, limit = 6)",
        "distributeCandies(n = 3, limit = 10)",
        "distributeCandies(n = 10, limit = 15)",
        "distributeCandies(n = 5, limit = 20)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 5, 5, 5, 4, 2, 1, 3, 2])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"or\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"Hello\", \"World\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"or\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\"], x = \"p\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 1, 1, 1], [0, 0, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 1, 1]])",
        "findChampion(grid = [[1, 1, 0, 1], [0, 1, 1, 1], [1, 0, 1, 0], [0, 1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 0, 0], [0, 1, 1, 1, 0], [0, 0, 1, 1, 1], [1, 0, 0, 1, 0], [0, 1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1]])",
        "findChampion(grid = [[3, 1, 0, 1], [0, 2, 1, 1], [1, 1, 0, 1], [1, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], \n                          [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], \n                          [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], \n                          [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], \n                          [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], \n                          [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], \n                          [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], \n                          [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], \n                          [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], \n                          [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], \n                          [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1], \n                          [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [2, 3, 5, 7, 11])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 5, 5, 5])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 4])",
        "maxSubarrays(nums = [2,3,4,7,8,1,2,3,4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 5, 5, 6, 7, 8])",
        "maxSubarrays(nums = [1,1,2,3,5,6,7,7,8,9,10])",
        "maxSubarrays(nums = [1,2,3,5,7,11])",
        "maxSubarrays(nums = [2,3,4,5,6,7,8,9,10,11,12,0,1,2,3,4,5,6,7,8,9,10,11,12])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"bcbcbc\", k = 2)",
        "beautifulSubstrings(s = \"bbc\", k = 2)",
        "beautifulSubstrings(s = \"eouaa\", k = 2)",
        "beautifulSubstrings(s = \"eaea\", k = 2)",
        "beautifulSubstrings(s = \"eaouaei\", k = 2)",
        "beautifulSubstrings(s = \"bababa\", k = 1)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 3, 2, 2, 5, 2, 3, 7])",
        "minimumSeconds(nums = [1,1,1,2,2,2])",
        "minimumSeconds(nums = [1, 3, 3, 3, 2, 4, 3, 2, 1])",
        "minimumSeconds(nums = [1,1,1,1,1])",
        "minimumSeconds(nums = [3, 3, 1, 2, 3])",
        "minimumSeconds(nums = [3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1])",
        "minimumSeconds(nums = [5, 1, 3, 3, 1, 1])",
        "minimumSeconds(nums = [3, 3, 1, 2, 2, 2, 3])",
        "minimumSeconds(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 8, 9, 9])"
    ],
    "sample_327": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 198)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 8, 10, 11], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,3,6,7,9,4,10,5,6], target = 20)",
        "lengthOfLongestSubsequence(nums = [1, 3, 6, 7, 9, 4, 10, 11, 15], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 3, 7, 13, 5, 11], target = 11)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[5, 1, 3], [2, 1]])",
        "matrixSum(nums = [[2, 3, 4], [1, 6, 5]])",
        "matrixSum(nums = [[5, 4, 1], [2, 3, 6], [8, 10, 1]])",
        "matrixSum(nums = [[7,1,3,5,8], [2,4,6], [0,9]])"
    ],
    "sample_326": [
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 198)",
        "isFascinating(n = 198)",
        "isFascinating(n = 213)",
        "isFascinating(n = 27)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]])",
        "findChampion(grid = [[0,1,0],[0,0,1],[0,1,0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])",
        "findChampion(grid = [[1, 1, 0, 1], [1, 0, 0, 1], [1, 0, 1, 1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [1, 5, 3, 2])",
        "minimumSum(nums = [5, 5, 1, 2, 3])",
        "minimumSum(nums = [5, 5, 1, 1, 2, 3])",
        "minimumSum(nums = [2, 1, 3, 2])",
        "minimumSum(nums = [12, 1, 61, 5, 3, 62, 14])",
        "minimumSum(nums = [1,5,3,6,7,4])",
        "minimumSum(nums = [3,5,2,4])",
        "minimumSum(nums = [12, 7, 11, 9, 19])",
        "minimumSum(nums = [1, 5, 3, 9, 2])"
    ],
    "sample_450": [
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aaa\")",
        "minChanges(\"aaa\")",
        "minChanges(s = \"abcd\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"1101\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"001010\", s2 = \"010100\", x = 3)",
        "minOperations(s1 = \"0001\", s2 = \"1100\", x = 2)",
        "minOperations(s1 = \"1000\", s2 = \"0110\", x = 2)",
        "minOperations(s1 = \"0010\", s2 = \"110\", x = 2)",
        "minOperations(s1 = \"0010\", s2 = \"0110\", x = 2)",
        "minOperations(s1 = \"10011\", s2 = \"00101\", x = 4)",
        "minOperations(s1 = \"101010101\", s2 = \"100000000\", x = 2)",
        "minOperations(s1 = \"00011100\", s2 = \"00011111\", x = 2)",
        "minOperations(s1 = \"10001001\", s2 = \"00101000\", x = 2)"
    ],
    "sample_342": [
        "longestString(x = 10, y = 15, z = 5)",
        "longestString(x = 10, y = 15, z = 5)",
        "longestString(x = 5, y = 5, z = 5)",
        "longestString(x = 5, y = 6, z = 7)",
        "longestString(x = 10, y = 5, z = 2)",
        "longestString(x = 5, y = 6, z = 1)",
        "longestString(x = 3, y = 5, z = 7)",
        "longestString(x = 5, y = 4, z = 3)",
        "longestString(x = 2, y = 4, z = 1)",
        "longestString(x = 5, y = 4, z = 1)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 5, 5, 5])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [3, 5, 7, 2, 8, 10])",
        "maxSubarrays(nums = [2, 3, 5, 7])",
        "maxSubarrays(nums = [1,1,1,1,1,1,1,1])",
        "maxSubarrays(nums = [1, 2, 3, 1, 1, 2, 1, 3])",
        "maxSubarrays(nums = [1, 0, 2, -2, 1, 2, -1])",
        "maxSubarrays(nums = [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John Doe, 65\", \"Jane Doe, 70\"])",
        "countSeniors(details = [\"John-22\", \"Anna-72\", \"Kate-61\"])",
        "countSeniors(details = [\"1990s\", \"1976s\", \"1998s\"])",
        "countSeniors(details = [\"mq1992\", \"px3000\", \"zy78\"])",
        "countSeniors(details = [\"john18\", \"david31\", \"mike04\"])",
        "countSeniors(details = [\"1990sag\", \"2000sag\", \"1989sag\"])",
        "countSeniors(details = [\"12345678909B123\", \"12345678909B456\", \"12345678909B789\"])",
        "countSeniors(details = [\"johnDoe65\", \"mary67\", \"alice73\"])",
        "countSeniors(details = [\"19265291738960123\", \"20265291738960123\"])",
        "countSeniors(details = [\"mq19900325A\", \"px19930522B\", \"zy19871214C\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1,1,0,0,1,1,0,1])",
        "maxSubarrays(nums = [2, 1, 4, 7, 3, 1, 6, 0])",
        "maxSubarrays(nums = [2, 3, 4, 1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 1, 3, 4, 5, 1])",
        "maxSubarrays(nums = [2, 4, 5, 3, 6, 8, 7, 1])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 5, 6, 3, 4, 8, 9], moveFrom = [1, 2], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [4, 5, 6])",
        "relocateMarbles(nums = [5, 5, 5, 6, 6, 6, 6, 9, 9, 9], moveFrom = [5, 6], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 6, 6, 8, 9], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 5, 6, 4, 3, 8, 9], moveFrom = [1, 2], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 5, 4, 6, 7, 8, 9], moveFrom = [1, 3], moveTo = [2, 5])",
        "relocateMarbles(nums = [5, 5, 5, 5], moveFrom = [1, 2, 3, 4], moveTo = [6, 7, 8, 9])",
        "relocateMarbles(nums=[1, 2, 5, 6, 3, 4, 5], moveFrom=[1, 2, 5], moveTo=[6, 5, 8])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"aaaaa\", s2 = \"bbbbb\", s3 = \"ccccc\")",
        "findMinimumOperations(s1 = \"aaaaa\", s2 = \"bbbbb\", s3 = \"ccccc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abce\", s3 = \"abcff\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"bbbb\", s3 = \"cccc\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [2, 1, 1])",
        "minLengthAfterRemovals(nums = [2,4,6])",
        "minLengthAfterRemovals(nums = [4,8,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 4])",
        "minLengthAfterRemovals(nums = [3, 4, 8, 1, 3])",
        "minLengthAfterRemovals(nums = [1,1,3,3,3,7,7,7,7,1,2,2,2,2])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 10], [2, 1, 6]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 10], [2, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 1], [2, 4, 6]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [2, 3, 6], [0, 3, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [0, 3, 10]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 6], [2, 1, 3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 1], [0, 1, 7]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [2, 3, 4], [1, 2, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 3, 6], [0, 2, 10]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 2], [2, 2, 4], [0, 2, 5]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5,6], m = 10)",
        "canSplitArray(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "canSplitArray(nums = [2,2,2,2], m = 4)",
        "canSplitArray(nums=[4,5,5,4], m=6)",
        "canSplitArray(nums = [1,1,1,1,1,1,1,1,1], m = 2)",
        "canSplitArray(nums = [1,1,1,1,1], m = 1)",
        "canSplitArray(nums=[1,2,3,8,5], m=6)",
        "canSplitArray(nums = [4,7,3,10], m = 6)",
        "canSplitArray(nums = [4,5,5,2,1,1,9,3,3,8,2,4], m = 6)",
        "canSplitArray(nums = [2,5,9,10,15,19,20], m = 21)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 3, 5, 7, 9], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "checkArray(nums = [1, 2, 3, 5, 6, 7], k = 2)",
        "checkArray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], k = 2)",
        "checkArray(nums = [1, 2, 3, 3, 5, 6, 7], k = 2)",
        "checkArray(nums = [2, 3, 1, 5, 3, 2, 1], k = 2)",
        "checkArray(nums = [1, 3, 4, 2, 6, 8, 4, 3], k = 2)",
        "checkArray(nums = [2, 1, 5, 1, 3, 9, 1], k = 2)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [1, 3, 5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [4, 3, 2, 4], k = 2)",
        "maximumBeauty(nums = [1,3,3,9,2,4,9,4], k = 6)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"orange\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"I\", \"love\", \"python\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"mango\"], separator = \"a\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [2, 2, 2])",
        "countWays(nums = [1,3,4])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1, 2, 3, 4, 3, 3])",
        "minimumIndex(nums = [0, 0, 1, 1, 1, 1])",
        "minimumIndex(nums = [1,1,2,2,3,3,4,4,5,5,6,7,7,8,8,9,9])",
        "minimumIndex(nums = [2,2,2,3,3,3,3,3])",
        "minimumIndex(nums = [2,2,1,3,2,1,4])",
        "minimumIndex(nums = [0,1,2,3,3,3,2,3,2,1,0])",
        "minimumIndex(nums = [1, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8])",
        "minimumIndex(nums = [0, 0, 0, 1, 0, 1, 0, 1])",
        "minimumIndex(nums = [1,3,4,4,3,2,2,5,6,1])",
        "minimumIndex(nums = [2,2,2,0,1,1,2,1,1,1,1,0,0,0,0,0,1,1,1])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [5, 7], [2, 8]])",
        "numberOfPoints(nums = [[1, 2], [4, 5], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [4, 5], [7, 8]])",
        "numberOfPoints(nums = [[1,3],[4,8],[10,20]])",
        "numberOfPoints(nums = [[1,3],[4,8],[10,20]])",
        "numberOfPoints(nums = [[0, 1], [2, 3], [4, 5], [6, 7]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [2,1,3,5,4])",
        "semiOrderedPermutation(nums = [2,1,3,5,4])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [3,2,1,5,4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 6])",
        "semiOrderedPermutation(nums = [3,2,1,5,6,7])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 10, target = 5)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 10, target = 6)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 6, target = 10)",
        "minimumPossibleSum(n = 6, target = 12)"
    ],
    "sample_118": [
        "minimumIndex(nums = [2, 1, 3, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [4, 1, 2, 3])",
        "minimumIndex(nums = [4, 1, 3, 2, 3])",
        "minimumIndex(nums = [2, 3, 1, 0, 4])",
        "minimumIndex(nums = [2, 2, 2, 2, 5, 5, 5, 5, 5])",
        "minimumIndex(nums = [1, 3, 3, 3, 4])",
        "minimumIndex(nums = [0, 1, 0, 0, 0, 0, 0])",
        "minimumIndex(nums = [0, 1, 2, 2, 2, 3, 4, 5, 6])"
    ],
    "sample_176": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 5, k = 21)",
        "minimumSum(n = 3, k = 13)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [4, 5], [7, 8]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [7, 8]])",
        "numberOfPoints(nums = [[2, 5], [3, 7], [1, 4]])",
        "numberOfPoints(nums = [[2, 5], [3, 7], [1, 4]])",
        "numberOfPoints(nums = [[1,3],[2,5],[7,9]])",
        "numberOfPoints(nums = [[0, 2], [4, 6]])",
        "numberOfPoints(nums = [[0, 10], [5, 15], [10, 20]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [2, 1, 3, 2, 2], target = 0)",
        "maximumJumps(nums = [2,2,3,5,1,1,0,1], target = 3)"
    ],
    "sample_173": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 7, k = 3)",
        "minimumSum(n = 7, k = 5)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 10, k = 6)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,3,4,5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums=[1,2,4,7,11], m=13)",
        "canSplitArray(nums=[1, 2, 4, 7, 11], m=18)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 9)",
        "canSplitArray(nums=[4,7,10,13], m=16)",
        "canSplitArray(nums=[1,1,3,3,4,4], m=6)",
        "canSplitArray(nums = [4,2,3,5,1], m = 8)",
        "canSplitArray(nums = [3, 3, 3, 1, 2], m = 6)",
        "canSplitArray(nums = [2,3,4,1,1,5], m = 7)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 3, 6]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 5], [1, 2, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 3, 6], [2, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 3], [3, 4, 6], [1, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [3, 4, 5], [2, 3, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 6, 7], [3, 6, 9]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 3], [1, 2, 3], [3, 4, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [5, 4, 6], [3, 1, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 2], [5, 1, 10], [2, 4, 7]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 2], [4, 3, 2], [3, 2, 5]])"
    ],
    "sample_108": [
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1], k = 3)",
        "checkArray(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 3)",
        "checkArray(nums=[1, 1, 1, 1, 1], k=1)",
        "checkArray(nums = [1, 1, 1, 1], k = 2)",
        "checkArray(nums=[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
        "checkArray(nums=[0, 1, 0, 0, 1, 0, 1], k=2)",
        "checkArray(nums = [1, 2, 3, 0, 2, 3, 0], k = 2)",
        "checkArray(nums = [2, 7, 9, 3, 1, 7, 1], k = 1)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1,2,2,2,3,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 3, 2, 1], k = 3)",
        "longestEqualSubarray(nums = [1,1,1,1,1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,1,4,5,6,7,8,9,9], k = 3)",
        "longestEqualSubarray(nums = [2,1,4,7,3,2,2,3,7,1,1], k = 3)",
        "longestEqualSubarray(nums = [1,1,2,2,2,2,3,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,2,4,2,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,1,4,2,5,6,7,8,9,9,9,9], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,2,1,2,2,2,1,2,1,1,1], k = 2)"
    ],
    "sample_8": [
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 3, queries = [[0, 2], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 10, queries = [[3, 8]])",
        "colorTheArray(n = 5, queries = [[0, 3], [1, 2], [3, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 1], [2, 0], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,3],[2,4],[1,4]])",
        "colorTheArray(n = 6, queries = [[2, 3], [1, 5], [3, 2]])"
    ],
    "sample_55": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"abczbd\")",
        "smallestString(s = \"bacd\")",
        "smallestString(s = \"dcbbc\")",
        "smallestString(s = \"ddddbbbaaa\")",
        "smallestString(s = \"ddddbbbcc\")",
        "smallestString(s = \"ddaass\")",
        "smallestString(s = 'bucdsa')",
        "smallestString(\"bnnna\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12], threshold = 4)",
        "longestAlternatingSubarray(nums = [5,7,9], threshold = 4)",
        "longestAlternatingSubarray(nums = [5, 3, 1, 2, 4, 2, 1, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 5, 12, 6, 8, 13, 10, 7, 9, 4], threshold = 20)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 4, 7, 10], threshold = 9)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3, 4, 4])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ACDB\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ACDAB\")",
        "minLength(s = \"abcABC\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABACABAD\")",
        "minLength(s = \"ACBCDAB\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcab\")",
        "minimumCost(s = \"aabaa\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 8)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [2, 5, 1, 9, 2], m = 11)",
        "canSplitArray(nums = [3, 1, 2, 2, 4, 3], m = 7)",
        "canSplitArray(nums = [3, 1, 2, 2, 4, 3], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 5, 7], m = 10)",
        "canSplitArray(nums = [5, 1, 2, 3, 4], m = 8)",
        "canSplitArray(nums = [1, 2, 5, 7, 11], m = 13)",
        "canSplitArray(nums = [3, 2, 2, 4], m = 7)",
        "canSplitArray(nums = [1, 3, 5, 7], m = 12)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1,2,3,2,1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 1, 2])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [3, 1, 4, 1, 5, 9], k = 4)",
        "checkArray(nums=[1, 1, 2, 1], k=1)",
        "checkArray(nums = [1,2,3,4,1,1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,5,2,3,4,6,7,8,9], k = 3)",
        "checkArray(nums=[5, 3, 8, 4, 6, 7], k=3)",
        "checkArray(nums = [1, 3, 5, 6, 4, 3, 2, 4], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 3, 4, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 7, 8, 10, 6], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 7, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 7, 9, 11], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 8, 10, 15], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 10, 15], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 15, 14, 16], target = 12)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums=[3, 1, 4], k=2)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [1, 5, 7, 8, 9], k = 1)",
        "maximumBeauty(nums = [4, 2, 3, 1, 5], k = 1)",
        "maximumBeauty(nums = [4, 3, 2, 4, 1, 2, 3, 4, 1], k = 2)",
        "maximumBeauty(nums = [4, 1, 3, 3, 5], k = 1)"
    ],
    "sample_205": [
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1110\")",
        "minimumOperations(num = \"1100000\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"250010\")",
        "minimumOperations(num = \"111001100111\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"110011\")",
        "minimumOperations(s = \"001100\")",
        "minimumOperations(s = \"01101\")",
        "minimumOperations(s = \"11100\")",
        "minimumOperations(s = \"00111\")",
        "minimumOperations(s = \"000000\")",
        "minimumOperations(s = \"01245\")",
        "minimumOperations(s = \"000000010111\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3, 5])",
        "semiOrderedPermutation(nums = [3, 2, 4, 1])",
        "semiOrderedPermutation(nums = [2,1,3,4,5])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"LRU\")",
        "furthestDistanceFromOrigin(moves = \"LLRU\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"NASA\", \"Space\"], s = \"NASA\")",
        "isAcronym(words = [\"tea\", \"coffee\"], s = \"ce\")",
        "isAcronym(words = [\"nasa\", \"space\", \"international\"], s = \"ISA\")",
        "isAcronym(words = [\"NASA\", \"Space\"], s = \"NASA Space\")",
        "isAcronym(words = [\"NASA\", \"NASA\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"Space\", \"International\"], s = \"NSA\")",
        "isAcronym(words = [\"me\", \"my\", \"men\"], s = \"mymen\")",
        "isAcronym(words = [\"THIS\", \"IS\", \"FUN\"], s = \"TISF\")",
        "isAcronym(words = [\"THIS\", \"IS\", \"A\", \"SAMPLE\"], s = \"TIS\")",
        "isAcronym(words = [\"not\", \"now\", \"no_way\"], s = \"now\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 1], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 0)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 4], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 4], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 5, 1, 4, 3], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 1], modulo = 4, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 0, 1, 2, 3, 0], modulo = 100, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 1, 1, 1, 2, 1, 2, 1, 1], modulo = 5, k = 2)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [1234, 5678])",
        "countBeautifulPairs(nums = [15, 20, 50, 60])",
        "countBeautifulPairs(nums = [13, 23])",
        "countBeautifulPairs(nums = [101, 202])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 1, 0, 0], target = 1)",
        "maximumJumps(nums = [2,1,4,7,5,10,9,3,1,1,3], target = 2)",
        "maximumJumps(nums = [1,3,6,4,1,0,0], target = 3)",
        "maximumJumps(nums = [2, 7, 9, 3, 9, 0, 1], target = 0)",
        "maximumJumps(nums = [2,1,3,4,1,2,3,1], target = 3)",
        "maximumJumps(nums = [2,1,3,2,1,1,3,1,2], target = 2)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [15, 20, 5, 10])",
        "countBeautifulPairs(nums = [10, 11, 12, 13])",
        "countBeautifulPairs(nums = [11, 54, 23, 37])",
        "countBeautifulPairs(nums = [12, 34, 6, 9, 11])",
        "countBeautifulPairs(nums = [1234, 4321, 3344, 1221])",
        "countBeautifulPairs(nums = [12, 5, 34, 76])"
    ],
    "sample_18": [
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"AC\")",
        "minLength(s = \"AC\")",
        "minLength(s = \"AC\")",
        "minLength(s = \"BACDABA\")",
        "minLength(s = \"ABBBCD\")",
        "minLength(s = \"CCDD\")"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"this is a test\")",
        "finalString(s=\"string\")",
        "finalString(s=\"string\")",
        "finalString(s = \"gift\")",
        "finalString(s = \"riting\")",
        "finalString(s = \"arctic\")",
        "finalString(s = \"google\")",
        "finalString(s = \"qwerty\")",
        "finalString(s='ireg')"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 2, 1])",
        "doesValidArrayExist(derived = [2, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 1, 2])",
        "doesValidArrayExist(derived = [1,2,3,1])",
        "doesValidArrayExist(derived = [1, 2, 3, 1, 2, 3, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 5, 5, 6, 7, 8, 9])",
        "doesValidArrayExist(derived = [1, 2, 3, 5, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 2, 4, 7, 11])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [3, 1, 4, 1, 5, 9])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 5])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 5])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 5, 3, 6, 2])",
        "findValueOfPartition(nums = [3, 2, 1, 5, 6, 4])",
        "findValueOfPartition(nums = [7, 5, 8, 3, 4])"
    ],
    "sample_7": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1,2], [2,3], [3,4], [4,5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [3, 4], [1, 3]])",
        "colorTheArray(n = 5, queries = [[1,2],[3,1],[2,3]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,3],[3,4],[4,1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [3, 4], [2, 3]])",
        "colorTheArray(n = 5, queries = [[0,2],[1,3],[2,4]])",
        "colorTheArray(n = 5, queries = [[1,2], [2,3], [2,4], [3,2], [4,5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [3, 1], [2, 3], [1, 1], [4, 1]])",
        "colorTheArray(n = 3, queries = [[1, 2], [1, 0], [2, 3], [2, 1]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 4, target = 20)",
        "minimumPossibleSum(n = 3, target = 15)",
        "minimumPossibleSum(n=3, target=5)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 5, k = 15)",
        "minimumSum(n = 5, k = 15)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 13)",
        "minimumSum(n=5, k=2)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 3, k = 6)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 10, 4, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 7, 7, 7, 7, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 7, 7, 7, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 2, 4, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 9], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9], target = 7)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [2, 3, 5, 7], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [2, 3, 5, 7], m = 11)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 12)",
        "canSplitArray(nums = [5, 5, 10], m = 15)",
        "canSplitArray(nums = [5, 1, 2, 4, 7], m = 11)",
        "canSplitArray(nums = [5, 5, 5, 5, 5], m = 10)",
        "canSplitArray(nums = [2, 1, 5, 7, 3, 10], m = 12)",
        "canSplitArray(nums = [4, 5, 5, 6, 7, 6, 7], m = 15)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 1], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums=[2, 4, 2, 3, 1, 5], m=4, k=2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 1, 2, 1, 3, 1, 2, 2, 1, 2, 1, 3, 1, 2, 2, 1, 2, 1, 3, 1, 2, 2, 1], m = 3, k = 2)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], t = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7], t = 6)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], t = 10)",
        "longestAlternatingSubarray(nums = [3, 2, 1, 4, 5, 6], t = 3)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], t = 6)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 6, 8, 1], t = 1)",
        "longestAlternatingSubarray(nums = [2,3,4,5,12,14], t = 6)",
        "longestAlternatingSubarray(nums = [10, 34, 20, 45, 21, 15, 30], t = 20)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num=\"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 5)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 2, b = 1)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 15, b = 5)",
        "makeTheIntegerZero(a = 6, b = 3)",
        "makeTheIntegerZero(a = 12, b = 3)",
        "makeTheIntegerZero(a = 27, b = 7)",
        "makeTheIntegerZero(a = 37, b = 7)",
        "makeTheIntegerZero(a = 1023, b = 1)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [3, 1, 2, 2, 4], m = 7)",
        "canSplitArray(nums = [2, 3, 5, 7, 11], m = 11)",
        "canSplitArray(nums = [4, 2, 3, 6, 7], m = 13)",
        "canSplitArray(nums = [4, 3, 3, 5, 6], m = 9)",
        "canSplitArray(nums = [2, 3, 5, 7, 11], m = 10)",
        "canSplitArray(nums = [3, 1, 4, 1, 5], m = 9)",
        "canSplitArray(nums = [2, 5, 1, 9, 3, 7], m = 15)",
        "canSplitArray(nums = [5, 1, 2, 4, 7], m = 11)",
        "canSplitArray(nums = [5, 1, 2, 6, 3, 4], m = 12)"
    ],
    "sample_161": [
        "maxSum(nums = [12, 34, 123])",
        "maxSum(nums = [10, 5, 2, 3, 7, 8, 2])",
        "maxSum(nums = [12, 13, 1, 10, 34, 14])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 7, 11, 9, 2, 1, 10])",
        "maxSum(nums = [12, 34, 18, 23])",
        "maxSum(nums = [18, 35, 12, 7, 13, 2, 1, 10])",
        "maxSum(nums = [12, 15, 32, 5, 4, 10])",
        "maxSum(nums = [21, 32, 45, 11, 99])",
        "maxSum(nums = [12, 123, 54, 98, 12, 111])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 5, target = 11)",
        "minimumPossibleSum(n = 5, target = 11)",
        "minimumPossibleSum(n = 7, target = 4)",
        "minimumPossibleSum(n = 10, target = 15)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n=10, target=31)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [3, 1, 4, 2, 5])",
        "findValueOfPartition(nums = [3, 1, 4, 2, 5])",
        "findValueOfPartition(nums = [3,1,4,2,5])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 47])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 47])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 47])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 54])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 54])",
        "findValueOfPartition(nums = [7,3,5,9,2,5,9,4,15,1])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5]])",
        "numberOfPoints(nums = [[1, 3], [4, 7]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])",
        "numberOfPoints(nums = [[10, 20], [30, 50], [40, 60]])",
        "numberOfPoints(nums = [[100,150],[100,180],[200,200]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[0, 1], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[1, 2], [4, 5]])",
        "numberOfPoints(nums = [[2, 5], [1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [7, 9]])",
        "numberOfPoints(nums = [[0, 2], [3, 5], [7, 8], [10, 12]])",
        "numberOfPoints(nums = [[0, 1], [3, 5], [4, 7]])",
        "numberOfPoints(nums = [[2, 5], [4, 7], [1, 3]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\"], separator = \" \")"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 10)",
        "minOperations(nums=[3, 1, 4, 3], target=6)",
        "minOperations(nums = [1,2,3,4,5,6], target = 10)",
        "minOperations(nums = [2, 1, 1, 2], target = 4)",
        "minOperations(nums = [10, 9, 8, 7, 6, 5, 1], target = 6)",
        "minOperations(nums=[4, 2, 3, 2, 2], target=10)",
        "minOperations(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 25)",
        "minOperations(nums = [20, 10, 20, 10, 20], target = 70)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [2, 1, 3, 2], k = 3)",
        "checkArray(nums = [2, 1, 3, 2], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums=[1, 2, 3, 4, 5], k=3)",
        "checkArray(nums = [2, 3, 1, 5, 3, 2, 3, 4], k = 3)",
        "checkArray(nums=[1, 2, 3, 2, 3, 4, 4, 5, 6, 7, 7, 8], k=4)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1])"
    ],
    "sample_159": [
        "maxSum(nums = [12, 1, 12])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [12, 15, 17, 20, 25])",
        "maxSum(nums = [10, 3, 2, 5, 7, 8])",
        "maxSum(nums = [12, 15, 17, 8, 9, 11])",
        "maxSum(nums = [1, 5, 3, 6, 2])",
        "maxSum(nums = [10, 12, 17, 5, 18])",
        "maxSum(nums = [1, 10, 2, 15])",
        "maxSum(nums=[12, 15, 17, 22, 45])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1,2,3,1,2,3,1,2])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 3])",
        "continuousSubarrays(A=[1, 2, 3, 1, 2, 3, 1, 2])",
        "continuousSubarrays(A = [2, 2, 2, 1, 4, 5, 5, 5, 5])",
        "continuousSubarrays(A = [2, 4, 5, 1, 3])",
        "continuousSubarrays(A = [1,2,3,2,3,4,2,2,1,1,1])",
        "continuousSubarrays(A = [4, 1, 2, 3, 2, 4, 4])",
        "continuousSubarrays(A=[1, 2, 3, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1, 1])",
        "continuousSubarrays(A=[0, 2, 2, 3, 3, 3, 3, 5, 5, 5, 5, 6, 6, 6, 6, 6])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1,2,3,1,2,3,1])",
        "distinctDifferenceArray(nums = [2, 2, 3, 4])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(a = [1, 3, 5, 7, 9], b = [2, 4, 6, 8, 10])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5, 6], b = [1, 2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 1, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [6, 7, 8, 9, 10])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5, 6], b = [1, 2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [2, 3, 1, 5], b = [2, 3, 1, 4])",
        "maxNonDecreasingLength(a = [2, 3, 4, 7], b = [5, 2, 4, 8])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 20, additionalTank = 2)",
        "distanceTraveled(mainTank = 8, additionalTank = 0)",
        "distanceTraveled(mainTank = 30, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 3)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 25, additionalTank = 2)"
    ],
    "sample_160": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1,2,3,4,5,6])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum(nums = [2, 1, 5, 7, 4, 6])",
        "maxSum(nums = [1,1,2])",
        "maxSum(nums = [1,2,3,4,5,6])",
        "maxSum(nums = [12, 7, 17, 29, 10, 5, 13])"
    ],
    "sample_52": [
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"dsa\")",
        "smallestString(s = \"aba\")",
        "smallestString(s = \"bbcdd\")",
        "smallestString(s = \"dbskcna\")",
        "smallestString(s = 'bcdasb')",
        "smallestString(s = \"bdj\")",
        "smallestString(s = \"bnbhbncd\")"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [7, 3, 5, 2])",
        "findValueOfPartition(nums = [7, 3, 5, 2])",
        "findValueOfPartition(nums = [3, 8, 5, 6])",
        "findValueOfPartition(nums = [3, 8, 10, 11])",
        "findValueOfPartition(nums = [7, 3, 5, 6, 4, 2])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = 'race')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = \"baba\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 10)",
        "makeTheIntegerZero(num1 = 5, num2 = 10)",
        "makeTheIntegerZero(num1 = 4, num2 = 1)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 5)",
        "makeTheIntegerZero(num1 = 20, num2 = 10)",
        "makeTheIntegerZero(num1 = 13, num2 = 7)",
        "makeTheIntegerZero(num1 = 10, num2 = 100)",
        "makeTheIntegerZero(num1 = 4, num2 = 8)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,3],[5,7],[2,8]])",
        "numberOfPoints(nums = [[1,3],[4,8],[10,12]])",
        "numberOfPoints(nums = [[1,3],[4,7],[10,12]])",
        "numberOfPoints(nums=[[1,3],[2,4],[5,7]])",
        "numberOfPoints(nums = [[2, 7], [3, 6], [1, 4]])",
        "numberOfPoints(nums=[[2,3],[5,6],[7,8]])",
        "numberOfPoints(nums = [[2,5],[3,7],[1,8],[6,9]])",
        "numberOfPoints(nums=[[1,5],[2,6],[7,8],[3,6]])",
        "numberOfPoints(nums=[[0, 1], [2, 3], [4, 5], [6, 7]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10, 12], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5, 6, 7], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 2, 1, 1, 0], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1], m = 2, k = 1)"
    ],
    "sample_40": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abbb\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0,1,0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1, 1, 0, 0, 1, 1])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 3, 2, 3, 1, 0])",
        "distinctDifferenceArray(nums = [1, 3, 2, 1, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3, 4, 4, 5, 6, 7, 8, 7, 9])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 7, 9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7, 9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 12, 18, 19], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 1, 4, 3], target = 3)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"eleven\")",
        "makeSmallestPalindrome(s = 'race')",
        "makeSmallestPalindrome(s = 'neve')",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"leve\")",
        "makeSmallestPalindrome(s = \"abc\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num='51230100')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [2,1,3,1,2,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 3, 2, 3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 2, 2, 3, 3, 3, 4, 4, 4, 4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,1,2,3,1,2,3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,2,2,2,1,1,1,1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 7, 3, 5, 1, 9, 7], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 3, 1, 2, 1, 3, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[2,3,1,1], m=2, k=1)",
        "countInterestingSubarrays(nums = [2, 3, 3, 2, 3, 3, 2, 3, 3, 2, 3, 3, 2, 2, 2, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums=[1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1], m=2, k=1)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 20, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 4)",
        "distanceTraveled(mainTank = 50, additionalTank = 5)",
        "distanceTraveled(mainTank = 15, additionalTank = 10)",
        "distanceTraveled(mainTank = 7, additionalTank = 4)",
        "distanceTraveled(mainTank = 40, additionalTank = 10)",
        "distanceTraveled(mainTank = 4, additionalTank = 3)",
        "distanceTraveled(mainTank = 100, additionalTank = 50)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [3, 4, 5, 1, 3], x = 2)",
        "minCost(A = [3,1,4,3,2,4,2], x = 3)",
        "minCost(A=[2, 3, 4, 5, 6], x=1)",
        "minCost(A = [10, 20, 30, 40], x = 1)",
        "minCost(A=[3, 2, 5, 1, 6], x=2)",
        "minCost(A=[1, 2, 3, 4, 5, 6, 7], x=2)",
        "minCost(A=[3, 5, 1, 6], x=2)",
        "minCost(A = [1, 5, 3, 19, 26, 38, 27, 40, 15, 4, 11], x = 3)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(u = [3, 2, 4, 3])",
        "maxIncreasingGroups(u = [1, 2, 3, 5, 6, 7])",
        "maxIncreasingGroups(u = [3, 2, 5, 4])",
        "maxIncreasingGroups(u = [2, 5, 6, 7])",
        "maxIncreasingGroups(u = [3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "maxIncreasingGroups(u = [2, 2, 2])",
        "maxIncreasingGroups(u = [4, 4, 6, 7, 8])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [10, 20, 30, 40], k = 2)",
        "checkArray(nums = [1, 0, 1, 0], k = 3)",
        "checkArray(nums = [3, 5, 7, 2, 4, 6], k = 2)",
        "checkArray(nums = [4, 5, 3, 2, 6, 7, 9, 1], k = 2)",
        "checkArray(nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 1)",
        "checkArray(nums = [1, 3, 3, 5, 6, 5, 3, 5], k = 2)"
    ],
    "sample_19": [
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ACDBC\")",
        "minLength(s = \"ACDBC\")",
        "minLength(s = \"ACDB\")",
        "minLength(s = \"AAABCD\")",
        "minLength(s = \"ACDBCAB\")",
        "minLength(s = \"DAABABA\")",
        "minLength(s = \"ACDABABABCDABABAB\")",
        "minLength(s = \"CCDD\")"
    ],
    "sample_201": [
        "minOperations(nums = [3, 1, 4, 1], target = 6)",
        "minOperations(nums = [3, 1, 4, 1], target = 6)",
        "minOperations(nums = [3,1,4,1,5], target = 15)",
        "minOperations(nums = [3,1,4,1,5], target = 13)",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "minOperations(nums = [2,3,6,7], target = 6)",
        "minOperations(nums = [1,2,3,4,5], target = 12)",
        "minOperations(nums = [1,2,3,4,5], target = 11)",
        "minOperations(nums = [5, 6, 7, 8, 9], target = 12)",
        "minOperations(nums = [1, 1, 1, 4], target = 4)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"orange\", \"banana\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"Hello\", \"World\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"cherry\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\"], separator = \"na\")",
        "splitWordsBySeparator(words = [\"I\", \"love\", \"python\", \"programming\"], separator = \" \")"
    ],
    "sample_54": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"abcz\")",
        "smallestString(s=\"abc\")",
        "smallestString(s = \"bacd\")",
        "smallestString(s = \"dbskcnbd\")",
        "smallestString(s = \"ddb\")",
        "smallestString(s = \"baaad\")",
        "smallestString(s = \"apple\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_LLRR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R_L_R_R\")",
        "furthestDistanceFromOrigin(moves = 'RRRR_LLLL')",
        "furthestDistanceFromOrigin(moves = \"LR_LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 1)"
    ],
    "sample_51": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"bcd\")",
        "smallestString(s=\"banana\")",
        "smallestString(s='abcdefg')",
        "smallestString(s = \"cd\")",
        "smallestString(s = \"cd\")",
        "smallestString(s = \"skdvdbnc\")",
        "smallestString(s = \"zdjskd\")",
        "smallestString(s = \"ghfkdkdk\")",
        "smallestString(s = 'tdkjdjkn')"
    ],
    "sample_146": [
        "finalString(s = \"pinter\")",
        "finalString(s = \"pinter\")",
        "finalString(s = \"pinter\")",
        "finalString(s = 'inter')",
        "finalString(s = \"input\")",
        "finalString(s = \"poi\")",
        "finalString(s = \"bipul\")",
        "finalString(s = 'bipin')",
        "finalString(s = 'myponter')",
        "finalString(s=\"bipin\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,2,3,1,4,2,2,3,1], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1,0,0,1,1,1,1,0], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 0, 1, 1, 0, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,2,3,3,3,4,4,4,4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 3, 2], k = 3)",
        "longestEqualSubarray(nums = [1,1,1,1,2,2,2,3,3,3,4,4,4], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [5,1,1,5], m = 10)",
        "canSplitArray(nums = [10,20,30,40,50], m = 50)",
        "canSplitArray(nums = [5, 10, 15, 20], m = 25)",
        "canSplitArray(nums=[1, 3, 5, 7, 9], m=2)",
        "canSplitArray(nums = [3,2,2,3], m = 3)",
        "canSplitArray(nums = [2, 5, 10, 20, 50], m = 30)",
        "canSplitArray(nums = [3, 4, 5, 7], m = 12)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,1,0,1,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,5,7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,4,5,6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours=[2,3,4,5,6], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,5,7,9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,5,6,7], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours=[2,5,6,8], target=6)"
    ],
    "sample_168": [
        "isAcronym(words = [\"apple\", \"banana\"], s = \"ab\")",
        "isAcronym(words = [\"banana\", \"apple\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"one\", \"two\", \"three\"], s = \"owt\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bird\"], s = \"c.d.b\")",
        "isAcronym(words = [\"race\", \"car\"], s = \"racecar\")",
        "isAcronym(words = [\"Programming\", \"is\", \"fun\"], s = \"PF\")",
        "isAcronym(words = [\"programming\", \"is\", \"fun\"], s = \"PF\")",
        "isAcronym(words = [\"Fast\", \"Banana\"], s = \"FBN\")",
        "isAcronym(words = [\"fast\", \"four\"], s = \"FA\")",
        "isAcronym(words = [\"huge\", \"big\"], s = \"hb\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"new\", \"year\"], s = \"NY\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"our\", \"quick\", \"brown\"], s = \"OUR\")",
        "isAcronym(words = [\"computer\", \"science\"], s = \"CS\")",
        "isAcronym(words = [\"race\"], s = \"R\")",
        "isAcronym(words = [\"make\", \"us\", \"good\"], s = \"mus\")",
        "isAcronym(words = [\"I\", \"am\", \"a\", \"great\", \"programmer\"], s = \"IGAP\")",
        "isAcronym(words = [\"coding\", \"computer\", \"crash\"], s = \"CC\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"0110\")",
        "minimumCost(s = \"0011\")",
        "minimumCost(s = \"aaaabbbb\")",
        "minimumCost(s = \"abccba\")",
        "minimumCost(s = \"001010\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [2, 1, 2])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0,1,0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(\"abc\")"
    ],
    "sample_50": [
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"baa\")",
        "smallestString(s = \"babaa\")",
        "smallestString(s = \"babaa\")",
        "smallestString(s = \"aabbb\")",
        "smallestString(s = \"aaa\")",
        "smallestString(s='az')",
        "smallestString(\"abacus\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5], k=2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5], k=1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 10, 11, 13], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDEABCD\")",
        "minLength(s = \"ACDABABC\")",
        "minLength(s = \"ACDCABA\")",
        "minLength(s = \"ABCDEABCDABCDE\")",
        "minLength(s = \"ABBBABCD\")",
        "minLength(s = \"ACDBBAA\")",
        "minLength(s = \"ACDBCBADAB\")",
        "minLength(s = \"AAABCDAA\")",
        "minLength(s = \"BABABA\")"
    ],
    "sample_158": [
        "maxSum(nums = [12, 1, 12])",
        "maxSum(nums = [1, 5, 3, 2])",
        "maxSum(nums = [18, 35, 12, 7, 24, 4])",
        "maxSum(nums = [1, 1, 1, 1])",
        "maxSum(nums = [18, 35, 12, 7])",
        "maxSum(nums = [18, 35, 12, 7, 24])",
        "maxSum(nums = [18, 12, 20, 45, 31])",
        "maxSum(nums = [18, 35, 27, 40, 74, 14])",
        "maxSum(nums = [12, 10, 9, 21, 15])",
        "maxSum(nums = [21, 30, 2, 14, 7, 9])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 5, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 5, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 6])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 6])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5])"
    ],
    "sample_162": [
        "maxSum(nums = [123, 456, 789])",
        "maxSum(nums = [12, 34, 11, 9, 3])",
        "maxSum(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSum(nums = [10, 20, 30, 50, 60])",
        "maxSum(nums = [12, 34, 124])",
        "maxSum(nums = [472, 893])",
        "maxSum(nums = [10, 34, 203, 200, 984])",
        "maxSum(nums = [12, 45, 34, 8, 23, 57, 89])",
        "maxSum(nums = [10, 101, 1012])",
        "maxSum(nums = [47, 73, 56, 89, 12, 94, 97, 32, 42])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '010')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 7], target = 4)"
    ],
    "sample_166": [
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"elephant\", \"is\", \"wild\"], s = \"eiwa\")",
        "isAcronym(words = [\"NASA\", \"Space\"], s = \"NASA Space\")",
        "isAcronym(words = [\"mq\", \"px\", \"zy\"], s = \"mqpxzy\")",
        "isAcronym(words = [\"NewYork\", \"California\"], s = \"NYC\")",
        "isAcronym(words = [\"ant\", \"bat\", \"cat\"], s = \"abc\")",
        "isAcronym(words = [\"NASA\", \"Space\", \"X-Ray\"], s = \"NASA Space X-Ray\")",
        "isAcronym(words = [\"U.S.\", \"N.A.\", \"W.E.\"], s = \"USA\")",
        "isAcronym(words = [\"monkey\", \"is\", \"here\"], s = \"mh\")",
        "isAcronym(words = [\"Manchester\", \"Universit\u00e9\", \"York\"], s = \"MUY\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 15, additionalTank = 1)",
        "distanceTraveled(mainTank = 50, additionalTank = 0)",
        "distanceTraveled(mainTank = 15, additionalTank = 3)",
        "distanceTraveled(mainTank=10, additionalTank=2)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A=[1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 5, 7, 9])",
        "maxIncreasingGroups(A = [2, 5, 7])",
        "maxIncreasingGroups(A = [3, 5, 6, 7, 8, 10, 11])",
        "maxIncreasingGroups(A = [1, 2, 4, 6, 8])",
        "maxIncreasingGroups(A=[1, 3, 6, 10, 15, 21])",
        "maxIncreasingGroups(A = [1, 1, 2, 3, 5, 8, 13, 21])",
        "maxIncreasingGroups(A = [3, 2, 1, 5, 7, 6])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 50, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [2, 3, 3, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,4,5,6])",
        "countCompleteSubarrays(nums = [0, 1, 2, 0, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 3, 4, 5, 6])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k=2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5], k=2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums=[2, 3, 5, 7, 11, 13, 17, 19, 23], k=3)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abcd\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,2,3,3,5,6,7], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,3,4,2,1,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,1,0,0,1,0,1], k = 2)",
        "longestEqualSubarray(nums = [2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,1,4,2,5,1,1,2,3,2], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 0, 1, 0, 1, 0], k = 2)",
        "longestEqualSubarray(nums=[2,1,4,7,5,2,1,6], k=2)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 2], [1, 3], [0, 4], [2, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 1], [3, 4], [1, 2]])",
        "colorTheArray(n=5, queries=[[0,2],[1,2],[2,3],[3,4]])",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 1], [2, 3], [1, 4]])",
        "colorTheArray(n=5, queries=[(1,2), (2,3), (2,4), (3,5)])",
        "colorTheArray(n=5, queries=[[1, 2], [2, 3], [2, 1], [3, 4]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 1], [1, 3]])",
        "colorTheArray(n = 5, queries = [[2, 1], [3, 2], [1, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n=5, queries=[(0,2), (1,3), (2,3), (0,4), (3,4)])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7, 9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3, 4, 5, 6], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 17, 10, 3], target = 9)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [1234, 6789, 11, 2233])",
        "countBeautifulPairs(nums = [123, 456, 789, 1001, 2002])",
        "countBeautifulPairs(nums = [12, 34, 67, 89, 90])",
        "countBeautifulPairs(nums = [1234, 5678])",
        "countBeautifulPairs(nums = [1234, 6789, 11, 2233, 7777])",
        "countBeautifulPairs(nums = [1234, 6789, 1123, 7891, 5678])",
        "countBeautifulPairs(nums = [123, 456, 789, 112, 444])",
        "countBeautifulPairs(nums = [123, 45, 12, 11, 1999])",
        "countBeautifulPairs(nums = [1018, 40, 70, 13, 90])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 5])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 5, 10])",
        "countWays(nums = [1, 2, 5])",
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [1, 2, 4, 8, 16, 32])",
        "countWays(nums = [1, 2, 3, 7, 10])",
        "countWays(nums = [1, 2, 3, 6, 7, 8])",
        "countWays(nums = [1, 2, 5, 9])",
        "countWays(nums = [3, 4, 6, 7, 10])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '11100')",
        "maximumOddBinaryNumber(s='1101')",
        "maximumOddBinaryNumber(s = '0001')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 3, 5], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 2)",
        "maximumBeauty(nums = [1, 5, 10, 15], k = 3)",
        "maximumBeauty(nums = [4, 6, 3, 7, 2, 9, 1], k = 1)",
        "maximumBeauty(nums = [1,3,4,2,2,3,2,4,2], k = 2)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 5, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums=[5, 4, 3, 2, 1])",
        "maximumTripletValue(nums=[1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 5, 3, 4])",
        "maximumTripletValue(nums = [5, 1, 3, 3])",
        "maximumTripletValue(nums=[3,1,4,1,5,9])",
        "maximumTripletValue(nums = [6, 4, 2, 7, 1, 8, 3])",
        "maximumTripletValue(nums = [5, 15, 50, 4, 90])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [10,20,30,50], target = 10)",
        "maximumJumps(nums=[1,3,6,10,15], target=3)",
        "maximumJumps(nums = [2,2,3,4,5], target = 1)",
        "maximumJumps(nums = [2, 1, 4, 3, 6], target = 2)",
        "maximumJumps(nums = [2, 1, 4, 7, 5, 10], target = 3)",
        "maximumJumps(nums = [10, 20, 30, 60, 10], target = 20)",
        "maximumJumps(nums = [20,30,10], target = 1)",
        "maximumJumps(nums = [20,30,30,10], target = 1)"
    ],
    "sample_149": [
        "finalString(s = \"running\")",
        "finalString(s = \"irregular\")",
        "finalString(s = 'airtsng')",
        "finalString(s = \"binary\")",
        "finalString(s = 'ironman')",
        "finalString(s = \"riskit\")",
        "finalString(s = 'ire')",
        "finalString(s = 'iringtst')",
        "finalString(s = 'your string here')",
        "finalString(s = 'import math')"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 1, 2])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 1, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 1, 4, 1, 5, 1])",
        "continuousSubarrays(A = [2, 1, 3, 1, 2, 2, 1])",
        "continuousSubarrays(A=[1,2,3,1,2,3,1,2,3,4,5])",
        "continuousSubarrays(A = [3, 5, 9, 1, 2, 4])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3])",
        "countCompleteSubarrays(nums = [2, 4, 7, 10, 2, 7, 8, 10])",
        "countCompleteSubarrays(nums = [2,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 3, 4, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,1,2])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 4, 5, 6])"
    ],
    "sample_228": [
        "countWays(nums = [3,1,4,2,5])",
        "countWays(nums = [0, 2, 3, 4])",
        "countWays(nums = [0, 1, 1])",
        "countWays(nums = [5, 1, 3, 3, 7])",
        "countWays(nums = [5, 1, 3, 3, 5])",
        "countWays(nums = [4,3,2,10,10,3,3,5,5,5])",
        "countWays(nums = [1,2,5,6,2,1,1])",
        "countWays(nums=[5, 1, 3, 3, 2, 1, 5, 4])",
        "countWays(nums=[3, 2, 3, 3, 0, 1])",
        "countWays(nums = [4, 1, 3, 3, 1, 1, 4, 4])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4], k = 1)",
        "maximumBeauty(nums = [1,2,2,2,3,3,3], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [4, 3, 2, 4, 1], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 2)",
        "maximumBeauty(nums = [4, 2, 1, 2], k = 1)",
        "maximumBeauty(nums = [4,6,2,7,9], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1,2,3,4,5])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 2, 3, 4, 2, 5])",
        "continuousSubarrays(a = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2])",
        "continuousSubarrays(a = [1,2,3,4,5,6,7])",
        "continuousSubarrays(a = [1, 2, 3, 4, 1, 2, 3, 1, 2])",
        "continuousSubarrays(a = [1, 2, 3, 1, 3, 1, 2, 1, 3])",
        "continuousSubarrays(a = [1, 3, 2, 5, 3, 1, 2, 3, 4])",
        "continuousSubarrays(a = [1,2,3,4,3,2,1,2,3,4,4,3,2,3,4,5,6])",
        "continuousSubarrays(a = [1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 1, 2])",
        "continuousSubarrays(a = [1, 2, 3, 3, 4, 4, 5, 6, 6])",
        "continuousSubarrays(a = [2, 2, 3, 2, 4, 3, 4, 2, 2])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 1, 2, 3, 4])",
        "continuousSubarrays(nums = [1, 2, 3, 2, 3, 4, 2, 2])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "continuousSubarrays(nums = [4, 1, 2, 3, 4])",
        "continuousSubarrays(nums = [2, 2, 3, 3, 1, 2, 3])",
        "continuousSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 1])",
        "continuousSubarrays(nums = [2,1,4,3,2,3,2,1,2,2])",
        "continuousSubarrays(nums = [4,3,2,3,4,2,2,2])",
        "continuousSubarrays(nums = [4,1,2,3,2,1,1,1])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [15, 20, 25])",
        "countBeautifulPairs(nums = [15, 20, 25])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [15, 10])",
        "countBeautifulPairs(nums = [105, 2025, 3010])",
        "countBeautifulPairs(nums = [105, 205, 305])",
        "countBeautifulPairs(nums = [23, 12, 45, 78])",
        "countBeautifulPairs(nums = [105, 201, 307, 503])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [2,1,3,5,4])",
        "semiOrderedPermutation(nums = [2,1,4,3,5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [1,3,2,5])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1, 1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 0, 1, 0])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"11001\")",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = \"00011\")",
        "maximumOddBinaryNumber(s = \"00110\")",
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s = \"0101001\")",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(\"0011000\")"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [2, 3, 3, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 4, 2, 3, 5])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDEABCDE\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ABCDEABCDAB\")",
        "minLength(s = \"ABABABABCD\")",
        "minLength(s = \"ABABDABACDAB\")",
        "minLength(s = \"ACDBAA\")",
        "minLength(s = \"ABABABCDABABABCDAB\")",
        "minLength(s=\"ACDBCAB\")",
        "minLength(s = \"ABCCABA\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 3])",
        "countCompleteSubarrays(nums = [1,1,2,1,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 3, 4, 1, 2, 3, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 3, 4, 5, 6])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 1)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [10, 20, 30], target = 2)",
        "maximumJumps(nums = [20,1,15,3,30,2], target = 2)",
        "maximumJumps(nums = [20,10,40,30,50], target = 10)",
        "maximumJumps(nums = [20,10,10,20,10], target = 1)",
        "maximumJumps(nums = [10, 20, 30], target = 10)",
        "maximumJumps(nums = [10, 20, 30, 50], target = 2)",
        "maximumJumps(nums = [20,10,40,80,2], target = 6)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 4, 8, 16])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [3, 5, 6, 7, 8, 10, 11])",
        "maxIncreasingGroups(x = [1, 2, 3, 6])",
        "maxIncreasingGroups(x = [1,2,3,4,5,6])",
        "maxIncreasingGroups(x = [2, 4, 6])",
        "maxIncreasingGroups(x = [3, 4, 5, 6])",
        "maxIncreasingGroups(x = [3, 6, 8, 10])",
        "maxIncreasingGroups(x = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRRLR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = \"0001\")",
        "maximumOddBinaryNumber(s = \"0010\")",
        "maximumOddBinaryNumber(s = '11001')",
        "maximumOddBinaryNumber(s = '01111')"
    ],
    "sample_6": [
        "colorTheArray(n=5, queries=[[0,1],[1,2],[2,3],[3,4],[4,1]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,0]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4],[4,2]])",
        "colorTheArray(n = 5, queries = [[0,2],[2,3],[2,4],[1,1],[1,0]])",
        "colorTheArray(n = 5, queries = [[0, 2],[2, 3]])",
        "colorTheArray(n = 3, queries = [[0, 1], [2, 2], [1, 2]])",
        "colorTheArray(n=4, queries=[[0,1],[1,0],[1,2],[2,0]])",
        "colorTheArray(n=6, queries=[[1,2],[3,2],[2,4],[5,6]])",
        "colorTheArray(n = 5, queries = [[0, 2],[2, 1],[1, 1],[0, 0],[3, 0]])",
        "colorTheArray(n = 5, queries = [[0,2],[2,1],[1,1],[3,0]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 28])",
        "findValueOfPartition(nums = [3, 30, 34, 5, 9])",
        "findValueOfPartition(nums = [3, 5, 2, 1, 4])",
        "findValueOfPartition(nums = [3, 2, 1, 5, 4])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 7])",
        "findValueOfPartition(nums = [2, 6, 3, 1])",
        "findValueOfPartition(nums = [2, 9, 4, 7, 6, 5])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,0,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1,"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "minimumIndex(nums = [1,2,2,2,3,3,3,4,4,4,4])",
        "minimumIndex(nums = [1,1,2,2,2,2])",
        "minimumIndex(nums = [3,2,3,4,7,3])",
        "minimumIndex(nums = [4, 2, 2, 8, 3, 3, 1])",
        "minimumIndex(nums = [3, 2, 3, 1, 2, 1])",
        "minimumIndex(nums = [2, 3, 3, 2, 4, 3, 2, 5, 3, 2, 3, 2, 3, 2, 3])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10, 15], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums=[2, 7, 10], k=1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11, 13], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 2, offers = [[1, 2, 5], [2, 3, 4], [2, 5, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 4, 3], [3, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [2, 4, 5], [3, 4, 6]])",
        "maximizeTheProfit(n = 2, offers = [[1, 3, 5], [2, 4, 10], [3, 5, 2]])",
        "maximizeTheProfit(n = 3, offers = [[0, 10, 5], [1, 2, 10], [2, 3, 5]])",
        "maximizeTheProfit(n = 3, offers = [[2,3,5], [1,2,6], [1,3,7]])",
        "maximizeTheProfit(n = 3, offers = [[2, 3, 5], [1, 2, 10], [1, 3, 20]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 1], [1, 2, 5], [4, 5, 3]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 4], [1, 3, 1], [3, 5, 2]])",
        "maximizeTheProfit(n = 3, offers = [[0, 3, 5], [1, 2, 10], [2, 3, 20]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"111111\")",
        "minimumOperations(num = \"10001\")",
        "minimumOperations(num = \"00001111\")",
        "minimumOperations(num = \"10101010\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"110\")",
        "minimumOperations(num = \"110\")",
        "minimumOperations(num = \"110\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"110000\")",
        "minimumOperations(num = \"110011\")",
        "minimumOperations(num = \"1100000\")",
        "minimumOperations(num = \"10101111\")",
        "minimumOperations(num = \"1100000001\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [0, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,2],[1,2,3],[2,3,4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [3, 4, 2], [2, 5, 7]])",
        "maximizeTheProfit(n=10, offers=[[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [2, 3, 2], [3, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[3,4,1],[2,3,4]])",
        "maximizeTheProfit(n=5, offers=[[1,2,2],[3,4,6],[1,2,5]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 3], [3, 1, 2], [1, 1, 3], [4, 1, 2]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 2], [2, 3, 2], [4, 5, 3]])",
        "maximizeTheProfit(n=10, offers=[[1,2,7],[2,3,4],[3,4,5],[4,5,6],[5,6,7]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,3,5,7,9], threshold = 5)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], threshold=5)",
        "longestAlternatingSubarray(nums = [2, 1, 5, 6, 3, 2, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,5,7,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 1, 1], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 6, 4, 3, 2, 1, 4, 2], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,4,5,2,1,7], threshold = 6)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 2, 6, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [5,2,1,5,3,2,1,5,3,2], threshold = 4)"
    ],
    "sample_203": [
        "minimumOperations(num = \"5525\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"25501\")",
        "minimumOperations(num = \"25501\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"2325\")",
        "minimumOperations(num = \"234015\")",
        "minimumOperations(num = '011010')"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 6, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]])",
        "colorTheArray(n = 6, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 1], [3, 4]])",
        "colorTheArray(n=5, queries=[[1,2],[2,3],[2,4],[3,5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [3, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 3]])",
        "colorTheArray(n = 5, queries = [[1, 3], [2, 4], [3, 1], [2, 3]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [2, 1, 3, 1, 4])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [0, 1, 2, 3, 4])",
        "minimumIndex(nums = [0, 0, 1, 1])",
        "minimumIndex(nums = [1, 3, 3, 3, 2, 3, 3, 2, 2, 2])",
        "minimumIndex(nums = [2, 3, 1, 3, 0, 0])",
        "minimumIndex(nums = [2, 2, 1, 3, 2, 2, 3, 4, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 1, 3, 1, 2, 3, 4])",
        "minimumIndex(nums = [3, 4, 0, 2, 3, 1, 4])",
        "minimumIndex(nums = [0, 1, 2, 3, 0, 1, 3, 0, 2, 3])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 0)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [10, 20, 30, 50], target = 10)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [1, 5, 3, 6, 7, 6, 2], target = 3)",
        "maximumJumps(nums = [2, 5, 10, 4, 10, 23, 2, 5, 0], target = 3)",
        "maximumJumps(nums = [2, 1, 4, 5], target = 2)",
        "maximumJumps(nums = [2, 5, 10, 4, 10, 23, 2, 5, 0], target = 7)",
        "maximumJumps(nums = [2,1,4,7,5,1,2], target = 3)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num='512301')",
        "removeTrailingZeros(num='512301')",
        "removeTrailingZeros(num=\"512301\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')"
    ],
    "sample_57": [
        "distanceTraveled(a = 10, b = 0)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 7, b = 1)",
        "distanceTraveled(a = 4, b = 1)",
        "distanceTraveled(a = 10, b = 1)",
        "distanceTraveled(a = 2, b = 2)",
        "distanceTraveled(a = 10, b = 5)",
        "distanceTraveled(a = 7, b = 3)",
        "distanceTraveled(a = 6, b = 3)",
        "distanceTraveled(a = 25, b = 0)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 26])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 5, 10, 20])",
        "findValueOfPartition(a = [3, 10, 2, 4, 7])",
        "findValueOfPartition(a = [1, 5, 3, 19, 26, 38, 47])",
        "findValueOfPartition(a = [2, 6, 3, 4, 10, 15])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3, 4, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 3])"
    ],
    "sample_120": [
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [2, 1, 3, 1])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "minimumIndex(nums = [0, 1, 2, 2, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "minimumIndex(nums = [2,2,1,1,4,2,2])",
        "minimumIndex(nums = [2, 2, 1, 3, 3, 4, 4, 1, 1, 2])",
        "minimumIndex(nums = [0, 2, 1, 3, 3, 3, 2, 2, 2])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"RL\")",
        "furthestDistanceFromOrigin(moves = \"RFR\")",
        "furthestDistanceFromOrigin(moves = \"RFR\")",
        "furthestDistanceFromOrigin(moves = \"RRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRD\")",
        "furthestDistanceFromOrigin(moves = \"RFRLLRFLRFR\")",
        "furthestDistanceFromOrigin(moves = \"RRDLLDR\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"aaa\")",
        "minimizedStringLength(s = \"aaa\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1, 1, 1, 1], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1], k = 3)",
        "checkArray(nums = [2, 2, 2, 2, 2], k = 2)",
        "checkArray(nums = [3, 3, 3, 3, 3], k = 3)",
        "checkArray(nums = [2,3,3,2,3], k = 4)",
        "checkArray(nums = [2, 3, 5, 8, 9], k = 3)",
        "checkArray(nums = [4,3,1,2,3,4,1,4,1,4,1,4], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [3, 3, 3])",
        "maxIncreasingGroups(usageLimits = [1, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 3, 3, 3, 3])",
        "maxIncreasingGroups(usageLimits = [4, 3, 2, 1, 5])",
        "maxIncreasingGroups(usageLimits = [2, 4, 6, 8])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [2, 3, 5, 7, 11])",
        "maxIncreasingGroups(usageLimits = [2, 2, 2, 2, 2])",
        "maxIncreasingGroups(usageLimits = [2, 3, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [5, 6, 8, 13, 14])"
    ],
    "sample_206": [
        "minimumOperations(num = \"625\")",
        "minimumOperations(num = \"625\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"11011\")",
        "minimumOperations(num = \"3402750\")",
        "minimumOperations(num = \"1011\")",
        "minimumOperations(num = \"150150\")",
        "minimumOperations(num = \"1456\")",
        "minimumOperations(num = \"1401\")",
        "minimumOperations(num = \"60\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 4, 3, 2, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [0, 1, 3, 5, 6, 0])",
        "doesValidArrayExist(derived = [0, 3, 2, 1, 3])",
        "doesValidArrayExist(derived = [5, 12, 13, 15, 4, 2, 5])"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"aabbb\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 3, 5])",
        "maxIncreasingGroups(usageLimits = [1, 3, 6, 10])",
        "maxIncreasingGroups(usageLimits = [3, 6, 7, 8])",
        "maxIncreasingGroups(usageLimits = [2, 5, 7])",
        "maxIncreasingGroups(usageLimits = [2, 6, 7])",
        "maxIncreasingGroups(usageLimits = [4, 1, 3])",
        "maxIncreasingGroups(usageLimits = [3, 3, 6, 2, 3])",
        "maxIncreasingGroups(usageLimits = [2, 7, 1, 10])"
    ],
    "sample_53": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,5,9,15,20], x = 3)",
        "minAbsoluteDifference(nums = [2,4,6,8,10], x = 2)",
        "minAbsoluteDifference(nums = [4, 5, 2, 1, 3], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6], x = 2)",
        "minAbsoluteDifference(nums = [4,3,2,4,3], x = 2)",
        "minAbsoluteDifference(nums = [4,3,2,4,3], x = 3)",
        "minAbsoluteDifference(nums=[4, 5, 2, 1, 8, 10], x=2)",
        "minAbsoluteDifference(nums = [1,5,0,10,15], x = 4)",
        "minAbsoluteDifference(nums=[3,6,8,10,12,15], x=2)",
        "minAbsoluteDifference(nums=[4, 7, 9, 1, 5, 7, 1, 8], x=3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20], [2, 5, 30]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 100], [2, 3, 500], [3, 4, 200]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7]])",
        "maximizeTheProfit(N = 2, offers = [[1,2,3],[1,3,4],[2,3,5]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 5], [3, 1, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1,2,2], [2,3,6], [2,4,7]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 100], [3, 4, 500], [1, 5, 75]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"This is a test\"], b = \" \")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"na\")",
        "splitWordsBySeparator(a = [\"my name is\"], b = \" \")",
        "splitWordsBySeparator(a = [\"banana\", \"mango\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"This is a sample string\"], b = \" \")",
        "splitWordsBySeparator(a = [\"this is a string\"], b = \" \")",
        "splitWordsBySeparator(a = [\"i am a\", \"cool\", \"programmer\"], b = \" \")",
        "splitWordsBySeparator(a = [\"Hello World\", \"I am a\", \"Programmer\"], b = \" \")",
        "splitWordsBySeparator(a = [\"bad bad bad\", \"bad bad bad\"], b = \"bad\")",
        "splitWordsBySeparator(a = [\"bad\",\"ball\",\"cars\"], b = \"a\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '51230100000000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"eleven\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"leve\")",
        "makeSmallestPalindrome(s = \"abcdcbea\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1, 2, 3], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,2,3,2,4,5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 3, 1, 1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 1, 4, 4, 4, 5, 6, 1, 5], k = 5)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 5, 7, 8, 9], k = 1)",
        "maximumBeauty(nums = [1,3,3,9,2,4,2], k = 3)",
        "maximumBeauty(nums = [1,3,3,3,2,3,3,2,1,2], k = 3)",
        "maximumBeauty(nums = [1, 3, 2, 2, 5, 2, 3, 7], k = 2)",
        "maximumBeauty(nums = [1,3,3,3,2,3,3,4], k = 2)",
        "maximumBeauty(nums = [1, 3, 1, 3, 5, 6, 4, 7], k = 2)"
    ],
    "sample_163": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1,2,3,4,5,6])",
        "maxSum(nums = [18, 35, 8, 12])",
        "maxSum(nums = [12, 34, 10, 20])",
        "maxSum(nums = [12, 34, 54])",
        "maxSum(nums = [18, 35, 12, 7, 6, 21, 9])",
        "maxSum(nums = [12, 18, 30, 24])",
        "maxSum(nums = [18, 35, 12, 7, 5, 10, 22])",
        "maxSum(nums = [12, 34, 78, 94])",
        "maxSum(nums = [18, 35, 12, 7, 26, 37, 2, 19])"
    ],
    "sample_151": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'girls')",
        "finalString(s = 'mississippi')",
        "finalString(s = \"giris\")",
        "finalString(s = \"student\")",
        "finalString(s = 'iringtsng')",
        "finalString(s = \"gifting\")",
        "finalString(s = 'mississippi')"
    ],
    "sample_31": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '5123010')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1111\")",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '1011')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"This is a easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"I\", \"love\", \"Python\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"I am a\", \"coder\"], separator = \" \")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,1,2,3,1], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 1, 2, 3, 4, 5], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 1, 2, 3, 1], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 3, 4], K = 2)",
        "longestEqualSubarray(A = [1,2,3,2,3,4,2,1,1,3], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1, 2, 3, 4, 2, 3, 1, 2], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,3,2,1,4,2,1,3,2,3,4,4,4,4], K = 2)",
        "longestEqualSubarray(A = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,1,2,1,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1,2,3,4,5,6,1,2,3,1"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 1, 1, 1, 1])",
        "countWays(nums = [1, 1, 2, 3, 5])",
        "countWays(nums = [3, 1, 2])",
        "countWays(nums = [5, 1, 2, 4])",
        "countWays(nums = [1, 2, 5, 2, 3, 5])",
        "countWays(nums = [1, 0, 3, 2, 0, 2])",
        "countWays(nums = [3, 4, 5, 5, 2, 2])",
        "countWays(nums = [10, 10, 5, 2, 2, 2])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11, 12, 13], k = 2)",
        "sumIndicesWithKSetBits(nums=[2, 7, 11], k=1)",
        "sumIndicesWithKSetBits(nums=[2, 7, 11, 1, 5], k=2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11, 12, 19, 20, 22, 23, 28, 32], k = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '51230100')"
    ],
    "sample_167": [
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"New\", \"Year\"], s = \"NY\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bird\"], s = \"cb\")",
        "isAcronym(words = [\"manchester\", \"london\"], s = \"ML\")",
        "isAcronym(words = [\"Larry\", \"Moe\", \"Curly\"], s = \"LOC\")",
        "isAcronym(words = [\"ball\", \"snow\", \"winter\"], s = \"BSW\")",
        "isAcronym(words = [\"apple\", \"pie\", \"grape\"], s = \"aplg\")",
        "isAcronym(words = [\"elephant\", \"ant\", \"croc\", \"tiger\"], s = \"elantcrogt\")",
        "isAcronym(words = [\"hormonal\", \"sodium\", \"cold\"], s = \"SNM\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 1])",
        "countCompleteSubarrays(nums = [2,1,3,2,3,2,1,3,1,2])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 9)",
        "minimumPossibleSum(n = 3, target = 9)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n=10, target=100)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n=10, target=6)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"girls\")",
        "finalString(s = 'string')",
        "finalString(s = \"girish\")",
        "finalString(s = \"greeting\")",
        "finalString(s = \"my name is\")",
        "finalString(s = \"spiring\")",
        "finalString(s = \"giraffe\")",
        "finalString(s = 'rittsong')",
        "finalString(s = \"battery\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"event\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"nane\")",
        "makeSmallestPalindrome(s = \"adbed\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [2, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 3, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 1, 6], [3, 4, 7], [4, 5, 8], [5, 6, 9]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 3], [1, 3, 2], [4, 3, 5]])",
        "maximizeTheProfit(n=2, offers=[[0, 1, 5], [1, 2, 4]])",
        "maximizeTheProfit(n=5, offers=[(1, 3, 2), (4, 3, 4), (2, 3, 3)])",
        "maximizeTheProfit(n=5, offers=[[1, 2, 3], [4, 5, 10], [1, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 6], [1, 1, 5], [2, 2, 4]])",
        "maximizeTheProfit(n = 10, offers = [[2, 3, 10], [1, 2, 4], [3, 4, 1], [2, 3, 6], [1, 2, 8]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [2, 1, 4, 7, 3, 6], target = 2)",
        "maximumJumps(nums = [2,7,9,3,8,10,12], target = 1)",
        "maximumJumps(nums=[3, 6, 8, 10], target=3)",
        "maximumJumps(nums = [3,1,5,8,6,4,2,9,7], target = 2)",
        "maximumJumps(nums = [2, 5, 10, 14, 10, 5, 2, 2], target = 2)",
        "maximumJumps(nums = [2, 1, 3, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1], target = 1)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = \"0010\")",
        "maximumOddBinaryNumber(s = \"11100\")",
        "maximumOddBinaryNumber(s=\"111\")"
    ],
    "sample_175": [
        "minimumSum(n = 5, k = 15)",
        "minimumSum(n = 5, k = 9)",
        "minimumSum(n = 5, k = 9)",
        "minimumSum(n = 5, k = 8)",
        "minimumSum(n = 5, k = 8)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 5, k = 10)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 16, num2 = 4)",
        "makeTheIntegerZero(num1 = 14, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 1)",
        "makeTheIntegerZero(num1 = 14, num2 = 7)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n=5, target=10)",
        "minimumPossibleSum(n = 4, target = 5)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 3], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 2, 3, 1], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 0, 1, 0, 1, 0, 1, 0, 0, 1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 12], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 2, 2, 7], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 3, 6, 7, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums=[1, 1, 2, 2, 2, 3, 3], modulo=5, k=0)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 4, 2], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1, 5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 1, 2], k = 2)",
        "maximumBeauty(nums = [1,2,4,2,3,2,4,5], k = 3)",
        "maximumBeauty(nums = [1,2,4,4,3,3,2,1], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 4, 3, 3, 9, 0, 7, 1, 1, 1, 2, 2], k = 3)"
    ],
    "sample_148": [
        "finalString(s = \"pi\")",
        "finalString(s = \"pi\")",
        "finalString(s = \"pinter\")",
        "finalString(s = \"pieter\")",
        "finalString(s = \"pint\")",
        "finalString(s = \"bipper\")",
        "finalString(s = 'piotr')",
        "finalString(s = \"pipa\")",
        "finalString(s = 'hpi')",
        "finalString(s = \"pontus\")"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 4, 5])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [3, 2, 1, 5, 6])",
        "countWays(nums = [2, 3, 5])",
        "countWays(nums = [1, 2, 3, 5, 6, 8, 10])",
        "countWays(nums = [2, 5, 3, 1, 0])",
        "countWays(nums = [1, 2, 5, 10, 3, 2, 1])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [13, 25, 74])",
        "countBeautifulPairs(nums = [1234, 5678])",
        "countBeautifulPairs(nums=[10, 20, 30, 40])",
        "countBeautifulPairs(nums = [1234, 7654])",
        "countBeautifulPairs(nums = [14, 10, 25])",
        "countBeautifulPairs(nums = [12, 34, 6, 8])",
        "countBeautifulPairs(nums = [10, 14])",
        "countBeautifulPairs(nums = [10, 30, 24, 46])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 4)",
        "makeTheIntegerZero(num1 = 500, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 15)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"reven\")",
        "makeSmallestPalindrome(s = \"mev\")",
        "makeSmallestPalindrome(s = 'radar')"
    ],
    "sample_165": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bird\"], s = \"cb\")",
        "isAcronym(words = [\"tea\", \"coffee\"], s = \"tcc\")",
        "isAcronym(words = [\"manchester\", \"united\"], s = \"MU\")",
        "isAcronym(words = [\"science\", \"technology\"], s = \"ST\")",
        "isAcronym(words = [\"The\", \"quick\", \"brown\"], s = \"tqb\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"bamp\")",
        "isAcronym(words = [\"Fast\", \"Banana\"], s = \"FB\")",
        "isAcronym(words = [\"big\", \"bang\", \"blast\"], s = \"BB\")",
        "isAcronym(words = [\"abcd\", \"efgh\"], s = \"aBEcD\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,1,0,1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,1,1,0,0,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,1,0,0,1,0,1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n=10, k=3)"
    ],
    "sample_227": [
        "countWays(nums = [10, 20, 30, 40, 50])",
        "countWays(nums = [1, 2, 5, 6])",
        "countWays(nums = [0, 1, 3, 4])",
        "countWays(nums = [1, 2, 4, 8, 16])",
        "countWays(nums = [2, 3, 4, 5, 6])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [3, 2, 4])",
        "countWays(nums = [1, 3, 3, 4, 7, 8, 9])",
        "countWays(nums = [2,3,4])",
        "countWays(nums = [4, 6, 3, 1, 2, 5])"
    ],
    "sample_39": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abracadabra\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"RR_L\")",
        "furthestDistanceFromOrigin(moves = \"RR_L\")",
        "furthestDistanceFromOrigin(moves = \"LRU\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 4)",
        "distanceTraveled(mainTank = 20, additionalTank = 15)",
        "distanceTraveled(mainTank = 6, additionalTank = 3)",
        "distanceTraveled(mainTank = 6, additionalTank = 5)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 4, 4, 1])",
        "countCompleteSubarrays(nums = [1,2,3,3,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 1, 2, 3, 2])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1,3,5,7,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [5, 6, 7, 8, 9], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1,3,5,7,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7], threshold = 8)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], threshold = 10)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4, 1], threshold = 5)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4, 5], threshold=10)",
        "longestAlternatingSubarray(nums = [2, 1, 5, 4, 3], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 7, 3, 1, 7, 10], threshold = 5)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [4, 5], [7, 8]])",
        "numberOfPoints(nums = [[1,3],[5,7],[2,8]])",
        "numberOfPoints(nums = [[1, 2], [2, 3]])",
        "numberOfPoints(nums = [[2, 4], [6, 8], [3, 6]])",
        "numberOfPoints(nums = [[2, 5], [1, 3], [5, 7]])",
        "numberOfPoints(nums = [[2, 3], [1, 3], [2, 4], [2, 3]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 5])",
        "countBeautifulPairs(nums = [10, 7])",
        "countBeautifulPairs(nums = [1, 3, 5, 7])",
        "countBeautifulPairs(nums = [1, 3, 5, 7, 9])",
        "countBeautifulPairs(nums = [101, 202])",
        "countBeautifulPairs(nums = [15, 20])",
        "countBeautifulPairs(nums = [15, 10])",
        "countBeautifulPairs(nums = [13, 52])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 5)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 8, 6, 7], t = 10)",
        "longestAlternatingSubarray(nums = [3, 5, 2, 4, 1], t = 5)",
        "longestAlternatingSubarray(nums = [5, 6, 7, 8, 9, 10, 11, 12, 13], t = 10)",
        "longestAlternatingSubarray(nums = [5, 1, 2, 6, 3, 4], t = 5)",
        "longestAlternatingSubarray(nums = [5, 1, 3, 1, 2, 3, 1, 4], t = 6)",
        "longestAlternatingSubarray(nums = [3,4,5,7,8,9,10], t = 10)",
        "longestAlternatingSubarray(nums = [4,3,5,6], t = 10)",
        "longestAlternatingSubarray(nums = [3,5,6,8,1,2,3,4], t = 5)"
    ],
    "sample_36": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aaabbb\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"AAABCD\")",
        "minLength(s = \"ABCDEABCDAB\")",
        "minLength(s = \"BACDAB\")",
        "minLength(s = \"AAABBBCCABC\")",
        "minLength(s = \"AAAABBB\")",
        "minLength(s = \"AAABBBCCA\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 0, 1, 0, 1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums=[1,2,3,4], modulo=5, k=2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 10, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 3, 4, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 3, 1, 0, 0, 0], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums=[2,5,9,1], modulo=10, k=1)"
    ],
    "sample_9": [
        "colorTheArray(n = 5, queries = [[0, 2], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n=5, queries=[[0, 1], [2, 3], [2, 4]])",
        "colorTheArray(n=5, queries=[(0,1), (1,2), (2,3), (3,4)])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [2, 3], [2, 1]])",
        "colorTheArray(n=5, queries=[[0,1],[1,2],[2,3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 0], [0, 3], [1, 2]])",
        "colorTheArray(n = 3, queries = [[1,2],[0,2],[2,3]])",
        "colorTheArray(n=10, queries=[(0, 3), (2, 5), (2, 6)])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7, 9], nums2 = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 3, 4, 7], nums2 = [1, 2, 4, 7])",
        "maxNonDecreasingLength(nums1 = [3, 4, 5, 6, 7], nums2 = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1,2,3,2,5], nums2 = [1,2,3,2,4])",
        "maxNonDecreasingLength(nums1 = [1,2,3,2,5], nums2 = [5,3,2,7,6])",
        "maxNonDecreasingLength(nums1 = [4, 3, 2, 5, 6, 7], nums2 = [2, 1, 3, 4, 8, 9])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 10, target = 100)",
        "minimumPossibleSum(n=5, target=8)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(nums = [3, 6, 9, 1])",
        "findValueOfPartition(nums = [1,5,3,6,8,10])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 45])",
        "findValueOfPartition(nums = [1,5,3,6,7,9])",
        "findValueOfPartition(nums = [1,5,3,6,7])",
        "findValueOfPartition(nums = [5, 3, 1, 4, 3])",
        "findValueOfPartition(nums = [7,3,5,9,2,4,9,6,4,2])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRR_\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLL_\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLRR\")",
        "furthestDistanceFromOrigin(moves = 'RRRRLLLL_')",
        "furthestDistanceFromOrigin(moves = 'LLLLRRR___')",
        "furthestDistanceFromOrigin(moves = \"RRRRRR__L\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [2,2,1,3,2,2,2])",
        "minimumIndex(nums = [1,2,3,4,2,1])",
        "minimumIndex(nums = [1, 2, 3, 4, 2, 3, 4, 2, 3])",
        "minimumIndex(nums = [2, 3, 1, 3, 2])",
        "minimumIndex(nums = [2,2,2,0,1])",
        "minimumIndex(nums = [1, 1, 2, 2, 3])",
        "minimumIndex(nums = [1, 0, 0, 1, 0, 1, 0])",
        "minimumIndex(nums = [2, 6, 4, 10, 7])",
        "minimumIndex(nums = [0, 2, 3, 3, 3, 3])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 6])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 6])",
        "semiOrderedPermutation(nums = [1, 2, 3, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3,1,2])"
    ],
    "sample_172": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n=5, k=2)",
        "minimumSum(n=5, k=2)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 5, k = 22)",
        "minimumSum(n = 5, k = 13)",
        "minimumSum(n = 7, k = 4)"
    ]
}