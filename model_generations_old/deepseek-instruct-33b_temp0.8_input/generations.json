{
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [0, 1, 9], [2, 4, 4], [0, 2, 2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 4, 5], [3, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3],[2,3,5],[1,4,6]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [0, 2, 2], [2, 4, 5], [3, 4, 4]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 6], [4, 7, 3], [6, 9, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 5], [3, 4, 1], [2, 5, 2]])",
        "maximizeTheProfit(n = 5, offers = [(0, 1, 10), (2, 4, 5), (3, 3, 2)])",
        "maximizeTheProfit(n = 5, offers = [(0,1,5), (0,2,7), (1,3,1), (3,4,2), (4,2,4)])",
        "maximizeTheProfit(n = 10, offers = [(0, 3, 5), (4, 9, 5), (3, 9, 5)])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 5)",
        "canSplitArray(nums = [1,2,3,4], m = 1)",
        "canSplitArray(nums = [2,1,3,5], m = 6)",
        "canSplitArray(nums = [2,1,3,2], m = 4)",
        "canSplitArray(nums = [2, 2, 1], m = 3)",
        "canSplitArray(nums = [2, 3, 1, 2, 4, 3], m = 5)",
        "canSplitArray(nums = [1,2,2,1,3,1,1], m = 3)",
        "canSplitArray(nums = [5,1,3,5,10,7,4,9,2,8], m = 100)",
        "canSplitArray(nums = [3,4,1,2,5,6], m = 6)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2, 1, 0, 0, 0], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1, 2, 2, 1, 1, 7, 5], k = 4)",
        "checkArray(nums = [3, 0, 1, 2, 2], k = 2)",
        "checkArray(nums=[1, 0, 0, 1, 0], k=3)",
        "checkArray(nums = [2, 1, 3], k = 2)",
        "checkArray(nums = [4, 2, 5, 1, 2], k = 3)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1, 3, 1], k = 2)",
        "maximumBeauty(nums = [1,3,1], k = 2)",
        "maximumBeauty(nums = [1,3,1], k = 2)",
        "maximumBeauty(nums = [1,3,1], k = 2)",
        "maximumBeauty(nums=[1, 3, 1], k=2)",
        "maximumBeauty(nums=[4, 6, 1, 2], k=2)",
        "maximumBeauty(nums = [2, 4, 5, 3, 1], k = 1)",
        "maximumBeauty(nums = [2, 1, 4, 2], k = 1)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words = [\"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four\", \"five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple, orange\", \"banana, grape\"], separator = \", \")",
        "splitWordsBySeparator(words = [\"hello/world\", \"!!\", \"goodbye\"], separator = \"//\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 5, 4, 2])",
        "countWays(nums = [2, 0, 2])",
        "countWays(nums = [1, 1, 1, 3, 5])",
        "countWays(nums = [3, 2, 1, 3, 2, 1])",
        "countWays(nums=[1, 2, 1, 2, 2])",
        "countWays(nums = [3,2,1,0,2,3])",
        "countWays([3, 1, 2, 2, 1, 3])",
        "countWays([3,1,2,2,3,4,5])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1, 2, 2, 2, 1, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 3])",
        "minimumIndex(nums = [1,1,2,2,3,4])",
        "minimumIndex(nums = [2,2,2,2,1,1,1])",
        "minimumIndex(nums = [1,2,2,2,2,2,2,2,2])",
        "minimumIndex(nums = [2, 5, 2, 4, 2, 3])",
        "minimumIndex(nums=[1, 2, 3, 1, 1, 2, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 2, 4, 2, 3, 2, 2])",
        "minimumIndex(nums=[1, 2, 3, 1, 1, 1, 1, 2, 1, 2, 2])",
        "minimumIndex(nums = [2,1,1,1,1,4,1,5,6,6,6,6,6,6,6,6,7,6,6,6,7])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,4],[7,10]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints(nums = [[1, 4], [7, 9]])",
        "numberOfPoints(nums = [[1, 4], [7, 8], [2, 5]])",
        "numberOfPoints(nums = [[1,2],[3,5],[7,8]])",
        "numberOfPoints(nums = [[1,4],[2,3],[4,6]])",
        "numberOfPoints(nums = [[2, 4], [4, 8]])",
        "numberOfPoints(nums = [[1,3],[4,6],[8,9]])",
        "numberOfPoints(nums = [[3,4],[2,6]])",
        "numberOfPoints(nums = [[1,5], [2,3], [3,6]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [4,3,1,2,5])",
        "semiOrderedPermutation(nums = [4,3,1,2,5])",
        "semiOrderedPermutation(nums = [5,4,1,2,3])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [5, 3, 4, 2, 1])",
        "semiOrderedPermutation(nums = [5,3,4,1,2])",
        "semiOrderedPermutation(nums = [4, 3, 5, 2, 1])",
        "semiOrderedPermutation(nums=[1,3,2,4])",
        "semiOrderedPermutation(nums=[1,3,2,5,4])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 1, 2, 1, 1])",
        "minimumIndex(nums = [1,2,1,2,1])",
        "minimumIndex(nums = [1, 1, 2, 1, 1])",
        "minimumIndex(nums = [1, 1, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 1, 1, 3])",
        "minimumIndex(nums = [1, 1, 2, 2, 1, 1])",
        "minimumIndex(nums=[1, 2, 5, 9, 5, 9, 5, 5, 5])",
        "minimumIndex(nums = [1, 3, 2, 2, 2, 2, 5, 4, 2])",
        "minimumIndex(nums = [1,2,2,3,2,1,2,2])",
        "minimumIndex(nums=[1,2,2,3,2,1,1,2,2])"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 4], [2, 3], [4, 6]])",
        "numberOfPoints(nums = [[1,3], [2,4]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,5]])",
        "numberOfPoints(nums = [[1, 5], [3, 4]])",
        "numberOfPoints(nums = [[1,3], [3,5]])",
        "numberOfPoints(nums = [[2,4],[3,5]])",
        "numberOfPoints(nums = [[1, 3], [3, 6], [4, 5]])",
        "numberOfPoints(nums=[[1,3], [2,5]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [100, 2], target = 1)",
        "maximumJumps(nums = [100, 2], target = 1)",
        "maximumJumps(nums = [100, 2], target = 1)",
        "maximumJumps(nums = [1, 3, 6, 4, 1, 2], target = 2)",
        "maximumJumps(nums = [100,20,15,2,1,70,2], target = 10)",
        "maximumJumps(nums = [1,3,6,2,5,4,3,2,1], target = 1)",
        "maximumJumps(nums=[1, 2, 3, 4], target=1)",
        "maximumJumps(nums = [2,1,3], target = 1)",
        "maximumJumps(nums = [0,2,1,1], target = 1)",
        "maximumJumps(nums = [2, 4, 6, 1, 3, 8], target = 3)"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n = 3, k = 1)"
    ],
    "sample_154": [
        "canSplitArray(nums = [7,2,5,10,8], m = 14)",
        "canSplitArray(nums = [1,2,3,4,5], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 2, 2, 1], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 5)",
        "canSplitArray(nums = [2, 5, 10, 3], m = 9)",
        "canSplitArray(nums = [1, 3, 5], m = 7)",
        "canSplitArray(nums = [2, 3, 1, 1, 1, 1, 1], m = 5)",
        "canSplitArray(nums = [1, 3, 5], m = 9)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 3], [2, 3, 2], [3, 4, 4], [4, 5, 1]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 5], [1, 2, 2], [3, 4, 3]])",
        "maximizeTheProfit(n = 4, offers = [[0,1,3],[0,2,1],[1,3,2],[2,3,1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 5], [2, 3, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [3, 5, 2], [4, 5, 3]])",
        "maximizeTheProfit(n = 10, offers = [[2, 3, 5], [3, 5, 2], [6, 7, 3]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 5], [2, 3, 4], [3, 3, 1]])",
        "maximizeTheProfit(n = 10, offers = [[2, 4, 5], [3, 8, 3], [5, 8, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 1], [0, 3, 3], [0, 4, 4], [0, 5, 5], [1, 2, 2], [1, 3, 4], [1, 4, 5], [1, 5, 6], [2, 3, 1], [2, 4, 2], [2, 5, 3], [3, 4, 4], [3, 5, 5], [4, 5, 1]])"
    ],
    "sample_108": [
        "checkArray(nums = [1,2,3], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "checkArray(nums = [1, 0, 1], k = 2)",
        "checkArray(nums = [3, 4, 5], k = 2)",
        "checkArray(nums = [5, 4, 3, 2, 1], k = 2)",
        "checkArray(nums = [2, 3, 1, 1, 4], k = 2)",
        "checkArray(nums = [3, 1, 4, 1, 5], k = 2)",
        "checkArray(nums = [2,3,4,5,2,1], k = 3)",
        "checkArray(nums = [3, 2, 1, 5, 5], k = 3)",
        "checkArray(nums = [3, 0, 4, 1, 1, 0, 2], k = 4)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,1,2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 1, 2, 3], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 2], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 2, 2, 1, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,2,2,3], k = 2)",
        "longestEqualSubarray(nums=[1, 2, 2, 1, 2, 1, 1, 2, 2], k=2)",
        "longestEqualSubarray(nums=[1, 1, 2, 2, 3, 2], k=1)"
    ],
    "sample_8": [
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 1, queries = [[0,1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 3]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[0,2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n=3, queries=[[0, 2], [1, 2], [2, 3]])",
        "colorTheArray(n = 1, queries = [[0, 2]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,3],[1,3]])"
    ],
    "sample_55": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"lcdsbncd\")",
        "smallestString(s = \"lazydog\")",
        "smallestString(s = 'kddsbna')",
        "smallestString(s = 'kbcd')",
        "smallestString(s = 'kddsbodc')",
        "smallestString(s = 'kddsbnc')",
        "smallestString(s = \"kddsbodc\")",
        "smallestString(s = \"lkducecd\")",
        "smallestString(s = 'mqqsbmqb')"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,3,5,2,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,3,5,2,4,6], threshold = 6)",
        "longestAlternatingSubarray(nums=[2, 3, 4, 5], threshold=5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7], threshold = 7)",
        "longestAlternatingSubarray(nums = [10, 9, 8, 7, 6, 5, 4], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 4, 2, 8, 5, 7], threshold = 8)",
        "longestAlternatingSubarray(nums = [4,3,6,7,2,1,1,0], threshold = 10)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 6)",
        "longestAlternatingSubarray(nums=[2, 3, 4, 5], threshold=5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7, 8], threshold = 8)",
        "longestAlternatingSubarray(nums=[1,2,3,4,5,6,7,8,9], threshold=10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 1, 2], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 7, 8, 11, 13], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 7, 5, 4, 8], threshold = 7)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [5,3,1,1,1,3,5,1,1])",
        "distinctDifferenceArray(nums = [5, 3, 1, 1, 2])",
        "distinctDifferenceArray(nums = [5,3,1,1,2,3,5])",
        "distinctDifferenceArray(nums = [5,3,1,2,3,7,9])",
        "distinctDifferenceArray(nums = [1, 2, 2, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABC\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"bbaab\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3], m = 4)",
        "canSplitArray(nums = [1, 1, 1], m = 2)",
        "canSplitArray(nums = [1,2,3,4,5], m = 9)",
        "canSplitArray(nums = [3, 2, 1], m = 5)",
        "canSplitArray(nums = [1, 2, 2, 1], m = 5)",
        "canSplitArray(nums = [3, 6, 5], m = 9)",
        "canSplitArray(nums = [1, 2, 10, 10, 10], m = 13)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1,0,0,1])",
        "doesValidArrayExist(derived = [0,0,1,1])"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 1)",
        "checkArray(nums = [1,0,0,0,0,0,0,0], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 4)",
        "checkArray(nums=[1, 3, 2, 4], k=2)",
        "checkArray(nums = [3, 1, 5, 2], k = 2)",
        "checkArray(nums = [1, 0, 2, 1, 0, 0, 2], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [40, 45, 35], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [16,17,15,18,19], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 18, 20], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [8,9,10,11], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 9, 15, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 18, 20, 15, 16, 16], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 35], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 6, 7, 8, 9, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 20, 50, 10, 60, 80], target = 70)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5], k=3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1, 3, 1, 1, 2, 3, 3, 2], k = 1)",
        "maximumBeauty(nums = [1,3,1,1,2,3,3,2], k = 2)",
        "maximumBeauty(nums = [1,3,1,3], k = 2)",
        "maximumBeauty(nums = [1,3,1,4,2], k = 1)",
        "maximumBeauty(nums = [1,3,1,4,3], k = 1)",
        "maximumBeauty(nums=[1,3,1,1,1], k=0)",
        "maximumBeauty(nums=[1,3,1,1,4,3,3,3], k=2)"
    ],
    "sample_205": [
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"2075\")",
        "minimumOperations(num = \"10007\")",
        "minimumOperations(num = \"5000\")",
        "minimumOperations(num = \"90250\")",
        "minimumOperations(num = \"27727727\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"0025\")",
        "minimumOperations(s = \"00\")",
        "minimumOperations(s = \"00\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"2525\")",
        "minimumOperations(s = \"125075\")",
        "minimumOperations(s = \"2507\")",
        "minimumOperations(s = \"121\")",
        "minimumOperations(s = \"21\")",
        "minimumOperations(s = \"120525257500\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [5, 2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [5, 4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [5,2,1,3,4])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [5, 3, 2, 4, 1])",
        "semiOrderedPermutation(nums=[3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums=[4,3,1,2,5])",
        "semiOrderedPermutation(nums = [7, 3, 5, 2, 1, 4, 6])",
        "semiOrderedPermutation(nums = [7, 3, 5, 8, 6, 4, 2, 1])",
        "semiOrderedPermutation(nums = [7, 3, 1, 2, 5, 4, 6, 8, 9, 10])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRA\")",
        "furthestDistanceFromOrigin(moves = \"LLRAR\")",
        "furthestDistanceFromOrigin(moves = \"LLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRAAA\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLL\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"bear\", \"apple\", \"cat\"], s = \"baac\")",
        "isAcronym(words = [\"black\", \"hole\"], s = \"bh\")",
        "isAcronym(words = [\"b\",\"a\",\"n\",\"a\",\"n\",\"a\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"apple\", \"cat\"], s = \"bac\")",
        "isAcronym(words=[\"banana\", \"apple\", \"grape\"], s=\"bag\")",
        "isAcronym(words = [\"book\", \"store\"], s = \"bs\")",
        "isAcronym(words=[\"banana\", \"split\", \"like\"], s=\"BSL\")",
        "isAcronym(words = [\"banana\", \"pancake\", \"nugget\"], s = \"bnp\")",
        "isAcronym(words=[\"Black\", \"Lives\", \"Matter\"], s=\"BLM\")",
        "isAcronym(words = [\"Banana\", \"Breaks\", \"Butterflies\"], s = \"BBB\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5, 6], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,4,2,3], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums=[2, 1, 4, 5, 3], modulo=5, k=1)",
        "countInterestingSubarrays(nums = [2, 1, 3, 2, 3, 1, 4], modulo = 2, k = 1)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [23, 45, 61])",
        "countBeautifulPairs(nums = [23, 45, 61])",
        "countBeautifulPairs(nums = [22, 33, 44])",
        "countBeautifulPairs(nums = [12, 21, 13, 31])",
        "countBeautifulPairs(nums = [12, 21, 13])",
        "countBeautifulPairs(nums = [21, 10])",
        "countBeautifulPairs(nums = [22, 44, 11, 37])",
        "countBeautifulPairs(nums = [23, 31, 42])",
        "countBeautifulPairs(nums = [21, 7, 12, 14, 21])"
    ],
    "sample_97": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [100,2], target = 1)",
        "maximumJumps(nums = [10,9,8,7,6,5,4,3,2,1], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 2)",
        "maximumJumps(nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9], target = 2)",
        "maximumJumps(nums = [5,6,7,8,9], target = 2)",
        "maximumJumps(nums = [0, 10], target = 5)",
        "maximumJumps(nums = [0,2,3,2,1,3], target = 1)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [11, 21, 11])",
        "countBeautifulPairs(nums = [11, 12, 13, 14])",
        "countBeautifulPairs(nums = [22, 33, 44, 55])",
        "countBeautifulPairs(nums = [1, 2, 3, 4, 5])",
        "countBeautifulPairs(nums = [35, 1, 45, 7])",
        "countBeautifulPairs(nums = [15, 45, 23])",
        "countBeautifulPairs(nums = [23, 28])",
        "countBeautifulPairs(nums = [20, 12])",
        "countBeautifulPairs(nums = [22, 35, 43])",
        "countBeautifulPairs(nums = [20, 22, 23, 30])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"AABBCCDDEE\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ACB\")",
        "minLength(s = \"ACBCDAB\")"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = 'rtingrs')"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [3,6,10,1])",
        "findValueOfPartition(nums = [3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [3, 1, 2, 4])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 3])",
        "findValueOfPartition(nums = [3, 2, 4, 1, 5])",
        "findValueOfPartition(nums = [3,6,1,7,2])",
        "findValueOfPartition(nums = [4, 1, 3])",
        "findValueOfPartition(nums = [1, 2, 4, 7])",
        "findValueOfPartition(nums = [1,3,5,6,7])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[0,2]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 3, queries = [])",
        "colorTheArray(n = 2, queries = [[0,1],[1,2]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 3], [1, 3]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 3]])",
        "colorTheArray(n=4, queries=[[0,2],[1,2],[3,2]])",
        "colorTheArray(n = 3, queries = [[0,1], [1,2], [0,3], [2,1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 3], [1, 3]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n=3, target=5)",
        "minimumPossibleSum(n=3, target=5)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n=4, target=4)"
    ],
    "sample_171": [
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n=2, k=2)",
        "minimumSum(n=2, k=2)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 18, 10, 20], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours=[16, 18, 20], target=20)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 20], target = 24)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 21, 14, 15], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 20, 24], target = 22)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 6, 4, 2], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 9], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 10, 25, 30], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 8, 9, 9, 9], target = 8)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums=[1, 2, 3, 4, 5], m=10)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 1)",
        "canSplitArray(nums = [1, 1, 2, 3, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 1, 4], m = 5)",
        "canSplitArray(nums = [1,2,2,1], m = 5)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 3, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 5, 7], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 4, 5, 3, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 5, 3, 6, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[2, 4, 6, 3, 1], m=7, k=2)",
        "countInterestingSubarrays(nums = [3, 5, 6, 3, 2], m = 4, k = 2)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [4,5,1,2,3], t = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5,10,6,7,8,9], t = 10)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 5, 7], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 1, 3], t = 2)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4, 4, 6], t = 6)",
        "longestAlternatingSubarray(nums=[1, 4, 3, 2], t=10)",
        "longestAlternatingSubarray(nums = [3, 5, 4, 6, 7, 8, 10, 9, 11], t = 11)",
        "longestAlternatingSubarray(nums=[2,3,5,4,6,8,3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], t=10)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,1,1,0])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = \"512301000000\")",
        "removeTrailingZeros(num = \"512301000000\")",
        "removeTrailingZeros(num = \"51230100000000\")",
        "removeTrailingZeros(num = \"5123010000000000\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 7, b = 2)",
        "makeTheIntegerZero(a = 9, b = 2)",
        "makeTheIntegerZero(a = 9, b = 2)",
        "makeTheIntegerZero(a = 9, b = 3)",
        "makeTheIntegerZero(a = 13, b = 3)",
        "makeTheIntegerZero(a = 20, b = 2)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 7], m = 10)",
        "canSplitArray(nums = [2, 3, 4], m = 5)",
        "canSplitArray(nums=[1,2,3,4,5,10], m=10)",
        "canSplitArray(nums = [1, 3, 2], m = 5)",
        "canSplitArray(nums = [3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 2, 1, 3], m = 4)"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [10, 20, 30, 40])",
        "maxSum(nums = [51, 715, 7, 1])",
        "maxSum(nums = [11, 12])",
        "maxSum(nums = [31, 2, 3])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n=2, target=5)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,3,2,4,7])",
        "findValueOfPartition(nums = [1,3,2,4,7])",
        "findValueOfPartition(nums = [1,3,2,4,7])",
        "findValueOfPartition(nums = [4, 1, 8, 7])",
        "findValueOfPartition(nums = [4, 1, 8, 7])",
        "findValueOfPartition(nums = [3,6,1,2,5])",
        "findValueOfPartition(nums = [3, 6, 1, 2])",
        "findValueOfPartition(nums = [3,6,1,7])",
        "findValueOfPartition(nums = [2,4,1,3])",
        "findValueOfPartition(nums = [4, 3, 2, 7, 1])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,3],[2,4],[3,5]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,3], [2,4], [5,8]])",
        "numberOfPoints(nums = [[2,5], [3,7], [8,10]])",
        "numberOfPoints(nums = [[1,2],[4,5],[7,8],[10,11],[13,14]])",
        "numberOfPoints(nums = [[3, 5], [2, 6]])",
        "numberOfPoints(nums = [[2,5],[4,8]])",
        "numberOfPoints(nums = [[10,15], [25, 35], [28, 88]])",
        "numberOfPoints(nums = [[0, 3], [1, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,5],[20,25],[50,70],[45,50]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums=[[1, 3], [2, 5]])",
        "numberOfPoints(nums = [[1,2], [2,3], [3,4], [4,5]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 1]])",
        "numberOfPoints(nums = [[0, 3], [1, 2]])",
        "numberOfPoints(nums = [[1,3],[2,4],[4,5]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [3, 5]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \" \")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one,two', 'three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two,three', 'four,five,six'], separator = \",\")",
        "splitWordsBySeparator(words=[\"one,two\", \"three,four\", \"five\", \"six\"], separator=\",\")",
        "splitWordsBySeparator(words=['one-two-three', 'four-five-six'], separator='-')",
        "splitWordsBySeparator(words = ['one-two', '-three', 'four', 'five-', '-six'], separator = '-')"
    ],
    "sample_200": [
        "minOperations(nums = [2, 4, 8, 2], target = 7)",
        "minOperations(nums = [1, 2, 3, 4], target = 100)",
        "minOperations(nums=[1], target=2)",
        "minOperations(nums = [2,3,20,5,3], target = 50)",
        "minOperations(nums = [1,2,3,4], target = 0)",
        "minOperations(nums=[1, 2, 3], target=4)",
        "minOperations(nums = [2, 4, 8, 1], target = 7)",
        "minOperations(nums = [4, 5], target = 13)",
        "minOperations(nums = [5,10], target = 13)",
        "minOperations(nums=[1, 1, 2, 2, 4], target=3)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,3,2,1], k = 3)",
        "checkArray(nums = [1,2,1,2,1], k = 3)",
        "checkArray(nums = [1, 2, 3, 5, 6], k = 3)",
        "checkArray(nums = [2,2,3,4,5], k = 3)",
        "checkArray(nums = [2,3,1,1,4], k = 3)",
        "checkArray(nums = [1, 2, 3, 3, 4, 2, 1], k = 2)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1])"
    ],
    "sample_159": [
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [51, 712, 1, 2])",
        "maxSum(nums = [2, 3, 4])",
        "maxSum(nums = [51,715,7,17])",
        "maxSum(nums=[2, 4, 6, 8])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4])",
        "continuousSubarrays(A = [1, 2, 3, 4])",
        "continuousSubarrays(A = [1,2,3,4,5])",
        "continuousSubarrays(A = [1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3])",
        "continuousSubarrays(A=[1,2,3,4,5])",
        "continuousSubarrays(A = [1, 2, 1, 3, 2])",
        "continuousSubarrays(A=[1,2,3,1,2,3])",
        "continuousSubarrays(A = [1, 2, 3, 2, 4, 3])",
        "continuousSubarrays(A = [1,2,2,3,1,2,3,1,2,3,1,2,3,1,2])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3,2,3,4,2])",
        "distinctDifferenceArray(nums = [1,2,3,2,1,2,2,1])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 3, 2, 5], b = [2, 4, 3, 7])",
        "maxNonDecreasingLength(a = [1,2,3,4], b = [4,3,2,1])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 3, 2, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 2, 1], b = [3, 2, 1, 4, 7])",
        "maxNonDecreasingLength(a = [1,2,1,2,1], b = [2,1,2,1,2])",
        "maxNonDecreasingLength(a = [1, 2, 4, 3, 4], b = [5, 6, 7, 8, 9])",
        "maxNonDecreasingLength(a=[5, 1, 6, 3, 6], b=[2, 3, 4, 5, 6])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)"
    ],
    "sample_160": [
        "maxSum(nums = [51,71,17,24,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51,71,17,42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [1, 1, 1])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbncz')",
        "smallestString(s = 'kddsbodc')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'labdac')",
        "smallestString(s = 'abcd')",
        "smallestString(s = 'kddsebcd')",
        "smallestString(s='labdabc')",
        "smallestString(s = 'ladbcmba')",
        "smallestString(s = 'kbqatptscd')",
        "smallestString(s='lacbmaa')"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [4, 1, 8, 7])",
        "findValueOfPartition(nums = [3, 6, 10])",
        "findValueOfPartition(nums = [1, 3, 2, 6, 4])",
        "findValueOfPartition(nums = [3, 6, 1, 2])",
        "findValueOfPartition(nums = [3, 6, 1])",
        "findValueOfPartition(nums = [3, 6, 10])",
        "findValueOfPartition(nums=[3, 6, 1, 2, 5])",
        "findValueOfPartition(nums = [10, 3, 2, 1, 4])",
        "findValueOfPartition(nums=[1, 5, 8, 12, 17, 20])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'bab')",
        "makeSmallestPalindrome(s = 'abcba')",
        "makeSmallestPalindrome(s = 'abcba')",
        "makeSmallestPalindrome(s = 'bba')"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1=1, num2=2)",
        "makeTheIntegerZero(num1 = 25, num2 = 5)",
        "makeTheIntegerZero(num1=2, num2=4)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,3],[2,5]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,5]])",
        "numberOfPoints(nums = [[2,3],[3,6],[5,8]])",
        "numberOfPoints(nums = [[3,5],[1,4]])",
        "numberOfPoints(nums = [[3,5],[0,0],[4,4]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [3,1,4,3,2,2,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], m=2, k=1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], m=2, k=1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5, 6], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[2, 3, 1, 4], m=2, k=1)",
        "countInterestingSubarrays(nums = [2, 3, 4], m = 2, k = 0)"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"baba\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 3, 7, 9])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [5,3,1,2,5,5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [5,3,1,2,3,3])",
        "distinctDifferenceArray(nums = [1,2,3,2,1])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 7], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 7, 8, 9], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 7, 9, 5], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 7, 5], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 9, 8, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8, 9, 10], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 8, 6, 7], target = 6)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s='neveroddoreven')",
        "makeSmallestPalindrome(s=\"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'never')"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '51230100000000')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [3,1,4,3,2,2,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [3,1,4,1,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5, 6], m=2, k=1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 2, 5, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 5, 4, 6, 7, 8], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 5, 6, 7, 3, 4, 2], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [2,1,10,6,2,5,1,7], m = 4, k = 2)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1,2,3], x = 2)",
        "minCost(A = [1,2,3], x = 2)",
        "minCost(A = [1,2,3], x = 2)",
        "minCost(A = [2, 3, 1], x = 2)",
        "minCost(A=[1, 2, 3], x=2)",
        "minCost(A = [1, 2, 3], x = 3)",
        "minCost(A = [4, 2, 3], x = 2)",
        "minCost(A = [2, 1, 1], x = 2)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 1, 2])",
        "maxIncreasingGroups(u = [1, 1, 1, 2])",
        "maxIncreasingGroups(u = [1, 1, 2, 2, 2])",
        "maxIncreasingGroups(u = [1, 2, 1, 3])",
        "maxIncreasingGroups(u = [1, 2, 3, 2])",
        "maxIncreasingGroups(u=[1,1,2])",
        "maxIncreasingGroups(u = [1, 2, 2, 1, 1, 1])",
        "maxIncreasingGroups(u=[3,2,1])",
        "maxIncreasingGroups(u = [3, 2, 1, 1, 1, 2, 3])",
        "maxIncreasingGroups(u = [3, 5, 7, 2, 3])"
    ],
    "sample_110": [
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 1)",
        "checkArray(nums = [2, 3, 4], k = 2)",
        "checkArray(nums = [3, 2, 1], k = 2)",
        "checkArray(nums = [2, 3, 1, 2], k = 2)",
        "checkArray(nums = [2,3,1,2], k = 3)",
        "checkArray(nums = [1,2,2,1,1,2], k = 3)",
        "checkArray(nums = [2, 4, 5], k = 2)",
        "checkArray(nums = [1,2,1,0,0,0,0], k = 3)",
        "checkArray(nums = [3,2,1,2,3,4,3,2,1,2,3,4], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"AC\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ACA\")",
        "minLength(s = \"ACDBAC\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,2,3,4,5], target = 100)",
        "minOperations(nums = [1,2,3,4], target = 10)",
        "minOperations(nums = [1,2,3], target = 6)",
        "minOperations(nums = [1,2,3], target = 4)",
        "minOperations(nums = [1, 2, 3], target = 0)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 1)",
        "minOperations(nums = [1, 2, 3, 4], target = 100)",
        "minOperations(nums=[1,2,3,4,5], target=15)",
        "minOperations(nums=[1,2,4,8], target=16)",
        "minOperations(nums = [2,3,2,4,1], target = 1)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \"-\")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words=[], separator=\" \")",
        "splitWordsBySeparator(words = [\"apple\", \"orange\"], separator = \"-\")"
    ],
    "sample_54": [
        "smallestString(s = 'lbcabc')",
        "smallestString(s = 'ldsbncd')",
        "smallestString(s = 'kddsbncf')",
        "smallestString(s = \"kaaaaaa\")",
        "smallestString(s = 'lcejamcpb')",
        "smallestString(s = \"labcd\")",
        "smallestString(s = 'laadcbncd')",
        "smallestString(s = 'lzzzy')",
        "smallestString(s = 'lbceybz')",
        "smallestString(s = 'lcdkcmcbd')"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"L_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"LRLR_L\")",
        "furthestDistanceFromOrigin(moves = \"L___R__R\")",
        "furthestDistanceFromOrigin(moves = \"LLL__RRR\")",
        "furthestDistanceFromOrigin(moves = \"L_L__R_\")",
        "furthestDistanceFromOrigin(moves = \"LR_RL__\")",
        "furthestDistanceFromOrigin(moves = \"R_L_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"R_LR_L__\")",
        "furthestDistanceFromOrigin(moves = \"LR__RLLR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLLLLRR_\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 1)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 20, num2 = 2)",
        "makeTheIntegerZero(num1 = 16, num2 = 2)"
    ],
    "sample_51": [
        "smallestString(s = 'labdcd')",
        "smallestString(s = 'labdcd')",
        "smallestString(s = 'lazydog')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbncz')",
        "smallestString(s = 'kddsbmncd')",
        "smallestString(s='kddsbnad')",
        "smallestString(s = \"laaaab\")",
        "smallestString(s = 'abddsbncd')",
        "smallestString(s = 'lccybcd')"
    ],
    "sample_146": [
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = 'pointer')",
        "finalString(s = \"pontier\")",
        "finalString(s = \"pinter\")",
        "finalString(s = \"pontri\")",
        "finalString(s='pointer')",
        "finalString(s = 'ipointer')",
        "finalString(s = 'pintner')"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,2,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,2,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,2,1,1,1,2,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,3,2,1], k = 1)",
        "longestEqualSubarray(nums=[1,2,1,1,3], k=1)",
        "longestEqualSubarray(nums = [2,1,2,2,3,4,2,5,5,5,6], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1, 2, 3], m = 3)",
        "canSplitArray(nums = [1,2,3,4], m = 5)",
        "canSplitArray(nums = [1,2,3,4], m = 5)",
        "canSplitArray(nums = [1, 2, 2, 1], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 2)",
        "canSplitArray(nums = [1, 3, 5, 7, 9], m = 4)",
        "canSplitArray(nums=[1,1,1,1,1,1,1,1], m=8)",
        "canSplitArray(nums = [1, 3, 2, 2, 5, 2, 3, 7], m = 6)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums=[0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one,two\", \"three,four\", \"five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one,two,three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one,two\", \"three four\", \"five,six\"], separator = \"[ ,]\")",
        "splitWordsBySeparator(words=['one,two', 'three,four,five', 'six'], separator=',')",
        "splitWordsBySeparator(words = ['one,two', 'three four', 'five/six'], separator = ' ,/')",
        "splitWordsBySeparator(words = [\"one,two\", \"three\", \"four:five;six\"], separator = \"[,;:]\")",
        "splitWordsBySeparator(words = ['one', 'two,three', 'four-five', 'six'], separator = ['-', ','])",
        "splitWordsBySeparator(words = ['one,two', 'three', 'four|five&six'], separator = '[,|&]')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [5,3,4,6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [40,40,40,40], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [5,5,5,5], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 20, 15, 13], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [3,2,4,4,5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 2, 2], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [12,13,16,10], target = 20)"
    ],
    "sample_168": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"abc\", \"def\", \"ghi\"], s = \"adg\")",
        "isAcronym(words = [\"I\", \"don't\", \"know\"], s = \"IDK\")",
        "isAcronym(words = [\"What\", \"You\", \"See\", \"Is\", \"What\", \"You\", \"Get\"], s = \"WYSIWYG\")",
        "isAcronym(words = [\"banana\", \"split\"], s = \"x\")",
        "isAcronym(words = [\"beautiful\", \"world\"], s = \"bwe\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"random\", \"access\", \"memory\"], s = \"RAM\")",
        "isAcronym(words = [\"F\", \"O\", \"O\"], s = \"FOO\")",
        "isAcronym(words = [\"ban\", \"ana\"], s = \"B\")",
        "isAcronym(words = [\"A\",\"B\",\"C\"], s = \"AB\")",
        "isAcronym(words = [\"some\", \"random\", \"words\"], s = \"srpw\")",
        "isAcronym(words = [\"Best\", \"Awesome\", \"Programming\", \"Language\"], s = \"BAPL\")",
        "isAcronym(words = [\"don\", \"t\", \"panic\"], s = \"dtp\")",
        "isAcronym(words = [\"banana\", \"split\", \"gets\", \"on\", \"me\"], s = \"bsgom\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abccba\")",
        "minimumCost(s = \"bbb\")",
        "minimumCost(s = \"bbrr\")",
        "minimumCost(s = \"abccabcc\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,1,0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1,1,0,0])",
        "doesValidArrayExist(derived = [0,1,0,1])",
        "doesValidArrayExist(derived = [0,0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'bab')",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = 'aba')",
        "makeSmallestPalindrome(s = 'aba')",
        "makeSmallestPalindrome(s='abcd')",
        "makeSmallestPalindrome(s = 'bb')",
        "makeSmallestPalindrome(s = \"bob\")",
        "makeSmallestPalindrome(s='bbb')"
    ],
    "sample_50": [
        "smallestString(s = \"abaaa\")",
        "smallestString(s = 'baaab')",
        "smallestString(s = \"aaabb\")",
        "smallestString(s = 'abaab')",
        "smallestString(s = 'ab')",
        "smallestString(s = \"aabbb\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s=\"baaaa\")",
        "smallestString(s=\"ab\")",
        "smallestString(s = \"bzczd\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4,5], k=2)",
        "sumIndicesWithKSetBits(nums = [1,2,4,8,16], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "sumIndicesWithKSetBits(nums = [3,4,5,6,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 5, 8, 13], k = 2)",
        "sumIndicesWithKSetBits(nums=[2, 3, 5, 7, 11, 13, 17, 19], k=2)",
        "sumIndicesWithKSetBits(nums = [3,4,1,6], k = 2)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ACBCD\")",
        "minLength(s = \"ABCDDCBA\")",
        "minLength(s = \"ABCDDCBA\")",
        "minLength(s = \"ACEDB\")",
        "minLength(s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")"
    ],
    "sample_158": [
        "maxSum(nums = [51, 712, 1, 4])",
        "maxSum(nums = [51, 712, 1, 4])",
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [51, 712, 1, 9, 5])",
        "maxSum(nums = [51, 712, 1, 9, 5])",
        "maxSum(nums = [15, 23, 42])",
        "maxSum(nums = [1, 2, 100, 100])",
        "maxSum(nums = [30, 12, 1, 9])",
        "maxSum(nums = [10, 12, 3, 9, 24])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [5, 4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [5, 4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [5, 4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [4, 2, 1, 3])",
        "semiOrderedPermutation(nums = [5,4,1,2,3])",
        "semiOrderedPermutation(nums = [5, 3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [5, 1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3,1,2])"
    ],
    "sample_162": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [35, 36, 53])",
        "maxSum(nums = [31, 23, 88, 12, 99, 32])",
        "maxSum(nums=[31, 2, 7, 38, 88, 40, 40])",
        "maxSum(nums = [43, 62, 43, 13, 24, 1, 2, 88, 20])",
        "maxSum(nums = [88, 22, 64, 88, 41, 32, 39, 67, 67, 67])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = '11011')",
        "maximumOddBinaryNumber(s = \"11101\")",
        "maximumOddBinaryNumber(s='101')",
        "maximumOddBinaryNumber(s = '101110')",
        "maximumOddBinaryNumber(s = '1001110')",
        "maximumOddBinaryNumber(s='00011')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours=[5, 1, 4, 2, 2, 3], target=2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 18, 20, 15], target = 16)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 3, 4, 8], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 2, 5, 1, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 10, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 6, 10, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours=[8, 10, 12, 9, 15], target=10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 6, 5, 4, 7], target = 6)"
    ],
    "sample_166": [
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"banana\", \"splits\"], s = \"bs\")",
        "isAcronym(words = [\"banana\", \"splits\"], s = \"bs\")",
        "isAcronym(words = [\"banana\", \"split\"], s = \"b\")",
        "isAcronym(words = [\"beautiful\", \"day\"], s = \"bd\")",
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"], s = \"banana\")",
        "isAcronym(words = [\"banana\", \"is\", \"yellow\"], s = \"biz\")",
        "isAcronym(words = [\"first\", \"second\", \"third\"], s = \"fs\")",
        "isAcronym(words = [\"Brazil\", \"Germany\", \"Six\"], s = \"BGS\")",
        "isAcronym(words = [\"Yes\", \"This\", \"Is\", \"An\", \"Acronym\"], s = \"YTIAI\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank=0, additionalTank=1)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1, 1, 2])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(A = [1, 1, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3, 1])",
        "maxIncreasingGroups(A = [1, 1, 1, 1, 2, 2, 2, 2])",
        "maxIncreasingGroups(A = [0, 0, 1, 1, 2, 2])",
        "maxIncreasingGroups(A=[1,2,1,2,1])",
        "maxIncreasingGroups(A = [0, 1, 1, 1, 2])",
        "maxIncreasingGroups(A=[1,1,2,3,3])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [5, 3, 1, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 2])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4])",
        "countCompleteSubarrays(nums=[1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "countCompleteSubarrays(nums=[1, 2, 2, 3, 4, 1, 2, 3, 4, 5])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 7, 2, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 3, 6, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 5, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 7, 2, 3, 5, 1], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"aaabbb\")",
        "minimizedStringLength(s = \"aaabbb\")",
        "minimizedStringLength(s = \"abbbccde\")",
        "minimizedStringLength(s = \"babcbacad\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,3,2,1,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 3, 4], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [2,1,2,2,3,4,2], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 2, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums=[1,2,3,3,4,5,5,5,6], k=2)",
        "longestEqualSubarray(nums = [1, 3, 4, 3, 1, 2, 1, 1, 3, 2], k = 2)"
    ],
    "sample_10": [
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 4, queries = [[0,2], [1,2], [3,2]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 3], [1, 2]])",
        "colorTheArray(n = 6, queries = [[2, 2], [1, 1], [2, 2], [1, 2], [1, 3]])",
        "colorTheArray(n=6, queries=[[2, 2], [1, 1], [2, 2], [1, 3], [2, 2]])",
        "colorTheArray(n=2, queries=[[0, 1], [1, 2], [0, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[0,2], [1,2], [2,3], [1,3]])",
        "colorTheArray(n = 6, queries = [[0, 1], [1, 2], [2, 1], [1, 1], [4, 3]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [16, 17, 15, 18, 19], target = 18)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 18, 20, 15], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 20], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 12, 18, 20, 15], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours=[16,17,15,18,19], target=15)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 2, 1, 8], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours=[5,5,5,5,5], target=6)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20], target = 21)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours=[20, 20, 20, 20], target=20)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [11, 21, 12, 22, 13, 23])",
        "countBeautifulPairs(nums = [11, 12, 13, 111, 112, 113])",
        "countBeautifulPairs(nums = [35, 15, 45, 23])",
        "countBeautifulPairs(nums = [11, 12, 13, 111, 112])",
        "countBeautifulPairs(nums = [25, 125, 625, 3125])",
        "countBeautifulPairs(nums = [10, 15, 20])",
        "countBeautifulPairs(nums = [23, 52, 7, 40])",
        "countBeautifulPairs(nums = [21, 33, 22, 44, 35])",
        "countBeautifulPairs(nums = [25, 1, 49, 36, 16, 25])",
        "countBeautifulPairs(nums=[25, 45, 12, 34, 67])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [1, 2, 1])",
        "countWays(nums = [3, 1, 2])",
        "countWays([1, 2, 3, 4, 5])",
        "countWays(nums = [0,2,1])",
        "countWays(nums = [2, 4, 0, 3, 2])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"0001\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = '111000')",
        "maximumOddBinaryNumber(s = '00001')",
        "maximumOddBinaryNumber(s = '00001')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = '0000001')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1,3,1], k = 2)",
        "maximumBeauty(nums=[9, 9, 9, 18, 9, 9], k=3)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [5, 6, 2, 7, 4])",
        "maximumTripletValue(nums = [1, 2, 4, 8])",
        "maximumTripletValue(nums = [2, 1, 3])",
        "maximumTripletValue(nums = [7, 4, 1, 2, 1])"
    ],
    "sample_98": [
        "maximumJumps(nums = [10,20,30,40], target = 10)",
        "maximumJumps(nums = [10,9,2,5,3,7,101,18], target = 2)",
        "maximumJumps(nums = [100, 2], target = 1)",
        "maximumJumps(nums = [100, 2], target = 1)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [2,3,1,1,4], target = 1)",
        "maximumJumps(nums = [4, 2, 3, 0, 3, 1, 2], target = 5)",
        "maximumJumps(nums=[2, 3, 1, 1, 4], target=3)",
        "maximumJumps(nums=[10, 20, 30, 40, 50], target=20)",
        "maximumJumps(nums=[0,2,3,4], target=1)"
    ],
    "sample_149": [
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s='string')",
        "finalString(s = \"string\")",
        "finalString(s = 'ringt')",
        "finalString(s = 'stnir')",
        "finalString(s = 'tinrg')",
        "finalString(s='spring')"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 4])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4])",
        "continuousSubarrays(A = [1, 3, 5, 2, 4, 6])",
        "continuousSubarrays(A = [1,3,4,2,5])",
        "continuousSubarrays(A=[1, 3, 3, 7])",
        "continuousSubarrays(A = [2, 3, 1, 4])",
        "continuousSubarrays(A = [2, 1, 2, 4, 3])",
        "continuousSubarrays(A = [2, 4, 0, 2, 4, 1])",
        "continuousSubarrays(A = [3, 3, 2, 5, 3])",
        "continuousSubarrays(A = [3,3,3,3,2,2,1,1,1,1])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [5,1,3,5,2,3,4,1])",
        "countCompleteSubarrays(nums = [5, 3, 5, 5, 1, 2, 3])",
        "countCompleteSubarrays(nums=[5, 5, 1, 1, 5])"
    ],
    "sample_228": [
        "countWays(nums = [0,1,2])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums=[0,1,2])",
        "countWays([0, 1, 2])",
        "countWays(nums = [0,1,2,3,4])",
        "countWays(nums = [0,1,2,5,7])",
        "countWays([0,2,3])",
        "countWays([1,0,3])",
        "countWays([0, 1, 0, 2, 0, 3])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [1,3,1,1,2,3,3,2], k = 2)",
        "maximumBeauty(nums = [1, 5, 9, 13], k = 1)",
        "maximumBeauty(nums = [1, 5, 4, 2, 9, 9, 9], k = 3)",
        "maximumBeauty(nums = [1,3,1,4,2], k = 2)",
        "maximumBeauty(nums = [1,3,1,4,5], k = 2)",
        "maximumBeauty(nums = [1,3,1,5,4,6], k = 2)",
        "maximumBeauty(nums = [1, 5, 7, 3, 2], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 1, 5], k = 3)",
        "maximumBeauty(nums = [5, 1, 3, 4, 2, 6, 8], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(a = [5, 3, 1, 2, 3])",
        "distinctDifferenceArray(a=[5, 3, 1, 2, 4])",
        "distinctDifferenceArray(a = [5, 3, 1, 1, 2])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 3, 5, 6, 7])",
        "continuousSubarrays(a = [1, 2, 3, 5, 6, 7])",
        "continuousSubarrays(a = [1,2,3,4])",
        "continuousSubarrays(a = [1,2,3,2])",
        "continuousSubarrays(a = [1, 2, 1, 3, 3])",
        "continuousSubarrays(a = [1, 2, 3, 3, 2, 1, 2, 3, 3])",
        "continuousSubarrays(a=[1,1,1,1,2,2,2,2])",
        "continuousSubarrays(a = [3, 4, 2, 2, 1, 4, 3, 1])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3])",
        "continuousSubarrays(nums = [1, 2, 3])",
        "continuousSubarrays(nums = [1, 2, 1, 2, 3])",
        "continuousSubarrays(nums = [1, 3, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(nums = [1,3,5,7])",
        "continuousSubarrays(nums = [1, 2, 1, 3, 2, 4])",
        "continuousSubarrays(nums = [2, 4, 6, 8])",
        "continuousSubarrays(nums = [1, 3, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 1, 2, 3])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [11, 21, 11])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [23, 15, 4])",
        "countBeautifulPairs(nums = [42, 56, 14])",
        "countBeautifulPairs(nums = [2, 3, 4, 5])",
        "countBeautifulPairs(nums = [23, 45, 61, 72, 98])",
        "countBeautifulPairs(nums = [23, 56, 11, 47])",
        "countBeautifulPairs(nums = [23, 47])",
        "countBeautifulPairs(nums = [1, 21, 3, 7])",
        "countBeautifulPairs(nums = [20,30,66,77])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [5,4,1,2,3])",
        "semiOrderedPermutation(nums = [3,2,1,4])",
        "semiOrderedPermutation(nums = [4,2,1,3])",
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(nums=[3,1,2,4])",
        "semiOrderedPermutation(nums = [4,1,2,3])",
        "semiOrderedPermutation(nums=[1,3,2,4])",
        "semiOrderedPermutation(nums = [5,1,3,4,2])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [3,2,1,4])",
        "semiOrderedPermutation(nums = [3,2,1,5,4])",
        "semiOrderedPermutation(nums = [5, 2, 3, 4, 1])",
        "semiOrderedPermutation(nums = [5, 4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1])",
        "semiOrderedPermutation(nums = [5, 2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums = [5,4,3,2,1])",
        "semiOrderedPermutation(nums=[3,1,2,4])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s = '11100')",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '10')",
        "maximumOddBinaryNumber(s = '0010')"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [2,2,2,2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,4,3,2,1])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDBCD\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDACB\")",
        "minLength(s = \"ABCDACB\")",
        "minLength(s = \"ACBDCD\")",
        "minLength(s = \"ABCABDCD\")",
        "minLength(s = \"ABCABD\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,2])",
        "countCompleteSubarrays(nums=[1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,3,2,1,2,3,1])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 9, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)"
    ],
    "sample_100": [
        "maximumJumps(nums = [10,20,30,15], target = 10)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [10,20,30,15,20], target = 15)",
        "maximumJumps(nums = [10,20,30,10], target = 15)",
        "maximumJumps(nums = [10,20,30,10], target = 15)",
        "maximumJumps(nums = [10, 9, 2, 5, 3, 7, 101, 18], target = 1)",
        "maximumJumps(nums=[10, 9, 2, 5, 3, 7, 101, 18], target=100)",
        "maximumJumps(nums = [1, 3, 6, 2, 7], target = 3)",
        "maximumJumps(nums = [3, 3, 3, 1, 4], target = 2)",
        "maximumJumps(nums = [10, 2, 3, 5, 1, 8, 12, 9], target = 2)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [3, 1, 4, 1, 5, 9, 2, 6])",
        "maxIncreasingGroups(x = [3, 1, 4, 1, 5, 9, 2, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 6, 7, 8, 9])",
        "maxIncreasingGroups(x = [1,2,1,2,3,1,2])",
        "maxIncreasingGroups(x = [1, 2, 3, 3, 3, 4, 4, 5, 5])",
        "maxIncreasingGroups(x=[1, 3, 2, 1, 4, 5])",
        "maxIncreasingGroups(x = [1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"L___LRR\")",
        "furthestDistanceFromOrigin(moves = \"L___LRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLL___RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LL_R\")",
        "furthestDistanceFromOrigin(moves = \"L___LRRRR\")",
        "furthestDistanceFromOrigin(moves = \"L___R_LL\")",
        "furthestDistanceFromOrigin(moves = \"L___R__\")",
        "furthestDistanceFromOrigin(moves = \"R_____L\")",
        "furthestDistanceFromOrigin(moves = \"LLL____RR\")",
        "furthestDistanceFromOrigin(moves = \"R___L_L___\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '00001')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '1000')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"0110\")"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 4, queries = [[0,2],[1,2],[3,2]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,1]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,2]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,3]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [4, 1, 8, 7])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1,3,2])",
        "findValueOfPartition(nums = [3, 6, 1])",
        "findValueOfPartition(nums = [3, 6, 1, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 8, 10, 12])",
        "findValueOfPartition(nums = [3, 10, 2])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0])"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 2, 2])",
        "minimumIndex(nums = [1,2,1,2,1,2,1])",
        "minimumIndex(nums = [1,1,2,1,2,2])",
        "minimumIndex(nums = [1,1,2,2,3,3,2,2])",
        "minimumIndex(nums = [2, 1, 2, 5, 3, 2])",
        "minimumIndex(nums = [1, 2, 4, 5, 5, 5])",
        "minimumIndex(nums = [1, 2, 4, 2, 2, 2, 2])",
        "minimumIndex(nums = [1,1,2,2,2,2,1,1,1,2,2,2,1,1,1])",
        "minimumIndex(nums = [1, 3, 2, 2, 5, 2, 2, 2, 6, 2])",
        "minimumIndex(nums=[1,1,2,2,2,3,3,1,3,2,1])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,4,8,16], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 4, 8, 16], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,4,5,6], k = 1)",
        "sumIndicesWithKSetBits(nums=[3, 6, 9, 12, 15], k=3)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 2, offers = [[1, 2, 5], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 5, 3], [4, 6, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1,3,2], [2,5,3], [3,4,1]])",
        "maximizeTheProfit(n = 10, offers = [[0,2,5],[3,5,1],[9,12,1],[5,7,2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 3, 3], [3, 4, 5], [4, 5, 6]])",
        "maximizeTheProfit(n = 10, offers = [(1,2,3), (2,4,5), (3,6,7)])",
        "maximizeTheProfit(n = 5, offers = [(0, 1, 5), (0, 2, 2), (1, 3, 4), (2, 4, 1), (3, 4, 7)])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 10], [0, 2, 9], [1, 2, 8], [2, 3, 7], [2, 4, 6]])",
        "maximizeTheProfit(n=5, offers=[[0,2,3], [1,3,2], [2,4,1], [3,6,4], [4,7,3]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,2],[0,2,3],[1,3,4],[2,3,5],[1,4,5]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"025750\")",
        "minimumOperations(num = \"7525\")",
        "minimumOperations(num = \"2220\")",
        "minimumOperations(num = \"52700\")",
        "minimumOperations(num = \"1001001\")",
        "minimumOperations(num = \"527001\")",
        "minimumOperations(num = \"57250000\")",
        "minimumOperations(num = \"50002\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"525\")",
        "minimumOperations(num = \"525\")",
        "minimumOperations(num = \"525\")",
        "minimumOperations(num = \"520\")",
        "minimumOperations(num = \"20\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"2520\")",
        "minimumOperations(num = \"750\")",
        "minimumOperations(num = '2575')",
        "minimumOperations(num = '0110')"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[0,0,1],[0,1,2],[1,3,2],[3,4,1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 1], [2, 3, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 1], [1, 2, 2], [2, 3, 2]])",
        "maximizeTheProfit(n = 4, offers = [[0,2,1],[1,3,2],[2,4,1]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[3,4,5]])",
        "maximizeTheProfit(n = 5, offers = [[0,0,1],[1,2,2],[2,3,3]])",
        "maximizeTheProfit(n = 5, offers = [[0,2,1], [0,3,2], [1,4,3], [2,5,4]])",
        "maximizeTheProfit(n = 3, offers = [[0,1,2],[0,2,5]])",
        "maximizeTheProfit(n = 3, offers = [[0,0,1],[0,2,1],[1,1,1]])",
        "maximizeTheProfit(n = 5, offers = [[0,1,2],[0,4,4],[1,4,3],[1,3,3],[0,2,2]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 7, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 9)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 1, 4, 2], threshold = 2)",
        "longestAlternatingSubarray(nums=[1,1,1,2,2,2,3,3,3,3], threshold=3)",
        "longestAlternatingSubarray(nums = [3, 2, 4, 8, 1, 5, 6, 11, 23, 10], threshold = 20)"
    ],
    "sample_203": [
        "minimumOperations(num = \"2020\")",
        "minimumOperations(num = \"26\")",
        "minimumOperations(num = \"1234\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"0010\")",
        "minimumOperations(num = '100')",
        "minimumOperations(num = \"21\")",
        "minimumOperations(num = '1234')",
        "minimumOperations(num = \"2125\")",
        "minimumOperations(num = \"51\")"
    ],
    "sample_11": [
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 3], [1, 3]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 3], [1, 3]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[0,3],[2,1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [2, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[0,2],[1,2],[3,2],[1,1],[2,1]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 2], [3, 3], [2, 1]])",
        "colorTheArray(n=5, queries=[[1, 1], [2, 2], [1, 3], [3, 2], [4, 1]])",
        "colorTheArray(n = 4, queries = [[2,2], [3,2], [1,1], [2,1], [3,1]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 2], [1, 3], [0, 1], [3, 1]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 1, 2, 2, 2])",
        "minimumIndex(nums = [1,2,1,2,1,2])",
        "minimumIndex(nums = [1, 2, 3, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 2])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 2])",
        "minimumIndex(nums = [1,2,2,2,2])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 2, 1, 2, 1])",
        "minimumIndex(nums = [2, 3, 2, 3, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 1, 2, 2])",
        "minimumIndex(nums = [1, 2, 1, 3, 4, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3], target = 1)",
        "maximumJumps(nums = [1,2,3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 5)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 3)",
        "maximumJumps(nums = [10, 20, 30, 40], target = 15)",
        "maximumJumps(nums = [10, 20, 30], target = 10)",
        "maximumJumps(nums = [3,4,2], target = 2)",
        "maximumJumps(nums=[1,2,3,4], target=10)",
        "maximumJumps(nums=[5, 3, 4, 2, 1, 7, 6], target=2)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = \"512301000000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num='512301000')"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a=1, b=0)",
        "distanceTraveled(a=1, b=0)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [4, 1, 8, 7])",
        "findValueOfPartition(a = [4, 1, 8, 7])",
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 3, 2, 4])",
        "findValueOfPartition(a = [1, 3, 5])",
        "findValueOfPartition(a = [1, 3, 2, 4, 5])",
        "findValueOfPartition(a = [3, 1, 2, 4, 3])",
        "findValueOfPartition(a = [2, 4, 1])",
        "findValueOfPartition(a = [1, 5, 3, 8, 9])",
        "findValueOfPartition(a = [2, 2, 2, 1, 4, 5, 4, 4])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [5, 3, 1, 1, 2])",
        "distinctDifferenceArray(nums = [3, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [5,3,1,1,2,3,5])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 5])",
        "distinctDifferenceArray(nums = [5,3,1,1,1,3,5])",
        "distinctDifferenceArray(nums = [1, 3, 2, 4, 5])",
        "distinctDifferenceArray(nums = [3, 1, 1, 2, 3])",
        "distinctDifferenceArray(nums = [5, 3, 1, 1, 2, 2, 2, 5, 5, 5])"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 7, 3, 6, 5, 6])",
        "minimumIndex(nums = [1, 2, 5, 2, 1])",
        "minimumIndex(nums = [2, 4, 3, 1, 5])",
        "minimumIndex(nums = [1,2,2,2,1,1,2])",
        "minimumIndex(nums = [1, 2, 2, 2, 1, 2, 1, 1])",
        "minimumIndex(nums = [1, 2, 3, 3, 1])",
        "minimumIndex(nums = [0, 1, 2, 2, 1, 0])",
        "minimumIndex(nums = [1,2,3,3,3])",
        "minimumIndex(nums = [1, 1, 1, 0, 1])",
        "minimumIndex(nums = [3, 3, 3, 3, 4, 2, 2, 2, 2])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves=\"LRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLC\")",
        "furthestDistanceFromOrigin(moves = \"LLC\")",
        "furthestDistanceFromOrigin(moves = \"LLC\")",
        "furthestDistanceFromOrigin(moves=\"LLL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves=\"RLRL\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"aaabbb\")",
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbcc\")",
        "minimizedStringLength(s = \"aabbccc\")",
        "minimizedStringLength(s = \"aabbccc\")",
        "minimizedStringLength(s = \"mississippi\")",
        "minimizedStringLength(s = \"aaabbb\")",
        "minimizedStringLength(s = \"hello\")",
        "minimizedStringLength(s = \"baaabb\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [1,1,1,1,1], k = 3)",
        "checkArray(nums = [1, 3, 5, 2, 1], k = 2)",
        "checkArray(nums = [2, 3, 4, 1], k = 2)",
        "checkArray(nums = [5,3,2,2,1], k = 3)",
        "checkArray(nums = [4, 5, 6, 1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [6, 6, 7, 3], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [4, 2, 3, 1])",
        "maxIncreasingGroups(usageLimits = [1,2,1])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [1, 0, 3, 0, 2])",
        "maxIncreasingGroups(usageLimits = [10, 8, 6, 4])",
        "maxIncreasingGroups(usageLimits = [4,4,1,3,5])"
    ],
    "sample_206": [
        "minimumOperations(num = \"7500\")",
        "minimumOperations(num = \"2050\")",
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"75250\")",
        "minimumOperations(num = \"755025\")",
        "minimumOperations(num = \"005075\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = '5075')",
        "minimumOperations(num = \"15\")",
        "minimumOperations(num = \"505075\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1,1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1])"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"bba\")",
        "minimumCost(s = \"aabab\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [10, 20, 30])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 3, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 1])",
        "maxIncreasingGroups(usageLimits = [10, 3, 5])",
        "maxIncreasingGroups(usageLimits=[1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 2, 2, 2, 1, 1])",
        "maxIncreasingGroups(usageLimits = [10, 11, 12, 11])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 2, 5, 8, 5, 5, 5, 5])",
        "maxIncreasingGroups(usageLimits = [5, 1, 3, 3, 2])"
    ],
    "sample_53": [
        "smallestString(s = \"baabd\")",
        "smallestString(s = \"baabc\")",
        "smallestString(s = 'babac')",
        "smallestString(s = \"bbaabc\")",
        "smallestString(s = 'caaab')",
        "smallestString(s = 'babab')",
        "smallestString(s = 'bc')",
        "smallestString(s = 'ccfed')",
        "smallestString(s = \"bc\")",
        "smallestString(s='azazb')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,3,3,4], x = 3)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 2)",
        "minAbsoluteDifference(nums = [1, 3, 5, 7, 9], x = 3)",
        "minAbsoluteDifference(nums = [1, 3, 5, 9], x = 2)",
        "minAbsoluteDifference(nums = [1, 2, 3, 5, 6, 8], x = 2)",
        "minAbsoluteDifference(nums = [4, 1, 3, 10, 9], x = 3)",
        "minAbsoluteDifference(nums = [5,6,8,9], x = 2)",
        "minAbsoluteDifference(nums = [2, 5, 1, 8, 10, 7], x = 3)",
        "minAbsoluteDifference(nums = [1, 11, 2, 5, 9, 10], x = 4)",
        "minAbsoluteDifference(nums = [4,3,2,5,7,2,8,5,6,3], x = 4)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[0, 1, 1], [0, 2, 2], [1, 3, 1], [3, 4, 1], [0, 5, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2]])",
        "maximizeTheProfit(N = 3, offers = [[0,1,1], [1,2,1], [0,2,2]])",
        "maximizeTheProfit(N = 3, offers = [[0, 2, 3], [1, 3, 2], [0, 1, 1]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 1], [4, 5, 2], [5, 6, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 3, 1], [1, 2, 2], [2, 3, 3]])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 1], [1, 3, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 2], [1, 3, 4], [2, 3, 1]])",
        "maximizeTheProfit(N = 5, offers = [[0,1,2],[0,2,1],[1,3,2],[2,4,3]])",
        "maximizeTheProfit(N = 4, offers = [[0, 2, 1], [0, 3, 1], [0, 4, 1], [1, 2, 1], [1, 3, 1], [1, 4, 1], [2, 3, 1], [2, 4, 1], [3, 4, 1]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \"-\")",
        "splitWordsBySeparator(a = [\"a,b,c\"], b = \",\")",
        "splitWordsBySeparator(a=[\"hello,world\"], b=\",\")",
        "splitWordsBySeparator(a = [\"\", \"a\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"a-b\", \"b-a\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"apple;orange\", \"banana;grape\"], b = \";\")",
        "splitWordsBySeparator(a = [\"aa-bb-cc\"], b = \"-\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a = '512301000000')",
        "removeTrailingZeros(a='5123010000')",
        "removeTrailingZeros(a='51230100000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s='neveroddoreven')",
        "makeSmallestPalindrome(s = 'nenve')",
        "makeSmallestPalindrome(s = 'nenve')",
        "makeSmallestPalindrome(s = \"nenve\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,1,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,3,4,4,5,6], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 2, 1, 1, 3, 1, 4, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1,3,1,1,0,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,4,5,2,1], k = 2)",
        "longestEqualSubarray(nums = [2,1,2,1,2,1,1,2,2], k = 2)",
        "longestEqualSubarray(nums=[1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1], k=2)",
        "longestEqualSubarray(nums = [1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10], k = 5)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 3, 1, 1, 2, 3, 3, 2], k = 2)",
        "maximumBeauty(nums = [1,3,1], k = 2)",
        "maximumBeauty(nums = [1,3,1], k = 2)",
        "maximumBeauty(nums = [1, 3, 1], k = 2)",
        "maximumBeauty(nums = [4, 6, 1, 2], k = 2)",
        "maximumBeauty(nums = [1, 4, 8, 13], k = 5)",
        "maximumBeauty(nums=[1,3,1,1,2,3,3,2], k=2)",
        "maximumBeauty(nums = [1,3,1,2,3,3], k = 2)",
        "maximumBeauty(nums = [1,3,1,5,2,4,4,2], k = 2)",
        "maximumBeauty(nums = [2, 6, 1, 9, 10, 15], k = 2)"
    ],
    "sample_163": [
        "maxSum(nums = [51, 71, 17, 42])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [51, 712, 1, 33])",
        "maxSum(nums = [1, 2, 9])",
        "maxSum(nums = [1, 12, 3, 45, 6])",
        "maxSum(nums = [12, 24, 56, 72])",
        "maxSum(nums = [15, 23, 11, 52, 12])"
    ],
    "sample_151": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = \"trsing\")",
        "finalString(s = 'irtsng')",
        "finalString(s = \"ritsng\")",
        "finalString(s = \"rsting\")",
        "finalString(s = 'rntsng')",
        "finalString(s = 'strig')",
        "finalString(s = \"tsrng\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"5123010000000\")"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = \"0000\")",
        "maximumOddBinaryNumber(s='00')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = [\"e-a-s-y\", \"problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"e,a,s,y\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"this_is_easy\", \"this_is_problem\"], separator = \"_is_\")",
        "splitWordsBySeparator(words=['ea', 'sy problem'], separator='sy ')"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,1,2,3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1,1,2,1,4,3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 7, 7, 7], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3,1], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8,9,10,1,1,1,1,1,1], K = 2)",
        "longestEqualSubarray(A=[1,2,3,2,1,2], K=2)",
        "longestEqualSubarray(A = [1,2,2,3,4,1,5,6], K = 2)",
        "longestEqualSubarray(A=[1, 2, 3, 4, 2, 3, 3, 2, 1], K=2)",
        "longestEqualSubarray(A=[1, 2, 3, 1, 1, 4, 1, 5, 1], K=2)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [2, 1, 0])",
        "countWays(nums = [2, 1, 3])",
        "countWays(nums = [2, 1, 2, 1])",
        "countWays(nums=[4, 3, 2, 1])",
        "countWays(nums = [3, 1, 2, 2])",
        "countWays([2, 3, 1])",
        "countWays(nums = [4, 2, 3, 1, 5])",
        "countWays(nums = [4, 3, 3, 3, 3])",
        "countWays(nums = [1, 0, 3, 0, 5])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [5,4,3,2,1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 7, 8, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 2, 5, 7], k = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '5123010000000')"
    ],
    "sample_167": [
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"A\", \"Banana\"], s = \"AB\")",
        "isAcronym(words = [\"F\", \"O\", \"O\"], s = \"FOO\")",
        "isAcronym(words = [\"to\", \"be\", \"or\", \"not\", \"to\", \"be\"], s = \"tbontb\")",
        "isAcronym(words = [\"Big\", \"Corporation\"], s = \"BC\")",
        "isAcronym(words = [\"banana\", \"is\", \"a\", \"fruit\"], s = \"BIAAF\")",
        "isAcronym(words = [\"function\", \"",
        "isAcronym(words = [\"Fantastic\", \"Incredible\", \"Hulk\"], s = \"FIH\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums=[1, 2, 3, 4])",
        "countCompleteSubarrays(nums=[1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,1])",
        "countCompleteSubarrays(nums=[5, 5, 1, 1, 2, 2])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 1, target = 10)",
        "minimumPossibleSum(n = 2, target = 4)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"rtsni\")",
        "finalString(s = 'tsrngi')",
        "finalString(s = 'this is a test string')"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = 'neveroddoreven')",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'neven')"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 4], [2, 3, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 3, 4], [0, 2, 5]])",
        "maximizeTheProfit(n=5, offers=[[0,1,10],[3,4,30],[1,2,20],[0,2,20]])",
        "maximizeTheProfit(n = 5, offers = [[0,2,5], [1,2,7], [3,4,5]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [0, 1, 6], [1, 2, 7], [1, 3, 8], [2, 4, 9]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 2], [3, 4, 1], [1, 2, 6]])",
        "maximizeTheProfit(n = 4, offers = [[0,1,3], [0,2,4], [1,3,5], [1,2,3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 0, 3], [0, 1, 4], [1, 2, 3], [2, 3, 3], [2, 3, 4]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [100,2], target = 1)",
        "maximumJumps(nums = [100,2], target = 1)",
        "maximumJumps(nums = [100,2], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [100,200,300,400,500,600,700,800,900,1000], target = 1)",
        "maximumJumps(nums = [100,200,100,100,100], target = 0)",
        "maximumJumps(nums = [100,20,15,2,1,70,2], target = 10)",
        "maximumJumps(nums = [100,200,100], target = 0)",
        "maximumJumps(nums = [100,200,100], target = 0)",
        "maximumJumps(nums = [100,200,150,100,300], target = 200)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,0,1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = '1110')",
        "maximumOddBinaryNumber(s = '11100')",
        "maximumOddBinaryNumber(s = '101001')",
        "maximumOddBinaryNumber(s = \"10100\")",
        "maximumOddBinaryNumber(s = \"00011\")",
        "maximumOddBinaryNumber(s = '11000')",
        "maximumOddBinaryNumber(s = '001010')"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 3)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 1, target = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=2, k=1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [4, 5, 0, -2, -3, 1], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], modulo=2, k=1)",
        "countInterestingSubarrays(nums = [2, 1, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[4,5,0,-2,-3,1], modulo=5, k=0)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 3, 1, 1, 2, 3, 3, 2], k = 2)",
        "maximumBeauty(nums = [4,6,1,2], k = 2)",
        "maximumBeauty(nums = [1,3,1,3,1], k = 2)",
        "maximumBeauty(nums = [1,3,1,1,4,5], k = 4)",
        "maximumBeauty(nums=[5,5,5,5,5], k=2)",
        "maximumBeauty(nums=[1,2,3,4], k=1)",
        "maximumBeauty(nums = [1,3,1,3,1,2,3,1], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 2, 3, 3, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 8, 10], k = 1)",
        "maximumBeauty(nums=[9,3,5,7,8,9,1], k=2)"
    ],
    "sample_148": [
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = 'pontier')",
        "finalString(s = 'notip')",
        "finalString(s = \"notip\")",
        "finalString(s = \"notip\")",
        "finalString(s = \"nopteri\")",
        "finalString(s = \"nitrop\")",
        "finalString(s = 'nterop')",
        "finalString(s = 'notion')"
    ],
    "sample_231": [
        "countWays(nums = [0, 1, 2])",
        "countWays(nums = [1, 0, 2])",
        "countWays(nums = [1, 0, 2])",
        "countWays(nums = [0, 1, 0])",
        "countWays(nums = [1,0,2])",
        "countWays(nums = [0, 3, 2, 1])",
        "countWays(nums = [0, 3, 2])",
        "countWays(nums = [0,2,3])",
        "countWays(nums = [0, 1, 2, 3, 4])",
        "countWays(nums = [0,2])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [11, 21, 12])",
        "countBeautifulPairs(nums = [2, 5, 11, 10])",
        "countBeautifulPairs(nums = [2, 5, 11, 10])",
        "countBeautifulPairs(nums = [11, 21, 11, 71])",
        "countBeautifulPairs(nums = [23, 45, 67, 89])",
        "countBeautifulPairs(nums = [23, 45, 61, 72])",
        "countBeautifulPairs(nums = [2, 5, 10])",
        "countBeautifulPairs(nums = [2,3,4,5,6])",
        "countBeautifulPairs(nums = [23, 7, 31])",
        "countBeautifulPairs(nums = [2, 3, 4, 5, 10])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 14, num2 = 2)",
        "makeTheIntegerZero(num1 = 20, num2 = 4)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neveroddoreven\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s='neveroddoreven')",
        "makeSmallestPalindrome(s='neveroddoreven')",
        "makeSmallestPalindrome(s=\"neveroddoreven\")",
        "makeSmallestPalindrome(s=\"neven\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"banana\"], s = \"b\")",
        "isAcronym(words = [\"banana\", \"split\"], s = \"bs\")",
        "isAcronym(words = [\"banana\", \"split\"], s = \"bs\")",
        "isAcronym(words = [\"ban\", \"ana\"], s = \"ba\")",
        "isAcronym(words = [\"ban\", \"ana\"], s = \"ba\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ba\")",
        "isAcronym(words = [\"Laugh\", \"Out\", \"Loud\"], s = \"LOL\")",
        "isAcronym(words = [\"Banana\", \"Bread\", \"Butter\"], s = \"BBB\")",
        "isAcronym(words = [\"p\", \"l\", \"a\", \"n\", \"e\", \"t\"], s = \"pla\")",
        "isAcronym(words = [\"banana\", \"breaks\", \"is\", \"we\"], s = \"bbinw\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,1,1,1,0,0,0,0])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 7, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 7, 5, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 1, 3, 4, 6, 7], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n=2, k=3)",
        "minimumSum(n=2, k=2)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 4, 5])",
        "countWays(nums = [1, 0, 2, 4, 3])",
        "countWays(nums = [4, 2, 1, 3, 5])",
        "countWays(nums = [1, 3, 6])",
        "countWays(nums = [2, 2, 0, 4])",
        "countWays(nums = [5, 0, 4, 3, 2, 1])",
        "countWays(nums=[1, 5, 2, 6, 3, 7])",
        "countWays(nums = [5, 3, 1, 8, 2, 6, 7, 4])"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"0101\")",
        "minimumCost(s = \"abcdabcd\")",
        "minimumCost(s = \"bbrr\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"L_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLR_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_R_\")",
        "furthestDistanceFromOrigin(moves = \"LL_R_\")",
        "furthestDistanceFromOrigin(moves = \"L__R_\")",
        "furthestDistanceFromOrigin(moves = \"___\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"R__L\")",
        "furthestDistanceFromOrigin(moves = \"__R_\")",
        "furthestDistanceFromOrigin(moves = \"LLL__RR\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 3, 4, 2, 1, 5])",
        "countCompleteSubarrays(nums=[1, 2, 3, 4, 5, 5])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6], threshold = 10)",
        "longestAlternatingSubarray(nums=[1, 2, 3], threshold=4)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 5], threshold = 6)",
        "longestAlternatingSubarray(nums = [2,4,5], threshold = 15)",
        "longestAlternatingSubarray(nums=[10, 2, 4, 10, 2], threshold=10)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 2], [3, 5]])",
        "numberOfPoints(nums = [[1, 3], [3, 5], [2, 4]])",
        "numberOfPoints(nums = [[1,3],[2,5]])",
        "numberOfPoints(nums = [[2,5], [3,6], [4,7]])",
        "numberOfPoints(nums = [[1,3], [2,2], [3,4]])",
        "numberOfPoints(nums = [[1, 5], [2, 7]])",
        "numberOfPoints(nums = [[1,3], [2,5], [7,9]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [2, 4]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [45, 23, 11, 8])",
        "countBeautifulPairs(nums = [22, 44, 11, 37, 47])",
        "countBeautifulPairs(nums = [22, 44, 11, 37])",
        "countBeautifulPairs(nums = [23, 56, 11, 45, 77])",
        "countBeautifulPairs(nums = [22, 22, 33])",
        "countBeautifulPairs(nums = [21, 3, 6])",
        "countBeautifulPairs(nums=[2, 3, 11])",
        "countBeautifulPairs(nums = [25, 49, 76, 81])",
        "countBeautifulPairs(nums = [2, 10, 5, 21])",
        "countBeautifulPairs(nums = [21,35,11,2,23])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], t = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,1], t = 2)",
        "longestAlternatingSubarray(nums = [2,3,5,7,11], t = 11)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 3], t = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 4, 5, 6], t = 7)",
        "longestAlternatingSubarray(nums=[3,1,4,1,5,9,2,6,5], t=10)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 10], t = 3)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"abcab\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDEFGH\")",
        "minLength(s = \"ABCDEABCD\")",
        "minLength(s = \"ABCDAABCDCD\")",
        "minLength(s = \"EFABGHIJCDKL\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 5, 7, 9], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[2, 3, 5], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [4,2,3,1], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums=[2,7,3,4], modulo=5, k=2)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 2], [3, 2]])",
        "colorTheArray(n = 3, queries = [[0,2],[1,2],[2,1]])",
        "colorTheArray(n = 5, queries = [])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 2], [2, 3], [1, 3]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 2], [3, 2]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [2, 3, 1], nums2 = [1, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2], nums2 = [2, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2], nums2 = [2, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 1], nums2 = [2, 1, 2])",
        "maxNonDecreasingLength(nums1=[2, 3, 1], nums2=[1, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [1, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 2, 3])",
        "maxNonDecreasingLength(nums1 = [2, 3, 1, 4], nums2 = [1, 2, 1, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [0, 2, 3, 1])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 0, target = 0)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [3, 1, 2, 4])",
        "findValueOfPartition(nums = [1,3,2,4])",
        "findValueOfPartition(nums = [4, 1, 8, 7])",
        "findValueOfPartition(nums = [4, 1, 8, 7])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 3])",
        "findValueOfPartition(nums = [1, 3, 2, 4, 5])",
        "findValueOfPartition(nums = [3, 1, 4, 5])",
        "findValueOfPartition(nums = [3, 2, 4, 7, 9])",
        "findValueOfPartition(nums = [2, 7, 1, 8, 5])",
        "findValueOfPartition(nums=[3,6,1,2,8,10])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LL___RR\")",
        "furthestDistanceFromOrigin(moves = \"LLL___RRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLR_\")",
        "furthestDistanceFromOrigin(moves = \"L_R___R\")",
        "furthestDistanceFromOrigin(moves = \"L_LR_\")",
        "furthestDistanceFromOrigin(moves = \"LRLRL_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLRLR\")",
        "furthestDistanceFromOrigin(moves = \"__L__RR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR__R_\")",
        "furthestDistanceFromOrigin(moves = \"L_RR_L_R_\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [1,2,2,2])",
        "minimumIndex(nums = [1, 2, 2, 2])",
        "minimumIndex(nums = [1,2,2,2,1])",
        "minimumIndex(nums = [1,2,2,2,7])",
        "minimumIndex(nums = [1,2,2,2,1,1,1,1,1,1,1])",
        "minimumIndex(nums = [1,2,2,2,2])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 3])",
        "minimumIndex(nums = [1, 1, 2, 3, 1, 2])",
        "minimumIndex(nums = [2, 4, 3, 2, 2, 2, 3, 4, 4])",
        "minimumIndex(nums = [2, 1, 3, 2, 2, 2, 2, 1, 3])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [4, 2, 1, 3])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [5, 3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [5, 1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [5, 1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [5, 3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [4,2,1,3,5])"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n=2, k=2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 1, k = 1)"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [0, 1, 0])",
        "alternatingSubarray(nums = [3,4,5,3,4])",
        "alternatingSubarray(nums = [1, 3, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1, 3])",
        "alternatingSubarray(nums = [1, 1, 1])",
        "alternatingSubarray(nums = [2,3,3,2,2])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1, 1])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[0, 1], [0, 1]])",
        "matrixSum(a = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "matrixSum(a = [[0,1],[1,0]])",
        "matrixSum(a = [[0, 0, 1], [0, 0, 1]])",
        "matrixSum(a = [[1,0,3],[0,2,0],[4,0,6]])",
        "matrixSum(a = [[0,1,2],[0,2,0],[1,0,0]])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid=[[0, 1, 0], [1, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 1], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1], [2], [3]])",
        "matrixSum(a = [[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "matrixSum(a = [[0,1],[1,0]])",
        "matrixSum(a = [[0,1],[2,3]])",
        "matrixSum(a = [[0,1],[2,3]])",
        "matrixSum(a = [[1, 1, 0], [0, 1, 0], [1, 0, 0]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3])",
        "alternatingSubarray(nums = [3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 2, 1, 0])",
        "alternatingSubarray(nums = [2,3,1,2,3,4,3,2,5])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"banana\", \"apple\", \"banana\"], x = \"banana\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"kiwi\", \"mango\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"cherry\", \"berry\"], x = \"e\")",
        "findWordsContaining(words = [\"banana\", \"orange\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"fox\", \"dog\", \"cat\"], x = \"o\")",
        "findWordsContaining(words = [\"I\", \"love\", \"to\", \"code\"], x = \"o\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"bog\"], x = \"og\")",
        "findWordsContaining(words = [\"bana\", \"banana\", \"banana\", \"apple\"], x = \"a\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"xy\", s2 = \"yx\")",
        "canBeEqual(s1 = \"abc\", s2 = \"xyz\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"zzwzz\", s2 = \"zzzzz\")",
        "canBeEqual(s1 = \"jjayy\", s2 = \"ayjjj\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [], target = 10)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 0)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3], target=0)",
        "lengthOfLongestSubsequence(nums = [5, 6, 7], target = 0)",
        "lengthOfLongestSubsequence(nums = [5, 2, 7, 1], target = 12)",
        "lengthOfLongestSubsequence(nums=[5,1,1], target=5)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"bcda\", s2 = \"abcd\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [5, 4, 3, 2, 1])",
        "maxSubarrays(nums = [5, 4, 3, 2, 1])",
        "maxSubarrays(nums = [5, 1, 3])",
        "maxSubarrays(nums = [1, 2, 4, 3])",
        "maxSubarrays(nums = [2, 2, 2, 3, 3])",
        "maxSubarrays(nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31])",
        "maxSubarrays(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5])",
        "maxSubarrays(nums = [1,3,1,5,2])",
        "maxSubarrays(nums = [4, 4, 4, 10, 15])",
        "maxSubarrays(nums = [3, 1, 10, 2, 7, 2, 8, 5, 7])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1,2,2], money = 5)",
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1,2,3], money = 1)",
        "buyChoco(prices = [1, 2, 3, 4], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4], money = 7)",
        "buyChoco(prices = [1, 1, 3], money = 2)",
        "buyChoco(prices = [5, 1, 2, 3], money = 10)",
        "buyChoco(prices = [1, 1, 2, 5], money = 4)",
        "buyChoco(prices = [5,1,1,1,1], money = 3)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 10)",
        "countSubMultisets(nums = [1, 2, 3, 4], l = 1, r = 10)",
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 2)",
        "countSubMultisets(nums = [1,2,3,4], l = 10, r = 20)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 6)",
        "countSubMultisets(nums = [1,2,3,4,5,6], l = 12, r = 13)",
        "countSubMultisets(nums = [1,1,2,2,3,3], l = 3, r = 3)",
        "countSubMultisets(nums = [1,1,2,3], l = 3, r = 6)",
        "countSubMultisets(nums = [2, 4, 3, 2], l = 1, r = 10)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5, 6], l = 7, r = 31)"
    ],
    "sample_322": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n=192)",
        "isFascinating(n=192)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"xyz\")",
        "canBeEqual(s1 = \"aab\", s2 = \"aba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcdef\")",
        "canBeEqual(s1 = \"hello\", s2 = \"world\")",
        "canBeEqual(s1 = \"xxy\", s2 = \"xxy\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 2, 1])",
        "minimumCoins(prices = [1, 2, 4, 1])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices=[1,2,3,4])",
        "minimumCoins(prices = [1,3,2,4])",
        "minimumCoins(prices=[1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 1, 2, 1, 2])",
        "minimumCoins(prices = [2, 5, 1, 3, 6, 7, 4])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 105)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 50)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 2, 2, 4, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 4, 3, 3, 3])",
        "minOperations(nums = [3, 3, 3, 2])",
        "minOperations(nums = [2, 2])",
        "minOperations(nums = [1, 2, 1])",
        "minOperations(nums = [1, 2, 1])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 4, 4])",
        "minOperations(nums = [3,3,1,4,4,4])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1,2,1,2,1,2,1,2])",
        "alternatingSubarray(nums = [1,2,3,4,3,2,1,2,1])",
        "alternatingSubarray(nums = [1, 3, 2, 5, 4, 6, 7, 8])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,6,5,4,3,2,1,2,3,4,5,6,7,8])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5, 7])",
        "alternatingSubarray(nums = [3, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums=[1,3,2,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,3,4,3,2,1,2,3,4,5])",
        "alternatingSubarray(nums = [2,1,2,5,3,4,2,5,3,4,2,3,4,2,3,4,5])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n=6, limit=3)",
        "distributeCandies(n=6, limit=3)"
    ],
    "sample_247": [
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"def\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"efgh\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"abcd\", x = 3)",
        "minOperations(s1 = \"abc\", s2 = \"cde\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"aacd\", x = 2)",
        "minOperations(s1 = \"abab\", s2 = \"abab\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"wxyz\", x = 1)",
        "minOperations(s1 = \"abcd\", s2 = \"acce\", x = 1)",
        "minOperations(s1=\"abc\", s2=\"xyz\", x=3)"
    ],
    "sample_340": [
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 1)",
        "longestString(x = 1, y = 2, z = 2)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 1, y = 1, z = 2)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 2, y = 3, z = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 1, 2, 3, 1], k = 4)",
        "minOperations(nums = [1,2,3,4,1], k = 4)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 10)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [1,2,4,3], k = 4)",
        "minOperations(nums = [2, 4, 1, 3, 5], k = 5)",
        "minOperations(nums = [3,2,4,1,2,5,6], k = 5)",
        "minOperations(nums = [2,1,2,1,1,2,2,1], k = 2)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abbaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabc\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
        "longestSemiRepetitiveSubstring(s = \"ccaba\")",
        "longestSemiRepetitiveSubstring(s = \"xxtzzxxtt\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 3])",
        "isGood(a = [1, 2, 3, 2])",
        "isGood(a = [1, 2, 3, 2])",
        "isGood(a = [1, 2, 3, 2, 1])",
        "isGood(a = [1, 2, 2, 3])",
        "isGood(a = [0, 1, 1, 2, 2])",
        "isGood([1, 0, 2, 3, 2])",
        "isGood([0, 2, 1, 2])",
        "isGood(a = [2,1,2,3,4,5])",
        "isGood(a = [1,2,2,3,3,4,4,5,5,6,6,6,7,7,7,7,8,8,8,8,8])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 15, m = 5)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums=[3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,5,5,5,5,4,4,4,4,4,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 5, 5, 3, 3, 5])",
        "minGroupsForValidAssignment(nums = [2, 3, 2, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 4, 4, 6])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [ \"1\", \"2\", \"prev\", \"3\", \"4\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bat\", \"tab\", \"cat\", \"tac\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"aa\", \"cc\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"b\", \"ab\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = '11011', k = 2)",
        "shortestBeautifulSubstring(s = '10011', k = 2)",
        "shortestBeautifulSubstring(s = \"10110\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110\", k = 2)",
        "shortestBeautifulSubstring(s = \"001101\", k = 2)",
        "shortestBeautifulSubstring(s = '110001', k = 1)",
        "shortestBeautifulSubstring(s = \"1000111100\", k = 2)",
        "shortestBeautifulSubstring(s = \"100101011\", k = 3)",
        "shortestBeautifulSubstring(s = '100100101', k = 2)",
        "shortestBeautifulSubstring(s=\"111100110100\", k=2)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [1, 1, 1, 1])",
        "minimumRightShifts(nums=[1,2,3,4,5])",
        "minimumRightShifts(nums = [4, 5, 1, 2, 3])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"01010\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"baa\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cde\", s3 = \"fgh\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"b\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"ba\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ca\", s3 = \"da\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bce\", s3 = \"bce\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1=\"abc\", str2=\"xyz\")",
        "canMakeSubsequence(str1=\"abc\", str2=\"xyz\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"acfg\", str2 = \"bd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xbz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"cead\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"bdcf\")"
    ],
    "sample_364": [
        "isGood(nums = [2, 3, 1])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1,3,2])",
        "isGood(nums = [2,1,3])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood([1,2,3,4,5])",
        "isGood(nums = [2, 3, 1, 5])",
        "isGood(nums=[2,1,3])",
        "isGood(nums=[1,2,3,5,4])",
        "isGood(nums = [2, 1, 4, 3, 5])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=7)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [3, 1, 2, 4, 5], target = 6)",
        "countPairs(nums = [2, 3, 4, 6], target = 7)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [6])",
        "relocateMarbles(nums=[5, 6, 7, 8, 9], moveFrom=[7, 8], moveTo=[5, 6])",
        "relocateMarbles(nums = [1, 3, 5, 6, 7, 8, 9], moveFrom = [1, 3, 7], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [2, 5, 6, 7], moveFrom = [2, 7], moveTo = [5, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [2, 3], moveTo = [7, 8])",
        "relocateMarbles(nums = [5,6,7,8,9,10], moveFrom = [7, 10], moveTo = [5, 8])",
        "relocateMarbles(nums = [2, 3, 5, 6, 7, 9], moveFrom = [2, 3, 7], moveTo = [5, 6, 8])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3], target = 4)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=8)",
        "countPairs(nums=[1, 2, 3, 4, 5, 6], target=7)",
        "countPairs(nums=[2, 7, 11, 15], target=22)",
        "countPairs(nums = [2, 5, 3, 6], target = 8)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,1,2,1])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4])",
        "minLengthAfterRemovals(nums = [2, 4, 2, 3, 2])",
        "minLengthAfterRemovals(nums = [3,3,3,4,4,4,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 2, 1, 3, 2, 3])"
    ],
    "sample_303": [
        "countSeniors(details = [\"John, 75\", \"Jane, 65\", \"Jake, 60\", \"Jill, 70\"])",
        "countSeniors(details = [\"bob-60\", \"john-80\", \"mary-55\", \"sam-70\"])",
        "countSeniors(details=[\"Joe,62\", \"Janet,55\", \"Sam,66\"])",
        "countSeniors(details = [\"35,Eve\", \"65,Bob\", \"72,Mary\"])",
        "countSeniors(details = [\"John_21\", \"Sue_45\", \"Jane_67\", \"Jim_69\"])",
        "countSeniors(details = [\"Mike25\", \"Adam55\", \"Jonathan61\", \"Aaron33\"])",
        "countSeniors(details = [\"Paul 50\", \"John 67\", \"Hannah 42\", \"Bill 70\"])",
        "countSeniors(details = [\"s111\", \"s44\", \"s70\", \"s80\", \"s22\", \"s90\"])",
        "countSeniors(details = ['John 20', 'Emma 67', 'Lisa 50', 'Noah 63'])",
        "countSeniors(details = ['John-40, Mary-59, Bill-70, Tom-65, Sarah-55, Alan-60'])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abcddcba\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbba\")",
        "longestSemiRepetitiveSubstring(s = \"abcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbabbabba\")",
        "longestSemiRepetitiveSubstring(s = \"xyxxy\")",
        "longestSemiRepetitiveSubstring(s = \"abbbcbbbc\")",
        "longestSemiRepetitiveSubstring(s = \"abcbbbdef\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"abab\")",
        "canBeEqual(s1 = \"gain\", s2 = \"again\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"adbc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"xyxy\", s2 = \"yyxx\")",
        "canBeEqual(s1 = \"rall\", s2 = \"call\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"x\", s3 = \"x\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"car\", s3 = \"tar\")",
        "findMinimumOperations(s1 = \"gama\", s2 = \"gama\", s3 = \"gama\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 100)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 10)",
        "lengthOfLongestSubsequence(nums = [], target = 0)",
        "lengthOfLongestSubsequence(nums = [], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 0)",
        "lengthOfLongestSubsequence(nums=[1,2,3], target=6)",
        "lengthOfLongestSubsequence(nums=[1, 1, 1], target=2)",
        "lengthOfLongestSubsequence(nums = [4,3,5,2,6,7,8], target = 10)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 1, 2])",
        "minimumSum(nums = [3, 1, 2])",
        "minimumSum(nums = [1, 3, 5, 7, 9])",
        "minimumSum(nums = [2, 5, 1, 3, 4])",
        "minimumSum(nums = [2, 3, 5, 4])",
        "minimumSum(nums = [1, 3, 2, 2, 5, 2, 1])",
        "minimumSum(nums = [4,1,6,5,9,3,7,2,5])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bb\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"dog\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ax\", \"by\", \"c\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"10110\", k = 3)",
        "shortestBeautifulSubstring(s = \"000111\", k = 4)",
        "shortestBeautifulSubstring(s = \"0101\", k = 3)",
        "shortestBeautifulSubstring(s = \"11111\", k = 6)",
        "shortestBeautifulSubstring(s = \"101011\", k = 2)",
        "shortestBeautifulSubstring(s = \"111001101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011110\", k = 2)",
        "shortestBeautifulSubstring(s = \"000111000111\", k = 3)",
        "shortestBeautifulSubstring(s = \"110011011\", k = 3)",
        "shortestBeautifulSubstring(s=\"10111011\", k=6)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"aa\",\"ab\",\"bc\"])",
        "minimizeConcatenatedLength(words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"def\",\"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bcd\",\"ef\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bc\", \"def\"])",
        "minimizeConcatenatedLength(words=[\"aaa\", \"bbb\"])",
        "minimizeConcatenatedLength(words = [\"c\",\"b\",\"a\"])",
        "minimizeConcatenatedLength(words=[\"aa\", \"bb\", \"cc\", \"dd\"])",
        "minimizeConcatenatedLength(words = [\"aba\",\"c\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n=10, m=2)",
        "differenceOfSums(n = 7, m = 2)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [3,2,3,4,5])",
        "alternatingSubarray(nums = [1, 3, 5])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5])",
        "alternatingSubarray(nums=[1,2,3,2,1,2,3,4])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1, 2, 3])",
        "findMaximumLength(nums = [1, 2, 3])",
        "findMaximumLength(nums = [1,1,1])",
        "findMaximumLength(nums=[1,2,3])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9])",
        "findMaximumLength(nums = [0,1,2,2])",
        "findMaximumLength(nums = [0,1,2,3,4])",
        "findMaximumLength(nums = [1, 3, 5, 7, 9])",
        "findMaximumLength(nums = [1,-2,3,-4,5])",
        "findMaximumLength(nums = [1,3,2,4,2,1])"
    ],
    "sample_302": [
        "countSeniors(details = [\"123456789123\", \"123456789124\", \"123456789125\", \"123456789126\"])",
        "countSeniors(details = [\"1234567890AB50\",\"1234567890CD60\",\"1234567890EF90\"])",
        "countSeniors(details = [\"John,23\", \"Mary,56\", \"Alice,72\", \"Bob,34\"])",
        "countSeniors(details = [\"1234567890118\", \"2234567890227\"])",
        "countSeniors(details = [\"John12345678910\", \"Paul12345678934\", \"George12345678958\", \"Ringo12345678967\"])",
        "countSeniors(details = [\"Jacob1954-10-20\", \"Emma1994-03-16\", \"Emily1989-11-12\"])",
        "countSeniors(details = [\"id1234,23,70\", \"id1235,62,50\", \"id1236,30,55\"])",
        "countSeniors(details = [\"555-55-5555,11,M\", \"666-66-6666,70,M\", \"777-77-7777,71,F\", \"444-44-4444,10,M\"])",
        "countSeniors(details = [\"John 34 72\", \"Sam 55 45\", \"Jane 66 34\", \"Tim 42 55\"])",
        "countSeniors(details = [\"Mr. Richard G. Garfield, 75\", \"Miss Claudia Y. Gutierrez, 50\", \"Mr. Frank L. Blecher, 90\", \"Mr. Polly J. Phelps, 80\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"xy12\", s2 = \"12xy\")",
        "canBeEqual(s1 = \"xyz\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"acbd\", s2 = \"dbca\")",
        "canBeEqual(s1 = \"abdc\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"a1b2\", s2 = \"a2b1\")",
        "canBeEqual(s1 = \"xy18\", s2 = \"18yx\")",
        "canBeEqual(s1 = \"asdf\", s2 = \"dfas\")",
        "canBeEqual(s1 = \"xzyw\", s2 = \"wxyz\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1,2])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [2, 1])",
        "minimumCoins(prices = [1, 1, 1, 1, 1])",
        "minimumCoins(prices = [2, 1, 2, 1])",
        "minimumCoins(prices = [2, 1, 1, 3])",
        "minimumCoins(prices=[1, 2, 1, 1, 2])",
        "minimumCoins(prices=[2, 1, 1, 1])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 1, 2, 3])",
        "minimumSeconds(A = [1, 2, 1, 2])",
        "minimumSeconds(A = [1, 1, 2, 2])",
        "minimumSeconds(A = [1,2,3])",
        "minimumSeconds(A = [1, 2, 3, 4, 1, 2, 3, 4])",
        "minimumSeconds(A=[1,2,1])",
        "minimumSeconds(A = [0,0,0])",
        "minimumSeconds(A=[1, 2, 1])",
        "minimumSeconds(A = [0, 2, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 1, 3, 4, 3, 5, 1])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\", \"cd\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"dc\",\"ll\",\"lc\",\"bb\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"dc\",\"ll\",\"xx\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dc\", \"lc\", \"cl\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\", \"cd\", \"dc\", \"aa\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5])",
        "minSum(nums1=[1,2,3], nums2=[4,5,6])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minSum(nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8])",
        "minSum(nums1 = [3, 2, 4], nums2 = [1, 2, 3])",
        "minSum(nums1 = [5, 5, 5], nums2 = [5, 5, 5])",
        "minSum(nums1 = [5, 6, 3], nums2 = [3, 2, 0])",
        "minSum(nums1 = [3, 0, 4, 1], nums2 = [2, 3, 1, 0])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"d\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"z\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"mouse\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"kiwi\"], x = \"grape\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"bat\", \"rat\", \"cow\"], x = \"at\")"
    ],
    "sample_397": [
        "maxSum(nums = [], m = 2, k = 3)",
        "maxSum(nums=[], m=1, k=1)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 1, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [0, 0, 0, 0], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4], m = 3, k = 3)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [2,1])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums=[1, 2, 3], moveFrom=[1, 3], moveTo=[2, 1])",
        "relocateMarbles(nums = [2, 3], moveFrom = [3], moveTo = [2])",
        "relocateMarbles(nums = [1, 3], moveFrom = [1, 3], moveTo = [2, 2])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,3,5], moveTo = [2,4,1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2], moveTo = [3, 3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1, 2, 3, 1], moveFrom = [1, 1, 3], moveTo = [2, 3, 1])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [5, 6, 7, 8])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 0)",
        "buyChoco(prices = [1,2], money = 1)",
        "buyChoco(prices = [2, 1], money = 1)",
        "buyChoco(prices = [2, 2], money = 2)",
        "buyChoco(prices = [3, 2, 4], money = 1)",
        "buyChoco(prices = [2, 2, 2], money = 3)",
        "buyChoco(prices = [10, 2], money = 1)",
        "buyChoco(prices = [2,2,2,2,1], money = 3)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5, 6], target = 1)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5, 6], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [3,5,7], target = 1)",
        "lengthOfLongestSubsequence(nums=[2, 3, 5], target=1)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abbabba\")",
        "longestSemiRepetitiveSubstring(s = \"abbbaabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaabba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbbbccc\")",
        "longestSemiRepetitiveSubstring(s = \"eabbccd\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"banana\"], x = \"banana\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"i\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"na\")",
        "findWordsContaining(words = [\"ant\", \"bat\", \"cat\", \"dog\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"mouse\", \"fish\", \"lion\"], x = \"o\")",
        "findWordsContaining(words = [\"honeysuckle\", \"loaf\", \"sourdough\", \"brioche\"], x = \"dough\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"ggrr\", s2 = \"rrgg\")",
        "canBeEqual(s1 = \"xxxy\", s2 = \"xxyx\")",
        "canBeEqual(s1 = \"xyzv\", s2 = \"vzxy\")",
        "canBeEqual(s1 = \"acdb\", s2 = \"cadb\")",
        "canBeEqual(s1 = \"baby\", s2 = \"ybaa\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [3,2,1,4])",
        "minimumSum(nums=[3,1,2,4])",
        "minimumSum(nums = [4, 3, 2, 5])",
        "minimumSum(nums = [1,2,3,4])",
        "minimumSum(nums = [3,4,5,6,7,8])",
        "minimumSum(nums = [1, 3, 4, 7, 5])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = -1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 0)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6], target = 6)",
        "lengthOfLongestSubsequence(nums = [2,3,5,7], target = 11)",
        "lengthOfLongestSubsequence(nums = [3, 4, 5], target = 0)",
        "lengthOfLongestSubsequence(nums = [3, 5, 2, 7], target = 11)",
        "lengthOfLongestSubsequence(nums = [5, 4, 8, 2, 1, 3], target = 1)"
    ],
    "sample_368": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s = 'YmplH')",
        "sortVowels(s = 'HmpYl')",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = 'HYmpl')",
        "sortVowels(s = 'HmlYp')",
        "sortVowels(s = \"HmpYl\")",
        "sortVowels(s = \"HYlpM\")",
        "sortVowels(s = 'mHlPy')"
    ],
    "sample_312": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,1], [1,1]])",
        "matrixSum(nums=[[1,0],[0,1]])",
        "matrixSum(nums=[[1, 1], [1, 1]])",
        "matrixSum(nums=[[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 1, 1, 1, 1])",
        "maximumTripletValue(nums = [1, 2, 1])",
        "maximumTripletValue(nums = [1, 0])",
        "maximumTripletValue(nums = [2, 3, 5, 7, 11])",
        "maximumTripletValue(nums = [4, 2, 1, 3, 6])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2])",
        "alternatingSubarray(nums = [1, 2])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 1])",
        "alternatingSubarray(nums = [1, 3, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [1,2,1,2,1])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeioua\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 10)",
        "beautifulSubstrings(s=\"aeiou\", k=3)",
        "beautifulSubstrings(s = \"bbaa\", k = 2)",
        "beautifulSubstrings(s = \"aba\", k = 3)",
        "beautifulSubstrings(s = \"ba\", k = 2)"
    ],
    "sample_449": [
        "minChanges(s = \"aa\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"bb\")",
        "minChanges(s=\"aaaa\")",
        "minChanges(s=\"aaaa\")",
        "minChanges(s = \"aaaabbb\")",
        "minChanges(s = \"bababa\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"0000000\")",
        "minimumSteps(s = \"0000000\")"
    ],
    "sample_305": [
        "countSeniors(details = [])",
        "countSeniors(details = [])",
        "countSeniors(details = [\"John Doe, 75\", \"Jane Smith, 35\", \"Bob Johnson, 60\"])",
        "countSeniors(details = [\"12345678910112,70\", \"12345678910113,55\"])",
        "countSeniors(details = [\"Alice_123_30\", \"Bob_124_61\"])",
        "countSeniors(details = [\"1234567890123456,12,123\", \"1234567890123456,12,123\"])",
        "countSeniors(details = [\"Mike\", \"17\", \"Jim\", \"22\"])",
        "countSeniors(details = [\"Bob,62,male\", \"Lily,55,female\", \"Ted,58,male\"])",
        "countSeniors(details = [\"RMN-332:58\", \"XYZ-414:39\", \"TRS-222:15\"])",
        "countSeniors(details = [\"123456789\", \"753289992\", \"246138763\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,5,5,5,5,4,4])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 1, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,4,4,4,4,5,5,5,5])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 10)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 10)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 5)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]], k = 5)",
        "countPairs(coordinates = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], k = 10)",
        "countPairs(coordinates = [[1, 1], [1, 2], [2, 1], [2, 2]], k = 3)",
        "countPairs(coordinates = [[1,2], [3,4], [5,6], [7,8], [9,10]], k = 5)",
        "countPairs(coordinates = [[3, 4], [5, 6], [7, 8]], k = 2)",
        "countPairs(coordinates = [(1, 2), (2, 3), (4, 5), (5, 6)], k = 5)",
        "countPairs(coordinates = [(1, 2), (2, 1), (3, 1), (2, 2), (1, 3), (2, 3), (3, 2), (3, 3)], k = 4)"
    ],
    "sample_401": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 1, k = 1)",
        "maxSum(nums = [], m = 1, k = 1)",
        "maxSum(nums = [], m = 1, k = 2)",
        "maxSum(nums = [0, 0, 0, 0], m = 2, k = 2)",
        "maxSum(nums=[1, 2, 3, 4, 5], m=2, k=3)",
        "maxSum(nums = [1, 1, 1], m = 1, k = 1)"
    ],
    "sample_452": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"bbaa\")",
        "minChanges(s = \"abbabb\")",
        "minChanges(s = \"aabbccdd\")",
        "minChanges(s = \"abaab\")",
        "minChanges(s = \"ABABA\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2])",
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 1, 3])",
        "minOperations(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minOperations(nums1 = [1,5,5,10], nums2 = [2,4,4,8])",
        "minOperations(nums1 = [2,1], nums2 = [4,3])",
        "minOperations(nums1=[1,2,3,4,5], nums2=[1,6,7,8,9])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '10110', k = 2)",
        "shortestBeautifulSubstring(s = '10110', k = 2)",
        "shortestBeautifulSubstring(s = \"0011\", k = 2)",
        "shortestBeautifulSubstring(s = \"001101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011001\", k = 2)",
        "shortestBeautifulSubstring(s = '0001100011', k = 2)",
        "shortestBeautifulSubstring(s=\"0011101\", k=2)",
        "shortestBeautifulSubstring(s = '1101', k = 1)",
        "shortestBeautifulSubstring(s=\"111011010\", k=2)",
        "shortestBeautifulSubstring(s = \"01110110011\", k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1,1,1])",
        "maximumTripletValue(nums = [3,6,8,1,2])",
        "maximumTripletValue(nums = [1, 2, 1, 2, 2])",
        "maximumTripletValue(nums = [3, 2, 3, 1])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=6, limit=2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 5, limit = 2)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,1,2,2])",
        "minGroupsForValidAssignment(nums = [2,3,4,4,4,5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [2,3,4,4,4,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,2,4,2])",
        "minGroupsForValidAssignment(nums = [3,1,3,2,4,6,7,8,9,10])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5])",
        "minSum(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 0, 3], nums2 = [5, 7, 0])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5])",
        "minSum(nums1 = [1,2,3], nums2 = [2,2])",
        "minSum(nums1 = [1,2,3], nums2 = [1,1])",
        "minSum(nums1 = [2, 0], nums2 = [4, 1])",
        "minSum(nums1 = [1, 0, 5], nums2 = [2, 3, 4])",
        "minSum(nums1 = [2, 3, 0, 1, 1], nums2 = [3, 2, 2, 1, 0])"
    ],
    "sample_453": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"baana\")",
        "minChanges(s = \"pineapple\")",
        "minChanges(s = \"yxxyxy\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"\", k = 3)",
        "beautifulSubstrings(s = \"\", k = 3)",
        "beautifulSubstrings(s = \"\", k = 3)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s=\"\", k=2)",
        "beautifulSubstrings(s = \"\", k = 0)",
        "beautifulSubstrings(s = \"aia\", k = 1)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeioua\", k = 2)",
        "beautifulSubstrings(s = \"aeioua\", k = 2)",
        "beautifulSubstrings(s = \"aeio\", k = 1)",
        "beautifulSubstrings(s = \"aaa\", k = 2)",
        "beautifulSubstrings(s = \"aebiou\", k = 2)",
        "beautifulSubstrings(s = \"aaab\", k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = 'mYpHl')",
        "sortVowels(s = \"HmpYl\")",
        "sortVowels(s = \"YmlnP\")",
        "sortVowels(s = \"YmlnP\")",
        "sortVowels(s = 'HlmpY')",
        "sortVowels(s = 'lYmPh')",
        "sortVowels(s = \"YmlnPH\")",
        "sortVowels(s = 'HmpLy')"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 2, 1])",
        "minimumSeconds(nums = [1, 1, 1, 1])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 2])",
        "minimumSeconds(nums = [2,2,1,2,2])",
        "minimumSeconds(nums = [1,2,1,2,1,2,1,2])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [4, 2, 3, 5])",
        "minimumSum(nums = [2, 3, 4, 6])",
        "minimumSum(nums = [5, 2, 7, 4])",
        "minimumSum(nums = [4, 6, 8, 1, 2])",
        "minimumSum(nums = [4, 1, 2, 8])",
        "minimumSum(nums=[2, 3, 4, 1, 5])",
        "minimumSum(nums = [5, 1, 2, 5, 7])",
        "minimumSum(nums = [4, 2, 3, 9, 5, 1])"
    ],
    "sample_417": [
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6], k=6)",
        "minOperations(nums=[1,2,3,4,5,6,7], k=7)",
        "minOperations(nums = [1,2,3,5], k = 5)",
        "minOperations(nums = [1, 3, 5, 7, 9, 11], k = 3)",
        "minOperations(nums = [2, 2, 3, 4, 4], k = 5)",
        "minOperations(nums = [3,2,5,5,5,5], k = 5)"
    ],
    "sample_400": [
        "maxSum(A = [], m = 1, k = 1)",
        "maxSum(A = [], m = 5, k = 2)",
        "maxSum(A = [], m = 5, k = 5)",
        "maxSum(A = [1, 2, 3, 4], m = 1, k = 1)",
        "maxSum(A = [1,1,2,2,3,3,4,4], m = 2, k = 2)",
        "maxSum(A = [2, 2, 2, 3], m = 3, k = 2)",
        "maxSum(A = [0,1,2,3,4], m = 0, k = 5)",
        "maxSum(A = [2, 5, 3], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 2, 1, 2], m = 1, k = 4)",
        "maxSum(A = [1,2,2,3,4,5,6,7,1,2,4], m = 5, k = 4)"
    ],
    "sample_293": [
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"11000\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [12, 6, 4])",
        "maxSubarrays(nums = [1, 2, 4, 7])",
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [8, 4, 2, 1])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSubarrays(nums = [8,4,2,1,8])",
        "maxSubarrays(nums = [2,4,6,8,10,12,14,16,18,20])",
        "maxSubarrays(nums = [2, 1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums=[12,6,4,8,6])",
        "maxSubarrays(nums = [1, 2, 2, 3, 1, 2, 1])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2], money = 2)",
        "buyChoco(prices = [2, 3], money = 5)",
        "buyChoco(prices = [1,1], money = 2)",
        "buyChoco(prices = [1, 2], money = 0)",
        "buyChoco(prices = [1,2,3], money = 3)",
        "buyChoco(prices = [1], money = 2)",
        "buyChoco(prices = [2, 3, 1], money = 4)"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"10000\")",
        "minimumSteps(s = \"010010100101\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,3,3])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,1], k = 4)",
        "minOperations(nums = [1,2,3,4,1], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 1], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [1,2,2,3,4], k = 4)",
        "minOperations(nums = [4, 5, 3, 1, 2], k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [2, 1, 2])",
        "isGood(nums = [1,2,2])",
        "isGood(nums = [2, 1, 3, 3])",
        "isGood(nums = [2, 1, 1, 2])",
        "isGood(nums = [2, 1, 1])",
        "isGood(nums=[1,2,2,1])",
        "isGood(nums = [1, 1, 2])",
        "isGood(nums = [1, 2, 3, 2])",
        "isGood(nums = [1, 0, 0, 1, 2])",
        "isGood([1,1,2,2,2])"
    ],
    "sample_325": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 157)",
        "isFascinating(n = 1)",
        "isFascinating(n=192)",
        "isFascinating(n = 326)",
        "isFascinating(n=15)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 3])",
        "isGood(nums = [1, 2, 3, 3])",
        "isGood(nums = [1,2,3,4,5,5])",
        "isGood(nums = [1,1,2])",
        "isGood(nums = [1,1,1])",
        "isGood(nums = [1, 1, 2, 3, 4])",
        "isGood(nums = [1,2,3,4,5,6,7])",
        "isGood(nums = [1,2,3,4,5,6,7])",
        "isGood(nums = [2,2,2,2,2,2,1])",
        "isGood(nums = [2,2,3,4,5,6])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 1])",
        "minimumSeconds(nums = [1, 1])",
        "minimumSeconds(nums = [3, 3, 3, 1, 1, 2, 2])",
        "minimumSeconds(nums = [2, 2, 2, 2, 2, 2, 2])",
        "minimumSeconds(nums=[1,1,2,2,2])",
        "minimumSeconds(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 7, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 7, 4, 5, 6])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 1])",
        "minimumRightShifts(nums = [2, 3, 5, 1])"
    ],
    "sample_362": [
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [2, 1, 3])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 3, 4, 2])",
        "isGood(nums = [1,2,3,4])",
        "isGood([1,2,3,4,5])",
        "isGood([2, 1, 3])",
        "isGood(nums = [2,1,3,5])",
        "isGood(nums=[3,1,2])"
    ],
    "sample_280": [
        "minOperations(nums1 = [2,3,1,4,5], nums2 = [3,4,5,1,2])",
        "minOperations(nums1 = [2,3,1,1,1,1], nums2 = [1,2,1,5,6,1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1=[1,3,5,4], nums2=[1,2,3,7])",
        "minOperations(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minOperations(nums1=[1, 2, 3], nums2=[4, 5, 6])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 1, 2, 2, 2, 3])",
        "minOperations(nums1 = [2,3,1,4,2], nums2 = [3,1,4,2,2])",
        "minOperations(nums1 = [2,3,5,8], nums2 = [1,5,7,4])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = '1011', k = 2)",
        "shortestBeautifulSubstring(s = \"10011\", k = 2)",
        "shortestBeautifulSubstring(s = \"10110\", k = 2)",
        "shortestBeautifulSubstring(s='1011', k=2)",
        "shortestBeautifulSubstring(s = \"1101110\", k = 2)",
        "shortestBeautifulSubstring(s = '11001110', k = 2)",
        "shortestBeautifulSubstring(s = '0110101', k = 2)",
        "shortestBeautifulSubstring(s = '11010101', k = 2)",
        "shortestBeautifulSubstring(s = \"11101011\", k = 3)",
        "shortestBeautifulSubstring(s = '1100111010', k = 3)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [2,2,3,3,3,4])",
        "minGroupsForValidAssignment(nums=[3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,5,5,5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 2, 3])",
        "minGroupsForValidAssignment(nums = [2, 1, 1, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])"
    ],
    "sample_289": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"000000\")",
        "minimumSteps(s = \"01\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [2,3,4,5], target = 1)",
        "lengthOfLongestSubsequence(nums = [2,3,4], target = 10)",
        "lengthOfLongestSubsequence(nums = [3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums=[1, 3, 5], target=2)",
        "lengthOfLongestSubsequence(nums = [5, 2, 3, 7], target = 17)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,1,3])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums=[1,2,3,4,5])",
        "minimumSum(nums=[1,2,3,4,5])",
        "minimumSum(nums = [5,1,2,3,4])",
        "minimumSum(nums = [2,1,3,4,1])",
        "minimumSum(nums = [3,2,1,5,6])",
        "minimumSum(nums=[1,3,2,4,6,5])"
    ],
    "sample_398": [
        "maxSum(nums = [], m = 1, k = 1)",
        "maxSum(nums = [], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [], m = 2, k = 0)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 0, k = 3)",
        "maxSum(nums = [1,2,2,2,3], m = 3, k = 3)",
        "maxSum(nums = [1,1,1,1,1,1,1,1,1,1], m = 2, k = 5)",
        "maxSum(nums = [1, 1, 1, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 2, 3, 1], m = 3, k = 2)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"pqr\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abca\")",
        "findMinimumOperations(s1=\"ab\", s2=\"ba\", s3=\"xy\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"baa\", s3 = \"cba\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 4, 4])",
        "minOperations(nums = [5, 5, 5, 7, 7, 7, 7])",
        "minOperations(nums = [5, 5, 5, 7, 7, 7, 7])",
        "minOperations(nums = [2,2,3,3,4,4,4,8,8,8])",
        "minOperations(nums = [1, 5, 5, 5, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5])",
        "minOperations(nums = [3,3,3,2,2,2,2,3,3,3])",
        "minOperations(nums = [4, 5, 6, 7, 7, 7, 8, 8, 8, 8])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1,2,4,1])",
        "minimumCoins(prices = [2, 1, 2, 1, 2, 1])",
        "minimumCoins(prices = [1,2,2,1,1,2,2])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 2, 1])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,1,1])",
        "minimumSeconds(nums = [1,2,3,1,2,3])"
    ],
    "sample_448": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s=\"abab\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"aa\")",
        "minChanges(s = \"baa\")",
        "minChanges(s = \"babb\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [3, 1, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 8, 1, 9, 5], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 1, 9, 8, 5], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 8, 1, 3, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 1, 9, 3, 8], limit = 3)",
        "lexicographicallySmallestArray(nums = [8, 1, 3, 9, 5], limit = 2)",
        "lexicographicallySmallestArray(nums = [9, 3, 5, 1, 8], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 8, 3, 5, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 3, 2, 9, 5, 8], limit = 2)",
        "lexicographicallySmallestArray(nums=[5, 8, 3, 1, 9], limit=10)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1,1,2])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums=[1, 2, 1])",
        "sumCounts(nums = [1,2,1,3])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [0, 1, 2])",
        "maximumTripletValue(nums = [2, 3, 1])",
        "maximumTripletValue(nums = [0, 1, 2, 3])",
        "maximumTripletValue(nums = [3, 1, 2, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 1, 5])",
        "maximumTripletValue(nums=[2, 5, 3, 2, 4])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"\", k = 1)",
        "beautifulSubstrings(s = \"\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"\", k = 3)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s=\"\", k=1)",
        "beautifulSubstrings(s = \"aeio\", k = 2)",
        "beautifulSubstrings(s = \"xyz\", k = 2)",
        "beautifulSubstrings(s = \"uaa\", k = 1)",
        "beautifulSubstrings(s = \"bbaeaauv\", k = 1)"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 7)",
        "countPairs(nums = [2, 7, 11, 15], target = 22)",
        "countPairs(nums = [1,2,3,4,5,6], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 11)",
        "countPairs(nums=[1, 2, 3, 4], target=7)",
        "countPairs(nums = [1, 2, 4, 6], target = 8)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 7, limit = 5)",
        "distributeCandies(n = 3, limit = 4)",
        "distributeCandies(n=7, limit=3)",
        "distributeCandies(n=30, limit=6)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minOperations(nums1 = [1,2], nums2 = [3,4])",
        "minOperations(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "minOperations(nums1 = [2, 10, 6, 4, 8, 1], nums2 = [3, 1, 1, 1, 4, 1])",
        "minOperations(nums1 = [2, 2, 2], nums2 = [3, 3, 3])",
        "minOperations(nums1 = [1,1,1,1,1,1,1], nums2 = [6])",
        "minOperations(nums1 = [2,3,1,3,1,3], nums2 = [1,2,3,1,3,2])",
        "minOperations(nums1 = [2, 2, 3, 3], nums2 = [3, 3, 4, 4])",
        "minOperations(nums1=[2,2,2], nums2=[1,2,1])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 1, 2, 2, 3])",
        "minOperations(nums = [2, 2, 2, 3])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [2, 2, 4, 4, 4, 4])",
        "minOperations(nums = [2, 3, 2])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = '11011', k = 2)",
        "shortestBeautifulSubstring(s = \"11001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011\", k = 2)",
        "shortestBeautifulSubstring(s = '0110', k = 2)",
        "shortestBeautifulSubstring(s = \"10000001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1001110110\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101011001\", k = 2)",
        "shortestBeautifulSubstring(s = \"11101100\", k = 3)",
        "shortestBeautifulSubstring(s = '10111101001', k = 3)",
        "shortestBeautifulSubstring(s='1111001001', k=3)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 2])",
        "minimumSeconds(nums = [1,1,1,1,1])",
        "minimumSeconds(nums = [1,2,3,1,2,3])",
        "minimumSeconds(nums = [1, 2, 3, 1])",
        "minimumSeconds(nums = [1,1,1,1])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "minimumSeconds(nums = [2, 1, 2])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7])",
        "minimumSeconds(nums = [3, 1, 2, 2, 2, 1, 3])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 2, 4, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 4, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1,1,2,2,2,3,3,3])",
        "minOperations(nums = [4, 3, 4, 4, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 3])",
        "minOperations(nums = [1, 3, 3, 3, 4])",
        "minOperations(nums = [4, 1, 1, 2, 1, 3, 3, 3, 2, 2])",
        "minOperations(nums = [3,3,3,4,5,5,5,2,2,2])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 3, 5, 7])",
        "alternatingSubarray(nums = [1, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [1,3,2,5,4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 4, 3, 2])",
        "alternatingSubarray(nums = [2, 5, 4, 3, 1, 0])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 2, 1, 2, 3, 4, 5])",
        "alternatingSubarray(nums=[1, 3, 5, 7, 9, 11, 13, 15])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minLengthAfterRemovals(nums = [2,2,2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [0, 0, 1, 1, 1, 1, 2, 2])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"abc\",\"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"oo\", \"ss\", \"ll\", \"oo\", \"ss\", \"ll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bb\", \"cc\", \"cac\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"bce\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"aceg\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acc\")",
        "canMakeSubsequence(str1 = \"za\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"ac\", str2 = \"z\")",
        "canMakeSubsequence(str1 = \"hijklmnopqrstuvwxyzabcde\", str2 = \"abc\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aabbccdd\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaab\")",
        "longestSemiRepetitiveSubstring(s = \"abcddcba\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbcc\")"
    ],
    "sample_399": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums=[], m=0, k=0)",
        "maxSum(nums=[], m=0, k=0)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums=[], m=3, k=2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 0, k = 3)",
        "maxSum(nums = [1,2,2,3,3,3], m = 1, k = 2)",
        "maxSum(nums=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], m=3, k=5)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"d\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"kiwi\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\"], x = \"an\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1, 2, 2, 1], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1,2,1,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1, 2, 1, 2], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,2,3,4], moveTo = [2,3,4,5])",
        "relocateMarbles(nums = [1,2,2,3], moveFrom = [1,2,2,3], moveTo = [2,2,3,4])",
        "relocateMarbles(nums = [1,2,1], moveFrom = [1,1,2], moveTo = [2,2,2])",
        "relocateMarbles(nums = [1,1,2,3,3], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1, 2, 2], moveFrom = [1, 2], moveTo = [1, 2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2,1], moveTo = [2,1,2])",
        "relocateMarbles(nums=[1,2,2,2,3], moveFrom=[1,2,2,3], moveTo=[2,3,2,1])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 4, 5])",
        "maximumTripletValue(nums = [2, 3, 4])",
        "maximumTripletValue(nums = [1,2,5])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"baaab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabbaabba\")",
        "longestSemiRepetitiveSubstring(s=\"abbbbbbbbbbca\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"no\", \"on\", \"is\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"red\",\"der\",\"abc\",\"cba\"])",
        "maximumNumberOfStringPairs(words = [\"x\", \"y\", \"xy\", \"yx\", \"z\", \"z\"])",
        "maximumNumberOfStringPairs(words = [\"d\", \"aa\", \"aa\", \"d\"])",
        "maximumNumberOfStringPairs(words=[\"ba\", \"bab\", \"baba\", \"babab\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,0],[0,0]])",
        "matrixSum(nums = [[1,0,1], [0,1,0], [1,0,1]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1=\"abc\",s2=\"def\",s3=\"ghi\")",
        "findMinimumOperations(s1 = \"apple\", s2 = \"banana\", s3 = \"cat\")",
        "findMinimumOperations(s1 = \"foobar\", s2 = \"foobar\", s3 = \"foobar\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1=\"abc\", s2=\"def\", s3=\"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"xyz\", s3 = \"lmn\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abce\", s3 = \"abcg\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"baa\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"aabb\", s2 = \"aabb\", s3 = \"aaabb\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"yza\", s3 = \"zab\")"
    ],
    "sample_324": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 376)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1, 2, 1])",
        "minimumCoins(prices = [1, 2, 1])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 2])",
        "minimumCoins(prices = [1,1,2])",
        "minimumCoins(prices = [2,1,2])",
        "minimumCoins(prices = [1, 2, 1, 1, 1, 1])",
        "minimumCoins(prices = [2,1,1,3])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,1,2,2,3,3], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [2,7,11,15], target = 22)",
        "countPairs(nums=[1, 2, 3, 4], target=6)",
        "countPairs(nums = [1, 1, 2, 3, 2], target = 4)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,1,3])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [2,1,3,3,3,2])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums=[1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [3,2,2,3,1,2])",
        "minGroupsForValidAssignment(nums=[2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=7)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 3, 5, 7], target = 9)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices=[1,2,3], money=5)",
        "buyChoco(prices = [1,2,3,4,5], money = 5)",
        "buyChoco(prices = [1, 1, 5], money = 6)",
        "buyChoco(prices=[1,2,2], money=3)",
        "buyChoco(prices = [2, 5], money = 6)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"dog\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"xy\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"abc\", \"cba\", \"cd\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = 'Let's cOde')",
        "sortVowels(s = \"Let's test this\")",
        "sortVowels(s = \"Let's test this\")",
        "sortVowels(s = \"Let's test this\")",
        "sortVowels(s = 'let us coded')",
        "sortVowels(s = \"letcode\")",
        "sortVowels(s=\"Let's tesT this\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums=[1,1,2,2])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices=[1,2,3,4])",
        "minimumCoins(prices = [1, 3, 2])",
        "minimumCoins(prices = [1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumCoins(prices = [1, 2, 1, 1, 2])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9,10])",
        "minimumCoins(prices = [1, 3, 1, 2])",
        "minimumCoins(prices = [4, 1, 1, 1])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n=10, m=3)"
    ],
    "sample_307": [
        "countSeniors(details=[\"John Doe, 54\", \"Jane Doe, 62\", \"Jack Doe, 71\"])",
        "countSeniors(details = [\"John, 54\", \"Jane, 61\", \"Jake, 62\"])",
        "countSeniors(details = [\"male\", \"21\", \"female\", \"70\"])",
        "countSeniors(details = [\"Bob,65\", \"Alice,99\", \"Jane,28\"])",
        "countSeniors(details = [\"A 23\", \"B 60\", \"C 70\", \"D 30\", \"E 50\", \"F 65\"])",
        "countSeniors(details = [\"Joe 60\", \"Bob 66\", \"Sue 58\", \"Jill 70\"])",
        "countSeniors(details = [\"Josh93\", \"Evan67\", \"Bill38\", \"Amy83\"])",
        "countSeniors(details = [\"Sarah:50\", \"Phil:61\", \"Sonia:75\"])",
        "countSeniors(details = [\"John:63\", \"Ron:45\", \"Albert:70\", \"Rita:66\"])",
        "countSeniors(details = [\"23-25-90\",\"78-45-56\", \"20-30-70\", \"56-34-100\"])"
    ],
    "sample_323": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 37)",
        "isFascinating(n = 372)",
        "isFascinating(n = 27)",
        "isFascinating(n=267)",
        "isFascinating(n = 456)",
        "isFascinating(n = 12345)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"01\")",
        "minimumBeautifulSubstrings(s = \"01\")",
        "minimumBeautifulSubstrings(s = \"10101\")",
        "minimumBeautifulSubstrings(s = \"110111\")",
        "minimumBeautifulSubstrings(s = \"1010\")",
        "minimumBeautifulSubstrings(s = \"0000000000\")",
        "minimumBeautifulSubstrings(s = \"1010101010\")",
        "minimumBeautifulSubstrings(s
        "minimumBeautifulSubstrings(s=\"10111\")",
        "minimumBeautifulSubstrings(s = \"1010110101101011010111011010111011111101111111011111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n=6, limit=2)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 6, limit = 4)"
    ],
    "sample_419": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1,5,4,2,3], k = 2)",
        "minOperations(nums = [1,2,3,4,1,2,3,1], k = 4)",
        "minOperations(nums = [1,2,3,4,5,4,3,2,1], k = 5)",
        "minOperations(nums = [2, 1, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 1, 1, 2, 2, 2], k = 2)",
        "minOperations(nums = [3,5,1,5,3,3], k = 3)",
        "minOperations(nums=[3, 2, 1, 2, 4, 3, 4], k=5)",
        "minOperations(nums=[2,2,2,3,4,5,1], k=4)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1, 2, 2, 2])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"5\"])",
        "lastVisitedIntegers(words = ['1', '2', 'prev', '3', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [2, 'prev', 1, 'prev', 'prev'])",
        "lastVisitedIntegers(words=[1, 2, 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"3\", \"4\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 4)",
        "minOperations(nums = [1,2,3,4,5,6], k = 3)",
        "minOperations(nums = [1, 1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums=[1,2,3,4,1,2,3,1], k=4)",
        "minOperations(nums = [1, 3, 5, 7, 2, 4, 6, 8], k = 8)",
        "minOperations(nums = [4, 5, 1, 3], k = 3)",
        "minOperations(nums = [1,2,3,4,5,2,4,2,3,4], k = 5)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abcdd\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbccdd\")",
        "longestSemiRepetitiveSubstring(s = \"baaab\")",
        "longestSemiRepetitiveSubstring(s = \"abbbc\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbc\")",
        "longestSemiRepetitiveSubstring(s = \"abbabc\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbba\")",
        "longestSemiRepetitiveSubstring(s = \"bbaabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"dcbabcd\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1,2,1,3])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '10011', k = 2)",
        "shortestBeautifulSubstring(s = '110011', k = 2)",
        "shortestBeautifulSubstring(s = \"000111\", k = 2)",
        "shortestBeautifulSubstring(s = \"101011\", k = 2)",
        "shortestBeautifulSubstring(s = '01011', k = 2)",
        "shortestBeautifulSubstring(s = '00110', k = 2)",
        "shortestBeautifulSubstring(s = \"1101011\", k = 2)",
        "shortestBeautifulSubstring(s = '100111101', k = 2)",
        "shortestBeautifulSubstring(s = '011011110', k = 2)",
        "shortestBeautifulSubstring(s = \"001111001110001\", k = 3)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1111101\")",
        "minimumBeautifulSubstrings(s = \"1111101\")",
        "minimumBeautifulSubstrings(s = \"0110\")",
        "minimumBeautifulSubstrings(s = \"011\")",
        "minimumBeautifulSubstrings(s = \"11111111111111111111111111111111\")",
        "minimumBeautifulSubstrings(s = \"0101011110\")",
        "minimumBeautifulSubstrings(s = \"01011011001010101010110110110010101010101101101101010110101100101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110110101010101010101101010110",
        "minimumBeautifulSubstrings(s = \"01010111111010111101101010101011111100101010101010101010101010101010111110101010101010101010101011111110101010101010101010101010101010111111010101010101010101010101010101010101011111101010101010101010101010101010101010101010101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    ],
    "sample_341": [
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 4, y = 2, z = 1)",
        "longestString(x = 4, y = 3, z = 1)"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 1, 1], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1,0,1], [1,0,1], [1,0,1]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid=[[1, 0, 0], [1, 0, 1], [1, 0, 1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"\", k = 1)",
        "beautifulSubstrings(s = \"\", k = 0)",
        "beautifulSubstrings(s = \"aeiou\", k = 0)",
        "beautifulSubstrings(s=\"aeiou\", k=1)",
        "beautifulSubstrings(s=\"aeiou\", k=1)",
        "beautifulSubstrings(s=\"\", k=1)",
        "beautifulSubstrings(s = \"banana\", k = 1)",
        "beautifulSubstrings(s = \"\")",
        "beautifulSubstrings(s = \"aaaa\", k = 2)"
    ],
    "sample_304": [
        "countSeniors(details = [\"12345678901234567890\", \"12345678901234567890\"])",
        "countSeniors(details = [\"John Doe: 55\", \"Jane Doe: 65\", \"Joe Bloggs: 70\"])",
        "countSeniors(details = [\"John,25,john@doe.com\", \"Jane,61,jane@doe.com\", \"Jack,70,jack@doe.com\"])",
        "countSeniors(details = [\"John,32\", \"Mary,70\", \"Sue,65\", \"Ann,45\"])",
        "countSeniors(details = [\"Jack,12,0\",\"Jill,65,1\",\"John,70,0\"])",
        "countSeniors(details = [\"Patient:001,Age:75\", \"Patient:002,Age:65\", \"Patient:003,Age:80\", \"Patient:004,Age:60\", \"Patient:005,Age:72\"])",
        "countSeniors(details=[\"Jane,50\", \"Joe,61\", \"Jim,48\", \"Jack,70\"])",
        "countSeniors(details = [\"John:21:1999\", \"Bob:65:1950\", \"Jim:80:1935\"])",
        "countSeniors(details = [\"D23454345543,35\",\"A34534534534,56\",\"C23423423423,67\",\"B12312312312,78\"])",
        "countSeniors(details = [\"Bob_12_55\", \"Ann_44_30\", \"Joe_65_15\", \"Anna_20_70\", \"Ellie_66_70\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [0, 1, 2])",
        "maximumTripletValue(nums = [1, 2, 6, 5, 4])",
        "maximumTripletValue(nums = [2, 3, 5, 7])",
        "maximumTripletValue(nums = [1, 0, 0, 2])",
        "maximumTripletValue(nums = [2, 7, 11, 3])",
        "maximumTripletValue(nums = [10,20,30])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"11011\")",
        "minimumBeautifulSubstrings(s = \"01\")",
        "minimumBeautifulSubstrings(s = \"0000\")",
        "minimumBeautifulSubstrings(s=\"110011011\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays(nums = [1, 2, 4, 0, 8, 16])",
        "maxSubarrays(nums = [1, 2, 4, 0, 8])",
        "maxSubarrays(nums = [4, 2, 1])",
        "maxSubarrays(nums = [2, 3, 1, 6, 4, 2])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 0, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 4, 7])",
        "maxSubarrays(nums = [3, 1, 2, 2])",
        "maxSubarrays(nums = [0, 1, 2, 3, 0, 4, 5])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 0, 0])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4], b = [1, 2, 3, 5])",
        "minOperations(a = [1, 2, 3, 4], b = [5, 6, 7, 8])",
        "minOperations(a = [1, 2, 3], b = [2, 1, 3])",
        "minOperations(a = [1,2,3], b = [3,2,1])",
        "minOperations(a = [1, 2, 5, 4, 3], b = [5, 5, 6, 6, 5])",
        "minOperations(a=[1, 2, 3, 4], b=[1, 2, 3, 4])",
        "minOperations(a = [1, 2, 3], b = [3, 1, 2])",
        "minOperations(a = [1,2,3,4], b = [1,2,3,5])",
        "minOperations(a=[1,3,5,4], b=[1,2,3,7])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ba\", \"aa\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ba\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"a\", \"n\", \"a\", \"n\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\", \"ac\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmlHp\")",
        "sortVowels(s = \"YmlHp\")",
        "sortVowels(s = \"YmHlp\")",
        "sortVowels(s = 'HmPlY')",
        "sortVowels(s = 'mYpHl')",
        "sortVowels(s = \"HYmPl\")",
        "sortVowels(s = \"HYmpL\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2])",
        "sumCounts(nums = [1,2])",
        "sumCounts(nums=[1, 1, 1])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [3,1,2,4,3])",
        "minimumSum(nums = [4, 3, 2, 5])",
        "minimumSum(nums = [5, 4, 3, 2, 1])",
        "minimumSum(nums = [3, 1, 4, 5, 2])",
        "minimumSum(nums = [5, 2, 3, 1, 4])",
        "minimumSum(nums = [1,2,1,2,1,2])",
        "minimumSum(nums = [5, 3, 4, 7, 3])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [1, 1, 0]])",
        "findChampion(grid = [[0,1,0], [1,0,0], [0,0,1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[0,1,1],[1,0,1],[0,1,0]])",
        "findChampion(grid=[[0,1,0],[1,0,0],[0,0,0]])",
        "findChampion(grid = [[1,0,1,0], [1,0,0,1], [0,0,1,1], [1,1,0,0]])",
        "findChampion(grid = [[0,1,0,0,0], [1,0,1,0,0], [0,0,1,0,0], [0,0,0,0,0], [0,0,0,0,0]])"
    ],
    "sample_372": [
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = 'Leetcode')",
        "sortVowels(s = 'Let's test this')",
        "sortVowels(s = 'Let's test this')",
        "sortVowels(s = 'Let's test this')",
        "sortVowels(s = \"LeetcOde\")",
        "sortVowels(s = 'Let's test this function')",
        "sortVowels(s = \"Hello, World\")",
        "sortVowels(s = 'Let's test this string.')",
        "sortVowels(s = \"Let's test this function\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"100101\")",
        "minimumSteps(s = \"110001\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [3, 2, 1, 5, 4])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 1, 2])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [2, 2, 3])",
        "minOperations(nums = [3, 3, 3, 2])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2,2,2,2])",
        "minOperations(nums = [2, 3, 2, 2])"
    ],
    "sample_367": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YlmpH\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"YmpHl\")",
        "sortVowels(s = \"HYmpl\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"YmPlh\")",
        "sortVowels(s = 'HumPyl')",
        "sortVowels(s = 'HumPyl')"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[0,1,0],[0,1,1],[1,1,0]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 0], [0, 0, 1]])",
        "findChampion(grid=[[0, 1, 0], [1, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[1,0,1],[0,0,1],[1,0,1]])",
        "findChampion(grid=[[0,1,1], [0,1,0], [1,1,0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [0, 1, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 2, 3])",
        "minSum(nums1=[1, 2, 3], nums2=[4, 0, 6])",
        "minSum(nums1=[1, 2, 3], nums2=[4, 0, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 1, 0])",
        "minSum(nums1 = [1,2,3,0], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2], nums2 = [0, 2])",
        "minSum(nums1 = [0, 1, 1], nums2 = [1, 0, 1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 0, 3, 4])",
        "minSum(nums1 = [0, 0, 1, 2], nums2 = [1, 2, 0, 0])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 8)",
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 9)",
        "minOperations(nums = [1,2,3,1,2,3], k = 3)",
        "minOperations(nums = [4, 1, 3, 2, 5, 6], k = 6)",
        "minOperations(nums = [1, 2, 4, 4, 4], k = 4)",
        "minOperations(nums = [1, 2, 4, 1, 5, 2, 3], k = 5)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [2,1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2, 3], moveTo = [2, 3, 1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,3], moveTo = [2,4])",
        "relocateMarbles(nums = [1, 2, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 1, 2, 3], moveFrom = [1, 2, 3], moveTo = [2, 2, 1])"
    ],
    "sample_402": [
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [], m = 0, k = 0)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 3, k = 3)",
        "maxSum(nums = [3, 2, 1, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [2,2,2,3,3], m = 2, k = 4)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"abcz\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"abcz\", s2 = \"abca\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"abz\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"abz\", s2 = \"bza\")",
        "canMakeSubsequence(s1 = \"fz\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"xza\", s2 = \"zaz\")",
        "canMakeSubsequence(s1=\"acz\", s2=\"az\")",
        "canMakeSubsequence(s1 = \"zyx\", s2 = \"ayz\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 2])",
        "minSum(nums1 = [1, 1, 0], nums2 = [1, 1])",
        "minSum(nums1=[1, 0, 3], nums2=[5, 7, 0])",
        "minSum(nums1 = [1,0], nums2 = [2,0])",
        "minSum(nums1 = [0, 1, 2], nums2 = [0, 2, 1])",
        "minSum(nums1 = [2, 3, 0], nums2 = [4, 5])",
        "minSum(nums1=[1, 2, 0], nums2=[2, 2, 2])",
        "minSum(nums1=[1, 0, 2], nums2=[1, 0, 3])",
        "minSum(nums1 = [0, 1, 1], nums2 = [2, 1, 1])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"3\", \"4\", \"prev\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [4, 2, 3, 1])",
        "isGood(nums = [3,2,1])",
        "isGood(nums = [5, 2, 3, 4, 1])",
        "isGood(nums = [2, 1, 3, 4, 5])",
        "isGood(nums = [3, 4, 2, 1])",
        "isGood([2, 1, 3, 4, 5])"
    ],
    "sample_424": [
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,1,2,2,3,3,4,4])",
        "minOperations(nums = [1,1,1,2,2,2,3,3,3,4,4,4])",
        "minOperations(nums = [3, 3, 4, 5])",
        "minOperations(nums = [3,3,3,3,4,4,4,4,5,5,5,5])",
        "minOperations(nums = [1,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4])",
        "minOperations(nums = [4, 4, 2, 2, 2, 1, 1, 1, 1])"
    ],
    "sample_451": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abcabc\")",
        "minChanges(s = \"abcabc\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"banana\")",
        "minChanges(s = \"abbabb\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"banaan\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 1)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 9, limit = 2)",
        "distributeCandies(n = 6, limit = 1)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 0])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1,2,3], nums2 = [4,0,0])",
        "minSum(nums1 = [1,2,0], nums2 = [2,3,1])",
        "minSum(nums1 = [1, 0, 2], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1,0,1], nums2 = [1,0,0])",
        "minSum(nums1 = [1, 3, 5, 4, 2], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1=[2,0,3],nums2=[1,0,2])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [4, 5, 1, 2, 3])",
        "minimumRightShifts(nums = [2, 1, 3, 4])",
        "minimumRightShifts(nums = [2,1,3,5,4])"
    ],
    "sample_381": [
        "countPairs(nums = [2, 7, 11, 15], t = 20)",
        "countPairs(nums = [2, 7, 11, 15], t = 20)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [2,7,11,15], t = 20)",
        "countPairs(nums = [1,2,3], t = 4)",
        "countPairs(nums = [2, 7, 11, 15], t = 24)",
        "countPairs(nums=[1,2,3], t=5)",
        "countPairs(nums = [1, 2, 5], t = 7)",
        "countPairs(nums=[1,2,3,4,5],t=8)",
        "countPairs(nums = [2, 3, 5, 1, 4], t = 6)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"2\", \"pop\", \"push\", \"1\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"2\", \"push\", \"1\", \"pop\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"p\", \"p\", \"3\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"2\", \"push\", \"3\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"1\", \"push\", \"2\", \"pop\", \"3\", \"pop\"])",
        "lastVisitedIntegers(words = [\"1\",\"2\",\"p\",\"p\",\"3\",\"p\"])",
        "lastVisitedIntegers(words = [\"1\", \"push\", \"2\", \"3\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\",\"1\",\"pop\",\"push\",\"2\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"zzz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"zx\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"zza\")",
        "canMakeSubsequence(str1 = \"zz\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"zbzbz\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"aaa\", str2 = \"aa\")",
        "canMakeSubsequence(str1 = \"zabz\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"qwertyuiopasdfghjklzxcvbnm\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"zba\")",
        "canMakeSubsequence(str1 = \"xya\", str2 = \"xaa\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,0])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,2,3], nums2 = [2,3,0])",
        "minSum(nums1 = [1, 2, 3, 0, 0], nums2 = [4, 5, 0])",
        "minSum(nums1 = [4, 0, 3], nums2 = [1, 2])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [2, 1])",
        "minSum(nums1 = [3, 5], nums2 = [2, 4])",
        "minSum(nums1 = [1,0,1,0], nums2 = [2,2,2,2])",
        "minSum(nums1 = [3, 0, 2, 1, 0], nums2 = [1, 3, 5, 0, 1])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 3)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 3)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6]], k = 5)",
        "countPairs(coordinates=[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], k=3)",
        "countPairs(coordinates = [(1, 2), (3, 4), (5, 6)], k = 7)",
        "countPairs(coordinates = [[2, 2], [3, 3], [4, 4]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 4], [1, 2], [5, 6]], k = 2)",
        "countPairs(coordinates = [[0, 0], [2, 2], [3, 1], [3, 2], [1, 3]], k = 2)",
        "countPairs(coordinates = [(1, 1), (2, 2), (1, 2), (2, 1), (1, 0), (0, 1), (0, 0), (2, 0), (0, 2), (1, 3)], k = 1)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\", \"cba\", \"abcd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ac\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bb\",\"ab\",\"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bbb\", \"ddd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"def\", \"fed\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [2, 5])",
        "maxStrength(nums = [2, 5, -1])",
        "maxStrength(nums = [-1, -2, -3, -4, 5])",
        "maxStrength(nums = [2, 3, 5])",
        "maxStrength(nums = [-2, -3, 5, 4])",
        "maxStrength(nums = [2, 2, 3])",
        "maxStrength(nums = [2, -1, 3, -2])",
        "maxStrength(nums = [2, 3, 5, 2])",
        "maxStrength(nums = [-3, -2, -1, 0])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1, 3, 2, 1])",
        "minimumCoins(prices = [1, 2, 1, 3])",
        "minimumCoins(prices = [1, 2, 1, 2, 1, 2])",
        "minimumCoins(prices = [1, 1, 2, 2])",
        "minimumCoins(prices = [4, 1, 2, 1])",
        "minimumCoins(prices=[4, 3, 1, 2])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1,2,2,1])",
        "minLengthAfterRemovals(nums = [2,2,2,3,3,3,3])",
        "minLengthAfterRemovals(nums = [5, 4, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,2,2,2,3,3,3,3,3,4,4,4,5,5,5])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 6)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 7)",
        "buyChoco(prices = [1, 2, 3], money = 7)",
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [2, 2, 2], money = 5)",
        "buyChoco(prices = [10, 12], money = 20)",
        "buyChoco(prices = [5, 5, 10], money = 5)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"4\", \"prev\", \"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 3, 1])",
        "sumCounts(nums = [1, 2, 2, 1, 1])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 8], moveTo = [9, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [6])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [5, 6])",
        "relocateMarbles(nums=[5, 6, 7, 8], moveFrom=[7], moveTo=[9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8], moveFrom = [1, 2, 3, 4], moveTo = [5, 6, 7, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 8], moveTo = [9, 6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8, 9], moveTo = [1, 2, 3, 4])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"d\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aaa\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bb\")",
        "canMakeSubsequence(str1 = \"bcd\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aaz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"cf\")",
        "canMakeSubsequence(str1 = \"aaab\", str2 = \"bbb\")",
        "canMakeSubsequence(str1 = \"abd\", str2 = \"aac\")",
        "canMakeSubsequence(str1 = \"adef\", str2 = \"f\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hello world\"], x = \"hello\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"cow\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"banana\"], x = \"ba\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"apricot\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\", \"grape\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"pineapple\"], x = \"a\")",
        "findWordsContaining(words = [\"tulip\", \"rose\", \"lily\"], x = \"l\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1, 2], [2, 1]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums=[[1], [2]])",
        "matrixSum(nums = [[1,0,0],[0,0,0],[0,0,0]])",
        "matrixSum(nums = [[3, 7, 5], [4, 2, 6], [8, 9, 1]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 1)",
        "buyChoco(a = [1, 1], money = 2)",
        "buyChoco(a = [1, 2], money = 2)",
        "buyChoco(a = [1, 2, 3], money = 6)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2], money = 0)",
        "buyChoco(a = [1,2,3], money = 4)",
        "buyChoco(a = [1, 2, 3], money = 0)",
        "buyChoco(a = [2, 1], money = 3)",
        "buyChoco(a = [2, 5], money = 10)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 3])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,1,2,2])",
        "minGroupsForValidAssignment(nums = [2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 3, 5])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 4, 2])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,3,3,3,3,4,4,4,4,4])",
        "minGroupsForValidAssignment(nums=[2,2,3,3,3,4])",
        "minGroupsForValidAssignment(nums=[1, 2, 2, 3, 4, 5, 5, 5, 5])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [5, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [3,2,1,4,5])",
        "minimumRightShifts(nums = [3, 2, 1, 5, 6])",
        "minimumRightShifts(nums = [3, 1, 2, 4])",
        "minimumRightShifts(nums = [3, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3,1,2,3])",
        "minimumRightShifts(nums = [2, 1, 3, 4, 6, 5])",
        "minimumRightShifts(nums = [10, 11, 8, 9])",
        "minimumRightShifts(nums = [10, 20, 5, 15, 25])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 5, 4])",
        "maxStrength(nums = [2, 5, 4])",
        "maxStrength(nums = [1, 2, 5])",
        "maxStrength(nums = [1, 2, 5])",
        "maxStrength(nums = [1, 2, 5])",
        "maxStrength(nums = [2, 3, 4])",
        "maxStrength(nums = [2, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [2,5])",
        "maxStrength(nums=[1, 2, 4, 5])"
    ],
    "sample_464": [
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 3, limit = 4)",
        "distributeCandies(n=7, limit=3)",
        "distributeCandies(n=3, limit=5)",
        "distributeCandies(n = 1, limit = 1)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3])",
        "minLengthAfterRemovals(nums=[3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 1, 2])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"d\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"bob\", \"alice\", \"joe\"], x = \"o\")",
        "findWordsContaining(words = [\"bear\", \"apple\", \"dove\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"gh\", \"xy\"], x = \"xy\")"
    ],
    "sample_278": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0,0,1], [1,0,0], [0,1,0]])",
        "findChampion(grid = [[0,1,1],[0,0,1],[0,0,0]])",
        "findChampion(grid=[[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0], [1, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                            [1, 1, 1, 1, 1, 1, 1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n                           [1, 0, 0, 0, 0, 0, 0, 1, 1, 1],\n                           [1, 1, 0, 0, 0, 0, 0, 0, 1, 1],\n                           [1, 1, 1, 0, 0, 0, 0, 0, 0, 1],\n                           [1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n                           [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n                           [0, 0, 1, 1, 1, 1, 0, 0, 0, 0],\n                           [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\n                           [0, 0, 0, 0, 1, 1, 1, 1, 0, 0],\n                           [0, 0, 0, 0, 0, 1, 1, 1, 1, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 4, 7])",
        "maxSubarrays(nums = [1, 2, 4, 7])",
        "maxSubarrays(nums = [1, 2, 4, 8])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays(nums = [2, 3, 4, 5])",
        "maxSubarrays(nums = [5, 1, 3])",
        "maxSubarrays(nums = [4, 16, 2])",
        "maxSubarrays(nums = [4, 5, 6, 7])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeioua\", k = 2)",
        "beautifulSubstrings(s = \"aeioua\", k = 5)",
        "beautifulSubstrings(s = \"aba\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaiooo\", k = 2)",
        "beautifulSubstrings(s = \"aeiouk\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,2,1,2])",
        "minimumSeconds(nums = [1,2,2,1])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 2])",
        "minimumSeconds(nums = [1,1,2,2])",
        "minimumSeconds(nums = [1,1,2,2,2])",
        "minimumSeconds(nums = [2, 2, 3, 3])",
        "minimumSeconds(nums = [1,2,2,1,1,3])",
        "minimumSeconds(nums = [2,2,2,3,1])"
    ],
    "sample_327": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n=192)",
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 2)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 127)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 6)",
        "lengthOfLongestSubsequence(nums = [], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [10, 1, 2, 7, 6, 1, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [], target = 20)",
        "lengthOfLongestSubsequence(nums = [1, 3, 6, 7], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 3, 4, 5, 7], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 3, 4, 5], target = 8)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums=[[1]])",
        "matrixSum(nums = [[1],[2],[3]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1], [1], [1]])",
        "matrixSum(nums = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "matrixSum(nums = [[1,2,3,4]])"
    ],
    "sample_326": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0,1,1],[0,0,1],[1,1,0]])",
        "findChampion(grid = [[0, 1, 1, 1], [0, 0, 0, 0], [1, 1, 0, 0], [1, 1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 0], [0, 0, 0, 0], [1, 1, 0, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 0, 1, 1], [0, 1, 0, 1], [1, 1, 1, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [3, 1, 5, 7])",
        "minimumSum(nums = [3, 2, 4, 1, 5])",
        "minimumSum(nums = [2, 4, 7])",
        "minimumSum(nums = [1, 3, 4, 5])",
        "minimumSum(nums = [1,3,5,7])",
        "minimumSum(nums = [1, 3, 4, 7])"
    ],
    "sample_450": [
        "minChanges(s = \"aabbcc\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"aabbba\")",
        "minChanges(s = \"aabbbaa\")",
        "minChanges(s = \"aabbbaa\")",
        "minChanges(s = \"aaaabbbcc\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 2)",
        "minOperations(s1 = \"111\", s2 = \"000\", x = 1)",
        "minOperations(s1 = \"01\", s2 = \"10\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"100\", x = 1)",
        "minOperations(s1 = \"1100\", s2 = \"1010\", x = 2)",
        "minOperations(s1 = \"1001\", s2 = \"0110\", x = 2)",
        "minOperations(s1 = \"111\", s2 = \"100\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"1111\", x = 10)",
        "minOperations(s1 = \"0011\", s2 = \"0100\", x = 1)",
        "minOperations(s1 = \"1011010\", s2 = \"0100101\", x = 3)"
    ],
    "sample_342": [
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 2, y = 1, z = 1)",
        "longestString(x=2, y=1, z=1)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 4, 8, 16])",
        "maxSubarrays(nums = [1048575, 1048575, 1048575])",
        "maxSubarrays(nums=[1, 2, 4, 8, 16, 32])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [2, 1, 2, 0, 1, 3])",
        "maxSubarrays(nums = [2, 3, 1, 5, 2, 1, 7, 1, 3, 2])",
        "maxSubarrays(nums = [16, 1, 10, 2, 16, 16])",
        "maxSubarrays(nums = [3, 10, 31, 20, 11])",
        "maxSubarrays(nums = [5, 4, 6, 2, 1, 17, 18, 7, 1, 1, 2, 2])"
    ],
    "sample_306": [
        "countSeniors(details = [\"1234567890,45\", \"1234567890,65\", \"1234567890,75\"])",
        "countSeniors(details = [\"1234567890ab1234567890ab40\", \"1234567890ab1234567890ab65\", \"1234567890ab1234567890ab70\"])",
        "countSeniors(details = [\"1234567890AB56\", \"2345678901AB57\", \"3456789012AB58\", \"4567890123AB59\", \"5678901234AB60\", \"6789012345AB61\"])",
        "countSeniors(details = [\"Joe is 54\", \"Bill is 70\", \"Bob is 65\", \"Mary is 50\"])",
        "countSeniors(details = [\"age:50,name:Sam\", \"age:70,name:Jim\", \"age:90,name:Jill\"])",
        "countSeniors(details = [\"David:60\",\"Alex:70\",\"Bob:55\",\"John:65\"])",
        "countSeniors(details = [\"001:40:1\", \"002:67:1\", \"003:75:0\"])",
        "countSeniors(details = [\"George, 73\", \"Jill, 65\", \"Bob, 70\", \"Alice, 68\", \"Rob, 63\", \"Harry, 60\"])",
        "countSeniors(details = [\"Jane,25,F,12345\", \"Jill,61,F,54321\", \"Bob,45,M,99999\", \"John,75,M,88888\"])",
        "countSeniors(details = [\"George61\", \"Mike25\", \"Fiona70\", \"Sophia83\", \"Caleb95\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 4, 0, 8, 16])",
        "maxSubarrays(nums = [1, 2, 4, 8, 16])",
        "maxSubarrays(nums = [1, 2, 4, 0, 8, 8])",
        "maxSubarrays(nums = [1, 2, 0, 4, 5])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4, 5])",
        "maxSubarrays(nums=[1, 2, 4, 8])",
        "maxSubarrays(nums = [1,2,4,0,3,2])",
        "maxSubarrays(nums=[1, 2, 0, 4, 8])",
        "maxSubarrays(nums = [4, 2, 4, 3, 7, 5])",
        "maxSubarrays(nums = [12, 13, 6, 7, 20])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 5], moveTo = [9, 8])",
        "relocateMarbles(nums = [5, 8, 6, 9], moveFrom = [8, 6], moveTo = [5, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [5, 7], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 5], moveTo = [9, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2, 3], moveTo = [5, 6, 8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 6], moveTo = [2, 4])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"dabc\")",
        "findMinimumOperations(s1 = \"aa\", s2 = \"ba\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"cd\")",
        "findMinimumOperations(s1=\"abc\", s2=\"bca\", s3=\"zzz\")",
        "findMinimumOperations(s1=\"abc\", s2=\"acc\", s3=\"aaa\")",
        "findMinimumOperations(s1='ab', s2='ab', s3='abc')",
        "findMinimumOperations(s1 = \"aab\", s2 = \"bcd\", s3 = \"zdd\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [3,3,3,3])",
        "minLengthAfterRemovals(nums = [2, 2])",
        "minLengthAfterRemovals(nums = [4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,5])",
        "minLengthAfterRemovals(nums=[1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [2,3,1,4,2])"
    ]
}