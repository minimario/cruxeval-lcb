{
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 1, 1, 1, 1])",
        "alternatingSubarray(nums = [2, 1, 2, 3, 2, 3, 2])",
        "alternatingSubarray(nums = [2, 2, 2, 2])",
        "alternatingSubarray(nums = [3,1,4,2,3])",
        "alternatingSubarray(nums = [3, 1, 4, 2, 1, 5, 2])",
        "alternatingSubarray(nums = [1,2,3,4,3,2,1,2,3,4,5,6,7,7,7,7,7,7,7,7,7])",
        "alternatingSubarray(nums = [1,2,1,2,1,2,3,3,2,3,2,1,1,1,2,2,2,2,2,2,2])",
        "alternatingSubarray(nums = [1,2,3,1,4,5,2,1,5,4,5,3,5,6,1,5,6,7])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[2], [3], [4]])",
        "matrixSum(a = [[0, 1], [1, 2]])",
        "matrixSum(a = [[-1, 0], [0, 1]])",
        "matrixSum([[1, 2, 3], [2, 4, 6], [3, 6, 9]])",
        "matrixSum(a = [[1], [5], [2], [6]])",
        "matrixSum(a = [[1, 2, 3], [2, 1, 3], [1, 1, 1]])",
        "matrixSum(a = [[-1, 4, 5], [-100, 2, 3], [93, 8, 1]])",
        "matrixSum([[5, 4, 6], [2, 6, 2], [3, 6, 4]])",
        "matrixSum(a = [[0, 1, 3, 5], [0, 2, 5, 9], [0, 5, 10, 15]])"
    ],
    "sample_276": [
        "findChampion(grid = [[1,1,1,1],[1,0,0,1],[1,0,0,1],[1,1,1,1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1,1,0],[1,1,1],[0,1,1]])",
        "findChampion(grid = [[1, 2, 3, 4, 5], [5, 1, 2, 3, 4], [4, 5, 1, 2, 3], [3, 4, 5, 1, 2], [2, 3, 4, 5, 1]])",
        "findChampion(grid = [[1,0,0,1],[0,1,0,0],[0,0,1,0],[1,0,0,1]])",
        "findChampion(grid = [[0, 0, 1, 0], [0, 0, 0, 1], [1, 1, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 1], [1, 0, 1, 1], [0, 0, 0, 1], [1, 1, 0, 1]])",
        "findChampion(grid = [[1,0,1],[1,1,1],[0,1,0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 1, 0, 1], [1, 1, 1, 1], [0, 1, 0, 1]])",
        "findChampion(grid = [[0,1,0,1], [1,1,0,0], [0,1,1,0], [1,1,1,0]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [8, 7, 6]])",
        "matrixSum(a = [[1, 3, 2], [4, 5, 8], [3, 7, 2]])",
        "matrixSum(a = [[3, 2, 4], [1, 6, 5], [8, 7, 1]])",
        "matrixSum(a = [[1, 3, 3, 3], [1, 1, 3, 3], [1, 3, 1, 3]])",
        "matrixSum(a = [[4, 4], [1, 5], [3, 1]])",
        "matrixSum(a = [[2, 7, 9, 19, 13, 30], [18, 12, 14, 10, 15, 31], [29, 15, 17, 22, 19, 26]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [3, 1, 4, 1, 5])",
        "alternatingSubarray(nums = [3, 1, 4, 1, 5])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 1, 2, 3, 3, 2, 2])",
        "alternatingSubarray(nums = [2, 1, 2, 3, 1, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 5, 3, 4, 2, 2, 6])",
        "alternatingSubarray(nums = [2, 3, 5, 4, 1, 4, 2, 5])",
        "alternatingSubarray(nums = [4, 8, 6, 1, 2, 5, 1, 9, 8, 8, 8])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"foo\", \"bar\", \"baz\", \"foo\"], x = \"oo\")",
        "findWordsContaining(words = [\"ab\", \"bc\", \"cd\"], x = \"b\")",
        "findWordsContaining(words = [\"gin\", \"zen\", \"gig\", \"msg\"], x = \"in\")",
        "findWordsContaining(words = [\"cat\", \"bt\", \"hat\", \"tree\"], x = \"at\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cranberry\"], x = \"a\")",
        "findWordsContaining(words = [\"arp\", \"live\", \"strong\"], x = \"iv\")",
        "findWordsContaining(words = [\"apple\", \"elephant\", \"panda\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"cat\", \"mouse\", \"dog\", \"duck\", \"dove\"], x = \"au\")",
        "findWordsContaining(words = [\"ramen\", \"trifle\", \"durian\"], x = \"an\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"fruit\", \"banana\", \"fruit\", \"apple\"], x = \"ana\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abcde\", s2 = \"baced\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"abcde\")",
        "canBeEqual(s1 = \"aa\", s2 = \"ab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dabc\")",
        "canBeEqual(s1 = \"aaabb\", s2 = \"abbaa\")",
        "canBeEqual(s1 = \"123\", s2 = \"12\")",
        "canBeEqual(s1 = \"010101\", s2 = \"010101\")",
        "canBeEqual(s1 = \"bcef\", s2 = \"ebdf\")",
        "canBeEqual(s1 = \"abcccccc\", s2 = \"abbbbbbbbb\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [3,4,7], target = 5)",
        "lengthOfLongestSubsequence(nums = [0], target = 0)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 100)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=4)",
        "lengthOfLongestSubsequence(nums = [1,3,5,4], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,1,2], target = 5)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5,6,7,8,9], target=12)",
        "lengthOfLongestSubsequence(nums=[2,1,3,4,1], target = 3)",
        "lengthOfLongestSubsequence(nums = [3, 1, 4, 1, 5], target = 0)",
        "lengthOfLongestSubsequence(nums = [8,1,6,2], target = 6)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"baba\", s2 = \"abba\")",
        "canBeEqual(s1 = \"baa\", s2 = \"aab\")",
        "canBeEqual(s1 = \"xza\", s2 = \"zax\")",
        "canBeEqual(s1 = \"AAA\", s2 = \"ABC\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays([0, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [3, 1, 5, -2, 7, 4])",
        "maxSubarrays(nums = [1, 3, 2, 3, -2, 4])",
        "maxSubarrays(nums = [1, 2, 2, 1, 2, 0])",
        "maxSubarrays(nums = [1,3,4,8,1,3,1,1,8])",
        "maxSubarrays(nums = [1, 2, 1, 4, 1, 1])",
        "maxSubarrays(nums = [5, 2, 2, 5, 2, 4, 5, 2])",
        "maxSubarrays(nums = [1,1,3,3,5,8,1])",
        "maxSubarrays(nums = [43,39,48,48,18,27,21,29,28,12])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1, 2, 4], money = 6)",
        "buyChoco(prices = [1,2,3,4], money = 7)",
        "buyChoco(prices = [1, 4, 7], money = 6)",
        "buyChoco(prices = [1,3], money = 2)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6, 7], money = 11)",
        "buyChoco(prices = [2, 4, 6, 8, 10], money = 20)",
        "buyChoco(prices = [1, 2, 3, 5, 6], money = 8)",
        "buyChoco(prices = [1, 6, 7, 11, 11], money = 10)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [2,2,2], l = 1, r = 2)",
        "countSubMultisets(nums = [1,1,2,2], l = 2, r = 3)",
        "countSubMultisets(nums = [1,2,2,1,2], l = 0, r = 2)",
        "countSubMultisets(nums = [1,1,2,2,2,2], l = 3, r = 4)",
        "countSubMultisets(nums = [0,0,0], l = 0, r = 0)",
        "countSubMultisets(nums = [1,2,3], l = 2, r = 6)",
        "countSubMultisets(nums = [0,2,1,3], l = 0, r = 2)",
        "countSubMultisets(nums = [1,2,2,1,2,2,2,2,2,2], l = 3, r = 6)",
        "countSubMultisets(nums = [1,1,1,3,3,5,5,5,5,5], l = 5, r = 7)",
        "countSubMultisets(nums = [1, 1, 3, 2, 3, 1], l = 1, r = 2)"
    ],
    "sample_322": [
        "isFascinating(n = 1)",
        "isFascinating(n = 1)",
        "isFascinating(n = 123)",
        "isFascinating(n = 12)",
        "isFascinating(n = 11)",
        "isFascinating(123)",
        "isFascinating(n = 1634)",
        "isFascinating(112)",
        "isFascinating(321)",
        "isFascinating(n = 12223)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"bacde\")",
        "canBeEqual(s1 = \"a\", s2 = \"b\")",
        "canBeEqual(s1 = \"cdab\", s2 = \"xycd\")",
        "canBeEqual(s1 = \"aaaaaa\", s2 = \"bbbbbb\")",
        "canBeEqual(s1 = \"ba\", s2 = \"ba\")",
        "canBeEqual(s1 = \"baa\", s2 = \"ba\")",
        "canBeEqual(s1 = \"efg\", s2 = \"gefe\")",
        "canBeEqual(s1 = \"toon\", s2 = \"tun\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [2, 4, 3])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [3, 1, 4, 5, 9])",
        "minimumCoins(prices = [2, 3, 1, 5])",
        "minimumCoins(prices = [4, 3, 2, 1, 1, 3])",
        "minimumCoins(prices = [1, 3, 5, 6, 2])",
        "minimumCoins(prices = [1, 2, 4, 11, 12, 15, 26])",
        "minimumCoins(prices = [400, 80, 200, 100, 120])",
        "minimumCoins(prices = [1, 2, 10, 18, 17, 19, 50])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 19)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 21)",
        "accountBalanceAfterPurchase(p = 14)",
        "accountBalanceAfterPurchase(p = 62)",
        "accountBalanceAfterPurchase(p = 910)",
        "accountBalanceAfterPurchase(p = 325)"
    ],
    "sample_423": [
        "minOperations(nums = [0, 1, 1, 1, 1])",
        "minOperations(nums = [2, 4, 6, 10])",
        "minOperations(nums = [1, 1, 1, 2, 3, 3, 1])",
        "minOperations(nums = [1,2,3,5,7,8,9])",
        "minOperations(nums = [6, 8, 8, 8])",
        "minOperations(nums = [4,4,1,1,4,4])",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [2, 6, 2, 2, 6, 2, 6, 2])",
        "minOperations(nums = [0, 1, 1, 2, 0, 3, 0, 1, 0, 3])",
        "minOperations(nums = [2, 1, 2, 1, 0, 3, 2, 1, 1, 0])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,1,2,2,3,3,3])",
        "alternatingSubarray(nums = [1,2,3,1,1,3,2,3,3])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2])",
        "alternatingSubarray(nums = [1,1,2,2,2,3,3])",
        "alternatingSubarray(nums = [3,1,2,3,2,2,2,2])",
        "alternatingSubarray([2,1,2,3,2,3,2])",
        "alternatingSubarray(nums = [1,1,2,3,4,4,4,5,5,6])",
        "alternatingSubarray([0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2])",
        "alternatingSubarray(nums = [1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 5, limit = 4)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 7, limit = 4)"
    ],
    "sample_247": [
        "minOperations(s1 = \"ab\", s2 = \"ab\", x = 0)",
        "minOperations(s1 = \"aba\", s2 = \"bab\", x = 2)",
        "minOperations(s1 = \"xxxaay\", s2 = \"bababa\", x = 3)",
        "minOperations(s1 = \"abababab\", s2 = \"babaabab\", x = 2)",
        "minOperations(s1 = \"abcde\", s2 = \"ecdba\", x = 2)",
        "minOperations(s1 = \"aabcd\", s2 = \"aadc\", x = 2)",
        "minOperations(s1 = \"abcda\", s2 = \"cabae\", x = 3)",
        "minOperations(s1 = \"abdacddd\", s2 = \"adcadadd\", x = 2)",
        "minOperations(s1 = \"123456\", s2 = \"111110\", x = 1)",
        "minOperations(s1 = \"hydhahdh\", s2 = \"hydhahdh\", x = 2)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 1, z = 1)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 1, y = 3, z = 5)",
        "longestString(x = 2, y = 4, z = 3)",
        "longestString(x = 3, y = 1, z = 2)",
        "longestString(x = 0, y = 1, z = 2)",
        "longestString(x = 1, y = 1, z = 10)",
        "longestString(x = 6, y = 2, z = 3)",
        "longestString(x = 6, y = 7, z = 8)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 2, 3], k = 2)",
        "minOperations(nums = [1,2,3], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [2, 2, 2, 2], k = 3)",
        "minOperations(nums = [3, 4, 7, 1, 2, 3], k = 3)",
        "minOperations(nums = [2, 2, 2, 2, 2, 2], k = 3)",
        "minOperations(nums = [10, 15, 3, 7, 12], k = 20)",
        "minOperations(nums = [5, 1, 3, 4, 2], k = 6)",
        "minOperations(nums = [1,1,3,3,5,5,7,7], k = 2)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcdeabc\")",
        "longestSemiRepetitiveSubstring(s = \"abccba\")",
        "longestSemiRepetitiveSubstring(s = \"bananabananabananabananabananabananabananabanana\")",
        "longestSemiRepetitiveSubstring(s = \"tetttes\")",
        "longestSemiRepetitiveSubstring(s = \"fdsafdsafsafs\")",
        "longestSemiRepetitiveSubstring(s = \"ddbbcccdaa\")",
        "longestSemiRepetitiveSubstring(s = \"xqf\")",
        "longestSemiRepetitiveSubstring(s = \"azbcbcxdcccdyb\")"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 2, 3, 3, 3, 4])",
        "isGood(a = [4, 4, 4, 4, 4])",
        "isGood([1, 2, 3, 2])",
        "isGood(a = [0, 1, 2, 3, 3])",
        "isGood([2, 1, 1, 2])",
        "isGood(a = [1, 2, 3, 3, 2, 2, 1])",
        "isGood([2, 3, 1, 3, 2])",
        "isGood([0,1,2,3,4])",
        "isGood([0, 1, 0, 2, 3, 0])",
        "isGood(a = [1, 1, 2, 2, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 100, m = 10)",
        "differenceOfSums(n = 20, m = 4)",
        "differenceOfSums(n = 16, m = 3)",
        "differenceOfSums(n = 2, m = 3)",
        "differenceOfSums(n = 9, m = 2)",
        "differenceOfSums(n = 16, m = 4)",
        "differenceOfSums(n = 25, m = 7)",
        "differenceOfSums(n = 40, m = 5)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [4, 3, 4, 2, 4, 1, 4, 4])",
        "minGroupsForValidAssignment(nums = [3,3,3,4,4,4,4,5,5,5])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 2, 2, 3])",
        "minGroupsForValidAssignment(nums = [2, 3, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [1,2,2,1,4,2,3,1])",
        "minGroupsForValidAssignment(nums = [2,2,1,4,3,1,4,5,2,4,3])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"3\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"-1\", \"3\", \"prev\", \"-1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"4\", \"prev\", \"5\", \"prev\", \"prev\", \"prev\", \"1\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcc\", \"bec\", \"bbc\", \"bdc\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"sdaklfj\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"ab\",\"abc\",\"d\",\"abcde\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"abc\", \"bc\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"hub\"])",
        "maximumNumberOfStringPairs(words = [\"bca\",\"cae\",\"daf\",\"ecb\"])",
        "maximumNumberOfStringPairs(words = [\"megaupload\"])",
        "maximumNumberOfStringPairs(words = [\"hgy\",\"f\",\"xr\",\"j\",\"hgy\",\"f\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"10110\", k = 2)",
        "shortestBeautifulSubstring(s = \"10110\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011\", k = 1)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010111101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101000101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011011111\", k = 1)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [4, 3, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 2, 1, 3])",
        "minimumRightShifts(nums = [2, 4, 3, 6, 7, 5])",
        "minimumRightShifts(nums = [1, 3, 6, 0, 2, 4, 2])",
        "minimumRightShifts(nums = [2, 4, 3, 1, 5, 6])",
        "minimumRightShifts([1, 2, 3])",
        "minimumRightShifts([1,2,3,4,5])",
        "minimumRightShifts([1,2,3,4])"
    ],
    "sample_294": [
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(\"01010\")",
        "minimumSteps(\"1011\")",
        "minimumSteps(s = \"11011\")",
        "minimumSteps(s = \"0101010\")",
        "minimumSteps(s = \"100110\")",
        "minimumSteps(s = \"11111101111111101111111\")",
        "minimumSteps(s = \"01101000111000\")",
        "minimumSteps(s = \"1100111010101101\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"b\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abdc\", s3 = \"adcb\")",
        "findMinimumOperations(s1 = \"abcdefghijklmnop\", s2 = \"abcdefghijklmnop\", s3 = \"abcdefghijklmnop\")",
        "findMinimumOperations(s1 = \"AABCD\", s2 = \"ABCE\", s3 = \"AAED\")",
        "findMinimumOperations(s1 = \"abac\", s2 = \"acbad\", s3 = \"cacab\")",
        "findMinimumOperations(s1 = \"ebcdaceb\", s2 = \"aecdcb\", s3 = \"beceaba\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbcd\")",
        "canMakeSubsequence(str1=\"abc\", str2=\"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zbx\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abzcd\")"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [1,3,4,2])",
        "isGood(nums = [3, 2, 1, 4])",
        "isGood(nums = [1, 3, 5, 2, 4])",
        "isGood(nums = [0, 1, 3, 5, 6])",
        "isGood(nums = [3,4,5,6,1])"
    ],
    "sample_383": [
        "countPairs(nums = [3,1,4,1,5], target = 7)",
        "countPairs(nums = [1,1,1,1,1], target = 3)",
        "countPairs(nums = [1, 2, 2, 3], target = 5)",
        "countPairs(nums = [1, 1, 2, 2, 2, 3], target = 3)",
        "countPairs(nums = [1, 3, 5, 7, 9], target = 12)",
        "countPairs(nums = [-1, 0, 1, 2, -1, 4], target = 6)",
        "countPairs(nums = [1, 3, 1, 5], target = 9)",
        "countPairs(nums = [1, 2, 5, 10, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 2], target = 2)",
        "countPairs(nums = [1,3,4,2], target = 6)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], moveFrom = [1, 3, 5, 7], moveTo = [2, 4, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 8, 9], moveFrom = [2, 4], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 2, 3], moveTo = [2, 3, 1])",
        "relocateMarbles(nums = [1, 3, 5, 6, 8, 9], moveFrom = [1, 3], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 4, 3, 2, 1], moveFrom = [2, 4, 5], moveTo = [2, 3, 5])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [3,5,8,2], moveTo = [2,4,6,6])",
        "relocateMarbles(nums = [5,4,3,2,1], moveFrom = [3,2,1,4,1], moveTo = [4,3,2,1,4])",
        "relocateMarbles(nums = [6, 7, 8, 9, 10], moveFrom = [10, 7], moveTo = [6, 5])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16], moveFrom = [1, 2, 3, 4, 5, 6, 7], moveTo = [5, 4, 3, 2, 1, 6, 7])",
        "relocateMarbles(nums = [5, 5, 2, 1, 8, 6, 9, 1, 4, 9, 8, 0, 8, 0, 3], moveFrom = [8, 9], moveTo = [9, 9])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 5, 3, 4, 2], target = 5)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 5, 3, 4, 2], target = 9)",
        "countPairs(nums = [1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1, 1, 3, 2, 1], target = 3)",
        "countPairs(nums = [0, 1, 2, 3, 4, 5, 6], target = 7)",
        "countPairs(nums = [1, 1, 3, 3, 4, 4, 5, 5], target = 8)",
        "countPairs(nums = [1, 3, 3, 5, 6, 6, 7, 8], target = 8)",
        "countPairs(nums = [1,5,3,4,2,3,5,6,2], target = 8)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [4,4,4,2,4,4])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 2, 1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,2,3,4,3,4,2,3,1])",
        "minLengthAfterRemovals(nums = [3,4,4,5,5,5,2,2,3,3])",
        "minLengthAfterRemovals(nums = [4,4,4,2,3,2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4,5])",
        "minLengthAfterRemovals(nums = [1,1,2,1,3,2,1,3,2,1])",
        "minLengthAfterRemovals(nums = [5,6,4,1,1,3,1,3,2])"
    ],
    "sample_303": [
        "countSeniors(details=[\"10\", \"20\", \"30\", \"40\", \"50\", \"60\"])",
        "countSeniors(details = [\"Mike, 30\", \"James, 25\", \"Betty, 61\", \"George, 64\"])",
        "countSeniors(details = [\"John:27:Boy\", \"Adam:62:Boy\", \"Mary:61:Girl\"])",
        "countSeniors(details = [\"61121121\", \"58121121\", \"11011121\"])",
        "countSeniors(details = [\"Amy 100 20000\", \"Farhan 17 20000\", \"Sukrit 67 30000\", \"Bill 110 20000\"])",
        "countSeniors(details = [\"78862 87362 75855\", \"78863 87363 75856\", \"78864 87364 75857\", \"78865 87365 75858\"])",
        "countSeniors(details = [\"Abrams\",\"Briggs\",\"Carter\",\"Douglas\",\"Evans\",\"Ferris\",\"Ferguson\",\"Guerrero\",\"Hahn\",\"Hudgens\"])",
        "countSeniors(details = [\"Z95 43 91 23\",\"A9 27 41 92\"])",
        "countSeniors(details = [\"80-2-20-19\", \"62-7-28-19\", \"79-4-28-19\", \"74-1-12-19\"])",
        "countSeniors(details = [\"NJO\", \"28\", \"N\", \"42\", \"CM\", \"62\", \"78\", \"81\", \"ZY\", \"46\", \"N\", \"88\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(\"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aabacbebebe\")",
        "longestSemiRepetitiveSubstring(s = \"AAAAA\")",
        "longestSemiRepetitiveSubstring(s = \"AAAAAAAA\")",
        "longestSemiRepetitiveSubstring(s = \"zzzzz\")",
        "longestSemiRepetitiveSubstring(s = \"aabccbaabcca\")",
        "longestSemiRepetitiveSubstring(s = \"kataparka\")",
        "longestSemiRepetitiveSubstring(s = \"abaabbbaaaaaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaaaabbaabaabab\")",
        "longestSemiRepetitiveSubstring(s = \"bbbaaaaaaaacbbbbbaaaaaaa\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"adbc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"cd\", s2 = \"ab\")",
        "canBeEqual(s1 = \"14\", s2 = \"41\")",
        "canBeEqual(s1 = \"13\", s2 = \"31\")",
        "canBeEqual(s1 = \"aaba\", s2 = \"aaca\")",
        "canBeEqual(s1 = \"aaaa\", s2 = \"abba\")",
        "canBeEqual(s1 = \"bace\", s2 = \"abde\")",
        "canBeEqual(s1 = \"lqz\", s2 = \"wjn\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcd\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"aaaa\", s2 = \"aa\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcd\", s3 = \"bcde\")",
        "findMinimumOperations(s1 = \"gofreeteam\", s2 = \"gofreeteam\", s3 = \"gofreeteam\")",
        "findMinimumOperations(s1 = \"bat\", s2 = \"cat\", s3 = \"tat\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aaa\", s3 = \"aa\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 100)",
        "lengthOfLongestSubsequence(nums = [3, 5, 6, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [2,1,4,3], target = 5)",
        "lengthOfLongestSubsequence(nums=[10, 22, 9, 33, 21, 50, 41, 60, 80], target=92)",
        "lengthOfLongestSubsequence(nums = [3,5,6,7], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 0, 5, 3, 4], target = 7)",
        "lengthOfLongestSubsequence(nums = [5,3,4,6,3,4], target = 6)",
        "lengthOfLongestSubsequence(nums = [4, 2, 2, 2, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [2,3,5,7,8,10], target = 12)",
        "lengthOfLongestSubsequence(nums = [2,3,3,3,3], target = 3)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [4, 1, 3, 5, 7])",
        "minimumSum(nums = [2, 3, 4, 5])",
        "minimumSum(nums = [1, 4, 2, 3])",
        "minimumSum([1, 4, 2, 3])",
        "minimumSum(nums = [1, -1, -1, 1])",
        "minimumSum(nums = [2, 3, 1, 3])",
        "minimumSum([10, 4, 4, 8, 6])",
        "minimumSum([1, 1, 1, 2, 3, 5, 5, 15])",
        "minimumSum([2, 5, 6, 3, 7, 2, 1, 4, 7, 9])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\",\"a\",\"b\"])",
        "minimizeConcatenatedLength(words = [\"ac\", \"dc\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"abcd\"])",
        "minimizeConcatenatedLength(words = [\"ac\", \"dc\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"code\", \"d\", \"e\", \"f\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"b\",\"b\",\"a\"])",
        "minimizeConcatenatedLength(words = [\"cab\", \"cab\", \"dab\"])",
        "minimizeConcatenatedLength([\"cat\", \"tag\", \"gg\", \"g\"])",
        "minimizeConcatenatedLength([\"l\", \"l\", \"w\", \"t\", \"o\", \"g\", \"l\", \"e\"])",
        "minimizeConcatenatedLength(words = [\"babca\", \"bbbac\", \"bbab\", \"babcb\", \"bcbbb\", \"bbab\", \"aacb\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = '0110', k = 2)",
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = '000', k = 1)",
        "shortestBeautifulSubstring(s = \"0310101\", k = 3)",
        "shortestBeautifulSubstring(s = '00110110111', k = 3)",
        "shortestBeautifulSubstring(s = '1000111', k = 3)",
        "shortestBeautifulSubstring(s = '001011101', k = 2)",
        "shortestBeautifulSubstring(s = \"111110\", k = 2)",
        "shortestBeautifulSubstring(s = \"011010000110011101\", k = 4)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"de\",\"f\"])",
        "minimizeConcatenatedLength(words = [\"word\",\"good\",\"best\",\"word\"])",
        "minimizeConcatenatedLength(words = [\"are\",\"your\",\"words\"])",
        "minimizeConcatenatedLength(words = [\"pq\",\"qrs\",\"rsy\"])",
        "minimizeConcatenatedLength(words = [\"hub\",\"bud\"])",
        "minimizeConcatenatedLength(words = [\"minimize\",\"concatenate\",\"length\",\"of\",\"strings\"])",
        "minimizeConcatenatedLength(words = [\"rope\",\"tap\",\"door\"])",
        "minimizeConcatenatedLength(words = [\"ccb\",\"dd\",\"cc\",\"dd\"])",
        "minimizeConcatenatedLength(words = [\"jdqj\", \"lzs\", \"e\", \"flp\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 4, m = 2)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 6, m = 5)",
        "differenceOfSums(n = 16, m = 3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,1,2])",
        "alternatingSubarray(nums = [1,2,1,1,2,2])",
        "alternatingSubarray(nums = [1,2,3,1,4])",
        "alternatingSubarray(nums = [1,2,2,3,1,4,2])",
        "alternatingSubarray(nums = [2,3,3,2,4,3,4])",
        "alternatingSubarray(nums = [2, 3, 1, 0, 2, 3, 1, 0])",
        "alternatingSubarray(nums = [4, 2, 3, 4, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 1, 1, 1, 1, 2, 2, 2])",
        "alternatingSubarray(nums = [4,5,6,4,4,4])",
        "alternatingSubarray(nums = [1,2,1,1,2,2,1,2,2,1,2,2,1,2,1,1,1,2,1,1,2,1,1,1,2,1,2,1,1,1,2,1,2,2,2,1,1,1,2,1,2,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,2,2,1,1,1,2,1,2,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1,2,1,2,1,1,1"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength(nums = [1,3,5,9,7])",
        "findMaximumLength(nums = [1,3,-1,4,2])",
        "findMaximumLength(nums = [1,3,-1,4,5])",
        "findMaximumLength(nums = [1,3,5,9,7])",
        "findMaximumLength(nums = [1,3,2,2,5,2,3,7])",
        "findMaximumLength([1,2,3,1])",
        "findMaximumLength([1,3,-1,-3,5,3,6,7])",
        "findMaximumLength(nums = [1,3,-1,5,4,-1,9,6])",
        "findMaximumLength(nums = [1,3,2,2,4,5])"
    ],
    "sample_302": [
        "countSeniors(details = [\"Name: Abby Age: 16\", \"Name: George Age: 71\", \"Name: Nana Age: 108\"])",
        "countSeniors(details = [\"Name: John Smith\", \"Age: 23\", \"Name: Ann Doe\", \"Age: 64\", \"Name: Peter Jones\", \"Age: 24\"])",
        "countSeniors(details = [\"name: Tom age: 19\", \"name: Jerry age: 30\", \"name: Bob age: 63\", \"name: Tim age: 21\"])",
        "countSeniors(details = [\"006233620 40\", \"006233620 50\", \"006233620 60\", \"006233620 61\"])",
        "countSeniors(details = [\"John Doe 40, 12000\", \"Jane Doe 61, 15000\", \"Kane Smith 62, 32000\", \"Kevin Bacon 70, 12000\"])",
        "countSeniors(details = ['Dy 1999 12 23', 'Dy 2001 12 23', 'Mq 2002 12 23', 'Dy 1999 12 23'])",
        "countSeniors(details = [\"Kelly,24,F\", \"Dennis,43,M\", \"Richard,87,M\", \"Winnie,20,F\"])",
        "countSeniors(details = [\"1920325600\", \"1920325542\", \"1920325668\", \"1920325808\", \"1920325605\"])",
        "countSeniors(details = [\"tom@gmail.com;100;90;2015\", \"tim@gmail.com;100;110;2012\", \"tammy@gmail.com;100;95;2001\", \"mike@gmail.com;100;90;2003\"])",
        "countSeniors(details = [\"Marshall:18:F:01019999:8:12:59:1:76:2:1\", \"William:26:M:10011999:8:12:59:2:76:0:1\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"1234\", s2 = \"4321\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"135\", s2 = \"513\")",
        "canBeEqual(s1 = \"pq\", s2 = \"qp\")",
        "canBeEqual(s1 = \"2314\", s2 = \"1432\")",
        "canBeEqual(s1 = \"213\", s2 = \"321\")",
        "canBeEqual(s1 = \"2200\", s2 = \"2000\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [4, 2, 1])",
        "minimumCoins(prices = [2, 4, 1, 2, 5])",
        "minimumCoins(prices = [4, 3, 10, 1, 20])",
        "minimumCoins(prices = [1, 2, 5, 2, 3, 1, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20"
    ],
    "sample_378": [
        "minimumSeconds(A = [4, 2, 1, 3])",
        "minimumSeconds(A = [4, 2, 1, 3])",
        "minimumSeconds(A = [4, 2, 1, 3])",
        "minimumSeconds(A = [4, 3, 1, 2])",
        "minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(A = [5, 1, 5, 4, 1])",
        "minimumSeconds(A = [1, 1, 2, 2, 2, 3, 4, 5, 6])",
        "minimumSeconds(A = [4, 1, 3, 1, 2, 1, 2])",
        "minimumSeconds(A = [0, 1, 2, 2, 3, 3, 3, 4, 5, 5, 6])",
        "minimumSeconds(A = [6, 3, 5, 1, 4, 2, 1])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"dcba\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abc\",\"def\",\"ghi\",\"jkl\",\"ghi\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"dcba\", \"dcba\", \"abcd\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"abced\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"dea\", \"gda\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bpf\", \"bpc\", \"bpa\", \"bee\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"dcba\", \"dacb\"])",
        "maximumNumberOfStringPairs([\"abcd\",\"dcba\",\"dcba\",\"dcba\",\"bacd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aaab\", \"aa\", \"aaaaa\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2], nums2 = [4, 5, 6])",
        "minSum(nums1 = [2, 3, 10, 2], nums2 = [4, 11, 16])",
        "minSum(nums1 = [1,2,5], nums2 = [3,4,7])",
        "minSum(nums1 = [1000], nums2 = [2000])",
        "minSum(nums1 = [2], nums2 = [2, 5, 8])",
        "minSum(nums1 = [4, 2, 1, 3], nums2 = [1, 5, 8, 4])",
        "minSum(nums1 = [4, 2, 2, 2], nums2 = [4, 2, 0, 0])",
        "minSum(nums1 = [2, 3, 7, 10], nums2 = [4, 5, 7, 11])",
        "minSum(nums1 = [5, 3, 2], nums2 = [10, 3, 2, 1, 4])",
        "minSum(nums1 = [4, 2, 3, 9, 6], nums2 = [2, 7, 3, 9, 0])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"on\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"ae\")",
        "findWordsContaining(words = [\"ab\", \"bc\"], x = \"z\")",
        "findWordsContaining(words = [\"apple\", \"pen\"], x = \"pe\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"swift\"], x = \"worl\")",
        "findWordsContaining(words = [\"apple\", \"pie\", \"shorts\"], x = \"or\")",
        "findWordsContaining(words = [\"enhance\", \"enchanting\", \"enchanted\"], x = \"e\")",
        "findWordsContaining(words = [\"mango\", \"manhattan\", \"mandarin\", \"mangifera\"], x = \"a\")",
        "findWordsContaining(words = [\"bike\", \"biking\", \"car\", \"oil\", \"fuel\"], x = \"bi\")",
        "findWordsContaining(words = [\"banana\", \"applet\", \"mango\", \"fruit\", \"peach\", \"chilly\", \"kiwi\"], x = \"ana\")"
    ],
    "sample_397": [
        "maxSum(nums = [1,1,1,1], m = 2, k = 2)",
        "maxSum(nums = [1,1,1,1,1], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1], m = 2, k = 1)",
        "maxSum(nums = [1, 3, 1, 4, 1, 5], m = 3, k = 2)",
        "maxSum(nums = [1,3,2], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 2, 1, 1], m = 1, k = 1)",
        "maxSum(nums = [3, 4, 5, 7], m = 2, k = 2)",
        "maxSum(nums = [9,8,7,6,4,3,2], m = 3, k = 2)",
        "maxSum(nums = [3, 4, 7, 1, 3, 5, 8], m = 3, k = 2)",
        "maxSum(nums = [1,5,1,1,9,9,9,5,5,1,1], m = 2, k = 4)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [2], moveFrom = [], moveTo = [2])",
        "relocateMarbles(nums = [1,2], moveFrom = [0], moveTo = [1])",
        "relocateMarbles(nums = [2, 3, 5, 1, 4], moveFrom = [1, 3, 4], moveTo = [3, 1, 4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,4], moveTo = [2,3])",
        "relocateMarbles(nums = [3, 1, 2], moveFrom = [0, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [2, 3, 5, 4, 1, 6], moveFrom = [1, 2, 2], moveTo = [2, 2, 5])",
        "relocateMarbles(nums = [2, 1, 3], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [2,1,2,2,2,2], moveFrom = [2,4], moveTo = [3,0])",
        "relocateMarbles(nums = [3, 4, 5, 6, 7], moveFrom = [0, 1, 3], moveTo = [3, 4, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 2, 3, 4], moveTo = [5, 5, 5, 6])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [4, 3, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 5, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [3, 1, 2, 4])",
        "minimumRightShifts(nums = [3, 1, 2, 4])",
        "minimumRightShifts(nums = [3,1,3])",
        "minimumRightShifts(nums = [3, 1, 3, 2])",
        "minimumRightShifts(nums = [5, 6, 2, 1])",
        "minimumRightShifts(nums = [1, 5, 10, 20, 30])",
        "minimumRightShifts([3, 5, 3, 4, 1])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 3, 2], money = 4)",
        "buyChoco(prices = [1, 5, 3], money = 4)",
        "buyChoco(prices = [1, 2, 4], money = 10)",
        "buyChoco(prices = [1, 7, 4, 11], money = 7)",
        "buyChoco(prices = [10, 20], money = 50)",
        "buyChoco(prices = [3, 3, 3, 3, 3], money = 8)",
        "buyChoco(prices = [5, 7, 8], money = 5)",
        "buyChoco(prices = [2, 2, 1, 5, 4], money = 5)",
        "buyChoco(prices = [2, 10, 5, 1], money = 9)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10, 22, 9, 33, 21, 50, 41, 60, 80], target = 92)",
        "lengthOfLongestSubsequence(nums = [3, 4, 7], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,1], target = 3)",
        "lengthOfLongestSubsequence(nums = [5, 3, 4, 7, 2], target = 6)",
        "lengthOfLongestSubsequence(nums = [3, 5, 6, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [1,2,3,1,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [5, 3, 4, 7, 2], target = 13)",
        "lengthOfLongestSubsequence(nums = [3, 6, 9, 1], target = 9)",
        "lengthOfLongestSubsequence(nums = [3, 5, 6, 8], target = 3)",
        "lengthOfLongestSubsequence(nums = [0,1,2,3,4,5,6,7,8,9,10], target = 5)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abababac\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"abdabca\")",
        "longestSemiRepetitiveSubstring(s = \"baaabbaab\")",
        "longestSemiRepetitiveSubstring(\"abcababa\")",
        "longestSemiRepetitiveSubstring(s = \"bbbaacbbbac\")",
        "longestSemiRepetitiveSubstring(s = \"mmqttttn\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"bar\", \"baz\", \"foo\", \"qux\"], x = \"z\")",
        "findWordsContaining(words = [\"foo\", \"bar\", \"baz\"], x = \"b\")",
        "findWordsContaining(words = [\"abc\", \"bcd\", \"cde\"], x = \"cd\")",
        "findWordsContaining(words = [\"bana\", \"nana\", \"ana\"], x = \"a\")",
        "findWordsContaining(words = [\"ab\", \"bc\", \"cd\", \"de\"], x = \"cd\")",
        "findWordsContaining(words = [\"mary\", \"had\", \"a\", \"little\", \"lamb\"], x = \"l\")",
        "findWordsContaining(words = [\"abc\", \"bde\", \"abcde\"], x = \"ab\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"hi\", \"hello\", \"hi\", \"hey\"], x = \"h\")",
        "findWordsContaining(words = [\"what\", \"a\", \"b\", \"cat\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"swift\", \"world\"], x = \"r\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"2\", \"4\", \"prev\", \"prev\", \"3\", \"1\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"2\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"3\", \"2\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"3\",\"1\",\"prev\",\"prev\",\"4\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"prev\", \"3\", \"1\", \"next\", \"next\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"8\", \"prev\", \"prev\", \"4\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"\",\"-1\",\"1\",\"2\",\"prev\",\"prev\",\"-1\",\"2\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"1234\", s2 = \"2143\")",
        "canBeEqual(s1 = \"abba\", s2 = \"yabb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"aa11\", s2 = \"11aa\")",
        "canBeEqual(s1 = \"1234\", s2 = \"4123\")",
        "canBeEqual(s1 = \"AA\", s2 = \"BB\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"edcba\")"
    ],
    "sample_255": [
        "minimumSum(nums = [3,1,2])",
        "minimumSum(nums = [1,4,8,7])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum([5, 4, 3, 2, 1])",
        "minimumSum(nums = [2,3,4])",
        "minimumSum([1,1,8,1])",
        "minimumSum(nums = [4, 3, 1, 6])",
        "minimumSum(nums = [9,3,1,7,10,5,8])",
        "minimumSum(nums = [1,1,5,3,3,3,3,2,1])",
        "minimumSum(nums = [2, 4, 8, 1, 9, 5, 10, 7])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [3, 4, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [4, 3, 2, 6, 1, 4, 2], target = 5)",
        "lengthOfLongestSubsequence(nums = [4, 3, 2, 6, 1, 4, 2], target = 5)",
        "lengthOfLongestSubsequence(nums = [3, 5, 6, 7], target = 8)",
        "lengthOfLongestSubsequence(nums = [3, 5, -1, 6, 2, 7], target = 10)",
        "lengthOfLongestSubsequence(\n    nums = [1,2,3,4],\n    target = 5\n)",
        "lengthOfLongestSubsequence(nums = [1, 5, 1, 1, 4, 1, 1, 1], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,4,4,4,4], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 3, 3, 4], target = 8)",
        "lengthOfLongestSubsequence(\n    nums = [1, 2, 0, 1, 2, 3, 1, 2, 4, 5, 3],\n    target = 3\n)"
    ],
    "sample_368": [
        "sortVowels(s = \"lympH\")",
        "sortVowels(\"lymph\")",
        "sortVowels(\"lYmpH\")",
        "sortVowels(s = 'YmlpH')",
        "sortVowels(\"lypmH\")",
        "sortVowels(s = \"cabernet\")",
        "sortVowels(s = 'pleAse')",
        "sortVowels(s = \"pyjohan\")",
        "sortVowels(s = \"MyLyHmU\")",
        "sortVowels(s = \"knilqmpp\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[0, 1, 2], [3, 4, 5], [6, 7, 8]])",
        "matrixSum(nums = [[2,2],[3,3]])",
        "matrixSum(nums = [[4,1],[3,2]])",
        "matrixSum(nums = [[1, 4], [2, 3]])",
        "matrixSum(nums = [[5,4],[7,3]])",
        "matrixSum(nums = [[-1, -2], [3, 2], [2, 1]])",
        "matrixSum(nums = [[-1, -2, -3],[-2, -1, -3],[0, 1, -2]])",
        "matrixSum(nums = [[-5, 10, -10], [1, 1, -2], [0, 0, 10]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1,1,1])",
        "maximumTripletValue(nums = [0,0,0,0])",
        "maximumTripletValue(nums = [4, 2, 4, 5, 6])",
        "maximumTripletValue(nums = [1, -1, -1, 1])",
        "maximumTripletValue(nums = [3,4,5,2,1])",
        "maximumTripletValue(nums = [3, 1, 1, 1])",
        "maximumTripletValue([4, 2, 1, 3])",
        "maximumTripletValue(nums = [5, 5, 10, 20, 20, 20, 20])",
        "maximumTripletValue(nums = [4, 2, 3, 1, 4, 5])",
        "maximumTripletValue(nums = [2, 5, 1, 7, 8, 3])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [4, 4, 7, 6, 7])",
        "alternatingSubarray(nums = [1, 1, 0, 0, 1, 0, 0, 1])",
        "alternatingSubarray(nums = [1, 1, 1, 1])",
        "alternatingSubarray(nums = [1,2,1,2,1,2,1,2,1])",
        "alternatingSubarray(nums = [1,1,2,3,3])",
        "alternatingSubarray(nums = [0,1,0,1,1,0,1])",
        "alternatingSubarray(nums = [2,1,2,1,1,2])",
        "alternatingSubarray(nums = [1,1,1,3,3,2,2,2,2,2,2,2])",
        "alternatingSubarray(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 1])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"banana\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaouo\", k = 3)",
        "beautifulSubstrings(s = \"aeio\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 6)",
        "beautifulSubstrings(s = \"dcbefebce\", k = 4)",
        "beautifulSubstrings(s = \"eleetmintee\", k = 6)",
        "beautifulSubstrings(s = \"vzv\", k = 5)",
        "beautifulSubstrings(s = \"krforrck\")"
    ],
    "sample_449": [
        "minChanges(s = \"bbbbb\")",
        "minChanges(s = \"bbbbb\")",
        "minChanges(s = \"bbbbb\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"bbaabb\")",
        "minChanges(s = \"bbba\")",
        "minChanges(s = \"kkkk\")",
        "minChanges(s = \"abcdefgfedcba\")",
        "minChanges(s = \"qqxzq\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1110\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"0111\")",
        "minimumSteps(s = \"101010\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"1101101\")",
        "minimumSteps(s = \"00110101\")",
        "minimumSteps(\"10010110\")"
    ],
    "sample_305": [
        "countSeniors(details = [])",
        "countSeniors(details=[\"ID: 21\", \"ID: 79\", \"ID: 37\"])",
        "countSeniors(details = [\"10001011000100\", \"10001010000000\", \"10001010000000\", \"10001010000000\", \"10001010000000\", \"10001010000000\", \"10001011000100\"])",
        "countSeniors(details = [\"Name Age Gender\",\"John 18 Male\",\"Anne 28 Female\",\"Jim 75 Male\",\"Jennifer 87 Female\",\"Jenny 78 Female\"])",
        "countSeniors(details = [\"S_00116054\", \"S_00100408\", \"S_00115555\", \"S_00109999\"])",
        "countSeniors(details=[\"Aman sinha\", \"Aman is 68 years old\", \"Abhishek kumar is 67 years old\", \"Abhishek kumar is 78 years old\"])",
        "countSeniors(details = [\n    \"Person Name: Tim; Age: 19; Hours: 10\",\n    \"Person Name: Bob; Age: 77; Hours: 10\",\n    \"Person Name: John; Age: 19; Hours: 10\",\n    \"Person Name: Mary; Age: 60; Hours: 10\",\n    \"Person Name: Jane; Age: 20; Hours: 10\",\n])",
        "countSeniors(details = [\"00586-757576-20443-01808-00\", \"00603-664525-20431-01804-20\", \"00775-768774-20431-01809-00\"])",
        "countSeniors(details = [\n    \"Glacier Pine High School, Greenville, SC, 50923\",\n    \"Randolph High School, Asheville, NC, 28801\",\n    \"Evans High School, Evans, GA, 30809\",\n    \"Stanley High School, Stanley, SC, 29244\",\n    \"Blauvelt High School, Rock Hill, SC, 29732\",\n    \"Kings Mountain Day School, Kings Mountain, NC, 28035\",\n    \"North Springs Charter School, Snellville, GA, 30055\",\n    \"Chattooga High School, Chattanooga, GA, 30440\"\n])",
        "countSeniors(details = [\n    \"NAZARETH AZE\", \"57 89 97 79\", \"2004-08-13\",\n    \"NAZARETH AZE\", \"62 38 41 34\", \"1982-07-23\",\n    \"NAZARETH AZE\", \"19 79 37 25\", \"2019-05-09\",\n    \"NAZARETH AZE\", \"80 38 42 57\", \"2019-07-19\",\n    \"NAZARETH AZE\", \"23 20 84 69\", \"2000-09-22\"\n])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,4,3,3])",
        "minGroupsForValidAssignment(nums = [3,4,3,4,5])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,4,4,4,5,5,5])",
        "minGroupsForValidAssignment(nums = [4, 4, 7, 6, 7])",
        "minGroupsForValidAssignment(nums = [10,4,7,1,3])",
        "minGroupsForValidAssignment(nums=[4,3,4,3,4,2,1,4,3])",
        "minGroupsForValidAssignment(nums = [6,3,2,1,6,4,3,4])",
        "minGroupsForValidAssignment([9, 5, 5, 5, 7])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 0], [2, 1], [2, 2], [2, 3]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 0], [2, 1]], k = 2)",
        "countPairs(coordinates = [[1,2],[1,2],[1,2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 0], [1, 1]], k = 2)",
        "countPairs(coordinates = [[1,2],[1,3],[3,2],[3,4],[2,4]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 3], [2, 3], [4, 2]], k = 2)",
        "countPairs(coordinates = [[1, 1], [3, 0], [5, 1], [2, 3], [4, 2], [2, 4], [0, 0], [2, 2], [3, 3], [4, 4]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 3], [2, 4], [1, 5], [1, 6], [1, 7], [2, 8], [3, 1], [4, 2], [5, 3]], k = 1)"
    ],
    "sample_401": [
        "maxSum(nums = [1,1,1,2,2,2], m = 2, k = 3)",
        "maxSum(nums = [1,12,5,10,6], m = 2, k = 3)",
        "maxSum(nums = [4, 5, 6, 7, 8], m = 2, k = 1)",
        "maxSum(nums = [10, 1, 10, 1], m = 2, k = 2)",
        "maxSum(nums = [7, 2, 5, 7, 6, 2], m = 3, k = 3)",
        "maxSum(nums = [0, 0, 1, 1, 0, 0, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], m = 3, k = 5)",
        "maxSum(nums = [5,2,1,2,1,4,2,5], m = 1, k = 3)",
        "maxSum(nums = [7, 3, 4, 8, 10], m = 2, k = 1)",
        "maxSum(nums = [1,2,3,3,2,4,5,3,1,3,9,3], m = 3, k = 4)"
    ],
    "sample_452": [
        "minChanges(s = \"1100\")",
        "minChanges(s = \"bb\")",
        "minChanges(\"aab\")",
        "minChanges(s = \"aabbbaaa\")",
        "minChanges(s = \"00\")",
        "minChanges(s = \"abb\")",
        "minChanges(s = \"bbaaacd\")",
        "minChanges(s = \"baabaa\")",
        "minChanges(s = \"11001100\")",
        "minChanges(s = \"0123445012345\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [3,5,1,2,4], nums2 = [4,2,3,1,5])",
        "minOperations(nums1 = [1, 2], nums2 = [3, 4])",
        "minOperations(nums1 = [1, 3], nums2 = [2, 0])",
        "minOperations(nums1 = [1, 2], nums2 = [4, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [1, 2], nums2 = [1, 1])",
        "minOperations(nums1 = [1, 5, 2], nums2 = [4, 3, 1])",
        "minOperations(nums1 = [1, 4, 3, 2, 7], nums2 = [2, 1, 5, 8, 1])",
        "minOperations([1, 1, 2, 2, 2, 1, 2], [2, 1, 1, 2, 2, 2, 1])",
        "minOperations([3,4,0,1,5], [2,1,5,5,3])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"01101\", k = 1)",
        "shortestBeautifulSubstring(s = \"0110\", k = 1)",
        "shortestBeautifulSubstring(s = '10111', k = 2)",
        "shortestBeautifulSubstring(s = \"10110\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011\", k = 2)",
        "shortestBeautifulSubstring(s = \"101001010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"10000\", k = 4)",
        "shortestBeautifulSubstring(s = \"111111100000\", k = 3)",
        "shortestBeautifulSubstring(s = \"111101111011101111\", k = 3)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [2,2,4,2,5])",
        "maximumTripletValue(nums = [2,2,1,4,3])",
        "maximumTripletValue(nums = [1,4,2])",
        "maximumTripletValue([0, 0, 0, 1, 1, 1])",
        "maximumTripletValue([1, 1, 1, 2, 2, 2])",
        "maximumTripletValue(nums = [1, 5, 5, 20, 19, 5, 6])",
        "maximumTripletValue(nums = [0, -3, -1, 4])",
        "maximumTripletValue(nums = [1, 0, 0, 2, -1, 0, 1])"
    ],
    "sample_465": [
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 6, limit = 4)",
        "distributeCandies(n = 10, limit = 5)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [4,3,4,5,2])",
        "minGroupsForValidAssignment(nums = [5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,",
        "minGroupsForValidAssignment([4,3,4,3,4,3,4,3,4,3,4])",
        "minGroupsForValidAssignment([2,3,2,3,3,2])",
        "minGroupsForValidAssignment([1,1,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [12, 10, 12])",
        "minGroupsForValidAssignment(nums = [10, 4, 6, 10, 10])",
        "minGroupsForValidAssignment([10,10,10,4,7])",
        "minGroupsForValidAssignment(nums = [10,4,3,1,10,4,3,1,10,4,3,1,10,4,3,1])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 3], nums2 = [2, 4])",
        "minSum(nums1 = [5, 1, 3], nums2 = [9, 4, 3])",
        "minSum(nums1 = [1, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [4,2,3], nums2 = [5,7,8])",
        "minSum(nums1 = [10, 2], nums2 = [2, 8])",
        "minSum(nums1 = [4, 2, 3, 5], nums2 = [1, 7, 8, 4])",
        "minSum(nums1 = [4, 0, 0, 1, 2], nums2 = [4, 3, 2, 1, 0])",
        "minSum(nums1 = [1, 4, 0, 15, 16], nums2 = [12, 7, 9, 5, 15, 13])"
    ],
    "sample_453": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"1010\")",
        "minChanges(s = \"1110\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"12121212\")",
        "minChanges(s = \"abccdddbb\")",
        "minChanges(s = \"12112\")",
        "minChanges(s = \"bacdcd\")",
        "minChanges(s = \"aaac\")",
        "minChanges(s = \"bbbabbbabbbbbbabbbbbbaaaabbbbbbbbbbbbbbabaabbb\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 3)",
        "beautifulSubstrings(s = \"ttt\", k = 2)",
        "beautifulSubstrings(s = \"f\", k = 2)",
        "beautifulSubstrings(s = \"meow\", k = 4)",
        "beautifulSubstrings(s = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\", k = 4)",
        "beautifulSubstrings(s = \"baby\", k = 2)",
        "beautifulSubstrings(s = \"abooiae\", k = 4)",
        "beautifulSubstrings(s = \"ccgagacabcba\", k = 2)",
        "beautifulSubstrings(s = \"babbbbaabababbbabbbbbababaabbaaabababbaaababbabbbababbbbaaaababbaaaababbaabbaaabbbaa\", k = 4)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aei\", k = 4)",
        "beautifulSubstrings(s = \"aaeeeoooooouuc\", k = 3)",
        "beautifulSubstrings(s = \"dbbq\", k = 3)"
    ],
    "sample_369": [
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = 'LyMPh')",
        "sortVowels(s = \"aeiouy\")",
        "sortVowels(s = \"LyMpH\")",
        "sortVowels(s = 'python')",
        "sortVowels(\"hello\")",
        "sortVowels(s = \"leYmpH\")",
        "sortVowels(s = \"pIYy\")",
        "sortVowels(s = 'leEopLauW')",
        "sortVowels(s = \"DZzEzYi\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2])",
        "minimumSeconds(nums = [1,2,4,7])",
        "minimumSeconds(nums = [1, 2])",
        "minimumSeconds(nums = [4,2,1,3])",
        "minimumSeconds(nums = [1, 1, 3, 6, 10, 15])",
        "minimumSeconds(nums = [9,3,9,3,9,3])",
        "minimumSeconds(nums = [4,2,5,7])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumSeconds([4, 1, 4, 1])",
        "minimumSeconds(nums = [2, 1, 5, 3, 2, 1, 1, 4, 1, 2])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [3, 1, 4, 2])",
        "minimumSum(nums = [1, 4, 8, 7])",
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [2, 1, 1, 4, 3])",
        "minimumSum(nums = [1, 5, 10])",
        "minimumSum(nums = [6, 4, 1, 3])",
        "minimumSum(nums = [4, 6, 2, 3, 1, 7, 8])",
        "minimumSum(nums = [3, 2, 0, 2, 0, 3, 2, 3])",
        "minimumSum(nums = [1, 5, 5, 2, 3, 1, 2, 4, 1, 10])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4], k = 7)",
        "minOperations(nums = [3,1,4,1,5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1,2,3], k = 3)",
        "minOperations(nums = [2, 2, 2], k = 2)",
        "minOperations(nums = [1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1], k = 5)",
        "minOperations(nums = [1,1,2,3,5,6], k = 10)",
        "minOperations(nums = [1,5,15,10,20], k = 8)",
        "minOperations(nums = [3, 8, 1, 3, 1, 8], k = 3)",
        "minOperations(nums = [2,3,1,1,2,3,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "maxSum(A = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], m = 2, k = 4)",
        "maxSum(A = [9, 3, 4], m = 2, k = 2)",
        "maxSum(A = [1, 4, 5, 1, 2], m = 3, k = 2)",
        "maxSum(A = [5, 5, 4, 2, 7, 1, 5, 1, 1, 1], m = 2, k = 3)",
        "maxSum(A = [1, 0, 0, 0, 0, 1], m = 3, k = 3)",
        "maxSum(A = [10, 20, 30, 40, 100, 50, 60], m = 2, k = 4)",
        "maxSum(A = [2, 4, 1, 3, 5, 1, 3], m = 3, k = 3)",
        "maxSum(A = [1, 1, 3, 4, 1, 5, 1, 6, 1, 2, 1, 7, 1, 8], m = 3, k = 4)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"011010\")",
        "minimumSteps(s = \"011011\")",
        "minimumSteps(\"01101\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [3, 1, 4, 1, 5])",
        "maxSubarrays(nums = [3, 1, 4, 1, 5])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1,2,3,4,5])",
        "maxSubarrays([1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 1, 4, 5])",
        "maxSubarrays(nums = [1, 2, 2, 2, 1])",
        "maxSubarrays(nums = [1, 5, 3, 9, 7, 11])",
        "maxSubarrays([0,0,1,0,1,1,1,1,1])",
        "maxSubarrays([4, 2, 4, 6, 2, 4, 4, 4, 4, 4, 2, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 3], money = 4)",
        "buyChoco(prices = [1, 2, 5], money = 4)",
        "buyChoco(prices = [2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 5], money = 6)",
        "buyChoco(prices = [1,2,3,4], money = 5)",
        "buyChoco(prices = [1,2], money = 2)",
        "buyChoco(prices = [2, 3, 5, 1], money = 10)",
        "buyChoco(prices = [2, 5, 3], money = 10)",
        "buyChoco(prices = [2, 4, 6, 8], money = 5)",
        "buyChoco(prices = [4, 2, 6, 1, 10], money = 8)"
    ],
    "sample_290": [
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"0101010101\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"01101101\")",
        "minimumSteps(s = \"11011\")",
        "minimumSteps(s = \"000110\")",
        "minimumSteps(s=\"01101101\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [4,4,4,4,4])",
        "minLengthAfterRemovals(nums = [4,4,4,4,4])",
        "minLengthAfterRemovals(nums = [4,4,4,2,4,4])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2])",
        "minLengthAfterRemovals(nums = [3,4,4,2])",
        "minLengthAfterRemovals(nums = [4,3,1,1,3,3,2])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [3,1,3,4,2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 1, 2, 1])"
    ],
    "sample_420": [
        "minOperations(nums = [1,2,3,4], k = 2)",
        "minOperations(nums = [4, 2, 1, 3], k = 2)",
        "minOperations(nums = [5], k = 1)",
        "minOperations(nums = [5,2,1,2,1,2,5], k = 2)",
        "minOperations(nums = [4, 4, 3, 3, 3, 1, 1, 1], k = 2)",
        "minOperations(nums = [5, 3, 7, 7, 7], k = 10)",
        "minOperations(nums = [2, 2, 4, 5, 5, 3], k = 2)",
        "minOperations(nums = [3, 4, 7, 9, 1], k = 9)",
        "minOperations(nums = [2, 3, 5, 3, 2, 3, 5, 4], k = 4)",
        "minOperations(nums = [4, 1, 6, 2, 7, 8, 3, 9, 5], k = 18)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 2, 1])",
        "isGood(nums = [1, 2, 3, 4, 1])",
        "isGood(nums = [3, 1, 2, 3, 3])",
        "isGood(nums = [2, 1, 3, 3])",
        "isGood(nums = [3,3,1,1,1,2,2,2])",
        "isGood(nums = [2, 4, 5, 4, 3, 4, 5, 4])",
        "isGood(nums = [2, 4, 4, 4, 5, 6, 6, 6, 6, 7, 7, 7, 7, 9, 9, 9, 9])",
        "isGood(nums = [2, 5, 6, 1, 1, 3, 2, 2, 2])"
    ],
    "sample_325": [
        "isFascinating(n = 3)",
        "isFascinating(n = 1)",
        "isFascinating(n = 5)",
        "isFascinating(n = 10)",
        "isFascinating(2)",
        "isFascinating(n = 197)",
        "isFascinating(n = 101)",
        "isFascinating(555)",
        "isFascinating(1)",
        "isFascinating(101010)"
    ],
    "sample_365": [
        "isGood(nums = [1])",
        "isGood(nums = [1])",
        "isGood(nums = [1, 3])",
        "isGood(nums = [1,3])",
        "isGood(nums = [1, 3, 4, 2])",
        "isGood(nums = [1,1,2,3,3])",
        "isGood(nums = [2,3,4,5])",
        "isGood(nums = [1,2,4,3,5,3])",
        "isGood(nums = [5,4,3,4,5,6])",
        "isGood(nums = [3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [4, 2, 1, 3])",
        "minimumSeconds(nums = [4, 2, 1, 3])",
        "minimumSeconds(nums = [4, 3, 1, 1, 1, 4])",
        "minimumSeconds(nums = [2, 4, 2, 2, 3])",
        "minimumSeconds(nums = [2, 5, 1, 2, 3, 3])",
        "minimumSeconds(nums = [2, 3, 1, 1, 4])",
        "minimumSeconds(nums = [1, 1, 2, 4, 2])",
        "minimumSeconds(nums = [2, 3, 2, 2, 3, 3, 3])",
        "minimumSeconds(nums = [3,2,4,1,3,5])",
        "minimumSeconds(nums = [9, 4, 6, 1, 3, 6, 7])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [3, 5, 7])",
        "minimumRightShifts(nums = [4, 3, 10, 9, 8])",
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 3, 3, 2, 4])",
        "minimumRightShifts(nums = [6, 1, 3, 4, 5])",
        "minimumRightShifts([5, 1, 2])",
        "minimumRightShifts(nums = [3, 5, 2, 6, 7, 4, 8])",
        "minimumRightShifts(nums = [6, 8, 1, 4, 3, 0])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1,2,3,5,4])",
        "isGood(nums = [3, 4, 6, 1, 2])",
        "isGood(nums = [2, 1, 4])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 1, 1], nums2 = [1, 1, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 1, 2])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [5, 1, 3], nums2 = [9, 4, 2])",
        "minOperations(nums1 = [1, 3], nums2 = [2, 1])",
        "minOperations(nums1 = [2, 3, 1, 5], nums2 = [3, 4, 2, 1, 7])",
        "minOperations(nums1 = [1,1,2], nums2 = [1,1,2])",
        "minOperations(nums1 = [1, 5, 8], nums2 = [4, 12, 19])",
        "minOperations(nums1 = [0, 4, 5, 1, 3], nums2 = [3, 2, 1, 3, 2, 4])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"123456\", k = 3)",
        "shortestBeautifulSubstring(s = \"29\", k = 1)",
        "shortestBeautifulSubstring(s = \"123456789\", k = 3)",
        "shortestBeautifulSubstring(s = \"0010111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 4)",
        "shortestBeautifulSubstring(s = \"3113123\", k = 3)",
        "shortestBeautifulSubstring(s = \"226662\", k = 5)",
        "shortestBeautifulSubstring(s = \"0212130\", k = 3)",
        "shortestBeautifulSubstring(s = '0312615', k = 3)",
        "shortestBeautifulSubstring(s = \"0356324752412\", k = 6)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [5,3,4,2])",
        "minGroupsForValidAssignment(nums = [1, 3, 1, 4, 1, 3, 2])",
        "minGroupsForValidAssignment([3, 6, 3, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 2, 2, 2, 2])",
        "minGroupsForValidAssignment([4,3,4,1])",
        "minGroupsForValidAssignment([1, 1, 2, 2, 2, 3, 4, 3])",
        "minGroupsForValidAssignment([15, 15, 30, 5])",
        "minGroupsForValidAssignment(nums = [8, 8, 4, 4, 8, 8, 4, 4, 8, 8])"
    ],
    "sample_289": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s = \"011010\")",
        "minimumSteps(s = \"0101101\")",
        "minimumSteps(s = \"101111101\")",
        "minimumSteps(s = \"000000000000000\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,3], target = 5)",
        "lengthOfLongestSubsequence(nums = [8,3,7,2,1], target = 11)",
        "lengthOfLongestSubsequence(nums = [3, 5, 6, 7], target = 7)",
        "lengthOfLongestSubsequence(nums = [3,4,5,6,7], target = 9)",
        "lengthOfLongestSubsequence(nums = [8], target = 7)",
        "lengthOfLongestSubsequence(nums = [3,2,3,4,5], target = 9)",
        "lengthOfLongestSubsequence(nums = [2,5,1,3,4,7], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 3, 6, 5, 7, 10, 12], target = 10)",
        "lengthOfLongestSubsequence(nums = [9,3,4,7,2,8,4,9,0,4,3,5,1,6,2], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 3, 1, 3, 3, 2, 5, 2, 3, 3, 3, 3], target = 4)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [5,1,3,4,7])",
        "minimumSum(nums = [5, 1, 1, 1])",
        "minimumSum(nums = [2,1,2])",
        "minimumSum(nums = [10,4,4,3,3])",
        "minimumSum(nums = [6,3,3,4,7,1])",
        "minimumSum([4,1,4,6])",
        "minimumSum(nums = [1, 4, 2, 10])",
        "minimumSum(nums = [1, 3, 7, 11, 12, 4, 5])",
        "minimumSum(nums = [20,14,16,9,7,2,18])"
    ],
    "sample_398": [
        "maxSum(nums = [2, 4, 6, 2, 5], m = 2, k = 1)",
        "maxSum(nums = [1,1,1,1,1], m = 2, k = 3)",
        "maxSum(nums = [3, 4, 9, 6, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 0, 1, 1, 0], m = 1, k = 2)",
        "maxSum(nums = [4, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1,2,1,2,1,3,4,5,6], m = 3, k = 2)",
        "maxSum(nums = [1,1,1,1,1,1,1,1,1,1], m = 3, k = 2)",
        "maxSum(nums = [4, 5, 1, 2, 3, 5, 1, 2], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,10,100,1000,99999], m = 1, k = 5)",
        "maxSum(nums = [5, 3, 7, 7, 1, 3, 1, 1, 2], m = 3, k = 5)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bac\", s3 = \"bca\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcdf\", s3 = \"cdef\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"de\", s3 = \"f\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ca\", s3 = \"bac\")",
        "findMinimumOperations(s1 = \"ababab\", s2 = \"bbbabab\", s3 = \"abbbbba\")"
    ],
    "sample_427": [
        "minOperations(nums = [2, 2, 3, 4])",
        "minOperations(nums = [1,1,3])",
        "minOperations(nums = [4,1,2,3])",
        "minOperations([3, 1, 1, 2, 1, 1, 3])",
        "minOperations(nums = [1, 2, 3, 1, 1, 1, 1, 1])",
        "minOperations(nums = [2, 6, 6, 8, 20])",
        "minOperations(nums = [6, 6, 5, 5, 4, 4])",
        "minOperations(nums = [9,6,9,3,1,9,9])",
        "minOperations([3, 4, 1, 2, 9, 12, 14, 11, 10, 13])",
        "minOperations([9, 7, 7, 9, 5, 7, 7, 9, 9, 9, 9, 9, 7, 7, 7, 9, 7, 7, 7, 9, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 7, 9, 7, 7, 9, 9, 9, 7, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 7, 7, 7, 7, 9, 7, 7, 9, 7, 7, 7, 7, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1,2,5,10,20])",
        "minimumCoins(prices = [3, 1, 4, 1, 5, 9])",
        "minimumCoins(prices = [1, 2, 3, 10])",
        "minimumCoins([3, 1, 4, 1, 5])",
        "minimumCoins(prices = [1, 5, 11, 5])",
        "minimumCoins(prices = [1, 5, 2, 2, 1, 1, 2])",
        "minimumCoins([2,5,1,1,2,10])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [9])",
        "minimumSeconds(nums = [1,1,1])",
        "minimumSeconds(nums = [3,4,4,6,1,4,4])",
        "minimumSeconds(nums = [3, 4, 2, 1, 4, 5])",
        "minimumSeconds(nums = [1, 2])",
        "minimumSeconds(nums = [1, 2, 1, 1])",
        "minimumSeconds(nums = [5, 1, 1, 1])",
        "minimumSeconds(nums = [2, 1, 1, 2, 1])",
        "minimumSeconds([1,1,2,2,2,4,4,4])",
        "minimumSeconds(nums = [99, 77, 55, 55, 55, 33, 33, 22, 22, 22])"
    ],
    "sample_448": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"123123\")",
        "minChanges(\"aabbb\")",
        "minChanges(s = \"AAAAAA\")",
        "minChanges(s = \"902\")",
        "minChanges(s = \"1212312312\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [9, 8, 5, 3, 1], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5, 7, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [10, 20, 30, 40, 50], limit = 15)",
        "lexicographicallySmallestArray(nums = [1, 5, 3, 4, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [9, 4, 2, 1, 3], limit = 6)",
        "lexicographicallySmallestArray(nums = [4, 3, 1, 2], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 2, 4, 6, 7, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [3, 5, 4, 8, 2, 3], limit = 6)",
        "lexicographicallySmallestArray(nums = [1, 10, 3, 6, 3, 3], limit = 3)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [2, 2, 2])",
        "sumCounts(nums = [1,1,2,2,3])",
        "sumCounts([1,1,2])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "sumCounts(nums = [1, 2, 3, 3, 3])",
        "sumCounts(nums=[1,2,3,1,2,3])",
        "sumCounts(nums = [1, 1, 2, 2, 2, 2, 3, 3, 4, 5])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [0,0,0])",
        "maximumTripletValue(nums = [5, 2, 3, 4])",
        "maximumTripletValue(nums = [-2,-1,2,1])",
        "maximumTripletValue(nums = [1, 5, 5, 25, 125])",
        "maximumTripletValue(nums = [1, 3, 5, 9, 9, 10])",
        "maximumTripletValue(nums = [2,1,2,1,0,2,1,1,2,1])",
        "maximumTripletValue(nums = [1, 0, 2, 0, 4, 5, 3, 6])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aaaa\", k = 2)",
        "beautifulSubstrings(s = \"aaaa\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"abcdefgh\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooauu\", k = 1)",
        "beautifulSubstrings(s = \"hello\", k = 3)",
        "beautifulSubstrings(s = \"abABBBA\", k = 3)",
        "beautifulSubstrings(s = \"gofg\", k = 3)",
        "beautifulSubstrings(s = \"heygithubers\", k = 7)",
        "beautifulSubstrings(s = \"xyzaefgghiqk\", k = 2)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1,5,3,4,7], target = 6)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1,3,5,7,9], target = 10)",
        "countPairs(nums = [2,3,4,5,6], target = 6)",
        "countPairs(nums = [1,1,3,2,4], target = 3)",
        "countPairs(nums = [0,1,2,4,5,6], target = 6)",
        "countPairs(nums = [1,3,2,4,0], target = 4)",
        "countPairs(nums = [3,4,1,3,5], target = 6)"
    ],
    "sample_462": [
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 13, limit = 2)",
        "distributeCandies(n = 13, limit = 2)",
        "distributeCandies(n = 13, limit = 4)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 12, limit = 5)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 1, limit = 10)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 2], nums2 = [3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [3, 4, 5, 6])",
        "minOperations(nums1 = [1, 2], nums2 = [3, 2])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 1, 5])",
        "minOperations(nums1 = [1, 2, 3, 1, 1], nums2 = [1, 2, 1, 1, 1])",
        "minOperations(nums1 = [1, 5, 3, 4, 2], nums2 = [4, 2, 3, 1, 5])",
        "minOperations(nums1 = [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0], nums2 = [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1])",
        "minOperations(nums1 = [2, 4, 5, 9, 7], nums2 = [1, 2, 5, 8, 9])"
    ],
    "sample_426": [
        "minOperations(nums = [1,1,2])",
        "minOperations(nums = [2, 4, 1, 5, 3])",
        "minOperations(nums = [5, 5, 4, 4])",
        "minOperations(nums = [4, 2, 4, 6, 1, 4])",
        "minOperations(nums = [5,1,3,4,3,5,2])",
        "minOperations(nums = [4, 1, 8, 7, 6])",
        "minOperations(nums = [3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 15])",
        "minOperations(nums = [3,3,3,3,7,3,3,4,3,3,3,7,3,3,3,3,3])",
        "minOperations(nums = [1, 2, 1, 1, 3, 5, 6, 7, 6, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])",
        "minOperations(nums = [4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6, 2, 4, 5, 7, 2, 4, 2, 4, 4, 6,"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"0110\", k = 1)",
        "shortestBeautifulSubstring(s = \"11111\", k = 2)",
        "shortestBeautifulSubstring(s = '11', k = 1)",
        "shortestBeautifulSubstring(s = \"10100\", k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"101011\", k = 1)",
        "shortestBeautifulSubstring(s = \"110111011\", k = 1)",
        "shortestBeautifulSubstring(s = \"110110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11101000101110111\", k = 4)",
        "shortestBeautifulSubstring(s = \"10100110110011111000\", k = 2)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [3, 2, 1, 2, 3])",
        "minimumSeconds(nums = [3,4,2,1,3])",
        "minimumSeconds(nums = [3,2,1,2,3])",
        "minimumSeconds(nums = [3,2,1,2,3])",
        "minimumSeconds(nums = [2, 3, 4])",
        "minimumSeconds(nums = [1, 4, 1, 2])",
        "minimumSeconds(nums = [1, 1, 5, 2, 1, 4, 1])",
        "minimumSeconds(nums = [2, 2, 3, 4, 5, 1])",
        "minimumSeconds(nums = [3, 5, 3, 2, 1, 2, 4, 2, 1])",
        "minimumSeconds(nums = [3, 2, 5, 2, 6, 1, 2, 7, 4])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [4, 3, 1, 1, 1, 2])",
        "minOperations(nums = [3, 3, 3, 2, 5])",
        "minOperations(nums = [1,2,3,1,1,1])",
        "minOperations(nums = [2, 3, 3, 2, 3, 4, 2])",
        "minOperations([3, 3, 1, 1, 1, 1, 3, 3, 3, 3])",
        "minOperations(nums = [5, 5, 3, 1, 1, 4, 4, 4])",
        "minOperations([0, 3, 2, 0, 1])",
        "minOperations(nums = [3,1,4,1,8,5,1,3])",
        "minOperations(nums = [4, 6, 6, 6, 2, 1, 2, 5, 5])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [3, 1, 4, 1, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 1, 2, 1, 2, 2, 1, 2, 2])",
        "alternatingSubarray(nums = [1,2,1,1,1,2,1,1])",
        "alternatingSubarray(nums = [1,3,2,4,1,3,2,4,1,3,2,4,1,3,2,4,1,3,2,4])",
        "alternatingSubarray(nums = [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0])",
        "alternatingSubarray(nums = [1,2,2,2,2,3,3,4,5])",
        "alternatingSubarray(nums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 4, 4, 5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [2, 3, 3, 2, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [4, 5, 5, 2, 3, 3, 3, 1, 4, 4])",
        "minLengthAfterRemovals(nums = [5, 4, 4, 3, 4])",
        "minLengthAfterRemovals(nums = [9, 12, 15, 12, 18, 15, 13])",
        "minLengthAfterRemovals(nums = [5, 3, 7, 0, 0, 6, 0, 5, 8, 9, 9])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abcde\",\"fghij\",\"klmno\",\"pqrst\",\"fguij\",\"axcye\",\"wvxyz\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"b\",\"c\",\"a\",\"c\",\"c\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcc\", \"efc\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\",\"sdaklfj\",\"asdjf\",\"na\",\"dkffd\"])",
        "maximumNumberOfStringPairs(words = [\"b\", \"ba\", \"bca\", \"bda\", \"bdca\"])",
        "maximumNumberOfStringPairs(words = [\"b\",\"ba\",\"bca\",\"ca\",\"da\",\"db\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcf\", \"gef\", \"a\"])",
        "maximumNumberOfStringPairs([\"abcde\", \"lllll\", \"qqqww\", \"gggff\", \"abcd\", \"qwer\", \"gggqq\"])",
        "maximumNumberOfStringPairs(words = [\"ccd\",\"ccb\",\"eab\",\"bcc\",\"dcc\",\"ffa\",\"bbb\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"aabc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"aba\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xza\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"fxyz\")",
        "canMakeSubsequence(str1 = \"aabaaab\", str2 = \"aaab\")",
        "canMakeSubsequence(str1 = \"aabb\", str2 = \"abbba\")",
        "canMakeSubsequence(str1 = \"azbccdd\", str2 = \"addbc\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcabca\")",
        "longestSemiRepetitiveSubstring(s = \"ababaca\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbcca\")",
        "longestSemiRepetitiveSubstring(s = \"aabacbffdd\")",
        "longestSemiRepetitiveSubstring(\"abacbcd\")",
        "longestSemiRepetitiveSubstring(s = \"asdffghgfgaaaabbb\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 1)",
        "maxSum(nums = [3,4,5,7,8], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [2,2,2,2,2], m = 2, k = 1)",
        "maxSum(nums = [4,2,3,10,1], m = 3, k = 2)",
        "maxSum(nums = [4, 3, 2, 5, 2, 6], m = 2, k = 3)",
        "maxSum(nums = [3,2,1,4,2,3], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,10,9], m = 3, k = 2)",
        "maxSum(nums = [5,7,4,7,3,1,3], m = 1, k = 3)",
        "maxSum(nums = [1,3,2,4,5,2,1,3,6,3], m = 4, k = 1)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\", \"dog\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"bat\", \"rat\"], x = \"at\")",
        "findWordsContaining(words = [\"ba\", \"na\", \"ban\", \"an\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"cow\"], x = \"o\")",
        "findWordsContaining(words = [\"pqr\", \"pq\", \"qr\"], x = \"q\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"hey\", \"stupid\"], x = \"hi\")",
        "findWordsContaining(words = [\"ba\",\"a\",\"nana\",\"ban\",\"a\"], x = \"an\")",
        "findWordsContaining(words = [\"xbcd\", \"bxcd\", \"cd\"], x = \"cd\")",
        "findWordsContaining(words = [\"Towers\", \"of\", \"power\", \"interview\", \"questions\"], x = \"ow\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [2,1,2,2,2,3], moveFrom = [2,5], moveTo = [4,5])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [2,4], moveTo = [1,3])",
        "relocateMarbles(nums = [2,3,4,1,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [2,3], moveTo = [3,4])",
        "relocateMarbles(nums = [1,1,3,3,2,2,4,4], moveFrom = [2,4], moveTo = [1,3])",
        "relocateMarbles(nums = [4,3,2,7,8,2,3,1], moveFrom = [2,2], moveTo = [2,2])",
        "relocateMarbles(nums = [2,2,2,2,2,2,2,2,2,2], moveFrom = [0, 1, 2], moveTo = [1, 2, 3])",
        "relocateMarbles(nums = [2,3,5,4,7,5,1,2], moveFrom = [2,2,2], moveTo = [1,2,3])",
        "relocateMarbles(nums = [5,2,4,4,4,4,2,2,1,1], moveFrom = [2,5,1], moveTo = [3,5,4])",
        "relocateMarbles(nums = [2,2,2,4,5,5,5,2,2,2,2,2,4,5,5,5,5,5,5,5,5], moveFrom = [0,2,4,7,9,11,15,17,19,21,23,25,26], moveTo = [2,2,1,5,7,11,19,19,2,2,2,2,4,15,15,15,15,15,15,15,15])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [4, 2, 3, 1])",
        "maximumTripletValue(nums = [-2, -1, 0, 1, 2])",
        "maximumTripletValue(nums = [4, 2, 3, 1, 4, 1])",
        "maximumTripletValue(nums = [2, 1, 1, 4, 5])",
        "maximumTripletValue(nums = [-10, 3, 2, -1])",
        "maximumTripletValue(nums = [1, 3, -1, 2, 6, -1, 1])",
        "maximumTripletValue(nums = [0, -3, 5, 2, -2, 6, -4, 3])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"bananas\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abaaab\")",
        "longestSemiRepetitiveSubstring(s = \"bananabanana\")",
        "longestSemiRepetitiveSubstring(s = \"aceadae\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbcccda\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbaaacbbaab\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcc\", \"bec\", \"bbc\", \"bdc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"cd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcc\", \"bec\", \"bbc\", \"bdc\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"b\",\"c\",\"a\",\"c\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"b\",\"c\",\"a\",\"c\",\"c\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"abc\",\"bac\",\"bca\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ab\", \"cd\", \"ef\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abc\",\"om\",\"som\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abc\",\"om\",\"som\",\"som\",\"som\"])",
        "maximumNumberOfStringPairs(words = [\"gaz\", \"ubn\", \"xyz\", \"ubn\", \"abc\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "matrixSum(nums = [[1,2], [3,4]])",
        "matrixSum(nums = [[0, 1], [1, 2]])",
        "matrixSum([[1, 2], [3, 4], [5, 6]])",
        "matrixSum([[1, 3, 5], [7, 9, 11], [13, 15, 17]])",
        "matrixSum([[1, 2], [2, 3]])",
        "matrixSum(nums = [[4], [3], [5], [1], [6]])",
        "matrixSum(nums = [[2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9]])",
        "matrixSum(nums = [[2, 1], [5, 1], [9, 3]])",
        "matrixSum(nums = [[1, 2, 3, 4, 5], [1, 1, 1, 1, 1], [1, 3, 5, 7, 9]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"aba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"a\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"dog\", s2 = \"dog\", s3 = \"doggy\")",
        "findMinimumOperations(s1 = \"titan\", s2 = \"titan\", s3 = \"titan\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banananana\", s3 = \"bananaanana\")",
        "findMinimumOperations(s1 = \"AABBCCDD\", s2 = \"AAEBCDD\", s3 = \"AABBCDD\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"ace\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"bde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"acd\", s3 = \"ade\")",
        "findMinimumOperations(s1 = \"11111\", s2 = \"11111\", s3 = \"11111\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"xyz\", s3 = \"wxyz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"dce\", s3 = \"dce\")",
        "findMinimumOperations(s1 = \"c\", s2 = \"abc\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abce\", s3 = \"abcef\")",
        "findMinimumOperations(s1 = \"dcab\", s2 = \"dcab\", s3 = \"deab\")",
        "findMinimumOperations(s1 = \"qqq\", s2 = \"aaa\", s3 = \"qqa\")"
    ],
    "sample_324": [
        "isFascinating(n = 0)",
        "isFascinating(n = 12)",
        "isFascinating(n = 9)",
        "isFascinating(n = 20)",
        "isFascinating(n = 321)",
        "isFascinating(2)",
        "isFascinating(111)",
        "isFascinating(n = 14063)",
        "isFascinating(n = 2020)",
        "isFascinating(n = 11112333444444)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5,10,20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [3,1,2,4,1])",
        "minimumCoins(prices = [3,2,1])",
        "minimumCoins(prices = [1,2,4])",
        "minimumCoins(prices = [1,2,5,10,20,50,100])",
        "minimumCoins(prices = [1,2,3,100])",
        "minimumCoins(prices=[1,2,10])",
        "minimumCoins(prices = [3,2,2,5,3,8])",
        "minimumCoins(prices = [5,4,2,6,8,5,5,9,4,3,7,9])"
    ],
    "sample_380": [
        "countPairs(nums = [1,1,1,1], target = 3)",
        "countPairs(nums = [3, 5, 4, 8], target = 7)",
        "countPairs(nums = [1,5,3,4,7], target = 10)",
        "countPairs(nums = [1,3,5], target = 8)",
        "countPairs(nums = [1,1,1,1,3,5], target = 6)",
        "countPairs(nums = [1, 3, 2, 4], target = 5)",
        "countPairs(nums = [1,2,5,3,4,1], target = 10)",
        "countPairs(nums = [1,3,2,4,0], target = 5)",
        "countPairs(nums = [3,4,5,6], target = 8)",
        "countPairs(nums = [2,10,8], target = 6)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,1,1,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [4,3,4,4,5])",
        "minGroupsForValidAssignment(nums = [1, 2, 2])",
        "minGroupsForValidAssignment(nums = [10,4,4,2,2,2])",
        "minGroupsForValidAssignment(nums = [2, 3, 3, 3, 5, 4, 3, 2])",
        "minGroupsForValidAssignment(nums = [5,4,10,8])",
        "minGroupsForValidAssignment(nums = [1,1,4,4,3,3,2,2,5])"
    ],
    "sample_382": [
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 5, 3, 3, 3], target = 6)",
        "countPairs(nums = [1, 2, 2, 3], target = 4)",
        "countPairs(nums = [1, 1, 1, 2, 2, 2], target = 5)",
        "countPairs(nums = [1, 5, 5, 1, 1, 1], target = 10)",
        "countPairs(nums = [3, 1, 1, 2, 2, 4], target = 4)",
        "countPairs(nums = [3, 4, -1, 2], target = 4)",
        "countPairs(nums = [1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], target = 10)"
    ],
    "sample_317": [
        "buyChoco(prices = [5, 4, 3, 2, 1], money = 20)",
        "buyChoco(prices = [3,5,2,1], money = 10)",
        "buyChoco(prices = [5,2,4,1], money = 7)",
        "buyChoco(prices = [3,5,1], money = 6)",
        "buyChoco(prices = [100, 200, 300], money = 301)",
        "buyChoco(prices = [4, 7, 2, 8], money = 7)",
        "buyChoco(prices = [2,5,6,7,8,10], money = 10)",
        "buyChoco(prices = [1,1,2,3,3,4,7], money = 20)",
        "buyChoco(prices = [10, 12, 3, 7, 15, 9], money = 30)",
        "buyChoco(prices = [3, 10, 6, 7, 1, 12], money = 10)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\", \"bcd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"abc\", \"fea\"])",
        "maximumNumberOfStringPairs([\"abc\",\"deq\",\"melon\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\"])",
        "maximumNumberOfStringPairs([\"ab\", \"cd\", \"ef\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"efg\", \"aba\", \"def\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"deq\",\"mee\",\"qep\",\"see\",\"sew\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = 'lEOtcede')",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"letocde\")",
        "sortVowels(s = \"leotedc\")",
        "sortVowels(\"letocede\")",
        "sortVowels(s = 'Hello')",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"world\")"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 1, 2, 3])",
        "sumCounts(nums = [2, 2, 2, 2])",
        "sumCounts(nums = [1, 3, 1, 5, 4])",
        "sumCounts(nums = [1,2,3,4,5,6])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 2, 4, 3])",
        "sumCounts(nums = [2, 2, 2, 4, 4, 4, 4, 8, 8])",
        "sumCounts(nums = [5, 1, 1, 1, 1, 5, 5, 1])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [2, 4, 1, 2, 7])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [2, 1, 3, 4])",
        "minimumCoins(prices = [7, 2, 3, 5, 4])",
        "minimumCoins(prices = [1, 2, 4, 10, 20, 50])",
        "minimumCoins(prices = [5, 6, 2, 1])",
        "minimumCoins(prices = [2, 4, 8, 1, 3, 5])",
        "minimumCoins(prices = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])",
        "minimumCoins(prices = [2, 4, 7, 1, 5, 1, 4, 6, 4, 6])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 100, m = 2)",
        "differenceOfSums(n = 12, m = 5)",
        "differenceOfSums(n = 9, m = 3)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 5, m = 4)",
        "differenceOfSums(n = 100, m = 3)"
    ],
    "sample_307": [
        "countSeniors(details = [\"70a\", \"70b\", \"80c\", \"80d\", \"60e\"])",
        "countSeniors(details = [\"John, 42, male\", \"Adam, 41, male\", \"Anna, 41, female\"])",
        "countSeniors(details = [\"12:05:00\", \"15:06:00\", \"12:00:00\", \"14:06:00\"])",
        "countSeniors(details = [\"2012-05-07\", \"1999-06-25\", \"2016-04-12\"])",
        "countSeniors(details = [\"Eugenia, 39\", \"Zoraida, 40\", \"Nathalia, 12\"])",
        "countSeniors(details = [\"65 5 345\", \"45 6 232\", \"56 2 555\", \"60 1 444\"])",
        "countSeniors(details = [\"80-25620\", \"78-29620\", \"78-18246\", \"66-29620\"])",
        "countSeniors(details = [\"Mark,28\",\"Simon,30\",\"Rose,29\",\"Leo,31\",\"Alice,31\",\"Philip,27\",\"Tom,29\"])",
        "countSeniors(details = [\"69913166\", \"88888888\", \"79030001\", \"67410999\"])",
        "countSeniors(details = [\"431508\", \"326832\", \"503078\", \"367986\", \"701430\", \"407010\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 4)",
        "isFascinating(n = 8)",
        "isFascinating(n = 20)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 16)",
        "isFascinating(n = 134)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "minimumBeautifulSubstrings(s = \"beautiful\")",
        "minimumBeautifulSubstrings(s = \"zzzyz\")",
        "minimumBeautifulSubstrings(s = \"leetcodee\")",
        "minimumBeautifulSubstrings(s = \"ababba\")",
        "minimumBeautifulSubstrings(s = \"aaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
        "minimumBeautifulSubstrings(\"ccdwocqhbbn\")",
        "minimumBeautifulSubstrings(\"u3d95mh4\")"
    ],
    "sample_463": [
        "distributeCandies(n = 13, limit = 2)",
        "distributeCandies(n = 13, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 9, limit = 4)",
        "distributeCandies(n = 10, limit = 6)",
        "distributeCandies(n = 11, limit = 7)",
        "distributeCandies(n = 21, limit = 10)"
    ],
    "sample_419": [
        "minOperations(nums = [2,3,1,2,4,3], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "minOperations(nums = [5,2,4,3,1], k = 1)",
        "minOperations(nums = [1, 2, 3, 4], k = 1)",
        "minOperations(nums = [1,5,7,2,4], k = 10)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 1)",
        "minOperations(nums = [5,3,7,4,3,1,9], k = 3)",
        "minOperations(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "minOperations(nums = [1, 2, 3, 3, 4, 7, 10, 12], k = 3)",
        "minOperations(nums=[3, 4, 4, 5, 2, 6], k = 6)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [2, 3, 2])",
        "sumCounts(nums = [2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 1, 3, 4])",
        "sumCounts(nums = [1,2,2,1,2])",
        "sumCounts(nums = [2, 2, 4, 4])",
        "sumCounts(nums = [2, 5, 2])",
        "sumCounts(nums = [1, 2, 2, 2, 5, 5])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"3\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"0\",\"1\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"3\",\"4\",\"prev\",\"5\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"3\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"5\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"100\", \"prev\", \"200\", \"100\", \"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"10\", \"prev\", \"prev\", \"7\"])",
        "lastVisitedIntegers(words = [\"4\", \"3\", \"2\", \"1\", \"0\", \"1\", \"2\", \"3\", \"4\", \"3\", \"2\", \"1\", \"0\"])",
        "lastVisitedIntegers(words = [\"2\",\"4\",\"prev\",\"prev\",\"7\",\"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [2, 3, 4, 1, 2], k = 3)",
        "minOperations(nums = [1, 5, 2, 1, 4, 0], k = 5)",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], k = 3)",
        "minOperations(nums = [2, 2, 1, 1, 1, 2, 2], k = 3)",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [3,4,5], k = 4)",
        "minOperations(nums = [1,1,1,1,2,2,2,2,3,3,3,3], k = 1)",
        "minOperations(nums = [1, 4, 1, 1, 3, 5, 1, 1, 6, 2], k = 3)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aabab\")",
        "longestSemiRepetitiveSubstring(s = \"bananananana\")",
        "longestSemiRepetitiveSubstring(s = \"asdfghjkl\")",
        "longestSemiRepetitiveSubstring(s = \"axyzxyzzxxxa\")",
        "longestSemiRepetitiveSubstring(s = \"fabcabcabcabcabcabcabcabcabcabcabcd\")",
        "longestSemiRepetitiveSubstring(s = \"mzqdkjsdejdl\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [4, 4, 4, 4])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [2, 2, 2, 1])",
        "sumCounts(nums = [2, 5, 1, 2, 3, 1])",
        "sumCounts(nums = [2, 4, 5, 3])",
        "sumCounts(nums = [1, 3, 2, 2, 3, 1])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"1110\", k = 2)",
        "shortestBeautifulSubstring(s = '011', k = 1)",
        "shortestBeautifulSubstring(s = '11011', k = 2)",
        "shortestBeautifulSubstring(s = \"1111111111\", k = 2)",
        "shortestBeautifulSubstring(s = '021310', k = 2)",
        "shortestBeautifulSubstring(s = \"101011101\", k = 3)",
        "shortestBeautifulSubstring(s = '1010101010101010101', k = 4)",
        "shortestBeautifulSubstring(s = \"110111100\", k = 2)",
        "shortestBeautifulSubstring(s = \"0001011101\", k = 4)",
        "shortestBeautifulSubstring(s = \"0000111100000000110011\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(\"abc\")",
        "minimumBeautifulSubstrings(s = \"bbcb\")",
        "minimumBeautifulSubstrings(s = \"abcabcabc\")",
        "minimumBeautifulSubstrings(s = \"bbbbab\")",
        "minimumBeautifulSubstrings(s = \"bbbbbe\")",
        "minimumBeautifulSubstrings(s = \"bbbaaabaaaa\")",
        "minimumBeautifulSubstrings(s = \"abcabcab\")",
        "minimumBeautifulSubstrings(s = \"abbbbbac\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 2, y = 3, z = 5)",
        "longestString(x = 4, y = 5, z = 6)",
        "longestString(x = 3, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 1)",
        "longestString(x = 2, y = 1, z = 4)",
        "longestString(x = 5, y = 1, z = 3)",
        "longestString(x = 4, y = 5, z = 10)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]])",
        "findChampion(grid = [\n    [1, 0, 0, 0],\n    [1, 0, 0, 1],\n    [1, 1, 0, 1],\n    [0, 0, 0, 0]\n])",
        "findChampion(grid = [[0, 0, 1, 1], [0, 0, 0, 1], [1, 1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 1], [1, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0,0,1,0], [0,1,1,0], [0,0,1,0], [1,1,1,0]])",
        "findChampion(grid = [[0,0,0,0,0],\n[1,1,1,1,0],\n[0,0,0,0,0],\n[0,1,1,1,1],\n[1,0,0,0,0]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"leetcode\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"dvv\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiooaauu\", k = 3)",
        "beautifulSubstrings(s = \"aabcd\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaouoee\", k = 3)",
        "beautifulSubstrings(s = \"beautifulsunrise\", k = 4)",
        "beautifulSubstrings(s = \"aaabaca\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioooauuuaaaaaaaaaaaaaaaaaaaaeeeeeeeiiiiiiiiii\", k = 1)",
        "beautifulSubstrings(s = \"UuuUUuuUuuU\", k = 3)"
    ],
    "sample_304": [
        "countSeniors(details = [\"1366264200\",\"1234567890\"])",
        "countSeniors(details = [\"999010122\",\"1000020240\",\"1000030360\"])",
        "countSeniors(details = [\"2016-04-11 05:05:05.000000001\", \"2016-04-11 05:05:05.000000001\", \"2016-04-11 05:05:05.000000002\"])",
        "countSeniors(details = [\"004323456\", \"000543895\", \"000543895\", \"000543895\"])",
        "countSeniors(details = [\"Jenny20\", \"Jacob23\", \"Jenny63\", \"Sam99\"])",
        "countSeniors(details = [\"1976-12-02\", \"1980-01-12\", \"1910-12-22\", \"1996-03-05\", \"1956-12-15\"])",
        "countSeniors(details = [\"3521921012075\", \"3521921012076\", \"3521921012089\", \"3521921012115\", \"3521921012119\"])",
        "countSeniors(details = [\"000113647\", \"000144653\", \"000219966\", \"000338886\"])",
        "countSeniors(details = [\"Dhruv123\", \"Naveen24\", \"Karan33\", \"Dhruv61\", \"Akshay79\", \"Praveen88\", \"Raghu99\"])",
        "countSeniors(details = [\n    \"Otho: 220: Male: Blue\",\n    \"Paul: 314: Male: Green\",\n    \"Hope: 18: Female: Yellow\",\n    \"Olivia: 61: Female: Blue\",\n    \"Gus: 150: Male: Red\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [2, 4, 7, 1, 5, 3])",
        "maximumTripletValue(nums = [2, 4, 7, 1, 5, 3])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [4, 2, 3, 1, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [4, 3, 1, 0])",
        "maximumTripletValue(nums = [3, 5, 1, 0, 5, 2])",
        "maximumTripletValue(nums = [6, 2, 4, 1, 6, 7, 4, 1, 7, 2, 4])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(s = \"beautiful\")",
        "minimumBeautifulSubstrings(s = \"zzzy\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(s = \"abcd\")",
        "minimumBeautifulSubstrings(s = \"bbbaaabb\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(s = \"bbbbbeeee\")",
        "minimumBeautifulSubstrings(s = \"7877377266\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [3, 4, -1, 5, -2])",
        "maxSubarrays([0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "maxSubarrays([0, 0, 0, 0, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [2, 1, 5, 1, 3, 1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 1, 1, 1, 0, 0, 0, 1])",
        "maxSubarrays(nums = [1, 3, 5, 2, 6, 4, 3])",
        "maxSubarrays([5, -1, 3, 5, -1, 3, 5])",
        "maxSubarrays([1,1,2,3,4,4,4,4])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 1, 1], b = [2, 2, 2])",
        "minOperations(a = [0, 1, 0], b = [1, 1, 1])",
        "minOperations(a = [1, 2, 3], b = [5, 6, 7])",
        "minOperations(a = [1,2,3,4,5], b = [1,3,5,7,9])",
        "minOperations(a = [3, 5, 2, 1], b = [4, 3, 2, 1])",
        "minOperations(a = [2, 2, 1], b = [2, 2, 1])",
        "minOperations(a = [1, 1, 2], b = [2, 1, 1])",
        "minOperations(a = [1, 4, 3, 2], b = [4, 1, 3, 2])",
        "minOperations(a = [1, 0, 0, 1, 0, 0, 1], b = [1, 1, 1, 1, 0, 0, 1])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"ba\", \"bca\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"a\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"ant\", \"act\", \"tack\", \"tran\", \"tact\", \"tack\"])",
        "minimizeConcatenatedLength(words = [\"code\",\"abc\",\"ade\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"tag\", \"yak\", \"tig\"])",
        "minimizeConcatenatedLength([\"ax\", \"bz\", \"zz\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"abb\", \"bbc\", \"abca\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"g\", \"c\", \"k\", \"y\", \"a\"])",
        "minimizeConcatenatedLength(words = [\"code\", \"coded\", \"codec\", \"cat\", \"codecat\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bcd\", \"d\", \"ab\", \"bcd\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = 'lymph')",
        "sortVowels(s = \"lypmh\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lmhYp\")",
        "sortVowels(s = \"LyMPh\")",
        "sortVowels(s = 'lmYpH')",
        "sortVowels(s = \"YmlpuH\")",
        "sortVowels(s = \"GpYRmc\")"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 1, 1, 1])",
        "sumCounts(nums = [0, 1, 0, 1, 1])",
        "sumCounts(nums = [1, 3, 2, 1])",
        "sumCounts(nums = [1, 2, 3, 4, 1, 2, 5])",
        "sumCounts(nums = [1, 3, 3])",
        "sumCounts(nums = [1, 2, 1, 3, 2])",
        "sumCounts(nums = [1, 2, 1, 1, 3])"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 1, 1, 1, 1])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum([4, 2, 3, 1, 1, 2])",
        "minimumSum(nums = [1, 5, 11, 5])",
        "minimumSum(nums = [1, 1, 1, 3, 1, 1, 1])",
        "minimumSum(nums = [3, 5, 2, 1, 3])",
        "minimumSum(nums = [2,5,1,3,4,5])",
        "minimumSum(nums = [10, 3, 9, 6, 3, 8, 7, 1, 10])",
        "minimumSum(nums = [3, 5, -1, -5, 7, -4, 9, 0, 4])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[1,0,0], [0,1,0], [1,1,1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[0,0,0,0],[0,0,1,0],[0,0,0,1],[1,0,0,0]])",
        "findChampion(grid = [[0,1,0,1,1,0,1],[1,1,0,1,0,1,1],[1,1,1,0,1,1,0],[0,1,1,0,1,1,0],[1,1,1,1,0,0,1],[0,1,0,1,0,1,0]])"
    ],
    "sample_372": [
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"PyThOn\")",
        "sortVowels(s = \"codewars\")",
        "sortVowels(s = \"vowels\")",
        "sortVowels(s = \"AlexiOtcent\")",
        "sortVowels(s = \"Origami\")",
        "sortVowels(s = \"ddeLeeoOc\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"11010\")",
        "minimumSteps(s = \"110110\")",
        "minimumSteps(\"1010\")",
        "minimumSteps(\"1011\")",
        "minimumSteps(s = \"010101010101\")",
        "minimumSteps(s = \"000110\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 4, 3, 1, 2])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4, 1, 3, 5, 2])",
        "minimumRightShifts(nums = [6, 5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 3])",
        "minimumRightShifts(nums = [2, 3, 1, 0, 5])",
        "minimumRightShifts(nums = [1,3,4,2,4,6])",
        "minimumRightShifts(nums = [5,1,1])",
        "minimumRightShifts(nums = [2, 5, 4, 7, 6, 9, 10, 4, 12, 3, 8, 2])"
    ],
    "sample_425": [
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations([3, 3, 3])",
        "minOperations(nums = [3, 1, 1, 2, 1])",
        "minOperations(nums = [3, 2, 1, 2, 3])",
        "minOperations(nums = [2, 2, 3, 5])",
        "minOperations(nums = [5, 4, 2])",
        "minOperations(nums = [4, 2, 1, 3, 2, 2, 4])",
        "minOperations(nums = [4, 1, 1, 4, 3, 2])",
        "minOperations(nums = [3,3,3,2,3,3,2,2,2,1,1,3,1,1,1,1])",
        "minOperations([3, 4, 4, 2, 4, 4, 4, 5, 3, 3, 3, 4, 4])"
    ],
    "sample_367": [
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'lymph')",
        "sortVowels(s = 'lymph')",
        "sortVowels(\"YmlpH\")",
        "sortVowels(s = \"Python\")",
        "sortVowels(\"yUlmP\")",
        "sortVowels(s = \"DziYuh\")",
        "sortVowels(s = \"YmcaiLpmr\")"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0], [0, 0]])",
        "findChampion(grid = [[0, 1], [0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1], [1, 1]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1]])",
        "findChampion([[1,1,1],[1,0,1],[1,1,0]])",
        "findChampion(grid = [[1, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [1, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1, 0], [0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [0, 1, 1, 1], nums2 = [1, 1, 1, 0])",
        "minSum(nums1 = [4], nums2 = [5, 1, 2, 7])",
        "minSum(nums1 = [2, 3, 4, 5], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 3, 5, 7, 10], nums2 = [1, 3, 5, 7, 9])",
        "minSum(nums1 = [2, 3, 4, 5, 6, 8], nums2 = [4, 5, 6, 10])",
        "minSum(nums1 = [1, 4, 5, 7, 10], nums2 = [5, 1, 4, 2, 1])",
        "minSum(nums1 = [10, 6, 11, 5], nums2 = [4, 8, 12, 7])"
    ],
    "sample_422": [
        "minOperations(nums = [4, 3, 1, 1, 9], k = 7)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [5, 3, 7, 7, 2], k = 3)",
        "minOperations(nums = [2, 3, 1, 1, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 8)",
        "minOperations(nums = [5,3,4,6,3,4], k = 3)",
        "minOperations(nums = [1,1,2,2,2,2,5], k = 2)",
        "minOperations(nums = [1, 1, 2, 2, 3, 2, 4, 3], k = 2)",
        "minOperations(nums = [4, 3, 1, 1, 9, 9, 4, 9, 2, 1, 3, 1, 6, 5, 8, 8, 1, 9, 6, 6, 2, 4, 5, 9, 3], k = 9)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [2, 1, 3], moveFrom = [1, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [1, 3, 5])",
        "relocateMarbles(nums = [3, 3, 2, 4, 2], moveFrom = [2, 4], moveTo = [3, 2])",
        "relocateMarbles(nums = [4, 3, 2, 1, 2], moveFrom = [1, 2], moveTo = [2, 2])",
        "relocateMarbles(nums = [1, 3, 5, 2], moveFrom = [1, 3], moveTo = [4, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7], moveFrom = [1, 2, 3, 4, 5], moveTo = [6, 7, 5, 4, 3])",
        "relocateMarbles(nums = [2, 3, 4, 5], moveFrom = [2, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [3,1,1,3,2], moveFrom = [0,2,4], moveTo = [1,3,2])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8], m = 3, k = 3)",
        "maxSum(nums = [3,4,9,6,5], m = 2, k = 3)",
        "maxSum(nums = [2, 4, 6, 2, 5], m = 2, k = 2)",
        "maxSum(nums = [2, 3, 4, 1], m = 2, k = 3)",
        "maxSum(nums = [2,4,4,6,2,3], m = 3, k = 2)",
        "maxSum(nums = [4, 2, 1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1], m = 2, k = 3)",
        "maxSum(nums = [4, 2, 5, 4, 3, 3, 9, 9], m = 2, k = 3)",
        "maxSum(nums = [7, 2, 4, 8, 9, 8], m = 2, k = 4)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"axc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"axc\", s2 = \"ahbgdc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"azbca\")",
        "canMakeSubsequence(s1=\"abc\", s2=\"bac\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"da\")",
        "canMakeSubsequence(s1=\"bdza\", s2=\"abcdza\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"axczcz\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"bdfz\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0,1,2], nums2 = [0,0,1])",
        "minSum(nums1 = [4, 4, 4, 4, 4], nums2 = [4, 4, 4, 4])",
        "minSum(nums1 = [3, 1, 6], nums2 = [2, 7, 4])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1,2], nums2 = [0, 0])",
        "minSum(nums1 = [0, 1, 2, 3], nums2 = [0, 1, 2])",
        "minSum(nums1 = [4, 3, 10, 2], nums2 = [4, 3, 10, 2])",
        "minSum(nums1 = [7, 5, 2, 3, 8], nums2 = [7, 5, 2, 3, 8])",
        "minSum(nums1 = [4, 3, 6, 5], nums2 = [3, 9, 7, 3, 1])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"prev\",\"2\"])",
        "lastVisitedIntegers([\"0\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = ['2', 'prev', '3', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"prev\",\"1\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"2\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"prev\",\"2\",\"1\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"1\", \"2\", \"3\", \"4\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6])",
        "isGood(nums = [0, 3, 2, 2, 1])"
    ],
    "sample_424": [
        "minOperations(nums = [3,3,3,3,8])",
        "minOperations(nums = [1,1,1,1,1,1])",
        "minOperations(nums = [3,2,2,1])",
        "minOperations(nums = [2,2,3,4,5])",
        "minOperations(nums = [3,1,5,4,2])",
        "minOperations(nums = [2,2,2,3,3,3,3,4,4,4,4,4,4,4,4])",
        "minOperations(nums = [4,3,3,1,4,4])",
        "minOperations(nums = [1,4,1,2,3,2])",
        "minOperations(nums = [1, 1, 4, 5, 8])",
        "minOperations(nums = [9, 8, 5, 8, 3, 1, 1])"
    ],
    "sample_451": [
        "minChanges(s = \"abcd\")",
        "minChanges(\"aabbbc\")",
        "minChanges(s = \"12112\")",
        "minChanges(s = \"cabcd\")",
        "minChanges(s = \"223322\")",
        "minChanges(\"222212\")",
        "minChanges(s = \"111221213\")",
        "minChanges(s = \"9545\")",
        "minChanges(s = \"bacabacacaba\")",
        "minChanges(s = \"bbaacdeeg\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 15, limit = 5)",
        "distributeCandies(n = 20, limit = 2)",
        "distributeCandies(n = 12, limit = 5)",
        "distributeCandies(n = 8, limit = 4)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [0, 0], nums2 = [0, 0])",
        "minSum(nums1 = [3,1], nums2 = [4,1])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [10,20,30,40,50])",
        "minSum(nums1 = [1, 1], nums2 = [3, 3, 3])",
        "minSum(nums1 = [2, 3, 1], nums2 = [0, 0, 4])",
        "minSum(nums1 = [5,2,3,2], nums2 = [1,3,1,3])",
        "minSum(nums1 = [3,4,1,5], nums2 = [1,2,1,5])",
        "minSum(nums1 = [4, 8, 10, 12, 16], nums2 = [5, 8, 12, 14, 17])",
        "minSum(nums1 = [7,2,8], nums2 = [9,2,3,8])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4, 1, 2, 3])",
        "minimumRightShifts(nums = [3, 1, 2, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [4, 1, 1, 3])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])",
        "minimumRightShifts(nums = [1, 1, 1, 1, 1])",
        "minimumRightShifts(nums = [4, 3, 1, 2, 0, 1, 3])",
        "minimumRightShifts(nums = [3, 5, 3, 2, 1, 2, 3, 4])"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1,2,3,4], t = 3)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], t = 8)",
        "countPairs(nums = [1,3,5,7,9], t = 10)",
        "countPairs(nums = [1, 1, 2, 2, 3], t = 5)",
        "countPairs(nums = [3, 5, -1, 8, 10], t = 7)",
        "countPairs(nums=[1,5,3,4,7], t=9)",
        "countPairs(nums = [2,1,1,2], t = 3)",
        "countPairs(nums = [3, 1, 4, 1, 5], t = 7)",
        "countPairs(nums = [1,1,3,2,4,3], t = 5)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p0\", \"p2\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p2\", \"p3\", \"p4\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p2\", \"p3\", \"p4\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"p4\", \"p5\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"p0\", \"p2\"])",
        "lastVisitedIntegers(words = [\"p5\",\"p4\",\"p3\",\"p2\",\"p1\",\"p0\"])",
        "lastVisitedIntegers(words = [\"w\", \"p\", \"r\", \"r\", \"p\", \"p\", \"w\"])",
        "lastVisitedIntegers(words = ['push', 'push', 'pop'])",
        "lastVisitedIntegers(words = [\"z\", \"4\", \"p\", \"0\"])",
        "lastVisitedIntegers(words = [\"2\", \"2\", \"1\", \"p\", \"p\", \"p\", \"1\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cba\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"zzaba\")",
        "canMakeSubsequence(str1 = \"aab\", str2 = \"bcc\")",
        "canMakeSubsequence(str1 = \"baz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"yzy\")",
        "canMakeSubsequence(str1 = \"bbaabb\", str2 = \"bab\")"
    ],
    "sample_268": [
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [0, 1, 1, 0], nums2 = [0, 1, 1, 0])",
        "minSum(nums1 = [4, 1, 1, 2], nums2 = [3, 5, 1, 1])",
        "minSum(nums1 = [0,0,0,0], nums2 = [1,0,0,0])",
        "minSum(nums1 = [2, 4, 5, 8], nums2 = [1, 2, 3, 5])",
        "minSum(nums1 = [2, 3, 0, 2], nums2 = [3, 1, 3, 3])",
        "minSum(nums1 = [1,3,5], nums2 = [6,5,3,2])",
        "minSum(nums1 = [10, 4, 1, 2], nums2 = [6, 2, 3, 5])",
        "minSum(nums1 = [5, 2, 2, 1, 4], nums2 = [4, 0, 1, 3, 1, 3])",
        "minSum(nums1 = [6, 2, 1, 7, 3, 5, 4, 5, 2, 8], nums2 = [7, 3, 5, 4, 2, 8, 6, 3, 5, 1, 7, 3, 5, 4, 5, 2, 8])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 5)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2], [2, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 1]], k = 0)",
        "countPairs(coordinates = [[1, 1], [1, 1], [1, 1], [1, 1], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 2], [2, 1]], k = 0)",
        "countPairs(coordinates = [[0,0],[1,0],[2,1],[0,2],[1,2]], k = 2)",
        "countPairs(coordinates = [[1, 1], [4, 2], [3, 2], [2, 3], [5, 3]], k = 3)",
        "countPairs(coordinates = [[0,0],[0,2],[1,1],[2,0]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [2, 3], [4, 5], [1, 3]], k = 2)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"dog\", \"god\", \"rad\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\", \"abcd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"efg\", \"aba\", \"efg\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"f\", \"h\", \"if\", \"ih\"])",
        "maximumNumberOfStringPairs([\"are\", \"you\", \"happy\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"bb\", \"bbbb\", \"c\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"bc\",\"cab\",\"abcabc\",\"bcabc\"])",
        "maximumNumberOfStringPairs([\"abc\",\"mnop\",\"xy\",\"m\"])",
        "maximumNumberOfStringPairs(words = [\"cd\",\"xy\",\"y\",\"x\",\"ab\",\"abc\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, -2, 3, -4, 5])",
        "maxStrength(nums = [2, -1, 2, 2, -1, 2, 2])",
        "maxStrength(nums = [-10, -10])",
        "maxStrength(nums = [2, -1, 2, 2, 2, 2])",
        "maxStrength(nums = [1,-2,3,-4,-5])",
        "maxStrength([-1, -2, -3, -4, -5, -6])",
        "maxStrength(nums = [-4, -4, -4, -4, -4, 4])",
        "maxStrength(nums = [2, -3, -1, 2, -2, 1, 3])",
        "maxStrength([4, -1, 3, 2, -1, 1, -2])",
        "maxStrength(nums = [-2, 0, 3, -1, 2, 0, 5, 3, -5])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [3, 1, 4, 1, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 15, 20])",
        "minimumCoins(prices = [1,2,3,4,5,6])",
        "minimumCoins(prices = [2, 5, 10, 1])",
        "minimumCoins(prices = [2, 5, 10, 12, 4])",
        "minimumCoins(prices = [4, 3, 2, 5, 2, 1, 1, 2])",
        "minimumCoins(prices = [5, 3, 7, 2, 1, 3, 2, 1, 2, 4])",
        "minimumCoins(prices = [5, 2, 3, 5, 1, 100, 30])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 2])",
        "minLengthAfterRemovals(nums = [3,4,4,2,5])",
        "minLengthAfterRemovals(nums = [3,3,3,2,3])",
        "minLengthAfterRemovals(nums = [7, 7, 7, 7, 7, 71, 7, 7, 7, 7])",
        "minLengthAfterRemovals(nums = [1,1,1,1,2,1])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [4,3,2,3,4,2,2,2,2])",
        "minLengthAfterRemovals(nums = [7, 7, 1, 7, 7, 7, 7])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [2, 4, 5], money = 6)",
        "buyChoco(prices = [2, 3, 5], money = 5)",
        "buyChoco(prices = [1, 2, 3, 1], money = 6)",
        "buyChoco(prices = [1, 2, 4, 2], money = 5)",
        "buyChoco(prices = [4, 1, 2, 3], money = 6)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9], money = 10)",
        "buyChoco(prices = [3,4,1,2], money = 3)",
        "buyChoco(prices = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2], money = 8)",
        "buyChoco(prices = [4, 1, 1, 5, 5, 2], money = 6)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"2\",\"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"2\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"2\",\"1\",\"prev\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers(words = [\"4\", \"3\", \"2\", \"1\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers([\"prev\", \"123\", \"next\", \"prev\", \"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1,2,3,4])",
        "sumCounts(nums = [1, 2, 3, 3, 4])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 2, 1, 1, 3])",
        "sumCounts(nums = [0, 1, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 3, 4, 3, 2, 1])",
        "sumCounts(nums = [1,2,3,4,5,1])",
        "sumCounts([1, 2, 3, 1, 2, 3])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 4], moveTo = [1, 3])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6, 8, 9], moveTo = [5, 6, 8, 9])",
        "relocateMarbles(nums = [2, 4, 6, 8, 10], moveFrom = [1, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [3, 4, 5, 6, 7], moveFrom = [1, 3, 5], moveTo = [0, 1, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [5, 2, 8], moveTo = [3, 7, 4])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [0,3,5], moveTo = [3,5,7])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [0,4], moveTo = [1,3])",
        "relocateMarbles(nums = [9, 5, 2, 6, 7, 3, 8], moveFrom = [3, 4], moveTo = [0, 1])",
        "relocateMarbles(nums = [5, 2, 6, 3, 4, 8, 9, 10, 1, 7], moveFrom = [2, 3], moveTo = [1, 0])",
        "relocateMarbles(nums = [2, 10, 3, 1, 6, 4, 10], moveFrom = [2, 3, 3], moveTo = [3, 4, 4])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zabz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zabz\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"zxbc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ababc\")",
        "canMakeSubsequence(str1 = \"zyz\", str2 = \"zx\")",
        "canMakeSubsequence(str1 = \"raccoon\", str2 = \"can\")",
        "canMakeSubsequence(str1 = \"zbax\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"abd\", str2 = \"bcda\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"bar\",\"baz\",\"foo\",\"qux\"], x = \"a\")",
        "findWordsContaining(words = [\"app\", \"apple\", \"apricot\"], x = \"ap\")",
        "findWordsContaining(words = [\"abc\",\"a\",\"b\"], x = \"a\")",
        "findWordsContaining(words = [\"Apple\", \"Ball\", \"Cat\", \"AppleCat\"], x = \"App\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"bear\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"banana\", \"test\"], x = \"a\")",
        "findWordsContaining(words = [\"grape\", \"apple\", \"pear\", \"grapefruit\"], x = \"gra\")",
        "findWordsContaining(words = [\"yo\", \"yoo\", \"yooo\"], x = \"o\")",
        "findWordsContaining(words = [\"cat\", \"bat\", \"rat\", \"at\", \"cat\"], x = \"a\")",
        "findWordsContaining(words = [\"ice\",\"bog\",\"cub\",\"rox\"], x = \"og\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 0, 1], [0, 1, 0], [1, 1, 1]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])",
        "matrixSum([[1, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "matrixSum(nums = [[0, 1, 1], [1, 1, 0], [1, 1, 1]])",
        "matrixSum(nums = [[1,0,1], [0,1,0], [1,0,1]])",
        "matrixSum(nums = [[1, 3, 1, 4, 1], [1, 5, 1, 2, 1], [1, 1, 1, 2, 1]])",
        "matrixSum([[9, 2, 1], [5, 3, 1], [5, 7, 6]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 4)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1,2], money = 3)",
        "buyChoco(a = [1,2,3], money = 5)",
        "buyChoco(a = [2, 4], money = 6)",
        "buyChoco(a = [1, 2, 3], money = 6)",
        "buyChoco(a = [2, 1], money = 3)",
        "buyChoco(a = [1, 2, 5], money = 6)",
        "buyChoco(a = [1, 2, 5], money = 6)",
        "buyChoco(a = [0, 2], money = 3)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3, 4, 3, 3])",
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,5,5,5,2,4])",
        "minGroupsForValidAssignment(nums = [4,3,4,2,4,1,4,4])",
        "minGroupsForValidAssignment(nums = [2, 2, 1, 1, 3, 3, 4, 4])",
        "minGroupsForValidAssignment(nums = [8,4,2,2])",
        "minGroupsForValidAssignment(nums = [1,3,3,2,2,2,3,3,3,4])",
        "minGroupsForValidAssignment([4, 3, 4, 6, 2, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [15, 10, 75, 2, 45, 50, 19])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [4, 3, 1, 2])",
        "minimumRightShifts(nums = [4, 3, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 1, 2, 4])",
        "minimumRightShifts(nums = [4, 3, 1, 2])",
        "minimumRightShifts(nums = [4,2,3])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 7])",
        "minimumRightShifts(nums = [3, 5, 7, 2, 4, 6, 8])",
        "minimumRightShifts(nums = [1, 3, 4, 3, 6, 8, 9, 2])",
        "minimumRightShifts(nums = [1, 3, 4, 3, 6, 7, 9, 8, 1])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [2, 4, 7, 1, 5, 8])",
        "maxStrength([1, 2, 3, 4, 5])",
        "maxStrength(nums = [2, 4, 1, 3])",
        "maxStrength(nums = [2, 4, 8, 6])",
        "maxStrength(nums = [2, 4, 6, 8])",
        "maxStrength(nums = [2,4,7,1,1,2])",
        "maxStrength(nums = [1, 1, 1, 2, 4])",
        "maxStrength(nums = [1, 3, 1, 1, 2, 2, 1, 2, 2, 1])"
    ],
    "sample_464": [
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 2, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 3, limit = 5)",
        "distributeCandies(n = 1, limit = 1)",
        "distributeCandies(n = 15, limit = 2)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 4, 4, 5, 5, 5, 2, 10])",
        "minLengthAfterRemovals(nums = [3, 1, 4, 1, 5])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 3])",
        "minLengthAfterRemovals(nums = [5, 3, 2, 2, 7, 1])",
        "minLengthAfterRemovals(nums = [1,2,2,1])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [4, 4, 4, 3, 3])",
        "minLengthAfterRemovals(nums = [2,2,2,2,5,6,7,7,8,25])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"pleep\"], x = \"ple\")",
        "findWordsContaining(words = [\"bab\", \"bac\", \"bca\"], x = \"bac\")",
        "findWordsContaining(words = [\"ab\", \"bc\", \"bca\"], x = \"a\")",
        "findWordsContaining(words = [\"fun\", \"function\", \"tools\"], x = \"un\")",
        "findWordsContaining(words = [\"abc\",\"bca\",\"da\",\"de\"], x = \"a\")",
        "findWordsContaining(words = [\"mass\",\"as\",\"hero\",\"super\",\"m\"], x = \"as\")",
        "findWordsContaining(words = [\"banana\", \"applet\", \"pear\", \"pleasance\"], x = \"pp\")",
        "findWordsContaining(words = [\"cba\",\"da\",\"ecd\",\"efg\"], x = \"ba\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"my\", \"words\", \"are\", \"broken\"], x = \"world\")",
        "findWordsContaining(words = [\"omar\", \"aomar\"], x = \"mar\")"
    ],
    "sample_278": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 1, 1], [0, 0, 1, 1]])",
        "findChampion(grid = [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 1, 1], [0, 0, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1], [1, 0, 0, 0]])",
        "findChampion(grid = [[1,1,1,1], [0,1,0,1], [1,0,1,1]])",
        "findChampion(grid = [[1,0,0,0], [1,0,1,1], [0,1,0,1], [1,0,1,1]])",
        "findChampion(grid = [\n        [1, 0, 0, 0, 0],\n        [1, 1, 1, 1, 0],\n        [1, 0, 0, 0, 0],\n        [1, 0, 1, 1, 1],\n        [1, 1, 1, 1, 1],\n    ])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [3,1,4,1,5])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays([1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 1, 2, 0, 1])",
        "maxSubarrays([1, 3, 5, 7, 9])",
        "maxSubarrays(nums = [2, 3, 0, 0, 4])",
        "maxSubarrays(nums = [2, 3, 2, 1, 2, 2])",
        "maxSubarrays(nums = [200, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 4, 3, 2, 0, 5, 2, 7])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiooouuu\", k = 1)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 3)",
        "beautifulSubstrings(s = \"miaou\", k = 2)",
        "beautifulSubstrings(s = \"aecodesign\", k = 3)",
        "beautifulSubstrings(s = \"aeiouuoie\", k = 2)",
        "beautifulSubstrings(s = \"mzyyau\", k = 2)",
        "beautifulSubstrings(s = \"xyaeubiajb\", k = 3)",
        "beautifulSubstrings(s = \"bbaeiouaz\", k = 4)",
        "beautifulSubstrings(s = \"msihxui\", k = 3)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [3, 2, 1, 2, 7])",
        "minimumSeconds(nums = [3, 2, 1, 2, 7])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [4, 2, 5, 1, 3])",
        "minimumSeconds(nums = [900, 900, 900])",
        "minimumSeconds(nums = [999,999,999,1,8,8,5,5,5,5])",
        "minimumSeconds(nums = [91, 92, 93, 94])",
        "minimumSeconds(nums = [1, 2, 2, 3, 4, 1, 4])",
        "minimumSeconds(nums = [64, 64, 12, 12, 24, 24, 64, 64, 64])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 145)",
        "isFascinating(n = 5)",
        "isFascinating(n = 143)",
        "isFascinating(n = 16)",
        "isFascinating(123)",
        "isFascinating(n = 583)",
        "isFascinating(n = 90)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 0, -1, 0, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [2,4,6,8,10], target = 16)",
        "lengthOfLongestSubsequence(nums = [4, 5, 2, 1, 3, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [4, 1, 4, 2], target = 6)",
        "lengthOfLongestSubsequence(nums = [2, 4, 4, 4, 6, 8, 10], target = 10)",
        "lengthOfLongestSubsequence(nums = [5, 4, 7, 10, 3, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [2,2,4,4,4,5,5,5,5,7,7], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 1, 0, 3, 2, 1, 3, 0], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 1, 1, 3, 4, 1, 3, 2, 5, 6, 7], target = 1)",
        "lengthOfLongestSubsequence(nums = [8, 3, 1, 1, 1, 3, 2, 2, 3, 3, 2, 2, 2, 2, 4, 2, 3, 4, 4, 2], target = 2)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 3, 5], [2, 4, 6]])",
        "matrixSum(nums = [[1, 3, 5], [2, 4, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1,2,3],[1,2,3],[1,2,3]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])",
        "matrixSum(nums = [[1], [3], [5]])",
        "matrixSum(nums = [[1,2],[0,3]])",
        "matrixSum(nums = [[5, 1, 5], [2, 4, 6]])",
        "matrixSum(nums = [[1, 3], [2, 4], [3, 1]])",
        "matrixSum(nums = [[-1, -5, -11], [-1, -1, -1]])"
    ],
    "sample_326": [
        "isFascinating(n = 145)",
        "isFascinating(n = 145)",
        "isFascinating(n = 1458)",
        "isFascinating(n = 1458)",
        "isFascinating(n = 1453)",
        "isFascinating(n = 3797)",
        "isFascinating(n = 1000)",
        "isFascinating(n = 106)",
        "isFascinating(345)",
        "isFascinating(n = 312)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 1, 1], [1, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [1, 0, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[1,1,0,1],[1,1,1,1],[0,1,1,1],[1,0,1,1]])",
        "findChampion(grid = [[2, 1, 0], [1, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1,1,1,1],[0,0,1,0],[0,0,1,0],[1,1,0,1]])",
        "findChampion(grid = [[1,1,0,1,1],[1,0,1,1,0],[0,0,1,0,0],[1,0,1,1,0],[1,0,0,1,1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [3, 1, 2, 4])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum([3, 1, 2, 4, 3])",
        "minimumSum([3, 1, 2, 4, 3])",
        "minimumSum(nums = [3, 5, 2, 6, 4, 3])",
        "minimumSum(nums = [9,8,8,1])",
        "minimumSum([1, 4, 5, 2, 7])",
        "minimumSum(nums = [9, 12, 11, 13, 14, 15, 16])",
        "minimumSum(nums = [10, 3, 7, 1, 12, 9, 12])",
        "minimumSum(nums = [1, 5, 8, 4, 9, 3, 4, 5, 8, 9])"
    ],
    "sample_450": [
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabcc\")",
        "minChanges(s = \"aabcc\")",
        "minChanges(s = \"bb\")",
        "minChanges(s = \"aabac\")",
        "minChanges(s = \"bbaabb\")",
        "minChanges(s = \"000111000\")",
        "minChanges(s = \"12332\")",
        "minChanges(s = \"aabbcbbdde\")",
        "minChanges(s = \"aabbbaaaabaabbbaa\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"101\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"110\", x = 1)",
        "minOperations(s1 = \"010\", s2 = \"001\", x = 2)",
        "minOperations(s1 = \"100\", s2 = \"011\", x = 2)",
        "minOperations(s1 = \"1011\", s2 = \"1101\", x = 2)",
        "minOperations(s1 = \"ab\", s2 = \"ba\", x = 1)",
        "minOperations(s1 = \"00\", s2 = \"00\", x = 1)",
        "minOperations(s1 = \"111\", s2 = \"010\", x = 2)",
        "minOperations(s1 = \"10\", s2 = \"1\", x = 2)",
        "minOperations(s1 = \"0111\", s2 = \"1011\", x = 4)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 1, z = 10)",
        "longestString(x = 1, y = 1, z = 10)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 1, y = 1, z = 12)",
        "longestString(x = 1, y = 2, z = 4)",
        "longestString(x = 3, y = 2, z = 5)",
        "longestString(x = 1, y = 5, z = 8)",
        "longestString(x = 2, y = 4, z = 12)",
        "longestString(x = 6, y = 8, z = 6)",
        "longestString(x = 6, y = 8, z = 7)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [2, -1, 0, 3, 2])",
        "maxSubarrays(nums = [0,0,0,1])",
        "maxSubarrays(nums = [2, 0, 0, 2, 2])",
        "maxSubarrays([-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "maxSubarrays(nums = [0, 1, 0, 0, 1, 1, 1, 1])",
        "maxSubarrays(nums = [2, -1, 2, 3, 4, -1, 2, 3])",
        "maxSubarrays(nums = [0, 0, 0, 1, 1, 0, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 3, 5, -2])",
        "maxSubarrays(nums = [2, 5, 4, 3, 7, 1, 2, 3])"
    ],
    "sample_306": [
        "countSeniors(details = [\"1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1",
        "countSeniors(details = [\"710-555-1212\", \"710-555-3535\", \"710-555-6666\"])",
        "countSeniors(details = [\"name:Emma, age:79\", \"name:John, age:60\", \"name:Emma, age:65\"])",
        "countSeniors(details = [\"Joe 65\", \"Alice 45\", \"Jack 79\"])",
        "countSeniors(details = [\"P0001011234I101\",\"P0002011234I202\",\"P0003011234I303\",\"P0004011234I404\",\"P0005011234I505\"])",
        "countSeniors(details = [\"name:gil,age:12\",\"name:josh,age:62\",\"name:ash,age:55\"])",
        "countSeniors(details = [\"022-11-03 50\", \"037-09-08 63\", \"042-12-11 64\", \"093-09-12 32\", \"093-09-12 60\"])",
        "countSeniors(details = [\"Boston College 58 168 4.3\", \"Drexel University 54 167 3.8\", \"Boston College 65 177 4.3\", \"Boston University 65 197 4.0\"])",
        "countSeniors(details = [\"Mandarina Wannabe 1943\", \"Anna Neamtica 1975\", \"Maria Antonia Neamtica 1961\", \"Kronika of Korin 1450\"])",
        "countSeniors(details = [\"sjid 6311 122 91\", \"njj 3967 182 72\", \"ojsj 4153 121 51\", \"jsj 2458 142 11\", \"sjid 1458 152 81\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1])",
        "maxSubarrays([0, 0, 0, 1, 0])",
        "maxSubarrays(nums = [1, 3, 5, 1, 4, 7])",
        "maxSubarrays([1, 0, 1, 0, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1, 0, 0, 0, 1])",
        "maxSubarrays(nums = [2, 1, 3, 0, 2])",
        "maxSubarrays(nums = [2, 5, 3, 6, 8, 2])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [1,3,5,7], moveTo = [3,5,7,9])",
        "relocateMarbles(nums = [5,6,8,9], moveFrom = [8,9], moveTo = [5,6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [3, 6, 1])",
        "relocateMarbles(nums = [3, 4, 5, 6, 7, 8, 9], moveFrom = [3, 4, 5], moveTo = [2, 1, 0])",
        "relocateMarbles(nums = [4, 3, 1, 2, 5], moveFrom = [0, 1], moveTo = [1, 0])",
        "relocateMarbles(nums = [5, 1, 6, 7, 8, 9], moveFrom = [2, 4], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5, 8], moveTo = [0, 1, 2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5, 7, 9], moveTo = [3, 6, 8, 9])",
        "relocateMarbles(nums = [9, 8, 6, 5, 4, 3, 2, 1], moveFrom = [1, 2, 3, 4], moveTo = [2, 4, 5, 8])",
        "relocateMarbles(nums = [4, 6, 3, 1, 9, 2], moveFrom = [1, 4, 5], moveTo = [1, 2, 4])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"abb\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bab\", s3 = \"bbb\")",
        "findMinimumOperations(s1 = \"ABC\", s2 = \"BAC\", s3 = \"CAB\")",
        "findMinimumOperations(s1=\"aaa\", s2=\"aa\", s3=\"aaa\")",
        "findMinimumOperations(s1 = \"ece\", s2 = \"ece\", s3 = \"ec\")",
        "findMinimumOperations(s1 = \"he\", s2 = \"she\", s3 = \"she\")",
        "findMinimumOperations(s1=\"1000\", s2=\"1000\", s3=\"1000\")",
        "findMinimumOperations(s1=\"bcbcbc\", s2=\"cccccc\", s3=\"cccccc\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [4,4,4,2,4,4])",
        "minLengthAfterRemovals(nums = [3,2,2,1])",
        "minLengthAfterRemovals(nums = [3,3,3,3])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 4, 5])",
        "minLengthAfterRemovals(nums = [1,1,2,3,4])",
        "minLengthAfterRemovals(nums = [3,2,3,4,4,5])",
        "minLengthAfterRemovals(nums = [3,3,3,3,2,2,2,2,1,1])",
        "minLengthAfterRemovals(nums = [2, 4, 1, 3, 2, 1, 2])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [2, 5, 100], [3, 4, 100]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 10], [1, 2, 20], [2, 3, 30]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 4], [2, 3, 1], [3, 1, 100]])",
        "maximizeTheProfit(n = 4, offers = [[3, 1, 1], [1, 2, 3]])",
        "maximizeTheProfit(n = 6, offers = [[2, 5, 10], [3, 4, 11], [3, 1, 12], [1, 2, 13], [3, 2, 9]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 1], [5, 2, 100], [4, 3, 75], [1, 3, 75], [2, 5, 150]])",
        "maximizeTheProfit(n = 2, offers = [[2, 1, 10], [1, 2, 10], [1, 3, 20]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [5, 1, 2], [3, 4, 100]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 1], [1, 6, 5], [5, 6, 3]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 3], [2, 0, 2], [0, 3, 0], [3, 4, 1]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 23)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 23)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 7)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 7)",
        "canSplitArray(nums = [1,4,3,2], m = 4)",
        "canSplitArray(nums = [1,4,2,3,1,3], m = 2)",
        "canSplitArray(nums = [3,3,2,2,1,1], m = 6)",
        "canSplitArray(nums = [2,6,5,10,11], m = 9)",
        "canSplitArray(nums = [7, 100, 10, 100], m = 14)",
        "canSplitArray(nums = [2,5,7,9,5], m = 15)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 1, 1, 1], k = 2)",
        "checkArray(nums = [4, 2, 1, 3], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 2, 2], k = 2)",
        "checkArray(nums = [0, 2, 1, 2], k = 1)",
        "checkArray(nums = [0, 1, 0, 0, 1], k = 3)",
        "checkArray(nums = [2,1,4,3,2,3], k = 2)",
        "checkArray(nums = [1, 3, 5, 8, 10], k = 4)",
        "checkArray(nums = [4, 1, 1, 1, 1, 2, 3], k = 5)",
        "checkArray(nums = [1,1,2,2,2,2,2,2,2,3,3,4,5,6], k = 2)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 4, 5, 7], k = 0)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3, 6, 7], k = 5)",
        "maximumBeauty(nums = [1, 1, 1, 1], k = 1)",
        "maximumBeauty(nums = [2, 1, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1,7,10,10,13,15,20,24,26,29,32], k = 5)",
        "maximumBeauty(nums = [1,2,2,4,4,5,5], k = 2)",
        "maximumBeauty(nums = [5, 2, 4, 3, 5, 2, 4, 3, 5, 2, 4, 3], k = 2)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"hello world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"foo\", \"bar\", \"baz\", \"qux\"], separator = \"abc\")",
        "splitWordsBySeparator(words = [\"a\", \"be\", \"cat\", \"dog\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"fun\", \"is\", \"cool\"], separator = \"u\")",
        "splitWordsBySeparator(words = [\"one_fish\", \"two_fish\", \"red fish\", \"blue fish\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"apricot\", \"kiwi\", \"strawberry\"], separator = \"ap\")",
        "splitWordsBySeparator(words = [\"-a-b-c-\", \"---a-----b-----c----\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"mango\", \"grapes\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"muddle\", \"sat\", \"bun\"], separator = \"u\")",
        "splitWordsBySeparator(words = [\"orange juice\", \"cookies\", \"pineapple\", \"chocolate muffin\", \"ice cream\"], separator = \" \")"
    ],
    "sample_226": [
        "countWays(nums = [2, 2, 3, 3, 3, 4])",
        "countWays(nums = [2, 2, 3, 3, 3, 4])",
        "countWays(nums = [1,1,3,3,5,5,7,7])",
        "countWays(nums = [1, 2, 3, 3])",
        "countWays(nums = [2, 2, 3, 3])",
        "countWays(nums = [2, 1, 2, 1, 1])",
        "countWays(nums = [1, 4, 4, 4, 7])",
        "countWays(nums = [2, 3, 5, 4, 6])",
        "countWays(nums = [4,1,1,2])",
        "countWays(nums = [5, 1, 5, 2, 5, 2, 2, 5])"
    ],
    "sample_122": [
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4,4,3,3,4,4])",
        "minimumIndex(nums = [1,1,1,1,1])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [0, 0, 0])",
        "minimumIndex(nums = [4, 4, 4, 3, 4])",
        "minimumIndex([1,3,1,5])",
        "minimumIndex(nums = [3,4,4,5,5,5,10,10,10,10])",
        "minimumIndex(nums = [3, 1, 1, 2, 1, 3])",
        "minimumIndex(nums = [1,1,2,2,4,4,4,4,5,5,5,5,5,5])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]])",
        "numberOfPoints(nums = [[1,1]])",
        "numberOfPoints(nums = [[1,7],[3,4]])",
        "numberOfPoints(nums = [[1,2]])",
        "numberOfPoints(nums = [[1, 2]])",
        "numberOfPoints(nums = [[1,5],[1,2]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [3, 6], [4, 8]])",
        "numberOfPoints(nums = [[1,7],[3,5]])",
        "numberOfPoints(nums = [[3, 7], [4, 10]])",
        "numberOfPoints(nums = [[1, 1], [1, 2], [3, 4], [2, 2], [2, 3]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1,3,2])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 2, 3, 1])",
        "semiOrderedPermutation(nums = [1,3,2,5,4,6])",
        "semiOrderedPermutation(nums = [5,1,1,5])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 6, target = 11)"
    ],
    "sample_118": [
        "minimumIndex(nums = [4, 5, 6])",
        "minimumIndex(nums = [4, 5, 6])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [4, 4, 5, 6])",
        "minimumIndex(nums = [5,3,4,5])",
        "minimumIndex(nums = [1,1,2,2,3,3,4,4,4])",
        "minimumIndex([5, 7, 5, 7])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minimumIndex(nums = [5, 3, 4, 3, 4, 1, 3])",
        "minimumIndex(nums = [4, 5, 4, 5, 3, 4, 1, 2, 3, 4, 5])"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 1, k = 1)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 4], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 4]])",
        "numberOfPoints(nums = [[1,10]])",
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[1, 5], [2, 7]])",
        "numberOfPoints(nums = [[1,1],[2,2],[3,3]])",
        "numberOfPoints([[1, 2], [2, 4]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 4], [6, 7]])",
        "numberOfPoints(nums = [[2,7]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [10, 16, 2, 7, 0, 1, 9], target = 5)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [10, 16, 8, 12, 14, 25], target = 5)",
        "maximumJumps(nums = [2,1,1,4,3], target = 1)",
        "maximumJumps(nums = [3, 2, 6, 1, 4], target = 3)",
        "maximumJumps(nums = [7, 2, 4, 10, 10, 6], target = 7)",
        "maximumJumps(nums = [3,2,5,6,4,3,3,2,4,2], target = 3)",
        "maximumJumps(nums = [2, 6, 9, 8, 3, 8, 3, 1, 5, 6, 6, 9], target = 2)"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 4, k = 4)",
        "minimumSum(n = 5, k = 11)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,4,3,2], m = 3)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 11)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [3, 3, 3, 3, 3, 3], m = 8)",
        "canSplitArray(nums = [2,6,5, 10], m = 11)",
        "canSplitArray(nums = [4,6,8,20,10], m = 16)",
        "canSplitArray(nums = [2, 10, 9, 7], m = 11)",
        "canSplitArray(nums = [3,6,9,7], m = 17)",
        "canSplitArray(nums = [1, 10, 12, 4, 9], m = 5)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 5, 20]])",
        "maximizeTheProfit(n = 4, offers = [[3, 1, 2], [2, 2, 3]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 10], [2, 4, 20], [3, 5, 30]])",
        "maximizeTheProfit(n = 5, offers = [[2, 2, 5], [3, 3, 7], [5, 1, 10]])",
        "maximizeTheProfit(n = 5, offers = [[3, 1, 2], [2, 4, 2], [1, 5, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2], [1, 2, 3], [2, 3, 4]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 1], [3, 10, 2]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 10], [5, 2, 10], [4, 3, 10]])",
        "maximizeTheProfit(n = 3, offers = [[2, 1, 10], [2, 3, 20], [1, 2, 30]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 5], [1, 2, 3], [1, 3, 3], [2, 4, 4], [2, 4, 5], [3, 4, 5]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [2, 3, 1, 5], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 0, -1, 0, -2, 2], k = 2)",
        "checkArray(nums = [1, 1, 2, 1], k = 2)",
        "checkArray(nums = [2,3,4,5,6,7,8], k = 2)",
        "checkArray(nums = [2, 1, 1, 2, 4, 3], k = 3)",
        "checkArray(nums = [1, 0, 2, 1, 0, 1, 2, 1], k = 2)",
        "checkArray(nums = [5, 3, 5, 3, 4, 5], k = 3)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [3, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [3, 4, 1, 4, 5], k = 2)"
    ],
    "sample_8": [
        "colorTheArray(n = 2, queries = [[1, 1]])",
        "colorTheArray(n = 4, queries = [[0, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 1], [3, 0], [4, 0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 4, queries = [[1, 3], [2, 2], [3, 1], [0, 2], [1, 3], [2, 2], [3, 1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [0, 2], [1, 2], [1, 3], [1, 2], [2, 3], [0, 2], [1, 3]])",
        "colorTheArray(n = 7, queries = [[1,0],[2,1],[3,2],[4,3],[5,4],[6,5],[7,6],[7,5],[7,4],[7,3],[7,2],[7,1],[6,0],[5,0],[4,0],[3,0],[2,0],[1,0]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [0, 2], [0, 1], [1, 2], [1, 0], [2, 0], [2, 1], [1, 1]])",
        "colorTheArray(n = 5, queries = [[0, 0], [4, 0], [4, 1], [2, 1], [2, 0], [3, 1], [0, 0], [4, 1], [2, 1], [2, 0], [3, 1], [0, 0], [4, 0], [4, 1], [2, 1], [2, 0], [3, 1], [4, 1], [2, 1], [2, 0], [3, 1], [0, 0], [4, 0], [4, 1], [2, 1], [2, 0], [3, 1], [0, 0], [4, 1], [2, 1], [2, 0], [3, 1], [0, 0], [4, 0], [4, 1], [2, 1], [2, 0], [3, 1], [0, 0], [4, 1], [2, 1], [2, 0], [3, 1], [0, 0], [4, 1], [2, 1], [2, 0], [3, 1], [0, 0], [4, 1], [2, 1], [2, 0], [3, 1], [0, 0], [4, 1], [2, 1], [2, 0], [3, 1]])"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'abcd')",
        "smallestString(s = \"abcd\")",
        "smallestString(s = 'kddsbncb')",
        "smallestString(s = 'xyza')",
        "smallestString(\"dbbb\")",
        "smallestString(s = 'bbccdee')",
        "smallestString(s = 'nnmmmkddd')",
        "smallestString(s = 'ajdbdsdjsdkl')"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [0, 1, 0, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16], threshold = 12)",
        "longestAlternatingSubarray(nums = [2, 6, 4, 2, 4, 2, 4, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18], threshold = 15)",
        "longestAlternatingSubarray(nums = [4, 4, 4, 4, 4, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [3, 2, 4, 2, 3, 5, 3, 2], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 11, 12, 1, 3], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 3, 2, 2, 1, 2, 2, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,1,2,1,2,3,3,1,3,1], threshold = 1)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [3, 1, 4, 1, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 3, 1, 4, 2, 3, 5, 2, 3, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,1,0,0,1,1], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,2,2,5,2], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,1,0,1,1,1,1,1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0], threshold = 1)",
        "longestAlternatingSubarray(nums = [3,1,2,3,3], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 6, 3, 2, 3, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [0,1,2,2,1,0,2,3,3,1,1,0,0,2,3,3], threshold = 2)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 4])",
        "distinctDifferenceArray(nums = [4, 1, 2, 4, 1, 2])",
        "distinctDifferenceArray(nums = [3, 2, 1, 1, 4])",
        "distinctDifferenceArray(nums = [5, 1, 3, 2, 5])",
        "distinctDifferenceArray([1, 2, 3, 4, 4, 4, 4, 5])",
        "distinctDifferenceArray(nums = [0, 3, 2, 0, 3, 2, 0, 3, 2])",
        "distinctDifferenceArray([3, 4, 3, 5, 5, 5])",
        "distinctDifferenceArray([1,2,2,1,4,3,3])"
    ],
    "sample_22": [
        "minLength(s = \"AABCD\")",
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABACD\")",
        "minLength(s = \"AABBCC\")",
        "minLength(\"ABC\")",
        "minLength(s = \"ABCDD\")",
        "minLength(\"ABCDABCD\")",
        "minLength(s = \"ABCDBCA\")",
        "minLength(s = \"ABAAA\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"cba\")",
        "minimumCost(s = \"xyyx\")",
        "minimumCost(s = \"acbad\")",
        "minimumCost(s = \"AABAC\")",
        "minimumCost(s = \"bcbcc\")",
        "minimumCost(s = \"abcdefghi\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 5)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 15)",
        "canSplitArray(nums = [2,7,11,15], m = 9)",
        "canSplitArray(nums = [1, 1, 1, 2, 2, 2], m = 2)",
        "canSplitArray(nums = [1, 1, 3, 4, 4], m = 4)",
        "canSplitArray(nums = [1, 4, 10, 5, 9], m = 16)",
        "canSplitArray(nums = [3, 1, 5, 1, 2, 8], m = 9)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 1])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 0, 1])",
        "doesValidArrayExist([1, 0, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [3,2,1,3])",
        "doesValidArrayExist(derived = [1,2,3,4,2,1])",
        "doesValidArrayExist(derived = [1,0,1,0,1,1,1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [3, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3])"
    ],
    "sample_109": [
        "checkArray(nums = [1,1,1], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [10, 2, 5, 1, 8, 20], k = 7)",
        "checkArray(nums = [1,1,1], k = 1)",
        "checkArray(nums = [4,3,2,1], k = 1)",
        "checkArray(nums = [5,2,3,4,1], k = 2)",
        "checkArray(nums = [1,1,2,2,1], k = 2)",
        "checkArray(nums = [1,2,1,3,4,1], k = 3)",
        "checkArray(nums = [1,5,10,4,7,8], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4, 4, 4, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 40, 20, 30, 50, 39], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 4, 3, 2, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [36, 27, 24, 24, 30], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 2, 5, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 3, 6, 7, 4], target = 4)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,1,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 1, 4, 3, 1], k = 1)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [3,4,5,8], k = 2)",
        "maximumBeauty(nums = [1,2,3,4], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,7], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5,7], k = 1)",
        "maximumBeauty(nums = [2,1,2,3,2,2,2], k = 2)",
        "maximumBeauty(nums = [3, 8, 1, 3, 2, 7], k = 3)",
        "maximumBeauty(nums = [1, 3, 1, 3, 2, 4], k = 1)",
        "maximumBeauty(nums = [1, 4, 8, 10, 15, 16], k = 3)",
        "maximumBeauty(nums = [5, 6, 1, 7, 4, 10], k = 2)"
    ],
    "sample_205": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"0100\")",
        "minimumOperations(num = \"250525\")",
        "minimumOperations(num = \"02022\")",
        "minimumOperations(num = \"02575\")",
        "minimumOperations(num = \"011\")",
        "minimumOperations(num = \"2000000\")",
        "minimumOperations(num = \"2525252525252525\")",
        "minimumOperations(num = \"00000000000000250000000000050000000000000\")",
        "minimumOperations(num = \"1207755912\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"1001\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"125\")",
        "minimumOperations(s = \"00010\")",
        "minimumOperations(s = \"10201\")",
        "minimumOperations(s = \"00000025000000\")",
        "minimumOperations(s = \"0022000022\")",
        "minimumOperations(s = \"02510502\")",
        "minimumOperations(s = \"25025750257520752\")",
        "minimumOperations(s = \"2000100020002000300020002000200020002000200020002000\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [3, 1, 1, 3, 3, 1])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2,1,3,2,2,3,1])",
        "semiOrderedPermutation(nums = [3, 2, 3, 1])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8])",
        "semiOrderedPermutation(nums = [0, 0, 1, 1, 1])",
        "semiOrderedPermutation(nums = [2, 3, 2, 2, 3, 1])",
        "semiOrderedPermutation(nums = [3,1,1,2,2,3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 3, 3, 2, 2, 2])",
        "semiOrderedPermutation(nums = [5,4,2,7,3,1])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"RL\")",
        "furthestDistanceFromOrigin(\"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLRLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLRLLRLLR\")",
        "furthestDistanceFromOrigin(\"RLLLRLLRRL\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT CARD\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBIT CARD\")",
        "isAcronym(words = [\"dear\", \"I\", \"love\", \"you\"], s = \"DILY\")",
        "isAcronym(words = [\"deferred\", \"execution\", \"ignition\"], s = \"DEFERRED\")",
        "isAcronym(words = [\"deferred\", \"execution\", \"ignition\"], s = \"DEFERIGN\")",
        "isAcronym(words = [\"debit\", \"card\", \"transaction\"], s = \"DEBIT\")",
        "isAcronym(words = [\"dear\", \"hello\", \"love\", \"friend\"], s = \"DHLF\")",
        "isAcronym(words = [\"USA\", \"Java\", \"JVM\"], s = \"UJ\")",
        "isAcronym(words = [\"of\", \"the\", \"and\", \"a\"], s = \"OFF\")",
        "isAcronym(words = [\"hi\", \"bee\", \"yoghurt\"], s = \"hibeyoghurt\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [3,1,5,2,6], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,7], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [0,1,0,1,1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,3,1,5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [3,1,5,4,1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [4,3,2,3,4], modulo = 5, k = 4)",
        "countInterestingSubarrays(nums = [1,0,1,0,1,0,1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 4, 2, 5, 7, 2], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [0,0,1,1,1,0,1,0], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [22, 22, 11, 11], modulo = 3, k = 0)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [12, 34, 25, 13, 40])",
        "countBeautifulPairs(nums = [2,4,6,8])",
        "countBeautifulPairs(nums = [12, 34, 25, 10, 18])",
        "countBeautifulPairs(nums = [12, 35, 6, 7, 9])",
        "countBeautifulPairs(nums = [26, 55, 90])",
        "countBeautifulPairs(nums = [3, 4, 7, 8, 10])",
        "countBeautifulPairs(nums = [32, 44, 22, 14, 31, 12, 10, 11, 21])",
        "countBeautifulPairs(nums = [34, 8, 15, 3, 92, 62, 76, 6, 71])",
        "countBeautifulPairs(nums = [31, 88, 21, 34, 31, 31, 33, 95, 58, 81])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,1,1,1,1], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2,5,1,2,0], target = 10)",
        "maximumJumps(nums = [4,-2,3,0,3,1,2], target = 2)",
        "maximumJumps(nums = [1,1,1,1,1,1,1,1,1], target = 3)",
        "maximumJumps(nums = [1,5,2,1,0], target = 100)",
        "maximumJumps(nums = [1,3,5,8,10,12,17,19,21], target = 10)",
        "maximumJumps(nums = [10,16,1,3,12,4,14,28], target = 22)",
        "maximumJumps(nums = [7, 7, 4, 4, 9], target = 8)",
        "maximumJumps(nums = [1,2,4,5,3,12,2,3,6,6,3,6,8,12,15,16], target = 19)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [3, 8, 4, 6])",
        "countBeautifulPairs(nums = [48, 6, 7, 9])",
        "countBeautifulPairs(nums = [16, 16, 17])",
        "countBeautifulPairs(nums = [3, 8, 5])",
        "countBeautifulPairs(nums = [18, 88, 100])",
        "countBeautifulPairs(nums = [22, 23, 22, 23, 22, 23, 22, 23])",
        "countBeautifulPairs(nums = [25, 55, 22, 33, 44, 55])",
        "countBeautifulPairs([20, 3, 15, 5, 5])",
        "countBeautifulPairs(nums = [198, 210, 92, 147, 20, 86, 294, 216, 223, 34])"
    ],
    "sample_18": [
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCDA\")",
        "minLength(s = \"AAABBCDCD\")",
        "minLength(s = \"ABABBBCDCD\")",
        "minLength(s = \"AAABBBCDD\")",
        "minLength(s = \"ABCDCDDAB\")",
        "minLength(s = \"ABCDCDABABABD\")",
        "minLength(s = \"AAAAABBBCDDD\")",
        "minLength(s = \"CDEABAAB\")"
    ],
    "sample_150": [
        "finalString(s = 'ring')",
        "finalString(s = \"hiit\")",
        "finalString(s = \"rintsgn\")",
        "finalString(s = 'finally')",
        "finalString(s = \"this is great\")",
        "finalString(s = \"i am a string\")",
        "finalString(s = \"abcij\")",
        "finalString(s = 'stressed')",
        "finalString(s = 'tonight')",
        "finalString(s = \"ihrtgir\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0,1,1])",
        "doesValidArrayExist([1, 2, 3])",
        "doesValidArrayExist(derived = [1,0,1,0,1])",
        "doesValidArrayExist([1, 1, 2, 3])",
        "doesValidArrayExist([1, 1, 1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 0, 1, 1, 0, 1])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [3, 4, 1, 2])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [1, 4, 4])",
        "findValueOfPartition(nums = [5, 4, 3, 2, 1])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 3])",
        "findValueOfPartition(nums = [3, 1, 3, 4, 2])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [5, 1, 2, 7, 4])",
        "findValueOfPartition(nums = [3, 0, 1, 0])",
        "findValueOfPartition(nums = [5, 8, 6])"
    ],
    "sample_7": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [4, 3]])",
        "colorTheArray(n = 5, queries = [[0,3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [3, 1], [4, 3], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 2], [4, 3]])",
        "colorTheArray(n = 6, queries = [[1,3], [4,2], [2,1]])",
        "colorTheArray(n = 4, queries = [[1,2],[2,2],[3,2],[1,2],[2,2],[3,2],[1,2],[2,2],[3,2],[1,2],[2,2],[3,2]])",
        "colorTheArray(3, [[0, 1], [2, 2], [1, 1], [2, 0], [0, 0]])",
        "colorTheArray(n = 5, queries = [[1,2], [2,2],[3,2],[3,3],[3,3],[4,3],[4,3],[1,1],[2,1],[2,2],[3,1],[3,2],[3,2],[4,1],[5,1]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 13)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 11)",
        "minimumPossibleSum(n = 3, target = 11)",
        "minimumPossibleSum(n = 3, target = 12)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 3, target = 3)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 5, k = 7)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1, 1, 1, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [], target = 14)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10], target = 24)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 2, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 3, 4, 2, 1], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 3, 2, 5, 11, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 6, 5, 2, 4, 3], target = 6)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 4, 3, 2], m = 5)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 5, 11, 5], m = 9)",
        "canSplitArray(nums = [2, 4, 4, 5, 6, 9], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7], m = 10)",
        "canSplitArray(nums = [2, 7, 11, 15], m = 26)",
        "canSplitArray(nums = [2, 1, 4, 1, 3], m = 3)",
        "canSplitArray(nums = [2, 4, 2, 3, 4], m = 12)",
        "canSplitArray(nums = [4, 1, 2, 4, 5, 2, 5], m = 12)",
        "canSplitArray(nums = [1, 4, 1, 2, 3, 4, 1, 3, 4, 5, 3, 1, 3, 1, 2, 3, 5, 4, 2, 2, 1, 1, 1, 1, 1, 2, 1], m = 3)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3, 4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3, 4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3, 4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,1,1,2,2,2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,1,1,2,2,2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,1,1,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,1,2,3,4,2], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 1, 1], m = 5, k = 2)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [2,1,2,2,2,2], t=2)",
        "longestAlternatingSubarray(nums = [1,1,2,2,2,1,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,1,2,1,1,1,2], t = 1)",
        "longestAlternatingSubarray(nums = [0, 1, 0, 1, 0, 1, 1], t = 0)",
        "longestAlternatingSubarray(nums = [1,1,1,2,3,4,1,1,1], t = 3)",
        "longestAlternatingSubarray(nums = [1,1,2,1,2,2,1,1,1,2,1], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,2,1,2,3,1,3,2,1,2,3], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,2,3,3,3,4,4,5,5,5,5,5], t = 4)",
        "longestAlternatingSubarray(nums = [1,3,4,8,1,9], t = 2)",
        "longestAlternatingSubarray(nums = [4,3,5,6,7,8,9,1,2], t = 3)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '000000512301')",
        "removeTrailingZeros(num = \"000000\")",
        "removeTrailingZeros(num = '0123010')",
        "removeTrailingZeros(num = \"0512301000\")",
        "removeTrailingZeros(num = '510200')",
        "removeTrailingZeros(num = \"00000000000000000000.22250000000000000000\")",
        "removeTrailingZeros(num = \"3000\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 6, b = 3)",
        "makeTheIntegerZero(a = 11, b = 1)",
        "makeTheIntegerZero(a = 1, b = 2)",
        "makeTheIntegerZero(a = 28, b = 4)",
        "makeTheIntegerZero(a = 3, b = 6)",
        "makeTheIntegerZero(a = 23, b = 6)",
        "makeTheIntegerZero(a = 14, b = 13)",
        "makeTheIntegerZero(a = 46, b = 3)",
        "makeTheIntegerZero(a = 175, b = 15)",
        "makeTheIntegerZero(a = 444, b = 2)"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 4)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 5)",
        "canSplitArray(nums = [1,4,3,2], m = 3)",
        "canSplitArray(nums = [4, 9, 3], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 7)",
        "canSplitArray(nums = [34, 23, 12, 56, 89], m = 60)"
    ],
    "sample_161": [
        "maxSum(nums = [10, 10])",
        "maxSum(nums = [0, 0, 0])",
        "maxSum(nums = [1, 3, 5, 1])",
        "maxSum(nums = [5, 5, 10, 5, 1])",
        "maxSum(nums = [1, 3, 2, 5])",
        "maxSum(nums = [10, 1, 5, 2])",
        "maxSum(nums = [2, 8, 4])",
        "maxSum(nums = [10000000000, 10000000000])",
        "maxSum(nums = [0, 6, 5, 3, 2, 7, 3, 8])",
        "maxSum(nums = [90, 50, 90, 60, 60, 50, 50])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 5, target = 25)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,4,3,2])",
        "findValueOfPartition(nums = [3, 1, 4, 2])",
        "findValueOfPartition(nums = [2,5,1,2,0])",
        "findValueOfPartition(nums = [5, 15, 10, 20, 20, 5, 15, 10, 20])",
        "findValueOfPartition(nums = [1,4,10,2,7])",
        "findValueOfPartition(nums = [3, 5, 2, 1, 5, 10])",
        "findValueOfPartition(nums = [2, 5, 4, 3, 2])",
        "findValueOfPartition(nums = [5, 3, 1, 1, 1])",
        "findValueOfPartition(nums = [2, 4, 10, 26, 30, 32, 35])",
        "findValueOfPartition(nums = [2,1,2,3,2,5,4,3,2,4,6,2,2,3,2,1,2])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 2], [1, 2], [1, 2]])",
        "numberOfPoints(nums = [[1,4],[2,3],[3,4],[2,4]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [2, 4]])",
        "numberOfPoints(nums = [[1,3],[1,3],[1,3]])",
        "numberOfPoints([[0,1],[1,2]])",
        "numberOfPoints(nums = [[1, 5], [2, 5], [1, 3]])",
        "numberOfPoints(nums = [[3,10], [5,100]])",
        "numberOfPoints(nums = [[1, 10], [2, 3], [3, 5]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [2, 3], [2, 4]])",
        "numberOfPoints([(6, 10), (1, 6), (10, 12), (1, 5), (5, 9), (10, 10)])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1, 4], [2, 4], [3, 6], [4, 4]])",
        "numberOfPoints(nums = [[1, 4], [2, 4], [3, 6], [4, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3]])",
        "numberOfPoints(nums = [[3, 4], [2, 3], [1, 2]])",
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[-1, -1], [2, 2], [-1, 2], [2, -1]])",
        "numberOfPoints(nums = [[3, 4], [1, 2], [5, 6], [7, 9], [8, 9]])",
        "numberOfPoints(nums = [[1, 3], [0, 0], [2, 6], [5, 10], [13, 11], [9, 9]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 4, 2, 3], target = 5)",
        "minOperations(nums = [1, 3, 5], target = 8)",
        "minOperations(nums = [9], target = 10)",
        "minOperations(nums = [1, 2, 3, 4], target = 12)",
        "minOperations(nums = [1,2,3,4,5,6,7], target = 11)",
        "minOperations(nums = [1, 2, 4, 2, 5], target = 10)",
        "minOperations(nums = [1, 1, 2, 4, 6, 8], target = 10)",
        "minOperations(nums = [7, 8, 5, 10, 11], target = 10)",
        "minOperations(nums = [5, 2, 8, 4, 3, 1], target = 5)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2], k = 2)",
        "checkArray(nums = [1,2,3], k = 2)",
        "checkArray(nums = [4, 14, 2], k = 2)",
        "checkArray(nums = [0, 0, 0, 0], k = 1)",
        "checkArray(nums = [0, 0], k = 1)",
        "checkArray(nums = [1, 0, 1, 0, 1, 0], k = 2)",
        "checkArray(nums = [4, 1, 5, 2, 1, 6, 3], k = 2)",
        "checkArray(nums = [4, 1, 5, 2, 1, 5, 2, 1, 2, 1, 2], k = 3)",
        "checkArray(nums = [2,3,5,5,4,5,6,7,1,4,7], k = 6)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0])",
        "doesValidArrayExist([1, 0, 0, 1])",
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist([0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1])"
    ],
    "sample_159": [
        "maxSum(nums = [10,20,30])",
        "maxSum(nums = [1,2,3,4,1])",
        "maxSum([1,2,1])",
        "maxSum([1,2,3,4,5,6,7,8,9])",
        "maxSum(nums = [23,2,6,4,5])",
        "maxSum(nums = [12,13,15,12])",
        "maxSum(nums=[4, 5, 6, 7, 8])",
        "maxSum(nums = [6,2,3,8,9])",
        "maxSum(nums = [55,22,44,66])",
        "maxSum(nums = [157,238,133,112,344,189])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 4, 1, 2, 3, 4])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4])",
        "continuousSubarrays(A = [1, 2, 1, 2, 1, 3, 2])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(A = [2, 1, 2, 2, 2])",
        "continuousSubarrays(A = [1,2,1,2,3,4,1,2,3,4])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 2, 3])",
        "continuousSubarrays(A = [5, 3, 2, 1, 4])",
        "continuousSubarrays(A = [1,2,1,2,3,4,3,2,2,2,2])",
        "continuousSubarrays(A = [4,1,4,1,4,3,4])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1,2,2,3,3,3,4,4,4,4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3, 2])",
        "distinctDifferenceArray(nums = [1, 1, 1, 1])",
        "distinctDifferenceArray(nums = [1,2,2,3,3,3,4,5,5])",
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3, 1, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3, 2, 1, 3])",
        "distinctDifferenceArray(nums = [2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3])",
        "distinctDifferenceArray([1, 1, 2, 2, 1, 1, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], b = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "maxNonDecreasingLength(a = [2, 3, 2, 4], b = [1, 2, 2, 3])",
        "maxNonDecreasingLength(a = [1, 4, 3, 2, 5, 2], b = [4, 2, 4, 5, 2, 2])",
        "maxNonDecreasingLength(a = [2, 9, 7, 1], b = [1, 4, 2, 3])",
        "maxNonDecreasingLength(a = [1, 2, 3, 3, 1], b = [2, 1, 1, 3, 3])",
        "maxNonDecreasingLength(a = [1, 1, 3, 4, 5, 6], b = [2, 2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [1, 10, 2, 9], b = [2, 4, 5, 12])",
        "maxNonDecreasingLength(a = [1, 4, 3, 2, 5, 3, 2], b = [1, 2, 4, 1, 2, 5, 2])",
        "maxNonDecreasingLength(a = [3,4,1,5,2], b = [3,1,3,5,1])",
        "maxNonDecreasingLength(a = [1, 4, 1, 2, 4, 1, 3], b = [4, 1, 1, 3, 3, 2, 2])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 4)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 5)",
        "distanceTraveled(mainTank = 4, additionalTank = 3)",
        "distanceTraveled(mainTank = 8, additionalTank = 3)",
        "distanceTraveled(mainTank = 8, additionalTank = 5)"
    ],
    "sample_160": [
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [10, 15, 3, 7])",
        "maxSum(nums = [10,20])",
        "maxSum(nums = [1,2,4,7])",
        "maxSum(nums = [1, 2, 3, 2, 5])",
        "maxSum(nums = [10, 2, 100, 9, 10000, 99])",
        "maxSum(nums = [11, 12, 21, 22, 3, 4])",
        "maxSum(nums = [555, 555, 11, 555, 11, 555])",
        "maxSum(nums = [10, 7, 5, 3, 5, 1, 3, 2, 1, 1])"
    ],
    "sample_52": [
        "smallestString(s = \"abcd\")",
        "smallestString(s = 'abcddd')",
        "smallestString(s = 'aaaabbbbcccc')",
        "smallestString(s = 'aaaazaaa')",
        "smallestString(s = \"aaaaaaaaaaaaaaaaaaaaa\")",
        "smallestString(s = 'asdsd')",
        "smallestString(s = 'kkdsdsd')",
        "smallestString(s = 'abcdsbbdd')",
        "smallestString(s = 'kaasdddsss')",
        "smallestString(s = 'amkddsbcnnnds')"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [3, 1])",
        "findValueOfPartition(nums = [2, 7, 9, 3, 1])",
        "findValueOfPartition(nums = [1,4, 4])",
        "findValueOfPartition(nums = [3, 5, 1, 4])",
        "findValueOfPartition(nums = [2, 3, 1])",
        "findValueOfPartition(nums = [3, 8, 2, 5, 10, 1])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 2])",
        "findValueOfPartition(nums = [4, 3, 2, 5, 1, 1, 3])",
        "findValueOfPartition(nums = [5,3,7,2,5,3,4,9,2,4])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s = \"abac\")",
        "makeSmallestPalindrome(s = \"abcb\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = \"abccba\")",
        "makeSmallestPalindrome(s = 'abcdcba')",
        "makeSmallestPalindrome(s = \"abcca\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 3)",
        "makeTheIntegerZero(num1 = 1, num2 = 0)",
        "makeTheIntegerZero(num1 = 10, num2 = 20)",
        "makeTheIntegerZero(num1 = 6, num2 = 10)",
        "makeTheIntegerZero(num1 = 12, num2 = 13)",
        "makeTheIntegerZero(num1 = 15, num2 = 7)",
        "makeTheIntegerZero(num1 = 2147483647, num2 = 1)",
        "makeTheIntegerZero(num1 = 24, num2 = 11)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1,3],[2,6],[8,10],[15,20]])",
        "numberOfPoints(nums = [[1,3],[2,6],[3,5]])",
        "numberOfPoints(nums = [[3, 4], [2, 6], [5, 5], [1, 3]])",
        "numberOfPoints(nums = [[3,4],[2,6],[5,5],[1,3]])",
        "numberOfPoints(nums = [[1, 1], [1, 2], [1, 3], [1, 4]])",
        "numberOfPoints(nums=[[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,1],[1,1],[1,1]])",
        "numberOfPoints(nums = [[4, 10], [2, 8], [1, 9]])",
        "numberOfPoints(nums = [[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],[2,10]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,4,3,2,2,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,2,1,2,3,4,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,1,2,1,2,2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,2,1,2,2,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,1,1,1,1], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,3,3,4,5,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2, 2, 2], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [0,1,2,1,0], m = 2, k = 1)"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(\"aba\")",
        "minimumCost(s = \"abcb\")",
        "minimumCost(s = \"baa\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"bbbbbabbbb\")",
        "minimumCost(s = \"dqeac\")",
        "minimumCost(s = \"xxxxxzxx\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [True, False, False, True])",
        "doesValidArrayExist(derived = [1,0,0,1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [True, True, True, True, False])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 1, 1, 1, 1, 0])",
        "doesValidArrayExist([0,1,1,0,1,1,0,1])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [2, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 3, 2, 2, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 4])",
        "distinctDifferenceArray(nums = [2, 1, 2, 3, 1, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 5, 5])",
        "distinctDifferenceArray(nums = [0, 0, 0, 0, 1])",
        "distinctDifferenceArray(nums = [3, 4, 5, 3, 2, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 5, 7])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 5, 1, 1, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 6, 8, 12, 16], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 3, 9, 1], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 14, 15, 10, 16, 14], target = 14)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 25, 10, 30, 15, 10], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [38, 43, 46, 58, 59, 61], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [5,4,4,4,3,4,2,3,2,3], target = 2)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = \"abcba\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = 'eve')",
        "makeSmallestPalindrome(s = \"aaaa\")",
        "makeSmallestPalindrome(\"aaaba\")",
        "makeSmallestPalindrome(s = \"abdccdd\")"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num = '1000000')",
        "removeTrailingZeros(num = '512300000001')",
        "removeTrailingZeros(num = \"0000000000512301\")",
        "removeTrailingZeros(num = \"10000\")",
        "removeTrailingZeros(num = \"0100100000010\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,4,3,2,4,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,1,2,3,4,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,4,4,4,5,7,7], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2,3,2,3,3,2,3,2], m = 2, k = 3)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 16, additionalTank = 10)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 10)",
        "distanceTraveled(mainTank = 40, additionalTank = 5)",
        "distanceTraveled(mainTank = 100, additionalTank = 30)",
        "distanceTraveled(mainTank = 5, additionalTank = 10)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5, 6], x = 2)",
        "minCost(A = [1, 2, 3, 4], x = 3)",
        "minCost(A = [1, 3, 5, 7], x = 2)",
        "minCost(A = [5, 4, 2, 6], x = 3)",
        "minCost(A = [2, 4, 1, 8, 7, 5], x = 3)",
        "minCost(A = [1, 4, 5, 4, 8, 2, 10], x = 3)",
        "minCost(A = [9, 10, 8, 9, 10, 6, 8, 3, 8], x = 2)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 3, 6, 7, 9])",
        "maxIncreasingGroups(u = [1, 2, 3, 5, 4])",
        "maxIncreasingGroups(u = [3, 4, 5, 6])",
        "maxIncreasingGroups(u = [2, 2, 2, 2, 2, 2, 2])",
        "maxIncreasingGroups([7, 1, 5, 3, 6, 4])",
        "maxIncreasingGroups(u = [5, 1, 10, 2, 4, 3])",
        "maxIncreasingGroups(u = [1, 2, 2, 2, 3, 4, 6, 8, 9, 10])",
        "maxIncreasingGroups(u = [1, 4, 2, 7, 4, 2, 3, 1])",
        "maxIncreasingGroups(u = [6, 4, 5, 3, 2, 5, 6, 4, 6])",
        "maxIncreasingGroups(u = [5, 5, 3, 4, 5, 7, 8, 3, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [2, 3, 1, 5], k = 2)",
        "checkArray(nums = [2, 3, 1, 2, 4, 3], k = 2)",
        "checkArray(nums = [3, 2, 1], k = 2)",
        "checkArray(nums = [1, 2, 1, 3, 4], k = 2)",
        "checkArray(nums = [1, 0, 0, 2], k = 3)",
        "checkArray(nums = [0, 0, 1, 0], k = 0)",
        "checkArray(nums = [0,1,1,1,1,1], k = 2)",
        "checkArray(nums = [2, 3, 5, 4, 6, 7], k = 2)",
        "checkArray(nums = [5,1,3,4,7,8,1,2,1], k = 3)"
    ],
    "sample_19": [
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = 'ABCDABCD')",
        "minLength(s = \"ABBCD\")",
        "minLength(s = 'ABABABCDCD')",
        "minLength(s = \"AABBCCDDEE\")",
        "minLength(s = 'ABCABC')",
        "minLength(s = \"ACBADA\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 3)",
        "minOperations(nums = [1,1,1,1,1], target = 3)",
        "minOperations(nums = [1,1,4,2,3], target = 10)",
        "minOperations(nums = [3,2,4], target = 6)",
        "minOperations(nums = [4,2,3], target = 1",
        "minOperations(nums = [2, 3, 10, 11, 12], target = 13)",
        "minOperations(nums = [2, 2, 2, 2], target = 4)",
        "minOperations(nums = [4,-3,0,2,-1,1,5], target = 1)",
        "minOperations(nums = [40,40,10,20,30], target = 61)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"a:b:c:d\", \"e:f:g:h\"], separator = \":\")",
        "splitWordsBySeparator(words = [\"hello world\", \"foo bar\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"dog,cat,fish\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"abc\", \"abc\", \"abc\"], separator = \"d\")",
        "splitWordsBySeparator(words = [\"a-b\", \"a-b\", \"a-b\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"abc.def.pqr\", \"123.456\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"qw\", \"qwqw\", \"qwqwqw\"], separator = \"qw\")",
        "splitWordsBySeparator(words = [\"ab12cd\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ab-acd\", \"x\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"coffee\", \"cake\", \"chess\", \"potato\"], separator = \"ee\")"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"aaa\")",
        "smallestString(s = 'abccbaa')",
        "smallestString(s = \"ddabbbcdd\")",
        "smallestString(s = 'aacabdkd')",
        "smallestString(s = 'aaaazzaabbbc')",
        "smallestString(\"abdabc\")",
        "smallestString(s = 'kkbabcdddea')",
        "smallestString(\"asasdad\")",
        "smallestString(\"aabbbbac\")"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"RL_RL_RL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"R_LLRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"R_LLL_LL__RRRRR\")",
        "furthestDistanceFromOrigin(moves = 'L_L_L_R_R_R_LLRR')",
        "furthestDistanceFromOrigin(moves = \"RRL_RLRL_RLR\")",
        "furthestDistanceFromOrigin(moves = \"__LL_L_L___RR_R_RRR__R\")",
        "furthestDistanceFromOrigin(moves = \"R_LL_R_L_L_L_LL_LL__R_L_R_R\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 2)",
        "makeTheIntegerZero(num1 = 16, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 18, num2 = 3)",
        "makeTheIntegerZero(num1 = 26, num2 = 4)",
        "makeTheIntegerZero(num1 = 30, num2 = 5)",
        "makeTheIntegerZero(num1 = 100, num2 = 20)",
        "makeTheIntegerZero(num1 = 65536, num2 = 1)"
    ],
    "sample_51": [
        "smallestString('a')",
        "smallestString(s = 'aaz')",
        "smallestString(s = 'kddsbc')",
        "smallestString(s = 'zzzzzzzz')",
        "smallestString('kddsbndc')",
        "smallestString('ad')",
        "smallestString(\"aa\")",
        "smallestString(s = 'aacdsdsd')",
        "smallestString(s = 'aab')",
        "smallestString(s = \"kqbwunjcaxnq\")"
    ],
    "sample_146": [
        "finalString(s = 'pointer')",
        "finalString(s = 'pint')",
        "finalString(s = \"ponter\")",
        "finalString(s = 'potter')",
        "finalString(s = 'iterate')",
        "finalString(s = \"piton\")",
        "finalString(s = 'ipnter')",
        "finalString(s = 'nitri')",
        "finalString(s = \"binrerop\")",
        "finalString(s = \"iyesnugy\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 1)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 2)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 21)",
        "canSplitArray(nums = [4, 2, 5, 10, 8], m = 12)",
        "canSplitArray(nums = [3,2,2,3,2], m = 7)",
        "canSplitArray(nums = [6,11], m = 12)",
        "canSplitArray(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1], m = 3)",
        "canSplitArray(nums = [2, 3, 5, 1, 5, 10], m = 7)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,0,0,1,0])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one|two|three', 'four|five|six'], separator = '|')",
        "splitWordsBySeparator(words = ['one|two|three', 'four|five|six'], separator = '|')",
        "splitWordsBySeparator(words = [\"one,two,three\", \"four,five,six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one,two,three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one|two|three', 'four', 'five', 'six'], separator = '|')",
        "splitWordsBySeparator(words = ['one-two', 'three-four-five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one;two;three\", \"four;five;six\", \"seven;eight;nine\"], separator = ';')",
        "splitWordsBySeparator(words = ['one#two#three', 'four', 'five', 'six'], separator = '#')",
        "splitWordsBySeparator(words = ['one two three', 'four, five, six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one/two\", \"three*four\", \"five?six\"], separator = ??)"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 40, 50, 52, 60, 65], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours=[], target=0)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 40, 50, 52, 60], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 4, 8, 9], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,1,3,4,1,1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10,12,5,2,1,3,8,2], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours=[15,5,10,15,14,2,17,18,18,20,14,15,5,8,20,5,13,11,19], target = 16)"
    ],
    "sample_168": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEFT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEB\")",
        "isAcronym(words = [\"de\"], s = \"Deep\")",
        "isAcronym(words = [\"de\", \"et\", \"of\", \"us\"], s = \"DEETUS\")",
        "isAcronym(words = ['of', 'course'], s = 'OCF')",
        "isAcronym(words = [\"US\", \"DOT\", \"AIR\", \"SUPER\"], s = \"USA\")",
        "isAcronym(words = [\"debit\", \"card\", \"a\", \"travel\", \"card\"], s = \"ATM\")",
        "isAcronym(words = [\"da\"], s = \"dabba\")",
        "isAcronym(words = [\"de\", \"la\", \"hope\", \"and\", \"st\"], s = \"help\")",
        "isAcronym(words = [\"USA\", \"GUI\", \"FS\"], s = \"GUI\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEFT\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEFT\")",
        "isAcronym(words = [\"like\", \"sam\", \"sung\"], s = \"LKS\")",
        "isAcronym(words = [\"USA\", \"FBI\"], s = \"UAFBI\")",
        "isAcronym(words = [\"de\"], s = \"DE\")",
        "isAcronym(words = [\"deferred\", \"immediate\", \"bilateral\"], s = \"defer\")",
        "isAcronym(words = [\"debit\", \"card\", \"attached\", \"to\", \"the\", \"account\"], s = \"DCAAT\")",
        "isAcronym(words = [\"usa\", \"fr\", \"can\"], s = \"U\")",
        "isAcronym(words = [\"bad\", \"ac\", \"d\"], s = \"badd\")",
        "isAcronym(words = [\"my\", \"f\", \"hobby\", \"is\", \"coding\"], s = \"myfhobbyiscoding\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"baab\")",
        "minimumCost(s = \"dabadd\")",
        "minimumCost(s = \"aaabba\")",
        "minimumCost(s = \"cba\")",
        "minimumCost(s = \"abccba\")",
        "minimumCost(s = \"aaaabb\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0])",
        "doesValidArrayExist([0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 2, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 0, 1, 1])",
        "doesValidArrayExist([2, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abca\")",
        "makeSmallestPalindrome(s = 'abcdc')",
        "makeSmallestPalindrome(\"abcdcba\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abccb\")",
        "makeSmallestPalindrome(\"abac\")",
        "makeSmallestPalindrome(s = 'zbax')",
        "makeSmallestPalindrome(s = \"abcefg\")"
    ],
    "sample_50": [
        "smallestString(s = 'aab')",
        "smallestString(s = \"abaa\")",
        "smallestString(s = \"bbab\")",
        "smallestString(s = 'abba')",
        "smallestString(s = \"aaaaa\")",
        "smallestString(s = 'aab')",
        "smallestString(s = \"ba\")",
        "smallestString(s = \"bab\")",
        "smallestString(s = 'z')",
        "smallestString(s = \"bb\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [12, 10, 16, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [12,13,14], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,1,3,1,4], k = 2)",
        "sumIndicesWithKSetBits(nums = [11, 12, 13, 14, 15], k = 3)",
        "sumIndicesWithKSetBits(nums = [2,4,6,8], k = 2)",
        "sumIndicesWithKSetBits(nums = [12,13,1,12], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,1,2,3,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 5, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,3,2,5,4,8,3], k = 3)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"AAABBCDCDDD\")",
        "minLength(s = \"AAABCD\")",
        "minLength(s = \"CABA\")",
        "minLength(s = \"ABCDCDCAB\")",
        "minLength(s = \"ABCDABCDCDABCD\")",
        "minLength(\"ABAACD\")",
        "minLength(s = \"ABCADCDC\")",
        "minLength(s = \"ACDABANCDC\")",
        "minLength(s = \"ABCCEDAB\")"
    ],
    "sample_158": [
        "maxSum(nums = [10, 11, 12, 13, 14, 15])",
        "maxSum(nums = [2, 3, 4, 8])",
        "maxSum(nums = [1, 1, 2, 2, 3])",
        "maxSum(nums = [12, 5, 78, 6, 12])",
        "maxSum(nums = [15, 58, 13, 20])",
        "maxSum(nums = [5, 5, 6, 7])",
        "maxSum(nums = [10, 1, 3, 5, 2, 4])",
        "maxSum(nums = [82, 85, 87, 90])",
        "maxSum(nums = [13, 2, 1, 13, 21312, 1212, 1212, 12])",
        "maxSum(nums = [52, 73, 7, 58, 58, 58, 77, 71, 2, 56, 81, 94])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3, 5])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [1, 2, 5, 4, 3])",
        "semiOrderedPermutation(nums = [4,1,3,2])",
        "semiOrderedPermutation(nums = [1,3,2,5,4])"
    ],
    "sample_162": [
        "maxSum(nums = [88, 88, 100])",
        "maxSum(nums = [8, 1, 8])",
        "maxSum(nums = [10, 2, 5, 8, 3])",
        "maxSum(nums = [10, 11, 20, 30, 25, 5])",
        "maxSum(nums = [5, 2, 2, 7, 7, 8])",
        "maxSum(nums = [1, 8, 10, 5, 6, 3, 12, 4, 2, 12])",
        "maxSum(nums = [88, 69, 66, 8, 88, 88, 88, 88])",
        "maxSum(nums = [43, 10, 9, 9, 40])",
        "maxSum(nums = [64, 6, 68, 2, 4, 72, 8, 99, 68, 54])",
        "maxSum(nums = [55, 69, 89, 95, 101, 119, 129, 152, 166, 171, 179, 190, 194, 197, 200, 205, 209, 220, 226, 234, 239, 243, 253, 263, 277, 291, 301, 309, 314, 316, 324, 327, 341, 343, 352, 365, 381, 391, 398, 400, 409, 429, 448, 449, 465, 469, 475, 476, 484, 487, 491, 495, 508, 511, 523, 547, 550, 564, 568, 571, 574, 579, 588, 592, 598, 601, 613, 625, 634, 640, 649, 653, 662, 664, 673, 679, 688, 689, 695, 697, 701, 709, 711, 717, 720, 723, 731, 741, 749, 754, 758, 761, 763, 775, 779, 783, 785, 789, 791, 793, 794, 796, 798, 799, 800, 801, 802, 808, 814, 817, 819, 821, 825, 827, 839, 850, 85"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = '1000000')",
        "maximumOddBinaryNumber(s = '010011')",
        "maximumOddBinaryNumber(s = \"010110\")",
        "maximumOddBinaryNumber(s = '1010101010')",
        "maximumOddBinaryNumber(s = \"000000\")",
        "maximumOddBinaryNumber(s = \"101001010\")",
        "maximumOddBinaryNumber(s = '100000000001100')",
        "maximumOddBinaryNumber(s = '1010010101001011')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 1, 3, 5, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 12, 10, 4], target = 14)",
        "numberOfEmployeesWhoMetTarget(hours = [10,15,12,15,18], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 5, 5, 2], target = 5)"
    ],
    "sample_166": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debit card\")",
        "isAcronym(words = [\"de\"], s = \"Deep\")",
        "isAcronym(words = [\"debit\", \"card\", \"atm\"], s = \"debitcardatm\")",
        "isAcronym(words = [\"deer\", \"fox\", \"goat\"], s = \"fodder\")",
        "isAcronym(words = [\"baggage\", \"cabin\", \"balcony\", \"catering\"], s = \"BACC\")",
        "isAcronym(words = [\"High\", \"intelligence\", \"meets\", \"great\"], s = \"HI\")",
        "isAcronym(words = [\"why\", \"not\", \"let\"], s = \"hiynotletmebecausewhy\")",
        "isAcronym(words = [\"word\", \"the\", \"from\", \"hi\", \"child\"], s = \"hichild\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank=10, additionalTank=0)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [3, 4, 6, 9, 10])",
        "maxIncreasingGroups([2, 3, 4])",
        "maxIncreasingGroups([3, 4, 5, 6])",
        "maxIncreasingGroups([1,2,3,4,5,6,7])",
        "maxIncreasingGroups(A = [4, 8, 2, 6])",
        "maxIncreasingGroups(A = [10, 3, 10, 10, 5, 10])",
        "maxIncreasingGroups(A = [1,4,5,9,10,11,12,13,14,15])",
        "maxIncreasingGroups(A = [1,2,3,1,2,3,1,2,3,4,2,3])",
        "maxIncreasingGroups(A = [4, 5, 2, 2, 2])",
        "maxIncreasingGroups(A = [4, 5, 6, 3, 4, 4, 5, 7, 8, 2, 1, 2, 3])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray([1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 4])",
        "distinctDifferenceArray([1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray([1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [0, 1, 0, 2, 1, 0, 1, 3, 0, 4, 0])",
        "distinctDifferenceArray(nums = [0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4, 1, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3, 4, 7, 8])",
        "distinctDifferenceArray(nums = [0, 3, 1, 4, 1, 4, 1, 3])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 4)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,1,2,1,1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [2, 2, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 2, 2, 4, 2])",
        "countCompleteSubarrays(nums = [1,1,2,1,1,3,2,3,3,4,4,4,4])",
        "countCompleteSubarrays(nums = [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1,1,3,4,5,0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 5, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 2, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [12, 13, 15], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 1024], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 0, 1, 0, 1, 0, 1, 1, 1], k = 2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"aabbbcccc\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"ababab\")",
        "minimizedStringLength(s = \"aaaaaaaa\")",
        "minimizedStringLength(s = \"ababa\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"abbaccd\")",
        "minimizedStringLength(s = \"cabc\")",
        "minimizedStringLength(\"bbabb\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k=2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k=2)",
        "longestEqualSubarray(nums = [1,2,1,2,3,1,3,3,2,2,2], k = 3)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1,0],[2,1],[3,2],[3,1],[2,0],[1,0]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 2], [4, 2], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 3], [3, 3], [4, 2], [5, 3]])",
        "colorTheArray(n = 5, queries = [[1, 3], [1, 4], [2, 4], [2, 5], [3, 1], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1,2],[1,2],[3,2],[2,2],[1,1],[2,1],[3,1],[4,1]])",
        "colorTheArray(5, [[4, 2], [3, 1], [1, 3]])",
        "colorTheArray(n = 4, queries = [[0,0],[0,1],[1,1],[1,2],[0,2],[2,3],[2,0]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4, 3, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1, 1, 1, 1, 1, 1, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 10, 12, 15], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4, 1, 1, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 10, 10, 10, 10, 4], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 40, 50, 12, 17, 42], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 1, 1, 2, 1], target = 3)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [26, 42, 40])",
        "countBeautifulPairs(nums = [16, 24, 33, 50, 54])",
        "countBeautifulPairs(nums = [123, 456, 789, 1212, 1215, 1313])",
        "countBeautifulPairs(nums = [25, 10, 30, 5, 15])",
        "countBeautifulPairs(nums = [4, 15, 35, 23, 10])",
        "countBeautifulPairs(nums = [13, 26, 37, 49])",
        "countBeautifulPairs(nums = [12, 35, 7, 9, 6, 40])",
        "countBeautifulPairs(nums = [82, 23, 77, 15, 96, 54, 22, 35, 3, 1, 19, 96, 11])",
        "countBeautifulPairs(nums = [25, 38, 58, 47, 15, 20, 33, 21, 21, 32, 5, 25, 16, 2, 9, 14, 34, 2, 5, 5, 8, 4, 3, 3, 9])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1, 2, 3, 4, 4, 5])",
        "countWays(nums = [2, 7, 11, 15])",
        "countWays(nums = [2, 3, 7])",
        "countWays(nums = [1,2,3,4,4,4,5])",
        "countWays(nums = [1, 3, 3, 4, 5])",
        "countWays(nums = [4, 2, 2, 1, 1])",
        "countWays(nums = [2, 5, 3, 7, 4, 10])",
        "countWays(nums = [1, 2, 5, 4, 5, 5, 6, 1])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '0010')",
        "maximumOddBinaryNumber(s = '00101')",
        "maximumOddBinaryNumber(s = '00101')",
        "maximumOddBinaryNumber(s = '001001')",
        "maximumOddBinaryNumber(s = '1000001')",
        "maximumOddBinaryNumber(s = '0011100')",
        "maximumOddBinaryNumber(s = \"0010001\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [3, 8, 2, 5, 1, 10], k = 3)",
        "maximumBeauty(nums = [1, 1, 1, 1], k = 0)",
        "maximumBeauty(nums = [1, 3, 2, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,1,1,1,3,3,3,4,6,9], k = 2)",
        "maximumBeauty(nums = [1, 4, 5, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [2,4,6,8,10,12,14,16,25,27,30], k = 5)",
        "maximumBeauty(nums = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5], k = 1)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [5, 4, 3, 2, 1])",
        "maximumTripletValue(nums = [1,2,3,4])",
        "maximumTripletValue(nums = [5, 4, 3, 2, 1])",
        "maximumTripletValue([5,4,3,2,1])",
        "maximumTripletValue([0,0,0,1])",
        "maximumTripletValue(nums = [1, 1, 2, 4, 2])",
        "maximumTripletValue(nums = [-1, 1, 0, 2, -1, 4])",
        "maximumTripletValue([-1, -2, -3, 4, 5, 6])",
        "maximumTripletValue(nums = [-5, 3, 4, 6])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 5, 4, 1], target = 1)",
        "maximumJumps(nums = [7, 6, 5, 4, 3, 2, 1], target = 3)",
        "maximumJumps(nums = [10,16,3,7,15,100,5], target = 5)",
        "maximumJumps(nums = [3,5,2,1,4], target = 1)",
        "maximumJumps(nums = [7, 1, 2, 6], target = 1)",
        "maximumJumps(nums = [7, 3, 5, 2, 4, 7], target = 7)",
        "maximumJumps(nums = [7, 9, 8, 4, 9, 2], target = 6)",
        "maximumJumps(nums = [2,1,2,3,0,2,0,2,1], target = 2)",
        "maximumJumps(nums = [7, 1, 1, 8, 0, 6, 10, 10, 4], target = 2)"
    ],
    "sample_149": [
        "finalString(s = 'rtsng')",
        "finalString(s = \"string\")",
        "finalString(s = \"iirtsng\")",
        "finalString(s = \"tirngs\")",
        "finalString(s = \"isgni\")",
        "finalString(s = \"noon\")",
        "finalString(s = 'iirtng')",
        "finalString(s = 'magic')",
        "finalString(s = \"baba\")",
        "finalString(\"grail\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 1, 1, 1, 1])",
        "continuousSubarrays(A = [2,2,2,2])",
        "continuousSubarrays(A = [1,1,1,1,1])",
        "continuousSubarrays(A = [1, 1, 2, 2, 2, 3, 3, 3])",
        "continuousSubarrays(A = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "continuousSubarrays(A = [0,1,2,2,3,0,4,2])",
        "continuousSubarrays(A = [5,5,5,5,5])",
        "continuousSubarrays(A = [0, 1, 1, 0, 1, 1, 1, 1, 0])",
        "continuousSubarrays(A = [4, 2, 5, 3, 4, 4, 5, 2, 4, 2])",
        "continuousSubarrays(A = [1,1,3,4,1,2,5,6,7,8,9])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [2, 4, 6, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 4, 4, 5, 7])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [0, 1, 2, 3, 3, 2, 1, 0])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 5, 2])",
        "countCompleteSubarrays(nums = [0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3])"
    ],
    "sample_228": [
        "countWays(nums = [1,1,1,1])",
        "countWays(nums = [2,5,1,2,4,0])",
        "countWays(nums = [0,0,1,1,1,2,2,3,3,4])",
        "countWays(nums = [1, 1, 0, 0])",
        "countWays(nums = [0,0,0,1,0,0])",
        "countWays([1,1,1,1])",
        "countWays(nums = [1, 2, 0, 0])",
        "countWays(nums = [0,2,1,1,3])",
        "countWays(nums = [2,2,3,0,1,1])",
        "countWays(nums = [0, 0, 0, 1, 1, 1, 3, 3, 5, 5, 6, 6, 7, 8, 8, 9, 9, 9])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 3)",
        "maximumBeauty(nums = [1,1,1,2,2,2], k = 1)",
        "maximumBeauty(nums = [2, 4, 6, 8], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 7, 8, 10, 12], k = 2)",
        "maximumBeauty(nums = [3, 4, 2, 1, 5, 6], k = 3)",
        "maximumBeauty(nums = [6, 5, 4, 3, 2, 1], k = 3)",
        "maximumBeauty(nums = [2, 4, 6, 4, 1], k = 2)",
        "maximumBeauty(nums = [1, 1, 1, 1, 2, 2, 3, 3], k = 2)",
        "maximumBeauty(nums = [2,3,4,5,7], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [2, 3, 4, 5, 6])",
        "distinctDifferenceArray(a = [1, 2, 1, 3, 4, 3])",
        "distinctDifferenceArray(a = [1,2,3,4,5,6,7])",
        "distinctDifferenceArray(a = [1, 1, 2, 1, 1])",
        "distinctDifferenceArray(a = [4, 2, 2, 4, 4, 4])",
        "distinctDifferenceArray(a = [4, 1, 4, 5, 4])",
        "distinctDifferenceArray(a = [1, 1, 2, 3, 5, 6, 6, 6])",
        "distinctDifferenceArray(a = [1, 1, 2, 2, 2, 1, 2, 3])",
        "distinctDifferenceArray(a = [1,2,1,1,5,1,6,2,6,1,1,1])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,1,1,1,1])",
        "continuousSubarrays(a = [0, 1, 2, 3, 4])",
        "continuousSubarrays(a = [0, 0, 0, 0, 0])",
        "continuousSubarrays(a = [2,1,2,1,2,1,2,1,2])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays([1, 1, 2, 2, 3, 3, 3])",
        "continuousSubarrays(a = [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1])",
        "continuousSubarrays(a = [0, 2, 2, 2, 0, 2, 2, 0])",
        "continuousSubarrays(a = [1,2,2,2,1,1,2])",
        "continuousSubarrays(a = [1,2,2,3,4,5,5,5,5,6,7,8,9,10,11,12,13])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [2,2,2,2,2])",
        "continuousSubarrays(nums = [2, 2, 2, 2, 2])",
        "continuousSubarrays(nums = [2, 2, 2, 1, 2, 2, 1, 2, 2, 2])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(nums = [3, 1, 2, 4, 3])",
        "continuousSubarrays(nums = [1, 3, 2, 2, 5, 2, 3, 7])",
        "continuousSubarrays(nums = [3, 1, 1, 1, 3])",
        "continuousSubarrays(nums = [8, 1, 1, 1, 8])",
        "continuousSubarrays([5, 5, 5, 5, 5])",
        "continuousSubarrays(nums = [1, 2, 1, 3, 4, 5, 7])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12, 34, 25, 10, 18, 98])",
        "countBeautifulPairs(nums = [2, 1, 2, 1])",
        "countBeautifulPairs(nums = [12, 35, 10, 1, 20])",
        "countBeautifulPairs([12, 34, 23, 56])",
        "countBeautifulPairs([2, 5, 2, 3, 3, 5])",
        "countBeautifulPairs(nums = [12, 34, 25, 13, 1212, 9192, 10, 22])",
        "countBeautifulPairs(nums = [12, 15, 13, 16, 25, 28])",
        "countBeautifulPairs(nums = [689, 101, 290, 899, 995, 899, 101])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 5, 4, 3, 2])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6])",
        "semiOrderedPermutation(nums=[1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 4, 6, 3, 5])",
        "semiOrderedPermutation(nums = [3, 1, 1, 1, 4, 5, 2])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 2, 2, 2, 3, 4, 2])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])",
        "semiOrderedPermutation(nums = [1, 5, 4, 2, 3])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 0, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1,0,1,1,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,1,0])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = '01001')",
        "maximumOddBinaryNumber(s = '01001')",
        "maximumOddBinaryNumber(s = '010111')",
        "maximumOddBinaryNumber(s = '11001011')",
        "maximumOddBinaryNumber(s = \"1111\")",
        "maximumOddBinaryNumber(s = '01101010010111')",
        "maximumOddBinaryNumber(s = '0000000111111111000000000')"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 3, 3, 3, 6])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,1,1,2,2,2,3,3])",
        "countCompleteSubarrays(nums = [2, 1, 2, 1, 3, 1, 2, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDCD\")",
        "minLength(\"ABABCDCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCDCDCD\")",
        "minLength(s = \"ABCCDAB\")",
        "minLength(s = \"ABCDEFABCDCD\")",
        "minLength(s = \"ABCDEFGH\")",
        "minLength(s = \"ABCDEABCDEABCD\")",
        "minLength(s = \"ABAACDAD\")",
        "minLength(s = \"ABCDEFGABCDEFGAB\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,1,3,3,5,5,7,7])",
        "countCompleteSubarrays(nums = [1,2,3,4])",
        "countCompleteSubarrays(nums = [1,1,2,1,2])",
        "countCompleteSubarrays(nums = [2,2,2])",
        "countCompleteSubarrays(nums = [0, 1, 1, 0, 1])",
        "countCompleteSubarrays(nums = [1, 1, 0, 1, 1])",
        "countCompleteSubarrays(nums = [1,2,1,1,2,1])",
        "countCompleteSubarrays(nums = [5, 8, 5, 1, 5, 9, 9, 4])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 6, num2 = 4)",
        "makeTheIntegerZero(num1 = 3, num2 = 4)",
        "makeTheIntegerZero(num1 = 5, num2 = 4)",
        "makeTheIntegerZero(num1 = 23, num2 = 7)"
    ],
    "sample_100": [
        "maximumJumps(nums = [2, 7, 9, 3, 1], target = 6)",
        "maximumJumps(nums = [10,16,3,7,15,3,5,1], target = 2)",
        "maximumJumps(nums = [1, 5, 6, 1, 9, 3, 4, 3, 2, 7, 10, 2], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [3, 2, 1, 4], target = 1)",
        "maximumJumps(nums = [7, 7, 1, 1], target = 3)",
        "maximumJumps(nums = [3, 4, 2, 6, 3, 2, 4, 6], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 8, 9, 10, 14, 16, 20], target = 10)",
        "maximumJumps(nums = [1,5,6,1,1,1,5,6,1,1,1,5,6,1,1,1,1,1,1,1,5,6,1,1,1,1], target = 10)",
        "maximumJumps(nums = [2, 4, 2, 0, 2, 2, 4, 4, 2, 4], target = 3)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [3, 4, 3, 2, 5])",
        "maxIncreasingGroups(x = [1, 3, 2])",
        "maxIncreasingGroups([1,2,3,4,5,6,7,8,9])",
        "maxIncreasingGroups(x = [3, 5, 1, 2, 4])",
        "maxIncreasingGroups(x = [10, 10, 1, 2, 3, 4, 10])",
        "maxIncreasingGroups([10, 5, 2, 7, 4])",
        "maxIncreasingGroups(x = [2, 1, 2, 3, 4, 2, 1, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 16])",
        "maxIncreasingGroups(x = [10, 70, 20, 30, 50, 11, 29, 59, 39, 58])",
        "maxIncreasingGroups(x = [10, 7, 8, 11, 13, 21, 3, 1, 2, 9])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLRRL\")",
        "furthestDistanceFromOrigin(moves = \"RL_RL_L\")",
        "furthestDistanceFromOrigin(\"RL_RL_\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLL_LR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLRLRRRRRLRLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLRLLRLLRRRLRLLRRRLR\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = \"0101\")",
        "maximumOddBinaryNumber(s = \"0010\")",
        "maximumOddBinaryNumber(s = \"0000\")",
        "maximumOddBinaryNumber(s = \"101010\")",
        "maximumOddBinaryNumber('100111')",
        "maximumOddBinaryNumber(s = \"1010011010\")",
        "maximumOddBinaryNumber(s = '100101000000')"
    ],
    "sample_6": [
        "colorTheArray(n = 4, queries = [[0,0],[1,1],[2,0],[3,1],[3,2],[2,1]])",
        "colorTheArray(n = 5, queries = [[0,0],[1,0],[2,1],[2,1],[3,1],[3,1],[4,0]])",
        "colorTheArray(n = 2, queries = [[1, 1], [2, 2], [1, 0], [1, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1,4],[1,2],[1,2],[1,4],[1,3],[1,4],[1,3]])",
        "colorTheArray(n = 4, queries = [[3, 1], [1, 1], [2, 2], [2, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4],[0,4],[0,1],[2,1],[1,3],[4,4]])",
        "colorTheArray(n=7, queries=[[1,1],[3,2],[5,2],[6,2],[7,1],[7,2]])",
        "colorTheArray(n = 5, queries = [[0,1],[0,1],[0,2],[1,3],[1,4],[1,5],[4,5]])",
        "colorTheArray(n = 5, queries = [[0,0], [0,1], [0,0], [0,2], [2,2], [0,2], [0,0], [0,2], [2,2], [2,2]])",
        "colorTheArray(10, [[5,2],[5,2],[0,3],[6,6],[4,3],[9,3],[8,3],[3,5],[1,2],[9,1]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [3, 1, 3])",
        "findValueOfPartition(nums = [1, 6, 8, 4, 5])",
        "findValueOfPartition(nums = [2, 4, 2, 4])",
        "findValueOfPartition(nums = [1,3,4])",
        "findValueOfPartition(nums = [3, 1, 2, 10, 11])",
        "findValueOfPartition(nums = [2, 1, 4, 8, 10])",
        "findValueOfPartition(nums = [0, 1, 3, 8, 5])",
        "findValueOfPartition(nums = [1, 1, 1, 2, 2, 2, 2, 3, 3, 3])",
        "findValueOfPartition(nums = [10, 12, 15, 27, 30])",
        "findValueOfPartition(nums = [420, 235, 15, 25, 450])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1])",
        "numberOfGoodSubarraySplits([1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,0,0,1,1,0,1,1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [3, 4, 5, 1, 2])",
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [1,2,3,4,5])",
        "minimumIndex(nums = [1,3,5])",
        "minimumIndex([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4])",
        "minimumIndex(nums = [1,1,5,0])",
        "minimumIndex(nums = [1,1,1,2,2,2,3,3,3,3,4,4,4])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [12,15,1024], k = 2)",
        "sumIndicesWithKSetBits(nums = [12,15,1024], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 0)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,4,7,8,10], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 17, 100], k = 2)",
        "sumIndicesWithKSetBits(nums = [12,15,10,4,5,2], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 4, offers = [[1, 3, 2], [2, 4, 3]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 6, offers = [[0, 1, 2], [0, 2, 1], [2, 3, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [3, 5, 11], [6, 8, 2]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 1], [3, 4, 100], [2, 5, 20], [5, 6, 200]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 5, 10], [3, 6, 11], [5, 6, 20], [6, 7, 13], [7, 8, 15]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 1], [2, 5, 2], [1, 3, 2], [1, 5, 2], [3, 4, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [3, 5, 15], [6, 7, 10], [10, 12, 20]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 4], [3, 5, 2], [6, 8, 10], [8, 10, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 0, 2], [3, 0, 3], [3, 1, 1], [2, 0, 5], [3, 2, 4], [4, 4, 1], [2, 3, 3]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"010\")",
        "minimumOperations(num = \"00000000\")",
        "minimumOperations(num = \"0000000\")",
        "minimumOperations(num = \"25025\")",
        "minimumOperations(\"25050\")",
        "minimumOperations(num = \"2075\")",
        "minimumOperations(num = \"1221\")",
        "minimumOperations(num = \"111000111\")",
        "minimumOperations(\"0000257550\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"1000\")",
        "minimumOperations(num = \"250\")",
        "minimumOperations(num = \"100500\")",
        "minimumOperations(num = \"0505\")",
        "minimumOperations(num = \"100505\")",
        "minimumOperations(num = \"001201\")",
        "minimumOperations(num = \"17005\")",
        "minimumOperations(\"00075025\")",
        "minimumOperations(\"1000250000\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 2, offers = [[1, 1, 2], [2, 2, 3]])",
        "maximizeTheProfit(n = 2, offers = [[1, 1, 2], [2, 2, 3]])",
        "maximizeTheProfit(n=3, offers=[[1, 0, 1], [2, 1, 3], [3, 2, 4]])",
        "maximizeTheProfit(n = 4, offers = [[2, 2, 3], [3, 3, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,2],[2,5,3],[3,4,4]])",
        "maximizeTheProfit(n = 3, offers = [[0,0,1], [1,1,10], [2,2,100]])",
        "maximizeTheProfit(n = 3, offers = [[2, 1, 100], [3, 2, 100], [1, 3, 100], [1, 3, 200]])",
        "maximizeTheProfit(n = 3, offers = [[0,1,5],[1,2,1],[0,2,2],[2,3,3]])",
        "maximizeTheProfit(n=4, offers=[ [1, 2, 100], [2, 3, 100], [3, 4, 100], [1, 3, 200] ])",
        "maximizeTheProfit(n = 2, offers = [[1, 2, 10], [2, 3, 10], [2, 5, 20], [2, 6, 10], [5, 6, 20]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1,1,2,2,3], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 2, 1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,2,3,2,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,1,2,2,2,2,2,2,2], threshold = 1)",
        "longestAlternatingSubarray(nums = [2,1,2,1,2,1,2,1,2,1,2,1,2,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 2, 4, 5, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 3, 4, 3, 4, 6, 5, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6,7,8,3,6,7,2,1,4,5,5,7,6,7], threshold = 6)",
        "longestAlternatingSubarray(nums = [4, 6, 1, 4, 6, 3, 3, 1, 2, 2, 2, 2, 2, 4, 2, 1, 2, 2, 2], threshold = 5)"
    ],
    "sample_203": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(\"25\")",
        "minimumOperations(num = \"00100\")",
        "minimumOperations(num = \"75\")",
        "minimumOperations(\"123\")",
        "minimumOperations(num = \"70\")",
        "minimumOperations(\"123456789\")",
        "minimumOperations(\"2435\")",
        "minimumOperations(num = \"24242\")",
        "minimumOperations('400025')"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [4, 3], [1, 3], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 2], [2, 5]])",
        "colorTheArray(n = 7, queries = [[1, 3], [3, 6]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 2], [2, 5], [3, 4]])",
        "colorTheArray(n = 4, queries = [[1, 1],[2, 2],[3, 1],[2, 1],[2, 2],[1, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 3], [2, 1], [2, 2], [1, 2], [2, 1]])",
        "colorTheArray(n = 4, queries = [[0,0], [1,1], [2,2], [3,3], [0,0], [3,1], [3,2], [3,1], [0,0], [2,1], [2,1], [2,1], [2,1], [2,1], [2,1], [2,1], [2,1], [2,1]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 2, 2])",
        "minimumIndex([1, 1, 2, 2, 3, 1])",
        "minimumIndex([4, 4, 3, 3, 4, 4, 2])",
        "minimumIndex(nums = [1,2,3,1,4,0])",
        "minimumIndex(nums = [1, 2, 3, 1, 4, 0, 1, 2])",
        "minimumIndex(nums = [4,5,6,7,0,1,2,3])",
        "minimumIndex(nums = [1,2,2,1])",
        "minimumIndex([1,1,5,1,1])",
        "minimumIndex(nums = [1, 5, 7, 1, 7, 8, 7])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1,5,1,1,1], target = 1)",
        "maximumJumps(nums = [1, 5, 6, 1, 0, 2, 3], target = 3)",
        "maximumJumps(nums = [10, 16, 8, 12, 14, 4], target = 6)",
        "maximumJumps(nums = [100, 100, 1, 1, 1, 1, 100], target = 2)",
        "maximumJumps(nums = [1, 4, 3, 2], target = 1)",
        "maximumJumps(nums = [7,1,5,6,4], target = 3)",
        "maximumJumps(nums = [10,16,3,7,11,12], target = 5)",
        "maximumJumps(nums = [2, 4, 3, 3, 2, 5, 4, 2, 3, 2], target = 2)",
        "maximumJumps(nums = [3, 2, 5, 1, 7, 4], target = 4)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"00000000\")",
        "removeTrailingZeros(num = '512300100')",
        "removeTrailingZeros(num = '12300')",
        "removeTrailingZeros(num = '000012300')",
        "removeTrailingZeros(num = '00000000000012300')",
        "removeTrailingZeros(num = '50000000000')",
        "removeTrailingZeros(num = \"000000000051230100\")",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"0100101010101000001011\")"
    ],
    "sample_57": [
        "distanceTraveled(a = 10, b = 10)",
        "distanceTraveled(a = 5, b = 10)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 10, b = 20)",
        "distanceTraveled(a = 10, b = 20)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 5)",
        "distanceTraveled(a = 4, b = 3)",
        "distanceTraveled(a = 6, b = 3)",
        "distanceTraveled(a = 3, b = 1)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 4, 7])",
        "findValueOfPartition(a = [1,4,1,5])",
        "findValueOfPartition(a = [1, 3, 4, 5, 3])",
        "findValueOfPartition(a = [2, 3, 3, 2, 2])",
        "findValueOfPartition(a = [20, 70, 40, 80])",
        "findValueOfPartition(a = [1, 4, 3, 4, 4, 10, 2])",
        "findValueOfPartition(a = [5, 3, 1, 6, 8, 4, 10])",
        "findValueOfPartition(a = [3, 6, 10, 10, 15, 16])",
        "findValueOfPartition(a = [1, 4, 3, 4, 5, 4, 7, 3, 8, 6, 10, 10])",
        "findValueOfPartition(a = [1, 4, 8, 10, 14, 19, 30, 40])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1,2,2,3,3,3,4,4,4,4])",
        "distinctDifferenceArray(nums = [3, 4, 5, 5, 2, 1, 1, 1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4, 4, 4, 5, 5])",
        "distinctDifferenceArray(nums = [0, 1, 2, 2, 3, 4, 5, 6])",
        "distinctDifferenceArray(nums = [2, 2, 2, 1, 1, 4, 3, 3, 3])",
        "distinctDifferenceArray(nums = [3, 3, 2, 1, 2, 1, 1, 1])",
        "distinctDifferenceArray(nums = [0, 0, 1, 1, 1, 3, 4, 4, 5, 5, 5])",
        "distinctDifferenceArray(nums = [4, 2, 1, 3, 2, 4, 5, 2, 1, 1, 2, 5, 1, 1, 4, 2, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 3, 4, 1, 1, 4, 2, 1, 3, 2, 1, 3, 3, 4, 1, 2, 3, 3, 2, 3, 1, 2, 1, 4, 2, 1, 2, 4, 2, 1, 1, 3, 2, 1, 3, 3, 3, 2, 2, 3, 2, 1, 3, 3, 3, 1, 1, 1, 2, 3, 1, 2, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 3, 2, 2, 2, 1, 2, 3, 1, 3, 2, 1, 2, 3, 1, 3, 2, 1, 2, 1, 3, 2, 1, 1, 3, 3, 2, 1, 2, 1, 3, 3, 1, 1, 2, 3, 3, 1, 2, 2, 1, 1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 1, 2, 2, 2, 2, 2, 2, 1, 3, 2, 2, 3, 3, 3, 1, 3, 2, 2, 3, 1, 3, 2, 3, 2, 3, 1, 3, 3, 3, 1, 2, 1, 3, 1, 3, 2, 2, 3, 3, 1, 3, 1, 3, 3, 2, 2, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3,"
    ],
    "sample_120": [
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [1,2,3,4,5])",
        "minimumIndex(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minimumIndex(nums = [1,1,2,2,2,2])",
        "minimumIndex(nums = [3,4,4,5,2])",
        "minimumIndex(nums = [4, 5, 1, 2])",
        "minimumIndex(nums = [4, 3, 4, 4, 4])",
        "minimumIndex(nums = [3, 3, 3, 3, 3, 3])",
        "minimumIndex(nums = [2,2,3,4,5,3,3,2,5,3,2])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLR\")",
        "furthestDistanceFromOrigin(moves = \"RRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRLLRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRLLRRRR\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"banana\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"aaabbbbcccc\")",
        "minimizedStringLength(s = \"aaaaaa\")",
        "minimizedStringLength(\"aabbbc\")",
        "minimizedStringLength(s = \"aaabccde\")",
        "minimizedStringLength(s = \"aabbbcccdaabbb\")",
        "minimizedStringLength(s = \"aababba\")",
        "minimizedStringLength(s = \"hubba\")",
        "minimizedStringLength(s = \"cbaabc\")"
    ],
    "sample_105": [
        "checkArray(nums = [1,1,1], k = 2)",
        "checkArray(nums = [1,2,3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "checkArray(nums = [10, 5, 2, 7, 12, 3], k = 8)",
        "checkArray(nums = [4,3,2,4], k = 4)",
        "checkArray(nums = [2, 1, 1, 2, 3, 1, 4, 2], k = 3)",
        "checkArray(nums = [10, 20, 30, 40, 45, 35, 25], k = 4)",
        "checkArray(nums = [9, -6, -3, 3], k = 2)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [5, 1, 10, 2, 7])",
        "maxIncreasingGroups(usageLimits = [3, 1, 2, 3, 1])",
        "maxIncreasingGroups(usageLimits = [2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "maxIncreasingGroups(usageLimits = [1, 2, 4, 5, 2])",
        "maxIncreasingGroups(count = [1, 1, 1, 1, 1, 2, 2, 2])",
        "maxIncreasingGroups(usageLimits = [4, 2, 1, 4, 5, 2])",
        "maxIncreasingGroups(usageLimits = [11, 10, 6, 4, 2, 2, 1])",
        "maxIncreasingGroups(usageLimits = [6,10,3,1,6,8,2])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 3, 1, 4, 1, 5, 1, 3])"
    ],
    "sample_206": [
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"255\")",
        "minimumOperations(\"500\")",
        "minimumOperations(\"50250\")",
        "minimumOperations(num = \"77\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"970000\")",
        "minimumOperations(num = '01010')",
        "minimumOperations(\"444444444\")",
        "minimumOperations(\"0\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [0,0,0,0,0])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 1])",
        "doesValidArrayExist([1, 0, 1, 1])",
        "doesValidArrayExist([0, 0, 0, 1])"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"baaaab\")",
        "minimumCost(s = \"dabadd\")",
        "minimumCost(s = \"aabac\")",
        "minimumCost(s = \"XYZ\")",
        "minimumCost(s = \"alexandru\")",
        "minimumCost(s = \"3546783327\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(usageLimits = [10, 5, 2, 1])",
        "maxIncreasingGroups([1, 1, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [10, 5, 10, 10, 10])",
        "maxIncreasingGroups([1, 2, 3, 4, 5, 5, 5, 6])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])",
        "maxIncreasingGroups(usageLimits = [1,1,2,3,3])",
        "maxIncreasingGroups(usageLimits = [3, 2, 1, 3, 1, 2, 1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1,1,2,1,3,3,3])",
        "maxIncreasingGroups(usageLimits = [11, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_53": [
        "smallestString(s = \"cbacdcbc\")",
        "smallestString(s = 'zybaabc')",
        "smallestString('baabc')",
        "smallestString(s = \"abccba\")",
        "smallestString(\"abc\")",
        "smallestString(s = \"zyxw\")",
        "smallestString(s = \"bbaac\")",
        "smallestString(s = \"bbbaaccc\")",
        "smallestString(\"bacd\")",
        "smallestString(s = 'zybaaaxzyaa')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [4,2,1,3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 1, 3], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 1, 3], x = 2)",
        "minAbsoluteDifference(nums = [4,2,3,1], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 1, 3], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 3], x = 2)",
        "minAbsoluteDifference(nums = [4,2,3,1,5,6], x = 2)",
        "minAbsoluteDifference(nums = [2, 6, 10, 15, 1], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 1, 1], [2, 2, 1], [3, 3, 1]])",
        "maximizeTheProfit(N = 4, offers = [[0, 1, 0], [1, 2, 1], [0, 3, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 3], [2, 1, 4], [3, 1, 5]])",
        "maximizeTheProfit(N = 3, offers = [[3, 1, 3], [1, 1, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1, 1, 1], [2, 1, 1], [1, 2, 1], [1, 1, 2]])",
        "maximizeTheProfit(N = 3, offers = [[1, 3, 1], [1, 3, 1], [2, 3, 1]])",
        "maximizeTheProfit(N = 2, offers = [[2, 2, 2], [3, 0, 4], [2, 5, 1]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 2], [3, 3, 3], [1, 2, 2], [3, 3, 3], [1, 2, 2], [3, 3, 3], [1, 2, 2], [3, 3, 3], [1, 2, 2], [3, 3, 3], [1, 2, 2], [3, 3, 3], [1, 2, 2], [3, 3, 3]])",
        "maximizeTheProfit(N = 4, offers = [[2, 2, 2], [2, 3, 1], [1, 3, 1], [1, 7, 5], [2, 4, 1], [2, 5, 2], [3, 2, 2]])",
        "maximizeTheProfit(N = 3, offers = [[2, 2, 1], [1, 3, 10], [2, 5, 20], [2, 4, 25], [3, 2, 5], [1, 3, 7]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"a,b,c\", \"d,e,f\"], b = \",\")",
        "splitWordsBySeparator(a = [\"an apple a day\", \"keeps the doctor away\"], b = \" \")",
        "splitWordsBySeparator(a = [\"a-b-c\", \"a--c\", \"a-c\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"a\", \"ab\", \"abc\", \"abcd\"], b = \"b\")",
        "splitWordsBySeparator(a = [\"a|b|c\", \"a||b||c\"], b = \"|\")",
        "splitWordsBySeparator(a = [\"sss\", \"ttt\"], b = \"tt\")",
        "splitWordsBySeparator(a = [\"xxx\", \"x\", \"xx\"], b = \"x\")",
        "splitWordsBySeparator(a = [ \"abc\", \"de\", \"fghi\"], b = \"de\")",
        "splitWordsBySeparator(a = [\"peach\", \"kiwi\", \"strawberry\", \"blueberry\", \"coconut\"], b = \"berry\")",
        "splitWordsBySeparator(a = [\"hello-world\", \"py-challenge\", \"intro-to-python\"], b = \"-\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '5123001')",
        "removeTrailingZeros(a = '12000')",
        "removeTrailingZeros(a = '100000')",
        "removeTrailingZeros(a = '000000000001234000')",
        "removeTrailingZeros(a = '000012300')",
        "removeTrailingZeros(a = '0005123010')",
        "removeTrailingZeros(a = '010000512301')",
        "removeTrailingZeros(a = '10000000000000000')",
        "removeTrailingZeros(a = \"0000101020300000000000000000000\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'racecar')",
        "makeSmallestPalindrome(s = 'nevnev')",
        "makeSmallestPalindrome(\"n\")",
        "makeSmallestPalindrome(s = \"nneven\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = 'abracadabra')",
        "makeSmallestPalindrome(\"level\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 0)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 4, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 4, 3], k = 2)",
        "longestEqualSubarray(nums = [3, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [3, 2, 3, 2, 2, 2, 3, 3, 3, 4], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 2, 3, 4, 7, 8], k = 3)",
        "maximumBeauty(nums = [1,2,3,1], k = 3)",
        "maximumBeauty(nums = [2, 1, 4, 3], k = 3)",
        "maximumBeauty(nums = [2, 3, 4, 8], k = 3)",
        "maximumBeauty(nums = [1, 5, 2, 4, 3], k = 0)",
        "maximumBeauty(nums = [1,3,7,26], k = 10)",
        "maximumBeauty(nums = [1,2,5,3,2,1], k = 2)",
        "maximumBeauty(nums = [2, 1, 4, 5, 7, 2, 0], k = 3)",
        "maximumBeauty(nums = [2, 1, 5, 6, 6, 6], k = 3)"
    ],
    "sample_163": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [3, 5])",
        "maxSum(nums = [1000000, 1000000, 1000000])",
        "maxSum(nums = [1,5])",
        "maxSum(nums = [12, 9, 16, 5, 10])",
        "maxSum(nums = [2, 4, 1, 3, 5])",
        "maxSum([13, 10, 4, 1, 2])",
        "maxSum(nums = [6, 2, 3, 3, 5, 6])",
        "maxSum(nums = [11, 100, 330, 70, 88, 120])"
    ],
    "sample_151": [
        "finalString(s = \"string\")",
        "finalString(s = 'sit')",
        "finalString(s = \"i'm a string\")",
        "finalString(s = 'this is a string')",
        "finalString(s = 'trash')",
        "finalString(s = \"iitg\")",
        "finalString(s = 'iitsk')",
        "finalString(s = 'snoin')",
        "finalString(s = \"it is going to rain tomorrow\")",
        "finalString(s = \"the bird\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"30100\")",
        "removeTrailingZeros(num = \"0123000\")",
        "removeTrailingZeros(num = \"123000\")",
        "removeTrailingZeros(num = \"2100\")",
        "removeTrailingZeros(num = \"0000123456700\")",
        "removeTrailingZeros(num = '00000123000000001')",
        "removeTrailingZeros(num = \"01002003\")",
        "removeTrailingZeros(num = \"00000010230\")",
        "removeTrailingZeros(num = \"010010212100001\")"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"1110\")",
        "maximumOddBinaryNumber(s = \"00110\")",
        "maximumOddBinaryNumber(\"001\")",
        "maximumOddBinaryNumber(s = \"01001\")",
        "maximumOddBinaryNumber(s = '100111')",
        "maximumOddBinaryNumber(s = '1111100000')",
        "maximumOddBinaryNumber(s = \"00000\")",
        "maximumOddBinaryNumber(s = \"0001110001\")",
        "maximumOddBinaryNumber(s = '10101101111')",
        "maximumOddBinaryNumber(s = \"11100010110\")"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy_problem\"], separator = \"_\")",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = ' ')",
        "splitWordsBySeparator(words = ['easy_problem', 'hard'], separator = '_')",
        "splitWordsBySeparator(words = [\"easy: problem\"], separator = \": \")",
        "splitWordsBySeparator(words = ['easyp', 'problem'], separator = 'p')",
        "splitWordsBySeparator(words = [\"a:b:c:d\", \"e:f:g\"], separator = \":\")",
        "splitWordsBySeparator(words = [\"a\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"easy-problem\", \"but-not-this-one\", \"not-even-this-one\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"a@@b@c@d\", \"e@fff@ggg@hh\"], separator = \"@\")",
        "splitWordsBySeparator(words = [\"easytoproblem\", \"ooproblem\", \"easytoproblem\"], separator = \"problem\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,1,2,3,4,3], K = 2)",
        "longestEqualSubarray(A = [1, 1, 1, 2, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,1,2,3,4], K = 3)",
        "longestEqualSubarray(A = [1, 1, 1, 2, 2, 2], K = 0)",
        "longestEqualSubarray(A = [1, 2, 3, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [3, 3, 3, 3, 3], K = 0)",
        "longestEqualSubarray(A = [3, 2, 3, 2, 3, 2, 3, 2, 3, 2], K = 3)",
        "longestEqualSubarray(A = [1, 2, 1, 1, 1, 1, 2, 2], K = 2)",
        "longestEqualSubarray(A = [1,2,1,2,3,1,2,1,1,1], K = 0)",
        "longestEqualSubarray(A = [2, 3, 4, 3, 2, 2, 2, 3, 4, 2], K = 0)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [3, 4, 5])",
        "countWays(nums = [2, 2, 3, 3])",
        "countWays(nums = [3,1,2])",
        "countWays(nums = [1, 2, 1])",
        "countWays(nums = [1, 2, 1])",
        "countWays(nums = [4, 6, 235, 1, 0])",
        "countWays(nums = [1, 0, 0, 0, 1])",
        "countWays(nums = [1, 2, 2, 1, 2])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1,1,3,4,5,0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,1,3,4,5,0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 0)",
        "sumIndicesWithKSetBits(nums = [3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [12,1,12,4,5,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,1,0,1,1,0,1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 2, 5], k = 0)",
        "sumIndicesWithKSetBits(nums = [5, 11, 10, 3, 13, 2], k = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '123000')",
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = '123400')",
        "removeTrailingZeros(num = '10000')",
        "removeTrailingZeros(num = \"500000\")",
        "removeTrailingZeros(num = '310005')"
    ],
    "sample_167": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"dear\", \"ini\", \"me\"], s = \"DIN\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"question\"], s = \"thisisquestion\")",
        "isAcronym(words = [\"hel\", \"lo\", \"wor\", \"ld\"], s = \"hello\")",
        "isAcronym(words = [\"de\", \"eg\"], s = \"deeg\")",
        "isAcronym(words = [\"dear\", \"thanks\", \"best\", \"Regards\"], s = \"DTHB\")",
        "isAcronym(words = [\"donkey\", \"kicks\", \"ass\"], s = \"dka\")",
        "isAcronym(words = [\"MERN\", \"stack\", \"overflow\"], s = \"stack\")",
        "isAcronym(words=[\"attention\", \"be\", \"very\", \"open\"], s=\"atvo\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,1,1,1,3,3,3,3,2,2,2])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,2,1,1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 1, 2])",
        "countCompleteSubarrays(nums = [2, 2, 2, 2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 3, 1])",
        "countCompleteSubarrays(nums = [3, 5, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 3, 5, 2])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 1, target = 3)"
    ],
    "sample_147": [
        "finalString(s = 'string')",
        "finalString(s = 'rtsn')",
        "finalString(s = \"radar\")",
        "finalString(s = \"riit\")",
        "finalString(s = \"gnirts\")",
        "finalString(s = \"siris\")",
        "finalString(s = \"ixtio\")",
        "finalString(s = 'sgnitrots')",
        "finalString(s = \"ciniminst\")",
        "finalString(s = \"roses\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = \"n\")",
        "makeSmallestPalindrome(s = 'abccba')",
        "makeSmallestPalindrome(s = \"ac\")",
        "makeSmallestPalindrome(s = 'nevermore')",
        "makeSmallestPalindrome(s = 'now')",
        "makeSmallestPalindrome(\"aecb\")"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 0, 5], [2, 1, 1], [4, 3, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 5, 10], [3, 4, 10]])",
        "maximizeTheProfit(n = 3, offers = [[0, 0, 0], [1, 0, 1], [2, 1, 3], [4, 2, 10], [0, 3, 100], [3, 3, 200]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 5], [2, 4, 6], [3, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 3], [2, 3, 2], [3, 3, 4]])",
        "maximizeTheProfit(n = 3, offers = [[0, 1, 2], [1, 2, 3], [0, 1, 4], [1, 2, 1], [0, 1, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [2, 5, 3], [3, 4, 2], [4, 4, 2]])",
        "maximizeTheProfit(n = 6, offers = [[0, 3, 5], [2, 5, 10], [3, 4, 10], [2, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [1, 2, 3], [1, 4, 1], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 3], [4, 3, 5], [3, 2, 3], [5, 5, 2], [1, 2, 4]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [7], target = 6)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 4)",
        "maximumJumps(nums = [1, 3, 6, 1, 0, 7], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [2, 3, 1, 4, 2], target = 2)",
        "maximumJumps(nums = [10,16,3,7,15,10], target = 2)",
        "maximumJumps(nums = [10,16,10,16,1,16,1,16], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [11, 11, 11], target = 11)",
        "maximumJumps(nums = [7, 6, 1, 4, 3, 2, 4, 6, 5, 1], target = 5)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([1,1,0,0,1,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,1,1,1,1,0,0])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"01100\")",
        "maximumOddBinaryNumber(s = '0101101')",
        "maximumOddBinaryNumber(s = \"0000111\")",
        "maximumOddBinaryNumber(s = \"10000100\")",
        "maximumOddBinaryNumber(s = \"1000110011\")",
        "maximumOddBinaryNumber('010110110001')"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 4, k = 8)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 7, num2 = 4)",
        "makeTheIntegerZero(num1 = 16, num2 = 2)",
        "makeTheIntegerZero(num1 = 4, num2 = 1)",
        "makeTheIntegerZero(num1 = 7, num2 = 1)",
        "makeTheIntegerZero(num1 = 12, num2 = 5)",
        "makeTheIntegerZero(num1 = 20, num2 = 4)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 5, target = 1)",
        "minimumPossibleSum(n = 5, target = 1)",
        "minimumPossibleSum(n = 4, target = 12)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [3,3,3,3,3], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [2, 3, 1, 5, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [23, 2, 6, 4, 7], modulo = 1000000007, k = 2)",
        "countInterestingSubarrays(nums = [23, 2, 6, 4, 7], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [3,1,4,1,5], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,3,2,3,3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,4,3,2,2,2], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [2,3,1,4,5,2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [3,1,5,4,2], modulo = 10, k = 4)",
        "countInterestingSubarrays(nums = [2, 3, 2, 3, 2, 2, 2], modulo = 3, k = 2)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [3, 1, 5, 4, 2], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1,1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,7,2,3,8,4,5,6], k = 3)",
        "maximumBeauty(nums = [3, 2, 2, 1, 4], k = 3)",
        "maximumBeauty(nums = [1, 3, 7, 11], k = 3)",
        "maximumBeauty(nums = [2, 3, 1, 4, 2, 1], k = 2)",
        "maximumBeauty(nums = [1, 7, 8, 10, 12, 14, 18, 20], k = 6)",
        "maximumBeauty(nums = [2, 3, 5, 4, 3, 7, 1], k = 3)"
    ],
    "sample_148": [
        "finalString(s = \"ponter\")",
        "finalString(s = \"pinter\")",
        "finalString(s = \"pointe\")",
        "finalString(s = \"piton\")",
        "finalString(s = 'tinerp')",
        "finalString(s = 'kitten')",
        "finalString(s = \"poiinter\")",
        "finalString(s = \"piion\")",
        "finalString(s = \"aibonter\")",
        "finalString(s = \"the cat in the hat\")"
    ],
    "sample_231": [
        "countWays(nums = [1, 0, 1, 3, 0, 5])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [0,1,2,3,4,5])",
        "countWays(nums = [2, 1, 3, 4])",
        "countWays(nums = [0, 3, 2, 1])",
        "countWays(nums = [1,2,0,0,1])",
        "countWays(nums = [1, 2, 2, 3, 4, 5, 0])",
        "countWays(nums = [2, 1, 1, 3, 1])",
        "countWays(nums = [1, 4, 1, 1])",
        "countWays(nums = [0,1,2,3,3,0])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [2, 8, 6, 5, 1])",
        "countBeautifulPairs([1, 2, 3, 4, 5, 6])",
        "countBeautifulPairs(nums = [2, 10, 6, 4, 1])",
        "countBeautifulPairs(nums = [28,35])",
        "countBeautifulPairs(nums = [6,12,20,18,10])",
        "countBeautifulPairs(nums = [12, 34, 22, 56, 48, 68])",
        "countBeautifulPairs(nums=[28, 36, 46, 41, 48])",
        "countBeautifulPairs(nums=[2,10,16,9,8,12])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 13, num2 = 4)",
        "makeTheIntegerZero(num1 = 9, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 11, num2 = 7)",
        "makeTheIntegerZero(num1 = 24, num2 = 7)",
        "makeTheIntegerZero(num1 = 22, num2 = 10)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"abcba\")",
        "makeSmallestPalindrome(s = 'eve')",
        "makeSmallestPalindrome(s = \"abebe\")",
        "makeSmallestPalindrome(s = \"nabe\")",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s = 'aaabbaa')",
        "makeSmallestPalindrome(\"racecar\")",
        "makeSmallestPalindrome(s = \"aaab\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEB\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEB\")",
        "isAcronym(words = [\"like\", \"sam\", \"sung\"], s = \"LKS\")",
        "isAcronym(words = [\"like\", \"sam\", \"sung\"], s = \"LKS\")",
        "isAcronym(words = [\"dear\", \"I\", \"love\", \"you\"], s = \"DILY\")",
        "isAcronym(words = [\"dear\", \"I\", \"have\", \"a\", \"joy\"], s = \"DIJAJ\")",
        "isAcronym(words = [\"debit\", \"card\", \"dispute\"], s = \"CCD\")",
        "isAcronym(words = [\"helo\", \"worl\", \"dom\"], s = \"HDM\")",
        "isAcronym(words = [\"deferred\", \"inoculation\", \"chronic\", \"microscopy\"], s = \"DIN\")",
        "isAcronym(words = [\"an\", \"array\", \"of\", \"the\"], s = \"anaryot\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,1,2,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 5, 7, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 4, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 0, 0, 0, 1, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [6,3,5,5,2,2,3,4], k = 1)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 10)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 12)",
        "minimumSum(n = 5, k = 5)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 2, 3, 4, 7, 7, 8])",
        "countWays(nums = [1, 3, 3, 3, 3])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [3, 1, 4, 1, 5])",
        "countWays(nums = [3, 1, 2])",
        "countWays(nums = [1, 3, 4, 5, 6, 7, 8])",
        "countWays(nums = [1,2,2,4,5,6])",
        "countWays(nums = [0, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5])",
        "countWays(nums = [2, 5, 3, 4, 3, 5, 3, 4, 1, 5])",
        "countWays(nums = [3, 5, 6, 7, 3, 4, 9, 2, 5, 6, 8, 6])"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"aababb\")",
        "minimumCost(s = \"abcbcba\")",
        "minimumCost(s = \"abaabab\")",
        "minimumCost(s = \"bbabc\")",
        "minimumCost(s = \"bbcde\")",
        "minimumCost(s = \"dcebacebca\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"R_LLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLR\")",
        "furthestDistanceFromOrigin(moves = \"RL\")",
        "furthestDistanceFromOrigin(moves = \"R_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_LRLL_LR\")",
        "furthestDistanceFromOrigin(moves = \"LLR_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLLLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLLRRRLLRLLL\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 3)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)",
        "distanceTraveled(mainTank = 12, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 4)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 15, additionalTank = 8)",
        "distanceTraveled(mainTank = 80, additionalTank = 10)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,1,2,2,2,2])",
        "countCompleteSubarrays(nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1])",
        "countCompleteSubarrays(nums = [1,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [2, 1, 2, 3, 5, 2])",
        "countCompleteSubarrays(nums = [1, 3, 3, 1, 3])",
        "countCompleteSubarrays(nums = [1,2,1,2,3,2,3,4])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [2, 1, 2, 1, 1, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 2, 1, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,1,0,0,1,0,0,1,1,0], threshold = 3)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 2, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [10,5,4,7,15], threshold = 10)",
        "longestAlternatingSubarray(nums = [1,4,2,3,1,4,2,3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 2, 1, 3, 6, 1, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [10, 30, 20, 40], threshold = 25)",
        "longestAlternatingSubarray(nums = [1,3,5,4,3,2,3,2,1,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 2, 4, 5, 6, 8, 10, 12, 14, 2, 4, 6, 8, 10], threshold = 2)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 1], [1, 2], [1, 3], [1, 4], [3, 4], [2, 4]])",
        "numberOfPoints(nums = [[1,3],[2,4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[-1, 5], [-2, 2], [4, 9]])",
        "numberOfPoints(nums = [[1, 2], [2, 4]])",
        "numberOfPoints(nums = [[-2, 2], [3, 3], [3, 4], [-1, 0], [-2, 1], [-1, 2]])",
        "numberOfPoints(nums = [[5,8],[3,6],[7,10]])",
        "numberOfPoints(nums = [[1,4], [2,2], [4,4]])",
        "numberOfPoints(nums = [[-10, -8], [0, 2], [-5, 5]])",
        "numberOfPoints(nums = [[-2, 5],[-8, -1],[-8, 0]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 3, 4, 2])",
        "countBeautifulPairs(nums = [12, 34, 22, 25])",
        "countBeautifulPairs(nums = [12, 35])",
        "countBeautifulPairs(nums = [5, 2, 2, 4, 1])",
        "countBeautifulPairs(nums = [6, 1, 3, 3, 7, 1, 9])",
        "countBeautifulPairs(nums = [6,12,18])",
        "countBeautifulPairs(nums = [2, 8, 6, 8, 2])",
        "countBeautifulPairs(nums = [12, 35, 23, 3, 7])",
        "countBeautifulPairs(nums = [36, 72, 9, 36])",
        "countBeautifulPairs(nums = [28, 68, 168, 6])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [2,1,2,1,2,2,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,3,3], t = 3)",
        "longestAlternatingSubarray(nums = [1,1,2,3,4,5], t = 3)",
        "longestAlternatingSubarray(nums = [1, 1, 0, 0, 1, 0, 1], t = 1)",
        "longestAlternatingSubarray(nums = [1,1,2,1,1,2,2,1], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,0,1,1,1,0,1], t = 1)",
        "longestAlternatingSubarray(nums = [2,1,1,2,2,2,2,2,1,2], t = 2)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,2,1,1,2,2,2,1,2,2,2,2,2], t = 3)",
        "longestAlternatingSubarray(nums = [1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1], t = 3)"
    ],
    "sample_36": [
        "minimumCost(s = \"aabbc\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(\"abcde\")",
        "minimumCost(s = \"bbab\")",
        "minimumCost(s = \"ABAAC\")",
        "minimumCost(s = \"cba\")",
        "minimumCost(\"ab\")",
        "minimumCost(s = \"xyzzaz\")",
        "minimumCost(\"aaabab\")",
        "minimumCost(s = \"baabbcac\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"AABBCDCD\")",
        "minLength(s = \"ABCEDA\")",
        "minLength(s = \"AABAACD\")",
        "minLength(s = \"CDABABABABAB\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [23,2,6,4,7], modulo = 13, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,3,3,2,2,2], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[1,2,3,3], modulo=3, k=3)",
        "countInterestingSubarrays(nums = [3,3,3,3,3,3,3,3,3,3], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,3,3,2,1,2,3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,6,4,3], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [2,3,4,5,6,7], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,7], modulo = 10, k = 1)",
        "countInterestingSubarrays(nums = [23, 2, 6, 2, 1, 17, 7, 9, 1, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [5,2,3,1,1,2,2,2], modulo = 3, k = 2)"
    ],
    "sample_9": [
        "colorTheArray(n = 5, queries = [[1, 0], [2, 1], [3, 0], [3, 1], [4, 1], [4, 0]])",
        "colorTheArray(n = 3, queries = [[0, 0], [1, 1], [2, 0], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0,0],[1,1],[4,0]])",
        "colorTheArray(n = 7, queries = [[1, 1], [2, 2], [3, 2], [4, 3], [5, 1], [6, 1], [7, 1]])",
        "colorTheArray(n = 4, queries = [[0, 0], [1, 0], [2, 1], [2, 2], [3, 1], [3, 2], [3, 3]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 1], [2, 2], [3, 2], [1, 2], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [4, 1], [4, 2], [2, 2], [3, 2], [0, 2], [0, 2]])",
        "colorTheArray(n = 6, queries = [[0, 2], [5, 0], [0, 0], [0, 3], [0, 3], [5, 3], [0, 5]])",
        "colorTheArray(n = 7, queries = [[5, 1], [1, 5], [0, 0], [1, 0], [0, 7], [0, 3], [4, 4], [3, 2], [2, 3], [0, 5]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 4], nums2 = [1, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(nums1 = [2, 4, 3], nums2 = [2, 4, 2])",
        "maxNonDecreasingLength(nums1 = [1, 5, 1, 1], nums2 = [1, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 9], nums2 = [4, 5, 6, 7])",
        "maxNonDecreasingLength(nums1 = [0, 1, 2, 4, 5, 7],\n                              nums2 = [1, 3, 4, 5, 6, 8])",
        "maxNonDecreasingLength(nums1 = [2, 4, 1, 2, 3], nums2 = [1, 2, 2, 2, 2])",
        "maxNonDecreasingLength(nums1 = [4, 3, 10, 10, 10], nums2 = [4, 3, 10, 10, 10])",
        "maxNonDecreasingLength(nums1 = [2, 3, 4, 1, 5],\n                              nums2 = [6, 3, 4, 1, 3])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 7)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [3, 4, 1])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [3, 2, 3, 1])",
        "findValueOfPartition(nums = [2])",
        "findValueOfPartition(nums = [2,1,3])",
        "findValueOfPartition(nums = [1, 3, 4, 2, 2])",
        "findValueOfPartition(nums = [0,0,0,1])",
        "findValueOfPartition(nums = [0,1,1,0,1,1])",
        "findValueOfPartition(nums = [3, 4, 1, 2, 10])",
        "findValueOfPartition(nums = [4, 1, 6, 7, 2])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LLRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RRLR\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = 'RRRLLL')",
        "furthestDistanceFromOrigin(moves = \"LRLRRRLRL\")",
        "furthestDistanceFromOrigin(moves = 'LRRLLL')",
        "furthestDistanceFromOrigin(moves = 'LLLLR_RRRR')",
        "furthestDistanceFromOrigin(moves = \"LLRRLRUUURRR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLR_R_LLRRLLRL\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4, 2])",
        "minimumIndex(nums = [4, 4, 3, 3, 1, 1])",
        "minimumIndex(nums = [0,0,0])",
        "minimumIndex(nums = [3,3,3,3,3])",
        "minimumIndex(nums = [1,2,1,3,1,4])",
        "minimumIndex(nums = [3, 4, 4, 5, 5, 2])",
        "minimumIndex(nums = [1, 2, 3, 1, 4, 0, 0, 2])",
        "minimumIndex(nums = [1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3, 5])",
        "semiOrderedPermutation(nums = [1, 2, 5, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 2])",
        "semiOrderedPermutation(nums = [1, 2, 4, 5, 3])",
        "semiOrderedPermutation(nums = [1,2,2,3,4,2,1])"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 8)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n=5, k=3)"
    ]
}