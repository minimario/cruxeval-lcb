{
    "sample_348": [
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6])",
        "alternatingSubarray(nums = [2, 1, 4, 3, 6, 5, 8, 7])",
        "alternatingSubarray(nums = [3,2,3,4,5])",
        "alternatingSubarray(nums = [1, 2, 4, 5, 3])",
        "alternatingSubarray(nums=[1, 2, 4, 3])",
        "alternatingSubarray(nums=[1,2,2,3,1])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1], [0]])",
        "matrixSum(a = [[1], [1]])",
        "matrixSum(a = [[1, 1], [1, 1]])",
        "matrixSum(a = [[0, 1, 2], [3, 4, 5]])",
        "matrixSum(a = [[0,1,0], [0,0,1], [1,1,1]])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [1, 0, 0, 1]])",
        "findChampion(grid = [[0,1,1],[1,0,1],[1,1,0]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0,1,0],[0,0,1],[1,0,0]])",
        "findChampion(grid = [[1,1,1,1], [0,1,0,1], [0,0,1,0], [0,1,0,1]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[0]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[1], [2]])",
        "matrixSum(a = [[1, 2, 3]])",
        "matrixSum(a = [[-1]])",
        "matrixSum(a = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(a = [[0,1,2],[1,2,3]])",
        "matrixSum(a = [[0,1,0], [0,0,0], [0,0,1]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums=[1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,4,2,3,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [0,1,0,1,0,1])",
        "alternatingSubarray(nums = [1, 4, 2, 5, 3])",
        "alternatingSubarray(nums = [0,1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [4, 2, 1, 3, 5, 6])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"banana\", \"grape\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"pig\"], x = \"g\")",
        "findWordsContaining(words=['banana', 'cherry', 'apple'], x='a')",
        "findWordsContaining(words = [\"peter\", \"piper\", \"pickled\", \"pepper\"], x = \"p\")",
        "findWordsContaining(words = [\"banana\", \"chair\", \"sofa\", \"carrot\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"fish\", \"rabbit\"], x = \"i\")",
        "findWordsContaining(words = [\"anaconda\", \"banana\", \"mango\", \"papaya\"], x = \"ana\")",
        "findWordsContaining(words = [\"paris\", \"rome\", \"berlin\", \"tokyo\", \"dubai\"], x = \"i\")",
        "findWordsContaining(words = [\"we\", \"like\", \"the\", \"happy\", \"mood\"], x = \"h\")",
        "findWordsContaining(words = [\"jazz\", \"bear\", \"violin\", \"music\"], x = \"a\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dacb\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"bbb\")",
        "canBeEqual(s1 = \"abb\", s2 = \"ab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abcd\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2], target = 1)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6], target = 7)",
        "lengthOfLongestSubsequence(nums = [], target = 100)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"abac\", s2 = \"baca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abcd\")",
        "canBeEqual(s1 = \"1111\", s2 = \"1111\")",
        "canBeEqual(s1 = \"1234\", s2 = \"1234\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1,2,2,3])",
        "maxSubarrays(nums = [1, 0, 2, 1, 1, 3])",
        "maxSubarrays(nums = [2, 2, 4, 2])",
        "maxSubarrays(nums=[3, 3, 1, 3, 2, 2, 2])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices=[1, 2, 3], money=1)",
        "buyChoco(prices = [10, 11, 12], money = 23)",
        "buyChoco(prices = [2, 1, 3], money = 1)",
        "buyChoco(prices = [10, 20, 100], money = 20)",
        "buyChoco(prices=[1, 2], money=0)",
        "buyChoco(prices = [3, 1, 2, 5], money = 2)",
        "buyChoco(prices = [10, 5, 8, 6], money = 13)",
        "buyChoco(prices = [25, 50, 100], money = 50)",
        "buyChoco(prices = [3, 4, 1, 100], money = 3)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1], l = 1, r = 1)",
        "countSubMultisets(nums = [1], l = 1, r = 1)",
        "countSubMultisets(nums = [1], l = 0, r = 1)",
        "countSubMultisets(nums = [1, 2], l = 1, r = 2)",
        "countSubMultisets(nums = [1,2,3], l = 1, r = 2)",
        "countSubMultisets(nums = [1, 1], l = 1, r = 2)",
        "countSubMultisets(nums = [1,2,3,4], l = 1, r = 4)",
        "countSubMultisets(nums = [2,2], l = 2, r = 4)",
        "countSubMultisets(nums=[1, 2, 2], l=1, r=2)",
        "countSubMultisets(nums = [1,1,1,2,2], l = 1, r = 2)"
    ],
    "sample_322": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 1)",
        "isFascinating(n = 2)",
        "isFascinating(n = 10)",
        "isFascinating(n = 3)",
        "isFascinating(n = 111111)",
        "isFascinating(n = 28)",
        "isFascinating(n = 1001)",
        "isFascinating(n = 148)",
        "isFascinating(n = 1121)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abac\", s2 = \"baca\")",
        "canBeEqual(s1 = \"abac\", s2 = \"baca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abac\", s2 = \"abca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"1325\", s2 = \"2314\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [2, 5, 7, 1])",
        "minimumCoins(prices = [5, 3, 7, 1, 8, 2, 6, 4])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 95)",
        "accountBalanceAfterPurchase(p = 35)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 30)",
        "accountBalanceAfterPurchase(p = 195)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 2])",
        "minOperations(nums = [3,3,3,3])",
        "minOperations(nums = [1, 1, 2, 3])",
        "minOperations(nums = [2, 3, 5])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums=[1, 1, 2, 3, 4, 4])",
        "minOperations(nums=[3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 2, 2, 2])",
        "alternatingSubarray(nums=[1, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 4, 4, 4])",
        "alternatingSubarray(nums = [1,2,3,3,3,3])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4])",
        "alternatingSubarray(nums=[1, 2, 2, 2, 2, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 2, 3, 3, 4, 5])"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 2, limit = 2)"
    ],
    "sample_247": [
        "minOperations(s1 = \"ab\", s2 = \"bc\", x = 1)",
        "minOperations(s1 = \"ab\", s2 = \"ac\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"bcd\", x = 2)",
        "minOperations(s1 = \"abab\", s2 = \"abba\", x = 3)",
        "minOperations(s1 = \"abc\", s2 = \"abc\", x = 0)",
        "minOperations(s1 = \"abcd\", s2 = \"abef\", x = 5)",
        "minOperations(s1 = \"ababab\", s2 = \"ababac\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"abcf\", x = 2)",
        "minOperations(s1 = \"xyx\", s2 = \"xyy\", x = 1)",
        "minOperations(s1 = \"babab\", s2 = \"babab\", x = 5)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 4, y = 5, z = 1)",
        "longestString(x = 4, y = 5, z = 1)",
        "longestString(x = 2, y = 2, z = 1)",
        "longestString(x = 3, y = 1, z = 2)",
        "longestString(x = 4, y = 1, z = 1)",
        "longestString(x = 10, y = 8, z = 5)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [1,2,3,4,5,6,7], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 4)",
        "minOperations(nums = [3, 1, 3, 2, 4, 3], k = 3)",
        "minOperations(nums = [14,1,7,7], k = 2)",
        "minOperations(nums = [14, 10, 5], k = 1)",
        "minOperations(nums = [5, 2, 4, 6, 1], k = 2)",
        "minOperations(nums = [14, 2, 15, 8, 14, 4, 1, 10, 12, 7, 15], k = 3)",
        "minOperations(nums=[14, 8, 7, 15, 16, 5, 13, 2, 11, 1], k=5)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"geeksforgeeks\")",
        "longestSemiRepetitiveSubstring(s = \"abaaba\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abacbab\")",
        "longestSemiRepetitiveSubstring(s = \"aabacbebebe\")",
        "longestSemiRepetitiveSubstring(s = \"aababcaab\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbbbbba\")",
        "longestSemiRepetitiveSubstring(s = \"qwertyuiooppa\")",
        "longestSemiRepetitiveSubstring(s = \"fdbdccdbba\")"
    ],
    "sample_361": [
        "isGood(a = [0, 1, 2, 3, 4, 5, 6, 7])",
        "isGood(a = [1, 2, 2, 3, 3, 3])",
        "isGood(a = [1, 2, 1, 3])",
        "isGood(a = [0, 1, 1, 3, 4])",
        "isGood(a = [3, 2, 1, 0])",
        "isGood(a = [1, 0, 0, 2, 2])",
        "isGood(a = [2, 0, 2])",
        "isGood(a = [0, 1, 1, 2, 3, 4, 5, 5, 6])",
        "isGood(a = [3, 2, 1, 0, 1, 2])",
        "isGood(a = [0, 1, 2, 3, 2, 5, 6])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 100, m = 11)",
        "differenceOfSums(n=100, m=7)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [4, 3, 3, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 2, 1])",
        "minGroupsForValidAssignment(nums=[3, 1, 1, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [5, 5, 3, 1, 3, 5, 4, 2, 4, 5, 5, 4, 5, 3])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 2, 2, 2, 3, 3, 1, 2, 1, 2, 3, 1, 2, 2, 1, 2, 2, 1, 1, 2, 3, 1])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"level\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"b\",\"c\",\"c\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"c\", \"d\", \"a\", \"b\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11001001\", k = 2)",
        "shortestBeautifulSubstring(s = \"100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"101110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"00101\", k = 1)",
        "shortestBeautifulSubstring(s = \"01101111\", k = 3)",
        "shortestBeautifulSubstring(s = '1231111', k = 3)",
        "shortestBeautifulSubstring(s = \"1000110100110\", k = 2)",
        "shortestBeautifulSubstring(s = \"00110011011011000110\", k = 2)",
        "shortestBeautifulSubstring(s
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 3, 2])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 7])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 5])",
        "minimumRightShifts(nums = [0, 1, 1, 1])",
        "minimumRightShifts(nums = [2, 1, 3, 4, 5])",
        "minimumRightShifts(nums = [5,6,8,9])",
        "minimumRightShifts(nums = [1,3,2,4,5])",
        "minimumRightShifts(nums=[3, 1, 2])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"01101\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = '111')",
        "minimumSteps(s = \"110110\")",
        "minimumSteps(s = \"100111\")",
        "minimumSteps(s = \"011110101101001\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeksquiz\", s3 = \"geeksquiz\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"ca\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"de\")",
        "findMinimumOperations(s1 = \"geeks\", s2 = \"geeksforgeeks\", s3 = \"geeksfor\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"xz\", s3 = \"yx\")",
        "findMinimumOperations(s1 = \"geeks\", s2 = \"geeks\", s3 = \"geeky\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abd\", s2 = \"aed\", s3 = \"abc\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ade\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"bca\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bc\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"abcde\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xza\")",
        "canMakeSubsequence(str1 = \"w\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"abcdgfe\")"
    ],
    "sample_364": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3])",
        "isGood(nums=[1,2,3])",
        "isGood(nums=[2, 3, 4, 5])",
        "isGood(nums = [2,3,4,5])",
        "isGood(nums = [3, 4, 1, 2])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums=[1,2,3,4], target=5)",
        "countPairs(nums=[1, 1, 1, 1], target=2)",
        "countPairs(nums = [1, 1, 2, 2, 2, 3], target = 4)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [8])",
        "relocateMarbles(nums = [4, 5, 6, 8, 9], moveFrom = [4, 6], moveTo = [10, 12])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [3, 7])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2, 3, 4], moveTo = [1, 2, 3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [12, 13])",
        "relocateMarbles(nums=[1,2,3,4,5,6,7,8,9], moveFrom=[2,4,6], moveTo=[5,7,8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 8, 9], moveFrom = [2, 4], moveTo = [4, 8])",
        "relocateMarbles(nums = [5, 5, 8, 9], moveFrom = [8], moveTo = [8, 9])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9], moveFrom = [2, 3, 4, 7], moveTo = [3, 4, 5, 6])",
        "relocateMarbles(nums = [5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 9, 10, 10, 10, 10], moveFrom = [7, 8], moveTo = [11, 12])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 8)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 3)",
        "countPairs(nums = [1, 3, 2, 4], target = 5)",
        "countPairs(nums=[1, 1, 1, 1], target=2)",
        "countPairs(nums = [1, 1, 2, 3], target = 4)",
        "countPairs(nums = [1, 1, 2, 3, 4, 4], target = 6)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums = [1,2,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7])",
        "minLengthAfterRemovals(nums = [1,2,3,3,4,4,4,5,5,5,5])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums=[1, 1, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [5,1,6,8,2,9,3,7])",
        "minLengthAfterRemovals(nums = [4, 4, 1, 1, 1, 3, 4, 2, 2, 3, 1, 3])",
        "minLengthAfterRemovals(nums = [5, 5, 3, 4, 1, 2, 4, 2, 1, 5, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"
    ],
    "sample_303": [
        "countSeniors(details = ['name1, 1990', 'name2, 1970'])",
        "countSeniors(details = [\"Mike, 70\", \"Jane, 60\", \"Bob, 25\"])",
        "countSeniors(details = [\"Ann - 70\", \"Bill - 34\", \"Charlie - 75\"])",
        "countSeniors(details = [\"Brad Pitt - 65\", \"Cate Blanchett - 59\", \"Tom Hanks - 64\"])",
        "countSeniors(details=[\"Davis, Sally, 03/24/1956, 123456789\"])",
        "countSeniors(details = ['123 Main St, Anytown, USA, 19700101', '456 Elm St, Anytown, USA, 19500202', '789 Oak St, Anytown, USA, 19800303', '321 Pine St, Anytown, USA, 19750404'])",
        "countSeniors(details = [\"John Smith 1987-12-01\", \"Amy Johnson 1999-02-28\", \"Bob Brown 1970-01-01\", \"David Wilson 1990-06-15\"])",
        "countSeniors(details = ['Alice,F,25,1994/05/21', 'Bob,M,35,1984/09/12', 'Charlie,M,67,1952/12/03', 'David,M,70,1950/02/28'])",
        "countSeniors(details = [\"James;Male;1972;8\", \"Lily;Female;1992;9\", \"Sam;Male;2002;10\", \"Jill;Female;1962;11\"])",
        "countSeniors(details = [\"Harris, John, 2121\", \"Smith, Mark, 3232\", \"Cornish, Karen, 6161\", \"Brown, Lena, 6262\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"ababaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"ababbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabca\")",
        "longestSemiRepetitiveSubstring(s = \"baaab\")",
        "longestSemiRepetitiveSubstring(s = \"abbbaba\")",
        "longestSemiRepetitiveSubstring(s = \"ababbbabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abdefghgf\")",
        "longestSemiRepetitiveSubstring(s = \"ceaeb\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bad\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"badc\")",
        "canBeEqual(s1 = \"aac\", s2 = \"aba\")",
        "canBeEqual(s1 = \"axc\", s2 = \"ayc\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"abab\", s2 = \"abab\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"abx\", s2 = \"aby\", s3 = \"abz\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xz\", s3 = \"xy\")",
        "findMinimumOperations(s1 = \"xyx\", s2 = \"xxy\", s3 = \"xyy\")",
        "findMinimumOperations(s1 = \"abce\", s2 = \"abde\", s3 = \"abce\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"dabc\", s2 = \"abad\", s3 = \"abac\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums=[], target=0)",
        "lengthOfLongestSubsequence(nums=[], target=2)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8], target = 9)",
        "lengthOfLongestSubsequence(nums=[1, 1, 1], target=3)",
        "lengthOfLongestSubsequence(nums=[1,1,2,3], target=4)",
        "lengthOfLongestSubsequence(nums=[3, 2, 1, 4, 5], target=3)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1])",
        "minimumSum(nums = [])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [3])",
        "minimumSum(nums = [5,4,3,2,1])",
        "minimumSum(nums=[])",
        "minimumSum(nums = [5, 4, 2, 1])",
        "minimumSum(nums = [4, 2, 5, 1, 3])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"x\", \"y\", \"z\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"h\", \"a\", \"n\", \"n\", \"a\", \"h\"])",
        "minimizeConcatenatedLength(words = [\"c\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"p\", \"pp\", \"ppp\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"c\", \"a\", \"e\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"ch\", \"ca\", \"to\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "shortestBeautifulSubstring(s = \"11011100\", k = 3)",
        "shortestBeautifulSubstring(s = \"11011000\", k = 3)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"010101010101010101\", k = 3)",
        "shortestBeautifulSubstring(s = \"01010101010101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1011111\", k = 2)",
        "shortestBeautifulSubstring(s = '1111111111', k = 3)",
        "shortestBeautifulSubstring(s = \"0100110110001010011011000101001101100010100110110001010011011000101001101100010100110110001010011011000101001101100010100110110001010011011000101001101100010100110110001010011011000101001101100010100110110001010011011000101001101100010100110110001010011011000101001101100010100110110001010011011000101001101100010100110110001010011011000101001101100010100110110001010011011000101001101100010100110110001010011011000101001101100010100110110001010011011000101001101100010100110110001010011011000101001101100010100110",
        "shortestBeautifulSubstring(s = '110010101011011000110', k = 3)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\",\"ef\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"bt\", \"nat\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"hello\",\"world\"])",
        "minimizeConcatenatedLength(words = [\"dog\", \"cat\", \"apple\"])",
        "minimizeConcatenatedLength(words = [\"chair\", \"height\", \"racket\", \"touch\", \"tunic\"])",
        "minimizeConcatenatedLength(words = [\"cat\",\"bt\",\"dog\",\"at\"])",
        "minimizeConcatenatedLength(words=[\"abc\", \"cde\", \"efg\"])",
        "minimizeConcatenatedLength(words = ['cat', 'dog', 'cad'])",
        "minimizeConcatenatedLength(words = [\"kabcd\",\"efgh\",\"ij\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 4, m = 2)",
        "differenceOfSums(n = 4, m = 2)",
        "differenceOfSums(n=8, m=3)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 2, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 1, 2])",
        "alternatingSubarray(nums = [1,2,4,3,5,6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums=[1, 2, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 4, 7, 8, 9])",
        "alternatingSubarray(nums = [2, 1, 3, 4, 5])",
        "alternatingSubarray(nums = [3, 1, 4, 1, 5])",
        "alternatingSubarray(nums = [1,2,3,3,4,5,7,8])",
        "alternatingSubarray(nums = [1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1])",
        "findMaximumLength(nums = [1, 2])",
        "findMaximumLength(nums = [1, 2])",
        "findMaximumLength(nums = [1, 2, 3, 4])",
        "findMaximumLength(nums=[1,1])",
        "findMaximumLength(nums=[1,1])",
        "findMaximumLength(nums=[1,1])",
        "findMaximumLength(nums = [1, -2, 3])",
        "findMaximumLength(nums = [1, 2, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])",
        "findMaximumLength(nums = [0, 1, 1, 2, 3, 1, 2, 3])"
    ],
    "sample_302": [
        "countSeniors(details = [\"12345678901234\", \"98765432101234\"])",
        "countSeniors(details = [\"1990-01-02A1234\", \"1980-01-02B2345\", \"1970-01-02C3456\"])",
        "countSeniors(details = [\"001-01-01-M-32\", \"002-02-02-F-25\", \"003-03-03-M-55\", \"004-04-04-F-61\"])",
        "countSeniors(details = [\"John Smith 1900-05-01\", \"Bob Johnson 1950-10-10\", \"Alice Brown 1980-02-29\"])",
        "countSeniors(details = [\"John Wick 1965 4321\", \"Jane Doe 1980 1234\", \"Bob Marley 1945 5678\"])",
        "countSeniors(details=[\"2022-12-25, Alice, 2000\", \"2022-12-25, Bob, 2001\", \"2022-12-25, Charlie, 1980\"])",
        "countSeniors(details = ['Alice 0002 00003', 'Bob 0001 00002', 'Charlie 0001 00001', 'David 0001 00001'])",
        "countSeniors(details = [\"Mike, 1981, 12000\", \"Jon, 1999, 15000\", \"Alice, 1970, 10000\"])",
        "countSeniors(details = [\"111-22-3333,John,Doe,123 Street,Seattle,WA,11111,1234567890,1234567890,2000-01-01\", \"111-22-4444,Jane,Doe,456 Street,New York,NY,12345,1234567890,1234567890,1950-01-01\"])",
        "countSeniors(details=['F1507890199011032021John', 'M301045678901222132019Sally', 'F123456789012321122017Emma'])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"xyab\", s2 = \"xzca\")",
        "canBeEqual(s1 = \"415\", s2 = \"541\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 1])",
        "minimumCoins(prices=[1, 1])",
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices=[5, 2, 1])",
        "minimumCoins(prices = [2,1,3])",
        "minimumCoins(prices=[1,1,1,1,1,1,1,1])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3])",
        "minimumSeconds(A = [1, 2, 3])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(A = [1, 1, 1])",
        "minimumSeconds(A = [0, 1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(A = [1, 1])",
        "minimumSeconds(A = [1,1,1,1,1])",
        "minimumSeconds(A = [1, 1, 2, 2, 3, 3])",
        "minimumSeconds(A = [0,1])",
        "minimumSeconds(A = [0, 1, 0, 1, 0])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abba\"])",
        "maximumNumberOfStringPairs(words = [\"aabb\", \"bbaa\"])",
        "maximumNumberOfStringPairs(words=[\"abc\",\"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abab\", \"ab\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"abcd\",\"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"ab\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"aba\",\"abca\"])",
        "maximumNumberOfStringPairs(words=[\"abca\", \"aabc\", \"aaab\", \"aaac\", \"aaad\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 5])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0, 0, 0, 1, 2], nums2 = [0, 0, 0, 3, 4])",
        "minSum(nums1 = [0, 5, 7], nums2 = [1, 0, 3])"
    ],
    "sample_470": [
        "findWordsContaining(words = [], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"d\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"jkl\")",
        "findWordsContaining(words = [\"abc\", \"def\"], x = \"g\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"watermelon\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"cat\")",
        "findWordsContaining(words = [\"green\", \"blue\", \"yellow\"], x = \"red\")",
        "findWordsContaining(words = [\"moon\", \"sun\", \"mars\"], x = \"s\")",
        "findWordsContaining(words=[\"where\", \"is\", \"the\", \"water\", \"wet\"], x=\"z\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 4)",
        "maxSum(nums = [1,2,3], m = 3, k = 1)",
        "maxSum(nums=[1, 2, 3, 4, 5], m=2, k=4)",
        "maxSum(nums = [2, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [2, 3, 1], m = 2, k = 2)",
        "maxSum(nums = [1,2,2,3], m = 2, k = 1)",
        "maxSum(nums = [5, 1, 2, 7, 3, 5], m = 3, k = 3)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [], moveTo = [])",
        "relocateMarbles(nums = [2], moveFrom = [], moveTo = [])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [2, 3], moveFrom = [3], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 3], moveTo = [4, 2])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 4, 1, 5])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [2, 1, 0])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums=[1, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3, 4], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 3)",
        "buyChoco(prices = [2, 3, 5], money = 10)",
        "buyChoco(prices = [3, 2, 5], money = 10)",
        "buyChoco(prices = [20, 10, 50], money = 30)",
        "buyChoco(prices = [4, 4, 5], money = 8)",
        "buyChoco(prices = [3, 4, 5, 6, 7], money = 10)",
        "buyChoco(prices = [1, 1, 1, 1, 1, 1], money = 2)",
        "buyChoco(prices = [1, 1, 2, 3, 3], money = 4)",
        "buyChoco(prices=[500, 300, 100, 200], money=800)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 2)",
        "lengthOfLongestSubsequence(nums = [2, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 6], target = 1)",
        "lengthOfLongestSubsequence(nums = [3, 2, 6, 5, 4], target = 9)",
        "lengthOfLongestSubsequence(nums = [2,3,4,5,6], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [4, 1, 2, 3, 6, 5, 7], target = 8)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abbba\")",
        "longestSemiRepetitiveSubstring(s = \"abbc\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"babab\")",
        "longestSemiRepetitiveSubstring(s = \"abbcdee\")",
        "longestSemiRepetitiveSubstring(s = \"abbbab\")",
        "longestSemiRepetitiveSubstring(s = \"abbbccd\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaabdaab\")",
        "longestSemiRepetitiveSubstring(s = \"ababbaba\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"banana\", \"cherry\", \"apple\"], x = \"na\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"pear\"], x = \"a\")",
        "findWordsContaining(words = [\"aaa\", \"bbb\", \"ccc\", \"ddd\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\", \"grape\"], x = \"p\")",
        "findWordsContaining(words = [\"ab\", \"bcd\", \"ef\"], x = \"b\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\", \"bird\"], x = \"at\")",
        "findWordsContaining(words = [\"bat\", \"banana\", \"coconut\", \"carrot\"], x = \"an\")",
        "findWordsContaining(words = [\"no\", \"yes\", \"no\", \"no\", \"yes\", \"yes\"], x = \"es\")",
        "findWordsContaining(words = [\"bat\", \"banana\", \"rubber\"], x = \"ba\")",
        "findWordsContaining(words = [\"code\", \"wars\", \"xcode\", \"wax\"], x = \"x\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"5\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"1234\", s2 = \"2341\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dabc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dacb\")",
        "canBeEqual(s1 = \"abbc\", s2 = \"abcc\")",
        "canBeEqual(s1 = \"abab\", s2 = \"baaa\")"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums=[1, 2, 3, 4, 5])",
        "minimumSum(nums = [4,3,2,1])",
        "minimumSum(nums=[3,4,5,1,2])",
        "minimumSum(nums = [4,5,1,2])",
        "minimumSum(nums = [4, 2, 6, 1, 3])",
        "minimumSum(nums = [4,1,2,6,7])",
        "minimumSum(nums = [2,3,1,4,1])",
        "minimumSum(nums = [8,6,1,7,9])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1], target = 2)",
        "lengthOfLongestSubsequence(nums = [], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2], target = 7)",
        "lengthOfLongestSubsequence(nums=[], target=1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 1)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [4], target = 7)"
    ],
    "sample_368": [
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'lHymp')",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"pLimp\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[1,2,3,4]])",
        "matrixSum(nums = [[1,1,1],[1,1,1]])",
        "matrixSum(nums = [[1,1,1,1,1]])",
        "matrixSum(nums = [[1,2,3,4,5],[6,7,8,9,10]])",
        "matrixSum(nums = [[-4, 2, -5], [-2, 2, -5], [-4, 2, -5]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [2, 3, 4])",
        "maximumTripletValue(nums=[1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [2, 4, 1, 10])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [0, 1, 0, 1])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums=[0, 1, 0, 1])",
        "alternatingSubarray(nums = [3, 4, 5, 3, 2])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"abacabadabacaba\", k = 3)",
        "beautifulSubstrings(s = \"abacabadabacaba\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abacaba\", k = 2)",
        "beautifulSubstrings(s = \"ababac\", k = 3)",
        "beautifulSubstrings(s = \"aabb\", k = 3)",
        "beautifulSubstrings(s = \"abcdefghij\", k = 3)",
        "beautifulSubstrings(s = \"bacbe\", k = 1)"
    ],
    "sample_449": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"0101\")",
        "minChanges(s = \"xxyy\")",
        "minChanges(s = \"abacabadabacaba\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"001010\")",
        "minimumSteps(s = \"110101\")",
        "minimumSteps(s = \"10111011101\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"111111111111\", \"222222222222\", \"333333333333\"])",
        "countSeniors(details = [\"2000-02-29\", \"1980-12-12\"])",
        "countSeniors(details=[\"1999-03-03\", \"2001-05-05\", \"2002-07-07\"])",
        "countSeniors(details=[\"199902011234\",\"200003011234\",\"200104011234\"])",
        "countSeniors(details = [\"19890529\", \"19900630\"])",
        "countSeniors(details = [\"John 1988 05 05\", \"Kate 1978 07 07\"])",
        "countSeniors(details=[\"John 23 12/12/1990\", \"Alex 25 24/02/1995\"])",
        "countSeniors(details = [\"1000,John,Doe,2018-02-10,Male,20\"])",
        "countSeniors(details=[\"Alice, 1973-07-13\", \"Bob, 1990-11-28\", \"Charlie, 1992-12-10\"])",
        "countSeniors(details = [\"John Doe 1979 02 03 3545645\", \"Jane Doe 1982 03 04 3454645\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4])",
        "minGroupsForValidAssignment(nums=[3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [2,2,2,1,1,1])",
        "minGroupsForValidAssignment(nums = [2,1,3,2,2])",
        "minGroupsForValidAssignment(nums=[1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [4, 4, 3, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [4, 1, 3, 3, 1, 2, 2, 2])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [1, 2], [2, 1], [3, 4], [4, 3]], k = 2)",
        "countPairs(coordinates = [[0, 1], [1, 0], [1, 2], [2, 1]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,1],[1,0],[1,2]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [4, 5], [5, 6], [7, 8], [8, 9]], k = 5)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 0], [1, 2], [2, 1]], k = 2)",
        "countPairs(coordinates = [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1], [3, 0], [3, 1], [0, 2], [1, 2], [2, 2], [3, 2], [0, 3], [1, 3], [2, 3], [3, 3]], k = 4)",
        "countPairs(coordinates = [[2, 1], [1, 2], [3, 3], [3, 3]], k = 3)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2], [2, 1], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [5, 0], [5, 1]], k = 3)"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 1)",
        "maxSum(nums = [1], m = 1, k = 1)",
        "maxSum(nums = [1], m = 2, k = 1)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 2)",
        "maxSum(nums = [1, 2], m = 1, k = 2)",
        "maxSum(nums = [0, 0, 0, 0], m = 3, k = 2)",
        "maxSum(nums = [3, -2, 1], m = 1, k = 2)",
        "maxSum(nums=[-1,-2,-3,-4,-5], m=1, k=100)",
        "maxSum(nums=[2, 2, 1, 2, 1, 2, 1, 1, 2, 2], m=3, k=3)"
    ],
    "sample_452": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"00110011\")",
        "minChanges(s = \"abcdabcd\")",
        "minChanges(s = \"abacbda\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2], nums2 = [2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [4, 3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 1, 4])",
        "minOperations(nums1=[1,2], nums2=[2,1])",
        "minOperations(nums1=[1, 2], nums2=[3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [7, 8, 9, 10, 11, 12])",
        "minOperations(nums1 = [1, 3, 4], nums2 = [2, 5, 3])",
        "minOperations(nums1 = [5, 1, 3, 4], nums2 = [5, 4, 1, 3])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"110100010\", k = 2)",
        "shortestBeautifulSubstring(s = \"01110110\", k = 2)",
        "shortestBeautifulSubstring(s = '1011', k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = '10110110', k = 3)",
        "shortestBeautifulSubstring(s = \"1010111111\", k = 3)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"10101010111001\", k = 4)",
        "shortestBeautifulSubstring(s = \"0000000001111111110000000000\", k = 3)",
        "shortestBeautifulSubstring(s
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [0])",
        "maximumTripletValue(nums = [2, 3, 4, 5])",
        "maximumTripletValue(nums = [2, 1, 1])",
        "maximumTripletValue(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 10, limit = 3)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minGroupsForValidAssignment(nums=[1, 2, 3, 4, 5, 6, 7, 8])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [3,1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,2,1,1,1])",
        "minGroupsForValidAssignment(nums = [6, 5, 4, 2, 1])",
        "minGroupsForValidAssignment(nums=[1, 1, 2, 2, 3, 3, 4, 4, 4])",
        "minGroupsForValidAssignment(nums=[2, 3, 2, 3, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])",
        "minGroupsForValidAssignment(nums=[10,30,25,12,10,20,15])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1,2,3,0], nums2 = [4,5,6,0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 4])",
        "minSum(nums1=[1, 2, 3, 4, 5], nums2=[6, 7, 8, 9, 10])",
        "minSum(nums1 = [1,2,3,0], nums2 = [4,5,6])",
        "minSum(nums1 = [2, 3, 0, 1], nums2 = [2, 3, 1, 0])",
        "minSum(nums1 = [3,0,0], nums2 = [2,0,0])",
        "minSum(nums1 = [0, 0, 1, 0, 2], nums2 = [1, 0, 2, 1, 0])"
    ],
    "sample_453": [
        "minChanges(s = \"010101\")",
        "minChanges(s = \"010101\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"01001010\")",
        "minChanges(s = \"10101\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"00110011\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"abb\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"hello\", k = 2)",
        "beautifulSubstrings(s = \"hello\", k = 2)",
        "beautifulSubstrings(s = \"hello world\", k = 2)",
        "beautifulSubstrings(s = \"aibohphobia\", k = 2)",
        "beautifulSubstrings(s = \"ghi\", k = 3)",
        "beautifulSubstrings(s = \"yttrium\", k = 2)",
        "beautifulSubstrings(s = \"abceidhtwno\", k = 3)",
        "beautifulSubstrings(s = \"wqmzf\", k = 2)",
        "beautifulSubstrings(s = \"hzztzz\", k = 3)",
        "beautifulSubstrings(s = \"bxjfllmzg\", k = 1)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"abaac\", k = 3)",
        "beautifulSubstrings(s = \"aabacbebeb\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 1)",
        "beautifulSubstrings(s = \"qwertyuiop\", k = 2)",
        "beautifulSubstrings(s = \"aabaaa\", k = 2)",
        "beautifulSubstrings(s = \"abaac\", k = 1)",
        "beautifulSubstrings(s = \"abaacdafe\", k = 3)",
        "beautifulSubstrings(s = \"aabaabaaa\", k = 3)",
        "beautifulSubstrings(s = \"aacbd\", k = 5)",
        "beautifulSubstrings(s = \"acbbbca\", k = 2)"
    ],
    "sample_369": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(\"Lymph\")",
        "sortVowels(s = \"Hylmp\")",
        "sortVowels(\"Hello, World!\")",
        "sortVowels(s = 'Hi Lmph')"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [1, 1, 2, 2, 3, 3])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums=[1,2,3,4])",
        "minimumSeconds(nums = [3, 1, 2, 4])",
        "minimumSeconds(nums=[1, 2, 3])",
        "minimumSeconds(nums=[1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [4, 1, 4, 1])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 3, 4, 2])",
        "minimumSum(nums = [2, 1, 5, 7, 3])",
        "minimumSum(nums = [2, 3, 1, 4, 5])",
        "minimumSum(nums = [2, 1, 5, 7, 4, 3])",
        "minimumSum(nums = [3, 5, 1, 2])",
        "minimumSum(nums = [5, 2, 3, 4, 1])",
        "minimumSum(nums = [2, 6, 1, 1, 2])"
    ],
    "sample_417": [
        "minOperations(nums = [3, 1, 3, 4, 3], k = 2)",
        "minOperations(nums = [5, 4, 3, 2, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "minOperations(nums = [2, 1, 5, 1, 2, 2], k = 2)",
        "minOperations(nums = [2, 1, 5, 2, 1, 2], k = 2)",
        "minOperations(nums = [5, 1, 4, 3, 6, 7], k = 3)",
        "minOperations(nums = [2, 1, 1, 1, 1, 1, 1], k = 1)",
        "minOperations(nums=[1, 4, 2, 3, 1, 5, 10, 11, 12], k=4)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [1, 2, 3, 4], m = 2, k = 1)",
        "maxSum(A = [1, 2, 3, 4], m = 3, k = 4)",
        "maxSum(A = [0, 0, 0, 0, 0], m = 2, k = 4)",
        "maxSum(A = [1, 2, 1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [1, 3, 4], m = 3, k = 10)",
        "maxSum(A = [4, 5, 5, 3, 1], m = 2, k = 3)",
        "maxSum(A = [4, 3, 5, 1, 6, 2], m = 3, k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"010010\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 3, 5, 7, 9])",
        "maxSubarrays(nums = [3, 4, 5, 1, 2])",
        "maxSubarrays(nums = [3, 2, 6, 4, 1])",
        "maxSubarrays(nums = [3, 4, 3, 3])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [5, 5, 5, 5, 5])",
        "maxSubarrays(nums = [1, 0, 2, 1, 4])",
        "maxSubarrays(nums=[1, 3, 3, 7])",
        "maxSubarrays(nums = [2, 3, 1, 2, 3, 2])",
        "maxSubarrays(nums = [3, 3, 1, 4, 2, 1, 1, 1, 2, 3, 2])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 2)",
        "buyChoco(prices = [1, 2], money = 0)",
        "buyChoco(prices = [2, 4], money = 6)",
        "buyChoco(prices = [1, 3], money = 4)",
        "buyChoco(prices = [1, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 0)",
        "buyChoco(prices = [1, 1, 2], money = 3)",
        "buyChoco(prices = [5, 7], money = 10)",
        "buyChoco(prices = [5, 4, 3], money = 1)",
        "buyChoco(prices = [15, 14], money = 15)"
    ],
    "sample_290": [
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"1111111111111111\")",
        "minimumSteps(s
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 1])",
        "minLengthAfterRemovals(nums = [0, 0, 1, 1])",
        "minLengthAfterRemovals(nums=[1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums=[3,1,3])"
    ],
    "sample_420": [
        "minOperations(nums = [5, 4, 3, 2, 1], k = 2)",
        "minOperations(nums = [5, 4, 3, 2, 1], k = 3)",
        "minOperations(nums = [2, 1, 4, 5, 3, 2, 8, 7, 6, 4], k = 3)",
        "minOperations(nums=[1, 2, 3, 4], k=2)",
        "minOperations(nums=[1,2,3,4,5], k=3)",
        "minOperations(nums = [2, 1, 3, 4, 7], k = 3)",
        "minOperations(nums = [2, 1, 3, 4, 5, 6, 7], k = 2)",
        "minOperations(nums = [1, 1, 2, 2, 2, 2, 3, 3], k = 2)",
        "minOperations(nums = [2, 1, 5, 1, 2, 2, 2], k = 1)",
        "minOperations(nums = [2, 1, 4, 5, 3, 2, 8, 1, 4], k = 4)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 4, 5])",
        "isGood(nums = [1, 2, 3, 3])",
        "isGood(nums=[1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "isGood(nums=[1, 2, 3, 4, 5, 6, 7])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 12)",
        "isFascinating(n = 5)",
        "isFascinating(n = 4)",
        "isFascinating(n = 22)",
        "isFascinating(n = 999)",
        "isFascinating(n = 9876)",
        "isFascinating(n = 86)",
        "isFascinating(n = 52)",
        "isFascinating(n = 1111111)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [1, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7])",
        "isGood(nums = [1, 2, 3, 4, 5, 7])",
        "isGood(nums = [3, 2, 1])",
        "isGood(nums = [1, 2, 3, 5, 6])",
        "isGood(nums=[1, 2, 4, 5])",
        "isGood(nums = [2, 3, 4, 5, 7])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums=[0])",
        "minimumSeconds(nums = [1, 3, 4, 5, 6])",
        "minimumSeconds(nums=[1, 2, 3, 4, 5, 6, 7])",
        "minimumSeconds(nums = [1, 1, 2, 3])",
        "minimumSeconds(nums = [3, 1, 3, 1])",
        "minimumSeconds(nums=[2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 1, 1])",
        "minimumRightShifts(nums = [0, 1, 2])",
        "minimumRightShifts(nums = [0, 1, 2])",
        "minimumRightShifts(nums = [0, 1, 2])",
        "minimumRightShifts(nums = [1, 0, 1, 1, 0])",
        "minimumRightShifts(nums = [1, 0, 1, 1])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,0,1,1])",
        "minimumRightShifts(nums=[5, 1, 2])"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [1, 3, 2])",
        "isGood(nums = [2, 3, 1])",
        "isGood(nums = [2, 3, 1])",
        "isGood(nums = [1, 2, 3, 4, 5, 7])",
        "isGood(nums = [1, 3, 5])",
        "isGood(nums = [1, 2, 3, 6])",
        "isGood(nums = [1, 3, 5, 6])",
        "isGood(nums = [2, 1, 0])",
        "isGood(nums = [1, 3, 5, 4])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 1, 1], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [1, 2], nums2 = [2, 1])",
        "minOperations(nums1 = [1,1,1], nums2 = [2,2,2])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 1])",
        "minOperations(nums1 = [1, 2], nums2 = [2, 3])",
        "minOperations(nums1 = [1, 2], nums2 = [2, 3])",
        "minOperations(nums1=[1, 2, 3, 4, 5], nums2=[6, 7, 8, 9, 10])",
        "minOperations(nums1 = [2, 1, 2], nums2 = [1, 2, 1])",
        "minOperations(nums1 = [2,1,2], nums2 = [2,2,2])",
        "minOperations(nums1 = [3, 3, 2], nums2 = [3, 1, 3])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"0101010101\", k = 3)",
        "shortestBeautifulSubstring(s = '123456', k = 3)",
        "shortestBeautifulSubstring(s = '1234567890', k = 4)",
        "shortestBeautifulSubstring(s = \"11010220\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101100\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011011011\", k = 3)",
        "shortestBeautifulSubstring(s = \"2315\", k = 4)",
        "shortestBeautifulSubstring(s
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,3,4])",
        "minGroupsForValidAssignment(nums = [4, 1, 1, 2, 2])",
        "minGroupsForValidAssignment(nums = [5,1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [2, 3, 3, 4, 5, 7, 10])"
    ],
    "sample_289": [
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"100\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s
        "minimumSteps(s = \"11000\")",
        "minimumSteps(s = \"00000000000000000000\")",
        "minimumSteps(s = \"0100100\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 0)",
        "lengthOfLongestSubsequence(nums = [], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2], target = 3)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=0)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5], target=6)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [0, 1], target = 0)",
        "lengthOfLongestSubsequence(nums = [3, 3, 3, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [4, 2, 1, 3], target = 3)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2])",
        "minimumSum(nums=[1,2,3,4,5])",
        "minimumSum(nums = [1,1])",
        "minimumSum(nums = [2])",
        "minimumSum(nums = [2])",
        "minimumSum(nums = [2, 5, 1, 1, 2])",
        "minimumSum(nums = [4, 4, 1, 6, 7, 5, 2, 4, 8, 2])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [2, 3, 5], m = 2, k = 1)",
        "maxSum(nums = [2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [3, 2, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [3, 1], m = 1, k = 1)",
        "maxSum(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], m = 2, k = 2)",
        "maxSum(nums = [3, 1, 2, 4], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 10, 5, 4, 3, 2, 1], m = 3, k = 2)",
        "maxSum(nums = [4, 3, 1, 2], m = 3, k = 3)",
        "maxSum(nums=[-3, 2, 6, -2, 2], m=4, k=3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abf\")",
        "findMinimumOperations(s1 = \"geeks\", s2 = \"geeksfor\", s3 = \"geeksforgeeks\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"c\", s3 = \"d\")"
    ],
    "sample_427": [
        "minOperations(nums = [1,2,3,3,3])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9])",
        "minOperations(nums = [1, 2, 1, 2, 1, 2, 1])",
        "minOperations(nums = [2, 2, 2, 2, 2, 1, 1, 1, 1])",
        "minOperations(nums = [4, 3, 10, 4, 3])",
        "minOperations(nums = [1, 2, 3, 3, 3, 2, 2])",
        "minOperations(nums = [2, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minOperations(nums = [5, 1, 3, 3, 2, 6, 2, 4, 1, 5])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 1, 1])",
        "minimumCoins(prices = [2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 1, 2])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [2, 3, 1, 5, 4])",
        "minimumCoins(prices = [2, 5, 1, 7, 4])",
        "minimumCoins(prices=[3, 2, 1, 2, 1])",
        "minimumCoins(prices = [4, 5, 2, 1, 5])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 1, 2, 2, 3, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [])",
        "minimumSeconds(nums = [1, 2])",
        "minimumSeconds(nums = [1, 1, 2])",
        "minimumSeconds(nums = [5, 4, 0, 3, 2, 1])",
        "minimumSeconds(nums=[2, 2, 2])",
        "minimumSeconds(nums=[5,4,2,1,3])"
    ],
    "sample_448": [
        "minChanges(s = \"010101\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"1010\")",
        "minChanges(s = \"abca\")",
        "minChanges(s = \"abacb\")",
        "minChanges(s = \"abacadaeaf\")",
        "minChanges(s = \"aabcde\")",
        "minChanges(s = \"ABACB\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [9, 8, 5, 3, 1], limit = 2)",
        "lexicographicallySmallestArray(nums = [9, 8, 5, 3, 1], limit = 3)",
        "lexicographicallySmallestArray(nums = [5, 8, 1, 3, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 9, 5, 3, 1], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 1, 9, 5, 3], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 5, 3, 9, 1], limit = 10)",
        "lexicographicallySmallestArray(nums = [8, 3, 1, 5, 9], limit = 3)",
        "lexicographicallySmallestArray(nums=[2, 3, 5, 8, 9], limit=3)",
        "lexicographicallySmallestArray(nums = [5, 3, 2, 1, 9], limit = 2)",
        "lexicographicallySmallestArray(nums=[1, 5, 8, 3, 9], limit=10)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums=[1, 1, 1])",
        "sumCounts(nums=[1, 2, 2])",
        "sumCounts(nums=[1,1,2])",
        "sumCounts(nums = [2, 1, 2])",
        "sumCounts(nums = [0, 1])",
        "sumCounts(nums = [1,2,2,1,1])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [])",
        "maximumTripletValue(nums = [1])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [3, 4, 5])",
        "maximumTripletValue(nums=[-1,-2,-3])",
        "maximumTripletValue(nums = [-2, 1, -3])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"abacada\", k = 2)",
        "beautifulSubstrings(s = \"hello\", k = 1)",
        "beautifulSubstrings(s = \"abac\", k = 2)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = 'aeiou', k = 2)",
        "beautifulSubstrings(s = \"aabaa\", k = 2)",
        "beautifulSubstrings(s = \"bcd\", k = 3)",
        "beautifulSubstrings(s = \"qwertyuiopasdfghjklzxcvbnm\", k = 2)",
        "beautifulSubstrings(s = \"ababababab\", k = 2)",
        "beautifulSubstrings(s = 'a', k = 5)"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 8)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums=[1, 2, 3, 4], target=5)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 3)",
        "countPairs(nums = [2, 4, 5], target = 6)"
    ],
    "sample_462": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n=5, limit=3)",
        "distributeCandies(n = 25, limit = 4)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1,3], nums2 = [1,2])",
        "minOperations(nums1=[1, 3], nums2=[3, 1])",
        "minOperations(nums1 = [1, 2, 2], nums2 = [4, 5, 6])",
        "minOperations(nums1 = [1, 3, 3], nums2 = [3, 1, 1])",
        "minOperations(nums1 = [1, 1, 3, 2], nums2 = [3, 3, 1, 2])",
        "minOperations(nums1 = [3,1,3,2], nums2 = [1,1,2,3])",
        "minOperations(nums1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1, 2, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 2, 2, 2])",
        "minOperations(nums = [3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 3])",
        "minOperations(nums = [1,1,2,2,2,2])",
        "minOperations(nums = [1,1,2,2,2,2])",
        "minOperations(nums=[1, 1, 1])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = '111', k = 2)",
        "shortestBeautifulSubstring(s = \"1110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"101001\", k = 2)",
        "shortestBeautifulSubstring(s = \"100111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011100101\", k = 2)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [0, 0, 0, 0])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [0,0,0,0])",
        "minimumSeconds(nums=[1,1,1,1,1])",
        "minimumSeconds(nums = [3,2,1])",
        "minimumSeconds(nums=[3, 1, 3, 2, 2, 3])"
    ],
    "sample_428": [
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
        "minOperations(nums = [1,2,3,3,3])",
        "minOperations(nums = [1,1,2,2,2,3,3])",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 5])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6])",
        "minOperations(nums = [1,1,2,2,2,2,3,3,3,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6])",
        "minOperations(nums = [1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,",
        "minOperations(nums = [2, 4, 4, 1, 1, 1, 6, 7])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1, 3, 2, 4, 5])",
        "alternatingSubarray(nums = [1,2,4,3,5,6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "alternatingSubarray(nums = [4, 2, 4, 3, 1, 5, 6])",
        "alternatingSubarray(nums = [1, 3, 5, 4, 7, 8, 9])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums=[1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,2,3,3,3,3])",
        "minLengthAfterRemovals(nums = [3,3,3,3,4])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 1, 2, 2, 1, 1])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"mom\", \"pop\", \"dad\"])",
        "maximumNumberOfStringPairs(words = [\"anna\", \"banana\", \"carrot\", \"anna\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"elbow\", \"wow\", \"kayak\", \"level\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"lever\", \"hero\", \"hello\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"lever\", \"level\", \"evel\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"ab\", \"xyx\", \"yy\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"code\", \"level\", \"cola\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"cowlevel\", \"java\", \"python\", \"c\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"lever\", \"asdfgh\", \"sdfghj\", \"dfghjk\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"piglet\", \"elev\", \"gp\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"defg\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xzay\")",
        "canMakeSubsequence(str1 = \"azb\", str2 = \"zba\")",
        "canMakeSubsequence(str1 = \"asdf\", str2 = \"asdf\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"abcdefx\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"zzy\")",
        "canMakeSubsequence(str1 = \"tqz\", str2 = \"tqa\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabc\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"dabc\")",
        "longestSemiRepetitiveSubstring(s = \"12334556788\")"
    ],
    "sample_399": [
        "maxSum(nums = [1], m = 1, k = 1)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 1, k = 1)",
        "maxSum(nums = [1,2,3], m = 1, k = 3)",
        "maxSum(nums = [2, 1, 3], m = 1, k = 2)",
        "maxSum(nums=[1,2,3,2,1], m=1, k=1)",
        "maxSum(nums = [1,1,1,1,1], m = 5, k = 4)",
        "maxSum(nums = [2,2,2], m = 1, k = 3)",
        "maxSum(nums = [2,3,4], m = 2, k = 10)",
        "maxSum(nums=[-2, -1, 0, 1, 2, 3, 4, 5, 6], m=3, k=7)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"an\")",
        "findWordsContaining(words=[\"cat\", \"banana\", \"dog\"], x=\"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"there\"], x = \"l\")",
        "findWordsContaining(words = [\"python\", \"coding\", \"is\", \"fun\"], x = \"o\")",
        "findWordsContaining(words = [\"elephant\", \"rabbit\"], x = \"a\")",
        "findWordsContaining(words=[\"cat\", \"bat\", \"dog\"], x=\"at\")",
        "findWordsContaining(words = [\"banana\", \"ban\", \"bas\"], x = \"ba\")",
        "findWordsContaining(words = [\"capital\", \"arrival\"], x = \"p\")",
        "findWordsContaining(words = [\"would\", \"you\", \"like\", \"to\"], x = \"ou\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums=[2,3], moveFrom=[2], moveTo=[3])",
        "relocateMarbles(nums=[1,2,3], moveFrom=[1,3], moveTo=[2,3])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [2,4], moveTo = [5,3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [3,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,1,1,2,2], moveFrom = [1,1], moveTo = [2,2])",
        "relocateMarbles(nums = [2, 2, 3, 4, 5], moveFrom = [2], moveTo = [4])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [1, 1, 1])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abacb\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"geeksforgeeks\")",
        "longestSemiRepetitiveSubstring(s = \"ababc\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbcdee\")",
        "longestSemiRepetitiveSubstring(s = \"abaacbab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabcab\")",
        "longestSemiRepetitiveSubstring(s = \"abacbgc\")",
        "longestSemiRepetitiveSubstring(s = \"ababaaabab\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"a\", \"b\", \"c\", \"d\", \"e\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = ['a', 'b', 'c', 'd', 'e', 'f', 'g'])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"level\", \"cookie\"])",
        "maximumNumberOfStringPairs(words = [\"aca\", \"cba\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abab\", \"abca\", \"cabac\", \"bacca\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"python\", \"java\", \"code\", \"elppa\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "matrixSum(nums = [[1, 2], [4, 3]])",
        "matrixSum(nums=[[1], [2]])",
        "matrixSum(nums = [[1, 2], [4, 3], [5, 6]])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"geek\", s2 = \"gesek\", s3 = \"gep\")",
        "findMinimumOperations(s1 = \"ababab\", s2 = \"bababa\", s3 = \"ababab\")",
        "findMinimumOperations(s1 = \"123\", s2 = \"456\", s3 = \"789\")",
        "findMinimumOperations(s1 = \"abd\", s2 = \"acd\", s3 = \"adc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"d\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeksquiz\", s3 = \"geeksforgeeks\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeksquiz\", s3 = \"geeksforgeeks\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"ad\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"a\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"123\", s2 = \"1234\", s3 = \"12345\")",
        "findMinimumOperations(s1 = \"abd\", s2 = \"abb\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"cat\", s2 = \"car\", s3 = \"rat\")",
        "findMinimumOperations(s1 = \"geeks\", s2 = \"forgeeks\", s3 = \"aforgeeks\")"
    ],
    "sample_324": [
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 100)",
        "isFascinating(n = 11)",
        "isFascinating(n = 10000)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices=[1,2,3])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices=[1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 1, 3, 2])",
        "minimumCoins(prices=[4, 2, 3, 1, 5])",
        "minimumCoins(prices=[1,5,2,6,4])"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 7)",
        "countPairs(nums=[1,2,3,4], target=6)",
        "countPairs(nums=[1,2,3,4], target=8)",
        "countPairs(nums=[1, 2, 3, 4], target=6)",
        "countPairs(nums=[1,1,1,1,1], target=2)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [3,4,3,3,2])",
        "minGroupsForValidAssignment(nums = [2, 1, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 2, 1, 1, 1])",
        "minGroupsForValidAssignment(nums=[2,3,3,4,4,4])",
        "minGroupsForValidAssignment(nums = [7, 11, 11, 1, 1, 5, 4, 10])",
        "minGroupsForValidAssignment(nums = [10, 7, 10, 4, 6, 10, 10, 10, 5, 9, 9])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 2)",
        "countPairs(nums = [2, 3, 4, 5], target = 6)",
        "countPairs(nums=[1, 2, 3, 4, 5], target=7)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [4, 5, 6], money = 10)",
        "buyChoco(prices=[2,3,4], money=10)",
        "buyChoco(prices = [100, 200, 300], money = 500)",
        "buyChoco(prices = [5, 3, 2, 6], money = 10)",
        "buyChoco(prices = [4, 3, 5, 7], money = 10)",
        "buyChoco(prices = [3, 4, 5, 6, 7], money = 6)",
        "buyChoco(prices = [5,2,8,1], money = 6)",
        "buyChoco(prices = [2,4,8,5], money = 10)",
        "buyChoco(prices = [100, 3, 5, 6], money = 100)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"xx\", \"yy\", \"xy\"])",
        "maximumNumberOfStringPairs(words=[\"mom\",\"dad\"])",
        "maximumNumberOfStringPairs(words = [\"q\", \"w\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"Let's code\")",
        "sortVowels(\"Let's code\")",
        "sortVowels(s = 'lEotced')",
        "sortVowels(s = 'lEOtced')",
        "sortVowels(s = 'Lettuce')",
        "sortVowels(s = 'letcedeo')",
        "sortVowels(s = 'Let it Code')",
        "sortVowels(s='Let-sDoIt')"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [0, 1, 1])",
        "sumCounts(nums = [1, 1, 1, 1, 1])",
        "sumCounts(nums = [0, 1, 2, 1])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices=[1, 2, 3])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices=[1, 2, 5])",
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices=[1,2,3,4,5])",
        "minimumCoins(prices=[5, 3, 7, 1])",
        "minimumCoins(prices = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3, 2, 3])"
    ],
    "sample_245": [
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 4, m = 2)",
        "differenceOfSums(n = 20, m = 4)"
    ],
    "sample_307": [
        "countSeniors(details=['2001-01-01', '2001-01-02'])",
        "countSeniors(details = ['19971230', '19971230', '19971230'])",
        "countSeniors(details = [\"John1990\", \"Amy1995\", \"Bob2005\", \"Chloe1985\"])",
        "countSeniors(details=[\"20030808\", \"20020909\"])",
        "countSeniors(details = [\"Zara 34\", \"Nuha 23\", \"Ayan 32\"])",
        "countSeniors(details = [\"Alice,23,2000\", \"Bob,32,1990\", \"Chris,72,1950\"])",
        "countSeniors(details = [\"19621202\", \"19700101\", \"19680101\"])",
        "countSeniors(details = [\"1995-12-22\", \"2003-11-01\", \"1987-09-19\"])",
        "countSeniors(details = [\"19720703\", \"19810104\", \"19690207\"])",
        "countSeniors(details = [\"Rajesh_28_1981\", \"Prem_29_1956\", \"Ritu_22_1998\"])"
    ],
    "sample_323": [
        "isFascinating(n = 1)",
        "isFascinating(n = 10)",
        "isFascinating(n = 10)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 12)",
        "isFascinating(n = 32)",
        "isFascinating(n = 51)",
        "isFascinating(n = 8308)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"abcdefg\")",
        "minimumBeautifulSubstrings(s = \"abcdefg\")",
        "minimumBeautifulSubstrings(s = \"bbb\")",
        "minimumBeautifulSubstrings(s = \"aa\")",
        "minimumBeautifulSubstrings(s = \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "minimumBeautifulSubstrings(s = \"xzf\")",
        "minimumBeautifulSubstrings(s = \"aabbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbabbbbab"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 5, limit = 1)"
    ],
    "sample_419": [
        "minOperations(nums = [5, 4, 3, 2, 1], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [2, 1, 4, 5, 3, 2, 8], k = 4)",
        "minOperations(nums = [5, 4, 3, 2, 1, 4], k = 2)",
        "minOperations(nums = [2, 1, 3, 2, 1], k = 2)",
        "minOperations(nums=[2, 3, 3, 3, 5, 6], k=3)",
        "minOperations(nums=[1,3,5,7,9,2,11], k=3)",
        "minOperations(nums = [2, 5, 4, 1, 5, 8, 9, 1], k = 4)",
        "minOperations(nums = [8, 2, 2, 5, 4, 9, 2, 2, 7, 8], k = 3)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [3, 4, 5])",
        "sumCounts(nums = [0, 1, 2, 1, 2, 3])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=[\"3\", \"4\", \"prev\", \"prev\"])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [3,2,1,2,1,7], k = 3)",
        "minOperations(nums = [3,2,1,2,1,7], k = 3)",
        "minOperations(nums = [2, 1, 3, 1, 2], k = 2)",
        "minOperations(nums = [2, 4, 8, 16, 32, 64, 128], k = 4)",
        "minOperations(nums=[4, 1, 2, 2], k=2)",
        "minOperations(nums = [2, 5, 3, 2, 4, 6], k = 5)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"geeksforgeeks\")",
        "longestSemiRepetitiveSubstring(s = \"abababa\")",
        "longestSemiRepetitiveSubstring(s = \"abac\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababaab\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbcd\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"acbabgd\")",
        "longestSemiRepetitiveSubstring(s = \"geeksgfses\")",
        "longestSemiRepetitiveSubstring(s = \"ceaebaeb\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 2, 2, 3])",
        "sumCounts(nums = [2, 1, 3, 2])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = \"110100010\", k = 2)",
        "shortestBeautifulSubstring(s = \"11101\", k = 2)",
        "shortestBeautifulSubstring(s = '11001101101', k = 2)",
        "shortestBeautifulSubstring(s = '01010111', k = 3)",
        "shortestBeautifulSubstring(s = \"11001101101111\", k = 3)",
        "shortestBeautifulSubstring(s = '0010011101111000', k = 3)",
        "shortestBeautifulSubstring(s = \"1001011110111100010111101111000101111011110001011110111100010111101111000101111011110001011110111100010111101111000101111011110001011110111100010111101111000101111011110001011110111100010111101111000101111011110001011110111100010111101111000101111011110001011110111100010111101111000101111011110001011110111100010111101111000101111011110001011110111100010111101111000101111011110001011110111100010111101111000101111011110001011110111100010111101111000101111011110001011110111100010111101111000101111011110001011110",
        "shortestBeautifulSubstring(s = \"1001110110001000111000000111001001111000111011100011110101111001011100110110100101001101111000011101101111010011101110101111100100111110111010111011101010111011000000111111101111100011111101110010111111111011110111001011011101100110111000110111111110111110110101110010011111111111101010110011111010111110111111100110011111110001110111000111111111001111110111111000110011111110111101011011101100101110111111010111111010110111011001111101111110111110101101110110011110111001110011111101100111011101100111110111011101"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"a\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"0\")",
        "minimumBeautifulSubstrings(s = \"abd\")",
        "minimumBeautifulSubstrings(s = \"1234567890\")",
        "minimumBeautifulSubstrings(s = \"zzzz\")",
        "minimumBeautifulSubstrings(s = \"523\")",
        "minimumBeautifulSubstrings(s = \"322114\")",
        "minimumBeautifulSubstrings(s = \"abbbabbbbbbbbbbbbbbbbbb\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 1, z = 3)",
        "longestString(x = 2, y = 4, z = 3)",
        "longestString(x = 2, y = 4, z = 3)",
        "longestString(x = 3, y = 1, z = 2)",
        "longestString(x = 4, y = 2, z = 1)",
        "longestString(x = 5, y = 7, z = 1)",
        "longestString(x = 5, y = 1, z = 7)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 2], [3, 4]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 2, 3], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 2, 3], [2, 0, 4], [3, 4, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [0, 2, 3]])",
        "findChampion(grid = [[1, 2, -3], [0, 2, 3], [-1, 0, 3]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"abc\", k = 3)",
        "beautifulSubstrings(s = \"x\", k = 4)",
        "beautifulSubstrings(s = \"qwq\", k = 3)",
        "beautifulSubstrings(s = \"zzzzz\", k = 2)",
        "beautifulSubstrings(s = \"qwertyuiopasdfghjklzxcvbnm\", k = 11)",
        "beautifulSubstrings(s = \"gene\", k = 1)",
        "beautifulSubstrings(s = \"gmocqm\", k = 2)",
        "beautifulSubstrings(s = 'fqsajxq', k = 3)"
    ],
    "sample_304": [
        "countSeniors(details = [\"12345678901234567\", \"12345678901234568\"])",
        "countSeniors(details = [\"2000-01-01\", \"1990-01-01\"])",
        "countSeniors(details = [\"123456789012311\", \"123456789012312\", \"123456789012313\"])",
        "countSeniors(details = [\"11-05-1950\", \"13-08-1955\"])",
        "countSeniors(details = [\"John Doe, 1978, 20000\", \"Jane Smith, 1985, 30000\", \"Bob Johnson, 1967, 40000\"])",
        "countSeniors(details = [\"john 1988 01 01\", \"mary 1955 01 01\", \"bob 1977 01 01\"])",
        "countSeniors(details = [\"john, 20, m\", \"martha, 70, f\", \"peter, 40, m\", \"sarah, 80, f\"])",
        "countSeniors(details = [\"1992-03-12\", \"2000-01-22\", \"2004-05-02\"])",
        "countSeniors(details = [\"1980-11-11\", \"2000-03-03\", \"1956-06-16\", \"1987-12-31\"])",
        "countSeniors(details = [\"1950/04/17\", \"1965/01/15\", \"1980/06/13\", \"1990/09/10\", \"1970/03/27\", \"1980/09/10\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums=[1, 2, 3])",
        "maximumTripletValue(nums = [0, -1, -2])",
        "maximumTripletValue(nums=[1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"01234\")",
        "minimumBeautifulSubstrings(s = \"11111\")",
        "minimumBeautifulSubstrings(s = \"b\")",
        "minimumBeautifulSubstrings(s = \"444\")",
        "minimumBeautifulSubstrings(s = \"2\")",
        "minimumBeautifulSubstrings(s = \"012345678901234567890123456789\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmno\")",
        "minimumBeautifulSubstrings(s = \"0010101\")",
        "minimumBeautifulSubstrings(s = \"1001011101\")",
        "minimumBeautifulSubstrings(s = \"011100101\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [0, 0, 1, 0, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 0, 0, 1, 0, 1])",
        "maxSubarrays(nums = [3, 2, 1, 0, 6])",
        "maxSubarrays(nums = [2, 0, 2, 2, 1])",
        "maxSubarrays(nums = [2, 1, 3, 7, 6])",
        "maxSubarrays(nums=[0, 1, 0, 1, 0, 0, 1])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [4, 5, 6])",
        "minOperations(a = [1, 2], b = [2, 1])",
        "minOperations(a = [1, 2, 3, 4], b = [5, 6, 7, 8])",
        "minOperations(a = [1, 2, 3], b = [1, 2, 4])",
        "minOperations(a = [1, 2], b = [1, 3])",
        "minOperations(a = [1, 2, 0], b = [0, 2, 1])",
        "minOperations(a = [1, 2, 0], b = [1, 2, 0])",
        "minOperations(a=[1, 2], b=[1, 2])",
        "minOperations(a = [1, 2, 0, 4, 3], b = [2, 3, 5, 6, 4])",
        "minOperations(a = [4, 3, 5, 2], b = [3, 5, 4, 1])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"cat\",\"bt\",\"hat\",\"tree\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"banana\", \"dog\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"bt\", \"hat\", \"tree\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"mouse\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"mouse\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"bat\", \"rat\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words=[\"cat\", \"dog\", \"cat\", \"dog\"])"
    ],
    "sample_371": [
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'lYmPh')",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"lmphY\")",
        "sortVowels(s = 'lmypH')",
        "sortVowels(s = 'lmPhy')"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [1, 2])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [0, 0, 1])",
        "sumCounts(nums = [2, 3])",
        "sumCounts(nums = [2, 3, 1])",
        "sumCounts(nums = [0, 1, 0, 2, 1, 3, 2, 0, 3])"
    ],
    "sample_256": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums=[1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 4, 6, 7, 8])",
        "minimumSum(nums = [4,2,1,3])",
        "minimumSum(nums = [2, 3, 1, 0, 4])",
        "minimumSum(nums = [2, 6, 4, 8])",
        "minimumSum(nums = [2, 1, 4, 3])",
        "minimumSum(nums = [3, 4, 6, 8, 10])",
        "minimumSum(nums=[8,1,2,4,5])",
        "minimumSum(nums = [5, 6, 1, 3, 4, 1, 2, 3, 4])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 2], [3, 4, 5], [6, 7, 8]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 1], [1, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1,1,0], [1,1,1], [0,0,1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[1,0,1], [0,1,0], [0,1,0]])",
        "findChampion(grid = [[1, 2, 0, 3], [4, 5, 6, 7], [8, 9, 10, 11]])",
        "findChampion(grid = [[0,1,0,0], [0,1,0,1], [1,1,1,1], [0,0,1,1]])"
    ],
    "sample_372": [
        "sortVowels(s = \"Let's code\")",
        "sortVowels(s = \"let's code\")",
        "sortVowels(s = \"Let's Code\")",
        "sortVowels(s = 'Leetcode')",
        "sortVowels(s = 'Leetcode')",
        "sortVowels(s = 'Letcode')",
        "sortVowels(s = \"Let's Code Everyday\")",
        "sortVowels(s = \"tecLede\")",
        "sortVowels(s = \"Learn to Code in Python\")",
        "sortVowels(s = \"tLeOcEdE\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"10111\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = '1011')",
        "minimumSteps(s = \"010110101\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 4, 1, 5, 2])",
        "minimumRightShifts(nums = [1])",
        "minimumRightShifts(nums = [1, 1])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "minimumRightShifts(nums=[1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [2, 4, 3, 5, 1])",
        "minimumRightShifts(nums = [4, 2, 3, 1])",
        "minimumRightShifts(nums = [5, 6, 8, 3, 2])",
        "minimumRightShifts(nums = [5, 6, 9, 2, 3, 1])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,1,1,1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,2,3,3,3])",
        "minOperations(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minOperations(nums=[1, 2, 2, 3, 3, 3])"
    ],
    "sample_367": [
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = 'lYmph')",
        "sortVowels(s = \"lYmph\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'lHmYp')",
        "sortVowels(s = \"Humble\")",
        "sortVowels(s = \"Hmply\")",
        "sortVowels(s = 'pHlmy')"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0], [0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1], [1,1,1,1,1,1,1,1,1,1]])",
        "findChampion(grid = [[0,1,0],[1,1,1],[1,1,0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 1], nums2 = [1])",
        "minSum(nums1 = [2, 2, 1], nums2 = [2, 2])",
        "minSum(nums1=[1,2,3,4,5], nums2=[0,2,3,4,5])",
        "minSum(nums1 = [4, 2, 1], nums2 = [2, 3, 1])",
        "minSum(nums1 = [2, 3, 5], nums2 = [3, 5, 6])",
        "minSum(nums1=[2, 1, 3], nums2=[2, 2, 2])",
        "minSum(nums1=[4, 4, 4, 4], nums2=[1, 1, 1, 1])"
    ],
    "sample_422": [
        "minOperations(nums = [2, 1, 4, 5, 2, 6], k = 3)",
        "minOperations(nums = [2, 1, 4, 5, 2, 6], k = 3)",
        "minOperations(nums = [2, 1, 3, 2, 2], k = 2)",
        "minOperations(nums = [2, 1, 3, 4, 5], k = 2)",
        "minOperations(nums = [2, 1, 5, 2, 3], k = 4)",
        "minOperations(nums = [2, 1, 4, 5, 3, 2, 1, 4, 5, 6], k = 3)",
        "minOperations(nums = [5, 7, 8, 10], k = 3)",
        "minOperations(nums = [5, 3, 4, 1, 6], k = 3)",
        "minOperations(nums = [4, 8, 9, 2, 1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1,3,4,2,5,4,7,3,4,1,8,10,9,5], k = 5)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [], moveTo = [])",
        "relocateMarbles(nums=[1, 2], moveFrom=[1], moveTo=[2])",
        "relocateMarbles(nums = [1], moveFrom = [], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [], moveTo = [2])",
        "relocateMarbles(nums=[], moveFrom=[], moveTo=[2])"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(nums = [1], m = 1, k = 1)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3], m = 4, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 2)",
        "maxSum(nums=[1, 2, 3, 4, 5], m=3, k=2)",
        "maxSum(nums=[1,2,3,4], m=1, k=2)",
        "maxSum(nums = [1, 2, 3, 1, 3], m = 2, k = 1)",
        "maxSum(nums = [5, 2, 2, 3, 7, 8, 2], m = 2, k = 4)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"abca\")",
        "canMakeSubsequence(s1 = \"abz\", s2 = \"abza\")",
        "canMakeSubsequence(s1=\"abc\", s2=\"abca\")",
        "canMakeSubsequence(s1 = \"aaz\", s2 = \"abz\")",
        "canMakeSubsequence(s1 = \"abcdefg\", s2 = \"hijklmn\")",
        "canMakeSubsequence(s1 = \"bcz\", s2 = \"bzac\")",
        "canMakeSubsequence(s1 = \"zab\", s2 = \"zb\")",
        "canMakeSubsequence(s1 = \"abac\", s2 = \"zbcz\")",
        "canMakeSubsequence(s1 = \"azcbobobegghakl\", s2 = \"zba\")",
        "canMakeSubsequence(s1 = \"bac\", s2 = \"badbac\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1], nums2 = [2])",
        "minSum(nums1=[1,2,3], nums2=[4,5,6])",
        "minSum(nums1 = [1,2], nums2 = [1,2,3])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 2, 2])",
        "minSum(nums1=[0, 1], nums2=[1, 0])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=['1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words=['1','prev','2','prev','prev'])",
        "lastVisitedIntegers(words = [\"4\", \"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"3\", \"prev\", \"2\"])"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [0, 2, 3, 1])",
        "isGood(nums = [1, 3, 5, 7])",
        "isGood(nums = [0, 2, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_424": [
        "minOperations(nums = [3,3,3,3])",
        "minOperations(nums = [3,3,3,3,3])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [3,3,2,1,3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 4, 4, 3, 2, 1])",
        "minOperations(nums = [3,3,3,3,1,1,1,2,2,2])",
        "minOperations(nums=[3,3,1,1,1,2,2,2])",
        "minOperations(nums = [2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])"
    ],
    "sample_451": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"010101\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"0101\")",
        "minChanges(s = \"0101\")",
        "minChanges(s = \"aabc\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"aabbbbcccc\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 1)",
        "distributeCandies(n = 6, limit = 1)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n=10, limit=2)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n = 15, limit = 5)",
        "distributeCandies(n = 8, limit = 1)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,2,3,4], nums2 = [2,3,4,5])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [2, 1, 0], nums2 = [4, 3, 2])",
        "minSum(nums1 = [2, 0], nums2 = [0, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 2, 1])",
        "minSum(nums1=[1,2,3,4], nums2=[0,2,1,0])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [0, 1, 2])",
        "minimumRightShifts(nums = [0, 1, 2])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [0,1,2])",
        "minimumRightShifts(nums = [1,2,3])",
        "minimumRightShifts(nums = [1, 0, 0])",
        "minimumRightShifts(nums = [2, 3, 1, 6, 5, 4])"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums = [1,2,3,4], t = 5)",
        "countPairs(nums = [1, 2, 3, 4], t = 6)",
        "countPairs(nums=[1,2,3,4], t=5)",
        "countPairs(nums = [1,2,3,4], t = 6)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1, 2, 3, 4], t = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 8)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"pop\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"top\"])",
        "lastVisitedIntegers(words=[\"push\", \"1\", \"push\", \"2\", \"pop\"])",
        "lastVisitedIntegers(words = [\"p\", \"4\", \"p\", \"3\", \"p\", \"2\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"bcz\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"defg\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"axz\", str2 = \"ayb\")",
        "canMakeSubsequence(str1 = \"axyz\", str2 = \"abz\")",
        "canMakeSubsequence(str1 = \"abb\", str2 = \"baa\")",
        "canMakeSubsequence(str1 = \"ah\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"bacd\", str2 = \"abadc\")"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 0, 1, 1, 1], nums2 = [1, 1, 1, 0, 1])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 0, 4])",
        "minSum(nums1 = [1,2,3,4,5,6], nums2 = [7,8,9,10,11,12])",
        "minSum(nums1 = [0, 1, 2], nums2 = [2, 1, 0])",
        "minSum(nums1 = [1, 1, 1], nums2 = [1, 2, 3])",
        "minSum(nums1=[5, 2, 0], nums2=[1, 2, 3])",
        "minSum(nums1 = [2, 0, 6, 0, 4], nums2 = [1, 0, 0, 1, 1])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]], k = 1)",
        "countPairs(coordinates = [[0,0],[1,1],[2,2],[3,3],[4,4]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,1],[1,0],[1,2]], k = 1)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1], [0, 0]], k = 1)",
        "countPairs(coordinates = [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33], [34, 35]], k = 3)",
        "countPairs(coordinates = [[0, 1], [1, 0], [1, 1], [1, 2], [2, 0]], k = 1)",
        "countPairs(coordinates = [[0,0], [0,1], [1,0], [1,1], [2,0], [2,1], [3,0], [3,1], [1,2], [2,2]], k = 1)",
        "countPairs(coordinates = [[0,0],[1,0],[0,1],[2,0],[1,1],[2,1],[1,2],[2,2]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,0],[1,1],[2,0],[2,1],[3,0],[3,1],[4,0],[4,1],[4,2],[4,3]], k = 3)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"cdab\"])",
        "maximumNumberOfStringPairs(words=[\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"bcd\",\"cde\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"cdc\"])",
        "maximumNumberOfStringPairs(words=[\"abab\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, -3, -4, 5])",
        "maxStrength(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "maxStrength(nums = [1, 1, 1, 1, 1])",
        "maxStrength(nums = [2,3,-4,5])",
        "maxStrength(nums = [-4, -3, -2, -1, 2, 3, 4])",
        "maxStrength(nums = [-1,-2,-3,4])",
        "maxStrength(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "maxStrength(nums = [4, -4, 3, -2, -3, 1, 0])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 3, 5, 8])",
        "minimumCoins(prices=[3, 1, 5, 4, 2])",
        "minimumCoins(prices = [1, 1, 1, 1, 1, 1])",
        "minimumCoins(prices = [2, 1, 1, 3])",
        "minimumCoins(prices = [3, 1, 1, 2, 1])",
        "minimumCoins(prices = [1, 2, 1, 3, 2, 4, 1, 3])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,2])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,3])",
        "minLengthAfterRemovals(nums=[1,1,2,2,3,3,3])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4], money = 10)",
        "buyChoco(prices=[1], money=1)",
        "buyChoco(prices = [2, 1], money = 1)",
        "buyChoco(prices=[0, 0], money=0)",
        "buyChoco(prices=[1, 1, 1], money=1)",
        "buyChoco(prices = [4, 2], money = 6)",
        "buyChoco(prices = [2, 1, 4], money = 4)",
        "buyChoco(prices = [50], money = 100)",
        "buyChoco(prices = [1, 3, 4], money = 6)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words=[\"1\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"5\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"3\", \"5\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"3\", \"4\", \"prev\", \"prev\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [2, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 2, 2])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7], moveTo = [9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 9], moveTo = [9, 7])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7], moveTo = [8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [9, 10, 11])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [9], moveTo = [9, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7], moveFrom = [1, 3], moveTo = [8, 9])",
        "relocateMarbles(nums=[8, 9, 1, 2, 3], moveFrom=[1, 3], moveTo=[5, 6])",
        "relocateMarbles(nums = [5, 5, 6, 7, 8, 9, 9], moveFrom = [7, 8], moveTo = [9, 9])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"efgh\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"by\")",
        "canMakeSubsequence(str1 = \"abx\", str2 = \"aby\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"aab\")",
        "canMakeSubsequence(str1 = \"aaa\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abce\", str2 = \"bdf\")",
        "canMakeSubsequence(str1 = \"hello\", str2 = \"gello\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"e\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pear\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"java\", \"python\", \"ruby\"], x = \"a\")",
        "findWordsContaining(words = [\"i\", \"like\", \"bananas\"], x = \"i\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"cde\", \"efg\"], x = \"c\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"wonderful\", \"abc\"], x = \"w\")",
        "findWordsContaining(words = [\"banana\", \"pizza\", \"orange\", \"carrot\"], x = \"n\")",
        "findWordsContaining(words = [\"home\", \"mouse\", \"she\", \"sells\", \"sea\", \"shells\"], x = \"e\")",
        "findWordsContaining(words = [\"cool\", \"crisis\", \"wow\", \"dolphin\"], x = \"c\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 0, 1], [0, 0, 1], [1, 1, 1]])",
        "matrixSum(nums = [[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "matrixSum(nums = [[1,1,1],[2,2,2],[3,3,3]])",
        "matrixSum(nums = [[1,1,1], [1,1,1], [1,1,1]])",
        "matrixSum(nums = [[0,1],[1,1]])",
        "matrixSum(nums = [[0,1,0,2]])",
        "matrixSum(nums = [[1, 1, 2], [3, 2, 1], [2, 1, 3]])",
        "matrixSum(nums=[[1,1,0,1,1], [0,0,1,1,1], [1,1,0,1,1], [1,0,1,0,1]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 1)",
        "buyChoco(a = [1, 2], money = 0)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [1, 2], money = 4)",
        "buyChoco(a = [10, 20, 30], money = 10)",
        "buyChoco(a = [1, 2, 3, 4], money = 4)",
        "buyChoco(a = [1, 2, 3, 4], money = 2)",
        "buyChoco(a = [1, 2, 5], money = 4)",
        "buyChoco(a = [20, 10, 50], money = 20)",
        "buyChoco(a = [4, 2, 5, 1], money = 5)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [6, 6, 6, 7, 7, 7])",
        "minGroupsForValidAssignment(nums = [1, 3, 5, 2])",
        "minGroupsForValidAssignment(nums = [6, 4, 2, 1])",
        "minGroupsForValidAssignment(nums = [5, 4, 3, 3, 3, 2, 2])",
        "minGroupsForValidAssignment(nums = [12, 12, 10, 10, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
        "minGroupsForValidAssignment(nums = [4, 1, 8, 2, 2, 3, 2, 1, 5, 6, 4, 4, 6, 6, 6, 3, 5, 4])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 1, 5, 2])",
        "minimumRightShifts(nums = [3, 4, 1, 5, 2])",
        "minimumRightShifts(nums = [1, 3, 5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [4, 5, 6, 1, 2, 3])",
        "minimumRightShifts(nums = [1, 5, 6, 2, 3])",
        "minimumRightShifts(nums = [6, 8, 12, 10])",
        "minimumRightShifts(nums=[17, 15, 16])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [4, 2, 5, 8])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [2, 4, 5, 8])",
        "maxStrength(nums = [2, 3, 5, 6])",
        "maxStrength(nums = [2, 3, 5, 6, 8])",
        "maxStrength(nums=[4, 5, 6, 8])",
        "maxStrength(nums = [8, 5, 1, 3, 2, 7, 6])"
    ],
    "sample_464": [
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n=4, limit=2)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n=1, limit=2)",
        "distributeCandies(n=2, limit=3)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 4, 4, 5, 5, 5])",
        "minLengthAfterRemovals(nums=[2, 3, 3, 3, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 1, 1, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [4, 1, 4, 1, 1, 1])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"l\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"rat\", \"fox\"], x = \"at\")",
        "findWordsContaining(words = [\"python\", \"java\", \"c\"], x = \"t\")",
        "findWordsContaining(words = [\"car\", \"cat\", \"rat\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"grape\", \"peach\"], x = \"a\")",
        "findWordsContaining(words = [\"apples\", \"banana\", \"pears\"], x = \"s\")",
        "findWordsContaining(words=[\"zebra\", \"cat\", \"mouse\"], x=\"a\")",
        "findWordsContaining(words = [\"ax\", \"bye\", \"banana\"], x = \"a\")",
        "findWordsContaining(words=[\"code\", \"data\"], x=\"a\")"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 2], [2, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 0], [0, 1, 1]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3])",
        "maxSubarrays(nums = [1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 0, 3])",
        "maxSubarrays(nums = [3, 2, 6, 4, 1])",
        "maxSubarrays(nums = [2, 3, 1, 2])",
        "maxSubarrays(nums = [1, 2, 3, 1, 5, 6])",
        "maxSubarrays(nums = [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [3, 2, 1, 4, 1, 2, 5, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"beautiful\", k = 3)",
        "beautifulSubstrings(s = \"acbadbaada\", k = 2)",
        "beautifulSubstrings(s = \"beautifull\", k = 2)",
        "beautifulSubstrings(s = \"aeiouxyaeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiouaeiouaeiou\", k = 5)",
        "beautifulSubstrings(s = \"ghiabcdefhelloadamhello\", k = 2)",
        "beautifulSubstrings(s = \"zaza\", k = 2)",
        "beautifulSubstrings(s = \"abgfechid\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums=[1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [3, 1, 5, 4, 2])",
        "minimumSeconds(nums = [1, 3, 2])",
        "minimumSeconds(nums = [2, 1, 2])",
        "minimumSeconds(nums = [1, 1, 2, 2, 2])",
        "minimumSeconds(nums = [4, 2, 0, 5, 1, 7])"
    ],
    "sample_327": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 15)",
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 9)",
        "isFascinating(n = 56789)",
        "isFascinating(n = 569)",
        "isFascinating(n = 523)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1], target = 0)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 0)",
        "lengthOfLongestSubsequence(nums=[], target=1)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 6)",
        "lengthOfLongestSubsequence(nums = [10], target = 11)",
        "lengthOfLongestSubsequence(nums = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], target = 100)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[0,1]])",
        "matrixSum(nums = [[1,1,1]])",
        "matrixSum(nums = [[1,2,3], [4,5,6]])",
        "matrixSum(nums = [[1, 1, 3], [2, 2, 2], [3, 3, 1]])",
        "matrixSum(nums = [[2], [1], [0]])",
        "matrixSum(nums = [[3, 1, 2], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_326": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 12)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 345)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]])",
        "findChampion(grid = [[1, 1], [1, 0]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1,1,0],[1,1,1],[0,1,1]])",
        "findChampion(grid = [[1,0,1], [0,1,0], [1,0,1]])",
        "findChampion(grid = [[1,0,1], [0,1,0], [1,0,1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1,0,0,1],[0,1,1,0],[0,1,1,0],[1,0,0,1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 4, 5, 1, 2])",
        "minimumSum(nums = [5, 3, 2, 4, 1])",
        "minimumSum(nums = [2, 1, 5, 0, 4, 6])",
        "minimumSum(nums = [3, 2, 1, 5, 4])",
        "minimumSum(nums = [5, 1, 3, 4, 2])",
        "minimumSum(nums = [1, 3, 4, 5, 6])",
        "minimumSum(nums = [3, 2, 5, 1])",
        "minimumSum(nums = [3, 5, 4, 2, 1])"
    ],
    "sample_450": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s=\"abba\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"abbac\")",
        "minChanges(s = \"aabbccddeef\")",
        "minChanges(s = \"caacaba\")",
        "minChanges(s = \"cddd\")",
        "minChanges(s = \"baababa\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"101\", s2 = \"010\", x = 2)",
        "minOperations(s1 = \"10\", s2 = \"01\", x = 1)",
        "minOperations(s1 = \"0000\", s2 = \"1111\", x = 1)",
        "minOperations(s1 = \"010\", s2 = \"101\", x = 3)",
        "minOperations(s1 = \"0000\", s2 = \"1111\", x = 2)",
        "minOperations(s1 = \"10101\", s2 = \"11001\", x = 4)",
        "minOperations(s1 = \"1001\", s2 = \"1010\", x = 3)",
        "minOperations(s1 = \"1100\", s2 = \"1110\", x = 3)",
        "minOperations(s1 = \"10\", s2 = \"10\", x = 3)",
        "minOperations(s1 = \"000000000000000000000000000001\", s2 = \"0000000000000000000000000000000\", x = 1)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 3, z = 1)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 2, y = 2, z = 4)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x=2, y=3, z=1)",
        "longestString(x = 4, y = 2, z = 2)",
        "longestString(x=1, y=3, z=0)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 0, 1, 0, 3])",
        "maxSubarrays(nums = [1, 0, 2, 0])",
        "maxSubarrays(nums=[0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 2, 3, 1, 1, 1])",
        "maxSubarrays(nums = [2, 3, 5, 7, 9, 11])",
        "maxSubarrays(nums=[1, 2, 3, 1, 5, 3])",
        "maxSubarrays(nums = [4, 0, 1, 1, 4, 0, 1, 1])",
        "maxSubarrays(nums = [5, 1, 3, 2, 5, 7, 3, 1])"
    ],
    "sample_306": [
        "countSeniors(details=[\"Alice 01/01/2000\", \"Bob 01/01/1950\", \"Charlie 01/01/1960\"])",
        "countSeniors(details = [\"John Doe    35\", \"Jane Doe    32\", \"Alice Smith  62\", \"Bob Johnson  67\"])",
        "countSeniors(details = [\"John Smith, 67, Street 1\", \"Mary Johnson, 54, Street 2\", \"Sarah Taylor, 73, Street 3\"])",
        "countSeniors(details = [\"Emily,19,F\", \"David,65,M\", \"Nancy,70,F\", \"George,55,M\"])",
        "countSeniors(details=[\"Harris,29,M\", \"Yang,56,F\", \"Park,34,M\", \"Johnson,71,M\"])",
        "countSeniors(details = [\"Mr. X, 28/07/1998\", \"Mrs. Y, 24/08/1975\", \"Dr. Z, 12/12/1956\"])",
        "countSeniors(details = [\"John Doe;19010501\", \"Mary Smith;19560225\", \"Jane Doe;19790715\"])",
        "countSeniors(details = [\"Dave,20,34512345\", \"Mary,54,34564721\", \"John,65,34512332\"])",
        "countSeniors(details = [\"Andrew L  76\", \"Hannah B  22\", \"Lisa M  62\", \"Peter W  59\"])",
        "countSeniors(details = [\"Albert MacFarlane 12/12/1935\", \"David Devcic 07/05/1978\", \"Grace Greenwood 19/08/1923\", \"Ian Franklin 11/05/1948\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 0])",
        "maxSubarrays(nums=[1, 0, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1,1,1,0,1,1])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 7, 8], moveFrom = [7, 6], moveTo = [8, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [3, 7], moveTo = [8, 5])",
        "relocateMarbles(nums = [4, 5, 6, 8, 9], moveFrom = [4, 6], moveTo = [7, 5])",
        "relocateMarbles(nums = [4, 5, 6, 8, 9], moveFrom = [4, 8], moveTo = [1, 7])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 5, 8, 9], moveFrom = [2, 1], moveTo = [8, 5])",
        "relocateMarbles(nums = [4, 5, 6, 7, 8, 9], moveFrom = [4, 7], moveTo = [2, 5])",
        "relocateMarbles(nums = [2, 5, 6, 8, 9], moveFrom = [2, 8], moveTo = [4, 1])",
        "relocateMarbles(nums=[1, 2, 3, 5, 6, 7, 8], moveFrom=[1, 3], moveTo=[9, 10])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aac\", s3 = \"aad\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeksquiz\", s3 = \"geeksforgeeksquiz\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"yy\", s3 = \"z\")",
        "findMinimumOperations(s1 = \"geeksforgeeks\", s2 = \"geeks\", s3 = \"geeksquiz\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aac\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"xyx\", s2 = \"yxx\", s3 = \"xxy\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [5,4,3,2,1])",
        "minLengthAfterRemovals(nums = [5,4,3,2,1])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [6,1,5,4,3,2,5,2,1])",
        "minLengthAfterRemovals(nums = [2,1,2,3,4,5,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "minLengthAfterRemovals(nums=[5,4,7,6,7,3,7,4])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1,2,2], [2,4,3], [3,5,1]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 4], [2, 3, 2], [1, 2, 1]])",
        "maximizeTheProfit(n=7, offers=[[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4], [5, 6, 5], [6, 7, 6]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 3], [2, 4, 5], [3, 6, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 1, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [2, 4, 30]])",
        "maximizeTheProfit(n=10, offers=[[1, 3, 6], [2, 4, 7], [3, 5, 8], [4, 6, 9], [5, 7, 10], [6, 8, 11], [7, 9, 12], [8, 10, 13], [9, 11, 14], [10, 12, 15]])",
        "maximizeTheProfit(n = 6, offers = [[2, 4, 2], [3, 6, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 3], [2, 3, 2], [3, 3, 1], [4, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 8], [2, 5, 6], [3, 5, 9], [1, 3, 5], [2, 4, 4], [2, 3, 3]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums=[7,2,5,10,8], m=2)",
        "canSplitArray(nums = [1,2,3,3,4,5], m = 6)",
        "canSplitArray(nums = [1,2,3,3,4,5], m = 6)",
        "canSplitArray(nums = [2,2,1,1,2,2,1,1], m = 3)",
        "canSplitArray(nums = [2, 2, 1, 1, 2, 2, 1, 1], m = 4)",
        "canSplitArray(nums = [2, 2, 1, 1, 2, 2, 1, 1], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 3, 4, 4, 5, 5], m = 10)",
        "canSplitArray(nums = [2,2,1,1,1], m = 3)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 1], m = 1)"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 1, 2], k = 3)",
        "checkArray(nums = [3, 2, 1], k = 1)",
        "checkArray(nums = [2, 1, 4, 5, 3, 2, 1], k = 3)",
        "checkArray(nums = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,",
        "checkArray(nums = [2, 1, 4, 3, 2, 1, 5], k = 2)",
        "checkArray(nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
        "checkArray(nums = [2, 2, 2, 1, 1, 1], k = 2)",
        "checkArray(nums = [0, 2, 4, 1], k = 3)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 4, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "maximumBeauty(nums = [1, 3, 2, 6, 7, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 100], k = 1)",
        "maximumBeauty(nums = [1, 3, 4, 7, 8, 10], k = 2)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"\", \"\", \"\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"\", \"\"], separator = \"\")",
        "splitWordsBySeparator(words = [], separator = \".\")",
        "splitWordsBySeparator(words=[\"\"], separator=\" \")",
        "splitWordsBySeparator(words = [\"\", \"\", \"\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"\", \"\", \"\"], separator = \"_\")",
        "splitWordsBySeparator(words=['a', 'b', 'c'], separator='')",
        "splitWordsBySeparator(words = ['-'], separator = '-')",
        "splitWordsBySeparator(words = [\"\", \" \", \"  \", \"   \"], separator = \"\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [0, 1, 1])",
        "countWays(nums = [3, 4, 4])",
        "countWays(nums = [3, 3, 2, 1, 5, 4])"
    ],
    "sample_122": [
        "minimumIndex(nums = [3,1,3,3,2])",
        "minimumIndex(nums = [3,1,3,3,2])",
        "minimumIndex(nums = [1,2,2,3,1])",
        "minimumIndex(nums = [3,1,2,3,2])",
        "minimumIndex(nums = [3,1,3,4,2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1,1,2,2,3])",
        "minimumIndex(nums = [3,1,1,3,2,2])",
        "minimumIndex(nums = [1, 3, 4, 5, 1])",
        "minimumIndex(nums = [3,2,1,1,1,1,1,1])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1,2],[2,3],[4,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[4,5]])",
        "numberOfPoints(nums = [[1,2],[2,3],[4,5]])",
        "numberOfPoints(nums = [[1,5],[2,3]])",
        "numberOfPoints(nums = [[1,5],[2,3],[7,8]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [1, 4]])",
        "numberOfPoints(nums = [[1,2], [2,3], [3,4], [1,3], [2,4]])",
        "numberOfPoints(nums = [[1,5],[2,3],[6,10]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[2,4],[5,7],[6,8]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [1,4,2,3])",
        "semiOrderedPermutation(nums = [4,3,2,1])",
        "semiOrderedPermutation(nums = [4, 2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 5, 3])",
        "semiOrderedPermutation(nums = [4,1,2,3,5,6,7])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 2, target = 4)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 0, 1, 1, 1])",
        "minimumIndex(nums = [3, 1, 3, 3, 2])",
        "minimumIndex(nums = [1, 0, 1, 1, 0, 1, 0])",
        "minimumIndex(nums = [1, 0, 1, 1, 0, 1, 0])",
        "minimumIndex(nums = [1,1,0,0,0,1,1])",
        "minimumIndex(nums = [3, 0, 1, 1, 2, 1, 2])",
        "minimumIndex(nums = [1,0,1,1,1,1,1,1,1])",
        "minimumIndex(nums = [2,2,1,1,1,2,2])",
        "minimumIndex(nums = [2, 0, 1, 0, 1, 0, 1])",
        "minimumIndex(nums = [4, 4, 4, 1, 2, 3, 4])"
    ],
    "sample_176": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 4, k = 6)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1,3],[1,4],[2,4],[2,5]])",
        "numberOfPoints(nums = [[1,5],[2,4],[3,6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [4, 7]])",
        "numberOfPoints(nums = [[1, 3], [4, 6], [7, 9]])",
        "numberOfPoints(nums = [[1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4], [1, 4],",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8], [1, 1]])",
        "numberOfPoints(nums = [[1,2], [1,3], [2,3], [4,5], [4,6], [5,6]])",
        "numberOfPoints(nums = [[1, 5], [1, 5], [2, 4], [3, 4], [3, 5]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [1, 2, 3], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [3, 4, 2, 1, 2], target = 1)",
        "maximumJumps(nums = [1, 3], target = 1)",
        "maximumJumps(nums = [2, 3, 1, 1, 2, 3, 3], target = 2)",
        "maximumJumps(nums = [1, 3, 2, 1], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 2, 4, 2, 5], target = 2)",
        "maximumJumps(nums = [4, 2, 3, 1, 2, 5], target = 3)"
    ],
    "sample_173": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 4, k = 5)"
    ],
    "sample_154": [
        "canSplitArray(nums = [2, 2, 1, 1], m = 3)",
        "canSplitArray(nums = [2, 2, 1, 1], m = 3)",
        "canSplitArray(nums=[7,2,5,10,8], m=2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 10)",
        "canSplitArray(nums = [2,3,1,2], m = 5)",
        "canSplitArray(nums=[7,2,5,10,8], m=3)",
        "canSplitArray(nums = [2, 2, 1, 1, 2], m = 3)",
        "canSplitArray(nums = [1, 1, 1], m = 1)",
        "canSplitArray(nums = [2, 3, 3, 2], m = 2)",
        "canSplitArray(nums = [2, 3, 1, 4, 2, 1, 2], m = 6)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [3, 4, 12]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [3, 4, 5], [2, 3, 3]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 4], [2, 4, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [2, 4, 3], [3, 3, 2]])",
        "maximizeTheProfit(n = 7, offers = [[1, 2, 10], [2, 4, 15], [3, 5, 7], [4, 7, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1,3,1],[2,4,2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 1], [3, 4, 2], [2, 3, 3], [4, 4, 4], [2, 2, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 4, 20], [2, 3, 15], [3, 4, 10], [2, 2, 8]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 3], [2, 4, 5], [3, 5, 1], [4, 4, 2], [5, 5, 3]])",
        "maximizeTheProfit(n = 8, offers = [[1, 2, 3], [1, 3, 6], [2, 2, 4], [4, 5, 5]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 1)",
        "checkArray(nums=[1,1,1,1,1], k=2)",
        "checkArray(nums = [1, 1, 0, 0], k = 2)",
        "checkArray(nums = [3, 1, 4, 2], k = 2)",
        "checkArray(nums = [23,2,4,6,8], k = 3)",
        "checkArray(nums = [4, -1, 2, 2], k = 2)",
        "checkArray(nums = [2, 3, 1, 3, 3], k = 2)",
        "checkArray(nums=[3, 1, -2, 1, 2], k=2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,2,2], k = 0)",
        "longestEqualSubarray(nums = [1,2,3,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 4)",
        "longestEqualSubarray(nums=[1,2,3,4,3,4,1,2,3], k=1)",
        "longestEqualSubarray(nums = [3, 4, 5, 2, 1, 2, 3, 3, 5], k = 1)",
        "longestEqualSubarray(nums = [1,2,2,3,4,3,2,1,2,3,1,2,3,4], k = 0)"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 2, queries = [[1, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [4, 2], [3, 2], [2, 2], [1, 2], [0, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 2], [1, 1], [2, 1]])"
    ],
    "sample_55": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kdeebsbnce')",
        "smallestString(s = 'kdeeebncd')",
        "smallestString(s = \"kddsbncfa\")",
        "smallestString(s = \"kdeeebncd\")",
        "smallestString(s = 'kdeabcd')",
        "smallestString(s = 'kdeeebncde')",
        "smallestString(s = 'kddebncg')"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [0, 1, 2, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [5, 2, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [0,1,1,0], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 5, 3, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [10, 12, 14, 16], threshold = 18)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [5, 6, 7, 8, 9], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 17, 5, 10, 13], threshold = 12)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [5, 1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 2, 2, 2, 2], threshold = 1)",
        "longestAlternatingSubarray(nums=[3, 1, 3, 6, 1, 7], threshold=6)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 1], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 1, 4, 1, 2, 2, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [0, 1, 17, 5, 6, 17, 18], threshold = 16)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 1])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 2, 2])",
        "distinctDifferenceArray(nums = [5, 3, 2, 1, 4])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"CDAB\")",
        "minLength(s = \"ABAB\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"CDABAB\")",
        "minLength(s = \"ADBCE\")",
        "minLength(s = \"ACBDBCDA\")",
        "minLength(s = \"ACADB\")",
        "minLength(s = \"ABAABBAB\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"aabaa\")",
        "minimumCost(s = \"abacabad\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [2, 2, 1, 1], m = 3)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 16)",
        "canSplitArray(nums = [1, 3, 4], m = 5)",
        "canSplitArray(nums=[4, 3, 1, 2], m=5)",
        "canSplitArray(nums = [2, 5, 4, 3], m = 7)",
        "canSplitArray(nums = [4, 2, 3, 6], m = 10)",
        "canSplitArray(nums = [2, 5, 9, 12], m = 5)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [2, 3, 1, 6, 5])",
        "doesValidArrayExist(derived = [1,0,0,1,1,0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 1, 1, 0, 0])"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 1)",
        "checkArray(nums = [1,2,3,4], k = 1)",
        "checkArray(nums = [3,2,1,4,2], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "checkArray(nums = [1, 2, 3, 1], k = 2)",
        "checkArray(nums = [3,2,1,3,4], k = 2)",
        "checkArray(nums=[5, 3, 1, 4, 2], k=3)",
        "checkArray(nums = [5, 2, 3, 4, 1, 6], k = 2)",
        "checkArray(nums=[5,2,4,1], k=3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours=[], target=100)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 30, 35], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 30], target=35)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 7, 6, 5, 4], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [24, 32, 56, 3], target = 48)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 3, 2, 6, 1, 4, 5, 2], k = 2)",
        "maximumBeauty(nums = [1, 3, 4, 5, 7, 9, 10], k = 2)",
        "maximumBeauty(nums=[1, 3, 2, 6, 7, 9], k=1)",
        "maximumBeauty(nums = [1, 3, 2, 6, 1, 12, 15], k = 5)",
        "maximumBeauty(nums = [1, 2, 3, 5, 8, 9, 10], k = 4)",
        "maximumBeauty(nums = [1, 3, 5, 6, 7, 8, 9, 11, 12], k = 2)"
    ],
    "sample_205": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"10\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"11\")",
        "minimumOperations(num = \"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
        "minimumOperations(num = \"4020\")",
        "minimumOperations(num = \"12022\")",
        "minimumOperations(num = \"1020304050\")",
        "minimumOperations(num = \"00222222\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"00\")",
        "minimumOperations(s = \"0000\")",
        "minimumOperations(s = \"0000\")",
        "minimumOperations(s = \"0100\")",
        "minimumOperations(s = \"0001\")",
        "minimumOperations(s = \"0001\")",
        "minimumOperations(s = \"001\")",
        "minimumOperations(s = \"100\")",
        "minimumOperations(s = \"00025075\")",
        "minimumOperations(s = '01220122')"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4, 5])",
        "semiOrderedPermutation(nums = [3, 4, 1, 5, 2])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1, 5])",
        "semiOrderedPermutation(nums = [4, 1, 5, 2, 3])",
        "semiOrderedPermutation(nums = [2,1,3,4,5])",
        "semiOrderedPermutation(nums = [2,3,1,5,4,6])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums=[4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [5, 1, 4, 3, 2, 6])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLRRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRA\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRLR\")",
        "furthestDistanceFromOrigin(moves = 'RRRL')",
        "furthestDistanceFromOrigin(moves = 'LLRRRA')",
        "furthestDistanceFromOrigin(moves = \"RRLLLLA\")",
        "furthestDistanceFromOrigin(moves = \"RLLRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLRLRRLRRLRLRLRRLRLRRLRRRLRRLRRLLRRLRRRLRRLRRLLRRLLLRLRRLRLRRLLLRRLRLLRRL\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words=[\"hello\", \"world\"], s=\"hwo\")",
        "isAcronym(words = [\"apple\", \"banana\", \"carrot\"], s = \"ABC\")",
        "isAcronym(words = [\"water\", \"falls\"], s = \"wf\")",
        "isAcronym(words = [\"peter\", \"piper\", \"picked\"], s = \"Ppp\")",
        "isAcronym(words = [\"Big\", \"Apple\", \"Banana\", \"Cherry\"], s = \"BABC\")",
        "isAcronym(words = [\"fat\", \"cat\", \"and\", \"dog\"], s = \"fcatad\")",
        "isAcronym(words=[\"hello\", \"there\", \"mate\"], s=\"HT\")",
        "isAcronym(words = [\"T\", \"o\", \"o\", \"L\"], s = \"TooL\")",
        "isAcronym(words = [\"react\", \"native\", \"ios\", \"android\", \"web\"], s = \"RNiAw\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[1, 2, 3], modulo=2, k=1)",
        "countInterestingSubarrays(nums = [3, 2, 1], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [0, 1, 0], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 2], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 3], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 0, 1, 0], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [4, 5, 0, 3], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [5, 5, 5, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], modulo = 3, k = 1)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12,23,34,45,56])",
        "countBeautifulPairs(nums = [12,23,34,45,56])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 91])",
        "countBeautifulPairs(nums = [12, 28, 46, 34])",
        "countBeautifulPairs(nums = [12,23,45,67])",
        "countBeautifulPairs(nums = [12, 23, 34])",
        "countBeautifulPairs(nums = [12, 28, 46, 38])",
        "countBeautifulPairs(nums = [12, 23])",
        "countBeautifulPairs(nums=[12, 28, 29])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [1,1,1,1,1], target = 1)",
        "maximumJumps(nums = [1,2,3], target = 1)",
        "maximumJumps(nums = [1,2,3], target = 4)",
        "maximumJumps(nums=[1,1,1,1,1], target=3)",
        "maximumJumps(nums = [3,4,0,2,1,2], target = 2)",
        "maximumJumps(nums = [1,3,5,8,9,2,6], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8], target = 2)",
        "maximumJumps(nums = [2, 3, 5, 1, 2, 6, 1], target = 1)",
        "maximumJumps(nums = [3, 4, 2, 2, 0, 1, 1, 3, 3, 0, 0, 1], target = 2)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 288])",
        "countBeautifulPairs(nums = [12, 288])",
        "countBeautifulPairs(nums = [12, 28, 6, 18])",
        "countBeautifulPairs(nums=[12,23,34,45,56])",
        "countBeautifulPairs(nums = [12, 28, 6, 3])",
        "countBeautifulPairs(nums = [220, 45, 98])",
        "countBeautifulPairs(nums = [22, 60])",
        "countBeautifulPairs(nums = [12, 28, 15, 36])",
        "countBeautifulPairs(nums = [12, 28, 16, 5])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDEFG\")",
        "minLength(s = \"abababababABCD\")"
    ],
    "sample_150": [
        "finalString(s = 'This is a test string')",
        "finalString(s = 'This is a test string')",
        "finalString(s = 'This is a string')",
        "finalString(s = 'This is a test')",
        "finalString(s = \"sitting\")",
        "finalString(s = \"kirtan\")",
        "finalString(s = 'Thisisirritating')",
        "finalString(s = 'spiritin')",
        "finalString(s = 'Thisisirtsng')",
        "finalString(s = \"hsiirtstsngi\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 3, 2])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 1, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 5, 7, 8, 9])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 5])",
        "findValueOfPartition(nums = [0, 1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 1, 2, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 7])",
        "findValueOfPartition(nums = [0, 1, 1])",
        "findValueOfPartition(nums = [1, 1, 1, 4, 5, 6])",
        "findValueOfPartition(nums = [0, 1, 3, 4, 5, 6])"
    ],
    "sample_7": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [3, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2], [0, 2]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 4, target = 15)",
        "minimumPossibleSum(n = 2, target = 1)"
    ],
    "sample_171": [
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n=1, k=2)",
        "minimumSum(n=2, k=5)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 14, 16], target = 18)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 9, 8, 7], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [21, 22, 23, 24, 25], target = 26)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 2, 3, 4, 5, 6, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [21, 19, 18, 20], target = 21)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 10, 50, 5], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2, 4, 1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 16, 25, 17], target = 20)"
    ],
    "sample_152": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 15)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 10)",
        "canSplitArray(nums = [7, 1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [7, 1, 3, 4, 7], m = 10)",
        "canSplitArray(nums = [7, 1, 10], m = 9)",
        "canSplitArray(nums = [7, 1, 10], m = 3)",
        "canSplitArray(nums = [7, 1, 1, 1], m = 10)",
        "canSplitArray(nums = [3, 4, 5, 7], m = 10)",
        "canSplitArray(nums=[4,3,2,2,1], m=3)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [4, 5, 0, -2, -3, 1], m = 5, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4], m=2, k=0)",
        "countInterestingSubarrays(nums = [3, 2, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 2, 1], m=3, k=1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 5, 3, 4, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 2, 2, 1, 2, 2, 2], m = 2, k = 0)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3], t = 3)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3], t = 2)",
        "longestAlternatingSubarray(nums = [2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [2, 6, 1, 4, 7, 8], t = 5)",
        "longestAlternatingSubarray(nums = [2, 6, 1, 4, 7, 8], t = 5)",
        "longestAlternatingSubarray(nums=[1, 3, 2, 5, 4], t=5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5,6], t = 100)",
        "longestAlternatingSubarray(nums = [1, 2, 4, 1, 5], t = 3)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums=[0, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,0,1,0,0,1,0,1])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num='512301000')"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 12, b = 3)",
        "makeTheIntegerZero(a = 12, b = 3)",
        "makeTheIntegerZero(a = 12, b = 3)",
        "makeTheIntegerZero(a = 19, b = 2)",
        "makeTheIntegerZero(a = 14, b = 4)",
        "makeTheIntegerZero(a = 111, b = 1)",
        "makeTheIntegerZero(a=11, b=5)",
        "makeTheIntegerZero(a = 198, b = 2)",
        "makeTheIntegerZero(a = 222, b = 43)"
    ],
    "sample_157": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 3)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 3)",
        "canSplitArray(nums = [2, 2, 1, 1, 2], m = 4)",
        "canSplitArray(nums = [1, 1, 1], m = 3)",
        "canSplitArray(nums = [2, 1, 2, 4, 5], m = 5)",
        "canSplitArray(nums = [2, 3, 1], m = 3)",
        "canSplitArray(nums=[7,2,5,10,8], m=5)",
        "canSplitArray(nums = [2, 2, 2], m = 1)",
        "canSplitArray(nums = [3,4,5], m = 5)",
        "canSplitArray(nums=[3, 3, 1, 3], m=5)"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [])",
        "maxSum(nums = [12, 345, 6, 7896])",
        "maxSum(nums = [1, 1, 1])",
        "maxSum(nums = [10, 20, 30, 40])",
        "maxSum(nums = [123, 345])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 1, target = 4)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 10)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1,2,3])",
        "findValueOfPartition(nums = [1, 2, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 4, 7])",
        "findValueOfPartition(nums = [1, 2, 4, 7])",
        "findValueOfPartition(nums = [1, 3, 4, 5, 7])",
        "findValueOfPartition(nums = [1,3,5,7])",
        "findValueOfPartition(nums = [1, 3, 4, 5, 7, 8])",
        "findValueOfPartition(nums=[1, 2, 4, 5])",
        "findValueOfPartition(nums = [2,3,6,9])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2],[2,3],[4,5]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,7]])",
        "numberOfPoints(nums = [[1,2],[2,3],[4,6]])",
        "numberOfPoints(nums = [[1,3],[6,9]])",
        "numberOfPoints(nums = [[1,5],[2,4],[7,10]])",
        "numberOfPoints(nums = [[1,5],[2,4],[1,6]])",
        "numberOfPoints(nums = [[1,5],[1,7]])",
        "numberOfPoints(nums = [[1,2],[3,5],[6,6]])",
        "numberOfPoints(nums = [[1, 3], [4, 6], [7, 9]])",
        "numberOfPoints(nums = [[1,5],[1,7],[2,8],[3,8],[3,9]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints(nums = [[1, 5], [2, 4], [3, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 5], [2, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [6, 7]])",
        "numberOfPoints(nums = [[1,3],[1,4],[4,5]])",
        "numberOfPoints(nums = [[1,3],[1,5],[7,9]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"#\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two\", \"three\", \"four five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"::\")",
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\", \"\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"\", \"three\", \"\", \"four\", \"five\", \"six\"])",
        "splitWordsBySeparator(words=['one', 'two', '', 'three', '', 'four', 'five', 'six'], separator=\"\")",
        "splitWordsBySeparator(words=['one,two', 'three, four', 'five', 'six'], separator=',')"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 1, 1, 1], target = 11)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 100)",
        "minOperations(nums=[1, 1, 1, 1, 1], target=6)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 12)",
        "minOperations(nums = [1, 1, 3, 4, 5], target = 10)",
        "minOperations(nums=[1, 1, 1, 1, 1], target=5)",
        "minOperations(nums=[1,1,1,1,1], target=6)",
        "minOperations(nums = [3, 3, 3], target = 4)",
        "minOperations(nums = [4, 1, 3], target = 2)",
        "minOperations(nums = [2, 5], target = 100)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 1)",
        "checkArray(nums = [3, 2, 1, 2], k = 2)",
        "checkArray(nums = [3, 2, 1, 2], k = 3)",
        "checkArray(nums=[1, 1, 1, 1], k=2)",
        "checkArray(nums = [1, 3, 5, 4, 2], k = 2)",
        "checkArray(nums = [2, 1, 2, 1, 1], k = 3)",
        "checkArray(nums=[1, 2, 3, 2, 1, 2], k=2)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1,0,0,1,0,1])"
    ],
    "sample_159": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1,2,3,4])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9])",
        "maxSum(nums=[1,2,3])",
        "maxSum(nums=[1,2,3,4])",
        "maxSum(nums = [2, 3, 4])",
        "maxSum(nums=[2, 3, 4, 5])",
        "maxSum(nums = [1, 10, 11])",
        "maxSum(nums = [3, 4, 5, 6, 7])",
        "maxSum(nums = [2,2,2])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,3,4,5])",
        "continuousSubarrays(A = [1,2,3,4,5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 2])",
        "continuousSubarrays(A = [3, 2, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [4,2,2,3,1,2,2,2,2])",
        "continuousSubarrays(A = [1,3,3,1,3,3])",
        "continuousSubarrays(A = [2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6])"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 4, 5])",
        "distinctDifferenceArray(nums = [2, 1, 4, 2, 3])",
        "distinctDifferenceArray(nums = [4, 2, 2, 1, 1, 1])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 4, 2, 5, 3], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 4, 3, 2, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 2, 1], b = [1, 2, 2, 3, 2])",
        "maxNonDecreasingLength(a = [3, 4, 5, 1, 6, 2], b = [2, 3, 4, 5, 6, 1])",
        "maxNonDecreasingLength(a = [3, 4, 1, 5, 6], b = [2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a=[2, 1, 3, 4, 5], b=[3, 2, 1, 4, 5])",
        "maxNonDecreasingLength(a = [3,2,1,6,5], b = [2,4,5,3,6])",
        "maxNonDecreasingLength(a=[1, 3, 1, 2, 5], b=[2, 1, 4, 3, 2])",
        "maxNonDecreasingLength(a = [3, 2, 1, 6, 5, 4, 8, 7, 9], b = [2, 1, 3, 4, 5, 6, 7, 8, 9])",
        "maxNonDecreasingLength(a = [1,2,3,4,3,3,2,1], b = [1,2,3,4,4,4,4,4])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank=4, additionalTank=2)",
        "distanceTraveled(mainTank=4, additionalTank=2)"
    ],
    "sample_160": [
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [12, 345, 6, 7896])",
        "maxSum(nums = [3, 4, 5])",
        "maxSum(nums = [111111111])",
        "maxSum(nums = [0,10,29,30,40])",
        "maxSum(nums = [487, 109, 906, 694, 362, 422, 100, 169, 646, 593])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kdeebncd')",
        "smallestString(s = 'kdeebncee')",
        "smallestString(s = 'kddsbncde')",
        "smallestString(s = 'kdeeebncd')",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kdeeebcd\")",
        "smallestString(s = \"kddsbncg\")",
        "smallestString(s = 'kdebbbncd')"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 9])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "findValueOfPartition(nums = [1, 2, 3, 5])",
        "findValueOfPartition(nums=[1, 100])",
        "findValueOfPartition(nums = [2, 4, 5, 7])",
        "findValueOfPartition(nums=[3, 1])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'abd')",
        "makeSmallestPalindrome(s = 'abac')",
        "makeSmallestPalindrome(s = 'abbc')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = 'abb')",
        "makeSmallestPalindrome(s = 'abbb')",
        "makeSmallestPalindrome(s = 'acbd')",
        "makeSmallestPalindrome(s = \"aaabb\")",
        "makeSmallestPalindrome(s = 'aabacb')",
        "makeSmallestPalindrome(s = \"zab\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 7, num2 = 4)",
        "makeTheIntegerZero(num1 = 3, num2 = 4)",
        "makeTheIntegerZero(num1 = 3, num2 = 6)",
        "makeTheIntegerZero(num1 = 23, num2 = 6)",
        "makeTheIntegerZero(num1 = 89, num2 = 3)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,3]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4],[1,3]])",
        "numberOfPoints(nums = [[1,5],[2,3],[4,5]])",
        "numberOfPoints(nums = [[1,5],[2,3],[7,8]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1,3],[1,4],[2,2],[3,3]])",
        "numberOfPoints(nums = [[1,3],[1,4],[2,2],[4,4]])",
        "numberOfPoints(nums = [[1,5],[2,4],[3,5]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,5],[2,3],[4,7],[6,8],[8,9]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 2, 2], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [3, 2, 1, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [3, 4, 5], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 5], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [2, 5, 1, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [7, 4, 9], m = 3, k = 0)"
    ],
    "sample_40": [
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abcac\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"baac\")",
        "minimumCost(s = \"abcdef\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0])",
        "doesValidArrayExist(derived = [0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0,",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [0, 1, 2, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 2, 1, 4])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 22, 25, 18, 24], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 5, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 20, 30, 10], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours=[12, 15, 18, 20], target=18)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 11, 9, 14, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [75, 90, 60, 80], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours=[34, 23, 23, 12, 45], target=23)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 10, 3, 9, 12, 5, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [24, 28, 18, 29, 24, 21, 26, 27], target = 24)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = 'evenn')",
        "makeSmallestPalindrome(s = 'nevene')",
        "makeSmallestPalindrome(s = 'level')",
        "makeSmallestPalindrome(s = \"level\")",
        "makeSmallestPalindrome(s = 'aven')",
        "makeSmallestPalindrome(s = \"nvenen\")",
        "makeSmallestPalindrome(s = 'nenm')"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num='51230100000')"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1, 2, 3, 1, 2, 3], m=2, k=1)",
        "countInterestingSubarrays(nums = [1,2,3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 1, 1, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums=[1,2,3], m=3, k=1)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [3, 4, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 3, 4, 4], m = 3, k = 2)",
        "countInterestingSubarrays(nums=[2, 5, 0, 7, 10], m=2, k=1)",
        "countInterestingSubarrays(nums = [5,5,4,5,2,6,7,5,5], m = 3, k = 0)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 25, additionalTank = 10)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 3)",
        "minCost(A = [3, 2, 1], x = 2)",
        "minCost(A = [2, 1, 3], x = 2)",
        "minCost(A = [4, 5, 6], x = 2)",
        "minCost(A = [4, 3, 5, 2], x = 2)",
        "minCost(A = [1, 5, 3, 2], x = 2)",
        "minCost(A = [5, 2, 7], x = 2)",
        "minCost(A = [5, 1, 4, 2], x = 2)",
        "minCost(A = [2, 4, 6, 8, 10], x = 5)",
        "minCost(A = [1, 5, 3, 4, 2], x = 4)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4])",
        "maxIncreasingGroups(u = [1, 3, 5])",
        "maxIncreasingGroups(u = [1, 2, 4, 5, 6])",
        "maxIncreasingGroups(u=[1, 1, 1])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 6, 10])",
        "maxIncreasingGroups(u = [0, 1, 3, 6, 10])",
        "maxIncreasingGroups(u = [1, 4, 4, 5, 6, 10])",
        "maxIncreasingGroups(u = [1, 5, 8, 4])",
        "maxIncreasingGroups(u = [3, 2, 4, 1, 3, 5, 1, 2])",
        "maxIncreasingGroups(u = [0, 2, 3, 0, 0, 0, 2, 1, 2, 0])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 3, 1, 2], k = 2)",
        "checkArray(nums = [0, 2, 3], k = 1)",
        "checkArray(nums = [2,1,2], k = 2)",
        "checkArray(nums=[1, 3, 2, 1], k=3)",
        "checkArray(nums = [4, 1, 4, 5], k = 2)",
        "checkArray(nums = [4, 5, 1, 2, 4], k = 3)",
        "checkArray(nums = [4, 8, 6, 5, 4], k = 2)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDabcd\")",
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABxxCDyy\")"
    ],
    "sample_201": [
        "minOperations(nums=[1, 1, 1, 1, 1], target=6)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 100)",
        "minOperations(nums = [1,2,3], target = 7)",
        "minOperations(nums = [2, 3], target = 1)",
        "minOperations(nums = [2, 3], target = 7)",
        "minOperations(nums = [1, 2, 3, 4], target = 7)",
        "minOperations(nums = [10], target = 11)",
        "minOperations(nums=[1, 2, 3, 4, 5], target=100)",
        "minOperations(nums = [1, 2, 3, 4, 5], target = 21)",
        "minOperations(nums = [88, 345, 3], target = 1900)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [], separator = \" \")",
        "splitWordsBySeparator(words = [], separator = \"\")",
        "splitWordsBySeparator(words = [], separator = \",\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"@\")",
        "splitWordsBySeparator(words = [], separator = ' ')",
        "splitWordsBySeparator(words = [\"\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"\", \"\", \"\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"\", \"\", \"\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"\"], separator = \"x\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \"d\")"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbncde')",
        "smallestString(s = \"kddsbnce\")",
        "smallestString(s = 'kdeeebncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbndd')",
        "smallestString(s = 'kddsbndd')",
        "smallestString(s = \"kddsbncee\")",
        "smallestString(s = 'kddefsbncd')"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LL_RR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRR__\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_L_R_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"LRL_R\")",
        "furthestDistanceFromOrigin(moves = \"R_L_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R_L_R_L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LRL__RRL\")",
        "furthestDistanceFromOrigin(moves = \"RR__LLL\")",
        "furthestDistanceFromOrigin(moves=\"LLRR______\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLLL_______\")"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 23, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 2)",
        "makeTheIntegerZero(num1 = 17, num2 = 4)",
        "makeTheIntegerZero(num1 = 7, num2 = 4)",
        "makeTheIntegerZero(num1 = 22, num2 = 5)"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbnce')",
        "smallestString(s = 'kddsbcne')",
        "smallestString(s = 'kdeebncd')",
        "smallestString(s = 'kdeebncd')",
        "smallestString(s = 'kdeebncd')",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = \"kddsbcne\")",
        "smallestString(s = \"kddsbnae\")",
        "smallestString(s = 'kdezbncd')",
        "smallestString(s = 'kdsdabncd')"
    ],
    "sample_146": [
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = 'pointer')",
        "finalString(s = \"pointer\")",
        "finalString(s = \"pointer\")",
        "finalString(s = 'poniter')",
        "finalString(s = 'pinoter')",
        "finalString(s = \"tin\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 0)",
        "longestEqualSubarray(nums = [2, 2, 2, 2], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 2, 1, 1], k = 1)",
        "longestEqualSubarray(nums=[1, 2, 3, 4, 5, 6], k=3)",
        "longestEqualSubarray(nums = [3, 4, 5, 6, 7, 8, 9], k = 3)",
        "longestEqualSubarray(nums=[1,2,3,3,3,4,5,6], k=2)",
        "longestEqualSubarray(nums = [1,2,2,3,4,5], k = 0)",
        "longestEqualSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 2, 1, 2, 3, 1, 1, 2, 1], k = 2)"
    ],
    "sample_155": [
        "canSplitArray(nums = [7,2,5,10,8], m = 15)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [7,2,5,10,8], m = 5)",
        "canSplitArray(nums=[7,2,5,10,8], m=15)",
        "canSplitArray(nums = [7, 1], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], m = 10)",
        "canSplitArray(nums = [3,2,1,2], m = 2)",
        "canSplitArray(nums = [10, 2, 3, 4, 5], m = 10)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1])",
        "numberOfGoodSubarraySplits(nums = [1])",
        "numberOfGoodSubarraySplits(nums = [1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 3])",
        "numberOfGoodSubarraySplits(nums = [1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [4,0,1,3,2])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one-two-three\", \"four.five;six\"], separator = \"-.\")",
        "splitWordsBySeparator(words=['one,two', 'three', 'four', 'five,six'], separator=',')",
        "splitWordsBySeparator(words = [\"one_two\", \"three-four\", \"five six\"], separator = \"_-\")",
        "splitWordsBySeparator(words=[\"one-two-three-four-five-six\"], separator=\"-\")",
        "splitWordsBySeparator(words=['one-two', '-three', 'four-', '-five-six'], separator='-')",
        "splitWordsBySeparator(words = [\"one-two\", \"three_four-five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one:two:three\", \"four:five::six\"], separator = \":\")",
        "splitWordsBySeparator(words=['one-two', 'three four-five-six'], separator='-')",
        "splitWordsBySeparator(words=[\"one_two\", \"three__four\", \"five____six\"], separator=\"_\")",
        "splitWordsBySeparator(words = ['one-two', 'three---four', '---five---six'], separator = '-')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours=[1,2,3,4,5], target=6)",
        "numberOfEmployeesWhoMetTarget(hours=[0,0,0], target=1)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 11, 12, 13, 14], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 13, 14, 15], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 10, 2], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 11, 12, 13, 14, 15, 16, 17], target=20)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 11, 22, 12], target=15)"
    ],
    "sample_168": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwe\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hW\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"brq\")",
        "isAcronym(words = [\"Eat\", \"Sleep\"], s = \"E\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bird\"], s = \"DOG\")",
        "isAcronym(words=['abc', 'def', 'ghi'], s='AGI')",
        "isAcronym(words=[\"C++\", \"is\", \"a\", \"language\"], s = \"C\")",
        "isAcronym(words = [\"raindrops\", \"onthe\", \"window\", \"pane\"], s = \"ROWHYTPANE\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words = [\"acronym\", \"generator\"], s = \"AG\")",
        "isAcronym(words = [\"apple\", \"banana\", \"cranberry\"], s = \"abc\")",
        "isAcronym(words = [\"Tom\", \"and\", \"Jerry\"], s = \"TJ\")",
        "isAcronym(words=[\"python\", \"code\", \"academy\"], s=\"PCA\")",
        "isAcronym(words = [\"program\", \"name\", \"analysis\"], s = \"PNA\")",
        "isAcronym(words = [\"great\", \"deals\"], s = \"GRD\")",
        "isAcronym(words = [\"cool\", \"beans\", \"and\", \"warm\", \"toes\"], s = \"CBAW\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"leetcode\")",
        "minimumCost(s = \"abcb\")",
        "minimumCost(s = \"ca\")",
        "minimumCost(s = \"acba\")",
        "minimumCost(s = \"abcbda\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 1])",
        "doesValidArrayExist(derived = [1,1,1,1,1,1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 1, 0, 0, 0, 1])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'abab')",
        "makeSmallestPalindrome(s = 'abac')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'aabcb')",
        "makeSmallestPalindrome(s = 'aabd')"
    ],
    "sample_50": [
        "smallestString(s = \"abaac\")",
        "smallestString(s = \"abaac\")",
        "smallestString(s = 'ababab')",
        "smallestString(s = 'ababab')",
        "smallestString(s = \"abacd\")",
        "smallestString(s = 'abacaba')",
        "smallestString(s = \"babab\")",
        "smallestString(s = 'abaaab')",
        "smallestString(s = 'abbb')",
        "smallestString(s = 'abcdefg')"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "sumIndicesWithKSetBits(nums=[1,2,3,4], k=1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9, 11], k = 3)"
    ],
    "sample_20": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDCDCD\")",
        "minLength(s = \"ABABABAB\")",
        "minLength(s = \"ABABACD\")",
        "minLength(s = \"ABABABCDAB\")",
        "minLength(s = \"ABABABABCD\")",
        "minLength(s = \"ABABACDAB\")",
        "minLength(s = \"ABAACDAAB\")",
        "minLength(s = \"AACDABCD\")",
        "minLength(s = \"ABAACABAAB\")"
    ],
    "sample_158": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums=[1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 1, 1])",
        "maxSum(nums = [0, 1, 2, 3])",
        "maxSum(nums = [12, 345, 6, 78, 9])",
        "maxSum(nums = [12345, 67890])",
        "maxSum(nums = [123, 12])",
        "maxSum(nums = [12, 345, 6, 78, 91])",
        "maxSum(nums = [2, 5, 7, 9, 10])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 5, 2, 4, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [4, 1, 3, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1, 5])",
        "semiOrderedPermutation(nums = [4, 2, 1, 5, 3, 6])",
        "semiOrderedPermutation(nums=[3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2, 5])",
        "semiOrderedPermutation(nums = [3,2,1,4,6,5])"
    ],
    "sample_162": [
        "maxSum(nums = [12, 345, 6, 78, 9])",
        "maxSum(nums = [98, 23, 38, 4, 16, 88])",
        "maxSum(nums = [12, 3, 5, 67, 88, 1])",
        "maxSum(nums = [58984, 13, 589, 85])",
        "maxSum(nums = [33, 55, 2, 11, 77, 44, 88])",
        "maxSum(nums = [88, 21, 25, 66, 77, 11])",
        "maxSum(nums = [58, 48, 99, 73, 67, 88, 62])",
        "maxSum(nums = [123, 12345, 928, 383])",
        "maxSum(nums = [991, 93, 21, 23, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])",
        "maxSum(nums = [29, 2, 5, 25, 25, 4, 5, 7, 19, 9, 21, 8, 18, 8])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '101010')",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = '110101')",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = '10010')",
        "maximumOddBinaryNumber(s = '10010')",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"1000\")",
        "maximumOddBinaryNumber(s = '111')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10, 6], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 5, 10, 3], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 7, 10, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 15, 20, 5, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours=[20, 25, 28, 22, 18], target=20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 12, 17, 16, 9], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 25, 18, 35, 14, 17], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [24, 23, 12, 19, 13, 14, 15, 11, 21, 18], target = 15)"
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hlo\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworl\")",
        "isAcronym(words = [\"bat\", \"man\"], s = \"BM\")",
        "isAcronym(words=[\"quick\", \"brown\", \"fox\"], s=\"qbx\")",
        "isAcronym(words=[\"quick\", \"brown\", \"fox\", \"jumps\"], s=\"qbfj\")",
        "isAcronym(words=[\"Mary\", \"had\", \"a\", \"little\", \"lamb\"], s=\"MHallal\")",
        "isAcronym(words = [\"physics\", \"chemistry\", \"biology\"], s = \"pcib\")",
        "isAcronym(words=[\"apples\", \"bananas\", \"oranges\"], s = \"abo\")",
        "isAcronym(words=[\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\"], s=\"thequickbrownfoxjumpsover\")",
        "isAcronym(words = [\"expedition\", \"reservation\", \"prescription\"], s = \"ERP\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3])",
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1])",
        "maxIncreasingGroups(A = [1, 1, 1])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2])",
        "maxIncreasingGroups(A = [1, 1, 1, 2, 2, 2])",
        "maxIncreasingGroups(A = [1, 3])",
        "maxIncreasingGroups(A = [4, 2, 2, 3, 1])"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 2, 2, 1])",
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3, 4, 4])",
        "distinctDifferenceArray(nums = [0, 1, 1, 3, 3, 3, 5])",
        "distinctDifferenceArray(nums = [5, 2, 4, 1, 3, 5, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 5, 4, 6])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank=3, additionalTank=0)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5, 6, 7, 8], k=2)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"aaabbbccc\")",
        "minimizedStringLength(s = \"aabcc\")",
        "minimizedStringLength(s = \"aaabbb\")",
        "minimizedStringLength(s = \"aab\")",
        "minimizedStringLength(s = \"aaabb\")",
        "minimizedStringLength(s = \"aaaabbbccd\")",
        "minimizedStringLength(s = \"aabccd\")",
        "minimizedStringLength(s = \"abcddeeff\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1], k = 0)",
        "longestEqualSubarray(nums = [1,2,3,2,2], k = 1)",
        "longestEqualSubarray(nums = [0,1,0,0,1,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 4, 4, 4], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,2,2,2,2,2,2,2], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,3,3,3], k = 1)",
        "longestEqualSubarray(nums = [2, 1, 3, 3, 1], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 2, 2, 2, 2, 1, 2], k = 2)"
    ],
    "sample_10": [
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1], [0, 2], [1, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1], [2, 2], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [4, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [4, 1], [2, 1], [3, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [1, 2], [1, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [1, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 2], [0, 2], [3, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1], [1, 3], [0, 1]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 2], [0, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,1], [3,2], [3,1], [1,2]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3], target=4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 8, 4], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours=[4, 6, 8, 10], target=12)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 12, 16], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 12, 20, 25, 28], target=20)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 28, 46, 35, 16])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 91, 23])",
        "countBeautifulPairs(nums = [12, 28, 46, 35, 46])",
        "countBeautifulPairs(nums = [22, 23, 12, 22])",
        "countBeautifulPairs(nums = [10, 12, 24, 36, 48, 50])",
        "countBeautifulPairs(nums = [12, 16, 20, 10, 15, 25, 15])",
        "countBeautifulPairs(nums = [420, 765, 304, 500, 111, 222, 333, 444, 555])",
        "countBeautifulPairs(nums = [12, 28, 19, 55, 66, 87, 98, 24, 65, 46])",
        "countBeautifulPairs(nums=[112, 344, 568, 876, 452, 474])",
        "countBeautifulPairs(nums = [565, 196, 763, 445, 279, 852])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [1, 1, 2, 3])",
        "countWays(nums = [1, 3, 2, 4])",
        "countWays(nums = [2, 2, 3, 4, 5])",
        "countWays(nums = [1,2,4])",
        "countWays(nums = [3, 4, 5, 6])",
        "countWays(nums = [2, 4, 5, 6])",
        "countWays(nums = [0, 0, 0, 0, 0, 0])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = '101000')",
        "maximumOddBinaryNumber(s = '1110001')",
        "maximumOddBinaryNumber(s = '0111000101')",
        "maximumOddBinaryNumber(s = '1011101101010')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 7, 8, 9], k = 2)",
        "maximumBeauty(nums=[1, 2, 3, 4, 5], k=2)",
        "maximumBeauty(nums = [1, 2, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "maximumBeauty(nums = [1, 4, 5, 8, 11, 19], k = 5)",
        "maximumBeauty(nums = [1, 5, 3, 7], k = 2)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums=[0,0,0])",
        "maximumTripletValue(nums=[0,0,0])",
        "maximumTripletValue(nums = [3, 5, 1])",
        "maximumTripletValue(nums = [-1,2,1])",
        "maximumTripletValue(nums = [-4, -3, -2, -1, 0])"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [1, 1, 3, 5, 6, 7, 9], target = 2)",
        "maximumJumps(nums = [1, 2, 3], target = 0)",
        "maximumJumps(nums = [1, 3, 2, 4, 2], target = 1)",
        "maximumJumps(nums=[2,3,1,1,4], target=2)",
        "maximumJumps(nums = [2,1,1,1,1], target = 1)",
        "maximumJumps(nums = [2, 5, 1, 1, 1, 1], target = 3)"
    ],
    "sample_149": [
        "finalString(s = 'This is a test')",
        "finalString(s = \"singing\")",
        "finalString(s = 'this is a test')",
        "finalString(s = 'Mississippi')",
        "finalString(s = 'kings')",
        "finalString(s = \"bitstring\")",
        "finalString(s = 'inverts')",
        "finalString(s = 'aibtsng')",
        "finalString(s = \"hihsi\")",
        "finalString(s = 'hurting')"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1,2,3,4,5])",
        "continuousSubarrays(A = [2, 1, 2, 2, 1, 2])",
        "continuousSubarrays(A = [1,2,3,4])",
        "continuousSubarrays(A = [1,2,3])",
        "continuousSubarrays(A = [0, 1, 2, 3])",
        "continuousSubarrays(A = [4, 2, 2, 2, 4, 4])",
        "continuousSubarrays(A = [4, 2, 2, 4, 2])",
        "continuousSubarrays(A = [2, 1, 3, 2, 2])",
        "continuousSubarrays(A = [1,2,3,3])",
        "continuousSubarrays(A = [2, 1, 2, 2, 3, 4, 5, 5])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2])",
        "countCompleteSubarrays(nums=[4, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 3, 1, 2, 3, 1, 1, 2, 3, 1])"
    ],
    "sample_228": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [2, 4, 6])",
        "countWays(nums = [3, 4, 5, 6])",
        "countWays(nums = [0, 2, 3, 5, 6])",
        "countWays(nums=[1, 3, 4])",
        "countWays(nums=[3,4,5,6,7])",
        "countWays(nums = [0, 1, 2, 3, 5, 6, 7])",
        "countWays(nums = [0, 3, 3, 3, 4, 6])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [3, 1, 5, 4, 2], k = 1)",
        "maximumBeauty(nums = [3, 1, 5, 4, 2], k = 1)",
        "maximumBeauty(nums = [1, 4, 5, 7, 8], k = 2)",
        "maximumBeauty(nums = [1, 5, 4, 3, 2, 6], k = 1)",
        "maximumBeauty(nums = [1, 3, 6, 8, 9], k = 2)",
        "maximumBeauty(nums = [2, 4, 6, 9, 11], k = 4)",
        "maximumBeauty(nums = [4, 8, 12, 16, 20, 24, 28, 32], k = 6)",
        "maximumBeauty(nums = [3, 5, 6, 2, 5, 3, 6, 7, 8, 9], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(a = [1, 1, 1, 2, 3])",
        "distinctDifferenceArray(a = [5, 4, 3, 2, 1])",
        "distinctDifferenceArray(a = [1, 2, 2, 3, 4, 4, 5, 6, 7, 7])",
        "distinctDifferenceArray(a = [2, 4, 1, 3, 1, 2, 5])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1,2,3,4,5])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a=[1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1,1,2,2,3])",
        "continuousSubarrays(a = [1, 3, 2, 4, 2])",
        "continuousSubarrays(a = [2, 3, 4, 5, 6, 1, 3])",
        "continuousSubarrays(a = [1,2,3,3,4,5,6,6,6])",
        "continuousSubarrays(a = [1, 0, 2, 2, 2, 1, 1, 1, 1, 1])",
        "continuousSubarrays(a = [2, 4, 1, 2, 5, 3, 5, 2])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [4, 2, 5, 3])",
        "continuousSubarrays(nums = [4, 2, 5, 3])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [2, 1, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [4, 2, 2, 6, 4])",
        "continuousSubarrays(nums = [4, 2, 1, 6, 7])",
        "continuousSubarrays(nums = [2, 1, 4, 3, 5, 2, 6, 3, 4, 8])",
        "continuousSubarrays(nums = [4, 2, 2, 3, 6, 7])",
        "continuousSubarrays(nums=[4, 2, 5, 3, 6, 7, 8, 9, 11])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 24, 36, 48])",
        "countBeautifulPairs(nums = [12, 24, 36, 48])",
        "countBeautifulPairs(nums = [12, 24])",
        "countBeautifulPairs(nums = [12, 28, 14, 32])",
        "countBeautifulPairs(nums = [22, 28, 29])",
        "countBeautifulPairs(nums=[12, 28, 81])",
        "countBeautifulPairs(nums = [12, 20, 11, 21])",
        "countBeautifulPairs(nums = [22,23,32,43])",
        "countBeautifulPairs(nums = [22, 26, 80, 45, 95])",
        "countBeautifulPairs(nums = [33,3,99,22])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [2,1,3])",
        "semiOrderedPermutation(nums=[2, 3, 1, 5, 4, 6])",
        "semiOrderedPermutation(nums = [2, 4, 1, 3])",
        "semiOrderedPermutation(nums=[3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4, 6, 8, 7])",
        "semiOrderedPermutation(nums = [4, 2, 5, 1, 3, 6])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums=[3, 1, 2])",
        "semiOrderedPermutation(nums = [4, 2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [3, 4, 2, 1])",
        "semiOrderedPermutation(nums = [1, 5, 2, 4, 3])",
        "semiOrderedPermutation(nums=[1, 5, 2, 4, 3])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 2])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 2, 1, 2, 1, 2, 1])",
        "numberOfGoodSubarraySplits(nums=[1, 0, 1, 0, 0, 1])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = '11101')",
        "maximumOddBinaryNumber(s = \"000000\")",
        "maximumOddBinaryNumber(s = '001111')"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [4, 1, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4, 2, 3])"
    ],
    "sample_23": [
        "minLength(s = \"ABCDABCDAB\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDABCDABCDABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABAABCD\")",
        "minLength(s = \"ABACDAB\")",
        "minLength(s = \"ABCDEFGCD\")",
        "minLength(s = \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
        "minLength(s = \"ADABCDBCD\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [4, 3, 2, 3, 5, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,1])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 4)",
        "makeTheIntegerZero(num1 = 80, num2 = 5)",
        "makeTheIntegerZero(num1 = 97, num2 = 2)"
    ],
    "sample_100": [
        "maximumJumps(nums = [3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3], target = 2)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 2)",
        "maximumJumps(nums = [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 1, 1, 5, 9], target = 2)",
        "maximumJumps(nums = [3,4,2,1,2,3,7,1,1,1,5], target = 2)",
        "maximumJumps(nums = [6, 3, 5, 8, 9, 1, 2], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 2, 4, 2], target = 2)",
        "maximumJumps(nums = [1,2,1,1,2], target = 2)",
        "maximumJumps(nums=[1, 1, 2, 2, 3], target=2)",
        "maximumJumps(nums = [2, 1, 1, 3, 4, 3, 7, 1, 1, 1, 3], target = 2)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 5, 6, 7])",
        "maxIncreasingGroups(x = [1, 2, 4, 5, 6, 7])",
        "maxIncreasingGroups(x = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "maxIncreasingGroups(x = [1, 5, 10, 20])",
        "maxIncreasingGroups(x = [1, 2, 4, 5, 9])",
        "maxIncreasingGroups(x = [2, 1, 3, 2, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 5, 7, 9, 11])",
        "maxIncreasingGroups(x = [1, 2, 4, 4, 7, 8, 10])",
        "maxIncreasingGroups(x = [5, 2, 5, 2, 5, 2, 5, 2])",
        "maxIncreasingGroups(x = [5, 3, 6, 4, 7, 2, 5, 1, 3, 8])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R_L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_L_R\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = 'LLRRRR__')",
        "furthestDistanceFromOrigin(moves = \"RR__LLR\")",
        "furthestDistanceFromOrigin(moves = \"RRR__RRR_R__\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLLLLLLRRRRRRRRRR\")",
        "furthestDistanceFromOrigin(moves = 'L_R__R___R____R')",
        "furthestDistanceFromOrigin(moves = \"_____R_______R____R\")",
        "furthestDistanceFromOrigin(moves = \"R__R___L_R_L__L_R_L_R__L___R__R_L_R_L_R_L_R_L_R__L_R__L_R_L_R__L_R__L_R_L_R_L_R_L___R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_R_L_R_L___R_L_R_L_"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = '0010')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s='110')",
        "maximumOddBinaryNumber(s = '0101101')",
        "maximumOddBinaryNumber(s = \"00110000\")"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n=1, queries=[[0, 0]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,1]])",
        "colorTheArray(n = 5, queries = [[4, 1], [4, 2], [4, 1]])",
        "colorTheArray(n=3, queries=[[1, 1], [2, 2], [0, 1]])"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 3, 4, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7])",
        "findValueOfPartition(nums = [1, 2, 3, 10])",
        "findValueOfPartition(nums=[1, 2, 3, 4])",
        "findValueOfPartition(nums = [2, 3, 5])",
        "findValueOfPartition(nums = [2, 4, 6, 8])",
        "findValueOfPartition(nums=[1, 2, 4, 8])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1])",
        "numberOfGoodSubarraySplits(nums = [1,1])",
        "numberOfGoodSubarraySplits(nums=[1])",
        "numberOfGoodSubarraySplits(nums = [1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,2])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_121": [
        "minimumIndex(nums = [3,1,3,3,2,4])",
        "minimumIndex(nums = [3,1,3,3,2,4])",
        "minimumIndex(nums = [3,1,3,3,2,4])",
        "minimumIndex(nums = [3,1,3,3,2,4])",
        "minimumIndex(nums = [3,1,3,3,2,4])",
        "minimumIndex(nums = [3,1,3,3,2,4])",
        "minimumIndex(nums = [3,1,3,4,2])",
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [3, 1, 3, 3, 2])",
        "minimumIndex(nums = [3, 1, 3, 4, 2])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 6, 7, 8, 9, 10, 11], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 4, 3], [3, 5, 4]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2], [2, 3, 3], [1, 3, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 4, 2], [2, 5, 5], [3, 6, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,2],[2,4,3],[3,5,5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 2], [2, 5, 3], [3, 4, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 3], [2, 5, 4], [3, 8, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 3], [0, 2, 2], [2, 4, 2], [1, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,2], [2,3,4], [3,4,6]])",
        "maximizeTheProfit(n=1, offers=[[1, 4, 2], [2, 3, 3], [3, 4, 1]])",
        "maximizeTheProfit(n = 10, offers = [[1, 4, 2], [2, 5, 1], [3, 6, 1], [4, 7, 3], [5, 8, 2], [6, 9, 3], [7, 10, 4]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"1\")",
        "minimumOperations(num = \"0000000\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"5555\")",
        "minimumOperations(num = \"205\")",
        "minimumOperations(num = \"775\")",
        "minimumOperations(num = \"4950\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"00\")",
        "minimumOperations(num = \"0100\")",
        "minimumOperations(num = \"10\")",
        "minimumOperations(num = \"0120\")",
        "minimumOperations(num = \"0250\")",
        "minimumOperations(num = \"550\")",
        "minimumOperations(num = \"12340\")",
        "minimumOperations(num = \"4000\")",
        "minimumOperations(num = \"002\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 15], [3, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 20], [4, 5, 30]])",
        "maximizeTheProfit(n = 4, offers = [[1,3,2],[2,3,3],[3,4,1]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,20],[2,3,30],[3,4,10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 3], [3, 5, 4], [4, 5, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,5],[2,3,1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 15], [3, 4, 20], [2, 3, 25]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 15], [3, 4, 20], [2, 3, 5], [1, 5, 10]])",
        "maximizeTheProfit(n=4, offers=[[2, 2, 2], [1, 3, 4]])",
        "maximizeTheProfit(n=7, offers=[[1,2,2], [2,4,3], [3,6,4]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7], threshold = 4)",
        "longestAlternatingSubarray(nums=[2, 3, 4, 5, 6, 7, 8, 9], threshold=5)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 3, 1, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 2, 4, 1], threshold = 5)",
        "longestAlternatingSubarray(nums=[3, 4, 2, 1, 5, 7, 8], threshold=5)",
        "longestAlternatingSubarray(nums = [4,5,1,2,5], threshold = 2)",
        "longestAlternatingSubarray(nums = [3, 4, 7, 9, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [4, 1, 3, 2, 6, 7, 9, 8, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [4, 3, 5, 2, 3, 7, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [0, 2, 1, 0, 3, 1, 1, 0, 4], threshold = 1)"
    ],
    "sample_203": [
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"72\")",
        "minimumOperations(num = \"39\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"010\")",
        "minimumOperations(num = \"9999\")",
        "minimumOperations(num = \"050\")",
        "minimumOperations(num = \"99999\")",
        "minimumOperations(num = \"121\")",
        "minimumOperations(num = '123')"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [1, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 1], [1, 1], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 1], [5, 1], [2, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [3, 2], [5, 1], [4, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [4, 2], [5, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[3,2],[2,3],[5,1],[4,2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 2], [2, 1], [3, 3]])",
        "colorTheArray(n = 5, queries = [[1,1], [1,2], [2,2], [2,3], [4,1]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [3, 1, 3, 3, 2, 3])",
        "minimumIndex(nums = [3,1,3,3,2,4])",
        "minimumIndex(nums = [3, 2, 1, 3, 3])",
        "minimumIndex(nums = [1, 3, 5, 2, 2, 2, 4, 2])",
        "minimumIndex(nums=[1,2,2,3,1])",
        "minimumIndex(nums = [3,2,1,3,3,2,2,2])"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1, 2, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], target = 2)",
        "maximumJumps(nums = [3, 4, 2, 1, 1], target = 2)",
        "maximumJumps(nums = [1,2,3,4,5], target = 5)",
        "maximumJumps(nums=[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "maximumJumps(nums = [1, 3, 5, 8, 10, 12, 14, 16, 18, 20], target = 10)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '512301000000')"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a=1, b=1)",
        "distanceTraveled(a=1, b=1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 1, b = 9)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition(a = [1, 2, 3])",
        "findValueOfPartition(a = [3, 2, 1])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5, 6, 7])",
        "findValueOfPartition(a = [2, 3, 5, 7])",
        "findValueOfPartition(a = [3, 1, 2, 4, 5])",
        "findValueOfPartition(a = [1, 3, 4, 5])",
        "findValueOfPartition(a = [2, 1, 5, 3, 4])",
        "findValueOfPartition(a = [2, 5, 7, 8, 9, 11, 12])",
        "findValueOfPartition(a = [3, 7, 5, 2, 9, 1])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 4, 5])",
        "distinctDifferenceArray(nums=[1,2,3,2,1])",
        "distinctDifferenceArray(nums = [5, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums=[1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [4, 3, 2, 1, 4, 3, 2, 1, 1])",
        "distinctDifferenceArray(nums = [5,5,5,5,4,3,2,1,1,1,1])",
        "distinctDifferenceArray(nums = [4, 1, 1, 4, 2, 3, 3, 2, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5,1,2,3,4,5,1])"
    ],
    "sample_120": [
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2, 2])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2, 2, 2, 2])",
        "minimumIndex(nums = [3, 2, 1, 2, 2])",
        "minimumIndex(nums=[3,4,5,1,2,2,2,2])",
        "minimumIndex(nums = [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [7, 7, 7, 7, 7, 7, 7])",
        "minimumIndex(nums = [1, 2, 3, 3, 3, 3, 3])",
        "minimumIndex(nums = [1, 3, 2, 4, 3])",
        "minimumIndex(nums = [1, 2, 0, 3, 1, 2, 0, 0])",
        "minimumIndex(nums = [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLRLRLRL\")",
        "furthestDistanceFromOrigin(moves=\"LRLLRR\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"leetcode\")",
        "minimizedStringLength(s = \"abab\")",
        "minimizedStringLength(s = \"abab\")",
        "minimizedStringLength(s = \"abab\")",
        "minimizedStringLength(s = \"abca\")",
        "minimizedStringLength(s = \"aabccbb\")",
        "minimizedStringLength(s = \"abaacbcb\")",
        "minimizedStringLength(s = \"abbbcacdab\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 1)",
        "checkArray(nums = [1,1], k = 2)",
        "checkArray(nums=[1, 1], k=2)",
        "checkArray(nums = [2, 2, 2, 2, 1], k = 2)",
        "checkArray(nums = [4, 2, 2, 1, 1, 1], k = 3)",
        "checkArray(nums=[1, 3, 1, 4, 1, 5], k=3)",
        "checkArray(nums = [12, 3, 1, 2, 5, 1, 2, 3, 6, 2, 3], k = 3)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(usageLimits = [1, 3, 2])",
        "maxIncreasingGroups(usageLimits = [3, 4, 2, 1])",
        "maxIncreasingGroups(usageLimits = [5, 2, 2, 1])",
        "maxIncreasingGroups(usageLimits = [3, 1, 4])",
        "maxIncreasingGroups(usageLimits = [2, 1, 1, 3, 1])",
        "maxIncreasingGroups(usageLimits = [1, 5, 2, 8])",
        "maxIncreasingGroups(usageLimits = [5, 3, 5, 4, 6])",
        "maxIncreasingGroups(usageLimits = [1, 5, 5, 2, 2, 3])",
        "maxIncreasingGroups(usageLimits = [12, 11, 7, 6, 3, 2, 1, 1])"
    ],
    "sample_206": [
        "minimumOperations(num
        "minimumOperations(num = \"37\")",
        "minimumOperations(num = \"3456\")",
        "minimumOperations(num = '725')",
        "minimumOperations(num = \"55555\")",
        "minimumOperations(num = '5575')",
        "minimumOperations(num = \"203\")",
        "minimumOperations(num = \"7675\")",
        "minimumOperations(num = \"3225\")",
        "minimumOperations(num = '2525252525252525')"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 2, 3, 6])",
        "doesValidArrayExist(derived = [1, 2, 3, 6])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 0])",
        "doesValidArrayExist(derived = [0, 2, 4])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 2, 1, 3])"
    ],
    "sample_38": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"ABABA\")",
        "minimumCost(s = \"ca\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits=[1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1,2,3,4])",
        "maxIncreasingGroups(usageLimits = [2, 3, 5])",
        "maxIncreasingGroups(usageLimits = [2, 1, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [5, 4, 3])",
        "maxIncreasingGroups(usageLimits = [5, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits=[1, 2, 3, 4, 10])",
        "maxIncreasingGroups(usageLimits=[2, 5, 10])"
    ],
    "sample_53": [
        "smallestString(s = 'bacd')",
        "smallestString(s = 'bacd')",
        "smallestString(s = 'bac')",
        "smallestString(s = 'baacd')",
        "smallestString(s = 'baacd')",
        "smallestString(s = 'bcaab')",
        "smallestString(s = 'bcaac')",
        "smallestString(s = 'baccd')",
        "smallestString(s = 'baabd')",
        "smallestString(s = \"bbbcaa\")"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 2)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1, 3, 6, 10, 15], x = 2)",
        "minAbsoluteDifference(nums=[1, 2, 3, 4, 5], x=2)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4], x = 1)",
        "minAbsoluteDifference(nums = [5, 13, 8, 2, 3, 7, 1], x = 2)",
        "minAbsoluteDifference(nums=[1, 7, 5, 2, 4, 8, 10, 9, 3], x=3)",
        "minAbsoluteDifference(nums=[1, 3, 7, 1, 2, 5], x=2)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 2], [2, 3, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 3, 2], [2, 4, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 3, 1], [2, 4, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 1], [2, 3, 2], [1, 4, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 100]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 2], [2, 4, 1], [3, 5, 5]])",
        "maximizeTheProfit(N = 5, offers = [[1, 2, 2], [2, 3, 1], [4, 5, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 1], [2, 4, 1], [3, 4, 1], [4, 5, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 3], [2, 4, 1], [3, 3, 2]])",
        "maximizeTheProfit(N = 4, offers = [[1,2,2], [2,3,3], [4,5,5]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"\"], b = \" \")",
        "splitWordsBySeparator(a = [], b = \" \")",
        "splitWordsBySeparator(a = [], b = \",\")",
        "splitWordsBySeparator(a = [''], b = ' ')",
        "splitWordsBySeparator(a = [], b = \";\")",
        "splitWordsBySeparator(a = [''], b = '')",
        "splitWordsBySeparator(a = [\"\", \"   \"], b = \" \")",
        "splitWordsBySeparator(a = [\"\", \"   \", \" \"], b = \" \")",
        "splitWordsBySeparator(a = [\"\", \" \"], b = \"\")",
        "splitWordsBySeparator(a = [\"123\", \"456\"], b = \"1\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '512300001')",
        "removeTrailingZeros(a = '51230010')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'evenn')",
        "makeSmallestPalindrome(s = 'evenn')",
        "makeSmallestPalindrome(s = 'nevenn')",
        "makeSmallestPalindrome(s = 'nevene')",
        "makeSmallestPalindrome(s = \"level\")",
        "makeSmallestPalindrome(s = \"nevenn\")",
        "makeSmallestPalindrome(s = \"nevene\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'nnev')",
        "makeSmallestPalindrome(s='nevenne')"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 0)",
        "longestEqualSubarray(nums = [1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 1, 2, 3, 3], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,4,4,4,4,5], k = 1)",
        "longestEqualSubarray(nums=[1,2,3,4,5,6,7,8,9,10], k=3)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5], k = 1)",
        "longestEqualSubarray(nums = [3, 4, 4, 1, 3, 2, 3, 3, 5, 5, 1, 1, 5, 3], k = 1)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 10], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13], k = 3)",
        "maximumBeauty(nums = [1, 5, 6, 8, 9], k = 5)",
        "maximumBeauty(nums = [1,2,3,6,10], k = 1)",
        "maximumBeauty(nums = [5, 2, 3, 1], k = 1)"
    ],
    "sample_163": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [])",
        "maxSum(nums = [123, 456])",
        "maxSum(nums = [12, 345, 6, 78, 9])",
        "maxSum(nums = [1, 1, 1])",
        "maxSum(nums = [1234, 5678])",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "maxSum(nums = [11, 33, 22])"
    ],
    "sample_151": [
        "finalString(s = \"This is a string\")",
        "finalString(s = 'this is a test')",
        "finalString(s = 'spinning')",
        "finalString(s = \"This is a sample string\")",
        "finalString(s = 'rtsin')",
        "finalString(s = 'tsi')",
        "finalString(s = 'nine')",
        "finalString(s = \"rishi\")",
        "finalString(s = \"My name is ...\")",
        "finalString(s = \"hi my name is tess\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num = '5123010000000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num='51230100000')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '0011')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = '1110')",
        "maximumOddBinaryNumber(s = '00100')",
        "maximumOddBinaryNumber(s = '00111')",
        "maximumOddBinaryNumber(s = '10011')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words=['easy-problem'], separator='-')",
        "splitWordsBySeparator(words = [\"easy_problem\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"easy_problem\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy/problem\"], separator = \"/\")",
        "splitWordsBySeparator(words = [\"easy;problem\"], separator = \";\")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \"b\")",
        "splitWordsBySeparator(words=['easy problem', 'and another'], separator=' ')"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,1,1,1,1], K = 0)",
        "longestEqualSubarray(A = [1,1,1,1,1], K = 0)",
        "longestEqualSubarray(A = [1,2,3,4], K = 1)",
        "longestEqualSubarray(A = [1,2,3,4,5,6,7,8], K = 1)",
        "longestEqualSubarray(A = [1,2,2,2,3], K = 1)",
        "longestEqualSubarray(A = [1,2,3,4,5,6], K = 4)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], K = 1)",
        "longestEqualSubarray(A = [1,2,3,2,1], K = 0)",
        "longestEqualSubarray(A = [1, 2, 3, 3, 1], K = 1)",
        "longestEqualSubarray(A = [0,1,0,1,1,1,0,1,0], K = 1)"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2])",
        "countWays(nums = [1, 2])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums=[1,2,3])",
        "countWays(nums=[1, 2, 3, 4])",
        "countWays(nums = [1, 1, 1])",
        "countWays(nums = [1, 1])",
        "countWays(nums = [4, 2, 1])",
        "countWays(nums = [3, 5, 6])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')"
    ],
    "sample_167": [
        "isAcronym(words = [\"apple\", \"banana\", \"cherry\"], s = \"ABC\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hW\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"helloworl\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBX\")",
        "isAcronym(words = [\"microwave\", \"oven\"], s = \"MO\")",
        "isAcronym(words = [\"banana\", \"donut\", \"apple\"], s = \"BADA\")",
        "isAcronym(words=[\"C\", \"o\", \"n\", \"f\", \"u\", \"s\", \"i\", \"o\", \"n\"], s=\"Confusion\")",
        "isAcronym(words = [\"banana\", \"orange\", \"apple\", \"mango\"], s = \"BONAM\")",
        "isAcronym(words = [\"hi\", \"john\", \"bill\"], s = \"hjb\")",
        "isAcronym(words = [\"sdf\", \"efg\"], s = \"SDEEFG\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums=[1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [2,1,2,1,2])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 3)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"This is a test string\")",
        "finalString(s = \"mining\")",
        "finalString(s = 'sitting')",
        "finalString(s = 'siing')",
        "finalString(s = 'isng')",
        "finalString(s = \"tigers\")",
        "finalString(s = \"ifelse\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s='neven')",
        "makeSmallestPalindrome(s = 'nene')",
        "makeSmallestPalindrome(s = 'nene')",
        "makeSmallestPalindrome(s = 'neneev')"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [2, 3, 2], [3, 4, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 3, 1], [3, 4, 1]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [3, 5, 7], [2, 4, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [3, 4, 5], [2, 3, 10], [4, 5, 1]])",
        "maximizeTheProfit(n=2, offers=[(1, 2, 4), (2, 3, 6)])",
        "maximizeTheProfit(n=2, offers=[(1, 1, 2), (2, 2, 1), (1, 2, 3)])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 5], [3, 5, 7], [4, 5, 3], [5, 5, 2]])",
        "maximizeTheProfit(n=5, offers=[(1,3,5), (3,5,6), (2,4,7)])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 2], [3, 4, 3], [2, 3, 1], [4, 5, 2], [1, 2, 2]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1], target = 0)",
        "maximumJumps(nums = [1], target = 1)",
        "maximumJumps(nums = [1, 2, 3], target = 2)",
        "maximumJumps(nums = [3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3], target = 3)",
        "maximumJumps(nums = [2,3,1,1,2,4,2,0,1,1], target = 2)",
        "maximumJumps(nums = [2,3,1], target = 1)",
        "maximumJumps(nums=[1,1,1,1], target=2)",
        "maximumJumps(nums = [1, 3, 6, 10, 12], target = 1)",
        "maximumJumps(nums = [4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 3, 1])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '1100')",
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber(s = \"0111\")",
        "maximumOddBinaryNumber(s = '000110')",
        "maximumOddBinaryNumber(s = '0011001')"
    ],
    "sample_175": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 4, k = 7)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 9, num2 = 2)",
        "makeTheIntegerZero(num1 = 20, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 13, num2 = 4)",
        "makeTheIntegerZero(num1 = 14, num2 = 5)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 6)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 2], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [3, 1, 4, 2], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums=[3, 2, 2, 1], modulo=2, k=0)",
        "countInterestingSubarrays(nums = [3, 2, 3, 4], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [5, 2, 3, 8, 9, 4, 1], modulo = 3, k = 2)"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 3, 2, 6, 5, 4], k = 1)",
        "maximumBeauty(nums=[1,3,2,4,5], k=1)",
        "maximumBeauty(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=2)",
        "maximumBeauty(nums = [3, 1, 5, 2], k = 1)",
        "maximumBeauty(nums = [1, 1, 1, 2, 3], k = 1)",
        "maximumBeauty(nums = [5, 6, 3, 4, 2], k = 1)",
        "maximumBeauty(nums = [5, 2, 3, 9, 3], k = 3)",
        "maximumBeauty(nums=[3, 2, 2, 3, 1, 3, 5, 3, 3], k=2)"
    ],
    "sample_148": [
        "finalString(s = 'pointer')",
        "finalString(s = \"pinot\")",
        "finalString(s = \"miniponter\")",
        "finalString(s = 'Pinot')",
        "finalString(s = \"pintu\")",
        "finalString(s = 'This is an example')",
        "finalString(s = \"printer\")",
        "finalString(s = 'reverse this string')",
        "finalString(s = 'mnopqrstuvwxyz')",
        "finalString(s = \"The final value is 10\")"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums=[1,2,3])",
        "countWays(nums=[1, 3, 5])",
        "countWays(nums = [2, 1, 0])",
        "countWays(nums=[0, 1, 3, 4])",
        "countWays(nums = [3, 5, 6])",
        "countWays(nums = [0, 2, 4, 1, 5])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12,23,45,67])",
        "countBeautifulPairs(nums=[12,23,34,45,56])",
        "countBeautifulPairs(nums=[12, 34, 56, 78, 91])",
        "countBeautifulPairs(nums = [220, 284, 285])",
        "countBeautifulPairs(nums=[12, 28, 6, 18])",
        "countBeautifulPairs(nums = [22,45,30])",
        "countBeautifulPairs(nums=[42, 24])",
        "countBeautifulPairs(nums = [4567, 865])",
        "countBeautifulPairs(nums=[12, 28, 121, 1234])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 27, num2 = 3)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 20, num2 = 3)",
        "makeTheIntegerZero(num1 = 23, num2 = 3)",
        "makeTheIntegerZero(num1 = 100, num2 = 10)",
        "makeTheIntegerZero(num1=10, num2=2)",
        "makeTheIntegerZero(num1 = 37, num2 = 2)",
        "makeTheIntegerZero(num1=17, num2=7)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'hello')",
        "makeSmallestPalindrome(s = 'racecar')",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"nene\")",
        "makeSmallestPalindrome(s = 'baceca')",
        "makeSmallestPalindrome(s = 'adb')"
    ],
    "sample_165": [
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"QBF\")",
        "isAcronym(words = [\"quick\", \"brown\", \"fox\"], s = \"qbf\")",
        "isAcronym(words=[\"Mary\", \"had\", \"a\", \"little\", \"lamb\"], s=\"MAHAL\")",
        "isAcronym(words=[\"united\", \"states\", \"of\", \"america\"], s=\"USA\")",
        "isAcronym(words = ['The', 'Quick', 'Brown', 'Fox'], s = 'TQBF')",
        "isAcronym(words = [\"helicopter\", \"manufacturer\", \"inspection\"], s = \"HMI\")",
        "isAcronym(words = [\"Roger\", \"Wainwright\", \"Ivanhoe\"], s = \"RWI\")",
        "isAcronym(words=['get', 'together', 'soon'], s='GTSS')",
        "isAcronym(words=['air', 'smith', 'concert', 'ticket', 'holder'], s='ASHCTH')"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2])",
        "numberOfGoodSubarraySplits(nums=[1,1,1,1,1,1,1,1,1,1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5], k=3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5, 9], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 2, k = 7)",
        "minimumSum(n = 3, k = 1)"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1, 3, 4, 5])",
        "countWays(nums = [2, 2, 2, 2])",
        "countWays(nums = [2, 4, 1, 0, 2, 3])"
    ],
    "sample_39": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abac\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"aabb\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"L_R_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_\")",
        "furthestDistanceFromOrigin(moves = \"L__R_\")",
        "furthestDistanceFromOrigin(moves = \"R__L_R\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_\")",
        "furthestDistanceFromOrigin(moves = \"__R_L\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"L_L_L\")",
        "furthestDistanceFromOrigin(moves = \"RLR\")",
        "furthestDistanceFromOrigin(moves = \"_____RRRLRL\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank=2, additionalTank=1)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3])",
        "countCompleteSubarrays(nums=[1, 2, 3])",
        "countCompleteSubarrays(nums=[1,2,3,1,2])",
        "countCompleteSubarrays(nums = [2,2,3,3])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [0], threshold = 0)",
        "longestAlternatingSubarray(nums = [2, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [0, 1, 1, 0], threshold = 1)",
        "longestAlternatingSubarray(nums = [2, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [0, 1, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [0,1,1], threshold = 1)",
        "longestAlternatingSubarray(nums=[5, 1], threshold=4)",
        "longestAlternatingSubarray(nums = [5, 6, 1, 3], threshold = 7)",
        "longestAlternatingSubarray(nums = [4, 2, 1, 4], threshold = 6)",
        "longestAlternatingSubarray(nums=[1, 5, 4, 4, 3], threshold=2)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 5], [10, 15], [20, 25]])",
        "numberOfPoints(nums = [[1, 5], [10, 15], [20, 25]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6], [7,8]])",
        "numberOfPoints(nums = [[1,5],[2,4],[3,6]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [5, 7], [6, 8]])",
        "numberOfPoints(nums=[[1,5],[2,3]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8]])",
        "numberOfPoints(nums = [[1, 2], [3, 5], [6, 7], [8, 9], [1, 4]])",
        "numberOfPoints(nums = [[1,3], [4,6]])",
        "numberOfPoints(nums = [[0, 3], [1, 5], [2, 7], [3, 8]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 28, 46, 34])",
        "countBeautifulPairs(nums = [12, 28])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [12, 28, 10, 29])",
        "countBeautifulPairs(nums = [12, 15])",
        "countBeautifulPairs(nums = [12, 28, 6, 36])",
        "countBeautifulPairs(nums = [12, 28, 46, 34, 45])",
        "countBeautifulPairs(nums = [22, 45, 87, 32])",
        "countBeautifulPairs(nums = [10,20,30,40,50,60])",
        "countBeautifulPairs(nums = [12, 28, 46, 32, 14, 26, 38, 44])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums=[1], t=2)",
        "longestAlternatingSubarray(nums=[1, 2], t=2)",
        "longestAlternatingSubarray(nums = [2], t = 1)",
        "longestAlternatingSubarray(nums = [1, 3, 2], t = 3)",
        "longestAlternatingSubarray(nums=[1,2], t=3)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 1, 2], t = 2)",
        "longestAlternatingSubarray(nums = [3, 4, 1], t = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 6], t = 5)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 1], t = 3)",
        "longestAlternatingSubarray(nums = [2,1,2,3,4], t = 4)"
    ],
    "sample_36": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abacaba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaca\")",
        "minimumCost(s = \"aabbba\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")",
        "minLength(s = \"ABABCDABCD\")",
        "minLength(s = \"ABxxCDyy\")",
        "minLength(s = \"ABCDEFGHIJK\")",
        "minLength(s = \"ABCDCDBAB\")",
        "minLength(s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\")",
        "minLength(s = \"ABCDCDCDABCDCD\")",
        "minLength(s = \"abCDEf\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums=[2, 2, 2, 2], modulo=2, k=0)",
        "countInterestingSubarrays(nums = [1, 1, 1, 0], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [4,5,0], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums=[2,2,1,2], modulo=3, k=2)"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[4, 3], [3, 2], [2, 3]])",
        "colorTheArray(n = 5, queries = [[2, 2], [4, 3], [1, 2], [3, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [0, 3], [2, 4], [0, 5]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [3, 2, 1], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 5, 2, 1], nums2 = [4, 3, 5, 2])",
        "maxNonDecreasingLength(nums1 = [3, 5], nums2 = [1, 6])",
        "maxNonDecreasingLength(nums1 = [3, 1, 2], nums2 = [3, 1, 1])",
        "maxNonDecreasingLength(nums1=[1,2,3,4,5], nums2=[3,4,5,6,7])",
        "maxNonDecreasingLength(nums1=[1, 2, 2, 4], nums2=[2, 3, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 5, 8], nums2 = [4, 6, 7])",
        "maxNonDecreasingLength(nums1 = [3, 4, 5, 5], nums2 = [2, 1, 2, 2])",
        "maxNonDecreasingLength(nums1=[1, 2, 1, 2], nums2=[2, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [7, 2, 3, 1], nums2 = [3, 2, 1, 3])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1,2,3])",
        "findValueOfPartition(nums = [1, 2, 2, 3])",
        "findValueOfPartition(nums = [1, 1, 1])",
        "findValueOfPartition(nums = [1, 2, 4])",
        "findValueOfPartition(nums = [2, 3, 4, 5])",
        "findValueOfPartition(nums = [1,2,2,2,3,3,3,3,4,5,5,5])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = 'L_R_L_R')",
        "furthestDistanceFromOrigin(moves = \"RR_LLL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"LR_RR\")",
        "furthestDistanceFromOrigin(moves=\"L_L_L_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LRRLRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRL_RR__\")",
        "furthestDistanceFromOrigin(moves = \"L_RR__RLR_\")",
        "furthestDistanceFromOrigin(moves = \"L_L_L_RRR_L_R_\")",
        "furthestDistanceFromOrigin(moves
    ],
    "sample_117": [
        "minimumIndex(nums = [3, 1, 3, 3, 2, 3])",
        "minimumIndex(nums = [3,1,3,3,2,3])",
        "minimumIndex(nums = [3, 1, 3, 3, 2])",
        "minimumIndex(nums = [3, 1, 3, 3, 2])",
        "minimumIndex(nums = [3, 4, 5, 1, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 1])",
        "minimumIndex(nums = [1,1,1,1,2])",
        "minimumIndex(nums = [1, 1, 1, 1, 2, 2, 2, 3, 4, 5, 6, 7])",
        "minimumIndex(nums = [3, 0, 1, 0, 0, 2, 5, 0, 0, 1, 0])",
        "minimumIndex(nums = [3,2,2,1,1,0,0,0,0,0,0,0,0,0])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 4, 2, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [2, 4, 1, 3, 5])",
        "semiOrderedPermutation(nums=[1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1, 5])"
    ],
    "sample_172": [
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 1, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n=1, k=1)",
        "minimumSum(n = 1, k = 0)",
        "minimumSum(n = 3, k = 10)"
    ]
}