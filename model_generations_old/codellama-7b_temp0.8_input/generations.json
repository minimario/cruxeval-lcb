{
    "sample_348": [
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 0])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 0])",
        "alternatingSubarray(nums = [1, 11, 2, 10, 4, 5, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,3,4,2,5])",
        "alternatingSubarray(nums = [1, 3, 4, 2, 5, 6])",
        "alternatingSubarray(nums = [2, 2, 1])",
        "alternatingSubarray(nums = [2, 2, 2, 3, 2, 2, 2])",
        "alternatingSubarray(nums = [2, 1, 4, 7, 2, 4, 5])"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1, 3], [2, 4]])",
        "matrixSum(a = [[0, 1], [1, 1]])",
        "matrixSum(a = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]])",
        "matrixSum(a = [[1, 1, 1], [1, 2, 1], [1, 1, 1]])",
        "matrixSum(a = [[2, 3, 1], [1, 1, 1], [1, 1, 1]])",
        "matrixSum(a = [[0, 0, 0], [2, 0, 0], [0, 1, 0]])",
        "matrixSum(a = [[3, 6, 7], [4, 1, 9], [10, 9, 7]])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 0],\n                            [0, 1, 1],\n                            [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 2, 1], [1, 1, 2, 2], [2, 2, 1, 1], [1, 2, 2, 2]])",
        "findChampion(grid = [[0, 0, 0, 1, 1, 1, 1, 1],\n                           [1, 1, 1, 1, 1, 1, 1, 0],\n                           [1, 1, 1, 1, 1, 1, 1, 1],\n                           [1, 1, 1, 1, 1, 1, 1, 0],\n                           [0, 0, 0, 0, 0, 0, 0, 1],\n                           [0, 0, 0, 0, 0, 0, 0, 1],\n                           [0, 0, 0, 0, 0, 0, 0, 1],\n                           [1, 1, 1, 1, 1, 1, 1, 1]])"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 1], [1, 1]])",
        "matrixSum(a = [[1, 3], [2, 4]])",
        "matrixSum(a = [[0, 1], [2, 3]])",
        "matrixSum(a = [[1, 2], [1, 3]])",
        "matrixSum(a = [[1, 2, 3], [3, 2, 1], [1, 3, 2]])",
        "matrixSum(a = [[0, 0, 1], [1, 0, 1], [1, 0, 0]])",
        "matrixSum(a = [[0, 0, 1, 1], [0, 1, 0, 1], [1, 1, 1, 1]])",
        "matrixSum(a = [[1, 1, 1, 2, 2], [1, 1, 1, 2, 2], [1, 1, 1, 2, 2], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2]])",
        "matrixSum(a = [[1, 3, 5], [2, 5, 10], [7, 11, 15]])"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 0])",
        "alternatingSubarray(nums = [5, 1, 3, 4, 2])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 4, 5, 4])",
        "alternatingSubarray(nums = [2, 1, 4, 7, 2, 5])",
        "alternatingSubarray(nums = [5, 6, 7, 1, 9, 2, 3, 4])",
        "alternatingSubarray(nums = [4,2,4,5,2])",
        "alternatingSubarray(nums = [2, 1, 1, 2, 2])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 2, 1])",
        "alternatingSubarray(nums = [2, 1, 4, 7, 10, 3, 5, 6, 8, 12, 4])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"mango\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"hello\"], x = \"lo\")",
        "findWordsContaining(words = [\"cat\", \"cats\", \"catsdogcats\", \"dog\", \"dogcatsdog\", \"hippopotamuses\", \"rat\", \"ratcatdogcat\"])",
        "findWordsContaining(words = [\"banana\", \"apple\", \"bicycle\"], x = \"a\")",
        "findWordsContaining(words = [\"rat\", \"cat\", \"ratcat\"], x = \"at\")",
        "findWordsContaining(words = [\"app\", \"apple\", \"apply\", \"applied\", \"applies\"], x = \"pp\")",
        "findWordsContaining(words = [\"he\", \"is\", \"she\", \"sells\"], x = \"se\")",
        "findWordsContaining(words = [\"banana\", \"ban\", \"na\", \"bana\", \"banana\"], x = \"ana\")",
        "findWordsContaining(words = [\"abracadabra\", \"hello\", \"abc\", \"xy\", \"xyz\"], x = \"xy\")"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"aa\", s2 = \"ab\")",
        "canBeEqual(s1 = \"aabcc\", s2 = \"dbbca\")",
        "canBeEqual(s1 = \"123\", s2 = \"132\")",
        "canBeEqual(s1 = \"aabaa\", s2 = \"baaab\")",
        "canBeEqual(s1 = \"ca\", s2 = \"ac\")",
        "canBeEqual(s1 = \"ab\", s2 = \"a\")",
        "canBeEqual(s1 = \"baca\", s2 = \"acba\")",
        "canBeEqual(s1 = \"mqa\", s2 = \"qma\")"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7], target = 10)",
        "lengthOfLongestSubsequence(nums=[10,1,2,7,5,8,7],target=15)",
        "lengthOfLongestSubsequence(nums=[1, 3, 5, 7, 9], target=12)",
        "lengthOfLongestSubsequence(nums=[3,2,1,2,3], target=4)",
        "lengthOfLongestSubsequence(nums = [2, 3, 3, 2], target = 4)",
        "lengthOfLongestSubsequence(nums=[1, 4, 1, 2, 7, 5, 3], target=10)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5],target=30)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 6], target = 5)",
        "lengthOfLongestSubsequence(nums=[5, 3, 4, 6, 7, 8, 1, 2], target=8)",
        "lengthOfLongestSubsequence(nums = [2, 1, 1, 2, 5, 4, 4], target = 8)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dabc\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcdx\")",
        "canBeEqual(s1 = \"banana\", s2 = \"ana\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"xzxz\", s2 = \"xzxz\")",
        "canBeEqual(s1 = \"rrrr\", s2 = \"rrrr\")"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 3, 5, 7])",
        "maxSubarrays(nums = [2, 1, 3, 5])",
        "maxSubarrays(nums = [1, 2, 1, 4, 1])",
        "maxSubarrays(nums = [13, 2, 3, 4, 5, 17, 7])",
        "maxSubarrays(nums = [1, 3, 1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 2, 4, 2, 1, 1])",
        "maxSubarrays(nums = [1, 1, 3, 7, 1, 1, 1, 3, 1])",
        "maxSubarrays(nums = [13, 2, 1, 2, 128, 256, 256, 128])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1,2,3], money = 5)",
        "buyChoco(prices = [1,2,3,4,5], money = 10)",
        "buyChoco(prices = [1, 3, 2], money = 3)",
        "buyChoco(prices = [1, 3, 2], money = 4)",
        "buyChoco(prices = [3, 2, 5], money = 7)",
        "buyChoco(prices = [5, 2, 4], money = 7)",
        "buyChoco(prices = [3, 2, 1], money = 3)",
        "buyChoco(prices = [3,5], money = 9)",
        "buyChoco(prices = [3, 1, 5, 2], money = 9)"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 2, 3], l = 2, r = 5)",
        "countSubMultisets(nums = [1,1,1], l = 2, r = 3)",
        "countSubMultisets(nums = [3, 1, 3], l = 1, r = 4)",
        "countSubMultisets(nums = [1, 2, 1], l = 1, r = 2)",
        "countSubMultisets(nums = [2,1,2], l = 0, r = 2)",
        "countSubMultisets(nums=[3, 2, 3], l=2, r=4)",
        "countSubMultisets(nums = [3, 3, 5], l = 6, r = 11)",
        "countSubMultisets(nums = [1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4], l = 3, r = 7)",
        "countSubMultisets(nums = [1,3,1,2,1,3,2,3], l = 3, r = 7)",
        "countSubMultisets(nums = [1,3,1,1,3,2,3,3,1,2,3,1,2,2,2,2,2,1,1,3,1,2,3,2,3,1,2,1,2,2,1,2,3,1,3,1,2,1,2,3,1,1,2,1,2,3,1,3,1,2,3,1,2,1,3,2,2,1,2,1,2,2,1,2,1,3,2,2,2,3,2,1,2,3,2,3,1,3,2,2,1,3,1,3,1,1,1,2,3,3,1,2,2,3,1,2,1,2,1,2,3,1,2,3,2,3,1,2,1,1,2,3,1,1,2,2,1,2,2,1,2,3,2,1,3,2,3,2,3,2,3,2,3,3,2,2,3,3,1,1,2,3,1,1,2,3,3,1,1,2,3,1,3,2,2,1,3,3,2,2,2,1,1,3,3,2,3,1,1,2,3,1,1,2,2,1,2,3,2,3,3,1,1,3,3,1,3,1,1,1,3,3,2,2,1,2,3,2,1,1,1,2,3,2,3,1,3,2,2,1,1,2,3,3,1,2,1,1,3,2,1,2,3,1,3,3,2,3,3,1,2,1,1,3,2,2,2,1,2,2,3,1,2,1,3,2,2,1,2,"
    ],
    "sample_322": [
        "isFascinating(n = 10)",
        "isFascinating(n = 5)",
        "isFascinating(n = 210)",
        "isFascinating(n = 132)",
        "isFascinating(n = 1111)",
        "isFascinating(n = 342)",
        "isFascinating(n = 41)",
        "isFascinating(n = 255)",
        "isFascinating(n = 623)",
        "isFascinating(n = 4992)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"ab\", s2 = \"aa\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ab\")",
        "canBeEqual(s1 = \"carrace\", s2 = \"racecar\")",
        "canBeEqual(s1 = \"xxx\", s2 = \"yyy\")",
        "canBeEqual(s1 = \"xd\", s2 = \"xd\")",
        "canBeEqual(s1 = \"codewars\", s2 = \"dweocsr\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 3, 2])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 5, 10, 10, 20, 50])",
        "minimumCoins(prices = [2, 5, 6, 1, 6])",
        "minimumCoins(prices = [1, 5, 2, 1, 7, 4])",
        "minimumCoins(prices = [5, 7, 1, 3, 4, 2])",
        "minimumCoins(prices = [10, 12, 20, 21])",
        "minimumCoins(prices = [5, 7, 4, 3, 6])"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 15)",
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 19)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 14)",
        "accountBalanceAfterPurchase(p = 5)",
        "accountBalanceAfterPurchase(p = 94)",
        "accountBalanceAfterPurchase(p = 160)",
        "accountBalanceAfterPurchase(p = 13)",
        "accountBalanceAfterPurchase(p = 21)"
    ],
    "sample_423": [
        "minOperations(nums = [1, 1, 1, 2])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1, 1, 1, 1, 2, 2, 2, 2, 2])",
        "minOperations(nums = [3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2])",
        "minOperations(nums = [1, 3, 1, 4, 2, 2, 5])",
        "minOperations(nums = [1,1,2,3,3,4,4,4,4,4,5,6,7,8,9,10])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [3, 1, 3, 2, 4, 3])",
        "alternatingSubarray(nums = [4, 2, 4, 5, 4])",
        "alternatingSubarray(nums = [3, 1, 4, 1, 5, 9, 2, 6])",
        "alternatingSubarray(nums = [1,2,2,2,3,3])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1])",
        "alternatingSubarray(nums = [1,3,5,2,4,7])",
        "alternatingSubarray(nums = [1,2,2,2,3,3,4,4,5,5,5])",
        "alternatingSubarray(nums = [2, 4, 4, 4, 2, 6, 2])",
        "alternatingSubarray(nums = [5,1,3,5,4,2,1,5,2,3])",
        "alternatingSubarray(nums = [1, 4, 7, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 7, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4])"
    ],
    "sample_460": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 20, limit = 10)",
        "distributeCandies(n = 2, limit = 10)"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"abcd\", x = 1)",
        "minOperations(s1 = \"aaa\", s2 = \"bbb\", x = 3)",
        "minOperations(s1 = \"abcd\", s2 = \"dcba\", x = 1)",
        "minOperations(s1 = \"banana\", s2 = \"apple\", x = 1)",
        "minOperations(s1 = \"m\", s2 = \"m\", x = 0)",
        "minOperations(s1 = \"abaaaba\", s2 = \"babaaaba\", x = 1)",
        "minOperations(s1 = \"xya\", s2 = \"xzb\", x = 3)",
        "minOperations(s1 = \"xhx\", s2 = \"hxx\", x = 2)",
        "minOperations(s1 = \"aacabc\", s2 = \"bbbac\", x = 3)",
        "minOperations(s1 = \"dcbefebceaaab\", s2 = \"dcbefebaeeaab\", x = 2)"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 1, y = 3, z = 4)",
        "longestString(x = 2, y = 1, z = 2)",
        "longestString(x = 2, y = 1, z = 10)",
        "longestString(x = 4, y = 7, z = 3)",
        "longestString(x = 3, y = 6, z = 12)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 1, 2], k = 3)",
        "minOperations(nums = [0, 1, 1, 2], k = 3)",
        "minOperations(nums = [4, 2, 4, 5, 4], k = 1)",
        "minOperations(nums = [5, 10, 3, 7, 13, 9], k = 2)",
        "minOperations(nums = [3, 6, 7, 2, 4, 5], k = 4)"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"bbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abaxyzabc\")",
        "longestSemiRepetitiveSubstring(s = \"abaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabba\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbcde\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"ddbd\")"
    ],
    "sample_361": [
        "isGood(a = [1, 1, 2, 2])",
        "isGood(a = [1, 2, 2, 3, 4])",
        "isGood(a = [1, 2, 1, 2, 1, 2])",
        "isGood(a = [1, 2, 2, 1, 2, 1])",
        "isGood(a = [0, 1, 2, 1, 0, 1])",
        "isGood(a = [3, 3, 4, 4])",
        "isGood(a = [0, 1, 0, 2, 1])",
        "isGood(a = [1,2,2,3,3,3,4])",
        "isGood(a = [1, 2, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10])",
        "isGood(a = [0, 2, 3, 4, 3, 2, 4, 0])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 9, m = 3)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 1, m = 3)"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minGroupsForValidAssignment(nums = [1, 2, 3])",
        "minGroupsForValidAssignment(nums = [10, 5, 2, 6])",
        "minGroupsForValidAssignment(nums = [3, 2, 2])",
        "minGroupsForValidAssignment(nums = [1,2,2,4])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 3, 5, 5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [5, 5, 4, 4, 4, 3, 3, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 4, 2, 4, 2, 4, 2, 4])",
        "minGroupsForValidAssignment(nums = [0,0,0,1,1,2])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"a\", \"b\", \"prev\", \"c\", \"d\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"a\", \"prev\", \"1\", \"prev\", \"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\",\"2\",\"prev\",\"3\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"prev\", \"4\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"start\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"next\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"4\", \"1\", \"1\", \"2\", \"3\", \"1\", \"1\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"10\", \"prev\", \"1\", \"prev\", \"3\", \"next\", \"2\"])"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"cdc\", \"eae\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"dc\", \"ba\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"mnop\", \"abba\"])",
        "maximumNumberOfStringPairs(words = [\"aaaaa\", \"bbb\", \"cc\"])",
        "maximumNumberOfStringPairs(words = [\"code\", \"edoc\", \"aedoc\", \"ceod\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"aabb\", \"baba\", \"baab\", \"babba\", \"ab\", \"bab\", \"aba\", \"baa\"])"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = '0111011', k = 2)",
        "shortestBeautifulSubstring(s = \"011011100\", k = 2)",
        "shortestBeautifulSubstring(s = '10101', k = 2)",
        "shortestBeautifulSubstring(s = \"0110011\", k = 2)",
        "shortestBeautifulSubstring(s = '00111000011', k = 2)",
        "shortestBeautifulSubstring(s = \"00101010\", k = 2)",
        "shortestBeautifulSubstring(s = '1100111000', k = 2)",
        "shortestBeautifulSubstring(s = '111100111000000', k = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [3, 1, 2, 4])",
        "minimumRightShifts(nums = [2, 1, 3, 5, 6, 4])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [10, 20, 30, 40, 50])",
        "minimumRightShifts(nums = [3, 5, 1, 2, 4])",
        "minimumRightShifts(nums = [3, 10, 5])",
        "minimumRightShifts(nums = [4, 3, 2, 6, 5])",
        "minimumRightShifts(nums = [9, 5, 7, 3])",
        "minimumRightShifts(nums = [1,2,3,10,10,10])",
        "minimumRightShifts(nums = [6, 9, 7, 2, 3, 4, 1, 8, 5, 10])"
    ],
    "sample_294": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10001\")",
        "minimumSteps(s = \"1110\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"1100011\")",
        "minimumSteps(s = \"01001001\")",
        "minimumSteps(s = \"100101110\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abcd\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"dcba\", s3 = \"bacd\")",
        "findMinimumOperations(s1 = \"xyz\", s2 = \"xw\", s3 = \"yw\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"acd\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bca\", s3 = \"cba\")",
        "findMinimumOperations(s1 = \"this\", s2 = \"is\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banan\", s3 = \"ananab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdef\", s3 = \"cdef\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"ab\", s3 = \"e\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgd\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"de\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"bdef\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"abcda\")",
        "canMakeSubsequence(str1 = \"s\", str2 = \"ss\")",
        "canMakeSubsequence(str1 = \"geeks\", str2 = \"egks\")",
        "canMakeSubsequence(str1 = \"zxzxz\", str2 = \"zxzxz\")",
        "canMakeSubsequence(str1 = \"zab\", str2 = \"gca\")",
        "canMakeSubsequence(str1 = \"bx\", str2 = \"abh\")"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [3, 1, 4, 2])",
        "isGood(nums = [1,2,4,5,6,7])",
        "isGood(nums = [1, 2, 3, 5, 7, 10])",
        "isGood(nums = [5, 2, 1, 3, 4])",
        "isGood(nums = [0, 2, 1])",
        "isGood(nums = [1,2,4,5,6,7,9,10])",
        "isGood(nums = [4, 2, 3, 1, 5])"
    ],
    "sample_383": [
        "countPairs(nums = [10, 15, 3, 7], target = 17)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 1, 1, 1], target = 3)",
        "countPairs(nums = [3, 1, 1, 2], target = 4)",
        "countPairs(nums = [1, 2, 3, 4], target = 12)",
        "countPairs(nums = [2, 3, 5], target = 9)",
        "countPairs(nums = [1, 2, 5], target = 7)",
        "countPairs(nums = [1, 2, 5, 3, 8], target = 10)",
        "countPairs(nums = [2, 5, 9, 10, 20, 21], target = 28)",
        "countPairs(nums = [4, 1, 3, 1, 5, 6, 7, 4], target = 13)"
    ],
    "sample_357": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [4, 5], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9, 10, 11, 12], moveFrom = [8, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [9, 5, 6, 8, 3, 7, 4], moveFrom = [3, 5], moveTo = [7, 4])",
        "relocateMarbles(nums = [5, 8, 3, 6, 9], moveFrom = [3, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 5], moveTo = [2, 5])",
        "relocateMarbles(nums = [5, 5, 6, 8, 9, 9, 9], moveFrom = [9, 9, 9], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [4, 3, 1], moveTo = [9, 7, 6])",
        "relocateMarbles(nums = [9, 6, 10, 5, 11, 12], moveFrom = [8, 11], moveTo = [5, 6])",
        "relocateMarbles(nums = [3, 4, 1, 5, 2, 6, 7], moveFrom = [5, 3], moveTo = [6, 7])",
        "relocateMarbles(nums = [9, 7, 8, 6, 4, 5], moveFrom = [6, 4, 5], moveTo = [5, 6, 8])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 1, 1, 1, 1], target = 3)",
        "countPairs(nums = [1, 4, 1, 2], target = 4)",
        "countPairs(nums = [1, 1, 1, 1], target = 3)",
        "countPairs(nums = [1, 2, 3, 6, 7], target = 7)",
        "countPairs(nums = [1, 3, 2, 6], target = 7)",
        "countPairs(nums = [1, 2, 4, 8], target = 11)",
        "countPairs(nums = [1, 2, 3, 5, 6, 7], target = 12)",
        "countPairs(nums = [1, 5, 10, 20, 25], target = 48)",
        "countPairs(nums = [1, 4, 2, 6, 3, 8], target = 9)"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 3, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 2])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [2,1,2,1])",
        "minLengthAfterRemovals(nums = [1,3,1,2])",
        "minLengthAfterRemovals(nums = [1,3,5,6,7,9])"
    ],
    "sample_303": [
        "countSeniors(details = [\"1234\", \"5678\", \"9012\", \"3456\"])",
        "countSeniors(details = [\"John Doe\", \"Jane Doe\", \"Bill Doe\"])",
        "countSeniors(details = [\"Banana\", \"Apple\", \"Lemon\"])",
        "countSeniors(details = [\"p0134567\",\"p0234567\",\"p0334567\",\"p0434567\",\"p0534567\",\"p0634567\",\"p0734567\",\"p0834567\",\"p0934567\",\"p1034567\"])",
        "countSeniors(details = [\"19890112\", \"19900112\", \"19900113\", \"19930412\", \"19990420\"])",
        "countSeniors(details = [\"Vikram\", \"Mondal\", \"Himanshu\", \"Senior\", \"65\", \"100\"])",
        "countSeniors(details = [\"Chris 1988\", \"Alex 2022\", \"Tim 1957\", \"Jim 1964\"])",
        "countSeniors(details = [\"11-Feb-1990\", \"12-Feb-1990\", \"01-Sep-2000\", \"05-Nov-1980\", \"03-Sep-1980\", \"03-Oct-1960\"])",
        "countSeniors(details=[\"aa\", \"aa\", \"aa\", \"bbb\", \"aa\", \"aa\", \"ddd\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"cc\", \"dddd\", \"bbb\", \"bbb\", \"aa\", \"ddd\", \"bbb\"])",
        "countSeniors(details = [\"Hunter 62 13\", \"Jones 61 12\", \"Jackson 64 14\", \"Miller 52 10\", \"Moor 60 11\"])"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abbaba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaba\")",
        "longestSemiRepetitiveSubstring(s = \"abac\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcddcb\")",
        "longestSemiRepetitiveSubstring(s = \"abaabaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"cdddddabba\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"aa\", s2 = \"ab\")",
        "canBeEqual(s1 = \"aab\", s2 = \"aba\")",
        "canBeEqual(s1 = \"ac\", s2 = \"ca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"baa\", s2 = \"abb\")",
        "canBeEqual(s1 = \"yyy\", s2 = \"xyx\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"a\", s3 = \"b\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"def\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"a\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"baba\", s2 = \"baba\", s3 = \"baba\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"bana\", s2 = \"anab\", s3 = \"naba\")",
        "findMinimumOperations(s1 = \"baxx\", s2 = \"bayy\", s3 = \"bazy\")",
        "findMinimumOperations(s1 = \"abcdefgh\", s2 = \"zyxwvu\", s3 = \"rstqpon\")",
        "findMinimumOperations(s1 = \"BADF\", s2 = \"DAD\", s3 = \"ABF\")"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 3)",
        "lengthOfLongestSubsequence(nums=[1,2,3,1], target=1)",
        "lengthOfLongestSubsequence(nums = [2,3,5,7], target = 12)",
        "lengthOfLongestSubsequence(nums=[23, 2, 6, 4, 7], target=6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 1, 2, 1], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1], target = 4)",
        "lengthOfLongestSubsequence(nums=[10,1,2,7,5,8,2,5,4], target=18)",
        "lengthOfLongestSubsequence(nums = [10,1,2,7,5,8,2,9,4,3,6], target = 15)",
        "lengthOfLongestSubsequence(nums=[1,2,3,2,5,2,2,2,4], target=4)",
        "lengthOfLongestSubsequence(nums=[10,1,2,7,5,8,13,3],target=10)"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [1, 1, 1, 1])",
        "minimumSum(nums = [3, 2, 1, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [3, 4, 1, 2, 6])",
        "minimumSum(nums = [1, 5, 8, 4, 3])",
        "minimumSum(nums = [10, 3, 5, 6, 1, 7, 9])",
        "minimumSum(nums = [3, 1, 2, 6, 3, 4])",
        "minimumSum(nums = [2, 5, 7, 3, 10, 11, 16])"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"baba\", \"aba\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"ba\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"xyz\", \"xw\", \"abcd\"])",
        "minimizeConcatenatedLength(words = [\"b\", \"ac\", \"d\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ca\", \"da\"])",
        "minimizeConcatenatedLength(words = [\"coding\", \"coding\", \"coding\", \"coding\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"aba\", \"bb\", \"ac\"])",
        "minimizeConcatenatedLength(words = [\"qvw\", \"qvq\"])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"011101\", k = 2)",
        "shortestBeautifulSubstring(s = '011011100', k = 2)",
        "shortestBeautifulSubstring(s = '011010', k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 2)",
        "shortestBeautifulSubstring(s = '1101101', k = 2)",
        "shortestBeautifulSubstring(s = '01101011', k = 2)",
        "shortestBeautifulSubstring(s='101', k=2)",
        "shortestBeautifulSubstring(s='00000', k=1)",
        "shortestBeautifulSubstring(s = '100110010101', k = 3)",
        "shortestBeautifulSubstring(s = '00111011101110111011101110', k = 2)"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"a\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"a\",\"bc\",\"def\",\"gh\"])",
        "minimizeConcatenatedLength(words = [\"flow\",\"flower\",\"fly\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"deq\", \"fgh\"])",
        "minimizeConcatenatedLength(words = [\"abcd\",\"cdab\",\"xyzz\",\"zzxy\",\"zzyx\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"abd\", \"abcde\", \"abcd\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"bannana\", \"orange\", \"peach\"])",
        "minimizeConcatenatedLength(words = [\"zz\",\"xx\",\"yy\",\"qw\",\"bc\"])",
        "minimizeConcatenatedLength(words = [\"apple\",\"b\",\"a\",\"c\",\"a\",\"d\",\"t\",\"p\"])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 100, m = 4)"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 0])",
        "alternatingSubarray(nums = [1, 3, 4, 2, 2])",
        "alternatingSubarray(nums=[1,2,3,4])",
        "alternatingSubarray(nums = [1, 3, 4, 1, 2])",
        "alternatingSubarray(nums = [5,4,3,2,1])",
        "alternatingSubarray(nums = [1,2,3,1,2,1])",
        "alternatingSubarray(nums = [10,1,2,4,7,8,100])",
        "alternatingSubarray(nums = [3, 1, 3, 2, 4, 7, 8])",
        "alternatingSubarray(nums=[0, 1, 2, 1, 0, 1])",
        "alternatingSubarray(nums = [3, 1, 4, 4, 2, 2, 3, 1, 7, 5, 1])"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,1,2,0,1])",
        "findMaximumLength(nums = [1, 2, 2, 2])",
        "findMaximumLength(nums = [1, 4, 2, 1, 4, 2])",
        "findMaximumLength(nums=[4, 2, 4, 5, 6])",
        "findMaximumLength(nums=[1,3,-2,2])",
        "findMaximumLength(nums = [1,2,1,1,4])",
        "findMaximumLength(nums = [3, 5, -7, 8])",
        "findMaximumLength(nums = [3,1,2,10,1,2,6])",
        "findMaximumLength(nums=[6, 3, 1, 5, 7, 2, 4])",
        "findMaximumLength(nums = [-1,0,0,1,1,2,3,5,8,11,16,17])"
    ],
    "sample_302": [
        "countSeniors(details = [\"111111111110\", \"222222222221\", \"333333333332\"])",
        "countSeniors(details = [\"123456789013\", \"123456789014\", \"123456789015\", \"123456789016\"])",
        "countSeniors(details = [\"012345678910\", \"12345678911\", \"23456789112\"])",
        "countSeniors(details = [\"2020-01-01 00:00:00\", \"1989-01-01 00:00:00\", \"2000-01-01 00:00:00\"])",
        "countSeniors(details = [\"01-01-1954\", \"01-02-1954\", \"01-03-1955\", \"01-04-1954\", \"01-05-1964\", \"01-06-1954\", \"01-07-1974\", \"01-08-1954\"])",
        "countSeniors(details = [\"2003-06-06 22:03:01\", \"2003-06-06 22:03:01\", \"1986-06-06 22:03:01\", \"1998-06-06 22:03:01\"])",
        "countSeniors(details = [\"44070000140100117\",\"44070000140100118\",\"44070000140100116\"])",
        "countSeniors(details = [\"19234788046\", \"23464873068\", \"11234567802\", \"23478903021\", \"01234567890\"])",
        "countSeniors(details = [\"ZHELINSKY,Eugene,1997,10000,GIRL,Honors,0,0,1,0,0,0\", \"ZHELINSKY,Irma,1998,11000,GIRL,Honors,1,1,1,1,0,1\"])",
        "countSeniors(details = [\"44-03-3286\", \"45-26-5703\", \"27-10-2459\", \"65-09-5281\", \"65-29-0329\", \"43-13-5278\"])"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"baa\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cba\")",
        "canBeEqual(s1 = \"wxyz\", s2 = \"xywz\")",
        "canBeEqual(s1 = \"ba\", s2 = \"ac\")",
        "canBeEqual(s1 = \"ABCD\", s2 = \"ACBD\")",
        "canBeEqual(s1 = \"aab\", s2 = \"bbb\")"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [3, 5, 8, 10])",
        "minimumCoins(prices = [2, 3, 5, 10])",
        "minimumCoins(prices = [2, 6, 7, 1, 1, 3])",
        "minimumCoins(prices = [1, 3, 5, 7])",
        "minimumCoins(prices = [1, 4, 2, 4, 2, 4, 2])",
        "minimumCoins(prices = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824])",
        "minimumCoins(prices = [100, 50, 10, 2, 5])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4])",
        "minimumSeconds(A = [1, 3, 2, 1, 4])",
        "minimumSeconds(A = [1,2,1,1])",
        "minimumSeconds(A = [1, 2, 3, 4, 10])",
        "minimumSeconds(A = [1, 3, 3, 7])",
        "minimumSeconds(A = [1, 2, 3, 4, 3, 2, 1, 1])",
        "minimumSeconds(A = [1,1,1,1,1,1,1,2,2])",
        "minimumSeconds(A = [4,1,2,2,4,3])",
        "minimumSeconds(A = [3, 1, 5, 1, 3, 5])",
        "minimumSeconds(A = [0, 3, 10, 20, 40, 50])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"leetcode\", \"leet\", \"code\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"])",
        "maximumNumberOfStringPairs(words = [\"leetcode\", \"et\", \"code\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"a\", \"ba\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abb\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"dc\", \"aa\", \"da\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"ba\", \"ab\", \"a\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"a\", \"ba\", \"b\", \"cd\", \"e\"])",
        "maximumNumberOfStringPairs(words = [\"bannana\", \"apple\", \"app\", \"apricot\"])"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 3, 4], nums2 = [2, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [5, 6, 0])",
        "minSum(nums1 = [1, 3, 5, 0, 0], nums2 = [2, 4, 6])",
        "minSum(nums1 = [1,2,3], nums2 = [10, 11, 12])",
        "minSum(nums1 = [3, 1, 2], nums2 = [4, 5])",
        "minSum(nums1 = [1, 3, 5, 7], nums2 = [10, 20, 30, 40, 50])",
        "minSum(nums1 = [4, 6], nums2 = [2, 5, 7])",
        "minSum(nums1 = [1, 3, 0, 5], nums2 = [6, 2, 4])"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"orange\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\"], x = \"a\")",
        "findWordsContaining(words = [\"ba\", \"banana\", \"nana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"apple\"], x = \"e\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"tac\", \"god\"], x = \"a\")",
        "findWordsContaining(words = [\"loop\", \"apple\", \"bat\"], x = \"a\")",
        "findWordsContaining(words = [\"Hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"aba\", \"baa\", \"aba\", \"xzxb\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"aabb\", \"aba\"], x = \"a\")",
        "findWordsContaining(words = [\"academy\", \"bake\", \"cake\", \"batter\"], x = \"ak\")"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [10, 1, 2, 7, 6, 1, 5], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 4)",
        "maxSum(nums = [4, 2, 1, 6], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 4, k = 2)",
        "maxSum(nums = [1, 4, 2, 10, 2, 3, 1, 0, 20], m = 2, k = 4)",
        "maxSum(nums = [0, 1, 2, 3, 4, 5, 6], m = 4, k = 2)",
        "maxSum(nums = [1, 2, 3, 1, 4, 5, 1, 2], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 5, 2, 1, 1], m = 3, k = 3)",
        "maxSum(nums = [7,1,5,3,6,4], m = 4, k = 1)"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [4, 3])",
        "relocateMarbles(nums = [1,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 1, 2, 2], moveFrom = [0, 3], moveTo = [2, 3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [0, 2], moveTo = [2, 2])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [2,3,4], moveTo = [3,4,5])",
        "relocateMarbles(nums = [3, 2, 1, 5], moveFrom = [1, 2], moveTo = [4, 0])",
        "relocateMarbles(nums = [4, 1, 2, 3], moveFrom = [2, 3], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 2, 2, 3, 4, 6], moveFrom = [1, 3, 5], moveTo = [4, 0, 5])"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4, 1, 3, 2])",
        "minimumRightShifts(nums = [2, 3, 5, 7, 11, 13, 17, 19])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 1, 3])",
        "minimumRightShifts(nums = [1, 2, 1, 2, 1, 2, 1])",
        "minimumRightShifts(nums = [1, 3, 2, 4, 3, 5, 4])",
        "minimumRightShifts(nums = [4,3,2,1,0,1,2,3,4])",
        "minimumRightShifts(nums = [5, 7, 3, 4])"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 6)",
        "buyChoco(prices = [10, 8, 5], money = 10)",
        "buyChoco(prices = [2, 4, 6, 8, 10], money = 17)",
        "buyChoco(prices = [10, 5, 2, 1], money = 17)",
        "buyChoco(prices = [1000, 500], money = 1200)",
        "buyChoco(prices = [1, 4, 5], money = 12)",
        "buyChoco(prices = [10, 4, 6, 7, 9], money = 17)",
        "buyChoco(prices = [10, 12, 5, 15], money = 25)",
        "buyChoco(prices = [1,5,6,4], money = 8)",
        "buyChoco(prices = [4, 3, 2], money = 7)"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5, 12, 3], target = 9)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [3,5,1,2,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 11, 2, 10, 4, 1, 20], target = 7)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5, 15, 3, 10, 5, 7], target = 17)",
        "lengthOfLongestSubsequence(nums = [7, 3, 4, 7, 7, 5, 4, 5], target = 12)",
        "lengthOfLongestSubsequence(nums = [6, 10, 2, 14, 20], target = 32)",
        "lengthOfLongestSubsequence(nums = [5, 1, 3, 1, 2, 4, 5, 4, 3, 2], target = 8)",
        "lengthOfLongestSubsequence(nums = [4, 5, 6, 7, 0, 1, 2, 3], target = 5)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"ababababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaab\")",
        "longestSemiRepetitiveSubstring(s = \"bbbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbba\")",
        "longestSemiRepetitiveSubstring(s = \"wxyzyxw\")",
        "longestSemiRepetitiveSubstring(s = \"ababbcabb\")",
        "longestSemiRepetitiveSubstring(s = \"aabcabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcabdabdabda\")"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"abc\", \"def\", \"xyz\"], x = \"x\")",
        "findWordsContaining(words = [\"abcde\", \"fghij\", \"klmno\"], x = \"o\")",
        "findWordsContaining(words = [\"qwerty\", \"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"bana\", \"banana\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"abcde\", \"ab\"], x = \"ab\")",
        "findWordsContaining(words = [\"abc\", \"ba\", \"cba\", \"nana\"], x = \"a\")",
        "findWordsContaining(words = [\"abcd\", \"efgh\", \"ijklmnopqrst\"], x = \"i\")",
        "findWordsContaining(words = [\"banana\", \"b\", \"nanana\", \"ban\", \"banan\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"banana\", \"billy\", \"bob\"], x = \"a\")",
        "findWordsContaining(words = [\"fans\", \"banana\", \"don't\"], x = \"a\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"4\", \"4\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"10\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"42\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"0\", \"prev\", \"-1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push\", \"3\", \"4\", \"pop\", \"top\"])",
        "lastVisitedIntegers(words = [\"form\", \"prev\", \"form\", \"prev\", \"form\"])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"aba\", s2 = \"bab\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cb\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bba\")",
        "canBeEqual(s1 = \"abb\", s2 = \"bab\")",
        "canBeEqual(s1 = \"abbc\", s2 = \"cbad\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aba\")",
        "canBeEqual(s1 = \"acd\", s2 = \"dac\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"TesT\", s2 = \"test\")"
    ],
    "sample_255": [
        "minimumSum(nums = [3,1,4,2])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1,100,1,100,1,100])",
        "minimumSum(nums = [2, 3, 4, 2])",
        "minimumSum(nums = [2, 1, 5, 4, 6])",
        "minimumSum(nums = [4,3,2,6,10,1,20])",
        "minimumSum(nums=[1, 7, 2])",
        "minimumSum(nums = [9,3,7,10])",
        "minimumSum(nums = [10, 1, 2, 4, 100])",
        "minimumSum(nums = [10,5,4,3,1,2,8,6,2,9])"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5, 8, 7], target = 12)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5, 8, 7], target = 12)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 5, 8, 7], target = 12)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 4)",
        "lengthOfLongestSubsequence(nums = [3, 5, 1, 2, 4, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 5, 1, 2, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5, 100], target=101)",
        "lengthOfLongestSubsequence(nums = [2, 5, 3, 10, 1, 7, 11, 9], target = 11)"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = 'YmpH')",
        "sortVowels(s = \"HYmp\")",
        "sortVowels(s = 'lYmPH')",
        "sortVowels(s = \"PYTHON\")",
        "sortVowels(s = \"Heymp\")",
        "sortVowels(s = 'Potato')",
        "sortVowels(s = \"HeyMan\")",
        "sortVowels(s = \"HEllo\")"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 0], [0, 1]])",
        "matrixSum(nums = [[1,2,3],[3,4,5],[4,5,6]])",
        "matrixSum(nums = [[0,0,0],[0,0,0],[0,0,0]])",
        "matrixSum(nums = [[1, 2, 3], [3, 2, 1]])",
        "matrixSum(nums = [[2, 5, 8], [1, 2, 3]])",
        "matrixSum(nums = [[3, 2, 1], [5, 2, 1]])",
        "matrixSum(nums = [[3,2,5],[2,4,3],[1,1,1],[6,2,5],[1,2,3]])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [2, 7, 11, 15])",
        "maximumTripletValue(nums = [1, -2, 3])",
        "maximumTripletValue(nums = [1, 5, 3, 4, 3])",
        "maximumTripletValue(nums = [0, 4, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, -2, 5])",
        "maximumTripletValue(nums = [5, 2, 7, 3])",
        "maximumTripletValue(nums = [0, 0, 0, 0, 1, 2])",
        "maximumTripletValue(nums = [1, 2, 5, 0, 4])",
        "maximumTripletValue(nums = [0, 1000])",
        "maximumTripletValue(nums = [20, 40, 30])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 11, 2, 10, 4, 5, 2, 1])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 5, 0, 1, 4, 7, 6])",
        "alternatingSubarray(nums = [5, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 1, 1, 2, 2, 1, 1])",
        "alternatingSubarray(nums = [3, 1, 3, 3, 2, 3, 1, 2, 3])",
        "alternatingSubarray(nums = [3, 5, 3, 7, 3, 6, 3])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"a\", k = 3)",
        "beautifulSubstrings(s = \"abacaba\", k = 3)",
        "beautifulSubstrings(s = \"abaa\", k = 3)",
        "beautifulSubstrings(s = \"abcdefa\", k = 3)",
        "beautifulSubstrings(s = \"aab\", k = 5)",
        "beautifulSubstrings(s = 'aba', k = 6)",
        "beautifulSubstrings(s = \"abab\", k = 1000)",
        "beautifulSubstrings(s = \"tube\", k = 6)",
        "beautifulSubstrings(s = \"beaaouiaaio\", k = 3)",
        "beautifulSubstrings(s = \"iqurp\", k = 10)"
    ],
    "sample_449": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aaaa\")",
        "minChanges(s = \"bab\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"xy\")",
        "minChanges(s=\"\")",
        "minChanges(s = \"abccdef\")"
    ],
    "sample_291": [
        "minimumSteps(s = \"011101\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"11101\")",
        "minimumSteps(s = \"121\")",
        "minimumSteps(s = \"0101010\")",
        "minimumSteps(s = \"11010\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = '010110')",
        "minimumSteps(s = \"10111001\")",
        "minimumSteps(s = \"12111235231112\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"1998-01-01\"])",
        "countSeniors(details = [\"2001-01-01\", \"1999-01-01\"])",
        "countSeniors(details = [\"0000000000010\", \"0000000000020\"])",
        "countSeniors(details = ['123456789101', '223456789101', '323456789101', '423456789101', '523456789101', '623456789101', '723456789101', '823456789101', '923456789101', '102345678910'])",
        "countSeniors(details = [\"1010101010101010\",\"0100100100100100\",\"0000100100100100\",\"1110101010101010\"])",
        "countSeniors(details = [\"12121990aa\", \"13121988bb\", \"14111998cc\"])",
        "countSeniors(details = [\"AA36711810211\", \"AA36711810311\", \"AA36711810231\"])",
        "countSeniors(details = [\"001915081123456789112064\"])",
        "countSeniors(details = [\"1948-09-08\", \"1946-01-19\", \"1983-12-25\", \"1957-09-22\"])",
        "countSeniors(details = [\"202028221012113562\",\"201922260411330581\",\"201919090711110975\",\"202028230811222475\",\"201926190611110321\"])"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [4, 1, 3, 2])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,3])",
        "minGroupsForValidAssignment(nums = [3,1,3,3,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,1,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4",
        "minGroupsForValidAssignment(nums = [3,3,4,4,5,5,7,7])",
        "minGroupsForValidAssignment(nums = [7,2,3,5,1])",
        "minGroupsForValidAssignment(nums = [1, 10, 3, 2, 2, 4, 5])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 1], [3, 4], [-1, 0]], k = 2)",
        "countPairs(coordinates = [[1, 1], [1, 2], [2, 2]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [7, 7]], k = 1)",
        "countPairs(coordinates = [[3, 1], [1, 2], [1, 3], [2, 3]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [2, 3]], k = 1)",
        "countPairs(coordinates = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5]], k = 4)",
        "countPairs(coordinates = [[1, 2], [2, 3], [1, 3], [3, 3], [1, 4], [2, 4], [3, 4], [4, 1], [4, 2], [4, 3]], k = 2)",
        "countPairs(coordinates = [[2, 1], [3, 0], [4, 1], [5, 1], [6, 1], [7, 0], [7, 2], [6, 3], [5, 2], [4, 3], [3, 2], [2, 3]], k = 3)",
        "countPairs(coordinates = [[2, 3], [2, 1], [3, 4], [3, 2], [2, 4], [1, 3], [1, 2], [1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[1,2],[-1,2],[1,-2],[-1,-2],[0,2],[0,-2],[2,0],[2,2],[2,-2],[2,2],[0,-2],[0,2],[-2,0],[-2,2],[-2,-2],[-2,0],[-2,-2],[-2,2],[-2,-2],[0,2],[0,-2],[2,0],[2,2],[2,-2],[2,2],[2,-2],[2,2],[2,-2],[-2,0],[-2,2],[-2,-2],[-2,0],[-2,-2],[-2,2],[-2,-2],[0,2],[0,-2],[2,0],[2,2],[2,-2],[2,2],[2,-2],[2,2],[2,-2],[-2,0],[-2,2],[-2,-2],[-2,0],[-2,-2],[-2,2],[-2,-2],[0,2],[0,-2],[2,0],[2,2],[2,-2],[2,2],[2,-2],[2,2],[2,-2],[-2,0],[-2,2],[-2,-2],[-2,0],[-2,-2],[-2,2],[-2,-2],[0,2],[0,-2],[2,0],[2,2],[2,-2],[2,2],[2,-2],[2,2],[2,-2],[-2,0],[-2,2],[-2,-2],[-2,0],[-2,-2],[-2,2],[-2,-2],[0,2],[0,-2],[2,0],[2,2],[2,-2],[2,2],[2,-2],[2,2],[2,-2],[-2,0],[-2,2],[-2,-2],[-2,0],[-2,-2],[-2,2],[-2,-2],[0,2],[0,-2],[2,0],[2,2],[2,-2],[2,2],[2,-2],[2,2],[2,-2],[-2,0],[-2,2],[-2,-2],[-2,0],[-2,-2],[-2,2],[-2,-2],[0,2],[0,-2],[2,0],[2,2],[2,-2],[2,2],[2,-2],[2,2],[2,-2"
    ],
    "sample_401": [
        "maxSum(nums = [5, 1, 3, 4, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 2)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 3, k = 4)",
        "maxSum(nums = [2, 7, 5, 2, 6, 2], m = 3, k = 2)",
        "maxSum(nums = [1, 101, 1, 100, 1, 100, 1], m = 3, k = 3)",
        "maxSum(nums = [2, 1, 3, 2, 4, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 3, 2, 4, 5, 9, 7], m = 3, k = 4)",
        "maxSum(nums = [2, 1, 4, 3, 2, 4, 5, 6], m = 3, k = 3)"
    ],
    "sample_452": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabbaa\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"aabccbb\")",
        "minChanges(s = \"aabccbbb\")",
        "minChanges(s = \"bcd\")",
        "minChanges(s = \"yxyxy\")",
        "minChanges(s = \"100100\")",
        "minChanges(s = \"RRR\")",
        "minChanges(s = \"aabccccddddeeeeeee\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 3, 5], nums2 = [1, 4, 6])",
        "minOperations(nums1 = [1, 3, 5], nums2 = [1, 4, 6])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 3, 1])",
        "minOperations(nums1 = [1, 3, 5, 7, 9], nums2 = [10, 20, 30, 40, 50])",
        "minOperations(nums1 = [0, 1, 1], nums2 = [1, 1, 0])",
        "minOperations(nums1 = [4, 3, 2, 1], nums2 = [1, 3, 5, 7])",
        "minOperations(nums1 = [1, 1, 1, 1, 1], nums2 = [2, 2, 2, 2, 2])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 2, 4, 6, 7, 9])",
        "minOperations(nums1 = [0, 1, 3, 3], nums2 = [1, 2, 3, 1])",
        "minOperations(nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1],\n    nums2 = [2, 2, 2, 2, 2, 2, 2, 2, 2])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"0111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"0111011\", k = 2)",
        "shortestBeautifulSubstring(s = '0111011', k = 2)",
        "shortestBeautifulSubstring(s = \"011011100\", k = 2)",
        "shortestBeautifulSubstring(s = \"001110101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010\", k = 2)",
        "shortestBeautifulSubstring(s = \"0111110\", k = 3)",
        "shortestBeautifulSubstring(s = \"0011101010\", k = 4)",
        "shortestBeautifulSubstring(s = \"1110101110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011110111010011001011100101111\", k = 5)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [2, 7, -5])",
        "maximumTripletValue(nums = [2, 7, -5])",
        "maximumTripletValue(nums = [10, -10, 100, -100, 1000])",
        "maximumTripletValue(nums = [-3, 0, 2, -1, 1, 0, 1])",
        "maximumTripletValue(nums = [4, 1, 2, 3])",
        "maximumTripletValue(nums = [6, 5, 4, 3])",
        "maximumTripletValue(nums = [-100, 4, -1, 2, 1, -5, 200])",
        "maximumTripletValue(nums = [2, 7, -5, 1, 2])",
        "maximumTripletValue(nums = [5,11,7,13])",
        "maximumTripletValue(nums = [1, 1, 2, 4, 5, 10])"
    ],
    "sample_465": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 4)",
        "distributeCandies(n = 9, limit = 5)",
        "distributeCandies(n = 12, limit = 10)"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,1,2,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,4,4,5])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,5])",
        "minGroupsForValidAssignment(nums = [1,3,5,6])",
        "minGroupsForValidAssignment(nums = [15,30,45,60,75,90,105,120,135,150,165])",
        "minGroupsForValidAssignment(nums = [5, 3, 4, 4, 4, 2, 2, 1, 4, 3, 5, 5, 5, 5])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5])",
        "minSum(nums1 = [4, 5, 6], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 3])",
        "minSum(nums1 = [2, 4, 6, 8], nums2 = [5, 5, 5, 5])",
        "minSum(nums1 = [2, 4], nums2 = [1, 2, 3])",
        "minSum(nums1 = [2, 0], nums2 = [6, 2])",
        "minSum(nums1 = [4, 2, 1], nums2 = [2, 0, 1, 1])"
    ],
    "sample_453": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abaa\")",
        "minChanges(s = \"abaac\")",
        "minChanges(s = \"baba\")",
        "minChanges(s = \"abbbc\")",
        "minChanges(s = \"zzzz\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"ABCD\")",
        "minChanges(s = \"eeefff\")",
        "minChanges(s = \"ABAAAC\")"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s=\"aab\", k=2)",
        "beautifulSubstrings(s=\"a\",k=1)",
        "beautifulSubstrings(s = \"ABAB\", k = 2)",
        "beautifulSubstrings(s = \"aaabbbaaa\", k = 3)",
        "beautifulSubstrings(s = \"aaabcb\", k = 2)",
        "beautifulSubstrings(s=\"bb\", k=1)",
        "beautifulSubstrings(s = \"aabbccdd\", k = 3)",
        "beautifulSubstrings(s=\"aiueoaiueo\", k=4)",
        "beautifulSubstrings(s = \"abaxyzabcdefg\", k = 5)"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aba\", k = 2)",
        "beautifulSubstrings(s = \"abac\", k = 3)",
        "beautifulSubstrings(s = \"aabab\", k = 2)",
        "beautifulSubstrings(s = \"abacbabc\", k = 3)",
        "beautifulSubstrings(s = \"abcdee\", k = 2)",
        "beautifulSubstrings(s = \"aabb\", k = 3)",
        "beautifulSubstrings(s = \"abaad\", k = 2)",
        "beautifulSubstrings(s = \"bbbeaaaeiii\", k = 3)",
        "beautifulSubstrings(s = 'eaiuo', k = 4)",
        "beautifulSubstrings(s = \"XDYUXDC\", k = 3)"
    ],
    "sample_369": [
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = 'LyMph')",
        "sortVowels(s = 'myPH')",
        "sortVowels(s = \"YlMpH\")",
        "sortVowels(s = 'PHYLAB')",
        "sortVowels(s = \"yPlM\")",
        "sortVowels(s = \"Door\")"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 2])",
        "minimumSeconds(nums = [1,1,1,1,1,1])",
        "minimumSeconds(nums = [3, 1, 5, 2, 4])",
        "minimumSeconds(nums = [0, 2, 4, 5])",
        "minimumSeconds(nums = [0, 0, 0, 0, 0, 1])",
        "minimumSeconds(nums = [100, 50, 200, 100])",
        "minimumSeconds(nums = [1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [1, 1, 1, 2, 3, 5, 5, 5, 5, 5])",
        "minimumSeconds(nums = [2,3,3,4,2,2,2,1])"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [4, 2, 1, 3])",
        "minimumSum(nums = [2, 3, 1, 4])",
        "minimumSum(nums = [2, 3, 1])",
        "minimumSum(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSum(nums = [2, 1, 3, 5, 6])",
        "minimumSum(nums = [10, 1, 10])",
        "minimumSum(nums = [4, 1, 2, 4, 9])",
        "minimumSum(nums = [10, 5, 20, 50, 30])",
        "minimumSum(nums = [1, 3, 5, 3, 2, 7, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_417": [
        "minOperations(nums = [3, 1, 4, 1, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [2, 3, 1, 5, 4], k = 3)",
        "minOperations(nums = [2, 3, 1, 2, 4, 3], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15], k = 3)",
        "minOperations(nums = [4, 1, 4, 2, 4, 4], k = 4)",
        "minOperations(nums = [2, 7, 5, 2, 3, 8, 6], k = 2)",
        "minOperations(nums = [1, 2, 3, 100, 400, 500], k = 3)",
        "minOperations(nums = [6, 1, 3, 1, 2, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5)"
    ],
    "sample_400": [
        "maxSum(A = [0, 1, 0], m = 1, k = 1)",
        "maxSum(A = [1, 2, 3, 2, 1], m = 2, k = 3)",
        "maxSum(A = [10, 5, 20, 70], m = 2, k = 1)",
        "maxSum(A = [4, 2, 1, 3], m = 2, k = 1)",
        "maxSum(A = [1,2,3,4,5,6,7,8], m = 3, k = 2)",
        "maxSum(A = [3, 4, 2, 1, 3, 4], m = 2, k = 3)",
        "maxSum(A = [-1, -2, 0, 3], m = 2, k = 4)",
        "maxSum(A = [3, 2, 3, 5, 4, 1, 2], m = 3, k = 4)",
        "maxSum(A = [1, 2, 5, 1, 4, 1, 2, 5, 1, 4, 1, 2, 5, 1, 4], m = 2, k = 3)",
        "maxSum(A = [2, 3, 4, 5, 2, 3, 2, 1, 0, 2], m = 3, k = 4)"
    ],
    "sample_293": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"010101\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"010110\")",
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s = \"0101010100\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"01010101010101010101010101010101\")",
        "minimumSteps(s = \"1010011010\")"
    ],
    "sample_430": [
        "maxSubarrays(nums = [16, 17, 4, 3, 5, 2])",
        "maxSubarrays(nums = [10, 5, 2, 7, 1, 8, 7])",
        "maxSubarrays(nums = [3, 2, 1, 1, 1])",
        "maxSubarrays(nums = [2, 1, 3, 0])",
        "maxSubarrays(nums = [2, 6, 4, 3, 5])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9, 3, 7])",
        "maxSubarrays(nums = [1, -2, 3, 4, 5, 6, -7, 8])",
        "maxSubarrays(nums = [2, 3, 5, 7, 2, 3, 5, 7, 2, 3, 5, 7])",
        "maxSubarrays(nums = [1, 3, 5, 6, 10, 4, 4])",
        "maxSubarrays(nums = [20, 25, 20, 40, 25, 40, 24, 10])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1,2], money = 3)",
        "buyChoco(prices = [2,3], money = 5)",
        "buyChoco(prices=[2,5], money=7)",
        "buyChoco(prices = [5, 7, 4], money = 9)",
        "buyChoco(prices = [2, 2, 2, 2, 2, 2], money = 3)",
        "buyChoco(prices = [5, 4, 3, 1], money = 10)",
        "buyChoco(prices = [2, 5, 1, 7], money = 10)"
    ],
    "sample_290": [
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"001100\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"0011\")",
        "minimumSteps(s = \"1000000000\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"123456\")",
        "minimumSteps(s = \"0010100\")",
        "minimumSteps(s = \"1011100\")",
        "minimumSteps(s=\"11010101\")"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [2,3,2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 2])",
        "minLengthAfterRemovals(nums = [0,1,2,2])",
        "minLengthAfterRemovals(nums = [2,3,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 3, 3, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1,2,2,2,2,2,2])"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [3, 1, 4, 2, 5], k = 2)",
        "minOperations(nums = [1,2,3,4,5,6], k = 2)",
        "minOperations(nums = [1, 5, 1, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 3, 3, 4, 5], k = 3)",
        "minOperations(nums = [2, 1, 2, 1, 2, 1, 2], k = 2)",
        "minOperations(nums = [4,1,5,2,6], k = 3)",
        "minOperations(nums = [3, 2, 1, 3, 2], k = 3)",
        "minOperations(nums = [7, 1, 3, 4, 3], k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 2, 3])",
        "isGood(nums = [1, 1, 2, 3])",
        "isGood(nums = [1, 2, 1, 1])",
        "isGood(nums = [1, 2, 1, 1, 1])",
        "isGood(nums = [1, 2, 3, 4, 3])",
        "isGood(nums = [1, 1, 2, 2, 3, 3, 3])",
        "isGood(nums = [2, 3, 3])",
        "isGood(nums = [2, 2, 3, 3, 3])",
        "isGood(nums = [1, 1, 2, 3, 3, 5, 5, 7, 7])",
        "isGood(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3])"
    ],
    "sample_325": [
        "isFascinating(n = 3)",
        "isFascinating(n = 2)",
        "isFascinating(n = 5)",
        "isFascinating(n = 15)",
        "isFascinating(n = 42)",
        "isFascinating(n = 55)",
        "isFascinating(n = 70)",
        "isFascinating(n = 190)",
        "isFascinating(n=500)",
        "isFascinating(n = 7192384569)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10])",
        "isGood(nums = [1, 2, 4, 3])",
        "isGood(nums = [1,2,4,5])",
        "isGood(nums = [2, 2])",
        "isGood(nums = [0, 1, 2])",
        "isGood(nums = [1,3,2,4,5])",
        "isGood(nums = [1, 2, 3, 4, 10, 5, 6, 7, 8, 9])",
        "isGood(nums=[3, 4, 5, 7])",
        "isGood(nums = [1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minimumSeconds(nums = [1, 1, 1, 1])",
        "minimumSeconds(nums = [3, 1, 5, 4, 1])",
        "minimumSeconds(nums = [3, 1, 2, 4])",
        "minimumSeconds(nums = [1, 3, 2, 1, 3, 4, 2])",
        "minimumSeconds(nums = [1, 3, 5, 6, 10, 11, 12, 14])",
        "minimumSeconds(nums = [6, 2, 2, 3, 3, 4, 1, 4, 2])",
        "minimumSeconds(nums = [10, 20, 15, 13, 20, 17])"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [5, 2, 4, 1, 3])",
        "minimumRightShifts(nums = [2, 1, 3, 0])",
        "minimumRightShifts(nums = [1, 1, 3, 3, 2])",
        "minimumRightShifts(nums = [1, 1, 2, 3, 4, 4])",
        "minimumRightShifts(nums = [4, 3, 1, 2, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 2, 2, 3, 4, 5, 5, 5, 6])",
        "minimumRightShifts(nums = [3, 5, 8, 2, 1, 3, 5, 8, 2, 1])",
        "minimumRightShifts(nums = [1, 2, 3])"
    ],
    "sample_362": [
        "isGood(nums = [2, 1, 3])",
        "isGood(nums = [1, 2, 3, 4, 6])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [4, 1, 3])",
        "isGood(nums = [5, 1, 4, 3, 2])",
        "isGood(nums = [1, 2, 3, 4, 6, 7, 8, 9])",
        "isGood(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "isGood(nums = [1, 3, 2, 1])",
        "isGood(nums = [1, 2, 5])",
        "isGood(nums = [10, 4, 7, 1, 2, 5, 3, 9, 6, 8])"
    ],
    "sample_280": [
        "minOperations(nums1 = [2, 4, 6], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [2, 1, 2], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 1, 1], nums2 = [1, 3, 3])",
        "minOperations(nums1 = [1, 1000, 100], nums2 = [1, 1000000, 1000000000])",
        "minOperations(nums1 = [4, 3, 2, 1], nums2 = [2, 3, 1, 4])",
        "minOperations(nums1 = [10, 15, 20], nums2 = [1, 100, 1000])",
        "minOperations(nums1 = [1, 3, 5, 7], nums2 = [3, 5, 7, 8])",
        "minOperations(nums1 = [4, 1, 5], nums2 = [2, 1, 6, 3])",
        "minOperations(nums1 = [1, 2, 3, 1, 3, 5, 6], nums2 = [1, 2, 3, 2, 4, 5, 7])",
        "minOperations(nums1 = [5,3,2,5,1,2,4], nums2 = [5,3,2,1,2,4])"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = '0011', k = 2)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011\", k = 2)",
        "shortestBeautifulSubstring(s = '0011', k = 3)",
        "shortestBeautifulSubstring(s = '100', k = 10)",
        "shortestBeautifulSubstring(s = \"00111\", k = 3)",
        "shortestBeautifulSubstring(s = '00111000', k = 2)",
        "shortestBeautifulSubstring(s = \"100010001\", k = 3)",
        "shortestBeautifulSubstring(s = \"bbbaa\", k = 2)",
        "shortestBeautifulSubstring(s = \"11110111011111111110111111011101110111111111011111101111111110111111111110111111101111111011111111111\", k = 3)"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [2, 4, 6])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [5, 10, 3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [3, 4, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 5, 7, 4])",
        "minGroupsForValidAssignment(nums = [6, 3, 5, 8])",
        "minGroupsForValidAssignment(nums = [15, 7, 10, 3])",
        "minGroupsForValidAssignment(nums = [1,1,1,4,5,5,10])",
        "minGroupsForValidAssignment(nums = [3, 2, 7, 3])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"1111111\")",
        "minimumSteps(s = \"0001\")",
        "minimumSteps(s = \"0001\")",
        "minimumSteps(s = \"00111\")",
        "minimumSteps(s = \"011011\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"001110\")",
        "minimumSteps(s = \"0001110101010111\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 5, 3, 7], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7], target = 12)",
        "lengthOfLongestSubsequence(nums = [7, 2, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2], target = 4)",
        "lengthOfLongestSubsequence(nums = [4,1,2,1,2], target = 4)",
        "lengthOfLongestSubsequence(nums = [3, 5, -4, 8, 10, -4, -7, 11, 1], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 5, 4, 4, 3, 5, 6, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [5, 4, 2, 1, 7], target = 8)"
    ],
    "sample_259": [
        "minimumSum(nums = [2, 4, 6, 2, 5])",
        "minimumSum(nums = [1,3,2,4])",
        "minimumSum(nums = [3, 4, 5, 2, 4, 6])",
        "minimumSum(nums = [3,4,5,10,11,12])",
        "minimumSum(nums = [1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumSum(nums = [1,3,-2,-3])",
        "minimumSum(nums=[3, 2, 3, 100000])",
        "minimumSum(nums = [5, 5, 10, 10, 20, 30])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [10,20,25,40,35])"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 4, 2, 1, 3, 5], m = 3, k = 3)",
        "maxSum(nums=[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], m=3, k=2)",
        "maxSum(nums = [1, 5, 2, 6, 3, 4], m = 3, k = 2)",
        "maxSum(nums = [2, 1, 4, 5, 3, 2, 1], m = 4, k = 3)",
        "maxSum(nums = [1,10,3,8,2,9], m = 3, k = 2)",
        "maxSum(nums = [1, 1, 2, 3, 4, 2, 5], m = 3, k = 2)",
        "maxSum(nums = [10, 3, 1, 3, 100, 50], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 2, 2, 2], m = 3, k = 1)",
        "maxSum(nums = [-3, 5, -4, -2, -4, -1, -1, 0], m = 3, k = 3)"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abcde\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"cba\", s3 = \"acb\")",
        "findMinimumOperations(s1 = \"abac\", s2 = \"abac\", s3 = \"abac\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bbcd\", s3 = \"bbcc\")",
        "findMinimumOperations(s1 = \"bbaa\", s2 = \"abbb\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"aaabbbcc\", s2 = \"aaabbbdd\", s3 = \"aaabbbccdd\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"abd\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"babg\", s2 = \"gabc\", s3 = \"babgabc\")",
        "findMinimumOperations(s1 = \"abcb\", s2 = \"bca\", s3 = \"bbbb\")",
        "findMinimumOperations(s1 = \"cabca\", s2 = \"acbb\", s3 = \"acac\")"
    ],
    "sample_427": [
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 3, 4, 5])",
        "minOperations(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4])",
        "minOperations(nums = [5, 1, 5, 2, 5, 3, 5, 4])",
        "minOperations(nums = [1, 2, 2, 4, 2, 2, 4])",
        "minOperations(nums = [1, 1, 1, 2, 3, 3, 4, 5, 6])",
        "minOperations(nums = [2, 2, 2, 1, 2, 2, 1, 2, 2, 1])",
        "minOperations(nums = [2, 6, 8, 4, 10])",
        "minOperations(nums = [1,2,2,1,1,1,2,2])",
        "minOperations(nums = [1, 1, 1, 3, 1, 2, 2, 4, 1])"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [2, 7, 5])",
        "minimumCoins(prices = [1, 3, 2, 4])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9,10])",
        "minimumCoins(prices = [2, 5, 3, 1, 4])",
        "minimumCoins(prices = [5, 6, 1, 2, 3])",
        "minimumCoins(prices = [4, 3, 2, 2, 2, 3])",
        "minimumCoins(prices = [10, 2, 4, 1, 6, 7, 15])"
    ],
    "sample_377": [
        "minimumSeconds(nums = [2, 4, 3, 6, 3, 2, 4, 5, 6])",
        "minimumSeconds(nums = [2, 5, 1, 2, 1, 2, 5])",
        "minimumSeconds(nums = [5,1,4,3,2])",
        "minimumSeconds(nums = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minimumSeconds(nums = [100, 101, 102, 103, 104, 105, 106])",
        "minimumSeconds(nums = [2, 1, 3, 4, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1,",
        "minimumSeconds(nums=[1, 1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [2, 1, 1, 4, 5, 2, 1, 2, 3, 1, 1, 2, 1, 1, 2, 1])",
        "minimumSeconds(nums = [3, 2, 1, 1, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"
    ],
    "sample_448": [
        "minChanges(s = \"ab\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabcc\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aabca\")",
        "minChanges(s = \"pale\")",
        "minChanges(s = \"a\")",
        "minChanges(s = \"pwke\")"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [5, 3, 8, 1, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 3, 8, 1, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [9, 8, 5, 3, 1], limit = 2)",
        "lexicographicallySmallestArray(nums = [9, 8, 5, 3, 1], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9, 10], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 3, 8, 1, 4, 6, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 4, 8, 5, 3, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 8, 3, 1, 5, 9], limit = 2)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums=[1,2,2])",
        "sumCounts(nums = [1,2,2,3])",
        "sumCounts(nums = [1, 2, 4])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums=[1,2,1,2])",
        "sumCounts(nums=[1, 1, 1, 1, 1, 1])",
        "sumCounts(nums=[0, 0, 0, 0])",
        "sumCounts(nums = [0, 1, 2, 1, 0, 2, 1, 0])",
        "sumCounts(nums=[1, 2, 3, 2, 2, 2, 4, 5, 6, 7])"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [0, 1, -2])",
        "maximumTripletValue(nums = [5, 1, 2, 3])",
        "maximumTripletValue(nums = [5, 6, 3, 4, 2])",
        "maximumTripletValue(nums = [1, 3, 2, 2])",
        "maximumTripletValue(nums = [-1, 1, 2, -2, 3])",
        "maximumTripletValue(nums = [6, 1, 6])",
        "maximumTripletValue(nums = [0, -1, 2, -4, 3, -5])",
        "maximumTripletValue(nums = [4, 3, 7, 1, 6, 2, 5])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"abababab\", k = 4)",
        "beautifulSubstrings(s = \"apple\", k = 2)",
        "beautifulSubstrings(s = \"aaaabaaaaccc\", k = 3)",
        "beautifulSubstrings(s = \"aabbaaxy\", k = 15)",
        "beautifulSubstrings(s = \"smoooth\", k = 2)",
        "beautifulSubstrings(s = \"asdfaf\", k = 10)",
        "beautifulSubstrings(s = \"dehqc\", k = 3)",
        "beautifulSubstrings(s = \"ivitjfivnhjlyvqlyjygg\", k = 5)"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 9)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,3,5], target = 6)",
        "countPairs(nums = [1, 1, 1, 2, 3], target = 4)",
        "countPairs(nums = [1, 1, 1, 1], target = 4)",
        "countPairs(nums = [1, 2, 6, 4, 5, 8], target = 10)",
        "countPairs(nums = [1,1,2,3,4,5,6,7,8,9], target = 10)",
        "countPairs(nums = [5, 5, 3, 2, 3], target = 5)",
        "countPairs(nums = [1, 2, 4, 3, 6, 9], target = 7)",
        "countPairs(nums = [1, 2, 4, 4, 3, 6, 1, 3], target = 8)"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 9, limit = 2)"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [4, 2, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1])",
        "minOperations(nums1 = [2, 1, 4, 7], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [2, 4], nums2 = [5, 1, 3])",
        "minOperations(nums1 = [1, 2, 2, 2], nums2 = [2, 2, 2, 2])",
        "minOperations(nums1 = [2, 1, 1, 1], nums2 = [2, 1, 1, 1])",
        "minOperations(nums1 = [2, 1, 4, 7, 3], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [4, 6, 10], nums2 = [1, 5, 8])",
        "minOperations(nums1 = [6, 2, 4], nums2 = [5, 5, 5])",
        "minOperations(nums1 = [6, 5, 4, 3, 2], nums2 = [2, 4, 3, 5, 6])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minOperations(nums = [3, 3, 3, 3, 3, 3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minOperations(nums = [2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [3, 4, 3, 4, 3])",
        "minOperations(nums = [1, 2, 1, 2, 1, 2, 1])",
        "minOperations(nums = [2, 3, 7, 11, 15])",
        "minOperations(nums = [2, 4, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 26, 27])",
        "minOperations(nums = [2, 3, 2, 1, 1, 2, 1, 3, 4, 1, 2, 1])",
        "minOperations(nums = [12, 9, 24, 36, 3, 14, 21, 12, 45, 24, 12, 1, 5, 3, 25, 3, 7, 12, 24, 5])"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"0111011\", k = 2)",
        "shortestBeautifulSubstring(s = \"00111000\", k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = '1110', k = 2)",
        "shortestBeautifulSubstring(s = \"1001\", k = 1)",
        "shortestBeautifulSubstring(s = \"10011\", k = 2)",
        "shortestBeautifulSubstring(s = '1001110', k = 3)",
        "shortestBeautifulSubstring(s = '0001000010', k = 2)",
        "shortestBeautifulSubstring(s = '00111011100', k = 3)",
        "shortestBeautifulSubstring(s = \"001110001010101110111001\", k = 2)"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [3, 1, 2, 4])",
        "minimumSeconds(nums = [0, 0, 0, 0, 0])",
        "minimumSeconds(nums = [1,3,2,4])",
        "minimumSeconds(nums = [2, 5, 1, 2, 4])",
        "minimumSeconds(nums = [4,3,3])",
        "minimumSeconds(nums = [2,1,1,1,3,1])",
        "minimumSeconds(nums = [5, 3, 2, 2, 5, 2, 2, 3])",
        "minimumSeconds(nums = [3, 5, 5, 5, 6, 6, 8, 9, 9, 11])",
        "minimumSeconds(nums = [2, 3, 3, 5, 3, 3, 2, 3, 2, 3])"
    ],
    "sample_428": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 1, 3, 1, 1, 3])",
        "minOperations(nums = [0, 0, 2, 2, 2])",
        "minOperations(nums = [5, 5, 4, 4, 4, 4, 4])",
        "minOperations(nums = [3, 1, 2, 1, 2, 3, 2])",
        "minOperations(nums = [2, 1, 3, 2, 2, 4, 2])",
        "minOperations(nums = [1, 1, 2, 1, 2, 1, 1, 2, 1, 3])",
        "minOperations(nums = [1, 1, 2, 2, 2, 1, 1, 2, 1, 2])",
        "minOperations(nums = [0, 0, 2, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 4, 5, 3, 2, 1, 2, 2])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [4, 2, 4, 5, 2, 6, 2, 7])",
        "alternatingSubarray(nums = [3, 4, 5, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "alternatingSubarray(nums = [5, 6, 7, 10, 3, 2, 1])",
        "alternatingSubarray(nums = [1,2,3,4,6,5])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 4, 5, 4, 3, 2, 3, 4, 6])",
        "alternatingSubarray(nums = [2, 6, 4, 6, 2, 6, 4, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 0, 1])",
        "minLengthAfterRemovals(nums = [2, 1, 3, 1])",
        "minLengthAfterRemovals(nums = [0, 1, 1, 1, 1, 1, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [2, 1, 3, 4, 3, 2])"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"aaaa\", \"asas\", \"able\", \"ability\", \"actt\", \"actor\", \"access\"])",
        "maximumNumberOfStringPairs(words = [\"aaaa\", \"asas\", \"able\", \"ability\", \"actt\", \"actor\", \"access\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"dd\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs(words = [\"alex\", \"loves\", \"leetcode\", \"banana\", \"banana\"])",
        "maximumNumberOfStringPairs(words = [\"bab\", \"abb\", \"dad\"])",
        "maximumNumberOfStringPairs(words = [\"abcdefgh\",\"jhbgdcfe\",\"fedcba\"])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"c\")",
        "canMakeSubsequence(str1 = \"xy\", str2 = \"yx\")",
        "canMakeSubsequence(str1 = \"aab\", str2 = \"cba\")",
        "canMakeSubsequence(str1 = \"azazaz\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"zabcxz\", str2 = \"abcxz\")",
        "canMakeSubsequence(str1 = \"tub\", str2 = \"ut\")",
        "canMakeSubsequence(str1 = \"dcbg\", str2 = \"abcg\")",
        "canMakeSubsequence(str1 = \"accz\", str2 = \"babaccz\")",
        "canMakeSubsequence(str1 = \"hooo\", str2 = \"oo\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcba\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"bbbba\")",
        "longestSemiRepetitiveSubstring(s = \"aababa\")",
        "longestSemiRepetitiveSubstring(s = \"w\")",
        "longestSemiRepetitiveSubstring(s = \"saw\")"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [8,2,4,7], m = 2, k = 1)",
        "maxSum(nums = [8,1,3,4], m = 3, k = 2)",
        "maxSum(nums = [3,4,5,6,7], m = 3, k = 2)",
        "maxSum(nums = [1,3,2,5,3], m = 2, k = 2)",
        "maxSum(nums=[1,2,3,1,4,5,1,3], m=3, k=3)",
        "maxSum(nums = [10,2,-10,-4,3,3], m = 2, k = 3)",
        "maxSum(nums = [7,2,3,1,6,1,7,4,7], m = 3, k = 3)",
        "maxSum(nums = [1,4,2,1,3,4,5,1,1,5], m = 2, k = 4)",
        "maxSum(nums=[4, 10, 3, 5, 14, 12, 9, 7, 6, 1, 3], m=2, k=5)"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"mouse\"], x = \"a\")",
        "findWordsContaining(words = [\"bana\", \"anana\", \"banana\"], x = \"ana\")",
        "findWordsContaining(words = [\"abc\", \"axc\", \"bxc\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"apple pie\"], x = \"app\")",
        "findWordsContaining(words = [\"car\", \"apple\", \"tire\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"jay\", \"bear\", \"apple\"], x = \"e\")",
        "findWordsContaining(words = [\"llo\", \"hey\", \"elo\"], x = \"e\")",
        "findWordsContaining(words = [\"peer\", \"papal\", \"peace\"], x = \"pe\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [3, 5], moveTo = [4, 6])",
        "relocateMarbles(nums = [2,1,2,4,2,5,2], moveFrom = [0,1,2,0,1,2,0], moveTo = [2,2,2,2,2,2,2])",
        "relocateMarbles(nums = [0,0,2,2], moveFrom = [0,2], moveTo = [2,0])",
        "relocateMarbles(nums = [1, 2, 2], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums=[1,1,2,3], moveFrom=[1,1], moveTo=[3,3])",
        "relocateMarbles(nums = [2, 2, 1, 1, 2], moveFrom = [0, 1], moveTo = [2, 0])",
        "relocateMarbles(nums = [0,1,2,2], moveFrom = [0,0,1,2], moveTo = [2,2,2,1])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9,10], moveFrom = [3,8,8], moveTo = [5,6,7])",
        "relocateMarbles(nums = [3, 2, 2, 4, 1, 1, 4, 2], moveFrom = [0, 1, 3, 3], moveTo = [1, 0, 2])",
        "relocateMarbles(nums=[1,1,1,3,2,4], moveFrom=[0,3,4,0], moveTo=[2,5,3,5])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [2, 4, 6, 2, 5])",
        "maximumTripletValue(nums = [2, 7, 11, 15])",
        "maximumTripletValue(nums = [5, 17, 100, 11])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [2, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [2, 1, -5, -1, 8])",
        "maximumTripletValue(nums = [10, -10, 1, -1, 2, -2, 2, -2, 4, -4, 4])",
        "maximumTripletValue(nums = [-200, 400, 500, 600, 100])"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abaab\")",
        "longestSemiRepetitiveSubstring(s = \"ababababab\")",
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabba\")",
        "longestSemiRepetitiveSubstring(s = \"abcddbca\")",
        "longestSemiRepetitiveSubstring(s = \"aabacbb\")",
        "longestSemiRepetitiveSubstring(s = \"aababa\")",
        "longestSemiRepetitiveSubstring(s = \"acacacacacacac\")",
        "longestSemiRepetitiveSubstring(s = \"aaacaaacaaac\")",
        "longestSemiRepetitiveSubstring(s = \"qkqvqvw\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bb\",\"cc\",\"dd\",\"ee\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"pq\", \"rs\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"baab\", \"baba\", \"abba\", \"xzxb\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abcd\", \"xyzz\", \"aabc\", \"xyzx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abc\", \"cba\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"dog\",\"cat\",\"apple\",\"dog\",\"banana\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"xy\", \"c\", \"xyb\"])"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 3], [2, 4]])",
        "matrixSum(nums = [[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 0, 1]])",
        "matrixSum(nums = [[4, 9, 2], [3, 5, 7], [8, 1, 0]])",
        "matrixSum(nums = [[1, 0, 1], [0, 1, 1], [1, 1, 1]])",
        "matrixSum(nums = [\n    [3, 2, 6],\n    [8, 5, 4],\n    [0, 7, 9]\n])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"hij\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"bbb\", s2 = \"bab\", s3 = \"bba\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"ab\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"bca\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bde\", s3 = \"cfa\")",
        "findMinimumOperations(s1 = \"aabbcc\", s2 = \"aadd\", s3 = \"bbdd\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"peach\", s3 = \"bananana\")"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"x\", s2 = \"y\", s3 = \"z\")",
        "findMinimumOperations(s1 = \"apple\", s2 = \"banana\", s3 = \"carrot\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aca\", s3 = \"aca\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"aab\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"xy\", s2 = \"x\", s3 = \"y\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"aab\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bbbb\", s3 = \"cac\")",
        "findMinimumOperations(s1 = \"ta\", s2 = \"na\", s3 = \"an\")",
        "findMinimumOperations(s1 = \"coding\", s2 = \"practice\", s3 = \"made\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")"
    ],
    "sample_324": [
        "isFascinating(n = 10)",
        "isFascinating(n = 10)",
        "isFascinating(n = 1)",
        "isFascinating(n = 123)",
        "isFascinating(n = 4)",
        "isFascinating(n = 13)",
        "isFascinating(n = 11)",
        "isFascinating(n = 1234567890)",
        "isFascinating(n = 1000)",
        "isFascinating(n = 781)"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1,3,2])",
        "minimumCoins(prices = [2,3,5,10])",
        "minimumCoins(prices=[1,2,2])",
        "minimumCoins(prices = [2,5,1,8])",
        "minimumCoins(prices = [4, 7, 6, 2, 3])",
        "minimumCoins(prices=[1, 3, 4, 5, 8])",
        "minimumCoins(prices = [2, 3, 10, 1, 4])",
        "minimumCoins(prices = [3, 5, 8, 10, 20, 15])",
        "minimumCoins(prices = [2,5,10,1,2,5,10])"
    ],
    "sample_380": [
        "countPairs(nums = [10, 15, 3, 7], target = 17)",
        "countPairs(nums = [1,2,3,4], target = 7)",
        "countPairs(nums = [1,4,2,1,3], target = 4)",
        "countPairs(nums = [1,4,2,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5,6], target = 11)",
        "countPairs(nums=[-1,2,1,-4], target=1)",
        "countPairs(nums = [2,3,4,5,6,7], target = 11)",
        "countPairs(nums = [1,4,2,5,8,3,7,9], target = 12)",
        "countPairs(nums = [2, 6, 5, 1, 3, 4], target = 8)",
        "countPairs(nums = [10,10,10,1,2,3,4,5], target = 15)"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [2, 3, 4])",
        "minGroupsForValidAssignment(nums = [4, 2, 1])",
        "minGroupsForValidAssignment(nums = [4, 6, 12])",
        "minGroupsForValidAssignment(nums = [1,3,2,1,1,3])",
        "minGroupsForValidAssignment(nums = [1000,100,10,1])",
        "minGroupsForValidAssignment(nums = [4,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,4,6,1,1,1])",
        "minGroupsForValidAssignment(nums=[4, 4, 4, 4, 5, 5, 5, 5])",
        "minGroupsForValidAssignment(nums=[1,4,4,5,2,1,3,2])",
        "minGroupsForValidAssignment(nums = [1, 5, 10, 20, 5, 20, 5, 5, 5, 5, 10, 10, 10])"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 1, 2, 3], target = 4)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6, 7, 8], target = 10)",
        "countPairs(nums = [3, 5, 1, 2, 4], target = 10)",
        "countPairs(nums = [1, 2, 5, 6, 7], target = 10)",
        "countPairs(nums = [1, 2, 5, 9], target = 10)",
        "countPairs(nums = [3, 5, 2, 4, 3], target = 9)",
        "countPairs(nums = [1, 3, 5, 6, 7, 9, 10], target = 15)",
        "countPairs(nums = [2, 6, 1, 5, 4], target = 9)"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [2, 5], money = 7)",
        "buyChoco(prices = [2, 1, 3], money = 5)",
        "buyChoco(prices = [1,2,3,4,5], money = 12)",
        "buyChoco(prices = [2,1], money = 4)",
        "buyChoco(prices = [1,1,1], money = 2)",
        "buyChoco(prices = [1,3,2,5], money = 4)",
        "buyChoco(prices = [1, 10, 2], money = 12)",
        "buyChoco(prices = [1, 5, 7, 8], money = 8)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"alex\", \"loves\", \"leetcode\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"baa\", \"bab\", \"xxx\", \"yyy\", \"zzz\"])",
        "maximumNumberOfStringPairs(words = [\"aba\",\"baa\",\"bab\",\"aaab\",\"aaa",
        "maximumNumberOfStringPairs(words = [\"abba\", \"banana\", \"water\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"cdab\",\"ab\",\"cd\",\"efgh\",\"ijkl\",\"kl\"])"
    ],
    "sample_370": [
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = 'leetcode')",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = 'olleH')",
        "sortVowels(s = 'Ealoted')",
        "sortVowels(s = 'edcoatled')",
        "sortVowels(s = \"insect\")",
        "sortVowels(s = \"letters\")",
        "sortVowels(s = 'bAeDce')"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 1, 1, 1])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3])",
        "sumCounts(nums = [1, 3, 2, 4])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [0, 0, 0])",
        "sumCounts(nums = [1, 2, 1, 1, 2])",
        "sumCounts(nums = [1, 3, 2, 4, 1])",
        "sumCounts(nums = [1, 3, 5, 10])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 3, 5])",
        "minimumCoins(prices = [1, 3, 4, 5])",
        "minimumCoins(prices = [3, 1, 2])",
        "minimumCoins(prices = [1, 2, 3, 7])",
        "minimumCoins(prices = [1, 5, 7, 9])",
        "minimumCoins(prices = [100, 100, 100])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 6, m = 3)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 9, m = 3)",
        "differenceOfSums(n = 2, m = 3)",
        "differenceOfSums(n = 4, m = 5)"
    ],
    "sample_307": [
        "countSeniors(details = [\"123-45-6789\", \"34-45-6789\"])",
        "countSeniors(details = [\"22y61m\", \"23y59m\", \"23y60m\", \"23y59m\"])",
        "countSeniors(details = [\"19880911\", \"19980911\", \"20081011\", \"20101011\"])",
        "countSeniors(details = [\"200101011200\", \"200101011500\", \"200101017000\", \"200101016000\"])",
        "countSeniors(details = [\"19951222\", \"19861121\", \"19921001\"])",
        "countSeniors(details = [\"19981231\", \"19890609\", \"19700114\", \"20000102\"])",
        "countSeniors(details = [\"123-33-4444\", \"234-23-2323\", \"444-32-4324\", \"123-35-4321\", \"123-11-1111\"])",
        "countSeniors(details = [\"285701\", \"194701\", \"227021\", \"170401\", \"265701\"])",
        "countSeniors(details = [\"22581977\", \"73481127\", \"98765432\", \"89471236\"])",
        "countSeniors(details = [\"2000051230\", \"1978072718\", \"2013031417\", \"1933021975\", \"2020071202\"])"
    ],
    "sample_323": [
        "isFascinating(n = 3)",
        "isFascinating(n = 1)",
        "isFascinating(n = 5)",
        "isFascinating(n = 5)",
        "isFascinating(n = 9)",
        "isFascinating(n = 9)",
        "isFascinating(n = 8)",
        "isFascinating(n = 8)",
        "isFascinating(n = 8)",
        "isFascinating(n = 13)"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumBeautifulSubstrings(s = \"0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567",
        "minimumBeautifulSubstrings(s = \"0123456789abcde\")",
        "minimumBeautifulSubstrings(s = \"aabbcc\")",
        "minimumBeautifulSubstrings(s = \"ababbc\")",
        "minimumBeautifulSubstrings(s = \"10011101\")",
        "minimumBeautifulSubstrings(s = \"abzxy\")",
        "minimumBeautifulSubstrings(s = \"01101101001\")",
        "minimumBeautifulSubstrings(s = \"babcbacbcacbabccba\")",
        "minimumBeautifulSubstrings(s = \"f7ws2q5gq\")"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n=10, limit=2)"
    ],
    "sample_419": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 4)",
        "minOperations(nums = [1, 3, 4, 2, 5], k = 2)",
        "minOperations(nums = [1,3,5,2,4], k = 3)",
        "minOperations(nums=[3, 1, 2, 4, 3], k=4)",
        "minOperations(nums = [1, 1, 2, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 5, 1, 3, 4], k = 3)",
        "minOperations(nums = [1, 3, 4, 5, 6, 7], k = 5)",
        "minOperations(nums = [5,1,2,3,5,1,2,3], k = 3)",
        "minOperations(nums = [1,10,3,9,4,15,6,7,19,8], k = 5)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 1])",
        "sumCounts(nums = [1, 1, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 2, 4])",
        "sumCounts(nums = [3, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 3, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 2, 4, 4])"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"push\", \"3\", \"pop\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"5\",\"2\",\"C\",\"D\",\"+\"])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"start\", \"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"3\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = ['a', '1', 'prev', '1', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'prev', 'prev', '4', '1'])"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "minOperations(nums = [1, 3, 1, 4, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 7)",
        "minOperations(nums = [2, 1, 3, 2], k = 3)",
        "minOperations(nums = [1, 3, 5, 7], k = 7)",
        "minOperations(nums = [4, 3, 1, 2], k = 1)",
        "minOperations(nums = [1, 2, 3, 3, 2, 2], k = 3)",
        "minOperations(nums = [1, 3, 4, 2, 5, 1, 6, 7], k = 3)"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"abaaba\")",
        "longestSemiRepetitiveSubstring(s = \"abbab\")",
        "longestSemiRepetitiveSubstring(s = \"aab\")",
        "longestSemiRepetitiveSubstring(s = \"ba\")",
        "longestSemiRepetitiveSubstring(s = \"aaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbababa\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdefabcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcabd\")"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [2, 1, 2, 4])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3, 3, 3, 3])",
        "sumCounts(nums = [2, 1, 3, 2, 3])",
        "sumCounts(nums = [2, 5, 10, 4, 2, 5, 10, 11, 4, 2, 5])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '0110111', k = 2)",
        "shortestBeautifulSubstring(s = '11101', k = 2)",
        "shortestBeautifulSubstring(s = '011011', k = 2)",
        "shortestBeautifulSubstring(s = '100101', k = 2)",
        "shortestBeautifulSubstring(s = '101010', k = 2)",
        "shortestBeautifulSubstring(s = '10011101111', k = 3)",
        "shortestBeautifulSubstring(s = '111011101110', k = 2)",
        "shortestBeautifulSubstring(s = \"0010111010011100011\", k = 3)",
        "shortestBeautifulSubstring(s = '100100110011011000010100010', k = 3)",
        "shortestBeautifulSubstring(s = '111100001000011001000110001000111100000110010001000111011000001001001001000110100001', k = 3)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"01234\")",
        "minimumBeautifulSubstrings(s = \"aab\")",
        "minimumBeautifulSubstrings(s = \"aabbb\")",
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(s = \"bbbbbbbbbb\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1234567\")",
        "minimumBeautifulSubstrings(s = \"aaabbbcccddddeeefff\")",
        "minimumBeautifulSubstrings(s = \"abefdl\")",
        "minimumBeautifulSubstrings(s = \"aaabbbb\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 2, y = 5, z = 3)",
        "longestString(x = 5, y = 6, z = 7)",
        "longestString(x = 5, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 1)",
        "longestString(x = 4, y = 3, z = 5)",
        "longestString(x = 1, y = 2, z = 4)",
        "longestString(x = 5, y = 3, z = 6)",
        "longestString(x = 10, y = 2, z = 3)"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0], [0, 1]])",
        "findChampion(grid = [[1, -1], [-1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, -1, 1], [0, -1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0]])",
        "findChampion(grid = [[-1, 0, -1], [-2, 0, 3], [2, 0, -2]])",
        "findChampion(grid = [\n[2, 0, 1],\n[2, 1, 0],\n[1, 0, 0]\n])",
        "findChampion(grid = [[0, 1, 1, 1, 1], [0, 0, 0, 0, 1], [0, 0, 1, 1, 0], [0, 0, 1, 1, 0], [0, 0, 1, 1, 1]])"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 3)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"leetcode\", k = 2)",
        "beautifulSubstrings(s = \"abcd\", k = 2)",
        "beautifulSubstrings(s = \"abcdef\", k = 2)",
        "beautifulSubstrings(s = \"Ba\", k = 2)",
        "beautifulSubstrings(s = \"bbcbaba\", k = 4)",
        "beautifulSubstrings(s = \"a\", k = 2)",
        "beautifulSubstrings(s = \"aaa\", k = 3)"
    ],
    "sample_304": [
        "countSeniors(details = [\"123456789012\", \"123456789013\"])",
        "countSeniors(details = [\"1990-12-01\", \"1991-12-01\", \"1992-12-01\"])",
        "countSeniors(details = [\"911122334455\", \"911122334466\"])",
        "countSeniors(details = [\"ABCD-1234-5678-9012\", \"ABCD-2345-6789-0123\", \"ABCD-2345-6789-0123\", \"ABCD-6789-0123-4567\"])",
        "countSeniors(details = [\"19450115001\", \"19600123001\"])",
        "countSeniors(details = [\"101001001001001010\", \"112001001001001010\", \"102001001001001010\"])",
        "countSeniors(details = [\"asd 12 34\", \"pqr 60 56\", \"xyz 10 50\"])",
        "countSeniors(details = [\"D114946891189\", \"D114946891190\", \"D114946891191\"])",
        "countSeniors(details = [\"55 17\", \"40 5\", \"32 17\", \"27 10\"])",
        "countSeniors(details = [\"2018-10-25 17:23:59\", \"2019-01-28 13:28:59\", \"2019-05-15 17:54:59\"])"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 1])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [5, 6, 7])",
        "maximumTripletValue(nums = [-2, 0, 1, -5, 2])",
        "maximumTripletValue(nums = [1, 4, 2, 10, -5, 20])",
        "maximumTripletValue(nums = [2, 7, 3, 9, 4, 5, 1])",
        "maximumTripletValue(nums = [5, 6, 7, 8, 9, 10])",
        "maximumTripletValue(nums = [1, 2, 5, 1, 3, 4, 0, 8])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"aabab\")",
        "minimumBeautifulSubstrings(s = \"bbbaacdafe\")",
        "minimumBeautifulSubstrings(s = \"bbbababa\")",
        "minimumBeautifulSubstrings(s = \"010110000\")",
        "minimumBeautifulSubstrings(s = \"zzzzzyyyyxxx\")",
        "minimumBeautifulSubstrings(s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")",
        "minimumBeautifulSubstrings(s = \"2711041\")",
        "minimumBeautifulSubstrings(s = \"abd\")",
        "minimumBeautifulSubstrings(s = \"hb\")",
        "minimumBeautifulSubstrings(s = \"4567874574668867746567668\")"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [4, 2, 1, 3])",
        "maxSubarrays(nums = [2, 3, 5, 4, 6])",
        "maxSubarrays(nums = [3, -2, 5, 2, -4])",
        "maxSubarrays(nums = [0, 1, 2, 1, 1, 2, 2, 0])",
        "maxSubarrays(nums = [3, 1, -5, 4, -2, 0])",
        "maxSubarrays(nums = [1, 2, 4, 3, 0, 3, 3, 1, 2, 4, 3])",
        "maxSubarrays(nums = [1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 1, 1, -1, 1, 1, 0, 0, 0, -1, 1, -1])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "minOperations(a = [2, 3, 1], b = [3, 1, 2])",
        "minOperations(a = [1, 1, 1], b = [0, 0, 0])",
        "minOperations(a = [2, 4, 1], b = [1, 3, 2])",
        "minOperations(a = [2, 3], b = [4, 1])",
        "minOperations(a = [1, 5, 8], b = [2, 3, 4])",
        "minOperations(a = [3, 2], b = [2, 3])",
        "minOperations(a = [1, 2, 3, 5, 5], b = [1, 2, 3, 4, 4])",
        "minOperations(a = [1, 3, 5, 7], b = [1, 4, 7])",
        "minOperations(a = [4, 1], b = [5, 3, 2])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"flower\",\"flow\",\"flight\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"a\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"aba\", \"ba\", \"ab\"])",
        "minimizeConcatenatedLength(words = [\"c\", \"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"aba\",\"bbb\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"pear\", \"apple\"])"
    ],
    "sample_371": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"PYTHON\")",
        "sortVowels(s = \"Lamp\")",
        "sortVowels(s = 'HYMPL')",
        "sortVowels(s = 'MyPHP')",
        "sortVowels(s = \"PlYmH\")",
        "sortVowels(s = \"Hill\")",
        "sortVowels(s = \"YOUNG\")",
        "sortVowels(s = 'AeioYLMPH')"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1, 1, 2, 3, 3])",
        "sumCounts(nums = [1, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 3, 4])",
        "sumCounts(nums = [2, 1, 4, 1, 3])",
        "sumCounts(nums = [2, 1, 3, 1, 5])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5])",
        "sumCounts(nums = [4, 2, 5, 1, 3, 5, 6, 3])"
    ],
    "sample_256": [
        "minimumSum(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "minimumSum(nums = [-1, 4, 2, 1, 3])",
        "minimumSum(nums = [3, 2, 4])",
        "minimumSum(nums = [1, 1000, 100])",
        "minimumSum(nums = [10, 5, 1, 5])",
        "minimumSum(nums = [9, 10, 11, 12, 13, 14, 15, 16, 17, 18])",
        "minimumSum(nums = [2, 3, 4, 2, 3, 1, 4, 2])",
        "minimumSum(nums = [4, 2, 1, 7, 5, 9, 2, 5])",
        "minimumSum(nums = [-1, 0, 3, 0, 10, -5, 2, 4, -1])",
        "minimumSum(nums = [4, -1, 3, 5, 1, 7, 5, 2, 1, 3])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0],\n                            [1, 1, 1, 1],\n                            [0, 0, 0, 0],\n                            [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[1, 2, 0], [0, 2, 1], [1, 0, 2]])",
        "findChampion(grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[1,1,1,1,1]])",
        "findChampion(grid = [[0, 0, 1, 1], [0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1, 1], [0, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, -1, 0], [0, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[1, 0, 1, 1, 0], [0, 1, 0, 1, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, -1], [1, 1], [0, 0], [1, 1]])"
    ],
    "sample_372": [
        "sortVowels(s = 'Eloquent')",
        "sortVowels(s = \"Loetcede\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"the\")",
        "sortVowels(s = \"leetcodee\")",
        "sortVowels(s = \"leaotedc\")",
        "sortVowels(s = \"stop\")",
        "sortVowels(s = \"LEETCODE\")",
        "sortVowels(s = \"Let's eat cake!\")",
        "sortVowels(s = \"Invariance\")"
    ],
    "sample_292": [
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"111010\")",
        "minimumSteps(s = \"010110\")",
        "minimumSteps(s = \"11100\")",
        "minimumSteps(s = '11101')",
        "minimumSteps(s = \"111100011\")",
        "minimumSteps(s = '011010')",
        "minimumSteps(s = \"11111000\")"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [4, 1, 3, 2])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 9])",
        "minimumRightShifts(nums = [1, 2, 1])",
        "minimumRightShifts(nums = [2, 1, 4, 3])",
        "minimumRightShifts(nums = [5, 3, 9, 7, 2])",
        "minimumRightShifts(nums = [9, 4, 3, 5, 1, 7, 10, 12])",
        "minimumRightShifts(nums = [5, 2, 2, 6, 4])",
        "minimumRightShifts(nums = [9, 7, 1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [6, 1, 1, 4, 5, 1, 1])",
        "minimumRightShifts(nums = [6, 8, 2, 3, 9, 1, 5, 7, 4])"
    ],
    "sample_425": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 2])",
        "minOperations(nums = [0, 0, 0])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6])",
        "minOperations(nums = [2,3,5])",
        "minOperations(nums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5])",
        "minOperations(nums = [3, 6, 9, 12, 15, 16, 21, 30])",
        "minOperations(nums = [0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,",
        "minOperations(nums = [2, 2, 3, 4, 6, 6, 9, 10, 12])"
    ],
    "sample_367": [
        "sortVowels(s = \"MYPH\")",
        "sortVowels(s = \"LymPH\")",
        "sortVowels(s = 'blYmpH')",
        "sortVowels(s = \"Bye\")",
        "sortVowels(s = 'HElYp')",
        "sortVowels(s = \"my name is hARSh\")",
        "sortVowels(s = \"baBANana\")",
        "sortVowels(s = 'Hellow Python')",
        "sortVowels(s = \"MayoRuna\")",
        "sortVowels(s = \"The quick brown fox jumps over the lazy dog\")"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0], [0, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 0, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 1, 0],\n  [0, 0, 0, 0]\n])",
        "findChampion(grid = [\n  [1, 0, 0, 0],\n  [1, 1, 1, 1],\n  [1, 1, 1, 1],\n  [1, 1, 1, 1],\n])",
        "findChampion(grid = [[1, 1, 1],\n                           [1, 1, 1],\n                           [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0],\n                            [1, 1, 1, 0],\n                            [1, 1, 1, 1],\n                            [1, 0, 0, 0]])",
        "findChampion(grid = [[2, 3, 4], [1, 3, 4], [1, 2, 4]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1], nums2 = [0])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [0])",
        "minSum(nums1 = [2, 3], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1])",
        "minSum(nums1 = [2, 7, 9], nums2 = [4, 6, 10])",
        "minSum(nums1 = [1, 0, 0, 1], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [2, 4, 8], nums2 = [5, 10, 9])",
        "minSum(nums1 = [1, 3, 2, 1], nums2 = [1, 3, 2, 1, 1])",
        "minSum(nums1 = [1,1,2,4,4], nums2 = [1,3,4,5,5])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations(nums = [1, 5, 3, 4, 2], k = 3)",
        "minOperations(nums = [2, 1, 3, 5, 4], k = 2)",
        "minOperations(nums = [1, 1, 1, 1], k = 2)",
        "minOperations(nums = [2, 4, 5, 6], k = 3)",
        "minOperations(nums = [1,2,3,3,4,5,6], k = 4)",
        "minOperations(nums = [1, 2, 3, 3, 5, 4], k = 4)",
        "minOperations(nums = [5, 6, 1, 4, 3, 2, 7, 8], k = 3)",
        "minOperations(nums = [1, 3, 4, 5, 3, 4, 5, 1, 2], k = 2)",
        "minOperations(nums = [4, 8, 3, 7, 11, 15, 6, 10, 5], k = 2)"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 2, 3], moveTo = [2, 3, 1])",
        "relocateMarbles(nums = [1, 2, 4], moveFrom = [1, 2], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 3, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [3, 5], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 1, 1, 2], moveFrom = [0, 1], moveTo = [2, 2])",
        "relocateMarbles(nums = [1, 1, 2, 2], moveFrom = [0, 2], moveTo = [0, 2])",
        "relocateMarbles(nums = [1, 1, 2, 2], moveFrom = [1, 2, 1, 2], moveTo = [1, 2, 2, 2])",
        "relocateMarbles(nums = [0, 1, 2, 3, 4, 5], moveFrom = [2, 4, 5], moveTo = [2, 4, 5])",
        "relocateMarbles(nums = [1, 3, 3, 5], moveFrom = [1, 3, 5], moveTo = [2, 4, 0])",
        "relocateMarbles(nums = [2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1], moveFrom = [1, 4, 6, 8, 10, 11, 13, 15, 17, 2, 3, 5, 7, 9], moveTo = [2, 3, 5, 7, 9, 1, 2, 4, 6, 8, 10, 11, 13, 15])"
    ],
    "sample_402": [
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 3, k = 2)",
        "maxSum(nums = [1, 1, 1, 2, 2, 2], m = 3, k = 2)",
        "maxSum(nums = [10, 11, 12], m = 2, k = 1)",
        "maxSum(nums = [1,2,2,3,3], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 4, 8, 7], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 2, 1, 2, 2, 1, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2], m = 4, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 1, 2, 1, 1, 1, 3, 2, 1], m = 3, k = 1)",
        "maxSum(nums = [7, 7, 3, 10, 7, 7, 1, 7, 6], m = 3, k = 2)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"ace\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"zaz\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"ade\")",
        "canMakeSubsequence(s1 = \"abcd\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"razz\", s2 = \"azz\")",
        "canMakeSubsequence(s1=\"azza\",s2=\"zaz\")",
        "canMakeSubsequence(s1=\"xzxy\", s2=\"xyz\")",
        "canMakeSubsequence(s1 = \"babynet\", s2 = \"baby\")",
        "canMakeSubsequence(s1 = \"zbcdz\", s2 = \"abaa\")"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [0, 1], nums2 = [0, 0])",
        "minSum(nums1 = [0, 1, 2, 3, 4], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 0], nums2 = [1])",
        "minSum(nums1 = [1, 0], nums2 = [1])",
        "minSum(nums1 = [0, 1, 2, 3, 4], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [0,0], nums2 = [1, 1])",
        "minSum(nums1 = [0, 1, 0, 2, 0], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [0,0,0,0,0,0,0,0,0,0,0], nums2 = [])",
        "minSum(nums1 = [1, 3, 0], nums2 = [2, 0, 0, 4])"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"a\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['next', 'next', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\", \"1\", \"next\"])",
        "lastVisitedIntegers(words = [\"a\", \"prev\", \"next\", \"next\", \"prev\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"hello\", \"world\", \"from\", \"the\", \"java\", \"world\", \"prev\", \"great\", \"see\", \"you\", \"next\", \"prev\", \"last\"])",
        "lastVisitedIntegers(words = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'prev', 'eleven', 'prev', 'prev', 'twelve', 'prev', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty', 'prev', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'prev', 'thirtyone', 'thirtytwo', 'thirtythree', 'thirtyfour', 'thirtyfive', 'thirtysix', 'thirtyseven', 'thirtyeight', 'thirtynine', 'forty', 'prev', 'fortyone', 'fortytwo', 'fortythree', 'fortyfour', 'fortyfive', 'fortysix', 'fortyseven', 'fortyeight', 'fortynine', 'fifty', 'prev', 'fiftyone', 'fiftytwo', 'fiftythree', 'fiftyfour', 'fiftyfive', 'fiftysix', 'fiftyseven', 'fiftyeight', 'fiftynine', 'sixty', 'prev', 'sixtyone', 'sixtytwo', 'sixtythree', 'sixtyfour', 'sixtyfive', 'sixtysix', 'sixtyeight', 'sixtynine', 'seventy', 'prev', 'seventyone', 'seventytwo', 'seventythree', 'seventyfour', 'seventyfive', 'seventysix', 'seventyseven', 'seventyeight', 'seventynine', 'eighty', 'prev', 'eightyone', 'eightytwo', 'eightythree', 'eightyfour', 'eightyfive', 'eightysix', 'eightyseven', 'eightyeight', 'eightynine', 'ninety', 'prev', 'ninetyone', 'ninetytwo', 'ninetythree', 'ninetyfour', 'ninetyfive', 'ninetysix', 'ninetyseven', 'ninetyeight', 'ninetynine'])"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [2, 3, 1])",
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1, 4, 2])",
        "isGood(nums = [0, 1, 2, 4, 5, 7])"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,3,4,3,2,1])",
        "minOperations(nums = [1,2,2,3,3,3])",
        "minOperations(nums = [1,2,2,2,2,3])",
        "minOperations(nums = [2, 3, 3, 2, 2])",
        "minOperations(nums = [1,2,3,4,5,5,7,8,9])",
        "minOperations(nums = [4,2,4,2,4,4,2,4,4])",
        "minOperations(nums = [2,1,2,2,3,3,3])",
        "minOperations(nums=[2,3,1,2,4,3,1])",
        "minOperations(nums = [2, 2, 2, 1, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,",
        "minOperations(nums = [1,2,3,1,2,3,2,2,2,2,3,3,3,3])"
    ],
    "sample_451": [
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabccbb\")",
        "minChanges(s = \"abbc\")",
        "minChanges(s = \"BAA\")",
        "minChanges(s = \"aabccbba\")",
        "minChanges(s = \"xxxxxyyyyzzzzz\")",
        "minChanges(s = \"abddddca\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 7, limit = 1)",
        "distributeCandies(n = 100, limit = 10)",
        "distributeCandies(n = 16, limit = 8)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [1,1,1,1,1,1], nums2 = [1,1,1,1,1,1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 5, 7])",
        "minSum(nums1 = [1, 5], nums2 = [2, 2])",
        "minSum(nums1 = [1,2,3,4,5,6], nums2 = [3,6])",
        "minSum(nums1 = [1,2], nums2 = [5,2,3])",
        "minSum(nums1 = [4, 3, 2, 1, 0, 0], nums2 = [0, 0, 0, 0, 1, 2])",
        "minSum(nums1 = [0,0,2], nums2 = [2, 1, 0, 0])",
        "minSum(nums1 = [4,2,0,0,10], nums2 = [1,1,1,2,2,2])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 3, 2, 3, 1])",
        "minimumRightShifts(nums = [3, 1, 4, 2])",
        "minimumRightShifts(nums = [2, 1])",
        "minimumRightShifts(nums = [1, 1, 2, 2])",
        "minimumRightShifts(nums = [2, 4, 6])",
        "minimumRightShifts(nums = [3, 5, 2, 4, 5])"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4,5,6,7,8], t = 10)",
        "countPairs(nums = [3,1,2,4,3], t = 6)",
        "countPairs(nums = [2, 3, 4], t = 6)",
        "countPairs(nums=[1,2,3,4,5,6,7],t=5)",
        "countPairs(nums = [2, 1, 2, 1], t = 5)",
        "countPairs(nums = [4, 2, 1, 1, 1, 1], t = 4)",
        "countPairs(nums = [2,4,3,5,1,6], t = 7)",
        "countPairs(nums=[1,3,4,2,5,6], t=15)",
        "countPairs(nums = [2,4,1,6,8,7,10], t = 15)",
        "countPairs(nums = [5, 10, 15, 10, 15, 3, 20, 20], t = 35)"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p1\", \"v2\", \"p1\"])",
        "lastVisitedIntegers(words = [\"p1\", \"v2\", \"p1\"])",
        "lastVisitedIntegers(words = [\"p1\", \"v2\", \"v1\"])",
        "lastVisitedIntegers(words = [\"p\", \"1\", \"2\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\", \"push\"])",
        "lastVisitedIntegers(words = [\"-1\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"push\", \"1\", \"push\", \"2\", \"push\", \"3\", \"pop\", \"1\", \"pop\", \"2\", \"pop\", \"3\"])",
        "lastVisitedIntegers(words = [\"panama\", \"p\", \"a\", \"n\", \"a\", \"p\"])",
        "lastVisitedIntegers(words = [\"push\", \"4\", \"4\", \"3\", \"1\", \"1\", \"4\", \"3\", \"2\", \"4\", \"4\"])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgd\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"baa\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"axyz\")",
        "canMakeSubsequence(str1 = \"axyz\", str2 = \"axbc\")",
        "canMakeSubsequence(str1 = \"abcdefgh\", str2 = \"afe\")",
        "canMakeSubsequence(str1 = \"g\", str2 = \"acdb\")",
        "canMakeSubsequence(str1 = \"zqmp\", str2 = \"mzq\")",
        "canMakeSubsequence(str1 = 'azczd', str2 = 'aczb')"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [1, 2], nums2 = [3, 4])",
        "minSum(nums1 = [2, 4, 6, 8, 10], nums2 = [2, 4, 6, 8, 10])",
        "minSum(nums1 = [3, 1, 2, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 0, 2, 0], nums2 = [1, 2, 0])",
        "minSum(nums1 = [1, 2, 4, 8], nums2 = [1, 2, 4, 8])",
        "minSum(nums1 = [2, 4, 1, 2], nums2 = [5, 10, 11, 2])",
        "minSum(nums1 = [4, 5, 0, 0, 0], nums2 = [3, 2, 1, 0, 0])",
        "minSum(nums1 = [10, 2, 0, 10], nums2 = [10, 2, 0, 10])",
        "minSum(nums1 = [10, 10, 2, 2], nums2 = [2, 2, 5, 5])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 2], [1, 2], [1, 2]], k = 3)",
        "countPairs(coordinates = [[1, 1], [2, 2], [2, 1]], k = 3)",
        "countPairs(coordinates = [[1, 2], [2, 1], [3, 1], [3, 2]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 3], [3, 4]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 3], [2, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [3, 2], [5, 1], [4, 1], [2, 2], [1, 2], [3, 3], [5, 2], [4, 2]], k = 2)",
        "countPairs(coordinates = [[0, 1], [2, 3], [0, 3], [2, 1], [3, 0], [1, 2]], k = 2)",
        "countPairs(coordinates = [[0, 1], [1, 0], [1, 1], [2, 2], [3, 2], [4, 3]], k = 2)",
        "countPairs(coordinates = [[2, 3], [5, 3], [5, 3], [2, 3], [1, 2], [2, 1]], k = 3)",
        "countPairs(coordinates = [[0,0], [2,2], [2,4], [0,4], [0,2], [2,6], [4,2], [4,4], [4,6], [6,2], [6,4], [6,6]], k = 2)"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"cdab\",\"adcb\",\"cbad\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\",\"cdab\",\"cbad\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"bb\",\"cc\",\"aa\",\"bb\",\"cc\",\"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cd\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"baba\", \"bbaa\", \"abaa\", \"baaa\", \"aaab\", \"aaab\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"dog\", \"cat\", \"catdog\", \"aaaa\"])",
        "maximumNumberOfStringPairs(words = [\"egg\", \"a\", \"b\", \"c\", \"d\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dd\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"leetcode\", \"win\", \"e\", \"est\"])"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [-2, -3, -4, -1])",
        "maxStrength(nums = [-2, -1, 1, 2, 3])",
        "maxStrength(nums = [-3, 2, -2, 5, 6])",
        "maxStrength(nums = [-10, 5, 0, 10])",
        "maxStrength(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
        "maxStrength(nums = [-2, 4, -1, 0])",
        "maxStrength(nums = [1, 2, 4, 5, 7])",
        "maxStrength(nums = [-7,-3,1,5])",
        "maxStrength(nums = [1, 2, -3, 5, 7, -11])"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 3, 4, 5])",
        "minimumCoins(prices = [1, 7, 5])",
        "minimumCoins(prices = [2, 5, 3, 6, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1, 5, 10, 21, 23])",
        "minimumCoins(prices = [1, 2, 1, 2, 1])",
        "minimumCoins(prices = [1, 3, 1, 5, 2])",
        "minimumCoins(prices = [5, 7, 6, 4, 1, 2])",
        "minimumCoins(prices = [1, 5, 11, 15, 23, 29, 35, 37, 40, 43, 46, 48, 50])"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [4, 4, 4, 3, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 2, 4, 4])",
        "minLengthAfterRemovals(nums = [0,1,2,2,3,4,2,5,2,2,2,6,7,8,9,10,11,12,13,14,15,16])"
    ],
    "sample_318": [
        "buyChoco(prices = [3, 1, 2], money = 5)",
        "buyChoco(prices = [1, 1, 2], money = 2)",
        "buyChoco(prices = [1, 3, 2, 4, 5], money = 9)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], money = 25)",
        "buyChoco(prices = [2, 4, 3, 1], money = 8)",
        "buyChoco(prices = [10, 6, 7, 6, 7], money = 50)",
        "buyChoco(prices = [5, 2, 6], money = 13)",
        "buyChoco(prices = [100, 10, 50, 50], money = 50)",
        "buyChoco(prices = [0, 10, 10, 10, 20], money = 20)",
        "buyChoco(prices = [1, 2, 5, 10, 20, 100], money = 120)"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"1\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"1\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"5\", \"2\", \"C\", \"D\", \"4\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"4\",\"3\",\"next\",\"next\",\"next\",\"2\"])"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [2, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 1, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 4, 3])",
        "sumCounts(nums = [3, 1, 2, 1])",
        "sumCounts(nums = [1,2,2,3,3,4,4])"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [8, 9], moveTo = [6, 5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [7, 4, 1], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [6, 8, 9, 5], moveFrom = [8, 5], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [8, 1, 3], moveTo = [9, 2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6, 8], moveTo = [0, 1, 2, 3])",
        "relocateMarbles(nums = [5, 4, 3, 2, 1], moveFrom = [1, 2, 3], moveTo = [1, 2, 3])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [6, 8, 9], moveTo = [3, 5, 5])",
        "relocateMarbles(nums = [5, 4, 3, 2, 1], moveFrom = [0, 3, 1], moveTo = [1, 2, 0])",
        "relocateMarbles(nums = [5, 3, 4, 1, 11, 2], moveFrom = [3, 5], moveTo = [1, 5])",
        "relocateMarbles(nums = [5, 3, 6, 1, 2, 4, 7, 9], moveFrom = [0, 1, 6], moveTo = [1, 3, 5])"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"ace\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"bc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"cad\")",
        "canMakeSubsequence(str1 = \"abcdefg\", str2 = \"cdg\")",
        "canMakeSubsequence(str1 = \"wxyz\", str2 = \"zzyx\")",
        "canMakeSubsequence(str1 = \"shrubbery\", str2 = \"chubby\")",
        "canMakeSubsequence(str1 = \"abaxyz\", str2 = \"bbbac\")"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"cat\", \"banana\", \"apple\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"cat\", \"bat\", \"rat\"], x = \"at\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"a\")",
        "findWordsContaining(words = [\"Hello\", \"word\", \"hello\"], x = \"l\")",
        "findWordsContaining(words = [\"acb\", \"bac\", \"bc\", \"cab\"], x = \"a\")",
        "findWordsContaining(words = [\"island\", \"forest\", \"fishing\"], x = \"is\")",
        "findWordsContaining(words = [\"zoo\", \"abc\", \"hacker\"], x = \"h\")",
        "findWordsContaining(words = [\"calm\", \"cool\", \"arm\"], x = \"la\")",
        "findWordsContaining(words = [\"add\", \"abc\", \"ddd\", \"ababab\"], x = \"a\")"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])",
        "matrixSum(nums = [[0, 0, 0], [0, 0, 1], [0, 1, 0]])",
        "matrixSum(nums = [[1, 3, 1], [4, 0, 2], [1, 3, 4]])",
        "matrixSum(nums = [[1, 2, 1, 1], [1, 2, 1, 1], [1, 2, 1, 1]])",
        "matrixSum(nums = [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5]\n])",
        "matrixSum(nums = [[1,1,1],[0,5,0],[2,3,4]])",
        "matrixSum(nums = [\n    [1, 3, 1],\n    [4, 2, 1],\n    [3, 5, 9]\n])",
        "matrixSum(nums = [[2, 3, 4, 5],\n                         [1, 4, 3, 2],\n                         [1, 2, 2, 2]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 3], money = 4)",
        "buyChoco(a = [1, 2], money = 4)",
        "buyChoco(a = [1, 1], money = 2)",
        "buyChoco(a = [2, 4, 6], money = 10)",
        "buyChoco(a = [3, 1, 5], money = 8)",
        "buyChoco(a = [1, 2, 4, 5], money = 6)",
        "buyChoco(a = [1, 2, 4, 8], money = 11)",
        "buyChoco(a = [1, 1, 5], money = 4)",
        "buyChoco(a = [2,4,6], money = 12)",
        "buyChoco(a = [10, 5, 7, 2, 12], money = 18)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [2, 4, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 1])",
        "minGroupsForValidAssignment(nums = [2, 4, 6, 8, 10])",
        "minGroupsForValidAssignment(nums = [5, 10, 15])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 1, 2, 1])",
        "minGroupsForValidAssignment(nums = [2, 5, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 4, 4, 5, 5])",
        "minGroupsForValidAssignment(nums = [1, 4, 5, 6, 7])"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [2, 1, 3, 1, 2])",
        "minimumRightShifts(nums = [3, 5, 1, 2, 3])",
        "minimumRightShifts(nums = [3, 2, 4, 1, 5])",
        "minimumRightShifts(nums = [1, 3, 5, 6, 2, 4])",
        "minimumRightShifts(nums = [1, 3, 2, 2, 2, 2])",
        "minimumRightShifts(nums = [2, 1, 1, 2, 1, 1, 2])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxStrength(nums = [2, 3, 4, 5, 6])",
        "maxStrength(nums = [1, 2, 4, 8, 16])",
        "maxStrength(nums = [2, 3, 5, 7])",
        "maxStrength(nums = [2, 5, 3, 1])",
        "maxStrength(nums = [3, 1, 10, 2])",
        "maxStrength(nums = [2, 2, 4, 6, 2, 4])",
        "maxStrength(nums = [2, 4, 6, 5, 2, 4, 6, 5])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n=5, limit=3)",
        "distributeCandies(n = 9, limit = 2)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n = 20, limit = 5)",
        "distributeCandies(n = 15, limit = 3)"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 3])",
        "minLengthAfterRemovals(nums = [2,2,3,3,4,5])",
        "minLengthAfterRemovals(nums = [2, 3, 4, 5, 3, 2, 5, 5, 5, 5, 5])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"lo\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"orange\"], x = \"a\")",
        "findWordsContaining(words = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"fguij\", \"axcye\", \"wvxyz\"], x = \"o\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"zebra\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"kiwi\"], x = \"an\")",
        "findWordsContaining(words = [\"cat\", \"banana\", \"apple\", \"hello\", \"world\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hello world\"], x = \"lo\")",
        "findWordsContaining(words = [\"foo\", \"bar\", \"baz\"], x = \"ab\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"beer\"], x = \"ea\")",
        "findWordsContaining(words = [\"abc\",\"kode\",\"bat\"], x = \"o\")"
    ],
    "sample_278": [
        "findChampion(grid = [[0, 1, 1], [1, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 0], [0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 0, 0, 1], [0, 0, 0, 0], [1, 0, 1, 1]])",
        "findChampion(grid = [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 1, 1, 0]])",
        "findChampion(grid = [[1, 0, 1, 0, 1], [1, 1, 1, 0, 0], [1, 0, 1, 1, 1], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0]])"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1,0,1,0,1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [3, 2, 5])",
        "maxSubarrays(nums = [2, 3, 1, 5])",
        "maxSubarrays(nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"abab\", k = 2)",
        "beautifulSubstrings(s = \"aeiouuuuu\", k = 2)",
        "beautifulSubstrings(s = \"aab\", k = 2)",
        "beautifulSubstrings(s = \"aabcde\", k = 2)",
        "beautifulSubstrings(s = \"aabcbc\", k = 3)",
        "beautifulSubstrings(s = \"aeiouuuioaaeiou\", k = 2)",
        "beautifulSubstrings(s = \"aa\", k = 2)",
        "beautifulSubstrings(s = \"aaba\", k = 1)",
        "beautifulSubstrings(s = \"aeeeiaaoaaaaeiouuuooaauuaeiu\", k = 2)",
        "beautifulSubstrings(s = \"acacaeio\", k = 2)"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [0,1,2,3,4,5,6,7,8,9])",
        "minimumSeconds(nums = [1, 3, 7, 2, 1, 5])",
        "minimumSeconds(nums = [2, 1, 5, 1, 3, 1])",
        "minimumSeconds(nums = [2, 3, 1, 5, 1])",
        "minimumSeconds(nums = [3, 7, 2, 11, 5, 4])",
        "minimumSeconds(nums = [4, 5, 2, 6, 2, 5, 3, 3])",
        "minimumSeconds(nums = [100, 50, 100, 100, 50, 100, 100, 100, 50, 50, 50])",
        "minimumSeconds(nums = [5, 1, 2, 4, 1, 5, 2, 3, 1, 4])"
    ],
    "sample_327": [
        "isFascinating(n = 9)",
        "isFascinating(n = 4)",
        "isFascinating(n = 5)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 8)",
        "isFascinating(n = 19)",
        "isFascinating(n = 42)",
        "isFascinating(n = 37)",
        "isFascinating(n = 3)",
        "isFascinating(n = 928379283)"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [3, 5, 1, 2, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 7, 11, 15], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1], target = 4)",
        "lengthOfLongestSubsequence(nums = [2, 5, 3, 7], target = 9)",
        "lengthOfLongestSubsequence(nums = [2, 1, 5, 3], target = 8)",
        "lengthOfLongestSubsequence(nums = [4, 5, 2, 6, 3, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [5, 7, 3, 9, 11, 2, 4], target = 11)",
        "lengthOfLongestSubsequence(nums = [2,3,4,2,4,6], target = 3)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[1,2,3],[1,2,3]])",
        "matrixSum(nums = [[1,2,3], [4,5,6]])",
        "matrixSum(nums = [[1, 3, 1], [2, 4, 5], [4, 6, 3]])",
        "matrixSum(nums = [[1, 3], [2, 4], [3, 6], [4, 8]])",
        "matrixSum(nums = [[0, 1, 0, 1], [1, 1, 1, 0]])",
        "matrixSum(nums = [[1], [3, 5, 7], [11, 13]])"
    ],
    "sample_326": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 12)",
        "isFascinating(n = 5)",
        "isFascinating(n = 2)",
        "isFascinating(n = 27)",
        "isFascinating(n = 22)",
        "isFascinating(n = 150)",
        "isFascinating(n = 355)",
        "isFascinating(n = 484)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 0], [0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[1,0],[0,1]])",
        "findChampion(grid = [[0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1,1,0],[1,1,0],[0,0,0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 1, 0], [0, 1, 1, 1], [1, 1, 0, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [\n    [1, 1, 1, 0],\n    [0, 1, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 0],\n])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 4, 8])",
        "minimumSum(nums = [10, 15, 3, 7])",
        "minimumSum(nums = [10, 3, 5, 6, 2])",
        "minimumSum(nums = [3, 4, 5, 6])",
        "minimumSum(nums = [1, 2, 4, 7, 5])",
        "minimumSum(nums = [1, 2, 4, 10, 3, 11])",
        "minimumSum(nums = [4, 2, 6, 7, 1, 8, 3, 5])",
        "minimumSum(nums = [4, 6, 7, 4, 5, 9, 1])",
        "minimumSum(nums = [11, 43, 7, 8, 4, 3])"
    ],
    "sample_450": [
        "minChanges(s = \"baa\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"",
        "minChanges(s = \"abccdd\")",
        "minChanges(s = \"aaaba\")",
        "minChanges(s = \"abaaba\")",
        "minChanges(s = \"aaaaa\")",
        "minChanges(s = \"abacde\")",
        "minChanges(s = \"abbbbccccd\")",
        "minChanges(s = \"gloom\")"
    ],
    "sample_248": [
        "minOperations(s1 = \"01\", s2 = \"10\", x = 2)",
        "minOperations(s1 = \"1011\", s2 = \"1101\", x = 4)",
        "minOperations(s1 = \"0101\", s2 = \"0110\", x = 1)",
        "minOperations(s1 = \"111001\", s2 = \"101101\", x = 3)",
        "minOperations(s1 = \"01010\", s2 = \"11111\", x = 4)",
        "minOperations(s1 = '0111', s2 = '1101', x = 4)",
        "minOperations(s1 = '11111', s2 = '11111', x = 3)",
        "minOperations(s1 = \"1001001\", s2 = \"0101001\", x = 2)",
        "minOperations(s1 = \"1110100\", s2 = \"1101101\", x = 3)",
        "minOperations(s1 = '0010101011', s2 = '1010101010', x = 20)"
    ],
    "sample_342": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 2, y = 1, z = 1)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 3, y = 2, z = 5)",
        "longestString(x = 3, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 10)",
        "longestString(x = 1, y = 4, z = 6)"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "maxSubarrays(nums = [1, 1, 1, 0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1,2,3])",
        "maxSubarrays(nums = [2, -2, 2, -2])",
        "maxSubarrays(nums = [2, 5, 3, 8])",
        "maxSubarrays(nums = [6, 1, 3, 1, 4, 5, 2])",
        "maxSubarrays(nums = [4, 2, 3, 1, 7, 5, 6, 5])",
        "maxSubarrays(nums = [1, 4, 2, 1, 3, 4, 5, 6, 2, 3, 2, 1, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0])"
    ],
    "sample_306": [
        "countSeniors(details = [\"Mr John Doe 43\"])",
        "countSeniors(details = [\"A00000000101\", \"A00000000110\", \"A00000000100\", \"A00000000111\"])",
        "countSeniors(details = [\"N1234567A89B\", \"S9999999A99B\", \"N1234567A89B\", \"S9999999A99B\"])",
        "countSeniors(details = [\"asdfasdf12312111\", \"asdfasdf12312112\", \"asdfasdf12312113\"])",
        "countSeniors(details = [\"2000/01/01\", \"2000/03/04\", \"2020/04/05\"])",
        "countSeniors(details = [\"15677789801\", \"15677789802\", \"15677789803\", \"15677789804\"])",
        "countSeniors(details = [\"31/10/1995\",\"12/01/2020\"])",
        "countSeniors(details = [\"name: 436863916\", \"age: 66\", \"name: 436863917\", \"age: 72\", \"name: 436863918\", \"age: 23\"])",
        "countSeniors(details = [\"<fname>a,s<lname>y,1900<gender>M\", \"<fname>s<lname>mith,1950<gender>M\"])",
        "countSeniors(details = [\"Ajey Singh\", \"Manoj Kumar\", \"Rahul Roy\", \"Priya Mukherjee\", \"Kumar Arjun\", \"Soumya Agarwal\", \"Soha Srivastava\"])"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 0, 0, 1, 1])",
        "maxSubarrays(nums = [0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1,0,1,1,0,0,1])",
        "maxSubarrays(nums = [1, 0, 0, 1, 1, 0, 1, 0, 0, 0])",
        "maxSubarrays(nums = [1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0])",
        "maxSubarrays(nums = [3, 4, 1, 2, 2, 3, 1, 5])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [8, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3], moveTo = [5, 8])",
        "relocateMarbles(nums = [5, 3, 8, 6], moveFrom = [3, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [7, 4, 5], moveTo = [3, 6, 8])",
        "relocateMarbles(nums = [5, 3, 1, 2, 6, 4], moveFrom = [3, 5], moveTo = [5, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [8, 2], moveTo = [3, 6])",
        "relocateMarbles(nums = [6, 5, 3, 1, 8, 7, 2, 4], moveFrom = [5, 3, 6, 7], moveTo = [2, 1, 8, 4])",
        "relocateMarbles(nums = [9, 8, 6, 5, 4, 3], moveFrom = [3, 5], moveTo = [2, 4])",
        "relocateMarbles(nums = [3, 4, 1, 5, 8, 6, 2], moveFrom = [3, 5], moveTo = [5, 8])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"zzz\", s2 = \"zzz\", s3 = \"zzz\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"acb\", s3 = \"bca\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bac\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"bca\", s2 = \"cab\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"dcba\", s3 = \"bacd\")",
        "findMinimumOperations(s1 = \"xyyx\", s2 = \"xyyx\", s3 = \"xyyy\")",
        "findMinimumOperations(s1 = \"abababab\", s2 = \"abababab\", s3 = \"abababab\")",
        "findMinimumOperations(s1=\"aac\", s2=\"aad\", s3=\"aac\")",
        "findMinimumOperations(s1 = \"aabbaabba\", s2 = \"ababbabab\", s3 = \"abbaabbaab\")"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums=[1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 2, 2])",
        "minLengthAfterRemovals(nums = [100, 10, 200, 3, 2, 1000])",
        "minLengthAfterRemovals(nums = [5,4,4,3,2,2,1,1])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 4, 5, 6, 7, 7])",
        "minLengthAfterRemovals(nums = [5,1,2,4,1,6])",
        "minLengthAfterRemovals(nums = [9, 4, 5, 6, 2, 3, 11, 8, 10])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 4, offers = [[3, 1, 2], [1, 2, 4], [2, 3, 10]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [2, 5, 5], [3, 4, 8], [4, 5, 10], [5, 6, 20]])",
        "maximizeTheProfit(n = 6, offers = [[2, 1, 4], [5, 3, 5], [1, 2, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 15]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [2, 5, 200], [3, 4, 50], [2, 3, 500]])",
        "maximizeTheProfit(n = 4, offers = [[1, 3, 100], [2, 4, 100], [3, 4, 100]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [2, 4, 5], [1, 2, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 4], [2, 3, 6], [4, 4, 5]])",
        "maximizeTheProfit(n = 7, offers = [[1, 3, 2], [2, 5, 4], [3, 6, 5]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 5], [2, 4, 3], [2, 1, 2]])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 20)",
        "canSplitArray(nums = [7,2,5,10,8], m = 2)",
        "canSplitArray(nums = [1,1], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 4)",
        "canSplitArray(nums=[1,2,3,4], m=10)",
        "canSplitArray(nums = [3, 3, 3, 3, 3, 1, 1, 1, 1, 1], m = 6)",
        "canSplitArray(nums = [4, 2, 4], m = 5)",
        "canSplitArray(nums = [5,4,8,10], m = 2)",
        "canSplitArray(nums=[6, 2, 4, 3], m=20)",
        "canSplitArray(nums = [5,4,3,2,6,1,4,10,7,5], m = 2)"
    ],
    "sample_106": [
        "checkArray(nums = [3, 2, 1, 1, 1], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 4)",
        "checkArray(nums = [1, 5, 3, 4, 7], k = 3)",
        "checkArray(nums = [1, 2, 1, 2, 1], k = 3)",
        "checkArray(nums = [10, 5, 2, 7, 5, 8, 7], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 4)",
        "checkArray(nums = [1, 2, 3, 3, 4, 5, 5, 7], k = 3)",
        "checkArray(nums = [1, 5, 3, 5, 4, 5, 6, 7], k = 2)",
        "checkArray(nums = [10, 2, 4, 2, 2], k = 2)",
        "checkArray(nums = [5, 5, 2, 3, 3, 2, 5], k = 3)"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [0, 10, 5, 2, 7], k = 2)",
        "maximumBeauty(nums = [3, 1, 2, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 2, 2], k = 1)",
        "maximumBeauty(nums = [2, 3, 4, 6], k = 2)",
        "maximumBeauty(nums = [3, 10, 2, 1, 14], k = 7)"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a,b\", \"c\", \"d,e\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a,a,a\", \"b,b,b\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"abc\", \"a\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"I\", \"am\", \"happy\", \"today\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"abc\", \"123\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"12345\", \"123:45\"], separator = \":\")",
        "splitWordsBySeparator(words = [\"this\", \"is\", \"an\", \"example\", \"string\", \"to\", \"split\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"aaa-bbb\", \"ccc-ddd\", \"eee-ffff\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"hello\",\"world\",\"!\",\"lol\"], separator = \"lol\")",
        "splitWordsBySeparator(words = [\"This is an example of string\", \"separation\"], separator = \" \")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [1, 3, 5, 7, 9])",
        "countWays(nums = [1, 3, 3])",
        "countWays(nums = [3, 1, 4, 2])",
        "countWays(nums = [2, 3, 1, 4])",
        "countWays(nums = [1,1,1,2,2])",
        "countWays(nums = [3, 3, 5, 7, 11, 11])",
        "countWays(nums = [5, 4, 1, 3, 1, 2])",
        "countWays(nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10])",
        "countWays(nums = [1, 5, 2, 1, 3, 1, 2, 4])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,1,1,2,2,2])",
        "minimumIndex(nums = [1,2,2])",
        "minimumIndex(nums = [1, 3, 3, 2])",
        "minimumIndex(nums = [2,2,2,2,2,2,2,2,2])",
        "minimumIndex(nums = [1,1,2,2,2,3,3,4])",
        "minimumIndex(nums = [3, 2, 1, 1, 1])",
        "minimumIndex(nums = [0, 0, 0, 0, 1, 1])",
        "minimumIndex(nums = [1,2,1,3,1,4,1])",
        "minimumIndex(nums = [2, 3, 1, 3, 1])",
        "minimumIndex(nums = [1,1,1,1,2,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,6]])",
        "numberOfPoints(nums = [[1, 2], [4, 6]])",
        "numberOfPoints(nums = [[0, 1], [1, 1], [1, 2], [2, 2], [1, 0], [2, 1]])",
        "numberOfPoints(nums = [[-2, -2], [2, 2], [-2, 2]])",
        "numberOfPoints(nums = [[1, 10], [2, 4], [3, 10]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [1, 2]])",
        "numberOfPoints(nums = [[0, 1], [1, 1], [0, 2], [2, 3], [1, 3], [2, 4]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [2, 4], [2, 4]])",
        "numberOfPoints(nums = [[-1, 0], [3, 2]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [2,3,4,1,5])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "semiOrderedPermutation(nums=[1,2,3,4,5])"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 5, target = 6)",
        "minimumPossibleSum(n = 6, target = 5)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 2, 2])",
        "minimumIndex(nums = [3, 4, 5, 1, 2])",
        "minimumIndex(nums = [1, 1, 1, 2])",
        "minimumIndex(nums = [1, 1, 1])",
        "minimumIndex(nums = [3, 2, 3, 1, 3])",
        "minimumIndex(nums = [3, 1, 4, 1, 5])",
        "minimumIndex(nums = [5, 4, 1, 3])",
        "minimumIndex(nums = [4, 4, 5, 3, 4])",
        "minimumIndex(nums = [1,1,3,2,5])",
        "minimumIndex(nums = [0, 0, 1, 0, 1, 0, 0, 1, 0, 1])"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 5, k = 6)",
        "minimumSum(n = 5, k = 5)",
        "minimumSum(n = 5, k = 1)",
        "minimumSum(n = 5, k = 25)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[0, 1], [1, 1], [1, 2]])",
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 4], [3, 4], [3, 5], [4, 5]])",
        "numberOfPoints(nums = [[1, 4], [0, 4], [3, 4], [2, 6]])",
        "numberOfPoints(nums = [[0, 4], [1, 3], [2, 2]])",
        "numberOfPoints(nums = [[1, 3], [0, 6], [5, 8]])",
        "numberOfPoints(nums = [[2, 6], [2, 5]])",
        "numberOfPoints(nums = [[1, 10], [2, 10], [2, 11], [3, 10], [3, 11], [4, 10], [4, 11]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [2, 4], [3, 1], [4, 2], [5, 3], [5, 4], [6, 3], [6, 4]])"
    ],
    "sample_101": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [10, 5, 2, 7], target = 5)",
        "maximumJumps(nums = [-1, 2, 1, 4], target = 2)",
        "maximumJumps(nums = [100000, 100000, 100000], target = 1)",
        "maximumJumps(nums = [-1, 1, 1], target = 1)",
        "maximumJumps(nums = [-4, -2, 1, 2, -3], target = 2)",
        "maximumJumps(nums = [-5, 2, -1], target = -4)",
        "maximumJumps(nums = [1, 2, 3, 3, 4, 3, 1], target = 10)",
        "maximumJumps(nums = [4,2,1,3,1,2,1,1,2,1], target = 4)",
        "maximumJumps(nums = [55, 20, 12, 39, 11, 48, 49, 10, 75], target = 20)"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n = 5, k = 8)",
        "minimumSum(n = 4, k = 7)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 4, k = 8)",
        "minimumSum(n=5, k=8)",
        "minimumSum(n = 5, k = 12)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1, 1, 1], m = 2)",
        "canSplitArray(nums = [1,1,1], m = 3)",
        "canSplitArray(nums = [1,2,1], m = 2)",
        "canSplitArray(nums = [3,2,1], m = 4)",
        "canSplitArray(nums = [3, 1, 1, 3, 5], m = 6)",
        "canSplitArray(nums = [1, 1, 2, 1, 1, 2, 1, 1], m = 4)",
        "canSplitArray(nums = [3,1,2,6,7,5], m = 9)",
        "canSplitArray(nums = [4,4,5,3,1,2], m = 11)",
        "canSplitArray(nums = [2000000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 2000000001)",
        "canSplitArray(nums = [3,1,1,3,2,3,3,1,2,1,3,1,2,2,3,2,3,1,2,1,2,1], m = 10)"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 15]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30], [4, 5, 40], [5, 6, 50]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 5], [3, 4, 8]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 15]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [3, 4, 5]])",
        "maximizeTheProfit(n = 4, offers = [[3, 0, 5], [1, 2, 10]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 10], [4, 5, 5], [5, 6, 25]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 8], [3, 4, 7], [4, 5, 6], [1, 2, 10]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 100], [2, 4, 50], [4, 5, 75], [3, 4, 55]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 17], [4, 5, 20], [1, 5, 8], [3, 5, 12], [2, 4, 14], [2, 4, 15]])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 1)",
        "checkArray(nums = [10, 20, 30], k = 2)",
        "checkArray(nums = [10, 10, 10, 10], k = 1)",
        "checkArray(nums = [2, 1, 2, 1, 1, 2], k = 2)",
        "checkArray(nums = [1, 3, 3], k = 1)",
        "checkArray(nums = [-10, -5, -3, 4, 7], k = 2)",
        "checkArray(nums = [0, 1, 1, 1, 2], k = 2)",
        "checkArray(nums = [11, 2, 5, 5, 11, 20], k = 2)"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,4], k = 3)",
        "longestEqualSubarray(nums = [1, 1, 2, 2, 2, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1,1,2,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,2,3,3,3], k = 1)",
        "longestEqualSubarray(nums = [2, 4, 3, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 2, 5, 2, 2, 5, 2], k = 4)"
    ],
    "sample_8": [
        "colorTheArray(n = 3, queries = [[1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [0, 1]])",
        "colorTheArray(n = 3, queries = [[1, 3], [0, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [3, 4], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 4], [1, 2], [2, 2], [0, 1], [3, 3], [4, 0]])",
        "colorTheArray(n = 3, queries = [[2, 2], [1, 2], [1, 0], [1, 0]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1], [0, 2], [1, 0], [2, 2], [0, 0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [3, 3], [2, 3]])",
        "colorTheArray(n = 4, queries = [[3, 0], [0, 3], [2, 0], [1, 1], [3, 1]])",
        "colorTheArray(n = 7, queries = [[0, 0], [4, 4], [1, 1], [6, 1], [5, 5], [2, 4], [3, 4]])"
    ],
    "sample_55": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbnca')",
        "smallestString(s = 'kddsdbnd')",
        "smallestString(s = 'kddqncd')",
        "smallestString(s = 'sffd')",
        "smallestString(s = \"sadbcd\")",
        "smallestString(s = 'kdsssdsbncd')",
        "smallestString(s = 'klbncdsb')",
        "smallestString(s = \"aazdbbcc\")",
        "smallestString(s = \"djkcdsd\")"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [10, 1, 2, 4, 7, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 2, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [12, 17, 15, 13, 19], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 3, 6, 1, 7, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 1, 10], threshold = 3)",
        "longestAlternatingSubarray(nums = [4, 10, 3, 3, 6, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [21, 4, 1, 5, 7, 22], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 2, 3, 5, 2, 1, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 1, 3, 5, 7, 8, 7, 6, 9, 10, 7], threshold = 5)",
        "longestAlternatingSubarray(nums = [0, 5, 3, 7, 14, 18, 23], threshold = 20)"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [10, 1, 2, 4, 7, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [10, 1, 2, 4, 7, 2], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 7, 2, 8, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 4, 3, 2, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [3, 2, 6, 5, 0, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 1, 3, 3, 5, 5, 7, 7], threshold = 100)",
        "longestAlternatingSubarray(nums = [0, 4, 3, 2, 1, 5, 6, 7], threshold = 3)",
        "longestAlternatingSubarray(nums = [100, 5, 200, 3, 4, 5], threshold = 200)"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 0, 1, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [10, 5, 2, 6, 1, 9])",
        "distinctDifferenceArray(nums = [1, 3, -1, -3, 4])",
        "distinctDifferenceArray(nums = [-1, 0, 1, -1, 2])",
        "distinctDifferenceArray(nums = [-1, -3, -2, -5, -4])",
        "distinctDifferenceArray(nums = [1, 2, 4, 3, 6, 7, 5])",
        "distinctDifferenceArray(nums = [3, -1, -2, 2, 3])"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABA\")",
        "minLength(s = \"ABA\")",
        "minLength(s = \"ACDB\")",
        "minLength(s = \"AACD\")",
        "minLength(s = \"ABCDCDC\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCDABCDABCDABCDABCD\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaaba\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"",
        "minimumCost(s = \"abbaba\")",
        "minimumCost(s = \"abbbcd\")"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 4, 4], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 10)",
        "canSplitArray(nums = [1,2,3], m = 4)",
        "canSplitArray(nums = [1, 2, 1], m = 3)",
        "canSplitArray(nums = [1, 4, 7], m = 11)",
        "canSplitArray(nums = [3, 1, 2, 2, 2], m = 4)",
        "canSplitArray(nums = [2, 4, 3], m = 4)",
        "canSplitArray(nums = [3, 2, 1, 3], m = 6)",
        "canSplitArray(nums = [5, 4, 3, 7, 2], m = 9)",
        "canSplitArray(nums = [1, 4, 7, 10, 15], m = 16)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0])",
        "doesValidArrayExist(derived = [4, 2, 6])",
        "doesValidArrayExist(derived = [1, 3, 5, 6, 2, 4])",
        "doesValidArrayExist(derived = [2,3,4])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_109": [
        "checkArray(nums = [5, 1, 3, 4, 7], k = 3)",
        "checkArray(nums = [1, 5, 3, 4, 2], k = 2)",
        "checkArray(nums = [1,2,3,1], k = 3)",
        "checkArray(nums = [10, 15, 2, 7], k = 1)",
        "checkArray(nums = [10, 10, 10], k = 1)",
        "checkArray(nums = [5, 1, 2, 3, 4], k = 2)",
        "checkArray(nums = [4, 3, 1, 2], k = 3)",
        "checkArray(nums = [0, 3, 1, 1, 2], k = 2)",
        "checkArray(nums = [1,3,5,2,3,7], k = 3)",
        "checkArray(nums = [23,10,15,19,26,21,30,18,33], k = 3)"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 1, 1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 6, 7, 6, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 5, 5, 5, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 15], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 5, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 80, 80, 90], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 5, 9, 10], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 11, 3, 13], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1, 5, 6, 4, 3, 1,",
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 6, 7, 3, 7, 3, 8, 3, 9], target = 7)"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [0,1,1,0], k = 1)",
        "sumIndicesWithKSetBits(nums = [34, 23, 12, 21, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 2, 2, 3, 4, 5, 5], k = 2)"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1,2,4,6], k = 1)",
        "maximumBeauty(nums = [1,1,2,3,3], k = 1)",
        "maximumBeauty(nums = [1,3,2,1], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 7, 6, 8, 10, 9], k = 4)",
        "maximumBeauty(nums = [3, 7, 10, 15, 18], k = 2)",
        "maximumBeauty(nums = [4,12,16], k = 6)",
        "maximumBeauty(nums = [1, 4, 4, 4, 4, 6], k = 2)"
    ],
    "sample_205": [
        "minimumOperations(num = \"12250\")",
        "minimumOperations(num = \"12250\")",
        "minimumOperations(num = \"075\")",
        "minimumOperations(num = \"75025\")",
        "minimumOperations(num = \"12345678\")",
        "minimumOperations(num = \"1234567\")",
        "minimumOperations(num = \"250250250\")",
        "minimumOperations(num = \"250750\")",
        "minimumOperations(num = \"122121\")",
        "minimumOperations(num = \"3700\")"
    ],
    "sample_204": [
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"00255075\")",
        "minimumOperations(s = \"0025507500\")",
        "minimumOperations(s = \"00752500\")",
        "minimumOperations(s = \"00000000\")",
        "minimumOperations(s = \"02050750\")",
        "minimumOperations(s = \"21050\")",
        "minimumOperations(s = \"0110101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(s = '12112321')",
        "minimumOperations(s = \"022022502205007705575\")"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [1, 2, 1, 1])",
        "semiOrderedPermutation(nums = [1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [2,1,3,1])",
        "semiOrderedPermutation(nums = [1,1,0,0,1])",
        "semiOrderedPermutation(nums=[1, 1, 1, 1, 2])"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRDD\")",
        "furthestDistanceFromOrigin(moves = \"RRDDL\")"
    ],
    "sample_169": [
        "isAcronym(words = [\"Google\", \"Facebook\", \"Apple\"], s = \"GOOGLE\")",
        "isAcronym(words = [\"for\", \"the\", \"bad\"], s = \"Ftb\")",
        "isAcronym(words = [\"s\", \"t\", \"u\"], s = \"stu\")",
        "isAcronym(words = [\"NASA\", \"IAU\"], s = \"TNAI\")",
        "isAcronym(words = [\"Lisp\", \"Ruby\", \"Python\"], s = \"LRP\")",
        "isAcronym(words = [\"IP\", \"LOVE\", \"HATE\"], s = \"ILH\")",
        "isAcronym(words = [\"USA\", \"FBI\", \"CSI\"], s = \"USBF\")",
        "isAcronym(words = [\"USA\", \"COOL\", \"GDP\"], s = \"COOLGDP\")",
        "isAcronym(words = [\"Bask\", \"Bast\"], s = \"BB\")",
        "isAcronym(words = [\"i\", \"d\", \"p\", \"e\", \"t\", \"m\", \"o\"], s = \"iDiPeToMo\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,1,1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 1, 1, 1], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 1, 3, 3, 2, 2, 2], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 1, 1, 3, 3, 2, 2, 2], modulo = 7, k = 3)",
        "countInterestingSubarrays(nums = [1,1,2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 3, 4, 4], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [4, 2, 0, 4, 0, 2, 4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [5, 1, 3, 5, 2, 4, 3, 4, 5], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 1, 3, 5, 2, 5, 2, 2], modulo = 2, k = 3)"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [2, 1, 3, 4, 5])",
        "countBeautifulPairs(nums = [2, 3, 6, 8])",
        "countBeautifulPairs(nums = [3, 24, 42])",
        "countBeautifulPairs(nums = [12, 5, 6, 13, 7, 15])",
        "countBeautifulPairs(nums = [21, 23, 5, 7])",
        "countBeautifulPairs(nums = [32, 76, 13, 9, 17])",
        "countBeautifulPairs(nums = [3, 10, 18, 9, 21])",
        "countBeautifulPairs(nums = [93, 11, 103])",
        "countBeautifulPairs(nums = [1213, 23, 31415])",
        "countBeautifulPairs(nums = [9, 14, 8, 2, 1, 5])"
    ],
    "sample_97": [
        "maximumJumps(nums = [-2,-3,-1,4,-2], target = -1)",
        "maximumJumps(nums = [-1,-1,-1,-1,-1,-1], target = -2)",
        "maximumJumps(nums = [1,1,0,1,1], target = 3)",
        "maximumJumps(nums = [1,-3,4,-5], target = -6)",
        "maximumJumps(nums = [-5,-10,0,3,7], target = 10)",
        "maximumJumps(nums = [-3,2,5,-1], target = -1)",
        "maximumJumps(nums = [1, -2, 0, 3, -1], target = -1)",
        "maximumJumps(nums = [1, 2, 4, -1, 2, 3], target = 2)",
        "maximumJumps(nums = [5, 10, 1, 100, 100], target = 90)",
        "maximumJumps(nums=[-4, -2, 0, 3, 100, -200, -1], target=0)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 5, 6, 10, 15])",
        "countBeautifulPairs(nums = [6, 7, 1, 8, 3, 4])",
        "countBeautifulPairs(nums = [7, 12, 27])",
        "countBeautifulPairs(nums = [1, 2, 4, 3, 6, 8, 7])",
        "countBeautifulPairs(nums = [50, 20, 10, 5, 2])",
        "countBeautifulPairs(nums = [42, 13, 11])",
        "countBeautifulPairs(nums = [25, 12, 46])",
        "countBeautifulPairs(nums = [56, 12, 87])",
        "countBeautifulPairs(nums = [47, 7, 29, 65])",
        "countBeautifulPairs(nums = [121, 312, 5112, 3112, 512])"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABBCD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"AABAACCD\")",
        "minLength(s = \"EABCD\")",
        "minLength(s = \"ACDC\")",
        "minLength(s = \"BAABCDCD\")",
        "minLength(s = \"ABABABCDCDABABCD\")",
        "minLength(s = \"ABCBCDCD\")",
        "minLength(s = \"ACDCDABABXXYYCDDACDCDAB\")"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = 'stingi')",
        "finalString(s = \"trinkle\")",
        "finalString(s = \"sit\")",
        "finalString(s = \"sihi\")",
        "finalString(s = 'ie')",
        "finalString(s = \"rgiitr\")",
        "finalString(s = \"ssbo\")",
        "finalString(s = 'sarting')",
        "finalString(s = \"qicrts\")"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 3, 4, 2])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "doesValidArrayExist(derived = [1,1,1])"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6])",
        "findValueOfPartition(nums = [3, 10, 5, 25, 2, 8])",
        "findValueOfPartition(nums = [3, 5, 8, 10, 12, 14, 18])",
        "findValueOfPartition(nums = [1, 2, 5])",
        "findValueOfPartition(nums = [4, 2, 1, 3])",
        "findValueOfPartition(nums = [10, 20, 30])",
        "findValueOfPartition(nums = [1, 4, 2, 3, 6, 5])",
        "findValueOfPartition(nums = [4, 5, 6, 3, 7, 2])",
        "findValueOfPartition(nums = [3, 5, 2, 6, 7, 1])",
        "findValueOfPartition(nums = [10, 7, 8, 8, 7, 6, 9, 8, 10])"
    ],
    "sample_7": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 6, queries = [[0, 5], [1, 3], [3, 5]])",
        "colorTheArray(n=2, queries = [[1, 1], [1, 2], [1, 2], [1, 2]])",
        "colorTheArray(n = 5, queries = [[3,1],[1,2],[2,3],[0,4],[2,0]])",
        "colorTheArray(n = 4, queries = [[0, 1], [0, 3], [1, 0], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2]])",
        "colorTheArray(n = 4, queries = [[1,2],[2,1],[2,2],[2,3],[4,4]])",
        "colorTheArray(n = 5, queries = [[2, 4], [4, 4], [1, 3], [5, 2], [3, 5]])",
        "colorTheArray(n = 5, queries = [[1, 3], [1, 2], [2, 3], [3, 4], [2, 4], [3, 1], [4, 4], [4, 1]])",
        "colorTheArray(n = 4, queries = [[1, 3], [2, 4], [0, 2], [1, 4], [2, 3], [0, 1], [1, 2], [0, 4], [2, 2]])",
        "colorTheArray(n = 6, queries = [[1, 0], [4, 2], [1, 4], [0, 1], [4, 1], [3, 3], [0, 1]])"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 12)",
        "minimumPossibleSum(n = 4, target = 12)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 3, target = 15)",
        "minimumPossibleSum(n = 5, target = 12)",
        "minimumPossibleSum(n = 2, target = 8)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n=5, target=10)",
        "minimumPossibleSum(n=4, target=13)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n=3, k=6)",
        "minimumSum(n = 4, k = 15)",
        "minimumSum(n = 1, k = 5)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 7, 3, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 9, 3, 6], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 1, 1, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 1, 1, 1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 4, 2, 4, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 13, 15], target = 14)"
    ],
    "sample_152": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 20)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 20)",
        "canSplitArray(nums = [3, 1, 2, 3], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 1)",
        "canSplitArray(nums = [1,1,2,3], m = 3)",
        "canSplitArray(nums = [1, 1, 2, 2, 4], m = 3)",
        "canSplitArray(nums = [1, 3, 2, 5], m = 8)",
        "canSplitArray(nums = [3, 3, 5, 5, 2], m = 8)",
        "canSplitArray(nums = [1,2,3,3,3,3], m = 6)",
        "canSplitArray(nums = [3, 1, 2, 6, 7, 8], m = 8)"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 11, k = 10)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 1], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 4, 2, 4, 4], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 4, 4, 2], m = 5, k = 4)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 1, 2, 4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 2, 2, 2, 1], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [0, 0, 1, 1, 1], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 4, 6, 4, 7], m = 5, k = 4)",
        "countInterestingSubarrays(nums = [3, 1, 3, 5], m = 2, k = 6)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums=[1,10,4,2,7], t=5)",
        "longestAlternatingSubarray(nums=[1,2,3,4,5], t=2)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 2, 3], t = 2)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 4, 2, 2], t = 2)",
        "longestAlternatingSubarray(nums = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], t = 1)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6], t = 10)",
        "longestAlternatingSubarray(nums=[1,1,0,0,0,1,1,1,1], t=2)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 3, 4, 2, 2, 4, 6, 7], t = 2)",
        "longestAlternatingSubarray(nums = [5, 3, 2, 1, 2, 4, 3, 4, 6, 5], t = 2)",
        "longestAlternatingSubarray(nums=[1,10,3,1,4,1,5,2,3,7,1,8],t=2)"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0])"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num = \"0123000512301\")"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 4, b = 2)",
        "makeTheIntegerZero(a = 4, b = 2)",
        "makeTheIntegerZero(a = 11, b = 5)",
        "makeTheIntegerZero(a = 4, b = 3)",
        "makeTheIntegerZero(a = 12, b = 5)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 5, b = 11)",
        "makeTheIntegerZero(a = 40, b = 20)",
        "makeTheIntegerZero(a=25, b=4)",
        "makeTheIntegerZero(a = 500, b = 10)"
    ],
    "sample_157": [
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 20)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [3, 2, 2, 4, 3], m = 4)",
        "canSplitArray(nums = [1,1,2,3], m = 4)",
        "canSplitArray(nums = [1, 1, 3], m = 2)",
        "canSplitArray(nums = [1, 2, 5], m = 5)",
        "canSplitArray(nums = [1, 4, 5, 10], m = 9)",
        "canSplitArray(nums = [1, 3, 2, 5, 2, 1], m = 6)",
        "canSplitArray(nums = [3, 1, 2, 6, 7], m = 12)",
        "canSplitArray(nums = [3, 1, 2, 2, 6, 7, 5, 1], m = 10)"
    ],
    "sample_161": [
        "maxSum(nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4])",
        "maxSum(nums = [0, 0, 0, 0, 0])",
        "maxSum(nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [10, 10, 10, 10, 10, 10, 10, 10])",
        "maxSum(nums = [9, 2, 1])",
        "maxSum(nums = [5, 10, 5, 10, 10])",
        "maxSum(nums = [12, 4, 6, 14, 8])",
        "maxSum(nums = [33, 20, 45, 3, 33])",
        "maxSum(nums = [44, 21, 81, 73, 42, 27])",
        "maxSum(nums = [6, 9, 1, 4, 3, 9, 8, 3, 8, 2, 7])"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 5, target = 13)",
        "minimumPossibleSum(n = 1, target = 5)"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,3,4,6])",
        "findValueOfPartition(nums = [2, 5, 1, 2])",
        "findValueOfPartition(nums = [5, 3, 2, 8])",
        "findValueOfPartition(nums = [1, 5, 6, 8, 10])",
        "findValueOfPartition(nums = [2,4,6,8,10,14])",
        "findValueOfPartition(nums = [1, 3, 2, 5, 2])",
        "findValueOfPartition(nums = [10, 5, 20, 4])",
        "findValueOfPartition(nums = [1,10,15,20,21,24])",
        "findValueOfPartition(nums = [1,3,10,5,4,5])",
        "findValueOfPartition(nums = [1, 4, 6, 8, 10, 13, 15, 18, 21, 23, 25, 27, 30])"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 4], [4, 6]])",
        "numberOfPoints(nums = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "numberOfPoints(nums = [[1, 2], [3, 100]])",
        "numberOfPoints(nums = [[1, 1], [1, 2], [1, 3], [1, 4]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [1, 4], [1, 5], [1, 6]])",
        "numberOfPoints(nums = [[1, 3], [3, 4], [2, 5]])",
        "numberOfPoints(nums = [[0, 5], [2, 8]])",
        "numberOfPoints(nums = [[2,5],[10,14]])",
        "numberOfPoints(nums = [[1,3], [2,4], [3,4], [9,11]])"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[0, 2], [3, 4], [5, 7]])",
        "numberOfPoints(nums = [[0, 2], [5, 10], [13, 23], [24, 2",
        "numberOfPoints(nums = [[0, 3], [1, 2], [1, 2], [2, 4]])",
        "numberOfPoints(nums = [[1,4],[4,6],[7,9]])",
        "numberOfPoints(nums = [[1, 1], [1, 3], [2, 2], [4, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [1, 3], [2, 4], [4, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [2, 2]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [1, 8], [5, 6]])",
        "numberOfPoints(nums = [[3, 1], [7, 4], [2, 4], [5, 6]])",
        "numberOfPoints(nums = [[3, 1], [2, 4], [1, 1], [1, 3], [1, 4], [3, 4], [2, 3], [4, 4], [1, 2], [3, 2], [2, 2], [4, 2], [3, 3], [4, 3]])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one-two-three-four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"onethreefoursix\", \"two\", \"five\"], separator = \"e\")"
    ],
    "sample_200": [
        "minOperations(nums = [100, 200, 300, 400], target = 1000)",
        "minOperations(nums = [10, 1, 5], target = 8)",
        "minOperations(nums = [5, 6, 3, 1], target = 10)",
        "minOperations(nums = [1, 1, 3, 4], target = 1)",
        "minOperations(nums = [1, 2, 5, 2, 7], target = 10)",
        "minOperations(nums=[5, 2, 1], target=1)",
        "minOperations(nums = [10, 4, 6, 4], target = 15)",
        "minOperations(nums = [2, 4, 6, 8, 12, 16], target = 6)",
        "minOperations(nums = [11, 19, 4, 6, 1, 8], target = 14)",
        "minOperations(nums = [2, 6], target = 9)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 1], k = 2)",
        "checkArray(nums = [1, 1, 2, 1], k = 3)",
        "checkArray(nums = [2, 4, 1, 3], k = 2)",
        "checkArray(nums = [1,2,4], k = 3)",
        "checkArray(nums = [1, -2, 2, 3, 4, 4], k = 3)",
        "checkArray(nums = [0, 5, 1, 2, 2, 3, 0], k = 4)",
        "checkArray(nums = [23, 12, 45, 76], k = 4)",
        "checkArray(nums = [6, 8, 8, 5, 5, 1, 6, 7, 2, 3, 3], k = 3)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1])"
    ],
    "sample_159": [
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [-100,100])",
        "maxSum(nums = [123,456])",
        "maxSum(nums = [-1, 2, 3, -5])",
        "maxSum(nums = [-1, 4, -1])",
        "maxSum(nums = [100,4,-100])",
        "maxSum(nums = [-10,-5,1,2,3,4])",
        "maxSum(nums = [2, 6, 2, 7, 5])",
        "maxSum(nums = [-1,-2,-3,4,5,-6,-7])",
        "maxSum(nums = [15, 9, 16, 11, 17])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [2, 2, 2, 2, 5, 5, 5, 5, 2, 2, 2, 2])",
        "continuousSubarrays(A = [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 3, 4, 4, 5, 5, 5, 5])",
        "continuousSubarrays(A = [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])",
        "continuousSubarrays(A = [1, 1, 1, 1, 2, 2, 3, 1, 1])",
        "continuousSubarrays(A = [5, 5, 4, 5, 4, 4, 5, 5, 5, 4])",
        "continuousSubarrays(A = [5, 1, 3, 1, 4, 1, 2, 5])",
        "continuousSubarrays(A = [3, 4, -7, 3, 3, 3, 7, -7, -9])",
        "continuousSubarrays(A = [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 4, 5, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 3, 1])",
        "distinctDifferenceArray(nums = [4, 3, 4, 3, 3])",
        "distinctDifferenceArray(nums = [2, 2, 3, 3, 3, 4, 4, 4, 5, 5])",
        "distinctDifferenceArray(nums = [0, 0, 1, 2, 3, 3, 3, 4])",
        "distinctDifferenceArray(nums = [2, 1, 3, 2, 1, 4, 1])",
        "distinctDifferenceArray(nums = [-3, -1, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 3, 2, 5, 3, 1, 4])",
        "distinctDifferenceArray(nums = [1, 4, 6, 1, 4, 6, 1, 4, 6, 1])"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 1, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 3, 4, 2])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [5, 5, 5, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [3, 2, 4, 5])",
        "maxNonDecreasingLength(a = [5, 1, 3, 4], b = [1, 2, 2, 5])",
        "maxNonDecreasingLength(a = [1, 2, 4, 5], b = [1, 3, 6, 4])",
        "maxNonDecreasingLength(a = [1, 2, 1, 1, 2], b = [3, 2, 1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 3, 1, 5], b = [3, 5, 2, 4])",
        "maxNonDecreasingLength(a = [1, 3, 7, 4, 6], b = [1, 2, 4, 6, 5])",
        "maxNonDecreasingLength(a = [6, 10, 15, 20], b = [3, 4, 15, 17])"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 9, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 3)"
    ],
    "sample_160": [
        "maxSum(nums = [-1, 4, 2, 10, 2, 3])",
        "maxSum(nums = [10,1,2,3,4])",
        "maxSum(nums = [-2147483648, 2147483647, -2147483648])",
        "maxSum(nums = [132, 456, 789])",
        "maxSum(nums = [111,123])",
        "maxSum(nums = [-9, 8, 8, -8, -9])",
        "maxSum(nums = [-3, 6, -2, 7, -1, 5, -4])",
        "maxSum(nums = [78498, 49878, 7849])",
        "maxSum(nums = [210, 211, 221, 222, 232, 120, 121, 122, 123, 133, 134, 144, 145, 155])",
        "maxSum(nums = [35, 24, 85, 3, 49, 10, 5, 27, 71, 26])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsabcd')",
        "smallestString(s = 'kddsabcd')",
        "smallestString(s = 'aabcd')",
        "smallestString(s = 'a')",
        "smallestString(s = \"kddsbancd\")",
        "smallestString(s = 'ddsabcd')",
        "smallestString(s = 'abab')",
        "smallestString(s = \"aaaabbbbccccddddeeeeffff\")",
        "smallestString(s = 'aaddbbbcd')",
        "smallestString(s = 'kkddsbaaaaaaa')"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 1])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [1, 1, 1, 1, 1])",
        "findValueOfPartition(nums = [5, 1, 4, 3, 2])",
        "findValueOfPartition(nums = [10, 20, 30, 40])",
        "findValueOfPartition(nums = [0, 1, 4, 5])",
        "findValueOfPartition(nums = [10, 1, 4, 6, 7, 8])",
        "findValueOfPartition(nums = [4, 1, 1, 2, 4, 3])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = 'ba')",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = 'aabb')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"abcba\")",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = \"abba\")"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 9, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 11)",
        "makeTheIntegerZero(num1 = 6, num2 = 11)",
        "makeTheIntegerZero(num1 = 17, num2 = 21)",
        "makeTheIntegerZero(num1 = 60, num2 = 30)",
        "makeTheIntegerZero(num1 = 10000, num2 = 3)",
        "makeTheIntegerZero(num1=3, num2=3)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1, 4], [2, 5], [3, 6]])",
        "numberOfPoints(nums = [[1, 3], [4, 5]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 7]])",
        "numberOfPoints(nums = [[1, 1], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[1,2],[4,5]])",
        "numberOfPoints(nums = [[1, 4], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[0, 2], [3, 100]])",
        "numberOfPoints(nums = [[1, 2], [1, 3], [2, 3]])",
        "numberOfPoints(nums = [[1,4], [2,3], [2,4]])",
        "numberOfPoints(nums=[[3, 7], [2, 11]])"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 1], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 1, 4, 5, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 4, 5, 6, 7], m = 3, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 3], m = 2, k = 4)",
        "countInterestingSubarrays(nums = [3, 2, 4, 5, 4], m = 4, k = 3)"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaacc\")",
        "minimumCost(s = \"abcabcabc\")"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [True, True, False])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1, 1, 1, 0, 0, 0])"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 1, 1, 1, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [2, 1, 5, 3, 4])",
        "distinctDifferenceArray(nums = [1, -2, 3, 1, -2, 4])",
        "distinctDifferenceArray(nums = [0, 0, 3, 1, 2])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4])",
        "distinctDifferenceArray(nums = [-1, 1, 2, -1, 4])",
        "distinctDifferenceArray(nums = [2, 1, 1, 1, 4])",
        "distinctDifferenceArray(nums = [0, 3, 1, 3, 1, 2, 0, 1])"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 7, 7, 6, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 4, 3, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 7, 6], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 8, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 9, 7, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 9, 7, 11], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 20, 10, 25], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 9, 6, 3], target = 10)"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"bane\")",
        "makeSmallestPalindrome(s = \"evn\")",
        "makeSmallestPalindrome(s = 'nen')",
        "makeSmallestPalindrome(s = 'Never')"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '5123001000')",
        "removeTrailingZeros(num = '123010')",
        "removeTrailingZeros(num = \"512300\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 0)",
        "countInterestingSubarrays(nums=[1,1,1,1,1], m=3, k=0)",
        "countInterestingSubarrays(nums = [1,2,2,1,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,2,1,2,2,1,2,2], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[2, 2, 2, 2, 5, 5, 5, 8], m=3, k=2)",
        "countInterestingSubarrays(nums = [1,2,3], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[2, 2, 2, 2], m=2, k=2)",
        "countInterestingSubarrays(nums=[1,2,3,2,1], m=2, k=2)",
        "countInterestingSubarrays(nums=[0, 1, 0], m=2, k=0)",
        "countInterestingSubarrays(nums=[1, 2, 1, 1, 1, 1, 1, 1, 1, 2], m=3, k=1)"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 6, additionalTank = 10)",
        "distanceTraveled(mainTank = 50, additionalTank = 10)",
        "distanceTraveled(mainTank = 40, additionalTank = 20)",
        "distanceTraveled(mainTank = 12, additionalTank = 0)",
        "distanceTraveled(mainTank = 60, additionalTank = 20)"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4, 5, 6], x = 3)",
        "minCost(A = [1,2,3,4,5], x = 3)",
        "minCost(A = [3, 5, 1, 4, 2], x = 3)",
        "minCost(A = [1, 1, 3, 4, 5], x = 3)",
        "minCost(A = [5, 4, 2, 6, 3], x = 3)",
        "minCost(A = [1, 2, 10, 3, 100], x = 2)",
        "minCost(A = [1, 3, 5, 4, 10, 6, 9, 7, 2, 8], x = 3)",
        "minCost(A = [4, 2, 1, 5, 6, 8, 7, 3], x = 3)",
        "minCost(A = [10, 1, 2, 5, 7, 1, 2], x = 3)",
        "minCost(A = [1, 2, 5, 9, 10, 20, 30, 40, 80, 100], x = 5)"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 3, 2])",
        "maxIncreasingGroups(u = [3, 1, 2])",
        "maxIncreasingGroups(u = [3, 1, 3, 2])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 6, 8])",
        "maxIncreasingGroups(u = [1, 3, 4, 8])",
        "maxIncreasingGroups(u = [5, 5, 4])",
        "maxIncreasingGroups(u = [10, 1, 3, 14, 2, 4])",
        "maxIncreasingGroups(u = [1, 3, 2, 1, 3, 2, 3, 1, 2, 3, 4, 3])",
        "maxIncreasingGroups(u = [2, 4, 6, 1, 1, 1, 1, 2, 3, 3, 3, 3])"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3], k = 1)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [2, 3, 1, 2, 4, 3], k = 3)",
        "checkArray(nums = [0, 0, 0], k = 1)",
        "checkArray(nums = [4, 3, 10, 9, 8], k = 2)",
        "checkArray(nums = [0, 2, 1, 0], k = 2)",
        "checkArray(nums = [1, 0, -1, 0, -2], k = 1)",
        "checkArray(nums = [2,1,5,7], k = 3)",
        "checkArray(nums = [4, 3, 2, 1, 0, 2], k = 3)",
        "checkArray(nums = [-1, 4, -5, 0, 10, 3, 2, 3], k = 2)"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDCDCBA\")",
        "minLength(s = \"ABA\")",
        "minLength(s = \"ABAAACD\")",
        "minLength(s = \"ABABABAB\")",
        "minLength(s = 'ACDABBB')",
        "minLength(s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD')"
    ],
    "sample_201": [
        "minOperations(nums=[1, 1], target=2)",
        "minOperations(nums=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target=4)",
        "minOperations(nums=[1, 1, 3], target=5)",
        "minOperations(nums=[2,4,7], target=2)",
        "minOperations(nums = [10,20,30,10], target = 40)",
        "minOperations(nums=[10, 20, 5, 3], target=60)",
        "minOperations(nums = [4, 5, 1, 2, 6], target = 13)",
        "minOperations(nums = [6, 2, 1, 9], target = 18)",
        "minOperations(nums = [4,5,3,10], target = 10)",
        "minOperations(nums = [2,2,3,3,4,1], target = 2)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"a|b|c\"], separator = \"|\")",
        "splitWordsBySeparator(words = [\"a/b/c\"], separator = \"/\")",
        "splitWordsBySeparator(words = [\"a.b\", \"c\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"dogs-cats\", \"bananas\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"abababab\", \"abababab\"], separator = \"ab\")",
        "splitWordsBySeparator(words = [\"this/that\", \"any/thing\"], separator = \"/\")",
        "splitWordsBySeparator(words = [\"abc.xyz\", \"123.456\", \"789..0\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"banana\", \"pear\", \"jackfruit\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"abba\", \"aaaaa\"], separator = \"aa\")",
        "splitWordsBySeparator(words = [\"na\", \"bana\"], separator = \"a\")"
    ],
    "sample_54": [
        "smallestString(s = 'aab')",
        "smallestString(s = 'aabcd')",
        "smallestString(s = \"abcd\")",
        "smallestString(s = 'aabca')",
        "smallestString(s = 'abcdefgh')",
        "smallestString(s = 'abbaa')",
        "smallestString(s = 'baaa')",
        "smallestString(s = \"abcdabcd\")",
        "smallestString(s = \"abacda\")",
        "smallestString(s = 'zkkk')"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"RRRLLL_\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLLRRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLL_____\")",
        "furthestDistanceFromOrigin(moves = \"RLRRRRRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRYYLLLRR\")",
        "furthestDistanceFromOrigin(moves
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 11, num2 = 5)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 1, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 1)",
        "makeTheIntegerZero(num1 = 11, num2 = 1)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 16, num2 = 8)",
        "makeTheIntegerZero(num1 = 24, num2 = 8)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)"
    ],
    "sample_51": [
        "smallestString(s = 'a')",
        "smallestString(s = 'ab')",
        "smallestString(s = 'bacd')",
        "smallestString(s = 'akdsbncd')",
        "smallestString(s = 'kddsbaaaabcd')",
        "smallestString(s = 'kddsbaaadsd')",
        "smallestString(s = 'abcddsbdcd')",
        "smallestString(s = 'abcde')",
        "smallestString(s = 'zbaw')",
        "smallestString(s = 'kddsssssssbcddd')"
    ],
    "sample_146": [
        "finalString(s = \"ponter\")",
        "finalString(s = \"poniter\")",
        "finalString(s = 'poiter')",
        "finalString(s = \"point\")",
        "finalString(s = 'pinto')",
        "finalString(s = 'pintar')",
        "finalString(s = \"poter\")",
        "finalString(s = \"pool\")",
        "finalString(s = 'qwuier')",
        "finalString(s = \"tcejorp\")"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 4, 3], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,1,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,1,3,3,2,2,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,3,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3,2,3], k = 3)"
    ],
    "sample_155": [
        "canSplitArray(nums = [7, 2, 5], m = 10)",
        "canSplitArray(nums = [1,1], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [7,2,5,10,8], m = 18)",
        "canSplitArray(nums = [1,1,1,3,5,2], m = 8)",
        "canSplitArray(nums = [1, 2, 10], m = 14)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2], m = 4)",
        "canSplitArray(nums = [3, 3, 5, 1, 6], m = 10)",
        "canSplitArray(nums = [1, 4, 45, 6, 1, 1, 1, 60, 1, 1, 1, 1], m = 7)",
        "canSplitArray(nums = [10,2,3,3,1], m = 6)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [3,1,1,1,3])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [4, 2, 4, 5, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2])",
        "numberOfGoodSubarraySplits(nums = [2, 5, 1, 4, 3])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one:two:three:four:five:six'], separator = ':')",
        "splitWordsBySeparator(words = [\"one two\", \"three four\", \"five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one/two\", \"three/four\", \"five/six\"], separator = \"/\")",
        "splitWordsBySeparator(words = ['one/two', 'three/four/five', 'six'], separator = '/')",
        "splitWordsBySeparator(words = [\"one,two,three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one,two', 'three,four', 'five,,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one;two', 'three;four;five;six'], separator = ';')",
        "splitWordsBySeparator(words = ['1,2,3,4,5,6', 'one,two,three,four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one;two;three;;;four;five;six'], separator = ';')",
        "splitWordsBySeparator(words = ['one:::two', 'three:::four:::five', 'six'], separator = ':::')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1,1,1,1,1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 9, 7], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 8, 6], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 4, 8], target=2)",
        "numberOfEmployeesWhoMetTarget(hours = [2,1,5], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 20, 12, 12], target = 21)",
        "numberOfEmployeesWhoMetTarget(hours = [2,4,3,8,2,6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 15, 4, 45], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 18, 13, 12, 10, 9, 8], target = 18)"
    ],
    "sample_168": [
        "isAcronym(words = [\"NASA\", \"IP",
        "isAcronym(words = [\"USA\", \"Google\"], s = \"GUS\")",
        "isAcronym(words = ['International', 'Aeronautical', 'Organization'], s = 'I.A.O.')",
        "isAcronym(words = [\"GEEKS\", \"FOR\", \"GEEKS\"], s = \"GEEK\")",
        "isAcronym(words = [\"PHP\", \"Java\", \"C++\"], s = \"PHPJCC++\")",
        "isAcronym(words = [\"dad\", \"mad\"], s = \"madam\")",
        "isAcronym(words = [\"USA\", \"UK\", \"ICAO\"], s = \"FBI\")",
        "isAcronym(words = [\"NBAQ\", \"HOW\", \"JAVA\", \"OOP\"], s = \"NBAQHOWJAVAOOP\")",
        "isAcronym(words = [\"i\", \"e\", \"s\", \"a\", \"c\", \"r\", \"o\", \"n\", \"y\"], s = \"iEsAcRoNy\")",
        "isAcronym(words = [\"FBI\", \"BT\", \"FBI\"], s = \"FBIBT\")"
    ],
    "sample_170": [
        "isAcronym(words = [\"USA\", \"",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"d\")",
        "isAcronym(words = [\"International\", \"Aeronautical\", \"Electronic\"], s = \"IAE\")",
        "isAcronym(words = [\"NBA\", \"NHL\", \"NASA\"], s = \"NBA\")",
        "isAcronym(words = [\"TCP\", \"UDP\", \"HTTP\"], s = \"TCPU\")",
        "isAcronym(words = [\"F\", \"B\", \"Z\"], s = \"FBZ\")",
        "isAcronym(words = [\"for\", \"the\", \"q\"], s = \"QFT\")",
        "isAcronym(words = [\"NBA\", \"NHL\", \"MLB\"], s = \"NBAMHL\")",
        "isAcronym(words = [\"Uno\",\"Dos\"], s = \"UnoDos\")",
        "isAcronym(words = [\"The\", \"Washington\", \"Post\"], s = \"TWP\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abaabaa\")",
        "minimumCost(s = \"abcabcbb\")",
        "minimumCost(s = \"caaabbb\")",
        "minimumCost(s = \"acbacbacbac\")"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1])",
        "doesValidArrayExist(derived = [0,1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'abab')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = 'ba')",
        "makeSmallestPalindrome(s = 'abcb')",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abda')"
    ],
    "sample_50": [
        "smallestString(s = 'baab')",
        "smallestString(s = 'aaaab')",
        "smallestString(s = \"ababab\")",
        "smallestString(s = \"aabab\")",
        "smallestString(s = \"aabba\")",
        "smallestString(s = \"bab\")",
        "smallestString(s = 'abcab')",
        "smallestString(s = \"aaabaaa\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"abaaaab\")"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [3,1,5,2,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 5, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 11, 12, 12, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,3,0,1,2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 0, 2, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,3,5,6,7,8,12,13,14,15,16], k = 1)"
    ],
    "sample_20": [
        "minLength(s = \"ABAB\")",
        "minLength(s = \"ABA\")",
        "minLength(s = \"AABCCD\")",
        "minLength(s = \"AABBC\")",
        "minLength(s = \"ABBACCD\")",
        "minLength(s = \"AACDB\")",
        "minLength(s = \"ABABABCDABCD\")",
        "minLength(s = \"AAABBBCD\")",
        "minLength(s = \"CDABAAECD\")",
        "minLength(s = \"AABACCCCCCDD\")"
    ],
    "sample_158": [
        "maxSum(nums = [123, 1234])",
        "maxSum(nums = [13, 2, 7])",
        "maxSum(nums = [4, 5, 1, 3])",
        "maxSum(nums = [-4, 3, -9])",
        "maxSum(nums = [14, 2, 17, 2, 13])",
        "maxSum(nums = [-5, -3, -2, -1, 0, 1, 2, 3, 5])",
        "maxSum(nums = [20, 1, 3, 15, 10])",
        "maxSum(nums = [130, 1, 10, 9])",
        "maxSum(nums = [3, 2, 1])",
        "maxSum(nums = [233, 777, 11, 22, 333])"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2])",
        "semiOrderedPermutation(nums = [1, 3, 5, 2, 4, 6])",
        "semiOrderedPermutation(nums = [1, 2, 4, 6, 7, 8, 10])"
    ],
    "sample_162": [
        "maxSum(nums = [27, 3, 12, 4, 5])",
        "maxSum(nums = [1, 9, 10, 45, 66, 77, 88])",
        "maxSum(nums = [5, 10, 14, 3, 7, 2, 1])",
        "maxSum(nums = [22, 3, 10, 55, 1, 27, 88])",
        "maxSum(nums = [197, 266, 7, 1, 91])",
        "maxSum(nums = [11, 23, 45, 56, 89, 10, 2, 98, 34])",
        "maxSum(nums = [88, 41, 12, 2, 5, 124, 7, 70])",
        "maxSum(nums = [12, 56, 89, 5, 75, 23, 17, 4, 6, 87])",
        "maxSum(nums = [42, 12, 15, 4, 21, 20, 35, 73, 12, 19, 14])",
        "maxSum(nums = [25316, 16815, 86151, 14315, 98151])"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1000')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = '0100')",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = '10001101')",
        "maximumOddBinaryNumber(s = '11010110')",
        "maximumOddBinaryNumber(s = '10101101')",
        "maximumOddBinaryNumber(s = '110100001')",
        "maximumOddBinaryNumber(s = '101000101111')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [9, 7, 6, 7, 6, 8, 7], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 9, 6, 0, 6, 6, 9], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 7, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9,10], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 8, 12, 16], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 10, 12, 13, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 3, 4, 1, 2, 4, 3, 1], target = 3)"
    ],
    "sample_166": [
        "isAcronym(words = [\"Portland\", \"Oregon\"], s = \"PO\")",
        "isAcronym(words = [\"for\", \"the\", \"bad\"], s = \"forthebad\")",
        "isAcronym(words = [\"The\", \"Quick\", \"Brown\", \"Fox\"], s = \"THEQUICKBROWNFOX\")",
        "isAcronym(words = [\"abc\", \"def\"], s = \"abcd\")",
        "isAcronym(words = [\"Google\", \"YouTube\"], s = \"GIYUB\")",
        "isAcronym(words = [\"never\",\"give\",\"up\"], s = \"nevergiveup\")",
        "isAcronym(words = [\"Hello\", \"World\", \"Python\"], s = \"HPY\")",
        "isAcronym(words = [\"P\", \"T\", \"G\"], s = \"PNG\")",
        "isAcronym(words = [\"U\", \"n\", \"i\", \"v\", \"e\", \"r\", \"s\", \"a\", \"l\"], s = \"universe\")",
        "isAcronym(words = [\"love\", \"leetcode\"], s = \"leetlovecode\")"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank=1, additionalTank=1)",
        "distanceTraveled(mainTank=3, additionalTank=2)",
        "distanceTraveled(mainTank=4, additionalTank=2)",
        "distanceTraveled(mainTank=3, additionalTank=0)",
        "distanceTraveled(mainTank=5, additionalTank=3)",
        "distanceTraveled(mainTank = 25, additionalTank = 1)"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 4, 2, 3])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(A = [3, 5, 1, 2, 4])",
        "maxIncreasingGroups(A = [3, 1, 2])",
        "maxIncreasingGroups(A = [1, 2, 2, 3, 5])",
        "maxIncreasingGroups(A = [2, 1, 3, 5, 6])",
        "maxIncreasingGroups(A = [1,2,3,4,7])",
        "maxIncreasingGroups(A = [2, 3, 1, 4, 5, 6])",
        "maxIncreasingGroups(A = [2, 2, 4, 6, 8])",
        "maxIncreasingGroups(A = [5, 2, 4, 7, 1, 8, 9, 1, 1, 3, 1, 2, 1, 4, 8, 7, 1, 6, 9, 1, 8, 2, 4, 7, 1, 9, 3, 1, 2, 1, 4, 8, 7, 1, 6, 9, 1, 8, 2, 4, 7, 1, 9, 3, 1, 2, 1, 4, 8, 7, 1, 6, 9, 1, 8, 2, 4, 7, 1, 9, 3, 1, 2, 1, 4, 8, 7, 1, 6, 9, 1, 8, 2, 4, 7, 1, 9, 3, 1, 2, 1, 4, 8, 7, 1, 6, 9, 1, 8, 2, 4, 7, 1, 9, 3, 1, 2, 1, 4, 8, 7, 1, 6, 9, 1, 8, 2, 4, 7, 1, 9, 3, 1, 2, 1, 4, 8, 7, 1, 6, 9, 1, 8, 2, 4, 7, 1, 9, 3, 1, 2, 1, 4, 8, 7, 1, 6, 9, 1, 8, 2, 4, 7, 1, 9, 3, 1, 2, 1, 4, 8, 7, 1, 6, 9, 1, 8, 2, 4, 7, 1, 9, 3, 1, 2,"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 3, 4, 5])",
        "distinctDifferenceArray(nums = [-6, -5, -3, -1, 1, 3, 5])",
        "distinctDifferenceArray(nums = [5, 1, 2, 6, 3, 5, 4])",
        "distinctDifferenceArray(nums = [1, 4, 2, 1, 5, 9, 2, 5, 3, 6])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 20, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 4)",
        "distanceTraveled(mainTank = 25, additionalTank = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,2,2,1,1,3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 4, 4, 4, 4])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 2, 2, 3])",
        "countCompleteSubarrays(nums = [2, 1, 3, 2, 1, 2, 3, 3, 2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
        "countCompleteSubarrays(nums = [5,5,5,3,3,3,3,3,3,3,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [9, 2, 6, 3, 9, 4, 8, 1, 4, 6])"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 8, 16, 32, 64, 128], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [0,1,1,0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,3,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0,1,1,0,1,1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 0, 1, 0, 1, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,1,2,2,2], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,1,2,5,6,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 5, 3, 7, 3, 6, 9], k = 3)"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"aabc\")",
        "minimizedStringLength(s = \"ababab\")",
        "minimizedStringLength(s = \"abcabcd\")",
        "minimizedStringLength(s = \"abb\")",
        "minimizedStringLength(s = \"abbcc\")",
        "minimizedStringLength(s = \"abcddd\")",
        "minimizedStringLength(s = \"abccd\")",
        "minimizedStringLength(s = \"bcaabcaab\")",
        "minimizedStringLength(s = \"dja\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [3,2,1,2,3,4,2], k = 2)",
        "longestEqualSubarray(nums = [0, 0, 1, 0, 0], k = 1)",
        "longestEqualSubarray(nums = [10, 5, 2, 7, 5, 2, 4, 5, 2, 7], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,1,2,1,3,1,2,1,3], k = 2)",
        "longestEqualSubarray(nums = [0,0,0,0,1,1], k = 0)",
        "longestEqualSubarray(nums=[1,2,1,2,3,4], k=2)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3,4,5,5], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 1, 3, 1, 1, 3, 1], k = 3)",
        "longestEqualSubarray(nums = [2,1,1,3,1,1,2,1], k = 2)"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [0, 2], [1, 0], [2, 1]])",
        "colorTheArray(n = 5, queries = [[1, 3], [3, 1], [2, 5], [4, 4], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [4, 4], [1, 5], [3, 4]])",
        "colorTheArray(n = 5, queries = [[3,1],[1,2],[2,4],[0,1],[2,3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1,1], [1,2], [1,3], [3,1], [4,1]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 1], [2, 2], [1, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,4],[-1,-1],[5,4]])",
        "colorTheArray(n = 5, queries = [[3, 1], [4, 1], [2, 0], [2, 1], [3, 2], [0, 2], [1, 1], [1, 2], [2, 2]])"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 120], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours = [9, 6, 7, 10], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 1, 2], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 9, 7, 4, 3], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 12, 22, 45, 50], target = 50)"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [1, 5, 2, 4, 3])",
        "countBeautifulPairs(nums = [5, 2, 3, 4, 1])",
        "countBeautifulPairs(nums = [123456789, 123456789, 123456789, 123456789, 123456789, 123456789])",
        "countBeautifulPairs(nums = [5, 3, 2, 8, 7])",
        "countBeautifulPairs(nums = [10, 12, 13, 15, 17, 29, 30])",
        "countBeautifulPairs(nums = [10, 12, 15, 20, 21, 21, 24])",
        "countBeautifulPairs(nums = [12, 14, 15, 16, 21, 24, 32])",
        "countBeautifulPairs(nums = [4, 2, 6, 4, 8, 6, 5, 2])",
        "countBeautifulPairs(nums = [12, 45, 85, 79, 14, 21])",
        "countBeautifulPairs(nums = [169, 42, 87, 69, 35, 62, 97, 32, 86, 38])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 1, 1, 1, 1])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays(nums = [1, 2, 3, 3])",
        "countWays(nums = [1, 2, 3, 4, 4])",
        "countWays(nums = [1, 5, 3, 4, 2])",
        "countWays(nums = [3, 3, 3, 3])",
        "countWays(nums = [1, 5, 2])",
        "countWays(nums = [4,2,3,1])",
        "countWays(nums = [3, 2, 1, 0, 2, 1, 0])"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '1111')",
        "maximumOddBinaryNumber(s = \"0001\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '10010100')",
        "maximumOddBinaryNumber(s = '1010110000')"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "maximumBeauty(nums = [3, 5, 1, 2, 4], k = 1)",
        "maximumBeauty(nums = [5, 3, 1, 2, 4], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3], k = 2)",
        "maximumBeauty(nums = [3, 1, 2, 4], k = 1)",
        "maximumBeauty(nums = [0, 0, 0, 1, 2, 4, 8], k = 3)"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [-2, 0, 1, 3])",
        "maximumTripletValue(nums = [5, 1, 3, 4, 2])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maximumTripletValue(nums = [2, 4, 1, 0, 0, 0, 0, 0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 1, 3, 2])",
        "maximumTripletValue(nums = [3, 0, 5, 2, 6])",
        "maximumTripletValue(nums = [10, -5, -5, 10])",
        "maximumTripletValue(nums = [5, -10, 2, -3, 5])",
        "maximumTripletValue(nums = [0, -1, 1, 3, -10])",
        "maximumTripletValue(nums = [-2, -4, -3, 2, 3, -4, 2, 4, 6, 7])"
    ],
    "sample_98": [
        "maximumJumps(nums = [10,12,20], target = 5)",
        "maximumJumps(nums = [100, 101, 104, 102, 103], target = 1)",
        "maximumJumps(nums = [3, 6, 0, 1, 0], target = 4)",
        "maximumJumps(nums = [1, 2, 3, 5, 6, 7], target = 100)",
        "maximumJumps(nums = [3, 2, 2, 4, 5, 4, 4], target = 2)",
        "maximumJumps(nums = [2,1,2,1,2], target = 0)",
        "maximumJumps(nums = [10,1,10,10], target = 4)",
        "maximumJumps(nums = [-3, -2, -1, 3, 4, 5], target = 0)",
        "maximumJumps(nums = [1, 2, 3, 2, 1, 0, 100], target = 1)",
        "maximumJumps(nums = [0, 10, 1, 1, 2, 3], target = 3)"
    ],
    "sample_149": [
        "finalString(s = 'rsi')",
        "finalString(s = \"si\")",
        "finalString(s = \"isn'gti\")",
        "finalString(s = \"itsu\")",
        "finalString(s = 'mtin')",
        "finalString(s = 'kitten')",
        "finalString(s = \"sybgd\")",
        "finalString(s = \"urca\")",
        "finalString(s = 'sdabr')",
        "finalString(s = \"abcdefg\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [2, 2, 2, 2, 5, 5, 5, 8])",
        "continuousSubarrays(A = [2, 2, 2, 2, 5, 5, 5, 8])",
        "continuousSubarrays(A = [0, 0, 1, 1, 1, 1, 2, 2, 2, 2])",
        "continuousSubarrays(A = [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "continuousSubarrays(A = [1, 1, 1, 3, 4, 5, 5])",
        "continuousSubarrays(A = [1, 2, 2, 4, 3, 3, 3])",
        "continuousSubarrays(A = [5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1])",
        "continuousSubarrays(A = [1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2])",
        "continuousSubarrays(A = [1, 2, 2, 4, 5, 2, 5, 6])",
        "continuousSubarrays(A = [3, 3, 2, 2, 3, 4, 3, 3, 2, 1])"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 1, 2, 1, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 3, 3, 4])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 4, 4, 5, 6, 6, 6])",
        "countCompleteSubarrays(nums = [0, 1, 1, 0, 0, 0, 1, 1, 0, 1])",
        "countCompleteSubarrays(nums = [5, 1, 5, 5, 5, 1, 5])",
        "countCompleteSubarrays(nums = [3,3,3,1,3,3,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 1, 2, 3, 4, 4, 1, 2, 3, 4, 5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [2, 4, 2, 6, 3, 5])"
    ],
    "sample_228": [
        "countWays(nums = [0, 1, 1, 0])",
        "countWays(nums = [1,3,1])",
        "countWays(nums = [0, 0, 0, 0, 0])",
        "countWays(nums = [0,0,3,0,0])",
        "countWays(nums = [1,0,1,2,0,1])",
        "countWays(nums=[1, 2, 0, 3])",
        "countWays(nums = [1, 1, 0, 3, 3])",
        "countWays(nums = [3, 5, 0, 2, 3])",
        "countWays(nums=[0, 2, 2, 0, 0])",
        "countWays(nums = [1, 2, 4, 4, 4, 4, 5])"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [10,15,3,7], k = 1)",
        "maximumBeauty(nums = [2, 3, 2], k = 3)",
        "maximumBeauty(nums = [2, 6, 8, 9], k = 1)",
        "maximumBeauty(nums = [1, 3, 3, 5, 7], k = 3)",
        "maximumBeauty(nums = [5, 7, 4, 1, 3, 2, 8], k = 3)",
        "maximumBeauty(nums = [4,2,1,3,5,4], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [3, 1, 4, 1, 5])",
        "distinctDifferenceArray(a = [1, 1, 1, 2, 2, 2, 3, 3])",
        "distinctDifferenceArray(a = [-1, 3, -4, 5, 1])",
        "distinctDifferenceArray(a = [1, 2, 2, 4, 4, 6])",
        "distinctDifferenceArray(a = [1, 3, 1, 4, 3, 5])",
        "distinctDifferenceArray(a = [1, 1, 2, 1, 2, 2, 3])",
        "distinctDifferenceArray(a = [-2, -2, 1, 2, 1])",
        "distinctDifferenceArray(a = [1, 1, 4, 4, 4, 7, 8])",
        "distinctDifferenceArray(a = [2, 7, 9, 2, 6, 5, 2])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "continuousSubarrays(a = [1,2,3,1,2,3,1,2,3,1])",
        "continuousSubarrays(a = [3, 1, 4, 2, 5])",
        "continuousSubarrays(a = [0, 1, 2, 2, 1, 0])",
        "continuousSubarrays(a = [1,2,3,3,2,1,1,1,1,1])",
        "continuousSubarrays(a = [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1])",
        "continuousSubarrays(a = [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0])",
        "continuousSubarrays(a = [1,1,1,2,1,1,1,3,2,1,1,1,1,2])",
        "continuousSubarrays(a = [1, 3, 1, 1, 1, 3, 1, 2, 3, 1, 3, 1, 1, 2])",
        "continuousSubarrays(a = [1, 3, 4, 2, 4, 6, 4, 7, 8, 9, 10, 6, 4, 3, 2, 1, 2, 1, 2, 3, 4, 5, 6, 7, 7, 6, 8, 8, 7, 7, 5, 4, 3, 4, 3, 4, 2, 3, 4, 5, 6, 7, 8, 8, 7, 7, 6, 5, 4, 3, 2, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 7, 6, 5, 4, 3, 2, 1])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [2, 2, 2, 2, 5, 5, 5, 8])",
        "continuousSubarrays(nums = [2, 2, 2, 2, 5, 5, 5, 8])",
        "continuousSubarrays(nums = [1, 2, 1, 3, 4, 1])",
        "continuousSubarrays(nums = [1, 2, 2, 3, 3, 4, 4])",
        "continuousSubarrays(nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120])",
        "continuousSubarrays(nums = [3, 1, 2, 1, 3, 3, 3])",
        "continuousSubarrays(nums = [3, 5, 1, 2, 3, 4, 3, 1, 4, 5])",
        "continuousSubarrays(nums = [5,5,5,2,3,4,2])",
        "continuousSubarrays(nums = [5, 6, 4, 6, 3, 5, 6, 2, 4])",
        "continuousSubarrays(nums = [4, 5, 2, -2, 2, 3, 6, 8, 1, 4, 3, 8])"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [15, 5, 10, 13, 7])",
        "countBeautifulPairs(nums = [13, 19, 24])",
        "countBeautifulPairs(nums = [13, 7, 5, 8])",
        "countBeautifulPairs(nums = [13, 14, 15, 26, 33])",
        "countBeautifulPairs(nums = [12, 555, 23, 777, 2])",
        "countBeautifulPairs(nums = [60, 18, 25, 15, 85])",
        "countBeautifulPairs(nums = [4, 12, 48, 16, 36, 60, 6, 24, 8])",
        "countBeautifulPairs(nums = [481254, 537623])",
        "countBeautifulPairs(nums = [6, 7, 14, 31, 27, 10, 15, 11])",
        "countBeautifulPairs(nums = [153, 254, 147, 306, 293, 447, 467, 405, 409, 310])"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums=[1,2,3,4])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums=[2, 3, 1])",
        "semiOrderedPermutation(nums = [3,2,1])",
        "semiOrderedPermutation(nums = [5, 1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [4,2,5,1,3])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1,2,3])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 2, 1, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 2, 2, 3])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [3,1,1,1,3,1,1,1,3,1,1,1,3])"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s = '0001')",
        "maximumOddBinaryNumber(s = '01011')",
        "maximumOddBinaryNumber(s = '100101')",
        "maximumOddBinaryNumber(s = '10101010')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '10110110')",
        "maximumOddBinaryNumber(s = \"01011010\")",
        "maximumOddBinaryNumber(s = \"1110110\")",
        "maximumOddBinaryNumber(s = '00110110')"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 1, 4, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 4, 1])",
        "countCompleteSubarrays(nums = [1, 1, 3, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 2, 2, 2, 2, 2, 3])",
        "countCompleteSubarrays(nums = [0, 1, 2, 2, 3, 4])",
        "countCompleteSubarrays(nums = [2, 4, 2, 4, 6, 2, 4, 4])"
    ],
    "sample_23": [
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCDCD\")",
        "minLength(s = \"ABABABCDCDCD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABABCDCDAB\")",
        "minLength(s=\"ABCDAABCD\")",
        "minLength(s = \"ABACDABACDABACDABACDABACDABACD\")",
        "minLength(s=\"AACCCBDD\")",
        "minLength(s = \"ABAACDABACABAA\")"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,1,2,1,1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,4,4,5,5])",
        "countCompleteSubarrays(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [9, 9, 9, 9, 9])",
        "countCompleteSubarrays(nums = [2, 1, 2, 3, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 4, 5, 4])",
        "countCompleteSubarrays(nums = [2, 2, 1, 1, 2, 1, 1, 2, 1, 1])",
        "countCompleteSubarrays(nums = [2,3,3,3,2,2,2,3])",
        "countCompleteSubarrays(nums = [0, 1, 1, 2, 3, 2, 3, 4, 1, 1])"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 7)",
        "makeTheIntegerZero(num1 = 15, num2 = 12)",
        "makeTheIntegerZero(num1 = 30, num2 = 2)",
        "makeTheIntegerZero(num1=12, num2=5)",
        "makeTheIntegerZero(num1 = 32, num2 = 16)",
        "makeTheIntegerZero(num1=6, num2=5)",
        "makeTheIntegerZero(num1 = 29, num2 = 5)",
        "makeTheIntegerZero(num1 = 36, num2 = 16)"
    ],
    "sample_100": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [10, 30, 5, 9], target = 20)",
        "maximumJumps(nums = [10,13,12,14,15], target = 3)",
        "maximumJumps(nums = [5, 3, 4, 2], target = 1)",
        "maximumJumps(nums = [2, 1, 1, 2], target = 0)",
        "maximumJumps(nums = [1, 2, 3, 10, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 5, 3, 6], target = 3)",
        "maximumJumps(nums = [3, 1, 1, 2, 3, 1, 2], target = 3)",
        "maximumJumps(nums = [-1,-1,-2,-3], target = 3)",
        "maximumJumps(nums = [-1, 1, 2, 5, -1, -1, 10], target = 2)"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 3, 2, 1])",
        "maxIncreasingGroups(x = [3, 1, 2, 4])",
        "maxIncreasingGroups(x = [1, 3, 4, 2, 5])",
        "maxIncreasingGroups(x = [3, 5, 1, 4, 3])",
        "maxIncreasingGroups(x = [1, 2, 4, 5, 7, 9])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 10])",
        "maxIncreasingGroups(x = [3, 5, 6, 8])",
        "maxIncreasingGroups(x = [4, 3, 1, 2])",
        "maxIncreasingGroups(x = [1, 5, 6, 3])",
        "maxIncreasingGroups(x = [2, 5, 6, 7, 8, 11, 12])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLRRRLLRR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLRRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLLLL_\")",
        "furthestDistanceFromOrigin(moves = 'LRLRR')",
        "furthestDistanceFromOrigin(moves = \"RRRRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRR_L\")",
        "furthestDistanceFromOrigin(moves = \"RRDDLULRRL\")",
        "furthestDistanceFromOrigin(moves = 'RRLRLRLRLRLRLRLRLRLRRRRL')"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = '11')",
        "maximumOddBinaryNumber(s = '1110')",
        "maximumOddBinaryNumber(s = \"0101\")"
    ],
    "sample_6": [
        "colorTheArray(n = 3, queries = [[1,1]])",
        "colorTheArray(n = 3, queries = [[1, 0], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1,2],[0,2],[1,0]])",
        "colorTheArray(n = 4, queries = [[0,1],[1,2],[2,1],[0,3],[3,3]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,2], [2,1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [2, 2], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[1,2],[2,2],[0,2],[1,0],[2,0]])",
        "colorTheArray(n = 4, queries = [[3, 1], [1, 3], [0, 2], [2, 0], [0, 3]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,1],[0,3],[2,3],[3,1],[3,3],[3,2],[1,3],[2,2],[0,0]])",
        "colorTheArray(n=5, queries = [\n    [3, 1],\n    [4, 0],\n    [2, 0],\n    [0, 1],\n    [4, 0],\n    [4, 1],\n    [3, 1],\n    [2, 1],\n    [2, 0],\n    [3, 1],\n    [0, 0],\n    [3, 1],\n    [1, 0],\n    [1, 1],\n    [2, 1],\n    [3, 1],\n    [1, 1],\n    [3, 0],\n    [0, 0],\n    [1, 1],\n    [3, 1],\n    [1, 0],\n    [1, 0],\n    [2, 1],\n    [3, 1],\n    [2, 0],\n    [2, 0],\n    [0, 0],\n    [1, 1],\n    [3, 0],\n    [3, 0],\n    [3, 1],\n    [2, 0],\n    [2, 1],\n    [1, 1],\n    [1, 0],\n    [0, 0],\n    [3, 1],\n    [1, 1],\n    [2, 1],\n    [1, 0],\n    [0, 1],\n    [2, 0],\n    [4, 0],\n    [0, 1],\n    [4, 1],\n    [1, 0],\n    [3, 1],\n    [2, 0],\n    [4, 0],\n    [3, 1],\n    [3, 0],\n    [4, 0],\n    [2, 1],\n    [4, 1],\n    [4, 1],\n    [4, 0],\n    [0, 1],\n    [1, 1],\n    [0, 0],\n    [3, 1],\n    [4, 1],"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 2, 5, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 1])",
        "findValueOfPartition(nums = [2, 4, 6, 8, 10])",
        "findValueOfPartition(nums = [1, 2, 4, 6, 8])",
        "findValueOfPartition(nums = [3, 2, 1, 4, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 7, 10, 12])",
        "findValueOfPartition(nums = [4, 5, 7])",
        "findValueOfPartition(nums = [2, 5, 4, 8, 10])",
        "findValueOfPartition(nums = [0, 2, 5, 6, 7])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [2, 1, 2, 1, 2])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums=[0,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,0,1,1,0,0,0])"
    ],
    "sample_121": [
        "minimumIndex(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minimumIndex(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
        "minimumIndex(nums = [1,1,2,2,2,2,3,4])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [1,3,1,3,1,4,3,2,5])",
        "minimumIndex(nums = [1, 0, 0, 1, 0, 0, 1, 0, 0, 1])",
        "minimumIndex(nums = [1, 3, 3, 3, 6, 7, 7])",
        "minimumIndex(nums = [1, 1, 3, 3, 3, 3, 2, 2, 2, 4])",
        "minimumIndex(nums = [2, 3, 4, 3, 5, 6, 3, 7, 8, 9])"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 5, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [4, 2, 5, 1, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 2, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 4, 12, 16, 36], k = 2)"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 6, offers = [[1, 5, 3], [2, 3, 2], [5, 4, 5]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 4], [3, 4, 5], [0, 6, 1]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 1], [4, 5, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 5], [1, 4, 7]])",
        "maximizeTheProfit(n = 3, offers = [[2, 1, 3], [1, 2, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,100],[2,3,200],[3,4,300],[1,4,50],[2,1,",
        "maximizeTheProfit(n = 10, offers = [[1, 4, 2], [3, 4, 4], [2, 5, 6]])",
        "maximizeTheProfit(n=4, offers = [[2,4,8],[3,4,7],[1,2,10]])",
        "maximizeTheProfit(n = 6, offers = [[2,4,1], [5,3,1]])",
        "maximizeTheProfit(n=4, offers=[[3, 1, 5], [1, 2, 10]])"
    ],
    "sample_202": [
        "minimumOperations(num = \"2575\")",
        "minimumOperations(num = \"01257550\")",
        "minimumOperations(num = \"25075\")",
        "minimumOperations(num = \"11001\")",
        "minimumOperations(num = \"00025\")",
        "minimumOperations(num = \"001001\")",
        "minimumOperations(num = \"00101010\")",
        "minimumOperations(num = \"02002\")",
        "minimumOperations(num = \"7550000\")",
        "minimumOperations(num = \"11101011010\")"
    ],
    "sample_207": [
        "minimumOperations(num = \"0125\")",
        "minimumOperations(num = \"500\")",
        "minimumOperations(num = \"10000\")",
        "minimumOperations(num = \"50750\")",
        "minimumOperations(num = \"050250\")",
        "minimumOperations(num = \"301\")",
        "minimumOperations(num = \"1234507\")",
        "minimumOperations(num = \"15200\")",
        "minimumOperations(num = \"5077\")",
        "minimumOperations(num = \"4336\")"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1,2,1],[2,3,2],[3,4,3]])",
        "maximizeTheProfit(n=4, offers = [[1,2,1],[2,3,2],[3,4,3]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,1],[3,4,5],[5,6,7]])",
        "maximizeTheProfit(n=5, offers=[[2,3,6],[3,4,5],[4,5,7]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,5],[2,3,4],[3,4,5]])",
        "maximizeTheProfit(n=3, offers = [[1,1,2],[2,2,4],[3,3,4]])",
        "maximizeTheProfit(n = 6, offers = [[1,3,2],[3,5,3]])",
        "maximizeTheProfit(n=3, offers=[[1,2,3],[2,3,5],[1,3,10]])",
        "maximizeTheProfit(n=3,offers=[[1,2,3],[2,1,1]] )",
        "maximizeTheProfit(n=5,offers=[\n    [3, 0, 5],  # will be chosen\n    [1, 2, 10],\n    [2, 3, 20],\n    [0, 5, 15]])"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [5, 2, 4, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 3, 2, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [4, 6, 1, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [5, 6, 2, 7, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [5, 6, 7, 3, 4], threshold = 4)",
        "longestAlternatingSubarray(nums=[1, 10, 4, 4, 2, 1], threshold=4)",
        "longestAlternatingSubarray(nums = [2, 6, 1, 9, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [5,1,6,7,90,2,5,1], threshold = 10)"
    ],
    "sample_203": [
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"22\")",
        "minimumOperations(num = \"725\")",
        "minimumOperations(num = \"225075\")",
        "minimumOperations(num = \"110101\")",
        "minimumOperations(num = '76')",
        "minimumOperations(num = '1225')",
        "minimumOperations(num = \"101011\")",
        "minimumOperations(num = \"122450\")",
        "minimumOperations(num = \"57890\")"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [4, 2], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [5, 5], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[3, 2], [1, 1], [2, 4], [5, 2], [3, 1]])",
        "colorTheArray(n = 4, queries = [[1, 3], [1, 2], [2, 2]])",
        "colorTheArray(n = 5, queries = [[3, 1], [4, 3], [2, 4], [5, 2], [3, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 2], [3, 5], [3, 5]])",
        "colorTheArray(n=5, queries=[[1, 4], [1, 4], [2, 2], [2, 3]])",
        "colorTheArray(n = 6, queries = [[3, 5], [4, 5], [1, 5], [2, 6]])"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 1, 2, 1, 2])",
        "minimumIndex(nums = [1, 2, 2, 2])",
        "minimumIndex(nums = [1, 2, 1])",
        "minimumIndex(nums = [1, 2, 2, 4])",
        "minimumIndex(nums = [1, 1, 1, 1])",
        "minimumIndex(nums = [5, 5, 5, 5, 5, 5, 5, 5])",
        "minimumIndex(nums = [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2])",
        "minimumIndex(nums = [2, 3, 4, 1])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3, 3])",
        "minimumIndex(nums = [1,1,2,2,3,4,4,4,4,4])"
    ],
    "sample_102": [
        "maximumJumps(nums = [-1, -2, -3, -4, -5], target = -1)",
        "maximumJumps(nums = [4, 3, 2, 1], target = 1)",
        "maximumJumps(nums = [5, 3, 2, 4, 6, 7], target = 4)",
        "maximumJumps(nums = [3,6,9,1], target = 3)",
        "maximumJumps(nums = [1, 100, 1, 100000], target = 99)",
        "maximumJumps(nums = [1, 3, 2, 0], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 3, 3], target = 3)",
        "maximumJumps(nums = [1, 1000, 100, 10000], target = 100)",
        "maximumJumps(nums = [-10, 10, -10, 10, -10], target = 4)",
        "maximumJumps(nums = [0, 10, 1, 2, 3, 1, 5, 9], target = 3)"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '512301.0000')",
        "removeTrailingZeros(num = '000512301')",
        "removeTrailingZeros(num = '000000512301')",
        "removeTrailingZeros(num = '0012301')",
        "removeTrailingZeros(num = \"1.500000\")",
        "removeTrailingZeros(num = '120000.000')"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 0)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 5, b = 0)",
        "distanceTraveled(a = 5, b = 0)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 2, b = 0)",
        "distanceTraveled(a = 4, b = 0)",
        "distanceTraveled(a = 4, b = 3)",
        "distanceTraveled(a = 10, b = 4)"
    ],
    "sample_65": [
        "findValueOfPartition(a = [3, 1, 2, 4, 3])",
        "findValueOfPartition(a = [1, 4, 5, 9])",
        "findValueOfPartition(a = [3, 1, 2, 4, 5, 6])",
        "findValueOfPartition(a = [10, 5, 20, 2])",
        "findValueOfPartition(a = [5, 1, 2, 7, 3, 4])",
        "findValueOfPartition(a = [1, 2, 3, 10, 4, 5, 6, 7])",
        "findValueOfPartition(a = [10, 5, 20, 20, 4, 1, 11, 14])",
        "findValueOfPartition(a = [3, 7, 10, 12, 15])",
        "findValueOfPartition(a = [2, 4, 6, 7, 9, 10])",
        "findValueOfPartition(a = [2, 4, 3, 7, 6, 5])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [-3, -1, 1, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 2])",
        "distinctDifferenceArray(nums = [1, -1, 2, -2, 3, -3, 4, -4])",
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3, 3, 5, 5])",
        "distinctDifferenceArray(nums = [-3, -2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 5, 1])",
        "distinctDifferenceArray(nums = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3])",
        "distinctDifferenceArray(nums = [3, 5, 1, 3, 3, 6, 7, 5, 9, 2])",
        "distinctDifferenceArray(nums = [4, 0, -2, 4, -1, -2])",
        "distinctDifferenceArray(nums = [-1, -1, -1, 0, 1, 1, 2, 3, 4, 5, 5, 5, 5, 6, 6, 7, 8, 9, 10, 11, 11, 11])"
    ],
    "sample_120": [
        "minimumIndex(nums = [1, 2, 1, 2])",
        "minimumIndex(nums = [4, 4, 6, 6])",
        "minimumIndex(nums = [1, 2, 4, 3])",
        "minimumIndex(nums = [1, 3, 1, 2, 3, 1, 3])",
        "minimumIndex(nums = [1, 3, 1, 2, 1, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 3, 5, 1, 3, 5, 1, 3])",
        "minimumIndex(nums = [1, 2, 2, 1, 2, 2, 1, 2, 1, 2])",
        "minimumIndex(nums = [6, 4, 5, 3, 5, 4, 3, 2, 5, 4, 6, 4, 5, 3, 5, 4, 3, 2, 5, 4, 6, 4, 5, 3, 5, 4, 3, 2, 5, 4, 6, 4, 5, 3, 5, 4, 3, 2, 5, 4, 6, 4, 5, 3, 5, 4, 3, 2, 5, 4, 6, 4, 5, 3, 5, 4, 3, 2])"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRLL\")",
        "furthestDistanceFromOrigin(moves=\"LRLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLRLLRRL\")"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"aabcccccaaa\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"abcd\")",
        "minimizedStringLength(s = \"abcde\")",
        "minimizedStringLength(s = \"aaaabcc\")",
        "minimizedStringLength(s = \"cat\")",
        "minimizedStringLength(s = \"cab\")",
        "minimizedStringLength(s = \"abcded\")",
        "minimizedStringLength(s = \"abbbb\")",
        "minimizedStringLength(s = \"helloworld\")"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 3)",
        "checkArray(nums = [1, 2, 3], k = 4)",
        "checkArray(nums = [100, 100, 100], k = 10)",
        "checkArray(nums = [3, 2, 1, 2, 1, 7, 5], k = 2)",
        "checkArray(nums = [2, 6, 3, 4, 5], k = 2)",
        "checkArray(nums = [2, -1, 0, 1, 3], k = 2)",
        "checkArray(nums = [1,2,3,2,1,1,1], k = 4)",
        "checkArray(nums = [4, 1, 5, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 1, 5, 6, 7, 5, 2, 3, 4], k = 5)",
        "checkArray(nums = [1, 2, 3, 2, 2, 3, 4, 3, 6, 7], k = 4)"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [1, 5, 2, 1, 4, 0])",
        "maxIncreasingGroups(usageLimits = [5, 4, 3, 2])",
        "maxIncreasingGroups(usageLimits = [100, 200, 400])",
        "maxIncreasingGroups(usageLimits = [1,1,1,1,1,1,1,1,1,1])",
        "maxIncreasingGroups(usageLimits = [2, 2, 4, 0])",
        "maxIncreasingGroups(usageLimits = [3, 1, 2, 0, 1, 2])",
        "maxIncreasingGroups(usageLimits = [5, 3, 2, 1, 2, 3, 1])",
        "maxIncreasingGroups(usageLimits = [200, 10, 10, 20])",
        "maxIncreasingGroups(usageLimits = [11, 2, 5, 3, 1, 3, 15, 3, 5, 7, 1])"
    ],
    "sample_206": [
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"275\")",
        "minimumOperations(num = \"150\")",
        "minimumOperations(num = '225')",
        "minimumOperations(num = \"100000\")",
        "minimumOperations(num = \"492\")",
        "minimumOperations(num = \"747\")",
        "minimumOperations(num = \"1211\")",
        "minimumOperations(num = \"15275\")"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [2,1,2,1,0,2])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0])"
    ],
    "sample_38": [
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"leetcode\")",
        "minimumCost(s = \"aa\")",
        "minimumCost(s = \"ACCCCC\")"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [3, 1, 2, 1, 2])",
        "maxIncreasingGroups(usageLimits = [1, 5, 6, 10])",
        "maxIncreasingGroups(usageLimits = [4, 2, 3, 1])",
        "maxIncreasingGroups(usageLimits = [1, 3, 2, 4, 6])",
        "maxIncreasingGroups(usageLimits = [1, 3, 4, 5, 7])",
        "maxIncreasingGroups(usageLimits = [1, 5, 6, 3, 2])",
        "maxIncreasingGroups(usageLimits = [0, 3, 4, 5, 6, 7, 9])",
        "maxIncreasingGroups(usageLimits = [3, 4, 2, 2])",
        "maxIncreasingGroups(usageLimits = [1,3,2,1,2,1,1])",
        "maxIncreasingGroups(usageLimits = [5, 10, 12, 15, 20, 25, 30, 50])"
    ],
    "sample_53": [
        "smallestString(s = 'abc')",
        "smallestString(s = 'bac')",
        "smallestString(s = 'baac')",
        "smallestString(s = 'ababc')",
        "smallestString(s = 'aaabcc')",
        "smallestString(s = 'babca')",
        "smallestString(s = 'abbba')",
        "smallestString(s = 'abbbc')",
        "smallestString(s = \"baaab\")",
        "smallestString(s = 'a')"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [4, 2, 1, 3], x = 2)",
        "minAbsoluteDifference(nums = [10, 11, 12, 13, 14], x = 3)",
        "minAbsoluteDifference(nums = [2,3,1,5,4], x = 3)",
        "minAbsoluteDifference(nums = [-1, 5, 10, 20, 28, 3], x = 2)",
        "minAbsoluteDifference(nums = [1,3,9,11,15], x = 3)",
        "minAbsoluteDifference(nums = [1, 5, 10, 10, 20], x = 3)",
        "minAbsoluteDifference(nums = [4, 2, 1, 3], x = 2)",
        "minAbsoluteDifference(nums = [2,5,10,11], x = 2)",
        "minAbsoluteDifference(nums = [2, 3, 10, 25, 12], x = 2)",
        "minAbsoluteDifference(nums = [21, 3, 14, 1, 9, 17], x = 3)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 100], [1, 3, 200], [2, 4, 250]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 2], [2, 4, 5], [3, 5, 1], [4, 6, 3]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 2], [3, 4, 3], [1, 4, 5]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 3], [2, 1, 2], [3, 2, 4]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 10], [2, 3, 15], [3, 4, 10], [4, 5, 15]])",
        "maximizeTheProfit(N = 4, offers = [[1, 1, 10], [2, 3, 12]])",
        "maximizeTheProfit(N = 3, offers = [[2, 1, 100], [1, 2, 200], [3, 3, 500], [2, 3, 400]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 2], [2, 5, 10], [3, 4, 5], [3, 5, 3]])"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"a,b\", \"c\"], b = \",\")",
        "splitWordsBySeparator(a = [\"a,b\"], b = \",\")",
        "splitWordsBySeparator(a = [\"\"], b = \",\")",
        "splitWordsBySeparator(a = [\"abc,def\", \"ghi,jkl,mno\"], b = \",\")",
        "splitWordsBySeparator(a = [\"a\", \"b\", \"cd\", \"e\"], b = \"c\")",
        "splitWordsBySeparator(a = [\"Hello world, I am happy\"], b = \" \")",
        "splitWordsBySeparator(a = [\"hello\", \"you\"], b = \"lo\")",
        "splitWordsBySeparator(a = [\"abc, bcd, efg, hij\", \"klm, nop\"], b = \",\")",
        "splitWordsBySeparator(a = [\"it is a \", \" sunny \", \" day\"], b = \" \")",
        "splitWordsBySeparator(a = [\"hello:world\", \"tasty:eggs\", \"nice:spam\"], b = \":\")"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '5123001')",
        "removeTrailingZeros(a = \"51230100000\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'nvve')",
        "makeSmallestPalindrome(s = \"bill\")"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 3, 1], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 1, 2], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,2,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [10, 9, 11, 10, 10, 11, 9, 10], k = 3)",
        "longestEqualSubarray(nums = [10, 9, 1, 3, 4, 3, 2], k = 4)",
        "longestEqualSubarray(nums = [10, 5, 0, 0, 1, 1, 1, 1], k = 1)",
        "longestEqualSubarray(nums = [3, 2, 2, 2, 2, 2, 2, 1, 1, 3, 4], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [3, 5, 1, 2, 4], k = 2)",
        "maximumBeauty(nums = [2, 3, 5, 7, 11], k = 2)",
        "maximumBeauty(nums=[2,1,4,3], k=2)",
        "maximumBeauty(nums = [2,4,5,7,8,10], k = 3)",
        "maximumBeauty(nums=[3,2,1,4,5], k=2)",
        "maximumBeauty(nums = [1, 4, 2, 3, 4, 5, 4], k = 1)",
        "maximumBeauty(nums = [3, 10, 2, 5, 7], k = 3)",
        "maximumBeauty(nums = [1, 5, 7, 9, 14, 15, 21, 22], k = 2)"
    ],
    "sample_163": [
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [-100, 99])",
        "maxSum(nums = [100, 200, 300])",
        "maxSum(nums = [-100, 100, -100])",
        "maxSum(nums = [4, 5, 2])",
        "maxSum(nums = [123, 456])",
        "maxSum(nums = [3, 1, 4, 2])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [-5,-1,0,1,2,3])",
        "maxSum(nums = [198, 298, 390, 400])"
    ],
    "sample_151": [
        "finalString(s = 'rtsng')",
        "finalString(s = 'string')",
        "finalString(s = \"ring\")",
        "finalString(s = 'strin')",
        "finalString(s = 'dog')",
        "finalString(s = 'radar')",
        "finalString(s = \"hi\")",
        "finalString(s = 'hero')",
        "finalString(s = \"imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn sseoau\")",
        "finalString(s = 'aifr')"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123001')",
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = \"51230001\")",
        "removeTrailingZeros(num = \"5123000\")",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = \"005123010\")",
        "removeTrailingZeros(num = '05123000001')",
        "removeTrailingZeros(num = \"000123.01000\")",
        "removeTrailingZeros(num = '000000123000000001230000000000000000')"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = \"010\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = '00110')",
        "maximumOddBinaryNumber(s = '110101')",
        "maximumOddBinaryNumber(s = '101101')",
        "maximumOddBinaryNumber(s = '000001')",
        "maximumOddBinaryNumber(s = '001001')"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = [\"easyproblem\"], separator = \"problem\")",
        "splitWordsBySeparator(words = ['easyproblem'], separator = 'a')",
        "splitWordsBySeparator(words = ['easy-problem', 'banana'], separator = '-')",
        "splitWordsBySeparator(words = [\"easyasabc\", \"problem\"], separator = \"abc\")",
        "splitWordsBySeparator(words = [\"easy problem\", \"easy_problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello\", \"my\", \"name\", \"is\", \"leetcode\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"hello:world\", \"a:b:c\", \":hello\"], separator = \":\")",
        "splitWordsBySeparator(words = [\"I\", \"chose\", \"the\", \"most\", \"easy\", \"problem\"], separator = \"the\")",
        "splitWordsBySeparator(words = [\"here-is\", \"a-hyphenated\", \"sentence\"], separator = \"-\")"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,1,2], K = 2)",
        "longestEqualSubarray(A = [4,6,5,4,4], K = 1)",
        "longestEqualSubarray(A = [1,2,1,1,1], K = 2)",
        "longestEqualSubarray(A = [1,2,1,2,1,2,1,2,1], K = 4)",
        "longestEqualSubarray(A = [4, 2, 4, 5, 2, 5, 2, 5, 4, 2], K = 2)",
        "longestEqualSubarray(A = [1, 2, 2, 3, 3, 3, 2, 1], K = 3)",
        "longestEqualSubarray(A = [1, 2, 1, 3, 4, 1, 1, 2, 1, 4], K = 2)",
        "longestEqualSubarray(A = [0,1,2,2,2,2,2,3,4], K = 3)",
        "longestEqualSubarray(A = [1, 3, 4, 2, 4], K = 3)",
        "longestEqualSubarray(A = [1,3,1,2,3,3,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [4, 3, 2, 1])",
        "countWays(nums = [2, 3, 5])",
        "countWays(nums = [3, 1])",
        "countWays(nums=[1, 3, 7])",
        "countWays(nums = [1, 1, 3, 4, 4])",
        "countWays(nums = [5, 3, 7, 6])",
        "countWays(nums = [1000, 700, 100])",
        "countWays(nums = [1, 2, 3, 100, 50])"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 5, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 11, 12, 13, 14, 15], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 1, 5, 2, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,3,5,6,7,9], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 5, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [5, 7, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 2, 4, 1, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 4, 5, 1, 6], k = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '5123010')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"123010\")",
        "removeTrailingZeros(num = \"51230100000000000000\")",
        "removeTrailingZeros(num = \"5123010000000000000000000\")"
    ],
    "sample_167": [
        "isAcronym(words = [\"USA\",\"NATO\",\"WTO\"], s = \"USA\")",
        "isAcronym(words = [\"Portland\", \"Oregon\"], s = \"POR\")",
        "isAcronym(words = [\"USA\", \"UAE\"], s = \"USA\")",
        "isAcronym(words = [\"FBI\",\"",
        "isAcronym(words = [\"USA\", \"NATO\"], s = \"U S A\")",
        "isAcronym(words = [\"USA\", \"USSR\", \"United Kingdom\"], s = \"USUK\")",
        "isAcronym(words = [\"The\", \"International\", \"Herald\", \"Tribune\"], s = \"TRIBUNE\")",
        "isAcronym(words=[\"Hello\",\"World\"], s=\"WHO\")",
        "isAcronym(words = [\"For\", \"the\", \"Quiet\", \"man\"], s = \"QFQM\")",
        "isAcronym(words = [\"pork\", \"beef\"], s = \"abcd\")"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 1, 4, 2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,2,2,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 4, 5, 5])",
        "countCompleteSubarrays(nums = [2, 2, 2, 3, 4, 4])",
        "countCompleteSubarrays(nums = [1, 3, 5, 5, 3])"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 4, target = 7)",
        "minimumPossibleSum(n=1, target=2)",
        "minimumPossibleSum(n = 4, target = 8)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"strign\")",
        "finalString(s = \"rsih\")",
        "finalString(s = 'sihT')",
        "finalString(s = \"tsgir\")",
        "finalString(s = \"tsihgn\")",
        "finalString(s = \"stni\")",
        "finalString(s = \"tin\")",
        "finalString(s = \"so\")",
        "finalString(s = 'i is a substring')"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"uneven\")",
        "makeSmallestPalindrome(s = 'nnevve')",
        "makeSmallestPalindrome(s = 'bob')"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 3, 20], [2, 4, 5], [4, 5, 4], [5, 6, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 4, 5], [3, 1, 9], [4, 6, 3], [5, 7, 1]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,10],[2,1,5],[3,1,7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 5], [2, 2, 5], [3, 1, 8], [4, 4, 7], [5, 1, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 4, 8], [4, 5, 10]])",
        "maximizeTheProfit(n=6, offers=[[3, 1, 2], [1, 2, 4], [2, 3, 5]])",
        "maximizeTheProfit(n = 6, offers = [[1, 6, 10], [2, 3, 20], [4, 5, 40]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 5], [1, 3, 3], [1, 4, 4]])",
        "maximizeTheProfit(n = 6, offers = [[2, 5, 7], [2, 1, 4], [4, 2, 1], [4, 5, 8], [5, 2, 1], [2, 3, 6]])"
    ],
    "sample_99": [
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 5, 1, 3, 4], target = 3)",
        "maximumJumps(nums = [1000000000, 1000000000, 1000000000], target = 1)",
        "maximumJumps(nums = [0, 3, 0, 1, 0], target = 0)",
        "maximumJumps(nums = [-1,-1,4], target = 3)",
        "maximumJumps(nums = [10, 5, 2, 1, 7, 4, 8, 9], target = 5)",
        "maximumJumps(nums = [0, 3, 0, 1, -3, 3, 0], target = 4)",
        "maximumJumps(nums = [1,2,3,5,6,7,4,10,11,12,14], target = 5)",
        "maximumJumps(nums = [100, 200, 50, 1, 10, 12], target = 4)",
        "maximumJumps(nums = [-1, -2, -3], target = -1)"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,3,3,2,2,2])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [3,1,1,3,5])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,2,2,2])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [3, 1, 1, 1, 3])"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '01')",
        "maximumOddBinaryNumber(s = '10110')",
        "maximumOddBinaryNumber(s = '0010110')",
        "maximumOddBinaryNumber(s = '10111011')",
        "maximumOddBinaryNumber(s = '01010101001')"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 5, k = 6)"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 2, num2 = 4)",
        "makeTheIntegerZero(num1 = 15, num2 = 10)",
        "makeTheIntegerZero(num1 = 1000, num2 = 1)"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 4, target = 5)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n=2, target=1)",
        "minimumPossibleSum(n = 5, target = 12)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 0, 0, 0], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 4, 7], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [3, 3, 3, 3, 3], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 2, 5, 6], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 3, 5, 5, 5, 5, 5], modulo = 7, k = 2)",
        "countInterestingSubarrays(nums = [2,1,4,7,3,6,2,4], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [5, 5, 3, 3, 5, 2, 2, 5, 4, 2, 3, 2, 2, 3, 3, 2, 5, 5, 2, 3, 3, 3, 3, 2, 4, 5, 3, 2, 3, 3, 3, 5, 4, 3, 3, 2, 2, 2, 2, 4, 3, 3, 5, 5, 3, 5, 4, 3, 2, 2, 2, 3, 4, 3, 3, 4, 4, 3, 3, 3, 5, 5, 3, 3, 5, 5, 3, 2, 2, 2, 4, 5, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 2, 2, 5, 3, 2, 4, 5, 3, 4, 5, 2, 4, 5, 4, 4, 4, 5, 2, 5, 2, 3, 5, 3, 2, 3, 2, 3, 5, 4, 4, 3, 4, 5, 3, 5, 5, 5, 2, 5, 5, 4, 5, 5, 4, 3, 2, 5, 3, 3, 3, 3, 4, 2, 4, 3, 3, 4, 5, 2, 3, 3, 2, 5, 3, 5, 3, 4, 5, 4, 2, 5, 3, 4, 4, 3, 4, 3, 3, 2, 3, 4, 4, 4, 5, 5, 4, 3, 2, 3,"
    ],
    "sample_115": [
        "maximumBeauty(nums = [10, 2, 5, 1, 8], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5,6], k = 3)",
        "maximumBeauty(nums = [5, 4, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [10, 15, 3, 7], k = 1)",
        "maximumBeauty(nums = [0, 10, 5, 2, 7], k = 1)",
        "maximumBeauty(nums = [2, 3, 5, 4, 1], k = 2)",
        "maximumBeauty(nums = [5, 4, 1, 3, 2], k = 3)",
        "maximumBeauty(nums = [10, 20, 5, 11], k = 3)",
        "maximumBeauty(nums = [4, 2, 6, 4, 1, 10, 4, 3, 1, 8], k = 3)"
    ],
    "sample_148": [
        "finalString(s = \"ponter\")",
        "finalString(s = 'pinter')",
        "finalString(s = 'pointer')",
        "finalString(s = \"toni\")",
        "finalString(s = \"oppi\")",
        "finalString(s = \"intrp\")",
        "finalString(s = \"bob\")",
        "finalString(s = 'inpo')",
        "finalString(s = \"jierfon\")",
        "finalString(s = 'trwilpn')"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1, 3, 5, 7])",
        "countWays(nums = [1, 1, 1, 1])",
        "countWays(nums = [2, 3, 4, 5, 6, 7])",
        "countWays(nums = [1, 2, 2, 3, 4, 5])",
        "countWays(nums = [2, 3, 3, 4])",
        "countWays(nums = [2, 4, 6, 7, 8])",
        "countWays(nums = [0, 1, 1, 3, 3, 4, 6, 9, 10, 13])"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [12, 5, 15, 11])",
        "countBeautifulPairs(nums = [10, 2, 3, 4, 5, 6, 7, 8, 9, 11])",
        "countBeautifulPairs(nums = [3, 5, 2, 7])",
        "countBeautifulPairs(nums = [2, 10, 5, 6])",
        "countBeautifulPairs(nums = [10,12,15,14,9])",
        "countBeautifulPairs(nums=[31, 20, 1])",
        "countBeautifulPairs(nums = [2,5,4,3,1,6])",
        "countBeautifulPairs(nums = [6,1,2,3,4,5,7,8])",
        "countBeautifulPairs(nums=[13, 27, 11, 24, 28, 39, 42, 31, 16])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 14, num2 = 3)",
        "makeTheIntegerZero(num1 = 17, num2 = 6)",
        "makeTheIntegerZero(num1 = 14, num2 = 7)",
        "makeTheIntegerZero(num1 = 25, num2 = 5)",
        "makeTheIntegerZero(num1 = 20, num2 = 5)",
        "makeTheIntegerZero(num1 = 14, num2 = 5)",
        "makeTheIntegerZero(num1 = 22, num2 = 6)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'neven')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neven\")",
        "makeSmallestPalindrome(s = 'bane')",
        "makeSmallestPalindrome(s = \"venn\")",
        "makeSmallestPalindrome(s = 'teen')",
        "makeSmallestPalindrome(s = \"nven\")"
    ],
    "sample_165": [
        "isAcronym(words = [\"TCP\"], s = \"TCP\")",
        "isAcronym(words = [\"international\", \"geographical\", \"organization\"], s = \"IGO\")",
        "isAcronym(words = [\"USA\", \"Google\", \"Apple\"], s = \"FBI\")",
        "isAcronym(words = [\"the\", \"foobar\", \"baz\"], s = \"tbf\")",
        "isAcronym(words = [\"P\", \"A\", \"S\", \"S\"], s = \"PASSE\")",
        "isAcronym(words = [\"University\", \"of\", \"California\"], s = \"UCO\")",
        "isAcronym(words = [\"FBI\", \"ABC\", \"XYZ\"], s = \"FXZ\")",
        "isAcronym(words = [\"WE\", \"CAN\", \"WIN\"], s = \"WECANWIN\")",
        "isAcronym(words = [\"B\", \"C\", \"D\", \"E\", \"F\"], s = \"ABCDEF\")",
        "isAcronym(words = [\"FBI\", \"NASA\", \"CPS\"], s = \"FBINASACPS\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 2, 1, 2, 1, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [2,5,1,2,5])",
        "numberOfGoodSubarraySplits(nums = [3,1,1,1,3,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 2, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [2,1,2,4,2])",
        "numberOfGoodSubarraySplits(nums = [2, 3, 1, 1, 1, 3, 3, 2, 2, 2])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1])"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 2, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 0, 0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 1, 0], k = 2)"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 5, k = 6)"
    ],
    "sample_227": [
        "countWays(nums = [1, 3, 2])",
        "countWays(nums = [1, 2, 4, 5, 6])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [2, 2, 2, 2])",
        "countWays(nums = [-100, 100])",
        "countWays(nums = [-3, -2, 1, 2, 3])",
        "countWays(nums = [-1, 2, 4, 5, 8])",
        "countWays(nums = [3, 3, 3, 3, 3, 3, 3, 3])",
        "countWays(nums = [4, 3, 1, 5, 7, 2, 6, 0])",
        "countWays(nums = [3, 6, 4, 5, 8, 2, 4, 3, 4, 2, 5, 6, 7, 4, 5, 6, 1, 8, 7, 7])"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaab\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"aa\")",
        "minimumCost(s = \"XY\")"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLL_\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLRRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRR__\")",
        "furthestDistanceFromOrigin(moves = \"_LL_RRLL\")",
        "furthestDistanceFromOrigin(moves = \"R_RR\")",
        "furthestDistanceFromOrigin(moves = \"RRRLLRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"_LRRLLLRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLRRRLLLRRLLLL\")"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 20, additionalTank = 10)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 21)",
        "distanceTraveled(mainTank = 21, additionalTank = 12)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 4, 4, 3])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [3, 3, 3, 3, 4, 4, 4, 4, 4, 4])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5])",
        "countCompleteSubarrays(nums = [1, 1, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3",
        "countCompleteSubarrays(nums = [2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10])"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 5, 17], threshold = 5)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 7], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 2, 6, 2, 4, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 2, 1, 2, 2, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 2, 1, 0], threshold = 2)",
        "longestAlternatingSubarray(nums = [100, 200, 300, 400, 500], threshold = 1000)",
        "longestAlternatingSubarray(nums = [5, 2, 4, 5, 2, 4, 5, 2, 4, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 1, 2, 6, 3, 1, 2, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [6, 5, 4, 1, 3, 2, 9], threshold = 3)",
        "longestAlternatingSubarray(nums = [6, 1, 1, 7, 1], threshold = 6)"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])",
        "numberOfPoints(nums = [[1, 1], [2, 2], [4, 4]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [2, 5]])",
        "numberOfPoints(nums = [[1, 5], [1, 5]])",
        "numberOfPoints(nums = [[1, 2], [1, 4], [2, 3]])",
        "numberOfPoints(nums = [[0, 3], [4, 10], [20, 24], [5, 9]])",
        "numberOfPoints(nums = [[1, 3], [3, 7], [5, 10], [7, 13]])"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 4, 2, 3])",
        "countBeautifulPairs(nums = [1, 6, 4, 7])",
        "countBeautifulPairs(nums = [23, 24, 12])",
        "countBeautifulPairs(nums = [121, 43, 1])",
        "countBeautifulPairs(nums = [10, 2, 10, 2, 20, 2])",
        "countBeautifulPairs(nums = [12, 4, 19, 36])",
        "countBeautifulPairs(nums = [14, 6, 24, 22])",
        "countBeautifulPairs(nums = [40, 36, 7, 10, 9, 15])",
        "countBeautifulPairs(nums = [232, 4, 1, 44, 666])",
        "countBeautifulPairs(nums = [613845, 578532, 190125, 726038, 561357])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [5, 1, 3, 4, 2], t = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 2], t = 2)",
        "longestAlternatingSubarray(nums = [0, 0, 1, 1], t = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 3, 3], t = 3)",
        "longestAlternatingSubarray(nums = [5, 6, 7, 1, 2, 3, 4], t = 10)",
        "longestAlternatingSubarray(nums = [1,1,0,0], t = 1)",
        "longestAlternatingSubarray(nums = [5, 2, 4, 0, 1, 3], t = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 4, 5, 3], t = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,1,4,1,5,4,5], t = 4)",
        "longestAlternatingSubarray(nums = [5,5,5,2,5,3,4,1,5,5,5,3], t = 3)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"eleetminicoworoep\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDABCDCD\")",
        "minLength(s = \"ABABCDCDABABCDCD\")",
        "minLength(s = \"AABBCCDD\")",
        "minLength(s = \"CABD\")",
        "minLength(s = \"ABCABC\")",
        "minLength(s = \"ABABABCDCDABABABCDCD\")",
        "minLength(s = \"ABACA\")",
        "minLength(s = \"ABAABA\")",
        "minLength(s = \"ABCDCDABABCDABABCDAB\")"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [3, 1, 4, 1], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [3, 1, 5, 4, 2], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums = [3, 4, 3], modulo = 5, k = 4)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 4, 6], modulo = 5, k = 4)",
        "countInterestingSubarrays(nums = [1, 2, 1, 1, 1, 2, 1, 1, 1, 1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 3, 2, 6], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1,2,2,2,4,5,6,6,7,8,9], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums=[1,2,4,5,1,6,8,7,8,4],modulo=2,k=4)",
        "countInterestingSubarrays(nums = [3, 1, 3, 2, 4, 6, 8, 7, 8, 2, 3, 4, 5, 9, 4, 5, 7, 8, 5, 7, 7, 8, 1, 1, 3, 5, 5, 6, 8, 2, 8, 7, 4, 4, 9, 1, 7, 4, 7, 8, 2, 9, 4, 1, 7, 2, 2, 1, 6, 2, 8, 2, 1, 8, 4, 7, 7, 3, 5, 5, 1, 8, 4, 6, 1, 6, 7, 8, 7, 8, 1, 2, 2, 4, 7, 8, 4, 8, 3, 1, 8, 4, 4, 9, 2, 7, 7, 5, 7, 8, 4, 9, 5, 1, 3, 7, 3, 7, 5, 1, 4, 8, 5, 6, 4, 6, 1, 9, 3, 8, 8, 6, 3, 2, 9, 6, 1, 7, 6, 7, 9, 3, 3, 9, 8, 9, 2, 1, 2, 7, 9, 2, 5, 2, 8, 8, 3, 9, 6, 7, 2, 7, 7, 1, 4, 4, 2, 5, 1, 1, 4, 4, 6, 9, 5, 5, 6, 1, 4, 9, 5, 3, 7, 2, 9, 4, 7, 2, 9, 7, 4, 3, 4, 9, 1, 3, 6, 4,"
    ],
    "sample_9": [
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 3], [4, 4]])",
        "colorTheArray(n = 4, queries = [[0, 1], [2, 1], [1, 0], [0, 2]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [2, 3], [3, 3]])",
        "colorTheArray(n = 6, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]])",
        "colorTheArray(n = 5, queries = [[1, 3], [3, 5], [2, 4], [2, 5]])",
        "colorTheArray(n = 7, queries = [[3, 2], [1, 5], [2, 6], [4, 1], [5, 3]])",
        "colorTheArray(n = 5, queries = [[1, 3], [3, 3], [1, 2], [2, 4], [4, 1], [1, 3], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 2], [2, 2], [3, 0], [4, 2], [4, 0]])",
        "colorTheArray(n = 4, queries = [[1, 0], [3, 1], [0, 3], [2, 2], [1, 3], [2, 0]])",
        "colorTheArray(n = 4, queries = [[0, 0], [1, 1], [2, 1], [0, 1], [3, 0], [1, 0], [0, 2], [0, 3]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [5, 7, 4], nums2 = [1, 3, 2])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2], nums2 = [2, 3, 1])",
        "maxNonDecreasingLength(nums1 = [2, 1], nums2 = [1, 3])",
        "maxNonDecreasingLength(nums1 = [2, 5, 3, 7], nums2 = [4, 1, 10, 1, 1])",
        "maxNonDecreasingLength(nums1 = [1, 4, 3, 2], nums2 = [2, 4, 1, 5])",
        "maxNonDecreasingLength(nums1 = [1, 100, 100], nums2 = [2, 2, 2])",
        "maxNonDecreasingLength(nums1 = [2, 6, 4, 8, 10], nums2 = [1, 11])",
        "maxNonDecreasingLength(nums1 = [3, 4, 6, 8], nums2 = [1, 2, 1, 2])",
        "maxNonDecreasingLength(nums1 = [4, 5, 6, 0, 1, 2, 3],\n                              nums2 = [4, 5, 6, 1, 2, 3, 4])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 5, target = 14)",
        "minimumPossibleSum(n = 5, target = 25)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 2, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [3, 1, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 5])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findValueOfPartition(nums = [1, 10, 100])",
        "findValueOfPartition(nums = [0,1])",
        "findValueOfPartition(nums = [2, 5, 1, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 4, 8])",
        "findValueOfPartition(nums = [1,10,3,2,5,10,5,9,3,8])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LLRR_\")",
        "furthestDistanceFromOrigin(moves = \"RRRRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LRL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LRL_RR\")",
        "furthestDistanceFromOrigin(moves = \"RLR\")",
        "furthestDistanceFromOrigin(moves = \"RLL_RRL__R\")",
        "furthestDistanceFromOrigin(moves = 'RLR_LLR')",
        "furthestDistanceFromOrigin(moves = \"RRR__LR_L\")",
        "furthestDistanceFromOrigin(moves = \"L_R__LL__R\")",
        "furthestDistanceFromOrigin(moves = \"RRRRRRRLRLLL_\")"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 2])",
        "minimumIndex(nums = [1,1,2,2,3,3])",
        "minimumIndex(nums = [1, 3, 5, 1, 3, 5, 1, 3, 5])",
        "minimumIndex(nums = [1, 1, 1, 1, 3, 3])",
        "minimumIndex(nums = [1, 2, 4, 1, 3, 4])",
        "minimumIndex(nums = [5, 5, 4, 4, 3])",
        "minimumIndex(nums = [3, 2, 2, 2, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 2, 3, 1, 2])",
        "minimumIndex(nums = [4, 3, 2, 2, 2, 2, 1, 2, 2])",
        "minimumIndex(nums = [5, 3, 3, 6, 5, 7])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "semiOrderedPermutation(nums = [1, 5, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 5, 4, 3, 2, 6])",
        "semiOrderedPermutation(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "semiOrderedPermutation(nums = [3, 1, 2, 6])",
        "semiOrderedPermutation(nums = [2, 1, 2, 1, 2, 1])"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n=3, k=13)"
    ]
}