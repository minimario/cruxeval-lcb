{
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"aabbb\", s2 = \"bbbaaa\", s3 = \"bbbaaa\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"cdef\", s3 = \"ghij\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"adc\", s3 = \"xyz\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"adc\", s3 = \"aad\")",
        "findMinimumOperations(s1 = \"abacus\", s2 = \"causal\", s3 = \"basis\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"bbab\")",
        "longestSemiRepetitiveSubstring(s = \"aabaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"bb\")",
        "longestSemiRepetitiveSubstring(s = \"bb\")",
        "longestSemiRepetitiveSubstring(s = \"abbbc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbaa\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"efg\", \"gfe\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"adfa\", \"abba\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"adc\", x = 1)",
        "minOperations(s1 = \"1101\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"cde\", x = 1)",
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"abcde\", s2 = \"bce\", x = 2)",
        "minOperations(s1 = \"1101\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"abcde\", s2 = \"acead\", x = 1)",
        "minOperations(s1 = \"abacaba\", s2 = \"aaaaa\", x = 2)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"cab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"ab\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,3,3,2,1,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [2, 1, 3, 3, 3, 2, 1])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [2,3,3,4,4,5,6])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 3])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 30, m = 7)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 10, m = 2)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"01110\", k = 2)",
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = \"111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"0110111\", k = 2)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abca\", s2 = \"bca\", s3 = \"cab\")",
        "findMinimumOperations(s1 = \"ababc\", s2 = \"cababc\", s3 = \"cbabc\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaaab\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 3, 5, 7, 9], nums2 = [2, 4, 6, 8, 10])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
        "minSum(nums1 = [2, 3, 4, 5, 6], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [5, 5, 1, 2, 2], nums2 = [3, 2, 2, 5, 5])"
    ],
    "sample_289": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"010\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"110011\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"00100\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [2, 4, 7, 9])",
        "maximumTripletValue(nums = [1, 3, 2, 1, -1, 1, -1])",
        "maximumTripletValue(nums = [1, 5, 3, 8, 2, 6, 3, 8, 2, 1])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"abc\", k = 1)",
        "beautifulSubstrings(s = \"aaaa\", k = 1)",
        "beautifulSubstrings(s = \"aibei\", k = 2)",
        "beautifulSubstrings(s = \"aaa\", k = 10)",
        "beautifulSubstrings(s = \"aaaaaaa\", k = 2)",
        "beautifulSubstrings(s = \"aabcbc\", k = 1)",
        "beautifulSubstrings(s = \"aabab\", k = 3)",
        "beautifulSubstrings(s = \"bcbcbcbc\", k = 100)",
        "beautifulSubstrings(s = \"bbbaa\", k = 2)",
        "beautifulSubstrings(s = \"ararare\", k = 3)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"111111\")",
        "minimumBeautifulSubstrings(s = \"111111\")",
        "minimumBeautifulSubstrings(s = \"1111111111\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"1111111\")",
        "minimumBeautifulSubstrings(s = \"1111111\")",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111\")",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111\")",
        "minimumBeautifulSubstrings(s = \"111001\")",
        "minimumBeautifulSubstrings(s = \"15372486\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[2, 1, 5], [3, 4, 6], [1, 2, 7]])",
        "matrixSum(a = [[2, 7, 6], [9, 5, 7], [4, 3, 1]])",
        "matrixSum(a = [[3, 1, 4], [5, 5, 5], [6, 5, 5]])",
        "matrixSum(a = [[2, 1, 4], [3, 6, 5], [1, 7, 3]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1,2,3], nums2 = [3,4,5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [5, 5, 5], nums2 = [5, 5, 5])",
        "minSum(nums1 = [5, 5, 5, 5, 5], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [1,2,1], nums2 = [3,4,3,2,2])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,1,1,1,1])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,1,1,1,1])",
        "minOperations(nums1 = [5, 6, 7, 8, 9], nums2 = [6, 5, 4, 3, 2, 1])",
        "minOperations(nums1 = [2, 4, 6], nums2 = [1, 3, 5])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 1])",
        "minOperations(nums1 = [5, 6, 7], nums2 = [4, 6, 7])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minOperations(nums1 = [1,1,1,1,1,1,1], nums2 = [6,5,5])",
        "minOperations(nums1 = [1, 1, 1, 1, 1, 1, 1], nums2 = [6, 5, 1, 1, 1, 1, 1])",
        "minOperations(nums1 = [2, 2, 3, 4, 5], nums2 = [2, 2, 3, 4, 5])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 4, 4, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "alternatingSubarray(nums = [1,2,2,3,3,3,4,4,4,4])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 3, 4, 4, 4])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 5, 5])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10, 12])",
        "alternatingSubarray(nums = [5, 6, 9, 1, 1, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 6, 3, 1], money = 10)",
        "buyChoco(prices = [1, 6, 3, 1], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 15)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 12)",
        "buyChoco(prices = [1, 6, 7, 8], money = 15)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 13)",
        "buyChoco(prices = [1, 6, 7, 8], money = 13)"
    ],
    "sample_302": [
        "countSeniors(details = [\"01-01-2005 00:00:00\", \"31-12-2004 00:00:00\"])",
        "countSeniors(details = [\"John18\", \"Jane15\", \"Jack20\"])",
        "countSeniors(details = [\"John Doe, 65\", \"Jane Doe, 72\", \"Jack, 60\"])",
        "countSeniors(details = [\"1990-01-01M30\", \"2005-12-15F75\"])",
        "countSeniors(details = [\"John Doe,1956\", \"Jane Doe,1969\", \"Joe Bloggs,1988\"])",
        "countSeniors(details = [\"mq1895021A\", \"px1876543B\", \"zy1995031C\"])",
        "countSeniors(details = [\"1988-08-13John\", \"1995-03-25Emily\", \"2000-12-25Michael\"])",
        "countSeniors(details = [\"450321-06-23T00:00:00-0500\", \"750215-12-21T00:00:00-0600\"])",
        "countSeniors(details = [\"1970-05-22T07:32:00-08:00\", \"1999-12-14T01:17:00-07:00\", \"1987-07-04T15:00:00-07:00\", \"1990-02-18T15:14:00-08:00\"])",
        "countSeniors(details = [\"1993-09-01T13:30:00-07:00\", \"1997-10-13T10:45:00-07:00\", \"1984-03-19T07:14:00-07:00\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"baby\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"a\", k = 1)",
        "beautifulSubstrings(s = \"babcbc\", k = 2)",
        "beautifulSubstrings(s = \"apple\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 100)",
        "beautifulSubstrings(s = \"beautifull\", k = 2)",
        "beautifulSubstrings(s = \"eoua\", k = 1)",
        "beautifulSubstrings(s = \"bbab\", k = 10)",
        "beautifulSubstrings(s = \"bvnfikswthfsbstnqvtr\", k = 3)"
    ],
    "sample_255": [
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [4,5,1,0,3])",
        "minimumSum(nums = [4,5,1,0,3])",
        "minimumSum(nums = [1,5,3,6,7,4])",
        "minimumSum(nums = [5,5,5,1,2,3,4])",
        "minimumSum(nums=[5,5,5,1,2])",
        "minimumSum(nums = [1, 5, 3, 2])",
        "minimumSum(nums = [1, 5, 3, 2, 6])",
        "minimumSum(nums=[5,3,8,4,7])",
        "minimumSum(nums = [1,5,7,1,5,9,7,8,12])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,2])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [5,6,7,8,9,10,11])",
        "alternatingSubarray(nums = [5,6,7,8,9])",
        "alternatingSubarray(nums = [1,3,5,7])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,7,6,5,4,3,2,1])",
        "alternatingSubarray(nums = [3,2,1,2,3])",
        "alternatingSubarray(nums = [1,2,3,5,6,7,8,10])",
        "alternatingSubarray(nums = [2,1,4,3,2,3,4])",
        "alternatingSubarray(nums = [2,3,4,5,7,8,10,11,12])",
        "alternatingSubarray(nums = [1, 2, 3, 1, 3, 2, 1])",
        "alternatingSubarray(nums = [1,2,2,1,3,4,4,5,6,7,8,9])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s=\"111\", k=1)",
        "shortestBeautifulSubstring(s = \"111111111111111111\", k = 2)",
        "shortestBeautifulSubstring(s = '1101011', k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"010010\")",
        "minimumSteps(s = \"00011\")",
        "minimumSteps(s = \"010001\")",
        "minimumSteps(s = \"11010\")",
        "minimumSteps(s = \"01001101\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabcaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"abbbabbbabb\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums=[1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,1,2])",
        "minGroupsForValidAssignment(nums = [3,2,1,4,3])",
        "minGroupsForValidAssignment(nums=[3,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [3, 5, 8, 10, 11, 12, 13, 14, 15])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3,4,4,4,5,5,6,6])",
        "minGroupsForValidAssignment(nums = [1,1,2,3,5,5,7,7,8,11])"
    ],
    "sample_307": [
        "countSeniors(details = [\"1990-01-01T00:00:00Z\", \"1950-10-01T00:00:00Z\"])",
        "countSeniors(details = [\"1990-01-01T12:34:56Z\", \"2000-02-02T13:45:67Z\"])",
        "countSeniors(details = [\"1990-01-01T07:32:23Z\", \"1991-12-31T08:15:57Z\"])",
        "countSeniors(details = [\"1990-01-01NYC\", \"2005-12-25NYC\", \"1968-07-03NYC\"])",
        "countSeniors(details = [\"1995-01-01M\", \"2000-12-15F\", \"1985-05-30U\"])",
        "countSeniors(details = [\"1995-01-01M\", \"1985-12-25F\", \"2001-10-25M\"])",
        "countSeniors(details = [\"20-12-2019\", \"15-02-2020\", \"25-10-2018\"])",
        "countSeniors(details = [\"1956-01-01M50\", \"1990-12-31M60\", \"2000-01-01M40\"])",
        "countSeniors(details = [\"1990-01-01M45\", \"1981-12-01M77\", \"2000-03-01M34\"])",
        "countSeniors(details = [\"John17\", \"Tom35\", \"Tim14\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"010011\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"10000\")",
        "minimumSteps(s = \"0100101\")",
        "minimumSteps(s = \"00010\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,1,2,2], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [0,1], moveTo = [1,2])",
        "relocateMarbles(nums=[1,2,3,2,1], moveFrom=[1,2], moveTo=[3,2])",
        "relocateMarbles(nums=[1,2,3,2,1], moveFrom=[2,3], moveTo=[1,2])",
        "relocateMarbles(nums = [1,2,3,2,3,1], moveFrom = [1,2], moveTo = [3,2])",
        "relocateMarbles(nums=[1,2,3,2,1,3,2,5,6,5,3,2,1,2,3,4,3,5,6], moveFrom=[1,2,3,4], moveTo=[2,3,4,5])",
        "relocateMarbles(nums = [1, 1, 2, 3, 4, 2, 1, 3, 4, 2, 1], moveFrom = [1, 2, 3, 4], moveTo = [2, 3, 4, 1])",
        "relocateMarbles(nums=[1,1,2,3,3,4,4,5,5,5,6], moveFrom=[1,3,4,5], moveTo=[2,3,4,5])",
        "relocateMarbles(nums=[1,2,2,1,3,2,5,6,5,3,2,4,4,4,3], moveFrom=[1,2,3,4,5,6], moveTo=[2,3,4,5,6,1,2])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [3, 2, 1, 4, 7, 8, 6, 5])",
        "alternatingSubarray(nums = [1, 3, 2, 3, 1])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"abc\", k = 4)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"aei\", k = 4)",
        "beautifulSubstrings(s = \"bcbcbc\", k = 5)",
        "beautifulSubstrings(s = \"leetcode\", k = 10)",
        "beautifulSubstrings(s = \"pqpqp\", k = 5)",
        "beautifulSubstrings(s = \"eaabaa\", k = 6)",
        "beautifulSubstrings(s = \"paradise\", k = 4)",
        "beautifulSubstrings(s = \"ttcaacc\", k = 4)",
        "beautifulSubstrings(s = \"trtrtrtrtrtrt\", k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [5, 10, 15])",
        "maximumTripletValue(nums = [1,2,3,6,9])",
        "maximumTripletValue(nums = [3, 4, 1, 2])",
        "maximumTripletValue(nums = [2, 6, 4, 8])",
        "maximumTripletValue(nums = [1, 4, 7, 2, 8])",
        "maximumTripletValue(nums = [1, 5, 9, 2, 6, 5, 2])",
        "maximumTripletValue(nums = [3, 1, 3, 0, 1, 9, 9, 2, 9, 8])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aab\"])",
        "maximumNumberOfStringPairs(words = [\"abab\", \"aabb\", \"abab\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"abba\", \"cdcd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"dcba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"dc\", \"e\", \"e\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 5)",
        "differenceOfSums(n = 100, m = 15)",
        "differenceOfSums(n = 100, m = 15)",
        "differenceOfSums(n = 100, m = 5)",
        "differenceOfSums(n = 20, m = 7)",
        "differenceOfSums(n = 3, m = 3)",
        "differenceOfSums(n = 100, m = 15)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 6, 3], money = 10)",
        "buyChoco(prices = [1, 6, 3, 1], money = 10)",
        "buyChoco(prices = [1, 6, 3, 1], money = 10)",
        "buyChoco(prices = [1, 6, 7], money = 10)",
        "buyChoco(prices = [1, 6, 5, 4, 3, 2, 1], money = 20)",
        "buyChoco(prices = [1, 6, 7], money = 12)",
        "buyChoco(prices = [1, 6, 5, 4, 3, 2, 1], money = 29)",
        "buyChoco(prices = [1, 6, 7, 8, 9, 10], money = 10)",
        "buyChoco(prices = [1, 6, 3, 1], money = 10)",
        "buyChoco(prices = [1, 6, 5, 3], money = 13)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"xyzz\", \"abc\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"apple\", \"banana\"])",
        "maximumNumberOfStringPairs(words = [\"banana\", \"apple\", \"banana\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"xyz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"wzy\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbbb\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\",\"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\",\"ef\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"eat\"])",
        "minimizeConcatenatedLength(words = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"])",
        "minimizeConcatenatedLength(words = [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"bc\",\"cd\",\"de\"])",
        "minimizeConcatenatedLength(words = [\"xy\", \"yz\", \"za\"])"
    ],
    "sample_323": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 19)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1027)",
        "isFascinating(n = 120)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abppplee\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabaaa\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"John Doe18\", \"Jane Doe17\", \"Jack Doe75\"])",
        "countSeniors(details = [\"john18\", \"alice17\", \"bob18\"])",
        "countSeniors(details = [\"JohnDoe64\", \"JaneDoe66\"])",
        "countSeniors(details = [\"mq34567890123\",\"px98765432109\",\"zy56789012345\"])",
        "countSeniors(details=[\"john70\", \"paul30\", \"george60\", \"ringo10\"])",
        "countSeniors(details = [\"1990-07-07T00:00:00Z\", \"1991-12-31T00:00:00Z\"])",
        "countSeniors(details = [\"1998-06-23T00:00:00Z\", \"1968-07-23T00:00:00Z\", \"2005-08-23T00:00:00Z\"])",
        "countSeniors(details = [\"1985-09-15T07:32:25Z\", \"2004-12-15T12:32:25Z\"])",
        "countSeniors(details = [\"MMA199201231234\",\"MMB199301123123\",\"MMC199401012312\"])",
        "countSeniors(details = [\"1947-12-25T00:00:00-03:00\", \"1987-11-15T01:30:00-04:00\", \"1970-05-15T13:00:00-03:00\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 3, 4, 3, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 3, 4, 3, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,3,3,3,2,3,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,3,5,7,9])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [4, 1, 7])",
        "minimumSum(nums = [5, 5])",
        "minimumSum(nums = [1, 5, 6, 8, 10])",
        "minimumSum(nums = [1, 5, 7, 8, 9])",
        "minimumSum(nums = [3, 1, 2, 4, 3])",
        "minimumSum(nums = [1, 5, 4, 5, 1, 5])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"abcd\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"cddc\", \"bba\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1001\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 4)",
        "shortestBeautifulSubstring(s = \"10111\", k = 4)",
        "shortestBeautifulSubstring(s = \"011011\", k = 4)",
        "shortestBeautifulSubstring(s = \"100111\", k = 4)",
        "shortestBeautifulSubstring(s = \"1011011\", k = 4)",
        "shortestBeautifulSubstring(s = \"101110\", k = 4)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 6)",
        "lexicographicallySmallestArray(nums = [5, 1, 3, 8, 6], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 3, 1, 8, 4], limit = 6)",
        "lexicographicallySmallestArray(nums = [2, 8, 5, 1, 3], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 5, 3, 8, 6], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 5, 1, 4, 2, 8, 9], limit = 1)",
        "lexicographicallySmallestArray(nums = [2, 5, 1, 3, 9, 8, 6], limit = 4)",
        "lexicographicallySmallestArray(nums = [2, 1, 5, 6, 4, 3], limit = 1)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[3, 2, 1], [2, 1, 0]])",
        "matrixSum(a = [[5, 6, 7], [8, 9, 10]])",
        "matrixSum(a = [[5, 7], [1, 2], [3, 4]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"bbc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"bba\", k = 4)",
        "beautifulSubstrings(s = \"bbc\", k = 2)",
        "beautifulSubstrings(s = \"aababca\", k = 10)",
        "beautifulSubstrings(s = \"adventure\", k = 3)",
        "beautifulSubstrings(s = \"aabbaa\", k = 1)",
        "beautifulSubstrings(s = \"ghouee\", k = 3)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"mom\", \"dad\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"zyx\", \"xzy\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"xyzz\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"adc\", \"badc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"zaa\",\"caa\",\"dc\",\"acd\",\"bad\",\"bda\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"cba\", \"dabbdabbac\", \"cdc\"])"
    ],
    "sample_325": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 12345679)",
        "isFascinating(n = 12345679)",
        "isFascinating(n = 1928)",
        "isFascinating(n = 1928)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [1, 1, 1, 4, 4, 4])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums=[[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[3,4,5],[5,6,7]])",
        "matrixSum(nums = [[1,2,3,4],[5,6,7,8],[9,10,11,12]])",
        "matrixSum(nums = [[3, 4, 5], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 1, 1, 1, 1, 1], b = [1, 1, 1, 1, 1, 1])",
        "minOperations(a = [5, 2, 4, 1], b = [1, 1, 1, 1])",
        "minOperations(a = [3, 2, 1, 0], b = [4, 3, 2, 1])",
        "minOperations(a = [1, 1, 1, 1], b = [0, 1, 0, 1])",
        "minOperations(a = [1, 3, 5, 7, 9], b = [1, 3, 5, 7, 9])",
        "minOperations(a = [3, 4, 2], b = [4, 3, 2])",
        "minOperations(a = [5, 2, 4, 1], b = [5, 2, 3, 1])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [0, 5, 3, 1, 2])",
        "minOperations(a = [5, 2, 6], b = [3, 4, 7])",
        "minOperations(a = [5, 2, 3, 1, 6], b = [3, 1, 2, 4, 6])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minOperations(nums1 = [2,3,5,7,9], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,1,1,1,1,1], nums2 = [1,1,1,1,1,1])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minOperations(nums1 = [5,3,2], nums2 = [1,1,1])",
        "minOperations(nums1 = [1,3,5,2,4,6], nums2 = [1,6,3,4,2,5])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [2, 1, 1, 1])",
        "minOperations(nums1 = [3, 5, 2, 4, 1], nums2 = [1, 5, 3, 4])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [4, 8, 3])",
        "maximumTripletValue(nums = [4, 2, 3, 10, 5])",
        "maximumTripletValue(nums = [1, 1, -3, 4, -10, 4, 5])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"1101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"110111\", k = 3)",
        "shortestBeautifulSubstring(s = \"110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 4)",
        "shortestBeautifulSubstring(s = \"1001\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110011\", k = 3)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4, 3])",
        "minimumSum(nums = [4, 3, 2, 6])",
        "minimumSum(nums = [2, 1, 3, 4, 5])",
        "minimumSum(nums = [4, 2, 3, 15, 1, 5])",
        "minimumSum(nums = [1, 5, 3, 6, 8, 10, 6])",
        "minimumSum(nums = [19, 28, 44, 8, 9, 33, 2])",
        "minimumSum(nums = [6, 4, 8, 2, 3, 7, 1, 5])",
        "minimumSum(nums = [10, 5, 10, 10, 10])",
        "minimumSum(nums = [5, 9, 6, 10, 2, 3, 4, 1, 7])",
        "minimumSum(nums = [10, 5, 13, 4, 7, 3, 11, 2, 8, 9])"
    ],
    "sample_291": [
        "minimumSteps(s = \"001001\")",
        "minimumSteps(s = \"001001\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"000110\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"00101100\")",
        "minimumSteps(s = \"11001100\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0110011\")",
        "minimumSteps(s = \"0100100101\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [3, 5, 2, 6], nums2 = [4, 1, 2, 3])",
        "minOperations(nums1 = [3, 5, 2, 6], nums2 = [4, 1, 3, 6])",
        "minOperations(nums1 = [2,3,2,4,3], nums2 = [5,1,2,3,4])",
        "minOperations(nums1 = [1,3,5,2,4], nums2 = [2,1,4,3,5])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [5,6,7,8,9,10])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [2,3,4,1])",
        "minOperations(nums1 = [3,9,9,2,5,5], nums2 = [1,8,8,2,2,7])",
        "minOperations(nums1 = [1, 3, 5, 6], nums2 = [2, 4, 5, 7])",
        "minOperations(nums1 = [3,1,2], nums2 = [2,3,4])",
        "minOperations(nums1 = [1,2,3,4,5,6,7,8,9], nums2 = [1,3,2,4,5,7,8,6,9])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[2, 1, 1], [1, 3, 1], [2, 4, 1]])",
        "findChampion(grid = [[2, 5, 7], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 1], [6, 7, 8]])",
        "findChampion(grid = [[1,0,1,0,1],[0,1,0,1,0],[1,0,1,0,1],[0,1,0,1,0],[1,0,1,0,1]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 0], [1, 1, 1, 0], [0, 0, 1, 0], [1, 0, 0, 0]])",
        "findChampion(grid = [[1, 2, 0, 0, 0], [0, 0, 2, 3, 0], [0, 0, 0, 0, 2], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0,0,1,0,0,1],[0,1,1,0,0,0],[0,0,1,1,0,0],[1,0,1,0,0,0],[0,0,1,1,0,0]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 20, m = 3)"
    ],
    "sample_292": [
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110011\")",
        "minimumSteps(s = \"1001000\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"10001\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"10101\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7])",
        "alternatingSubarray(nums = [2,4,6,8,10])",
        "alternatingSubarray(nums = [3, 2, 1, 4, 7, 6, 5])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16])",
        "alternatingSubarray(nums = [5, 6, 7, 8])",
        "alternatingSubarray(nums = [2, 1, 4, 7, 11])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 3, 2], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 1, 2, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 2, 1], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 5, 4], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [0, 1, 1, 2], moveFrom = [0, 2], moveTo = [1, 2])",
        "relocateMarbles(nums = [2, 2, 1], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [3, 1, 2, 3], moveFrom = [2, 3], moveTo = [4, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [2, 3], moveTo = [1, 3])",
        "relocateMarbles(nums = [5, 3, 2, 1, 6, 7], moveFrom = [1, 6], moveTo = [2, 7])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 3, 2, 4])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 5, 3, 9, 2])",
        "maximumTripletValue(nums = [1, 5, 3, 9, 2])",
        "maximumTripletValue(nums = [1, 2, 3, 2, 1, 3])",
        "maximumTripletValue(nums = [5, 2, 3, 1])",
        "maximumTripletValue(nums = [7, 1, 5, 9])",
        "maximumTripletValue(nums = [6, 9, 15, -2, 3, 8, 10])",
        "maximumTripletValue(nums = [3, 5, 2, 1])"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1]])",
        "findChampion(grid = [[0,0,0],[0,1,0],[0,0,0]])",
        "findChampion(grid = [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 1, 2], [0, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [5, 5, 5, 5, 5], nums2 = [1, 1, 1, 1, 1])",
        "minSum(nums1 = [1, 1, 1, 1, 1], nums2 = [2, 2, 2, 2, 2])",
        "minSum(nums1 = [5, 5, 5], nums2 = [1, 1, 1])",
        "minSum(nums1 = [2,2,2,2], nums2 = [1,1,1,1])",
        "minSum(nums1 = [5, 5, 5, 5], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [5,4,5], nums2 = [1,2,1])",
        "minSum(nums1 = [1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minSum(nums1 = [2,1,4,5], nums2 = [3,2,4,7])",
        "minSum(nums1 = [1, 5, 7, 8, 2, 3], nums2 = [2, 4, 1, 3, 2])"
    ],
    "sample_294": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"110011\")",
        "minimumSteps(s = \"10001\")",
        "minimumSteps(s = \"1001000\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"1000110\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 1, 0, 1], [0, 0, 0, 0], [0, 1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 1, 0, 1], [1, 0, 1, 0, 0], [0, 1, 0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1, 1],[0, 0, 1, 0],[1, 1, 0, 0]])",
        "findChampion(grid = [[1,1,1,1], [0,0,0,0], [1,1,1,1], [1,1,1,1]])",
        "findChampion(grid = [[0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 2, 0], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0,1,2,1],[1,2,1,2],[2,1,1,2]])",
        "findChampion(grid = [[0,1,1,0,1], [1,0,0,1,0], [1,1,0,0,0], [0,0,1,0,1], [1,0,1,0,0]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,1])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [2,3,5,7,11])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,3,3,3,4,4,4,4])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1,2,3,4], nums2 = [3,4,5,6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [0, 3, 2, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 3, 5, 7, 9])",
        "minSum(nums1 = [1,0,0,0,0,0,2], nums2 = [3,0,0,0,0,0,2])",
        "minSum(nums1 = [0, 1, 1, 1], nums2 = [0, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 1, 0, 0, 5])",
        "minSum(nums1 = [0, 2, 0, 0, 1, 0], nums2 = [0, 3, 0, 2, 1, 0])",
        "minSum(nums1 = [2, 0, 5, 7, 3, 0, 0, 2], nums2 = [5, 0, 7, 8, 0, 2, 0, 4])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [4, 2, 1], money = 5)",
        "buyChoco(prices = [1, 2, 3, 5, 6], money = 10)",
        "buyChoco(prices = [1, 6, 5, 1], money = 10)",
        "buyChoco(prices=[1, 2, 3], money=7)",
        "buyChoco(prices = [1, 6, 7, 8], money = 20)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"bba\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"aaa\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"aabca\", k = 3)",
        "beautifulSubstrings(s = \"bear\", k = 2)",
        "beautifulSubstrings(s = \"beau\", k = 5)",
        "beautifulSubstrings(s = \"aaaaaa\", k = 2)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdabce\")",
        "longestSemiRepetitiveSubstring(s = \"bbbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbb\")"
    ],
    "sample_341": [
        "longestString(x = 5, y = 6, z = 7)",
        "longestString(x = 5, y = 6, z = 7)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 5, y = 4, z = 3)",
        "longestString(x = 5, y = 6, z = 1)",
        "longestString(x = 3, y = 7, z = 2)",
        "longestString(x = 3, y = 4, z = 3)",
        "longestString(x = 2, y = 3, z = 7)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minSum(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minSum(nums1=[1,2,3,4], nums2=[5,6,7,8])",
        "minSum(nums1 = [4, 3, 10, 3, -1], nums2 = [11, 2, 1, 1])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 4, y = 3, z = 1)",
        "longestString(x = 4, y = 3, z = 1)",
        "longestString(x = 5, y = 7, z = 1)",
        "longestString(x = 10, y = 15, z = 2)",
        "longestString(x = 4, y = 7, z = 1)",
        "longestString(x = 2, y = 1, z = 3)",
        "longestString(x = 10, y = 3, z = 4)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1101\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11111\", k = 11)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)",
        "shortestBeautifulSubstring(s = \"11111111\", k = 11)",
        "shortestBeautifulSubstring(s = \"242525\", k = 3)"
    ],
    "sample_324": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 5, 7, 8, 9])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 5, 7, 8, 9])",
        "minimumSum(nums = [5, 5, 1, 1, 2, 3, 3])",
        "minimumSum(nums = [5, 5, 1, 2, 3, 4])",
        "minimumSum(nums = [5, 5, 5])",
        "minimumSum(nums = [4, 5, 1, 0, 3])",
        "minimumSum(nums = [3, 1, 3, 2, 4, 3])",
        "minimumSum(nums = [5,5,5,1,2,3])",
        "minimumSum(nums = [12, 1, 6, 3, 9, 10])"
    ],
    "sample_268": [
        "minSum(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [2, 4, 6, 8, 10])",
        "minSum(nums1 = [1,2,3,0,0,0], nums2 = [2,3,0,0,0,0])",
        "minSum(nums1 = [3, 1, 2, 1], nums2 = [1, 5, 1, 1])",
        "minSum(nums1=[1,1,1,1,1,1,1,1], nums2=[1,1,1,1,1,1,1,1])",
        "minSum(nums1 = [1,0,1,1,1,1,1,1], nums2 = [0,1,1,1,1,1,1,1])",
        "minSum(nums1 = [0,0,0,1], nums2 = [1,5,1])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abce\", s3 = \"abcz\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abc\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"xycd\", s3 = \"pqrs\")"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, -2, -3, 4, -5])",
        "maxStrength(nums = [1, -2, 3, -4])",
        "maxStrength(nums = [1, -2, 3, -4])",
        "maxStrength(nums = [1, -2, 3, 4, -5, -6])",
        "maxStrength(nums = [1, -2, 3, 4, -5, -6])",
        "maxStrength(nums = [1, 3, 3, -1])",
        "maxStrength(nums = [1, 2, -3, 4, -5])",
        "maxStrength(nums = [3, -1, -2, 4, -5])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [2, 1, 3, 2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 1, 2, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1,2,3,2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [3, 2, 1, 4], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [3, 3, 2, 1, 5], moveFrom = [3, 2], moveTo = [4, 5])",
        "relocateMarbles(nums = [2,1,3,2], moveFrom = [2,1], moveTo = [3,4])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [1, 2, 5, 5, 6, 8, 9], moveFrom = [1, 2], moveTo = [5, 6])",
        "relocateMarbles(nums=[9, 5, 6, 8, 5], moveFrom=[5, 6], moveTo=[8, 9])",
        "relocateMarbles(nums = [8, 9, 5, 6], moveFrom = [5, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [9, 5, 6, 8, 5], moveFrom = [6, 5], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 5, 8, 9, 9], moveFrom = [5, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 6, 8, 5], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 5, 6, 9, 8, 9], moveFrom = [5, 6], moveTo = [6, 9])",
        "relocateMarbles(nums = [9, 5, 6, 5, 8, 9, 8, 9], moveFrom = [5, 9], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9, 1, 1, 1, 2, 2], moveFrom = [5, 6], moveTo = [8, 9])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 12)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 12)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 11)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 12)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 6, 3, 1, 2, 7], money = 15)",
        "buyChoco(prices = [1, 6, 3, 1, 2, 7, 2], money = 23)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 3, 5], [2, 4, 6], [1, 2, 3]])",
        "matrixSum(nums = [[7, 1, 3], [2, 9, 8], [5, 4, 6]])",
        "matrixSum(nums = [[3, 3, 2, 2], [1, 1, 1, 1], [3, 3, 2, 2]])",
        "matrixSum(nums = [[7, 1, 3, 9], [3, 8, 6, 2], [9, 7, 9, 3]])",
        "matrixSum(nums = [[7, 4, 2], [1, 5, 9], [3, 8, 6]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 6, 7], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 6, 5, 1], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 6, 7], money = 11)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 10)",
        "buyChoco(prices = [1, 6, 5, 4, 3, 2, 1], money = 29)",
        "buyChoco(prices = [1, 6, 5, 2], money = 20)",
        "buyChoco(prices = [1, 2, 3], money = 6)",
        "buyChoco(prices = [1, 6, 5, 7, 2], money = 10)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,5,1,5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 3, 6, 7, 4])",
        "minimumSum(nums = [1,3,5,2,4,6])",
        "minimumSum(nums = [4, 2, 3, 1])",
        "minimumSum(nums = [12, 24, 8, 33])",
        "minimumSum(nums=[5,4,2,1,3])",
        "minimumSum(nums=[1,2,3,3,4,5,6])",
        "minimumSum(nums = [1, 5, 3, 6, 2, 3, 2, 1])",
        "minimumSum(nums = [12, 3, 6, 9, 3, 1])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [3, 1, 2, 4, 5])",
        "alternatingSubarray(nums = [2, 4, 1, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 4, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [0, 1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1, 2, 3, 1, 3, 4, 1, 3])",
        "alternatingSubarray(nums = [1, 3, -1, -1, 2, 3, 5, 6, 6, 7])",
        "alternatingSubarray(nums = [0, 1, 1, 2, 3, 3, 3, 2, 1, 1, 0, 0])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3, 4], [5, 6, 7, 8]])",
        "matrixSum(nums = [[3, 1, 2, 4, 5], [1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3]])",
        "matrixSum(nums = [[1, 2, 3], [2, 2, 3], [3, 2, 3]])",
        "matrixSum(nums = [[5,7,10],[9,8,6],[4,3,2]])",
        "matrixSum(nums = [[7, 1, 3, 9], [2, 5, 9, 8], [8, 7, 6, 3]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 6, 5, 1], money = 10)",
        "buyChoco(a = [1, 6, 5, 1], money = 10)",
        "buyChoco(a = [1, 6, 5, 1], money = 10)",
        "buyChoco(a = [1, 6, 5, 2], money = 15)",
        "buyChoco(a = [1, 6, 5, 3], money = 20)",
        "buyChoco(a = [1, 7, 1], money = 10)",
        "buyChoco(a = [1, 6, 3, 5], money = 10)",
        "buyChoco(a = [1, 6, 7, 8], money = 10)",
        "buyChoco(a = [1, 2, 4, 7, 9], money = 15)",
        "buyChoco(a = [3, 2, 2, 1], money = 7)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [2, 3, 4])",
        "minGroupsForValidAssignment(nums = [2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 4])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 3, 5, 8, 13])",
        "minGroupsForValidAssignment(nums = [2,3,5,7])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 7, 1, 2, 3])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 1, 0, 0]])",
        "findChampion(grid = [[1, 1, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,1,0],[0,0,0,0,0,1]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 3, 3, 7, 5, 9])",
        "maxStrength(nums = [2, 3, 3, 4, 7])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\", \"jkl\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"apple\", \"mango\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"aaa\", \"bbb\", \"ccc\"])",
        "minimizeConcatenatedLength(words = [\"xyz\", \"abc\", \"pqr\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"tal\", \"wal\"])",
        "minimizeConcatenatedLength(words = [\"adcba\", \"bcd\", \"acdb\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"efg\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"adc\", s3 = \"adb\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"b\", s3 = \"c\")",
        "findMinimumOperations(s1 = \"abca\", s2 = \"cabc\", s3 = \"babc\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 3, 4, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 1, 3])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 4, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 3, 4, 4, 4, 5])",
        "alternatingSubarray(nums = [2, 2, 1, 3, 3])",
        "alternatingSubarray(nums = [5, 6, 7, 1, 8, 9])",
        "alternatingSubarray(nums = [2, 3, 4, 2, 4])",
        "alternatingSubarray(nums = [3, 1, 2, 4, 3, 2, 1, 4, 3, 2, 1, 2, 4])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 1, 0, 1], [1, 0, 1, 0], [1, 1, 1, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]])",
        "findChampion(grid = [[0, 1, 0, 1], [0, 1, 0, 1], [1, 0, 1, 0], [1, 0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 1], [0, 1, 1, 0], [1, 0, 0, 1], [0, 1, 1, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 1, 0, 0], [1, 1, 1, 0], [1, 0, 0, 0]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"ID1234567890123\", \"ID1234567890135\", \"ID1234567890140\"])",
        "countSeniors(details = [\"johnDoe20\", \"janeDoe17\", \"johnSmith23\"])",
        "countSeniors(details = [\"01/12/2005 60\", \"29/12/2000 70\"])",
        "countSeniors(details = [\"1900-01-01T00:00:00Z\", \"2000-05-05T00:00:00Z\"])",
        "countSeniors(details = [\"02/10/2005 62:00 PM\", \"03/11/2006 12:30 AM\"])",
        "countSeniors(details = [\"1991-12-01T00:00:00Z\", \"1997-04-19T00:00:00Z\"])",
        "countSeniors(details = [\"1999-05-05 12:00:00PM\", \"2002-04-15 12:00:00PM\"])",
        "countSeniors(details = [\"01-11-2000John\", \"22-05-1990Emily\", \"30-12-1985Adam\"])",
        "countSeniors(details = [\"1998-05-12T00:00:00.000Z\", \"2000-10-20T00:00:00.000Z\", \"1985-12-31T00:00:00.000Z\", \"1999-01-01T00:00:00.000Z\"])",
        "countSeniors(details = [\"18-03-2020 12:30PM\",\"05-08-2019 1:35PM\",\"12-03-2021 3:45PM\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"abcde\", k = 2)",
        "beautifulSubstrings(s = \"bcbcbc\", k = 2)",
        "beautifulSubstrings(s = \"apple\", k = 2)",
        "beautifulSubstrings(s = \"aeiouuo\", k = 2)",
        "beautifulSubstrings(s = \"aei\", k = 3)",
        "beautifulSubstrings(s = \"aeea\", k = 2)",
        "beautifulSubstrings(s = \"bbaaeeeiou\", k = 2)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"1001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1100\", k = 2)",
        "shortestBeautifulSubstring(s = \"011011\", k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10111\", k = 4)",
        "shortestBeautifulSubstring(s = \"1101111\", k = 4)",
        "shortestBeautifulSubstring(s=\"1111\", k=1)",
        "shortestBeautifulSubstring(s = \"11111\", k = 1)",
        "shortestBeautifulSubstring(s='0111', k=2)",
        "shortestBeautifulSubstring(s=\"1101011\", k=3)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"efg\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bca\"])",
        "minimizeConcatenatedLength(words = [\"banana\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\", \"ef\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"na\", \"na\"])",
        "minimizeConcatenatedLength(words = [\"aa\", \"ab\", \"cd\", \"dc\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"ant\", \"bad\", \"good\"])"
    ],
    "sample_327": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 198)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3], [4,5,6], [7,8,9]])",
        "matrixSum(nums = [[7,2,1],[3,4,9],[8,5,6]])",
        "matrixSum(nums = [[7, 1, 3], [2, 9, 8], [5, 4, 6]])",
        "matrixSum(nums = [[5, 1, 3], [2, 1, 1], [1, 1, 1]])",
        "matrixSum(nums = [[1,3,5],[2,4,6],[3,6,9]])",
        "matrixSum(nums = [[3, 1, 2], [1, 1]])",
        "matrixSum(nums = [[7, 4, 9], [3, 8, 1], [6, 5, 2]])"
    ],
    "sample_326": [
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 198)",
        "isFascinating(n = 198)",
        "isFascinating(n = 248)",
        "isFascinating(n = 21)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0,1,0],[0,1,1],[1,0,0]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1]])",
        "findChampion(grid = [[0, 0, 1, 0], [1, 0, 1, 0], [1, 1, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [5, 5, 1, 1, 5])",
        "minimumSum(nums = [5, 5, 1, 2, 3, 4])",
        "minimumSum(nums = [1, 5, 3, 6, 9, 2])",
        "minimumSum(nums = [1, 5, 3, 6, 9, 2])",
        "minimumSum(nums = [5, 5, 1, 0, 2])",
        "minimumSum(nums = [5, 5, 1, 2, 3])",
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [3, 5, 1, 4, 2])",
        "minimumSum(nums = [3,5,2,4,1])"
    ],
    "sample_322": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_248": [
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 2)",
        "minOperations(s1 = \"1101\", s2 = \"101\", x = 3)",
        "minOperations(s1 = \"10001\", s2 = \"1100\", x = 1)",
        "minOperations(s1 = \"00110\", s2 = \"01010\", x = 2)",
        "minOperations(s1 = \"1101\", s2 = \"0010\", x = 1)",
        "minOperations(s1 = \"0001010\", s2 = \"0100101\", x = 3)",
        "minOperations(s1 = \"10010101\", s2 = \"01011010\", x = 2)",
        "minOperations(s1 = \"110101\", s2 = \"001101\", x = 4)",
        "minOperations(s1 = \"01101\", s2 = \"010110\", x = 1)",
        "minOperations(s1 = \"0001010111\", s2 = \"1010010110\", x = 3)"
    ],
    "sample_342": [
        "longestString(x = 10, y = 15, z = 5)",
        "longestString(x = 10, y = 15, z = 5)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 5, y = 10, z = 15)",
        "longestString(x = 2, y = 5, z = 1)",
        "longestString(x = 2, y = 4, z = 2)",
        "longestString(x = 15, y = 10, z = 5)",
        "longestString(x = 5, y = 5, z = 1)",
        "longestString(x = 3, y = 7, z = 3)",
        "longestString(x=5, y=4, z=3)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 5, 6, 6, 8, 8, 9, 9], moveFrom = [5, 6], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 5, 6, 9, 8], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [8, 5, 6, 5, 9, 8], moveFrom = [5, 8], moveTo = [6, 9])",
        "relocateMarbles(nums=[5, 5, 6, 8, 9], moveFrom=[5, 5], moveTo=[6, 8])",
        "relocateMarbles(nums = [5, 1, 8, 9, 5, 6], moveFrom = [1, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 5, 8, 9], moveFrom = [1, 5], moveTo = [4, 9])",
        "relocateMarbles(nums = [5, 1, 6, 5, 8, 9, 1], moveFrom = [1, 5], moveTo = [6, 5])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John Doe62\", \"Jane Doe65\"])",
        "countSeniors(details = [\"mq1990\", \"px2000\", \"zy2200\"])",
        "countSeniors(details = [\"1986JohnDoe60\", \"1985JaneDoe62\"])",
        "countSeniors(details = [\"mq456321\", \"px321456\", \"zy789654\"])",
        "countSeniors(details = [\"m15_06_1986\", \"p18_06_1990\", \"z25_06_1967\"])",
        "countSeniors(details = [\"1990-10-25\", \"1979-09-12\", \"2005-06-01\"])",
        "countSeniors(details = [\"1956-09-25T00:00:00-03:00\", \"2002-07-04T00:00:00-03:00\", \"1979-01-13T00:00:00-03:00\"])",
        "countSeniors(details = [\"19242310121S\", \"19492310121S\", \"19242310123S\"])",
        "countSeniors(details = [\"1995030312123456\", \"1975082512123456\", \"2005121512123456\"])",
        "countSeniors(details = [\"192612230583\", \"193910200980\", \"196011230481\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"abc12\", \"def24\", \"ghi36\", \"jkl48\"])",
        "countSeniors(details = [\"mq45\", \"px99\", \"zy77\"])",
        "countSeniors(details = [\"123460\", \"123459\", \"153460\"])",
        "countSeniors(details = [\"John Doe62\", \"Mary65\", \"Jane67\", \"Jake69\"])",
        "countSeniors(details = [\"mq1294\", \"px4567\", \"zy7890\"])",
        "countSeniors(details = [\"John Doe,63\", \"Jane Smith,53\", \"Jack,73\"])",
        "countSeniors(details = [\"1995\u5e7410\u67081\u65e5\", \"1978\u5e745\u670815\u65e5\"])",
        "countSeniors(details = [\"1977-08-18\", \"1996-09-17\", \"2000-07-08\"])",
        "countSeniors(details = [\"18-56\", \"54-90\", \"67-33\", \"77-46\", \"80-65\", \"56-99\"])",
        "countSeniors(details = [\"10192024\", \"10322034\", \"18201960\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 5, 5, 6, 6, 6, 8, 8, 8, 9, 9, 9], moveFrom = [5, 6], moveTo = [6, 8])",
        "relocateMarbles(nums = [8, 5, 6, 9, 1], moveFrom = [5, 6], moveTo = [6, 9])",
        "relocateMarbles(nums = [1, 2, 3, 5, 6, 7, 8, 9], moveFrom = [2, 5], moveTo = [6, 9])",
        "relocateMarbles(nums = [8, 9, 6, 5], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [2, 1], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 4, 3, 2, 1, 6, 7, 8, 9], moveFrom = [2, 1], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 1, 2, 5, 8], moveFrom = [1, 2], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 1, 5, 2, 6, 3, 7, 4, 8, 5], moveFrom = [1, 2, 3, 4], moveTo = [2, 3, 4, 5])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"aaaaa\", s2 = \"bbbbb\", s3 = \"aaa\")",
        "findMinimumOperations(s1=\"abc\", s2=\"def\", s3=\"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"bab\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"aabbb\", s2 = \"bbbaaa\", s3 = \"aabbbb\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"bce\", s3 = \"ce\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"aefgh\", s3 = \"ijklmn\")"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 0])",
        "minimumRightShifts(nums = [1,2,3,4])",
        "minimumRightShifts(nums = [7, 1, 3])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [7, 1, 3, 2, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,5,4,0])",
        "minimumRightShifts(nums = [3, 1, 2, 5, 4])"
    ],
    "sample_453": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"abac\")",
        "minChanges(s = \"bri\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 11], target = 15)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 3, 7, 13, 19], target = 21)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 10], target = 14)",
        "lengthOfLongestSubsequence(nums = [2, 7, 4], target = 10)"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"Ymplh\")",
        "sortVowels(s = \"mYpH\")",
        "sortVowels(s = 'yMpHa')",
        "sortVowels(s = \"My name is Khan\")",
        "sortVowels(s=\"Hellopy\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 7, 9], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 5, 7, 8, 9, 2, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 7, 13, 19], target = 25)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 7, 2], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 3, 7, 13, 19], target = 20)",
        "lengthOfLongestSubsequence(nums = [1,3,7,13,19,27,37], target = 56)",
        "lengthOfLongestSubsequence(nums = [1,3,7,13,1,9,1,1,3,7,0,9], target = 25)"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4], t = 5)",
        "countPairs(nums=[1, 2, 3, 4, 5], t=6)",
        "countPairs(nums=[1,2,3,4,5], t=10)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1, 5, 7, 8, 9], t = 16)",
        "countPairs(nums = [1, 1, 2, 3, 4], t = 6)",
        "countPairs(nums=[1, 1, 2, 2, 3, 3], t=5)",
        "countPairs(nums=[1, 1, 1, 2, 2, 3, 3], t=4)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 5, 6])",
        "isGood(nums = [0, 1, 2, 4, 5, 6])",
        "isGood(nums = [0, 1, 2, 3, 5, 6, 7, 8, 9])",
        "isGood(nums = [1, 2, 3, 5, 6, 7, 8])",
        "isGood(nums = [3, 1, 2, 4, 5])",
        "isGood(nums = [3, 0, 1, 2])",
        "isGood(nums = [3, 1, 2, 5, 4])",
        "isGood(nums = [3, 4, 2, 1, 5])"
    ],
    "sample_369": [
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"Ymplh\")",
        "sortVowels(s = \"yMpH\")",
        "sortVowels(s = 'lpYmh')",
        "sortVowels(s = \"HEllo\")",
        "sortVowels(s = \"MYPYTHON\")",
        "sortVowels(s = 'YmpHlLlY')",
        "sortVowels(s = \"Apple\")",
        "sortVowels(s = \"program\")",
        "sortVowels(s = \"mYPHeL\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [2, 1, 3])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [5, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [5, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 1, 3])"
    ],
    "sample_448": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(\"abc\")",
        "minChanges(\"abc\")",
        "minChanges(\"aaa\")",
        "minChanges(\"aaabb\")",
        "minChanges(\"aabbb\")",
        "minChanges(\"aabbbcc\")",
        "minChanges(\"aaabbb\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"xyz\")",
        "canBeEqual(s1 = \"abc\", s2 = \"xyz\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"cba\", s2 = \"bac\")",
        "canBeEqual(s1 = \"eidnatn\", s2 = \"nativan\")",
        "canBeEqual(s1 = \"axbycz\", s2 = \"zyxnco\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 2])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3,5,5,5,5])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3,1,2,3,5])",
        "minLengthAfterRemovals(nums = [2, 1, 3])",
        "minLengthAfterRemovals(nums = [2,2,3,3,4,4,4,4,5,5,5,5,5,5])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3,2,3,2,1,1])",
        "minLengthAfterRemovals(nums = [2,3,4,3,2,3,4,3,2,3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6])",
        "minLengthAfterRemovals(nums = [1, 0, 0, 1, 0, 1, 1, 1])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 2, 1])",
        "isGood(a = [1, 2, 3, 3, 2, 1])",
        "isGood(a = [2, 2, 1])",
        "isGood(a = [1, 3, 2, 3, 2, 4])",
        "isGood(a = [1, 2, 3, 2, 1, 5, 6])",
        "isGood(a = [5, 5, 5, 5, 3, 3])",
        "isGood(a = [1, 1, 2, 3, 4, 4, 4, 5, 6, 6])",
        "isGood(a = [3, 1, 2, 2, 3, 3])",
        "isGood(a = [5, 5, 3, 5, 5, 5, 3, 5, 5, 5, 5])",
        "isGood(a = [1, 1, 3, 3, 2, 2, 3, 4, 4, 2, 2, 2, 5, 5, 5, 5])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 4)",
        "minOperations(nums=[2,3,1,2,4,3], k=3)",
        "minOperations(nums=[2,3,1,4,3], k=4)",
        "minOperations(nums = [1,2,3,4,5,6], k = 5)",
        "minOperations(nums = [3, 1, 4, 1], k = 4)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=2)",
        "minOperations(nums = [1,3,4,3,2,3,5,4,2,1,2], k = 3)",
        "minOperations(nums=[1, 1, 3, 2, 1, 1, 1, 1], k=4)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1, 2, 3, 4])",
        "findMaximumLength(nums = [1,2,3,2,1])",
        "findMaximumLength(nums = [7, 2, 5, 10, 8])",
        "findMaximumLength(nums = [2, 7, 10, 15])",
        "findMaximumLength(nums=[1,2,3,2,3,4,2,1])",
        "findMaximumLength(nums=[1,2,3,2,1,3])",
        "findMaximumLength(nums = [4,1,3,2,6,7])",
        "findMaximumLength(nums=[1,2,3,2,3,4,2,3,4,5])",
        "findMaximumLength(nums = [1,3,5,6,7,8,9,10])",
        "findMaximumLength(nums = [1,2,3,1,3,2,1,1])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 3, 2, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 4])",
        "maxSubarrays(nums = [2,4,7,8,10])",
        "maxSubarrays(nums = [2, 4, 5, 1, 7, 8])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 3, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1,2,2,4,4,4,4])",
        "maxSubarrays(nums = [2, 3, 4, 6, 6, 7, 10, 12])",
        "maxSubarrays(nums = [2,3,4,3,2,3,4,2,3,2,3,4,1,-2,2,3,4])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bca\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abz\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=3, k=5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 5)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums=[1, 2, 3, 4, 5], m=2, k=3)",
        "maxSum(nums=[4, 2, 2, 7, 7, 1, 2, 8, 1, 2, 8, 1], m=2, k=7)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pineapple\"], x = \"a\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4], k = 5)",
        "minOperations(nums = [3, 1, 4, 1, 5], k = 5)",
        "minOperations(nums = [3, 1, 4, 1, 5], k = 5)",
        "minOperations(nums = [2, 3, 1, 5, 3, 2], k = 4)",
        "minOperations(nums = [2, 3, 1, 5, 4], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 6)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "minOperations(nums = [2, 3, 1, 4, 2], k = 7)",
        "minOperations(nums=[1, 2, 3, 4], k=6)",
        "minOperations(nums = [2, 2, 3, 5], k = 5)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [3, 1, 4, 2, 3], k = 3)",
        "minOperations(nums = [2, 2, 2, 3], k = 3)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [3, 2, 1, 4, 4, 3])",
        "minimumSeconds(nums = [1, 2, 1, 3, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 7, 8, 9, 9, 9])",
        "minimumSeconds(nums = [5, 1, 1, 5, 2, 3, 1, 1, 2, 2, 1])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 3, 2, 4], target = 7)",
        "countPairs(nums = [2, 7, 11, 15], target = 20)",
        "countPairs(nums = [1, 3, 5, 7], target = 6)",
        "countPairs(nums = [2, 3, 1, 5], target = 7)",
        "countPairs(nums = [2, 3, 1, 5, 6], target = 8)",
        "countPairs(nums = [1, 3, 2, 4, 6], target = 10)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"banana\"], x = \"p\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"pineapple\"], x = \"p\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"I love you\", \"You love me\"], x = \"ove\")"
    ],
    "sample_372": [
        "sortVowels(s = \"LEOtcede\")",
        "sortVowels(s = \"LEOtcede\")",
        "sortVowels(s = \"Eleetcede\")",
        "sortVowels(s = \"Eleetcede\")",
        "sortVowels(s = \"Leo\")",
        "sortVowels(s = \"Leo\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"TrOdY\")",
        "sortVowels(s = \"Alejandro\")",
        "sortVowels(s = \"codeLE\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2])",
        "minLengthAfterRemovals(nums = [2,2,1,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 5, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 2])",
        "minLengthAfterRemovals(nums = [2,2,1])",
        "minLengthAfterRemovals(nums = [2, 1, 3, 1, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 3, 3])"
    ],
    "sample_452": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"bcb\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"abccba\")",
        "minChanges(s = \"010\")",
        "minChanges(s = \"010\")"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 5, 7, 8], target = 6)",
        "countPairs(nums = [1, 2, 7, 9], target = 11)",
        "countPairs(nums = [1, 2, 7, 1], target = 11)",
        "countPairs(nums = [1, 2, 7, 11, 15], target = 18)"
    ],
    "sample_427": [
        "minOperations(nums = [2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,1,1,2,2,2,3,3])",
        "minOperations(nums = [1,1,1,2,2,2,3,3,3])",
        "minOperations(nums = [2,2,2,2])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [3,3,3,3,3,3,3,3])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1,2,3,1,2,3,2,3,2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 2, 3, 3, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,1,1])",
        "minLengthAfterRemovals(nums = [0,0,1,1])",
        "minLengthAfterRemovals(nums = [2,2,1,1,3,3,3,3,2,2,2,2,1,1])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 5, 6, 8, 10])",
        "minimumCoins(prices = [1, 1, 1, 4])",
        "minimumCoins(prices = [3, 1, 4, 3, 5])",
        "minimumCoins(prices = [3, 1, 4, 3, 5])",
        "minimumCoins(prices = [3, 1, 4, 3, 5, 4])",
        "minimumCoins(prices = [2, 3, 0, 2, 1, 2, 2, 2, 1, 2])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"is\", \"awesome\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"grapefruit\"], x = \"p\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [2, 3, 1, 2, 4, 3], k = 3)",
        "minOperations(nums = [2,3,1,4,3], k = 4)",
        "minOperations(nums=[3, 1, 4, 1, 5], k=3)",
        "minOperations(nums = [1, 1, 2, 3], k = 3)",
        "minOperations(nums = [1, 1, 3, 3, 3, 2, 4, 4, 4, 2], k = 3)",
        "minOperations(nums = [2, 7, 11, 6], k = 9)",
        "minOperations(nums = [2, 7, 10, 2, 1, 5], k = 3)",
        "minOperations(nums = [2, 3, 1, 4, 2], k = 3)",
        "minOperations(nums = [1,3,5], k = 4)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1, 2, 3, 5, 6])",
        "isGood(nums = [1, 2, 4, 3])",
        "isGood(nums = [5, 4, 3, 2, 1])",
        "isGood(nums = [5, 4, 3, 2, 1])",
        "isGood(nums = [3, 2, 1, 4, 5])",
        "isGood(nums = [1, 2, 3, 5, 6, 7])",
        "isGood(nums = [1, 2, 4, 6])",
        "isGood(nums = [1, 2, 3, 4, 6])",
        "isGood(nums = [5, 2, 3, 1, 4])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums=[1,2,3,7,11], target=11)",
        "lengthOfLongestSubsequence(nums = [1,3,5,7,9,2,4,6,8,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,7,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 10, 13, 15], target = 21)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=8)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [4,3,2,1])",
        "isGood(nums = [4, 2, 3, 1])",
        "isGood(nums = [2, 3, 4, 5, 7])",
        "isGood(nums = [4, 5, 6])",
        "isGood(nums=[3, 2, 4, 6, 5])",
        "isGood(nums = [5,4,2,3,1])",
        "isGood(nums=[3, 2, 1, 4])",
        "isGood(nums=[1, 2, 3, 4, 5, 5, 7, 8])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 1, 1, 3, 3, 3, 7, 7, 7])",
        "maxSubarrays(nums = [1, 2, 3, 2, 1, 2])",
        "maxSubarrays(nums = [1, 1, 1, 3, 3, 3, 7, 7])",
        "maxSubarrays(nums = [1, 2, 3, 4, 2, 3, 4])",
        "maxSubarrays(nums = [1, 0, 1, 2, 3, 5, 6])",
        "maxSubarrays(nums = [2, 4, 6, 2, 2, 4, 6, 2])",
        "maxSubarrays(nums = [1, 0, 2, 1, 3, 2, 0, 1])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7], target = 6)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 7], target=6)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 7], target=6)",
        "lengthOfLongestSubsequence(nums=[1,2,3,7,11], target=11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,8], target = 10)",
        "lengthOfLongestSubsequence(nums=[1, 3, 5, 7], target=6)",
        "lengthOfLongestSubsequence(nums = [1,5,7,8,9,2,3,4,6,10,11], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,3,7,13,19,27,37,42], target = 7)"
    ],
    "sample_450": [
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aabbbcc\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aaabbb\")"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 6)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 3, limit = 2)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 2, 3, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 2, 3, 4, 1, 2])",
        "sumCounts(nums = [2, 5, 3, 1, 2])"
    ],
    "sample_449": [
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"010\")",
        "minChanges(s = \"1101\")",
        "minChanges(s = \"abab\")",
        "minChanges(\"abc\")"
    ],
    "sample_425": [
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [3, 2, 1, 2])",
        "minOperations(nums = [1, 2, 3, 2, 2])",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azbc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azd\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"adz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"zz\", str2 = \"aab\")",
        "canMakeSubsequence(str1 = \"z\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"yxzy\", str2 = \"azxzy\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,1,2,2,4,4,4,7,7])",
        "minimumSeconds(nums=[1,1,2,2,3,3])",
        "minimumSeconds(nums = [1,3,2,2,3,1])",
        "minimumSeconds(nums = [1,2,3,2,3,4,2,5])",
        "minimumSeconds(nums = [2,2,3,4,5])",
        "minimumSeconds(nums = [1,3,6,3,4,1,2,3,1])",
        "minimumSeconds(nums = [1, 2, 3, 3, 2, 3, 4, 1, 2])",
        "minimumSeconds(nums = [1, 3, 2, 4, 1])",
        "minimumSeconds(nums=[2, 3, 2, 2, 4, 2, 5])",
        "minimumSeconds(nums=[5, 1, 2, 3, 4, 1, 5, 1])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,7,11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7], target = 7)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,3,5,7,9], target = 6)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 7)",
        "lengthOfLongestSubsequence(nums=[1,2,3,4,5], target=5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3,7,7,1,2,3",
        "lengthOfLongestSubsequence(nums=[1,3,4,7,11,12], target=12)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,7,1,2,3,7,7,10], target = 10)"
    ],
    "sample_370": [
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"Leo\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"tea\")",
        "sortVowels(s = 'Eleet')",
        "sortVowels(s = \"goodLuck\")",
        "sortVowels(s = \"programming\")",
        "sortVowels(s=\"programming\")",
        "sortVowels(s = \"EdgcLeOtS\")"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [2, 2, 3, 7], k = 4)",
        "minOperations(nums = [2, 2, 1, 1], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 7)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 10)",
        "minOperations(nums = [1, 1, 3, 4, 2, 2, 7], k = 4)",
        "minOperations(nums = [2, 3, 1, 2], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations(nums = [2, 2, 3, 5, 7], k = 5)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 4, 3, 2, 1])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 4, 3, 2, 1])",
        "maxSubarrays(nums = [1, 1, 2, 3, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 2, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [5,1,3,4,2,6,7])",
        "maxSubarrays(nums = [2, 3, 2, 3, 5])",
        "maxSubarrays(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "maxSubarrays(nums = [1, 2, 3, 4, 4, 4, 4])",
        "maxSubarrays(nums = [3, 3, 1, 1, 5, 5, 1, 1, 5])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 3)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [1, 2]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 3], [3, 4]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,1],[2,2],[3,3],[4,4]], k = 4)",
        "countPairs(coordinates = [[2, 3], [3, 3], [4, 4], [1, 1], [2, 2], [3, 1]], k = 2)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,11], target = 11)",
        "lengthOfLongestSubsequence(nums = [2, 2, 3, 3, 3], target = 6)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums=[1, 2, 3, 4])",
        "sumCounts(nums=[1,2,2,3,3,3])",
        "sumCounts(nums=[1, 2, 3])",
        "sumCounts(nums = [1,2,3,2,3])",
        "sumCounts(nums = [1,2,3,2,1,2,3,4])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"110111011101110\")",
        "minimumBeautifulSubstrings(s = \"11011101110111\")",
        "minimumBeautifulSubstrings(s = \"110111\")",
        "minimumBeautifulSubstrings(s = \"1110000011100000\")",
        "minimumBeautifulSubstrings(s = \"1110000011100000\")",
        "minimumBeautifulSubstrings(s = \"11011101111\")",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111\")",
        "minimumBeautifulSubstrings(s = \"110111011110011011001001\")",
        "minimumBeautifulSubstrings(s = \"101101010101101\")",
        "minimumBeautifulSubstrings(s = \"10110101011100110101011\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [2, 2, 2, 2, 5, 5, 5, 5])",
        "maxSubarrays(nums = [2, 3, 5, 7, 8, 10])",
        "maxSubarrays(nums = [2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [2, 3, 1, 1, 2])",
        "maxSubarrays(nums = [0, 0, 0, 0, 1])",
        "maxSubarrays(nums = [2, 3, 5, 7, 11, 11, 11, 11])",
        "maxSubarrays(nums = [2,3,1,5,3,2])",
        "maxSubarrays(nums = [2, 3, 1, 1, 3, 2, 1, 1])",
        "maxSubarrays(nums = [2,3,4,3,2,3,4,3,2,1,2,3,4,3,2,3,4,3,2,1,1])"
    ],
    "sample_401": [
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 5)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 4, k = 5)",
        "maxSum(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], m = 3, k = 5)",
        "maxSum(nums = [1,2,3,4,5,6,7], m = 3, k = 4)",
        "maxSum(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], m = 3, k = 4)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 3)",
        "maxSum(A = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6], m = 2, k = 4)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(A = [4, 2, 2, 7, 5, 1, 5, 8, 8, 8], m = 3, k = 5)",
        "maxSum(A = [2, 1, 3, 2, 1, 3], m = 3, k = 3)",
        "maxSum(A = [2, 3, 5, 1, 4, 2, 3, 5, 1], m = 2, k = 5)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3, 2, 1])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7])",
        "isGood(nums = [1,1,2,2,3,3,4,4,5])",
        "isGood(nums = [2, 2, 3, 4, 5, 5, 5])",
        "isGood(nums = [1, 2, 3, 4, 4, 4])",
        "isGood(nums = [1,2,3,2,1,1])",
        "isGood(nums = [1, 3, 5, 3, 3])",
        "isGood(nums = [1, 2, 3, 5, 5, 6, 7, 7])",
        "isGood(nums = [2, 3, 2, 4, 3, 5, 5, 6, 7])",
        "isGood(nums = [3, 2, 1, 2, 3, 3, 1, 2, 3])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [3, 3, 3, 3, 3])",
        "minimumSeconds(nums = [4,4,4,4,4])",
        "minimumSeconds(nums = [2, 2, 3, 3, 1, 1])",
        "minimumSeconds(nums = [0, 3, 1, 1, 2])",
        "minimumSeconds(nums = [5, 7, 2, 4, 9, 1, 6, 10])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3,2,1])",
        "minimumSeconds(nums = [1,1,2,2,3,3])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [2, 1, 3, 5, 4, 3, 2, 6, 7])",
        "minimumSeconds(nums=[1,2,3,2,1])",
        "minimumSeconds(nums = [3,1,3,2,4,3])",
        "minimumSeconds(nums = [1,2,3,4,5,3,2,1])",
        "minimumSeconds(nums = [3,1,4,2,5])",
        "minimumSeconds(nums=[3, 2, 1, 2, 1, 4, 4, 5])",
        "minimumSeconds(nums = [3, 3, 6, 1, 2])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,3,4])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [3, 6, 8, 10])",
        "minLengthAfterRemovals(nums = [4, 2, 9, 3, 5])",
        "minLengthAfterRemovals(nums = [1, 3, 3, 3, 2, 2])",
        "minLengthAfterRemovals(nums = [4, 1, 1, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [4, 3, 1, 2, 3, 4, 2, 1])",
        "minLengthAfterRemovals(nums = [3,2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [3, 4, 5, 6, 3, 5])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 5, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums=[1,2,3,4,5,6,7,8,9,10], m=3, k=3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 1)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 5)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 5, k = 3)",
        "maxSum(nums=[1,2,3,4,5,6,7,8,9,10], m=3, k=3)",
        "maxSum(nums = [1,2,3,1,2,3,5,6,7,8,9], m = 3, k = 3)",
        "maxSum(nums = [2, 1, 5, 3, 4, 6], m = 2, k = 3)",
        "maxSum(nums = [2, 1, 3, 5, 4, 2], m = 3, k = 2)",
        "maxSum(nums = [2, 5, 6, 1, 4, 7], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 2, 2, 3, 3, 4, 4], m = 3, k = 3)"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,5,6])",
        "isGood(nums = [1,2,3,5,6,4])",
        "isGood(nums = [4,3,2,1,5])",
        "isGood(nums = [1,2,3,5])",
        "isGood(nums = [3, 1, 2, 4, 5])",
        "isGood(nums = [2,3,1,5,4])",
        "isGood(nums = [2,0,1,3,4])",
        "isGood(nums = [3, 2, 4, 5, 1])",
        "isGood(nums = [1,3,5,6,4,2])",
        "isGood(nums=[1,3,5,7,9])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 3, 2, 7, 8, 8, 7])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [2,3,5,7,9])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"Hello\", \"World\"], x = \"o\")",
        "findWordsContaining(words = [\"python\", \"java\"], x = \"o\")",
        "findWordsContaining(words = [\"python\", \"java\", \"javascript\"], x = \"a\")",
        "findWordsContaining(words = [\"I love you\", \"you are awesome\"], x = \"you\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 5, 6])",
        "minimumCoins(prices = [1, 5, 6, 2, 3])",
        "minimumCoins(prices = [3, 2, 1, 5, 4])",
        "minimumCoins(prices = [2, 3, 1, 2])",
        "minimumCoins(prices = [3, 2, 1, 4, 7, 5])",
        "minimumCoins(prices = [1, 5, 1, 5, 1])",
        "minimumCoins(prices = [2, 3, 3, 2, 3, 5])",
        "minimumCoins(prices = [1, 2, 5, 7, 3, 1, 0, 4, 6])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"1111111111\")",
        "minimumBeautifulSubstrings(s = \"1567\")",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"111111\")",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111\")",
        "minimumBeautifulSubstrings(s = \"11111111\")",
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111\")",
        "minimumBeautifulSubstrings(s = \"111111111111\")",
        "minimumBeautifulSubstrings(s = \"100101001001\")",
        "minimumBeautifulSubstrings(s = \"1001010010101101100101100111100001000011010100111100010001000110\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"abba\", s2 = \"cdef\")",
        "canBeEqual(s1 = \"abba\", s2 = \"cacb\")",
        "canBeEqual(s1 = \"bcd\", s2 = \"dca\")",
        "canBeEqual(s1 = \"abba\", s2 = \"cdaa\")",
        "canBeEqual(s1 = \"acbd\", s2 = \"abdc\")",
        "canBeEqual(s1 = \"saturday\", s2 = \"wednesday\")",
        "canBeEqual(s1 = \"hea\", s2 = \"let\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcbc\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azced\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcbake\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azced\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"acdf\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 3, 2])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 1])",
        "minLengthAfterRemovals(nums = [2, 2, 4])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abba\", s2 = \"cacb\")",
        "canBeEqual(s1 = \"race\", s2 = \"car\")",
        "canBeEqual(s1 = \"cd\", s2 = \"ab\")",
        "canBeEqual(s1 = \"qwerty\", s2 = \"ertyq\")",
        "canBeEqual(s1 = \"abc\", s2 = \"zyx\")",
        "canBeEqual(s1 = \"adc\", s2 = \"acd\")",
        "canBeEqual(s1 = \"geek\", s2 = \"peek\")",
        "canBeEqual(s1 = \"abba\", s2 = \"cdcr\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 3, 5, 7, 9], target = 6)",
        "countPairs(nums = [1, 3, 5, 7], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 9)",
        "countPairs(nums = [1, 3, 2, 4], target = 6)",
        "countPairs(nums = [1, 3, 2, 5, 7, 10], target = 10)",
        "countPairs(nums = [1, 3, 2, 4, 3, 5, 6], target = 7)",
        "countPairs(nums = [1, 2, 7, 11, 5], target = 10)",
        "countPairs(nums = [2, 3, 5, 8, 1], target = 10)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"azced\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"azced\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"azcbex\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"azed\")",
        "canMakeSubsequence(s1 = \"coffee\", s2 = \"mouse\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"az\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"az\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"next\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"visit\", \"prev\", \"prev\", \"visit\", \"visit\", \"prev\"])",
        "lastVisitedIntegers(words = [\"101\", \"prev\", \"202\", \"prev\", \"303\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [3, 3], [1, 2]], k = 2)",
        "countPairs(coordinates=[(0, 0), (1, 1), (2, 2)], k=2)",
        "countPairs(coordinates = [[0,0],[0,1],[1,1],[2,2],[2,3]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 1], [2, 2], [2, 3]], k = 2)",
        "countPairs(coordinates=[(0, 0), (1, 1), (2, 2), (0, 1)], k=1)",
        "countPairs(coordinates=[(1, 1), (2, 2), (3, 3), (4, 4), (1, 2), (2, 3), (3, 4), (1, 3), (2, 4), (3, 1), (4, 2), (1, 4), (2, 1), (3, 2), (4, 3), (2, 3), (3, 2), (4, 1)], k=1)"
    ],
    "sample_451": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"bb\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"abbb\")",
        "minChanges(s = \"abccba\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 15, limit = 3)",
        "distributeCandies(n = 10, limit = 1)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n=9, limit=2)",
        "distributeCandies(n = 30, limit = 3)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"acb\", s2 = \"cba\")",
        "canBeEqual(s1 = \"cba\", s2 = \"acb\")",
        "canBeEqual(s1 = \"bcd\", s2 = \"acdb\")"
    ],
    "sample_460": [
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 10)",
        "distributeCandies(n = 7, limit = 5)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 14)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 150)",
        "accountBalanceAfterPurchase(p = 150)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 25)",
        "accountBalanceAfterPurchase(p = 60)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 45)",
        "accountBalanceAfterPurchase(p = 1000)",
        "accountBalanceAfterPurchase(p = 30)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [1, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 2, 2])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 1, 4, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 2, 4, 5])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 2, 1])",
        "minimumSeconds(A = [3, 2, 1, 4, 3])",
        "minimumSeconds(A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "minimumSeconds(A=[1, 2, 3, 4, 1, 2, 3, 4])",
        "minimumSeconds(A = [1, 3, 5, 6, 7])",
        "minimumSeconds(A = [1,2,3,2,1,2,3,2,1])",
        "minimumSeconds(A = [1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4, 1, 3, 2, 4])",
        "minimumSeconds(A = [1,3,2,6,7,8,10,9,11,12])",
        "minimumSeconds(A = [1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"coffee\", str2 = \"mouse\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"aabc\")",
        "canMakeSubsequence(str1 = \"coffee\", str2 = \"cof\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [3, 2, 1, 5, 6])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [10, 20, 30, 40, 50])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 2, 1, 5, 6])",
        "minimumRightShifts(nums = [2, 3, 4, 1, 5])",
        "minimumRightShifts(nums = [3, 1, 3, 2, 1])",
        "minimumRightShifts(nums = [7, 3, 5, 8, 9])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4], l = 0, r = 2)",
        "countSubMultisets(nums = [1,2,3,4], l = 0, r = 3)",
        "countSubMultisets(nums = [2, 2, 2], l = 1, r = 2)",
        "countSubMultisets(nums = [2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5], l = 2, r = 9)",
        "countSubMultisets(nums = [1, 2, 2, 3, 3, 3], l = 0, r = 5)",
        "countSubMultisets(nums = [2, 5, 7], l = 2, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5, 6], l = 2, r = 5)",
        "countSubMultisets(nums = [1, 3, 3, 7, 1, 1, 3, 7, 3, 9], l = 1, r = 7)",
        "countSubMultisets(nums=[2, 5, 4, 5, 6, 7, 1, 1, 2, 2, 3], l=1, r=5)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 4, 8, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [25, 10, 100])",
        "minimumCoins(prices = [3, 2, 3, 2])",
        "minimumCoins(prices = [2, 2, 3, 3, 2, 1, 1, 1, 2, 1, 2])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [25, 10, 5, 2, 1])",
        "minimumCoins(prices = [25, 10, 5, 2, 1])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [25, 10, 5, 21])",
        "minimumCoins(prices = [1, 2, 5, 7])",
        "minimumCoins(prices = [2, 3, 1, 2, 4])",
        "minimumCoins(prices = [1, 5, 6, 7, 10, 11, 12])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"I\",\"am\",\"a\",\"beginner\",\"on\",\"my\",\"first\",\"project\",\"is\",\"amazing\",\"x\"])"
    ],
    "sample_428": [
        "minOperations(nums = [2,2,2,2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,1,1,2,2,2,3,3])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 1, 2, 2])",
        "minOperations(nums = [2,2,2,2,2,2,2,2,2])",
        "minOperations(nums = [2, 2, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1,1,1,1,1])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"picked\", \"dropped\", \"picked\", \"dropped\"])",
        "lastVisitedIntegers(words = [\"pushed\", \"incorrect\", \"pushed\", \"correct\", \"incorrect\", \"correct\"])",
        "lastVisitedIntegers(words = [\"picked\", \"pick\", \"picked\", \"pick\", \"pick\", \"picked\", \"pick\", \"picked\"])",
        "lastVisitedIntegers(words = [\"push\", \"pop\", \"push\", \"push\", \"pop\", \"push\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = [\"purchased\", \"purchased\", \"visited\", \"purchased\"])",
        "lastVisitedIntegers(words = [\"p1\", \"g1\", \"p2\", \"g2\", \"p3\"])",
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"picked\", \"applied\", \"applied\", \"applied\"])",
        "lastVisitedIntegers(words = [\"p2\", \"p1\", \"e3\", \"p2\"])",
        "lastVisitedIntegers(words = [\"pick\", \"2\", \"pick\", \"2\"])",
        "lastVisitedIntegers(words = [\"picked\", \"10\", \"15\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 4, 3, 2, 1])",
        "minimumSeconds(nums = [1,1,1,2,2,2])",
        "minimumSeconds(nums = [1, 1, 1, 2])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1, 2])",
        "minimumSeconds(nums = [3, 3, 2, 2, 3, 3])",
        "minimumSeconds(nums = [1, 1, 3, 1, 2, 3, 5])",
        "minimumSeconds(nums = [1,2,3,4,5,3,2,3,4,5])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"or\")",
        "findWordsContaining(words = [\"I\", \"love\", \"python\", \"!\"], x = \"o\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [2, 2, 2, 3, 3, 3])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [0, 1, 0, 1, 0, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1, 1, 1, 1])",
        "maxSubarrays(nums = [2, 2, 3, 2, 2, 2])",
        "maxSubarrays(nums = [2,3,4,5,-3,1,-5,2])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"right\", \"prev\", \"right\", \"left\", \"prev\", \"left\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"42\", \"prev\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 5, 7, 8], target = 6)",
        "countPairs(nums = [1, 3, 2, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [2, 3, 1, 6, 8], target = 10)",
        "countPairs(nums = [2, 7, 11, 15], target = 20)",
        "countPairs(nums = [2, 3, 1, 4], target = 5)",
        "countPairs(nums = [2, 3, 1, 7, 4, 5], target = 10)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"next\", \"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"visit\", \"prev\", \"prev\", \"next\", \"visit\", \"next\", \"visit\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"1\", \"next\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n=5, limit=3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 10)",
        "distributeCandies(n=5, limit=2)",
        "distributeCandies(n = 20, limit = 10)",
        "distributeCandies(n=2, limit=3)",
        "distributeCandies(n = 30, limit = 10)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [3, 2, 1, 5, 4])",
        "minimumRightShifts(nums = [2, 3, 4, 1, 5])",
        "minimumRightShifts(nums = [3, 2, 1, 5, 4])",
        "minimumRightShifts(nums = [7, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [2, 3, 4, 5, 6, 7, 1, 2])",
        "minimumRightShifts(nums = [3, 1, 2, 4, 1])",
        "minimumRightShifts(nums = [5, 2, 3, 6, 7, 1, 4])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"pa\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"pp\")",
        "findWordsContaining(words = [\"banana\", \"apple\"], x = \"pp\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"mango\"], x = \"na\")",
        "findWordsContaining(words = [\"this\", \"that\"], x = \"ti\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=2, k=5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 4)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums=[1, 2, 3, 4, 5], m=3, k=2)",
        "maxSum(nums = [3,5,1,4,2,9], m = 3, k = 2)",
        "maxSum(nums = [3, 1, 4, 1, 5, 9], m = 3, k = 4)",
        "maxSum(nums=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m=2, k=5)",
        "maxSum(nums = [1, 3, 4, 2, 4, 2, 4, 2, 4], m = 3, k = 4)"
    ],
    "sample_424": [
        "minOperations(nums = [3,3,3,6,6,6,9])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [2,2,3,3])",
        "minOperations(nums = [2, 1, 2, 2, 1])",
        "minOperations(nums = [1, 1, 2, 2, 2, 2])",
        "minOperations(nums = [2,2,2,2,1,1])",
        "minOperations(nums = [2, 2, 3, 3, 3, 4, 4, 4, 4, 4])",
        "minOperations(nums = [2, 2, 3, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [2,4,4,2,4])",
        "minOperations(nums = [1, 2, 3, 4, 4, 3, 2, 2, 1])"
    ],
    "sample_417": [
        "minOperations(nums = [1,2,3,4,5], k = 5)",
        "minOperations(nums = [1, 1, 3, 3, 5], k = 5)",
        "minOperations(nums = [3, 1, 4, 1, 5], k = 3)",
        "minOperations(nums = [2,3,1,5,4], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [3,1,4,2,3,5], k = 3)",
        "minOperations(nums = [1, 2, 3, 5, 4], k = 3)",
        "minOperations(nums = [2, 7, 10, 2, 2], k = 5)",
        "minOperations(nums = [2, 4, 6, 8, 10], k = 9)",
        "minOperations(nums = [2, 7, 11, 13, 19], k = 5)"
    ],
    "sample_371": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"I love Python\")",
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = \"ympH\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Emily\")",
        "sortVowels(s = \"YmPHzl\")",
        "sortVowels(s = 'MPY')",
        "sortVowels(s = \"Amae\")"
    ],
    "sample_465": [
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n=5, limit=3)",
        "distributeCandies(n=10, limit=5)",
        "distributeCandies(n=7, limit=3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 15, limit = 5)",
        "distributeCandies(n = 2, limit = 3)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [1, 2, 2, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 1, 2, 2])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 0, 1, 1, 1])",
        "maxSubarrays(nums = [3, 1, 3, 0, 6, 1, 4, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 1, 1, 0])",
        "maxSubarrays(nums = [0, 0, 1, 0])",
        "maxSubarrays(nums = [2, 3, 4, 1, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [3, 5, 7, 9, 5, 1, 2, 1])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 2, 1])",
        "sumCounts(nums = [1, 2, 3, 2, 1])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 3, 4])",
        "sumCounts(nums = [1,2,2,3,3,3])",
        "sumCounts(nums = [1,2,2])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 7, 1, 5], target = 9)",
        "countPairs(nums = [1, 2, 7, 1, 5], target = 10)",
        "countPairs(nums = [1, 2, 7, 10], target = 11)",
        "countPairs(nums = [2,1,4,7,5,3], target = 10)",
        "countPairs(nums = [1, 1, 1, 2, 2, 3], target = 4)",
        "countPairs(nums = [2, 3, 5, 7], target = 6)",
        "countPairs(nums=[2,1,3,2,4,3,5], target=7)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 1, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3, 3])"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"aeiou\")",
        "sortVowels(s = \"HEllo\")",
        "sortVowels(s = \"HEllo\")",
        "sortVowels(s = \"aeiou\")",
        "sortVowels(s = 'ymPh')",
        "sortVowels(s = \"Programming\")",
        "sortVowels(s = 'My name is Khan')",
        "sortVowels(s = \"I am a good boy\")"
    ],
    "sample_462": [
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 3, limit = 3)",
        "distributeCandies(n = 10, limit = 1)",
        "distributeCandies(n = 6, limit = 2)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [1, 5, 1, 5, 10])",
        "minimumCoins(prices = [1, 5, 1, 5, 1, 5, 1, 5])",
        "minimumCoins(prices = [4, 1, 2, 3])",
        "minimumCoins(prices = [1, 2, 4, 8, 5, 6, 3])",
        "minimumCoins(prices = [1,2,5,7,8])",
        "minimumCoins(prices = [3, 5, 2, 1, 4, 6])",
        "minimumCoins(prices = [1, 2, 4, 3, 5, 4, 3, 2, 1])",
        "minimumCoins(prices = [2, 3, 5, 6])"
    ],
    "sample_426": [
        "minOperations(nums = [3, 3, 3, 6, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [3, 3, 3, 6, 2, 3])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1, 1, 1, 3, 3, 3, 6, 6, 6])",
        "minOperations(nums = [1, 2, 3, 4, 4])",
        "minOperations(nums = [1, 2, 3, 1, 2, 3, 3])",
        "minOperations(nums = [3, 3, 3, 3, 4, 4, 4, 4, 2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4])"
    ],
    "sample_423": [
        "minOperations(nums = [3, 3, 3, 6, 6, 6, 9])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [2, 4, 1])",
        "minOperations(nums = [2, 6, 1])",
        "minOperations(nums = [3, 3, 3, 6, 0, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minOperations(nums = [3, 2, 1, 1, 1])",
        "minOperations(nums = [1, 2, 3, 4, 4])",
        "minOperations(nums = [2, 4, 6, 7, 6, 3])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1,5,6,8])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 5, 6, 8])",
        "minimumCoins(prices=[1,2,5])",
        "minimumCoins(prices = [1,2,4,1,7,1,9,1,5,1])",
        "minimumCoins(prices=[1, 2, 3, 4, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 1, 3, 2, 3, 1])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [3, 1, 2])",
        "minimumRightShifts(nums = [3,1,2])",
        "minimumRightShifts(nums = [1,2,3,0])",
        "minimumRightShifts(nums = [0, 1, 2, 3, 4, 5])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [1,2,4,4,5,6])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8,9])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minimumRightShifts(nums = [10, 15, 20, 30])"
    ],
    "sample_167": [
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"bam\")",
        "isAcronym(words = [\"banana\", \"apple\", \"cherry\"], s = \"abc\")",
        "isAcronym(words = [\"banana\"], s = \"ban\")",
        "isAcronym(words = [\"dog\", \"cat\", \"bird\"], s = \"cb\")",
        "isAcronym(words = [\"Big\", \"Boss\"], s = \"BB\")",
        "isAcronym(words = [\"banana\", \"apple\", \"orange\"], s = \"banap\")",
        "isAcronym(words = [\"not\", \"a\", \"short\", \"sentence\"], s = \"nos\")",
        "isAcronym(words = [\"UT\", \"AI\", \"DS\"], s = \"UTAI\")",
        "isAcronym(words = [\"Veterans\", \"Uniform\"], s = \"VU\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 2, 2, 2, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,1,2,1,2,1,2,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[2,1,2,1,2], m=2, k=1)",
        "countInterestingSubarrays(nums=[2, 1, 2, 1, 2], m=2, k=1)",
        "countInterestingSubarrays(nums = [0,1,0,0,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 2, 1, 2, 2, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 3, 1, 2, 3, 3, 2, 1, 2], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[2,5,6,2,4,7,9,5,7,2,8,1,5,3,8,2,8,6,9,8], m=3, k=2)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,2], [3,4], [5,6]])",
        "numberOfPoints(nums = [[1,3],[4,8],[10,12]])",
        "numberOfPoints(nums = [[0, 1], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[1,5], [2,7], [3,9]])",
        "numberOfPoints(nums = [[1,2], [4,5], [7,8], [10,11]])",
        "numberOfPoints(nums = [[100, 200], [50, 150], [75, 125]])",
        "numberOfPoints(nums = [[1, 5], [6, 8], [2, 3]])",
        "numberOfPoints(nums = [[1, 2], [5, 6], [10, 20]])",
        "numberOfPoints(nums = [[0, 2], [1, 3], [4, 5], [8, 10]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"I\", \"love\", \"Python\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easier\", \"problems\"], separator = \" \")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [4, 5], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[2,3],[3,5],[7,2],[1,4],[5,6]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,3,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 1])",
        "countCompleteSubarrays(nums = [1,2,3,3,2,3,4,1,2])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\"], separator = \" \")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(u = [1, 2, 3])",
        "maxIncreasingGroups(u = [1, 2, 3])",
        "maxIncreasingGroups(u = [1, 3, 4])",
        "maxIncreasingGroups(u = [3, 2, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 6, 7])",
        "maxIncreasingGroups(u = [1,2,3,4,5,6,7,8,9])",
        "maxIncreasingGroups(u = [3, 2, 3, 2, 3, 1, 2, 1])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [3,1,4,2,3], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 1)",
        "minAbsoluteDifference(nums = [2,1,3,4,2], x = 1)",
        "minAbsoluteDifference(nums = [2,5,12,15], x = 2)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 3)",
        "minAbsoluteDifference(nums = [4,2,3,1,3], x = 2)",
        "minAbsoluteDifference(nums = [2,4,5,6,7,9], x = 2)",
        "minAbsoluteDifference(nums = [2,1,3,2,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums=[3,1,4,2,3,5], x=3)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 3, 2], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 2, 1, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 3, 8], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 1, 1], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 5, 7, 10, 12], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 2, 1, 7], modulo = 8, k = 3)"
    ],
    "sample_152": [
        "canSplitArray(nums = [2, 3, 5, 7], m = 11)",
        "canSplitArray(nums = [3, 1, 4, 1, 5, 9], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [2, 3, 5], m = 8)",
        "canSplitArray(nums = [2, 5, 8, 10], m = 15)",
        "canSplitArray(nums = [1, 3, 5, 7], m = 9)",
        "canSplitArray(nums = [1, 3, 5, 7], m = 9)",
        "canSplitArray(nums = [4, 2, 3, 1], m = 6)",
        "canSplitArray(nums = [4, 4, 10, 4, 4], m = 11)",
        "canSplitArray(nums = [4, 3, 2, 6, 7, 2, 4, 6], m = 13)"
    ],
    "sample_169": [
        "isAcronym(words = [\"NASA\", \"Space\"], s = \"NASA\")",
        "isAcronym(words = [\"P\", \"Y\", \"T\", \"H\", \"N\"], s = \"PYTN\")",
        "isAcronym(words = [\"Coding\", \"Is\", \"Fun\"], s = \"CIF\")",
        "isAcronym(words = [\"Coding\", \"Nation\"], s = \"CN\")",
        "isAcronym(words = [\"NASA\", \"NASA\", \"Space\", \"X\"], s = \"NASA\")",
        "isAcronym(words = [\"tech\", \"academy\"], s = \"ta\")",
        "isAcronym(words = [\"snake\", \"spider\", \"squirrel\"], s = \"sns\")",
        "isAcronym(words = [\"spam\", \"egg\", \"bacon\"], s = \"seem\")",
        "isAcronym(words = [\"UTS\", \"School\"], s = \"UTS\")",
        "isAcronym(words = [\"GOAT\", \"BAT\", \"HORSE\"], s = \"GBAH\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7])",
        "minimumIndex(nums = [2,1,3,1])",
        "minimumIndex(nums = [1,1,2,2,3,3,4,4,5])",
        "minimumIndex(nums = [1,1,2,2,3,3,4,4,5])",
        "minimumIndex(nums = [1,1,2,2,3,3,4])",
        "minimumIndex(nums = [0, 1, 2, 3, 4, 5])",
        "minimumIndex(nums = [4,5,6,7])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 20], [2, 5, 30]])",
        "maximizeTheProfit(n = 3, offers = [[2, 1, 3], [1, 3, 4], [3, 5, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 10], [2, 4, 20], [3, 6, 30]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 5], [1, 2, 6], [2, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 2], [1, 3, 1], [4, 8, 10]])",
        "maximizeTheProfit(n = 2, offers = [[1, 3, 3], [2, 5, 5], [3, 7, 7], [4, 9, 9]])",
        "maximizeTheProfit(n = 10, offers = [[3, 5, 6], [1, 4, 6], [2, 7, 8]])",
        "maximizeTheProfit(n = 3, offers = [[2, 4, 1], [1, 3, 2], [0, 5, 6]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [1, 4, 7], [0, 5, 5], [0, 1, 8]])",
        "maximizeTheProfit(n = 3, offers = [[2,3,1],[1,2,4],[3,4,3],[1,3,2],[2,1,3]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [5, 4, 3, 2, 1])",
        "maximumTripletValue(nums = [2, 1, 3, 2])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [1, 3, 2, 4])",
        "maximumTripletValue(nums = [1, 4, 7, 2, 5])",
        "maximumTripletValue(nums = [1, 1, 3, 2, 4])",
        "maximumTripletValue(nums = [4, 2, 3, 1, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 6, 7, 8, 9])",
        "maximumTripletValue(nums=[-1, -1, 1])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"RR_\")",
        "furthestDistanceFromOrigin(moves = \"RR_L_LL\")"
    ],
    "sample_149": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'ir')",
        "finalString(s = 'irat')",
        "finalString(s = \"irat\")",
        "finalString(s = \"guitar\")",
        "finalString(s = \"problem\")",
        "finalString(s = \"welcome\")",
        "finalString(s = 'intigrate')",
        "finalString(s = \"airtsnig\")"
    ],
    "sample_162": [
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [123, 456, 789])",
        "maxSum(nums = [42, 73, 51])",
        "maxSum(nums = [123, 345, 678, 910])",
        "maxSum(nums = [10, 18, 22])",
        "maxSum(nums = [11, 222, 33, 44, 555])",
        "maxSum(nums = [12, 1, 2, 3, 5, 8])",
        "maxSum(nums = [1234, 4321, 5678, 8765, 9999, 111222333444])",
        "maxSum(nums = [12, 34, 156, 87, 24])",
        "maxSum(nums = [12, 45, 32, 56, 77, 23, 43, 78, 90])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [3, 2, 1, 5, 6])",
        "countWays(nums = [1, 1, 1, 1])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [4, 3, 2, 1])",
        "countWays(nums = [1, 2, 5])",
        "countWays(nums = [1, 3, 3, 3, 2, 4, 2, 5, 2])",
        "countWays(nums = [4, 6, 2, 3, 7])",
        "countWays(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 6])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 3, target = 9)",
        "minimumPossibleSum(n = 4, target = 12)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 1], [2, 3, 2], [3, 1, 3]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20], [2, 5, 30]])",
        "maximizeTheProfit(N = 2, offers = [[1, 2, 5], [2, 1, 10], [3, 4, 15]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 5], [2, 3, 4], [3, 1, 6]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 5], [3, 4, 7], [1, 3, 10]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 5], [2, 3, 7], [3, 4, 10]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 100], [2, 3, 70], [3, 1, 60]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 5], [2, 3, 4], [3, 4, 3], [2, 4, 6]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [0, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [4, 0, 6], [2, 3, 7]])",
        "maximizeTheProfit(n = 4, offers = [[0, 2, 5], [2, 3, 10], [0, 3, 20]])",
        "maximizeTheProfit(n=3, offers=[(2, 2, 5), (1, 1, 6), (0, 0, 7)])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 2], [2, 3, 6], [0, 2, 5]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 3], [1, 2, 5], [2, 3, 4]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [2, 3, 6], [0, 4, 10], [1, 2, 3]])",
        "maximizeTheProfit(n=5, offers=[(0, 2, 3), (1, 2, 7), (2, 3, 4), (3, 0, 6), (4, 1, 5)])",
        "maximizeTheProfit(n=5, offers=[[0, 1, 5], [2, 3, 3], [1, 4, 10], [0, 2, 5]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 10], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14, 23, 45], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 7], target = 6)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,1,2,3])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 5])",
        "countWays(nums = [1, 2, 3, 5])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 3, 5])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [1, 2, 4, 5])",
        "countWays(nums = [1, 2, 3, 6])",
        "countWays(nums = [3, 2, 1, 5])",
        "countWays(nums = [1, 2, 3, 6, 4])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 3])",
        "maxIncreasingGroups(usageLimits = [3, 3, 6, 6])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 2, 3, 3])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "maxIncreasingGroups(usageLimits = [3, 3, 6, 7, 8])",
        "maxIncreasingGroups(usageLimits = [1, 1, 1, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [10, 10, 10, 10])",
        "maxIncreasingGroups(usageLimits = [5, 1, 3])",
        "maxIncreasingGroups(usageLimits = [5, 4, 5, 2, 1])"
    ],
    "sample_173": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 3, k = 11)",
        "minimumSum(n = 10, k = 31)",
        "minimumSum(n=10, k=21)",
        "minimumSum(n = 10, k = 24)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 2, 2, 2, 5, 5, 5, 5], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 2, 2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 7, 3, 5, 8, 1, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 3], m = 2, k = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 3])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 2, 2, 2, 2], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 0, 0, 0, 0, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,2,3,3,3,3,1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 0, 1, 0, 0, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,3,3,3,4,4,4,4], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 1, 2, 3, 4, 5], k = 3)",
        "longestEqualSubarray(nums = [2,2,2,2,2,2,2,1,2,2,2,2,2,3], k = 0)"
    ],
    "sample_170": [
        "isAcronym(words = [\"the\", \"quick\", \"brown\"], s = \"tqb\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"quick\", \"brown\"], s = \"qbr\")",
        "isAcronym(words = [\"ant\", \"bat\", \"cat\"], s = \"abc\")",
        "isAcronym(words = [\"Python\", \"IDE\"], s = \"P.I.D.\")",
        "isAcronym(words = [\"read\", \"paper\", \"blue\"], s = \"RPB\")",
        "isAcronym(words = [\"cat\", \"dog\", \"elephant\"], s = \"CE\")",
        "isAcronym(words = [\"Programming\", \"is\", \"fun\"], s = \"PIf\")",
        "isAcronym(words = [\"utility\", \"programming\", \"academia\"], s = \"UPA\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"11010\")",
        "maximumOddBinaryNumber(s = \"110010\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums = [3, 2, 1])",
        "countWays(nums = [1,2,3,4,5,6])",
        "countWays(nums = [1, 2, 3, 6, 7])",
        "countWays(nums = [2, 3, 4, 10, 11, 12])",
        "countWays(nums = [1, 2, 3, 6, 7, 8, 12])",
        "countWays(nums = [2, 5, 3, 1, 1, 0])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [4, 3, 1], [3, 2, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 10], [3, 5, 15]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 5], [3, 4, 7], [5, 6, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [4, 5, 7], [3, 2, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 2], [2, 5, 1]])",
        "maximizeTheProfit(n=5, offers=[[2, 5, 3], [3, 4, 6], [1, 2, 1]])",
        "maximizeTheProfit(n=5, offers=[[1, 2, 5], [5, 6, 4], [6, 7, 3]])",
        "maximizeTheProfit(n=5, offers=[[2, 5, 3], [1, 3, 2], [3, 5, 2]])",
        "maximizeTheProfit(n = 10, offers = [[1, 7, 5], [2, 5, 7], [3, 1, 9], [4, 1, 2]])",
        "maximizeTheProfit(n = 10, offers = [[3, 7, 8], [5, 6, 4], [1, 10, 2]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [2,3,1,4,3])",
        "minimumIndex(nums = [2,3,1])",
        "minimumIndex(nums = [0,1,2,3,4,0,1,2,3,4])",
        "minimumIndex(nums = [2,2,1,1,0])",
        "minimumIndex(nums = [2,2,1,1])",
        "minimumIndex(nums = [1,2,2,2,3,3,3,4,4,4,4,5,5,5,5,5])",
        "minimumIndex(nums = [1,2,2,2,3,3,3,4,4])",
        "minimumIndex(nums = [1, 2, 3, 4, 2, 3, 4, 5])",
        "minimumIndex(nums = [2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [4, 5], [7, 8]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [7, 8]])",
        "numberOfPoints(nums = [[2, 5], [3, 7], [1, 8]])",
        "numberOfPoints(nums = [[2, 5], [3, 7], [1, 8]])",
        "numberOfPoints(nums = [[2, 5], [3, 7]])",
        "numberOfPoints(nums = [[0, 2], [3, 5], [7, 8]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,3],[4,7],[8,10]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"orange\", \"banana\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"orange\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"Hello\", \"World\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"orange\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"how\", \"are\", \"you\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"I\", \"like\", \"banana\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"I\", \"am\", \"a\", \"student\"], separator = \" \")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 10, target = 5)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 6)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n = 10, target = 15)",
        "minimumPossibleSum(n = 5, target = 2)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 10, target = 11)",
        "minimumPossibleSum(n = 10, target = 20)",
        "minimumPossibleSum(n = 10, target = 8)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[1, 2], [4, 5], [7, 8]])",
        "numberOfPoints(nums = [[0, 2], [3, 5], [7, 8]])",
        "numberOfPoints(nums = [[0, 2], [3, 5], [7, 8]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[2, 4], [6, 8]])",
        "numberOfPoints(nums = [[2, 3], [5, 8], [1, 6]])",
        "numberOfPoints(nums = [[0, 4], [1, 3], [2, 2], [3, 2]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 1], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 1, 5, 6], m = 10, k = 6)",
        "countInterestingSubarrays(nums=[2, 3, 1, 2, 4], m=5, k=2)",
        "countInterestingSubarrays(nums=[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,",
        "countInterestingSubarrays(nums = [2, 2, 3, 2, 3], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 5, 2, 2], m = 3, k = 1)",
        "countInterestingSubarrays(nums=[2, 4, 5, 1, 3, 4], m=7, k=1)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 2, 4, 5], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"5525\")",
        "minimumOperations(num = \"5525\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"50174\")",
        "minimumOperations(num = \"11101\")",
        "minimumOperations(num = \"555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555",
        "minimumOperations(num = \"54862\")",
        "minimumOperations(num = '110011000')"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 1], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 7, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 3, 2, 3], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 2, 2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 2, 2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,1,2], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [2, 2, 1], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 0, 0, 0, 0, 1, 0], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums = [1,2,1,3,1,2,1], modulo = 4, k = 1)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1], K = 1)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 4, 5], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1,2,2,3,1], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 3, 2, 3, 4, 1], K = 1)",
        "longestEqualSubarray(A = [1, 2, 2, 3, 1, 4, 4, 4, 5], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1, 1, 2, 3, 3, 4, 5], K = 2)",
        "longestEqualSubarray(A = [0,1,1,1,0,0,1,1,1,0,1], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 3, 2, 3, 4, 1, 2, 3, 3, 2, 1], K = 2)",
        "longestEqualSubarray(A = [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], K = 1)"
    ],
    "sample_146": [
        "finalString(s = \"int\")",
        "finalString(s = \"pint\")",
        "finalString(s=\"pinter\")",
        "finalString(s = \"pointer\")",
        "finalString(s = 'poet')",
        "finalString(s=\"input\")",
        "finalString(s = 'hello')",
        "finalString(s = \"ilip\")",
        "finalString(s = \"pinti\")",
        "finalString(s = \"spi\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 12], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 16], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 7)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[0, 2], [4, 6], [7, 9]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 7]])",
        "numberOfPoints(nums = [[0, 2], [3, 5], [7, 9]])",
        "numberOfPoints(nums = [[0, 2], [5, 8], [10, 12]])",
        "numberOfPoints(nums = [[0,2],[3,5],[7,8]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "numberOfPoints(nums = [[0, 2], [5, 7], [0, 9]])",
        "numberOfPoints(nums = [[0, 3], [2, 6]])",
        "numberOfPoints(nums = [[0,2],[5,8],[1,6]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1,2,3,4,5])",
        "maxIncreasingGroups(A = [2, 3, 5, 7, 11])",
        "maxIncreasingGroups(A = [1, 2, 3, 5, 7])",
        "maxIncreasingGroups(A = [2, 5, 7])",
        "maxIncreasingGroups(A = [3, 1, 3, 2, 3])",
        "maxIncreasingGroups(A = [4, 7, 9, 1, 3, 8, 5])",
        "maxIncreasingGroups(A = [1, 2, 5, 6, 10])",
        "maxIncreasingGroups(A = [6, 2, 7, 1, 3, 4])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1,2,5],[2,3,6],[3,4,7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7]])",
        "maximizeTheProfit(n=3, offers=[[1,1,1],[2,2,2],[3,3,3]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 5], [1, 2, 10], [2, 3, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [1, 3, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 1, 1], [2, 3, 1], [3, 5, 1]])",
        "maximizeTheProfit(n=4, offers=[[1,2,2],[3,4,6],[2,3,7]])",
        "maximizeTheProfit(n=5, offers=[(1,2,2), (3,4,1), (2,3,2)])",
        "maximizeTheProfit(n=30, offers=[[0, 2, 5], [1, 1, 3], [1, 2, 2], [2, 3, 1], [3, 4, 5]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"RL_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R_L\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRR_LLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRR__\")",
        "furthestDistanceFromOrigin(moves = \"RL_RLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RAL_R_L\")"
    ],
    "sample_175": [
        "minimumSum(n = 5, k = 15)",
        "minimumSum(n = 5, k = 15)",
        "minimumSum(n = 5, k = 15)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 5, k = 11)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 5, k = 7)",
        "minimumSum(n = 3, k = 10)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[4,8],[2,6]])",
        "numberOfPoints(nums = [[1,2],[2,3],[3,4]])",
        "numberOfPoints(nums=[[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[2,3],[5,6],[7,8]])",
        "numberOfPoints(nums = [[2, 5], [3, 7], [1, 8]])",
        "numberOfPoints(nums=[[1,3],[2,4]])",
        "numberOfPoints(nums = [[1,3],[2,5],[7,8],[10,11]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,8]])",
        "numberOfPoints(nums = [[1,3],[2,5],[4,7],[6,9]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"1000\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"111000\")",
        "minimumOperations(num = \"110101\")",
        "minimumOperations(num = \"11100\")",
        "minimumOperations(num = \"001011\")",
        "minimumOperations(num = \"100000\")",
        "minimumOperations(num = \"2020\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [2, 1, 3, 1])",
        "minimumIndex(nums = [2, 1, 3, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [2,3,1,2])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [2, 2, 2, 0, 2, 2])",
        "minimumIndex(nums = [4,3,2,1,4])",
        "minimumIndex(nums = [1, 2, 3, 2, 2, 4])",
        "minimumIndex(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [0, 2, 3, 4, 5, 2, 1, 0])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LR_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLL_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRL_\")",
        "furthestDistanceFromOrigin(moves = \"LR_L_RR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LR_L_RR_L_\")"
    ],
    "sample_161": [
        "maxSum(nums = [10, 20, 30, 40])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSum(nums = [18, 35, 12, 7])",
        "maxSum(nums = [18, 35, 32, 12, 24])",
        "maxSum(nums = [12, 23, 34, 45])",
        "maxSum(nums = [18, 35, 320, 12, 7, 5, 10])",
        "maxSum(nums = [10, 19, 28])",
        "maxSum(nums = [18, 35, 32, 12, 24, 20, 70])",
        "maxSum(nums = [12, 24, 48, 96, 96, 96, 192, 384])"
    ],
    "sample_160": [
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1,1,1,1,1])",
        "maxSum(nums = [5, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])",
        "maxSum(nums = [4, 5, 6, 1, 2])",
        "maxSum(nums = [2, 1, 4, 7, 3, 1, 6])",
        "maxSum(nums = [10, 11, 12, 1, 13])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two\", \"three four\", \"five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two\", \"three four\", \"five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two\", \"three four\", \"five six\"], separator = ' ')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2,5,6,8,10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7, 9, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,5,7,9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 9, 10, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 7, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours=[10, 20, 30, 40, 50], target=25)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 7, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2,5,6,8,10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 9, 10, 12], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 10, 4, 2, 9], target = 8)"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 7, k = 10)",
        "minimumSum(n = 5, k = 14)",
        "minimumSum(n = 7, k = 3)",
        "minimumSum(n = 4, k = 1)",
        "minimumSum(n = 3, k = 5)"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "maxSum(nums = [10,20,30,40])",
        "maxSum(nums = [3, 4, 8, 1, 3])",
        "maxSum(nums = [12, 14, 13])",
        "maxSum(nums = [18,1,18])",
        "maxSum(nums = [12, 4, 36, 7, 12])",
        "maxSum(nums = [12, 34, 123, 54, 89])",
        "maxSum(nums = [12, 34, 10, 4, 55])",
        "maxSum(nums = [10, 12, 12, 5, 5, 5, 5, 5, 5])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [1, 1, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [4, 1, 3, 2, 6, 7], m = 10)",
        "canSplitArray(nums = [3, 2, 2, 1, 4, 5], m = 7)",
        "canSplitArray(nums = [3, 2, 2, 1, 2, 3], m = 6)",
        "canSplitArray(nums = [4, 1, 2, 7, 6, 1], m = 10)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"orange\", \"banana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"orange\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"word1;word2;word3\"], separator = \";\")",
        "splitWordsBySeparator(words = [\"I love Python\", \"Python is easy\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"how\", \"to\", \"make\", \"it\"], separator = \" \")"
    ],
    "sample_172": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n=5, k=22)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 21)",
        "minimumSum(n=3, k=6)",
        "minimumSum(n=10, k=100)"
    ],
    "sample_228": [
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [3, 2, 1, 5, 6])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [3,1,4,1,5,9])",
        "countWays(nums = [1,3,2])",
        "countWays(nums = [3, 0, 2, 3])",
        "countWays(nums = [1,3,2,3,1,0])",
        "countWays(nums = [2, 3, 4, 7, 8])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s=\"1101\")",
        "maximumOddBinaryNumber(s=\"110\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [2, 1, 3, 1, 4])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6])",
        "minimumIndex(nums = [2,2,1,3,2,2,2])",
        "minimumIndex(nums = [2, 1, 3, 3, 3])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [0, 1, 2, 3, 4, 0, 1, 2, 3, 4])",
        "minimumIndex(nums = [4,3,2,1,4])",
        "minimumIndex(nums = [3, 2, 3, 4, 3, 2, 2, 4, 2])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 5)",
        "canSplitArray(nums = [1,1,1,1,1], m = 2)",
        "canSplitArray(nums = [1,2,3,4,5], m = 7)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6], m = 11)",
        "canSplitArray(nums = [1,2,3,1,1], m = 3)",
        "canSplitArray(nums = [1,2,3,8,5], m = 7)",
        "canSplitArray(nums = [1,1,1,2,3,5], m = 3)",
        "canSplitArray(nums = [4, 3, 4, 5, 12], m = 6)",
        "canSplitArray(nums = [4, 3, 2, 7, 6, 1, 4], m = 5)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"girigorit\")",
        "finalString(s = \"python\")",
        "finalString(s = \"giraffe\")",
        "finalString(s = \"giraffe\")",
        "finalString(s = \"strings\")",
        "finalString(s = \"nitin\")",
        "finalString(s = \"google\")",
        "finalString(s = \"isnt\")",
        "finalString(s = 'programming')"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 6, k = 3)",
        "minimumSum(n = 10, k = 15)",
        "minimumSum(n = 4, k = 6)",
        "minimumSum(n=7, k=10)",
        "minimumSum(n = 6, k = 3)",
        "minimumSum(n=10, k=18)",
        "minimumSum(n=4, k=10)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1,2,3,4,5], m = 8)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 5)",
        "canSplitArray(nums = [3, 2, 2], m = 6)",
        "canSplitArray(nums = [1, 1, 3, 4], m = 6)",
        "canSplitArray(nums = [2, 5, 7, 10], m = 12)",
        "canSplitArray(nums=[1, 2, 3, 1, 1], m=4)",
        "canSplitArray(nums = [1,3,2,5], m = 6)",
        "canSplitArray(nums = [3,1,1,2,4,3], m = 6)",
        "canSplitArray(nums=[1, 2, 4, 7, 11, 18], m=21)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 4, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 4, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 3, 4, 4, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [2,1,3,2,2,2,3,1,2,1])"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"this is a test\")",
        "finalString(s=\"string\")",
        "finalString(s=\"string\")",
        "finalString(s = \"python\")",
        "finalString(s = \"writing\")",
        "finalString(s = \"hello\")",
        "finalString(s='irtsng')",
        "finalString(s = 'ring')",
        "finalString(s=\"my name is\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n = 5, target = 21)",
        "minimumPossibleSum(n=5, target=10)"
    ],
    "sample_176": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 5, k = 22)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 7, k = 4)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 1], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 1, 2, 2, 3, 3, 4, 4], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 5, 1, 8, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 0, 1, 0, 0, 1, 0], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [2,3,3,2,2,3,2,1], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,4,2,3,1,4,2,3,1,4,2,3,1,4,2], modulo = 10, k = 1)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums=[2, 7, 10], k=2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,5,7,9,11,13], k = 2)"
    ],
    "sample_151": [
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = \"giraffe\")",
        "finalString(s = \"sitting\")",
        "finalString(s = 'giraffe')",
        "finalString(s = 'apple')",
        "finalString(s = \"birthday\")",
        "finalString(s = \"input\")",
        "finalString(s = \"writing\")",
        "finalString(s = 'girigtrsi')"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 2)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=3)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 3, 6])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [1, 2, 4, 8])",
        "maxIncreasingGroups(usageLimits = [1, 2, 4, 8])",
        "maxIncreasingGroups(usageLimits = [1, 2, 4, 8])",
        "maxIncreasingGroups(usageLimits = [2, 5, 7])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2])",
        "maxIncreasingGroups(usageLimits = [3, 4, 7])",
        "maxIncreasingGroups(usageLimits = [2, 7, 9])",
        "maxIncreasingGroups(usageLimits = [3, 2, 5, 1])"
    ],
    "sample_204": [
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"110011\")",
        "minimumOperations(s = \"001011\")",
        "minimumOperations(s = \"00000\")",
        "minimumOperations(s = \"011010\")",
        "minimumOperations(s = \"1100101001\")",
        "minimumOperations(s = \"1000101011011\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 7], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 12, 18, 19], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 5, 7, 9, 11], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14, 23, 45], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14, 14, 20], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 6], target = 2)"
    ],
    "sample_148": [
        "finalString(s = \"pinter\")",
        "finalString(s = \"bip\")",
        "finalString(s = \"inter\")",
        "finalString(s = \"bipul\")",
        "finalString(s = 'int')",
        "finalString(s = \"pinterest\")",
        "finalString(s = 'interest')",
        "finalString(s = \"poo\")",
        "finalString(s = 'yrt')",
        "finalString(s = \"fipot\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"new\", \"year\"], s = \"NY\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwl\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"ab\")",
        "isAcronym(words = [\"Fast\", \"Faster\", \"Fasty\"], s = \"FA\")",
        "isAcronym(words = [\"NASA\", \"USA\"], s = \"US\")",
        "isAcronym(words = [\"apple\", \"banana\"], s = \"ab\")",
        "isAcronym(words = [\"USSR\", \"USA\"], s = \"US\")",
        "isAcronym(words = [\"Banana\", \"apple\", \"Mango\"], s = \"BanM\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,5,2,4,3], target = 10)",
        "minOperations(nums = [2,3,5], target = 10)",
        "minOperations(nums=[3, 1, 4, 1], target=6)",
        "minOperations(nums = [3,1,4,1,5], target = 12)",
        "minOperations(nums = [1, 1, 1, 1], target = 5)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9], target = 9)",
        "minOperations(nums=[2, 3, 5], target=7)",
        "minOperations(nums=[1,1,3], target=7)",
        "minOperations(nums=[2, 3, 4, 6, 8], target=16)",
        "minOperations(nums=[8,1,3,2,5,6,7], target=23)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1011')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '11001')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(\"101\")",
        "maximumOddBinaryNumber(s = '11100')",
        "maximumOddBinaryNumber(s = \"0010010\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = \"10101\")",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(\"1010\")",
        "maximumOddBinaryNumber(s='1100')"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n = 4, target = 9)",
        "minimumPossibleSum(n=4, target=10)",
        "minimumPossibleSum(n=5, target=15)",
        "minimumPossibleSum(n = 3, target = 20)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LR\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 9)",
        "minimumPossibleSum(n = 5, target = 6)",
        "minimumPossibleSum(n = 5, target = 20)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 5, target = 50)",
        "minimumPossibleSum(n = 5, target = 22)",
        "minimumPossibleSum(n = 2, target = 4)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9,10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 2, 4, 7, 5, 1], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 10, 4, 14], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 6, 7, 8], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 7, 10, 6], target = 5)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [0, 1, 2, 3, 5])",
        "countWays(nums = [0, 1, 2, 3, 5])",
        "countWays(nums = [1, 2, 4])",
        "countWays(nums = [3, 1, 2])",
        "countWays(nums = [0, 2, 3, 4, 5, 7])",
        "countWays(nums = [1, 2, 5, 8, 10])",
        "countWays(nums = [2, 3, 1, 0, 1])",
        "countWays(nums = [2, 3, 1, 0, 2, 0, 12])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RFRLLRF\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLLRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LRLLLL\")",
        "furthestDistanceFromOrigin(moves = 'RRSSLLRLL')"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 5, target = 13)",
        "minimumPossibleSum(n=3, target=7)",
        "minimumPossibleSum(n=7, target=5)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 2, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 4, 5, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1])"
    ],
    "sample_156": [
        "canSplitArray(nums = [4, 1, 3, 2], m = 6)",
        "canSplitArray(nums = [1, 1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [2, 5, 1, 9, 2], m = 10)",
        "canSplitArray(nums = [4, 1, 3, 2, 6, 7], m = 10)",
        "canSplitArray(nums = [3, 1, 2], m = 4)",
        "canSplitArray(nums = [4, 2, 3, 6], m = 11)",
        "canSplitArray(nums = [1, 1, 3, 3, 5], m = 5)",
        "canSplitArray(nums = [2, 7, 1, 3, 9], m = 10)",
        "canSplitArray(nums = [3, 2, 1, 6, 4], m = 7)",
        "canSplitArray(nums = [5, 1, 4, 7, 3, 2], m = 10)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], target = 10)",
        "minOperations(nums = [1, 1, 3, 5, 7], target = 13)",
        "minOperations(nums = [2, 2, 4, 2], target = 4)",
        "minOperations(nums = [1, 1, 1, 1], target = 5)",
        "minOperations(nums = [2, 5, 4], target = 14)",
        "minOperations(nums = [3, 1, 2, 5], target = 10)",
        "minOperations(nums=[1, 2, 3, 5, 7, 9], target=10)",
        "minOperations(nums = [1, 1, 2, 2, 2], target = 3)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums=[2, 7, 10], k=1)",
        "sumIndicesWithKSetBits(nums = [1,2,3,5,7,9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 5, 6, 7, 9, 10], k = 3)"
    ],
    "sample_165": [
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"the\", \"quick\", \"brown\"], s = \"tqb\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"bam\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bird\"], s = \"cab\")",
        "isAcronym(words = [\"Banana\", \"Apple\"], s = \"Bn\")",
        "isAcronym(words = [\"manchester\", \"united\", \"birmingham\"], s = \"MU\")",
        "isAcronym(words = [\"U\", \"N\"], s = \"UN\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"abnm\")",
        "isAcronym(words = [\"new\", \"years\", \"economy\"], s = \"NEY\")",
        "isAcronym(words = [\"bear\", \"blue\", \"sky\"], s = \"BRS\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 4, 5])",
        "countWays(nums = [1, 2, 4, 5])",
        "countWays(nums = [10, 20, 30, 40])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums = [1, 3, 4, 7])",
        "countWays(nums = [2,3,4,5])",
        "countWays(nums = [1, 2, 3, 7, 11])",
        "countWays(nums = [0, 1, 2, 5, 6, 9])",
        "countWays(nums = [3, 2, 4, 3, 5, 6, 1, 1])"
    ],
    "sample_158": [
        "maxSum(nums = [18, 35, 12, 7])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [5, 5, 5, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [1, 1, 1, 1])",
        "maxSum(nums = [18, 35, 12, 7, 24])",
        "maxSum(nums = [18, 12, 20, 40, 28, 15])",
        "maxSum(nums = [18, 35, 625, 42, 729])",
        "maxSum(nums = [18, 35, 32, 12, 7, 9, 8, 19, 22, 25, 20, 25])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 2, 3, 1, 4, 2], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 2, 2, 3, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,2,1,2,2,2,2,2], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,3,3,3,2,2,2,1,1], k = 2)",
        "longestEqualSubarray(nums = [2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5], k = 2)",
        "longestEqualSubarray(nums = [1,1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3,3,3,3,4,4,4,4], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 2, 1, 2, 2, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 3, 2, 4, 2, 2, 3, 4, 1], k = 2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [3, 4, 5], [1, 4, 6]])",
        "maximizeTheProfit(n=3, offers=[[1, 2, 10], [2, 3, 5], [3, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 3, 10], [3, 4, 5]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 2], [4, 6, 3], [6, 7, 4]])",
        "maximizeTheProfit(n=5, offers=[(2, 3, 5), (1, 3, 5), (4, 3, 5)])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [4, 5, 10], [2, 3, 7], [3, 1, 6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 30], [2, 4, 10], [3, 2, 10]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 4, 8, 16])",
        "maxIncreasingGroups(x = [1, 2, 4, 8, 16, 32])",
        "maxIncreasingGroups(x = [2, 5, 7, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 5, 7, 9])",
        "maxIncreasingGroups(x = [2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 4, 6])",
        "maxIncreasingGroups(x = [1, 2, 5, 9, 5, 9, 7])",
        "maxIncreasingGroups(x = [3, 2, 2, 1])",
        "maxIncreasingGroups(x = [1, 1, 2, 2, 3, 4, 4, 5, 6])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6], k = 3)"
    ],
    "sample_207": [
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"0123\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"1011\")",
        "minimumOperations(num = \"001101\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"1101001\")",
        "minimumOperations(num = \"11001100\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LRU\")",
        "furthestDistanceFromOrigin(moves = \"RFR\")",
        "furthestDistanceFromOrigin(moves = \"RRDDLU\")",
        "furthestDistanceFromOrigin(moves = \"RFRLLRF\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRLLRR\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"11011\")",
        "minimumOperations(num = \"2525\")",
        "minimumOperations(num = \"257500\")",
        "minimumOperations(num = \"32768\")",
        "minimumOperations(num = \"5010000\")",
        "minimumOperations(num = \"1501001\")",
        "minimumOperations(num = \"1001125\")",
        "minimumOperations(num = \"1011010\")",
        "minimumOperations(num = \"2311011\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [4, 5, 5, 21], m = 10)",
        "canSplitArray(nums = [1,2,3,4], m = 6)",
        "canSplitArray(nums = [4, 1, 3, 2], m = 6)",
        "canSplitArray(nums = [1,1,1,1,1,1], m = 2)",
        "canSplitArray(nums = [4, 7, 10, 13], m = 20)",
        "canSplitArray(nums = [5, 1, 2, 3, 4], m = 7)",
        "canSplitArray(nums = [10, 20, 30, 40, 50, 60], m = 60)",
        "canSplitArray(nums = [1,2,3,5,10], m = 11)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 2])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 2, 1, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 3, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7])"
    ],
    "sample_202": [
        "minimumOperations(num = \"110\")",
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"0110\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(num = \"11010\")",
        "minimumOperations(num = \"0000\")",
        "minimumOperations(num = \"110100\")",
        "minimumOperations(num = \"001110\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"bear\", \"fox\"], b = \" \")",
        "splitWordsBySeparator(a = [\"banana\", \"mango\"], b = \"na\")",
        "splitWordsBySeparator(a = [\"hello world\", \"hi\"], b = \" \")",
        "splitWordsBySeparator(a = [\"I love Python programming\"], b = \" \")",
        "splitWordsBySeparator(a = [\"this is a list\"], b = \" \")",
        "splitWordsBySeparator(a = [\"the quick brown\", \"fox\"], b = \" \")",
        "splitWordsBySeparator(a = [\"banana\", \"orange\", \"mango\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"i like banana\", \"i like apple\"], b = \" \")",
        "splitWordsBySeparator(a = [\"bad news\", \"bad news bad news\"], b = \" \")",
        "splitWordsBySeparator(a = [\"mqpx\", \"zy\"], b = \"q\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 15, 16, 17, 18], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = \"0101\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,1,1,1,2,2,2,3,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1,0,0,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,1,0,1,1,0,1,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 3, 1], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,2,3,3,3,3,3,4,4,4,4,4], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,0,0,0,1,1,1,1,0,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 3, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,2,1,3,2,4,2,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,3,1,4,2,5,1,1,2,3,1], k = 3)",
        "longestEqualSubarray(nums=[1,2,3,2,1,3,3,2,1,2,1,2], k=2)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 4, 5], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1, 2, 3], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1, 1], k = 1)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 3, 3, 4, 5, 6], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 3, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 4], k = 1)",
        "longestEqualSubarray(nums = [1,1,1,1,2,2,2,3,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"110011\")",
        "maximumOddBinaryNumber(s = \"00101001\")",
        "maximumOddBinaryNumber(s = '0010001')"
    ],
    "sample_166": [
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"dog\", \"cat\"], s = \"cats\")",
        "isAcronym(words = [\"to\", \"be\", \"or\", \"not\", \"to\", \"be\"], s = \"tbwn\")",
        "isAcronym(words = [\"spam\", \"egg\", \"sausage\"], s = \"SE\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwwrd\")",
        "isAcronym(words = [\"revolution\", \"united\", \"nations\"], s = \"RUN\")",
        "isAcronym(words = [\"apple\", \"pie\", \"banana\"], s = \"aPpL\")",
        "isAcronym(words = [\"tea\", \"pot\", \"cherry\"], s = \"POT\")",
        "isAcronym(words = [\"space\", \"time\"], s = \"SpTm\")",
        "isAcronym(words = [\"turing\", \"computing\", \"academia\"], s = \"tca\")"
    ],
    "sample_163": [
        "maxSum(nums = [34, 8, 13, 3])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [12, 15, 20, 25])",
        "maxSum(nums = [12, 4, 6, 3, 2, 23])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "maxSum(nums = [11,22,33])",
        "maxSum(nums = [12, 35, 9, 24, 50, 70])",
        "maxSum(nums = [11, 33, 22, 77])",
        "maxSum(nums = [2, 5, 6, 1, 3, 8])",
        "maxSum(nums = [12, 13, 10, 11])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 4, 1, 5])",
        "semiOrderedPermutation(nums = [3, 2, 4, 1, 5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 2, 1])",
        "continuousSubarrays(a = [1, 2, 3, 2, 1, 1])",
        "continuousSubarrays(a = [1, 2, 3, 2, 1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [3, 2, 1, 2, 3])",
        "continuousSubarrays(a = [1, 2, 3, 2, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(a = [3, 3, 3, 2, 1, 2, 3, 4])",
        "continuousSubarrays(a = [1, 2, 3, 3, 4, 5, 5, 5, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "continuousSubarrays(a = [2, 5, 7, 10, 2, 3, 4])",
        "continuousSubarrays(a = [2, 3, 5, 7, 3, 2, 4])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 2, 3, 4, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 4])",
        "continuousSubarrays(nums = [1, 2, 3, 2, 3, 4, 5])",
        "continuousSubarrays(nums = [1, 2, 3, 1, 2])",
        "continuousSubarrays(nums = [2, 1, 4, 3, 2, 1, 4])",
        "continuousSubarrays(nums = [4,2,2,4,3,4,1,2,1,2,1])",
        "continuousSubarrays(nums = [2, 1, 3, 1, 3, 2])",
        "continuousSubarrays(nums = [2, 2, 1, 1, 5, 6, 7, 6, 7])",
        "continuousSubarrays(nums = [1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8])",
        "continuousSubarrays(nums = [1,2,3,2,3,4,1,2,5,6,7,8,9,6,7,1,2,3,4,5,6,7,8,9])"
    ],
    "sample_8": [
        "colorTheArray(n = 6, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 3, queries = [[1, 0], [2, 1], [3, 2]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 3], [1, 0]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 4], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [1, 4]])",
        "colorTheArray(n = 5, queries = [[2,2],[1,1],[3,1],[3,2]])",
        "colorTheArray(n = 6, queries = [[1,2],[2,3],[3,4],[4,5],[5,6],[3,7]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,3,6,10,15], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums=[1,2,3,4,5], target=3)",
        "maximumJumps(nums = [2,1,4,7,5,10], target = 2)",
        "maximumJumps(nums = [10,20,30,50,60], target = 10)",
        "maximumJumps(nums = [2,1,3], target = 0)",
        "maximumJumps(nums = [1, 3, 6, 10, 1, 0, 0], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9], target = 2)",
        "maximumJumps(nums = [1,5,1,5,0,0], target = 2)",
        "maximumJumps(nums = [1,5,6,4,2], target = 2)"
    ],
    "sample_22": [
        "minLength(s = \"ACDB\")",
        "minLength(s = \"ACDB\")",
        "minLength(s = \"ACDB\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ACBD\")",
        "minLength(s = \"ACBD\")",
        "minLength(s = \"(())\")",
        "minLength(s = \"ABACABAC\")",
        "minLength(s = \"ABCAB\")"
    ],
    "sample_7": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [3, 5], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 3, queries = [[1,2],[2,3],[1,3]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[2, 1], [1, 2], [3, 0], [3, 2]])",
        "colorTheArray(n = 5, queries = [[1,2], [3,1], [2,3], [1,4], [2,4]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,3],[2,4],[3,2],[4,5]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [1, 3], [0, 3], [1, 1]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [3, 1], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 1], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[0, 2], [2, 3], [2, 4], [1, 1]])",
        "colorTheArray(n = 4, queries = [[0, 2], [1, 3], [2, 1], [3, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 3], [1, 2], [2, 4], [3, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [1, 4], [0, 0]])",
        "colorTheArray(n=5, queries=[[1,2],[2,3],[2,1],[1,3],[0,0]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [2,1,3,5,4])",
        "semiOrderedPermutation(nums = [2,1,4,3,6])",
        "semiOrderedPermutation(nums = [1,2,3,5,4])",
        "semiOrderedPermutation(nums = [2,1,4,3,5])",
        "semiOrderedPermutation(nums = [3,2,1,5,6])",
        "semiOrderedPermutation(nums = [3,2,1,4,5])",
        "semiOrderedPermutation(nums = [3,1,2,5,4])",
        "semiOrderedPermutation(nums = [1,3,5])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3, 5])",
        "semiOrderedPermutation(nums = [3,1,2,5])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [5, 10, 15, 20, 25], threshold = 20)",
        "longestAlternatingSubarray(nums = [5, 2, 3, 4, 5, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 7, 5, 6], threshold = 3)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num='512301')",
        "removeTrailingZeros(num = '51230100')"
    ],
    "sample_50": [
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"abab\")",
        "smallestString(s = \"baaab\")",
        "smallestString(s = \"baaaa\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = 'abaab')",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"zabaab\")",
        "smallestString(s = \"abaca\")",
        "smallestString(\"zab\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 20, additionalTank = 10)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 3)",
        "distanceTraveled(mainTank = 20, additionalTank = 3)",
        "distanceTraveled(mainTank = 20, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)"
    ],
    "sample_118": [
        "minimumIndex(nums = [2, 1, 3, 2])",
        "minimumIndex(nums = [2, 1, 3, 2])",
        "minimumIndex(nums = [2, 1, 3, 2])",
        "minimumIndex(nums = [2, 1, 3, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 2, 3, 4, 5])",
        "minimumIndex(nums = [1, 1, 2, 2, 1])",
        "minimumIndex(nums = [1,1,2,2,2,2,3,3,3,3,4,4,4,4,4])",
        "minimumIndex(nums = [1, 3, 3, 1, 2, 2, 2, 3, 1])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [15, 20, 75, 45])",
        "countBeautifulPairs(nums = [10, 11, 25, 36])",
        "countBeautifulPairs(nums = [15, 20, 75, 46, 86, 84, 65])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"5123010\")",
        "removeTrailingZeros(num='512301')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"aaaabbb\")",
        "minimizedStringLength(s = \"aaaabb\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 3], k = 2)",
        "maximumBeauty(nums = [1, 2, 3], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 6)",
        "makeTheIntegerZero(num1 = 15, num2 = 7)",
        "makeTheIntegerZero(num1 = 15, num2 = 10)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 7)",
        "makeTheIntegerZero(num1 = 5, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 6)",
        "makeTheIntegerZero(num1 = 7, num2 = 11)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [3, 2, 1, 5, 4])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 47])",
        "findValueOfPartition(nums = [3, 2, 1, 2, 3])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 54, 75])",
        "findValueOfPartition(nums = [3, 7, 2, 1, 5, 7, 9])",
        "findValueOfPartition(nums = [1, 5, 3, 6, 3, 6, 1])",
        "findValueOfPartition(nums = [1, 2, 3, 5])",
        "findValueOfPartition(nums = [1, 5, 7, 3, 6, 9, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 6, 2, 8, 3, 1])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 50, additionalTank = 0)",
        "distanceTraveled(mainTank = 7, additionalTank = 0)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)",
        "distanceTraveled(mainTank = 60, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 30, additionalTank = 2)",
        "distanceTraveled(mainTank = 70, additionalTank = 0)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'race')",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'eve')",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"level\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 1)",
        "checkArray(nums = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "checkArray(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "checkArray(nums = [2, 2, 2], k = 1)",
        "checkArray(nums = [1, 2, 3, 1, 1, 1], k = 3)",
        "checkArray(nums = [1,2,3,2,4], k = 2)",
        "checkArray(nums = [1, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1,1,1,0,1,0], k = 3)",
        "checkArray(nums = [3, 3, 3, 0, 0, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,",
        "checkArray(nums = [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0,1,0,1,0,1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1,0,1,0,1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1])"
    ],
    "sample_54": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"abcdefg\")",
        "smallestString(s = \"abcdefg\")",
        "smallestString(s = 'abcde')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"abcdef\")",
        "smallestString(s = \"aba\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 1, 2])",
        "continuousSubarrays(A = [1,2,3,1,2,3,1,2,3,1,2,3])",
        "continuousSubarrays(A = [1,2,3,1,2,3,1,2])",
        "continuousSubarrays(A=[1, 2, 3, 1, 3])",
        "continuousSubarrays(A = [1,2,2,3,4])",
        "continuousSubarrays(A = [2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1])",
        "continuousSubarrays(A = [1, 1, 1, 3, 3, 2, 4])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 1, 2, 2, 3, 2, 1, 2])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = 'race')",
        "makeSmallestPalindrome(s = 'race')",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"abcd\")",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = 'bba')",
        "makeSmallestPalindrome(s = \"race\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 27])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 28])",
        "findValueOfPartition(nums = [3, 30, 34, 5, 9])",
        "findValueOfPartition(nums = [3, 30, 34, 5, 9])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 7])",
        "findValueOfPartition(nums = [7, 3, 5, 6])",
        "findValueOfPartition(nums = [3, 7, 2, 5, 1])",
        "findValueOfPartition(nums = [3, 5, -4, 8, 10, 14, 2, 4, -1])"
    ],
    "sample_51": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"bcd\")",
        "smallestString(s = 'bcd')",
        "smallestString(s = \"abcde\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = 'a')",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"zcdsbncd\")",
        "smallestString(s = \"bcdefghijklmnopqrstuvwxyz\")",
        "smallestString(s = \"mqvxzfrd\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7], k = 2)",
        "maximumBeauty(nums = [4, 6, 2, 7, 8], k = 1)",
        "maximumBeauty(nums = [1, 2, 2, 3, 4, 5, 5, 5, 5, 6, 7, 7, 8, 9, 9, 9, 10], k = 2)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "checkArray(nums = [1,2,3,4,5,6,7], k = 3)",
        "checkArray(nums = [3, 2, 1, 5, 6, 4], k = 3)",
        "checkArray(nums = [3,2,1,4,5], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 15, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 3)",
        "distanceTraveled(mainTank = 30, additionalTank = 1)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3])",
        "distinctDifferenceArray(nums = [1, 3, 2, 2, 7, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 2])",
        "distinctDifferenceArray(nums = [1, 3, 2, 3, 1, 4])",
        "distinctDifferenceArray(nums = [1, 3, 2, 3, 1, 2, 1])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2])",
        "continuousSubarrays(A = [1, 2, 3, 4])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 1, 2])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "continuousSubarrays(A = [1, 2, 3, 3, 4, 4, 4, 5, 6])",
        "continuousSubarrays(A = [0, 2, 2, 3, 3, 3])",
        "continuousSubarrays(A=[1,1,1,2,2,2,2,3,3,3,3])",
        "continuousSubarrays(A = [1,2,3,4,5,1,2,3,4,5,6,7,8,9])"
    ],
    "sample_6": [
        "colorTheArray(n=5, queries=[[1,2],[2,3],[2,4],[1,4],[1,5]])",
        "colorTheArray(n = 5, queries = [[0,1],[2,1],[2,2]])",
        "colorTheArray(n = 6, queries = [[0, 1], [1, 2], [2, 3]])",
        "colorTheArray(n=5, queries=[[0, 1], [1, 0], [1, 2], [2, 0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [3, 1], [4, 1]])",
        "colorTheArray(n=10, queries=[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]])",
        "colorTheArray(n=5, queries=[[0,1],[2,1],[2,2],[3,2],[3,3]])",
        "colorTheArray(n=10, queries=[[3,1],[8,0],[7,0],[3,0]])",
        "colorTheArray(n = 6, queries = [[1,1],[2,2],[3,3],[1,2],[2,1]])",
        "colorTheArray(n = 6, queries = [[2,3],[1,2],[2,1]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 3, b = 2)",
        "makeTheIntegerZero(a = 3, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 15, b = 5)",
        "makeTheIntegerZero(a = 10, b = 7)",
        "makeTheIntegerZero(a = 17, b = 4)",
        "makeTheIntegerZero(a = 30, b = 10)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [10, 20, 30], target = 2)",
        "maximumJumps(nums = [10,20,30,50,60], target = 10)",
        "maximumJumps(nums = [1, 3, 6, 10, 1, 1], target = 3)",
        "maximumJumps(nums = [2,3,4,5], target = 1)",
        "maximumJumps(nums = [2,2,3,4,5,6,7,8,9,10], target = 2)",
        "maximumJumps(nums = [20,1,15,3,10], target = 2)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6], threshold = 6)",
        "longestAlternatingSubarray(nums=[1, 2, 3, 4, 5, 6], threshold=5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 1, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums=[2, 7, 4, 1, 8, 3], threshold=5)",
        "longestAlternatingSubarray(nums=[1,3,5,7,9], threshold=4)",
        "longestAlternatingSubarray(nums = [2, 3, 1, 5, 4, 2, 3, 1], threshold = 4)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [1,2,3,4,5], b = [2,3,4,5,6])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 1, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [2, 1, 3, 4])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,0,0,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,0,1,1,0,0,1,1,0,0,1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 10)",
        "longestAlternatingSubarray(nums=[1, 3, 5, 7], threshold=5)",
        "longestAlternatingSubarray(nums = [5, 10, 15], threshold = 20)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 11, 13, 15], threshold = 10)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 1, 2, 4], threshold = 3)",
        "longestAlternatingSubarray(nums = [5, 7, 9, 2, 4, 8], threshold = 6)",
        "longestAlternatingSubarray(nums = [3, 7, 2, 1, 6, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [5, 7, 8, 10, 6, 100, 10, 25], threshold = 15)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [7, 2, 5, 10, 7])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 54, 75, 97])",
        "findValueOfPartition(nums = [3, 8, 1, 4, 10, 7])",
        "findValueOfPartition(nums = [7, 3, 5, 6])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'abcdcba')",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(\"abba\")",
        "makeSmallestPalindrome(s = 'race')"
    ],
    "sample_18": [
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"AC\")",
        "minLength(s = \"ACDB\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ACDBA\")",
        "minLength(s = \"AC\")",
        "minLength(s = \"BACDAB\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [2, 1, 3], target = 1)",
        "maximumJumps(nums = [2, 1, 4, 7, 5, 10], target = 2)",
        "maximumJumps(nums = [2, 1, 4, 7, 5, 10, 6], target = 1)",
        "maximumJumps(nums = [2,2,3,8,5,6,10,11,12], target = 4)",
        "maximumJumps(nums = [3,2,2,2], target = 1)",
        "maximumJumps(nums = [2,2,3,\u901a\u8fc7\u6307\u5b9a\u8d1f\u6570\u7684\u6574\u6570\u5217\u8868], target = 3)",
        "maximumJumps(nums = [2,1,3,7,5,4,9,6,9,3,7,6,6], target = 5)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 1], [1, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1,1],[2,2],[3,3],[1,2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [3, 4], [1, 3], [4, 5]])",
        "colorTheArray(n = 6, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[2, 1], [3, 2], [1, 1], [4, 4], [3, 3]])",
        "colorTheArray(n = 5, queries = [[2, 1], [1, 2], [3, 3], [4, 5], [2, 3]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 1], [2, 1], [0, 3], [2, 2]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank=5, additionalTank=1)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [15, 20, 25])",
        "countBeautifulPairs(nums = [10, 20, 30])",
        "countBeautifulPairs(nums = [13, 25])",
        "countBeautifulPairs(nums = [13, 25])",
        "countBeautifulPairs(nums = [12, 34, 67, 9])",
        "countBeautifulPairs(nums = [10, 7, 8, 12])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 5, 3, 19, 26], x = 3)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 5, 3, 19, 26, 3, 23, 47], x = 3)",
        "minCost(A = [3, 2, 5, 4, 1], x = 2)",
        "minCost(A = [1, 3, 5], x = 2)",
        "minCost(A=[10, 20, 30, 40], x=2)",
        "minCost(A = [3, 5, 2, 6], x = 2)",
        "minCost(A = [1, 3, 4, 5, 6], x = 2)",
        "minCost(A = [1, 3, 2, 6, 7, 8, 4, 9], x = 3)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 0)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1,5,3,19,2,7], target = 2)",
        "maximumJumps(nums = [2,2,3,4,5,6,7,8,9,10], target = 1)",
        "maximumJumps(nums = [1,5,3,6,7,6,3,0,7], target = 2)",
        "maximumJumps(nums = [2, 5, 6, 8, 2], target = 1)",
        "maximumJumps(nums = [1,5,4,2,3,1], target = 3)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 1, 2, 3, 4, 4, 4])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12, 34, 67, 89, 23])",
        "countBeautifulPairs(nums = [12, 34, 67, 89, 64])",
        "countBeautifulPairs(nums = [123, 345, 678, 910])",
        "countBeautifulPairs(nums = [1234, 6789, 12, 123])",
        "countBeautifulPairs(nums = [123, 345, 789, 567, 890])",
        "countBeautifulPairs(nums = [123, 324, 456, 567, 678])",
        "countBeautifulPairs(nums = [12, 34, 14, 23, 79])",
        "countBeautifulPairs(nums = [1234, 6789, 1112, 3334, 7778])",
        "countBeautifulPairs(nums = [123, 345, 789, 654, 432])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"apple\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"10011\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 2])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 4, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 4, 3, 2, 1])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1,2,3,2,1])",
        "doesValidArrayExist(derived = [1, 2, 3, 1])",
        "doesValidArrayExist(derived = [1, 2, 4, 8, 16])",
        "doesValidArrayExist(derived = [1, 2, 3, 3, 2, 1])",
        "doesValidArrayExist(derived = [2, 1, 3, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "doesValidArrayExist(derived = [2, 4, 6, 8])",
        "doesValidArrayExist(derived = [1, 2, 3, 5, 5, 7, 7, 9, 9])",
        "doesValidArrayExist(derived = [2, 3, 2, 3, 2, 3, 2, 3])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 1, 2])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 5, 5, 6])",
        "doesValidArrayExist(derived = [1, 0, 3, 2, 5])",
        "doesValidArrayExist(derived = [0, 1, 2, 0, 1, 2, 0, 1])",
        "doesValidArrayExist(derived = [0, 2, 3, 3, 5, 5, 6])"
    ],
    "sample_52": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"abcdefg\")",
        "smallestString(s = \"bncdsk\")",
        "smallestString(s = 'banana')",
        "smallestString(s = \"bncdsa\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"bddsaa\")",
        "smallestString(s = \"bbb\")",
        "smallestString(s = \"kadbd\")",
        "smallestString(s = \"yeddaks\")"
    ],
    "sample_40": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abcd\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"aabbb\")",
        "minimumCost(s = \"abab\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])"
    ],
    "sample_53": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"baaab\")",
        "smallestString(s = \"bababc\")"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1,2,3,1,2], k = 3)",
        "checkArray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [1,2,3,5,7], k = 3)",
        "checkArray(nums = [2, 3, 3, 2, 4, 3], k = 2)",
        "checkArray(nums = [1,2,3,4,1,1,3,2,4,2], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,2,2,2,3,3,3], k = 2)",
        "maximumBeauty(nums = [1,2,2,2,3,3,3], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "maximumBeauty(nums = [1, 3, 3, 3, 2, 5, 5, 5, 5], k = 2)",
        "maximumBeauty(nums = [1,3,3,9,2,4,9,12,12], k = 2)",
        "maximumBeauty(nums = [4,6,2,7,9,2], k = 1)",
        "maximumBeauty(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums=[4,2,3,1,5], k=2)",
        "maximumBeauty(nums = [4,6,7,7,8,10], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1,2,3,4,5])",
        "distinctDifferenceArray(a = [1,2,3,2,1])",
        "distinctDifferenceArray(a = [1, 1, 2, 3, 4])",
        "distinctDifferenceArray(a = [1,2,3,2,5])",
        "distinctDifferenceArray(a = [1,2,3,2,2,2,3])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = \"512301\")",
        "removeTrailingZeros(a = '5123010')",
        "removeTrailingZeros(a = '512301000')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"neve\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"radar\")",
        "makeSmallestPalindrome(s = \"bneven\")",
        "makeSmallestPalindrome(s = \"emo\")"
    ],
    "sample_55": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"bcd\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"bbcdd\")",
        "smallestString(s = \"aabbbccc\")",
        "smallestString(s = 'abcdef')",
        "smallestString(s = \"bzcd\")",
        "smallestString(s = \"bbbcc\")",
        "smallestString(s = 'dcb')",
        "smallestString(s = \"jxcvbnmlk\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num='51230100')"
    ],
    "sample_23": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s=\"ABCABD\")",
        "minLength(s = \"ACDBCDB\")",
        "minLength(s = \"ABCDECAB\")",
        "minLength(s=\"ABCDEABC\")",
        "minLength(s = \"ACDBBDC\")",
        "minLength(s = \"ACDBCBABCDDC\")",
        "minLength(s = \"ABCCABCDABCDABCCABCD\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '5123010')"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 1)",
        "makeTheIntegerZero(num1 = 5, num2 = 10)"
    ],
    "sample_57": [
        "distanceTraveled(a = 6, b = 1)",
        "distanceTraveled(a = 7, b = 0)",
        "distanceTraveled(a = 5, b = 0)",
        "distanceTraveled(a = 10, b = 1)",
        "distanceTraveled(a = 10, b = 1)",
        "distanceTraveled(a = 3, b = 0)",
        "distanceTraveled(a = 20, b = 5)",
        "distanceTraveled(a = 100, b = 0)",
        "distanceTraveled(a = 3, b = 3)",
        "distanceTraveled(a = 20, b = 10)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], t = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], t = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], t = 10)",
        "longestAlternatingSubarray(nums = [1,3,7,5,9,2,15], t = 6)",
        "longestAlternatingSubarray(nums = [2, 7, 4, 1, 8, 3], t = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 1, 5], t = 6)",
        "longestAlternatingSubarray(nums=[2,4,6,8], t=10)",
        "longestAlternatingSubarray(nums = [2, 7, 8, 5], t = 5)",
        "longestAlternatingSubarray(nums=[2,3,2,3,2,3], t=3)",
        "longestAlternatingSubarray(nums = [1,2,5,6,3,2,3,5,6,1,2], t = 3)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [20,1,15,3,30,2], target = 2)",
        "maximumJumps(nums = [2,2,3,4], target = 1)",
        "maximumJumps(nums = [1, 5, 3, 19, 2, 7], target = 2)",
        "maximumJumps(nums = [2, 2, 2, 0, 0, 0], target = 1)",
        "maximumJumps(nums = [2,1,3], target = 0)",
        "maximumJumps(nums = [2, 7, 9, 3, 8, 10], target = 1)",
        "maximumJumps(nums = [2, 1, 4, 3, 10], target = 6)",
        "maximumJumps(nums = [2, 6, 3, 1, 5, 4], target = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '51230100')"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15], target = 3)",
        "maximumJumps(nums = [1,3,6,10,15], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [2, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [2,0,2,0,4,1,2,0,3,2,1,2,2,3,0,0,0,1,2,1,2,2,3,0,0,0,0,3], target = 0)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [2, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [2,0,0,0,0,0,0,0])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1])"
    ],
    "sample_19": [
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"AABC\")",
        "minLength(s = \"CABAD\")",
        "minLength(s = \"BABABA\")",
        "minLength(s = \"CADAB\")",
        "minLength(s = \"AB\")",
        "minLength(s = \"AABABBA\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"level\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = 'radar')",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"adbce\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [2,1,3,5,4])",
        "semiOrderedPermutation(nums = [2,1,4,3,5])",
        "semiOrderedPermutation(nums = [2,1,3,5,4])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3,2,1,5,6,4])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 0, 1, 0])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1, 5, 7, 8, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "maximumBeauty(nums = [1, 5, 3, 10, 15, 4, 7], k = 2)"
    ],
    "sample_117": [
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6])",
        "minimumIndex(nums = [2, 2, 1, 1, 5, 3, 3])",
        "minimumIndex(nums = [1, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [0, 1, 2, 2, 3, 3, 3])",
        "minimumIndex(nums = [2, 1, 3, 2, 4, 3, 1])",
        "minimumIndex(nums = [1, 3, 2, 3, 3])",
        "minimumIndex(nums = [1, 3, 2, 3])",
        "minimumIndex(nums = [3,1,3,2,4])",
        "minimumIndex(nums = [2,1,3,1,4,2,2,2,2,1,1,1,1,1,1])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 16, num2 = 4)",
        "makeTheIntegerZero(num1 = 15, num2 = 1)",
        "makeTheIntegerZero(num1 = 25, num2 = 5)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [15, 20, 25])",
        "countBeautifulPairs(nums = [15, 20, 25, 30])",
        "countBeautifulPairs(nums = [11, 22, 33, 44, 55])",
        "countBeautifulPairs(nums = [1, 3, 5, 7, 2, 4, 6, 8])",
        "countBeautifulPairs(nums = [10, 30, 40, 20])",
        "countBeautifulPairs(nums = [15, 10, 75, 25])",
        "countBeautifulPairs(nums = [15, 33, 90])",
        "countBeautifulPairs(nums = [105, 101, 109, 107])",
        "countBeautifulPairs(nums = [15, 21, 30, 25, 40])",
        "countBeautifulPairs(nums = [34, 23, 67, 56, 89, 45, 12, 6])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 10, num2 = 4)",
        "makeTheIntegerZero(num1 = 2, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 8, num2 = 4)",
        "makeTheIntegerZero(num1 = 255, num2 = 128)",
        "makeTheIntegerZero(num1 = 23, num2 = 5)",
        "makeTheIntegerZero(num1 = 40, num2 = 20)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ACDBCB\")",
        "minLength(s = \"ACDBCB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ABABDABACD\")",
        "minLength(s = \"ACDBCB\")",
        "minLength(s = \"AABABBA\")",
        "minLength(s = \"ABBBABC\")",
        "minLength(s = \"ABXYZXYZ\")",
        "minLength(s = \"ABABDABAC\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,3,3,4,7,9,9], k = 2)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [15, 20, 25])",
        "countBeautifulPairs(nums = [1,3,5,7,9])",
        "countBeautifulPairs(nums = [12, 5, 75, 35])",
        "countBeautifulPairs(nums=[15, 20, 25, 30])",
        "countBeautifulPairs(nums = [15, 20, 25, 50])",
        "countBeautifulPairs(nums = [14, 27, 35, 46, 57])",
        "countBeautifulPairs(nums = [123, 345, 678, 910])",
        "countBeautifulPairs(nums=[15, 21, 3, 7])",
        "countBeautifulPairs(nums = [1234, 3456, 7891, 2345])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 2)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 4)",
        "makeTheIntegerZero(num1 = 17, num2 = 4)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 3)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"race\")",
        "makeSmallestPalindrome(s = \"abcdcba\")",
        "makeSmallestPalindrome(s = \"level\")",
        "makeSmallestPalindrome(s = 'racecar')",
        "makeSmallestPalindrome(s = 'reven')"
    ],
    "sample_37": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcab\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,1,1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums=[1, 1, 1, 0, 0, 1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums=[1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    ],
    "sample_105": [
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1,2,3,4,5], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 4)",
        "checkArray(nums = [5, 2, 3, 6], k = 2)",
        "checkArray(nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 4)",
        "checkArray(nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 20)",
        "checkArray(nums = [2, 3, 1, 1, 0, 1, 2], k = 3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3,2,1,5,4])",
        "semiOrderedPermutation(nums = [1, 3, 5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 6, 7])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [0, 0, 0, 0, 0], k = 2)",
        "checkArray(nums = [2, 1, 2], k = 1)",
        "checkArray(nums = [2, 3, 1, 0], k = 2)",
        "checkArray(nums=[1, 1, 1, 1], k=0)",
        "checkArray(nums = [2, 4, 2, 7, 5], k = 2)",
        "checkArray(nums = [1, 0, 3, 0, 4, 0], k = 1)",
        "checkArray(nums = [2, 3, 1, 1, 2, 4, 5], k = 2)",
        "checkArray(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], k = 5)",
        "checkArray(nums = [5, -1, -2, 3], k = 1)"
    ],
    "sample_39": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"abbbc\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 26])",
        "findValueOfPartition(a = [2, 5, 3, 1, 6])",
        "findValueOfPartition(a = [1, 5, 3, 19, 26, 38, 54, 75])",
        "findValueOfPartition(a = [1, 3, 5, 10])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 25, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 4)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [2, 3, 2, 3, 2, 3, 2, 3])",
        "doesValidArrayExist(derived = [2, 1, 3, 2, 3])",
        "doesValidArrayExist(derived = [2, 5, 5, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 5, 5, 5, 6])",
        "doesValidArrayExist(derived = [4,1,2,1,2])",
        "doesValidArrayExist(derived = [2, 1, 5, 3, 1, 1, 2])",
        "doesValidArrayExist(derived = [1, 3, 1, 1, 1, 3, 1, 1])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [3,2,1,5,6,4], k = 2)",
        "checkArray(nums = [2,1,3,2,4,3], k = 3)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1], k = 0)",
        "checkArray(nums = [5, 3, 5, 2, 6, 4, 10, 10, 2], k = 2)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1,3,5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1,3,5,7,9,11], threshold = 10)",
        "longestAlternatingSubarray(nums = [4,3,2,7,8,2,3,4], threshold = 5)",
        "longestAlternatingSubarray(nums = [7, 1, 3, 6], threshold = 6)",
        "longestAlternatingSubarray(nums = [3, 2, 4, 5, 6], threshold = 7)",
        "longestAlternatingSubarray(nums = [2,4,6,3,7,5], threshold = 6)",
        "longestAlternatingSubarray(nums = [2,3,1,4,5,7], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,3,1,2,5,2], threshold = 10)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [12, 34, 67, 89])",
        "countBeautifulPairs(nums = [15, 20, 25])",
        "countBeautifulPairs(nums = [11, 55])",
        "countBeautifulPairs(nums = [10, 3])",
        "countBeautifulPairs(nums = [15, 20, 5, 10])",
        "countBeautifulPairs(nums = [123, 456, 789])",
        "countBeautifulPairs(nums = [1215, 3269, 4572, 7896, 5167, 5489, 6784, 1233, 7696, 7965, 1345, 7892, 4567, 1234, 5678, 6459, 6589, 7894, 6589, 8765, 6798, 4569, 5478, 8912, 5689, 6795, 7894, 5478, 4569, 9876, 5432, 6589, 7865, 8912, 6798, 9876, 5432, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5432, 6798, 9876, 5"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], t = 10)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,12,14,16,18,20], t = 20)",
        "longestAlternatingSubarray(nums = [1,2,3,5,6,7], t = 5)",
        "longestAlternatingSubarray(nums = [4, 2, 5, 8, 7], t = 5)",
        "longestAlternatingSubarray(nums=[1,3,5,9,2,4,6,8], t=10)",
        "longestAlternatingSubarray(nums = [3, 2, 1, 4, 7, 8, 5, 6], t = 6)",
        "longestAlternatingSubarray(nums = [2,1,3,4,7,8,6,5], t = 5)",
        "longestAlternatingSubarray(nums = [3,4,2,1,5,6], t = 10)",
        "longestAlternatingSubarray(nums = [5, 2, 1, 6, 4, 3, 7], t = 4)",
        "longestAlternatingSubarray(nums = [5,15,3,10,15,7], t = 15)"
    ],
    "sample_36": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abbbab\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"AAAAA\")",
        "minLength(s = \"ABCDEABCDABC\")",
        "minLength(s = \"ABABDABCDABAB\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 1, 0, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 0, 1])"
    ],
    "sample_9": [
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3]])",
        "colorTheArray(n = 10, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]])",
        "colorTheArray(n = 5, queries = [[1, 2], [3, 4], [1, 3]])",
        "colorTheArray(n = 5, queries = [[1,2], [2,3], [3,4], [4,5]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [1, 3], [2, 4]])",
        "colorTheArray(n=5, queries=[(0, 1), (1, 2), (2, 3), (3, 4)])",
        "colorTheArray(n = 3, queries = [[1, 1], [2, 2], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 3], [2, 4], [3, 1]])",
        "colorTheArray(n=5, queries=[(2, 1), (3, 2), (4, 3), (3, 1), (1, 2)])",
        "colorTheArray(n = 5, queries = [[0, 3], [1, 2], [0, 3], [2, 1], [0, 2]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1,2,3,2,1], nums2 = [1,2,3,2,1])",
        "maxNonDecreasingLength(nums1 = [3, 4, 5, 6], nums2 = [1, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [2, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 1, 3])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 7, 9], nums2 = [1, 2, 4, 6, 7])",
        "maxNonDecreasingLength(nums1 = [4, 1, 5, 2, 6, 3], nums2 = [4, 1, 5, 2, 6, 3])",
        "maxNonDecreasingLength(nums1 = [1,3,2,3,5], nums2 = [1,2,3,1,2])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 4, 2], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 4, 1, 2], k = 3)",
        "maximumBeauty(nums = [4, 2, 3, 1, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 1, 2], k = 3)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 4, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1, 2], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 4, 3, 3, 9, 0, 7, 7], k = 3)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 54, 75, 97])",
        "findValueOfPartition(nums = [7, 2, 5, 10, 7])",
        "findValueOfPartition(nums = [7, 3, 5, 9])",
        "findValueOfPartition(nums = [1,5,3,6,7,9])",
        "findValueOfPartition(nums = [5, 3, 1, 2])",
        "findValueOfPartition(nums = [3, 6, 9, 20, 10])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1,5,3,19,26,38,44])",
        "findValueOfPartition(nums = [3,1,4,2,5])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 5])",
        "findValueOfPartition(nums = [7, 3, 5, 1])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(nums = [7,3,5,8])",
        "findValueOfPartition(nums = [1,5,3,19,26,38,63,78])",
        "findValueOfPartition(nums = [3, 1, 4, 2, 3, 1, 2])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 6, 45, 43])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 6])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 6, 7])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [2,1,3,4,6,5])",
        "semiOrderedPermutation(nums = [2, 1, 0, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 0, 5, 4])",
        "semiOrderedPermutation(nums = [1, 2, 0, 5, 6])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])"
    ]
}