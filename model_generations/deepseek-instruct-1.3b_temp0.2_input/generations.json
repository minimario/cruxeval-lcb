{
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])"
    ],
    "sample_453": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 101], target = 100)"
    ],
    "sample_381": [
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 6)",
        "countPairs(nums = [1, 2, 7, 4], t = 10)"
    ],
    "sample_366": [
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 5, 6])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_369": [
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])"
    ],
    "sample_448": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(\"abc\")",
        "minChanges(\"abc\")",
        "minChanges(\"abc\")",
        "minChanges(\"abc\")",
        "minChanges(\"aaabb\")",
        "minChanges(\"aaabbb\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"xyz\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 4, 2, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 2, 3])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 3, 2, 1])",
        "isGood(a = [1, 2, 3, 2, 1])",
        "isGood(a = [1, 2, 3, 2, 1])",
        "isGood(a = [1, 2, 3, 2, 1])",
        "isGood(a = [1, 2, 3, 4, 4, 3, 2, 1])",
        "isGood(a = [1, 2, 3, 4, 4, 3, 2, 1])",
        "isGood(a = [1, 2, 3, 4, 4, 3, 2, 1])",
        "isGood(a = [1, 2, 3, 4, 5, 5, 5, 6, 7, 7, 7, 7])",
        "isGood(a = [1, 2, 3, 4, 5, 5, 5, 6, 7, 7, 7, 7])",
        "isGood(a = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 5)",
        "minOperations(nums = [1,2,3,4,5], k = 3)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1, 2, 3, 4, 5])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9,10])",
        "findMaximumLength(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 2, 2, 2])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 2, 2, 2])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 2, 2, 2])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 2, 2, 2])",
        "maxSubarrays(nums = [1, 2, 3, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "maxSubarrays(nums = [2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29])",
        "maxSubarrays(nums = [1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 5)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 5)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"next\"])"
    ],
    "sample_422": [
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [2, 3, 1, 4, 3], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [2, 3, 1, 4, 3], k = 4)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")"
    ],
    "sample_372": [
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"lEOtcede\")",
        "sortVowels(s = \"Eleetcede\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])"
    ],
    "sample_452": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)"
    ],
    "sample_427": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 4, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 4, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 2, 3, 3, 4, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 4, 2, 2, 3, 4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 3, 4, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 3, 3, 4, 2, 3, 2, 3, 3])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5, 6])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5, 6])",
        "isGood(nums = [1, 2, 3, 5, 6])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 101], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 101], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7, 101], target = 100)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)"
    ],
    "sample_365": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1,3,7,13,19], target = 20)"
    ],
    "sample_450": [
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"aabbb\")"
    ],
    "sample_463": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 7, limit = 2)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_449": [
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"0110\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 4, 4, 4, 4])",
        "minOperations(nums = [2, 2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2, 2])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azbc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1,2,3,2,1])",
        "minimumSeconds(nums = [1,2,3,2,1])",
        "minimumSeconds(nums = [1,2,3,2,1])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,7,11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,2,3,7,11], target = 11)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 7], target = 6)"
    ],
    "sample_370": [
        "sortVowels(s = \"programming\")",
        "sortVowels(s = \"programming\")",
        "sortVowels(s = \"programming\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Hello World\")",
        "sortVowels(s = \"Hello World\")"
    ],
    "sample_421": [
        "minOperations(nums = [2, 3, 1, 2, 4, 3], k = 7)",
        "minOperations(nums = [2, 3, 1, 2, 4, 3], k = 7)",
        "minOperations(nums = [2, 3, 1, 2, 4, 3], k = 7)",
        "minOperations(nums = [2, 3, 1, 2, 4, 3], k = 7)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [1, 2, 3, 4], k = 4)",
        "minOperations(nums = [2, 2, 1, 1, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [2, 3, 1, 2, 4, 3], k = 6)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 10)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5])",
        "maxSubarrays(nums = [2, 3, 1, 2, 4, 3])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 4, 3, 2, 1])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5])",
        "maxSubarrays(nums = [1, 2, 3, 3, 3, 4, 4, 5])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [1, 2], [3, 4]], k = 2)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"1101110111011101\")",
        "minimumBeautifulSubstrings(s = \"1101110111011101\")",
        "minimumBeautifulSubstrings(s = \"1101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011",
        "minimumBeautifulSubstrings(s = \"1101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011",
        "minimumBeautifulSubstrings(s = \"1101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011",
        "minimumBeautifulSubstrings(s = \"1101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011",
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"1101110111011101\")",
        "minimumBeautifulSubstrings(s = \"1101110111011101\")",
        "minimumBeautifulSubstrings(s = \"1101110111011101\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "maxSubarrays(nums = [2, 3, 5, 7, 11, 13, 17, 19])",
        "maxSubarrays(nums = [2, 3, 1, 2, 4, 3])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 4)",
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 2)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 2, 3, 4, 4, 4, 5])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 4, 5])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 4, 5])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 4, 5])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 4, 5, 5])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6])",
        "isGood(nums = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 5, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 5)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 5, k = 4)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)"
    ],
    "sample_364": [
        "isGood(nums = [3,2,1,5,6])",
        "isGood(nums = [3,2,1,5,6])",
        "isGood(nums = [3,2,1,5,6])",
        "isGood(nums = [3,2,1,5,6])",
        "isGood(nums = [3,2,1,5,6])",
        "isGood(nums = [1,2,3,5,6,4,7])",
        "isGood(nums = [1,2,3,5,6,4])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [3,1,2,5,4])",
        "isGood(nums = [3, 2, 1, 5, 4])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 5, 6, 7, 10])",
        "minimumCoins(prices = [1, 5, 6, 7, 10])",
        "minimumCoins(prices = [1, 5, 10, 15, 20])",
        "minimumCoins(prices = [1, 5, 10, 15, 20])",
        "minimumCoins(prices = [1, 5, 10, 15, 20])",
        "minimumCoins(prices = [1, 5, 10, 15])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 5, 10, 100, 200])",
        "minimumCoins(prices = [1, 5, 10, 100, 200])",
        "minimumCoins(prices = [1, 5, 6, 7, 4, 10])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"1111111111\")",
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111\")",
        "minimumBeautifulSubstrings(s = \"1111111111111111111111111111111111111111111111111111111111111111\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"ab\", s2 = \"cd\")",
        "canBeEqual(s1 = \"abba\", s2 = \"cacb\")",
        "canBeEqual(s1 = \"abba\", s2 = \"cacb\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcbac\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 2, 3, 2, 3, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 3, 5, 5, 5, 4, 2, 1])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"za\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"azced\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"azcbex\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3]], k = 2)"
    ],
    "sample_451": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")"
    ],
    "sample_460": [
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 150)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 150)",
        "accountBalanceAfterPurchase(p = 150)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 150)",
        "accountBalanceAfterPurchase(p = 150)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 100)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 0, r = 4)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 0, r = 4)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 0, r = 4)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 0, r = 4)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9,10], l = 1, r = 5)",
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9,10], l = 1, r = 5)",
        "countSubMultisets(nums = [1,2,3,4,5,6,7,8,9,10], l = 1, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], l = 0, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], l = 2, r = 6)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\"])"
    ],
    "sample_428": [
        "minOperations(nums = [2,2,2,2])",
        "minOperations(nums = [2,2,2,2])",
        "minOperations(nums = [2,2,2,2])",
        "minOperations(nums = [2,2,2,2])",
        "minOperations(nums = [2,2,2,2])",
        "minOperations(nums = [2,2,2,2])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 1, 1])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"picked\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"picked\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"picked\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"picked\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"picked\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"picked\", \"2\", \"1\"])",
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"picked\", \"2\", \"1\", \"picked\"])",
        "lastVisitedIntegers(words = [\"picked\", \"picked\", \"picked\", \"2\", \"1\", \"picked\"])",
        "lastVisitedIntegers(words = [\"picked\", \"pick\", \"pick\", \"picked\", \"pick\", \"pick\"])",
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"i2\", \"i1\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"next\", \"prev\", \"prev\", \"next\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"prev\", \"next\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 3)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 1, 2])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"p\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"p\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 5)"
    ],
    "sample_424": [
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [1,1,2,2,3,3])",
        "minOperations(nums = [2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minOperations(nums = [2,2,3,3,3,4,4,4,4,5,5,5,5,5])",
        "minOperations(nums = [2,2,3,3,3,4,4,4,4,5,5,5,5,5])",
        "minOperations(nums = [1, 1, 2, 2, 3, 3])",
        "minOperations(nums = [3,3,3,6,6,6,9])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 4)",
        "minOperations(nums = [2, 7, 10, 2, 1, 5], k = 11)",
        "minOperations(nums = [2, 7, 10, 2, 1, 5], k = 11)",
        "minOperations(nums = [2, 7, 10, 2, 1, 5], k = 11)"
    ],
    "sample_371": [
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"YmpH\")"
    ],
    "sample_465": [
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")"
    ],
    "sample_380": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 7, 1, 5], target = 9)",
        "countPairs(nums = [1, 2, 7, 1, 5], target = 9)",
        "countPairs(nums = [1, 2, 7, 1, 5], target = 9)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 7, 1, 5], target = 9)",
        "countPairs(nums = [1, 2, 7, 11, 5], target = 13)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4])"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"I love Python\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"mYthOn\")",
        "sortVowels(s = \"mYthOn\")",
        "sortVowels(s = \"I love Python\")"
    ],
    "sample_462": [
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 2)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 4, 8, 16])",
        "minimumCoins(prices = [1, 2, 4, 8, 16, 32, 64, 128])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 1, 1, 1, 1])",
        "minOperations(nums = [3, 3, 3, 6, 6, 6, 9])",
        "minOperations(nums = [3, 3, 3, 6, 6, 6, 9])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3])",
        "minOperations(nums = [2, 2, 2, 2])",
        "minOperations(nums = [2, 2, 2, 2, 2])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 5, 7, 10])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abce\", s3 = \"abcf\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccddbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccddbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccddbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccddbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccddbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccddbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbcccddbb\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"pqr\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"pqr\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"pqr\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"pqr\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"pqr\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"pqr\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"pqr\", x = 1)",
        "minOperations(s1 = \"abc\", s2 = \"pqr\", x = 1)",
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"cde\", x = 1)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbb\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])"
    ],
    "sample_289": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"100\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(s = \"1001\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"bbaaabb\", k = 2)",
        "beautifulSubstrings(s = \"bbaaabb\", k = 2)",
        "beautifulSubstrings(s = \"bbaaabb\", k = 2)",
        "beautifulSubstrings(s = \"bbaaabb\", k = 2)",
        "beautifulSubstrings(s = \"bbaaabb\", k = 2)",
        "beautifulSubstrings(s = \"bbaaabb\", k = 2)",
        "beautifulSubstrings(s = \"bbaaabb\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"aabbbb\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minimumBeautifulSubstrings(s = \"111111\")",
        "minimumBeautifulSubstrings(s = \"111111\")",
        "minimumBeautifulSubstrings(s = \"1111111111\")",
        "minimumBeautifulSubstrings(s = \"1111111111\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 1])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,1,1,1,1])",
        "minOperations(nums1 = [1,2,3,5,7], nums2 = [1,3,7,9,11])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,1,1,1,1])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 4, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 4, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4, 4, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])",
        "alternatingSubarray(nums = [1,2,2,3,3,4,4,5,5])",
        "alternatingSubarray(nums = [1,2,2,3,4,4,4,5,5,5,5])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)"
    ],
    "sample_302": [
        "countSeniors(details = [\"John Doe, 65\", \"Jane Doe, 72\"])",
        "countSeniors(details = [\"John Doe, 65\", \"Jane Doe, 72\", \"Jim Doe, 60\"])",
        "countSeniors(details = [\"John Doe, 65\", \"Jane Doe, 72\", \"Jim Doe, 58\"])",
        "countSeniors(details = [\"John Doe, 65\", \"Jane Doe, 72\", \"Jim Doe, 60\"])",
        "countSeniors(details = [\"1990-01-01T00:00:00Z\", \"1991-02-01T00:00:00Z\"])",
        "countSeniors(details = [\"1990-01-01T00:00:00Z\", \"2005-12-31T00:00:00Z\"])",
        "countSeniors(details = [\"John Doe1990\", \"Jane Doe1860\"])",
        "countSeniors(details = [\"1990-01-01M\", \"2005-12-31M\", \"1985-07-01M\"])",
        "countSeniors(details = [\"1990-07-07T00:00:00-03:00\", \"1991-08-08T00:00:00-03:00\"])",
        "countSeniors(details = [\"1990-05-05T00:00:00-05:00\", \"1985-06-06T00:00:00-05:00\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"bbaa\", k = 2)",
        "beautifulSubstrings(s = \"bbaa\", k = 2)",
        "beautifulSubstrings(s = \"bbaa\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 1)",
        "beautifulSubstrings(s = \"bbaaabb\", k = 3)",
        "beautifulSubstrings(s = \"bbaaabb\", k = 3)",
        "beautifulSubstrings(s = \"bbaaee\", k = 2)",
        "beautifulSubstrings(s = \"bvhq\", k = 3)",
        "beautifulSubstrings(s = \"bvhjvhb\", k = 3)",
        "beautifulSubstrings(s = \"bvhgkj\", k = 2)"
    ],
    "sample_255": [
        "minimumSum(nums = [1, 5, 7, 8, 9])",
        "minimumSum(nums = [1, 5, 7, 8, 9])",
        "minimumSum(nums = [5,5,5,1,2])",
        "minimumSum(nums = [5,5,5,1,2,3,5,1])",
        "minimumSum(nums = [5,5,5,1,2,3,5,1])",
        "minimumSum(nums = [1, 5, 7, 8, 9])",
        "minimumSum(nums = [5,5,5,1,2,3,5])",
        "minimumSum(nums = [1, 5, 3, 6, 2, 9, 4, 8, 7])",
        "minimumSum(nums = [5, 5, 1, 1, 5])",
        "minimumSum(nums = [5, 5, 1, 1, 2, 3, 3])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1,2,3,2,3,4,2,5])",
        "alternatingSubarray(nums = [1,2,3,2,3,4,2,3,4,5])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1111\", k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"1111\", k = 4)"
    ],
    "sample_293": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"01001\")",
        "minimumSteps(s = \"010010\")",
        "minimumSteps(s = \"010010\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])"
    ],
    "sample_307": [
        "countSeniors(details = [\"1990-01-01T00:00:00Z\", \"2005-12-31T00:00:00Z\"])",
        "countSeniors(details = [\"1990-01-01M\", \"2005-12-31M\", \"1985-07-01M\"])",
        "countSeniors(details = [\"1990-01-01T00:00:00Z\", \"1969-12-31T00:00:00Z\"])",
        "countSeniors(details = [\"1990-01-01T00:00:00-05:00\", \"1991-02-01T00:00:00-05:00\"])",
        "countSeniors(details = [\"1990-01-01T00:00:00Z\", \"2000-12-31T00:00:00Z\"])",
        "countSeniors(details = [\"1990-01-01M\", \"2005-12-31M\", \"1980-07-15F\"])",
        "countSeniors(details = [\"1990-01-01T07:32:28Z\", \"1991-12-31T00:00:00Z\"])",
        "countSeniors(details = [\"1990-01-01T07:32:20-05:00\", \"1991-12-03T14:14:13-06:00\"])",
        "countSeniors(details = [\"1990-01-01T07:32:25Z\", \"1991-12-03T08:15:54Z\"])",
        "countSeniors(details = [\"1990-01-01T07:32:20Z\", \"1985-12-25T00:00:00Z\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"010011\")",
        "minimumSteps(s = \"010011\")",
        "minimumSteps(s = \"010011\")",
        "minimumSteps(s = \"100010001\")",
        "minimumSteps(s = \"100010001001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"000110\")",
        "minimumSteps(s = \"0001101\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,3,2,1,2,3,5,6,5,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,3,2,1,2,3,4,4,",
        "relocateMarbles(nums = [1,2,3,2,1], moveFrom = [1,2], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,3,2,1,2,3,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
        "relocateMarbles(nums = [1,2,3,2,1], moveFrom = [1,2], moveTo = [3,2])",
        "relocateMarbles(nums = [1, 2, 3, 2, 1, 3, 3], moveFrom = [1, 2, 2, 3], moveTo = [2, 3, 3, 1])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"abc\", k = 4)",
        "beautifulSubstrings(s = \"abc\", k = 4)",
        "beautifulSubstrings(s = \"babcbad\", k = 4)",
        "beautifulSubstrings(s = \"bbaa\", k = 4)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"bbaaabbb\", k = 3)",
        "beautifulSubstrings(s = \"bbaaabbb\", k = 4)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"aaa\", \"aab\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)",
        "buyChoco(prices = [1, 6, 3], money = 10)",
        "buyChoco(prices = [1, 6, 7], money = 12)",
        "buyChoco(prices = [1, 6, 7], money = 12)",
        "buyChoco(prices = [1, 6, 3, 1, 2, 5], money = 20)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 12)",
        "buyChoco(prices = [1, 6, 7, 8], money = 16)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"xyz\", \"wzy\", \"abc\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"efg\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\", \"efg\"])"
    ],
    "sample_323": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"John Doe, 62\", \"Jane Doe, 55\", \"Jim Doe, 72\"])",
        "countSeniors(details = [\"1990-01-01M60\", \"1991-12-31M90\", \"1985-07-01M75\"])",
        "countSeniors(details = [\"1990-01-01M60\", \"1991-02-01M70\", \"1992-03-01M80\"])",
        "countSeniors(details = [\"1990-07-07T00:00:00-07:00\", \"1991-07-07T00:00:00-07:00\", \"1992-07-07T00:00:00-07:00\"])",
        "countSeniors(details = [\"1990-01-01M60\", \"2000-12-31M90\", \"1980-07-15M75\"])",
        "countSeniors(details = [\"1990-01-01M60\", \"2000-12-31M90\", \"1980-01-01M70\"])",
        "countSeniors(details = [\"1990-07-07T00:00:00-07:00\",\"1991-08-08T00:00:00-07:00\",\"1992-09-09T00:00:00-07:00\"])",
        "countSeniors(details = [\"1990-05-05T00:00:00Z\", \"1985-07-04T00:00:00Z\", \"1995-10-15T00:00:00Z\"])",
        "countSeniors(details = [\"1990-01-01M60\", \"2001-12-01M75\", \"1985-11-25M45\"])",
        "countSeniors(details = [\"1990-05-05T00:00:00Z\", \"1991-05-06T00:00:00Z\", \"1992-05-07T00:00:00Z\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 3, 4, 3, 3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,1])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,1])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])",
        "minimumSum(nums = [1, 5, 1, 5])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"110111\", k = 4)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"abc\", k = 2)",
        "beautifulSubstrings(s = \"bba\", k = 2)",
        "beautifulSubstrings(s = \"bba\", k = 2)",
        "beautifulSubstrings(s = \"bbaaee\", k = 2)",
        "beautifulSubstrings(s = \"bbaaee\", k = 2)",
        "beautifulSubstrings(s = \"aei\", k = 2)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\"])"
    ],
    "sample_325": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 123)",
        "isFascinating(n = 12345679)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])",
        "minOperations(a = [1, 2, 3, 4, 5], b = [5, 4, 3, 2, 1])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 1, 1, 1, 1])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = \"011010\", k = 2)",
        "shortestBeautifulSubstring(s = \"011011\", k = 2)",
        "shortestBeautifulSubstring(s = \"011011\", k = 2)",
        "shortestBeautifulSubstring(s = \"011011\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"1101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"110111\", k = 3)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 5, 3, 6, 7, 4])",
        "minimumSum(nums = [1, 5, 3, 6, 7, 4])",
        "minimumSum(nums = [1, 5, 3, 6, 7, 4])",
        "minimumSum(nums = [1, 5, 3, 6, 7, 4])",
        "minimumSum(nums = [1, 5, 3, 6, 7, 4])",
        "minimumSum(nums = [5, 4, 3, 2, 1])",
        "minimumSum(nums = [5, 6, 8, 1, 3])",
        "minimumSum(nums = [1, 5, 3, 6, 2, 9, 4, 7, 8])",
        "minimumSum(nums = [5, 6, 1, 7, 8, 9, 3])",
        "minimumSum(nums = [5, 3, 2, 11, 7, 1, 4, 12, 8])"
    ],
    "sample_291": [
        "minimumSteps(s = \"0001100\")",
        "minimumSteps(s = \"0001100\")",
        "minimumSteps(s = \"0001100\")",
        "minimumSteps(s = \"0001100\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"001001\")",
        "minimumSteps(s = \"110011\")",
        "minimumSteps(s = \"1001001\")",
        "minimumSteps(s = \"0001101\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [3, 5, 2, 6], nums2 = [4, 1, 3, 2])",
        "minOperations(nums1 = [3, 5, 2, 6], nums2 = [4, 1, 3, 2])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1]])",
        "findChampion(grid = [[1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 1, 0, 0], [0, 0, 0, 1]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)"
    ],
    "sample_292": [
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"110011\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [3, 4])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [1, 1, 1, 1], [2, 2, 2, 2]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 1, 1, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 1], [1, 1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 6])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 6])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 6])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])"
    ],
    "sample_294": [
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"100100\")",
        "minimumSteps(s = \"100100\")",
        "minimumSteps(s = \"1001001\")",
        "minimumSteps(s = \"1001000\")",
        "minimumSteps(s = \"1001000\")",
        "minimumSteps(s = \"1001000\")",
        "minimumSteps(s = \"110011\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]])",
        "findChampion(grid = [[1, 0, 1, 1], [0, 1, 0, 1], [1, 0, 1, 0]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [0, 0, 0, 0, 0])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [1, 2, 3], money = 5)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"bba\", k = 2)",
        "beautifulSubstrings(s = \"bba\", k = 2)",
        "beautifulSubstrings(s = \"bba\", k = 2)",
        "beautifulSubstrings(s = \"bba\", k = 2)",
        "beautifulSubstrings(s = \"bbaa\", k = 2)",
        "beautifulSubstrings(s = \"apple\", k = 2)",
        "beautifulSubstrings(s = \"bbaaee\", k = 2)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abbcca\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")"
    ],
    "sample_341": [
        "longestString(x = 5, y = 6, z = 7)",
        "longestString(x = 5, y = 6, z = 7)",
        "longestString(x = 5, y = 6, z = 7)",
        "longestString(x = 5, y = 6, z = 7)",
        "longestString(x = 10, y = 20, z = 30)",
        "longestString(x = 10, y = 20, z = 30)",
        "longestString(x = 10, y = 20, z = 30)",
        "longestString(x = 10, y = 15, z = 2)",
        "longestString(x = 3, y = 5, z = 2)",
        "longestString(x = 3, y = 5, z = 4)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 4, 5])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 5, y = 3, z = 1)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 10, y = 20, z = 30)",
        "longestString(x = 5, y = 6, z = 7)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"11111\", k = 4)",
        "shortestBeautifulSubstring(s = \"11111\", k = 4)",
        "shortestBeautifulSubstring(s = \"11111\", k = 2)",
        "shortestBeautifulSubstring(s = \"110111\", k = 4)"
    ],
    "sample_324": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_258": [
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_321": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, -2, 3, 4, -5])",
        "maxStrength(nums = [1, -2, 3, 4, -5])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [1, 2, 3, 2, 1], moveFrom = [2, 1], moveTo = [3, 2])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 5, 8, 9, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9, 5, 6, 9], moveFrom = [5, 6], moveTo = [9, 8])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 10)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 15)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 15)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 15)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 15)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 15)",
        "buyChoco(prices = [1, 6, 7, 8], money = 10)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 6, 7], money = 12)",
        "buyChoco(prices = [1, 6, 7], money = 12)",
        "buyChoco(prices = [1, 6, 7], money = 12)",
        "buyChoco(prices = [1, 6, 7], money = 12)",
        "buyChoco(prices = [1, 6, 7], money = 12)",
        "buyChoco(prices = [1, 6, 7], money = 12)",
        "buyChoco(prices = [1, 6, 7, 8, 9], money = 15)",
        "buyChoco(prices = [1, 6, 7], money = 10)",
        "buyChoco(prices = [1, 6, 7], money = 10)",
        "buyChoco(prices = [1, 6, 5, 4, 3, 2, 1], money = 20)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,5,3,9,2])",
        "minimumSum(nums = [1,5,3,9,2])",
        "minimumSum(nums = [1,5,3,9,2])",
        "minimumSum(nums = [1,5,3,9,2])",
        "minimumSum(nums = [1,5,3,9,2])",
        "minimumSum(nums = [1, 5, 3, 6, 8, 9])",
        "minimumSum(nums = [1, 5, 3, 6, 8, 9])",
        "minimumSum(nums = [1, 5, 3, 6, 8, 9])",
        "minimumSum(nums = [1, 5, 3, 6, 8, 9])",
        "minimumSum(nums = [1, 5, 3, 6, 8, 9])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 6, 5, 2], money = 10)",
        "buyChoco(a = [1, 6, 5, 2], money = 10)",
        "buyChoco(a = [1, 6, 5, 2], money = 10)",
        "buyChoco(a = [1, 6, 5, 2], money = 10)",
        "buyChoco(a = [1, 6, 5, 2], money = 10)",
        "buyChoco(a = [1, 6, 5, 2], money = 10)",
        "buyChoco(a = [1, 6, 5, 2], money = 10)",
        "buyChoco(a = [1, 6, 5, 4, 3], money = 15)",
        "buyChoco(a = [1, 6, 5, 4, 3], money = 15)",
        "buyChoco(a = [1, 6, 5, 4, 3, 2, 1], money = 10)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [2, 1, 2, 5, 7, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [2, 1, 2, 5, 7, 1, 1, 1, 1, 1])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 1, 1, 1], [0, 0, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"1990-01-01M60\", \"1985-12-25M55\"])",
        "countSeniors(details = [\"1990-01-01M60\", \"1985-12-25M55\"])",
        "countSeniors(details = [\"1990-01-01M60\", \"1985-12-25M55\"])",
        "countSeniors(details = [\"1990-01-01M60\", \"1991-12-31M55\"])",
        "countSeniors(details = [\"1990-01-01M60\", \"2000-12-31M80\"])",
        "countSeniors(details = [\"1990-01-01M60\", \"2000-12-31M80\"])",
        "countSeniors(details = [\"1990-05-01M\", \"1995-07-01M\", \"2000-12-15F\"])",
        "countSeniors(details = [\"1990-05-01M\", \"1985-10-01M\"])",
        "countSeniors(details = [\"1990-01-01M60\", \"1995-02-01M75\", \"2000-03-01M80\"])",
        "countSeniors(details = [\"1990-05-01M\", \"1995-07-23F\", \"2000-12-21M\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"aeiouu\", k = 2)",
        "beautifulSubstrings(s = \"bva\", k = 2)",
        "beautifulSubstrings(s = \"bcbcbc\", k = 2)",
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"bbaa\", k = 2)",
        "beautifulSubstrings(s = \"bbaa\", k = 2)",
        "beautifulSubstrings(s = \"bbaa\", k = 2)",
        "beautifulSubstrings(s = \"bcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011\", k = 4)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101\", k = 2)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\", \"ghi\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"def\"])"
    ],
    "sample_327": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[7, 1, 3], [2, 9, 8], [5, 4, 6]])",
        "matrixSum(nums = [[7, 1, 3], [2, 9, 8], [5, 6, 4]])"
    ],
    "sample_326": [
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)",
        "isFascinating(n = 19)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [0, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3])",
        "minimumSum(nums = [1, 5, 3, 6, 2, 9, 4, 8, 7])",
        "minimumSum(nums = [1, 5, 3, 6, 2, 9, 4, 8, 7])",
        "minimumSum(nums = [1, 5, 3, 6, 2])",
        "minimumSum(nums = [1, 5, 3, 6, 2, 9, 4, 8, 7])",
        "minimumSum(nums = [5, 5, 1, 1, 2, 3, 3])",
        "minimumSum(nums = [5, 5, 1, 1, 2, 3, 3])",
        "minimumSum(nums = [5, 5, 1, 1, 1, 2, 2, 3, 3, 4, 4])"
    ],
    "sample_322": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_248": [
        "minOperations(s1 = \"1101\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1101\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1101\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1101\", s2 = \"0011\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 1)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 1)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 1)",
        "minOperations(s1 = \"001010\", s2 = \"010100\", x = 2)",
        "minOperations(s1 = \"001010\", s2 = \"010100\", x = 2)"
    ],
    "sample_342": [
        "longestString(x = 10, y = 15, z = 5)",
        "longestString(x = 10, y = 15, z = 5)",
        "longestString(x = 10, y = 15, z = 5)",
        "longestString(x = 10, y = 15, z = 5)",
        "longestString(x = 10, y = 20, z = 30)",
        "longestString(x = 10, y = 20, z = 30)",
        "longestString(x = 10, y = 20, z = 30)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 5, y = 6, z = 7)",
        "longestString(x = 5, y = 6, z = 1)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])"
    ],
    "sample_306": [
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"John Doe63\", \"Jane Doe69\"])",
        "countSeniors(details = [\"mq1234567890SM\", \"px19374567890SM\", \"zy1834567890SM\"])",
        "countSeniors(details = [\"mq2002121212\", \"px2112121212\", \"zy2212121212\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])",
        "countSeniors(details = [\"1990s\", \"2000s\", \"1960s\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [6, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [6, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [6, 7])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 2], moveTo = [6, 7])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 6], moveTo = [8, 9])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5], moveTo = [6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3], moveTo = [2, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3], moveTo = [2, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 3], moveTo = [6, 7, 8])",
        "relocateMarbles(nums = [5, 5, 5, 6, 6, 6, 8, 8, 8, 9, 9, 9], moveFrom = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveTo = [2, 3, 4, 5, 6, 7, 8, 9, 1, 0, -1, -2])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"aaaaa\", s2 = \"bbbbb\", s3 = \"aaa\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 2, 3, 4, 2, 5])",
        "continuousSubarrays(a = [1, 2, 3, 2, 3, 4, 2, 5])",
        "continuousSubarrays(a = [1, 2, 3, 2, 3, 4, 2, 5])",
        "continuousSubarrays(a = [1, 2, 3, 2, 3, 4, 2, 5])",
        "continuousSubarrays(a = [1, 2, 3, 2, 3, 4, 2, 5])",
        "continuousSubarrays(a = [1, 2, 3, 2, 3, 4, 2, 5])",
        "continuousSubarrays(a = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(a = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,",
        "continuousSubarrays(a = [1, 2, 3, 2, 3, 4, 2, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 3, 2, 3, 4, 2, 2, 3, 4, 5])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "continuousSubarrays(nums = [1, 2, 3, 2, 3, 4, 4, 5, 6, 7, 8, 9, 9])"
    ],
    "sample_8": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [3, 5], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [3, 5], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 3], [2, 4], [3, 1]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 3], [2, 4], [3, 1]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 3)",
        "maximumJumps(nums = [2,1,3,4,5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums = [2,1,3,5,6,3,2], target = 1)"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABC\")",
        "minLength(s = \"ACDB\")",
        "minLength(s = \"AC\")"
    ],
    "sample_7": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,3],[2,4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 1], [3, 4], [1, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 1], [3, 4], [1, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [3, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [3, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [3, 5], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [2, 4], [3, 5], [1, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 1]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [2,1,3,5,4])",
        "semiOrderedPermutation(nums = [2,1,4,3,5])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], threshold = 6)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")"
    ],
    "sample_50": [
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"baa\")",
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"abaab\")",
        "smallestString(s = \"baa\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"bbaa\")",
        "smallestString(s = \"bbaa\")",
        "smallestString(s = \"baba\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)"
    ],
    "sample_118": [
        "minimumIndex(nums = [2, 1, 3, 2])",
        "minimumIndex(nums = [2, 1, 3, 2])",
        "minimumIndex(nums = [2, 1, 3, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumIndex(nums = [2, 1, 3, 2, 1])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 34])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [3, 2, 1, 5, 4])",
        "findValueOfPartition(nums = [3, 2, 1, 5, 4])",
        "findValueOfPartition(nums = [3, 2, 1, 5, 4])",
        "findValueOfPartition(nums = [3, 2, 1, 5, 4])",
        "findValueOfPartition(nums = [3, 2, 1, 5, 4])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 5])",
        "findValueOfPartition(nums = [3, 1, 2, 4, 5])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,"
    ],
    "sample_54": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 5])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 18, 25])",
        "findValueOfPartition(nums = [3, 5, 2, 1, 4])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])"
    ],
    "sample_51": [
        "smallestString(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "smallestString(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "smallestString(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "smallestString(s = \"abcdefghijklmnopqrstuvwxyz\")",
        "smallestString(s = \"bcd\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"abc\")",
        "smallestString(s = \"abc\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 1, 2, 3, 1, 2, 3])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 4, 1, 2, 3, 1, 2, 3, 2, 3, 4])"
    ],
    "sample_6": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4]])",
        "colorTheArray(n=5, queries=[[0,1],[1,2],[2,3],[3,4]])",
        "colorTheArray(n = 5, queries = [[0,2],[1,3],[2,4],[1,2]])",
        "colorTheArray(n = 5, queries = [[0,2],[2,3],[2,4]])",
        "colorTheArray(n = 5, queries = [[0,1],[2,1],[3,2],[1,1],[0,0]])",
        "colorTheArray(n = 5, queries = [[0,1],[2,1],[3,2],[1,1],[0,0]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 5)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 5)",
        "makeTheIntegerZero(a = 10, b = 5)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 2)",
        "makeTheIntegerZero(a = 10, b = 5)",
        "makeTheIntegerZero(a = 10, b = 5)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [20,10,10,20,10], target = 1)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7], threshold = 5)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "numberOfGoodSubarraySplits(nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 10)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [3, 8, 1, 4])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [7, 3, 5, 9])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")"
    ],
    "sample_18": [
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [2, 1, 3, 10, 4, 7, 6], target = 2)",
        "maximumJumps(nums = [2, 1, 4, 7, 5, 10], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 0)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 1)",
        "maximumJumps(nums = [2, 1, 4, 7, 5, 10, 9, 3, 1, 1], target = 2)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 15, additionalTank = 0)",
        "distanceTraveled(mainTank = 15, additionalTank = 2)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [12, 34, 67, 89])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 2)",
        "minCost(A = [1, 3, 5], x = 2)",
        "minCost(A = [1, 3, 5], x = 2)",
        "minCost(A = [1, 5, 3, 19, 26, 38, 27], x = 3)",
        "minCost(A = [1, 5, 3, 19, 26, 38, 27], x = 3)",
        "minCost(A = [1, 5, 3, 19, 26, 38, 6], x = 4)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 0)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 0)",
        "maximumJumps(nums = [2, 1, 4, 7, 5, 10], target = 2)",
        "maximumJumps(nums = [2,2,3,4,5], target = 1)",
        "maximumJumps(nums = [2,1,3,4,5], target = 1)",
        "maximumJumps(nums = [2,1,3,5,6,4,3,2,1,2,3,4,5,6,7,7,8,9,10], target = 2)",
        "maximumJumps(nums = [2,1,3,5,6,4,3,2,1,2,1,2,3,4,5,6,7,8,9,10], target = 3)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [1234, 6789, 11, 2233])",
        "countBeautifulPairs(nums = [1234, 6789, 11, 2233])",
        "countBeautifulPairs(nums = [1234, 6789, 11, 2233])",
        "countBeautifulPairs(nums = [12, 34, 67, 89, 45])",
        "countBeautifulPairs(nums = [12, 34, 67, 89, 100])",
        "countBeautifulPairs(nums = [12, 34, 67, 89, 100])",
        "countBeautifulPairs(nums = [12, 34, 67, 89, 100])",
        "countBeautifulPairs(nums = [12, 34, 67, 89, 45])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"1100\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 3, 4, 4, 5])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0, 1, 2, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "doesValidArrayExist(derived = [0, 1, 2, 0, 1, 2])",
        "doesValidArrayExist(derived = [1, 0, 2, 3, 0, 2, 3, 0, 4, 0])"
    ],
    "sample_52": [
        "smallestString(s = \"bcd\")",
        "smallestString(s = \"bcd\")",
        "smallestString(s = \"bcd\")",
        "smallestString(s = \"bcd\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"abcd\")",
        "smallestString(s = \"abcdefg\")",
        "smallestString(s = \"abcdefg\")",
        "smallestString(s = \"dbskcnbd\")",
        "smallestString(s = \"dabbcc\")"
    ],
    "sample_40": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_53": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")"
    ],
    "sample_109": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_55": [
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"banana\")",
        "smallestString(s = \"bcd\")",
        "smallestString(s = \"dbskcnbd\")"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")"
    ],
    "sample_23": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABABABCDABABABCDAB\")",
        "minLength(s = \"ABCDEABCDAB\")",
        "minLength(s = \"ABCDEABCDAB\")",
        "minLength(s = \"ABCDEABCDAB\")",
        "minLength(s = \"ABCDEABCDAB\")",
        "minLength(s = \"ABABABABCDCD\")",
        "minLength(s = \"ABABABABCDCDCD\")",
        "minLength(s = \"ABABABABCDCDCD\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = \"512301\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)"
    ],
    "sample_57": [
        "distanceTraveled(a = 10, b = 0)",
        "distanceTraveled(a = 10, b = 0)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 7, b = 1)",
        "distanceTraveled(a = 7, b = 1)",
        "distanceTraveled(a = 5, b = 1)",
        "distanceTraveled(a = 20, b = 0)",
        "distanceTraveled(a = 20, b = 0)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 7, b = 0)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 3)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 3)",
        "longestAlternatingSubarray(nums = [1,3,5,7,9], t = 6)",
        "longestAlternatingSubarray(nums = [1,3,5,7,9], t = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], t = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], t = 5)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 0)",
        "maximumJumps(nums = [2, 3, 1, 2, 4, 2], target = 1)",
        "maximumJumps(nums = [2, 7, 9, 3, 1, 6, 8, 2, 9, 1], target = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [1, 3, 6, 10, 15, 21], target = 3)",
        "maximumJumps(nums = [2, 1, 4, 7, 5, 10], target = 2)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1"
    ],
    "sample_19": [
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")",
        "minLength(s = \"ACDABAB\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"abcdcba\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [3,1,2,4,5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])",
        "semiOrderedPermutation(nums = [3,2,1,5,4])",
        "semiOrderedPermutation(nums = [2,1,4,3,5])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [2, 1, 3, 1, 4])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40, 50])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [15, 20, 25])",
        "countBeautifulPairs(nums = [15, 20, 25])",
        "countBeautifulPairs(nums = [15, 20, 25])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 5)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [15, 20, 25])",
        "countBeautifulPairs(nums = [15, 20, 25, 30])",
        "countBeautifulPairs(nums = [15, 20, 25, 30])",
        "countBeautifulPairs(nums = [12, 34, 67, 89])",
        "countBeautifulPairs(nums = [10, 11, 2, 12])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")"
    ],
    "sample_37": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 5])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_39": [
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abcd\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])",
        "findValueOfPartition(a = [1, 5, 3, 19, 18, 25])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 20, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6], threshold = 10)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], threshold = 10)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])",
        "countBeautifulPairs(nums = [10, 20, 30, 40])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,3,5,7,9], t = 6)",
        "longestAlternatingSubarray(nums = [1,3,5,7,9,2,4,6,8,10], t = 10)",
        "longestAlternatingSubarray(nums = [1,3,5,7,9], t = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 6)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9], t = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 10)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], t = 6)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"abab\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDE\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])"
    ],
    "sample_9": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [0, 3], [1, 1], [0, 1]])",
        "colorTheArray(n = 5, queries = [[0, 2], [1, 2], [3, 1], [1, 1], [0, 0]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 2, 1], nums2 = [1, 2, 3, 2, 1])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5], nums2 = [2, 4, 6])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 2, 3, 2, 1, 5], k = 2)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [3, 1, 4, 2, 5])",
        "findValueOfPartition(nums = [3, 1, 4, 2, 5])",
        "findValueOfPartition(nums = [3, 1, 4, 2, 5])",
        "findValueOfPartition(nums = [3, 1, 4, 2, 5])",
        "findValueOfPartition(nums = [3, 1, 4, 2, 5])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [3, 1, 4, 2, 5])",
        "findValueOfPartition(nums = [1, 5, 3, 19, 26, 38, 44])",
        "findValueOfPartition(nums = [3, 1, 4, 2, 5])",
        "findValueOfPartition(nums = [3, 1, 4, 2, 5])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 6])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [3, 2, 1, 5, 4])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])"
    ],
    "sample_167": [
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"bam\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"bam\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"bam\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"bam\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"bam\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"bam\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ap\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ap\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 2, 2, 2, 2], m = 2, k = 2)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [7, 9]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [7, 9]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [7, 9]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [7, 9]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [7, 8]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy\", \"problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"easy problem\"], separator = \" \")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 4, 4, 1, 2, 3])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [4,3,2,4], x = 2)",
        "minAbsoluteDifference(nums = [4,3,2,4], x = 2)",
        "minAbsoluteDifference(nums = [1, 5, 9, 15, 20], x = 3)",
        "minAbsoluteDifference(nums = [4,3,2,4,3], x = 2)",
        "minAbsoluteDifference(nums = [4,3,2,4,3], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 3, 5, 1], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 3, 5, 1], x = 2)",
        "minAbsoluteDifference(nums = [1,5,9,15,20], x = 3)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [2, 4, 5, 1, 3, 6], modulo = 7, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 2, 1, 5, 2, 3, 1, 2], modulo = 5, k = 2)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)"
    ],
    "sample_169": [
        "isAcronym(words = [\"NASA\", \"Space\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"Space\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"Space\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"Space\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"Space\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"Space\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"Space\"], s = \"NASA\")",
        "isAcronym(words = [\"NASA\", \"Space\"], s = \"NASA\")",
        "isAcronym(words = [\"nasa\", \"space\", \"international\"], s = \"ISA\")",
        "isAcronym(words = [\"nasa\", \"space\"], s = \"NASA\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumIndex(nums = [2, 1, 3, 1])",
        "minimumIndex(nums = [2, 1, 3, 1, 4])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 6], [3, 6, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 6], [3, 6, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 6], [3, 6, 7]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 6], [3, 6, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [2, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 6], [2, 3, 7], [3, 4, 8]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 6], [2, 3, 7], [3, 4, 8], [4, 5, 9]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 6], [3, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 5, 1], [3, 4, 3]])",
        "maximizeTheProfit(n = 3, offers = [[1, 3, 5], [2, 4, 1], [3, 5, 2]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RR_LL\")"
    ],
    "sample_149": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')"
    ],
    "sample_162": [
        "maxSum(nums = [123, 456, 789])",
        "maxSum(nums = [123, 456, 789])",
        "maxSum(nums = [123, 456, 789])",
        "maxSum(nums = [123, 456, 789])",
        "maxSum(nums = [123, 456, 789, 1000])",
        "maxSum(nums = [123, 456, 789, 1000])",
        "maxSum(nums = [123, 456, 789, 1000])",
        "maxSum(nums = [123, 456, 789, 1000, 2000, 3000])",
        "maxSum(nums = [12, 4, 6, 8, 20])",
        "maxSum(nums = [12, 34, 11, 9, 3])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 5], [2, 3, 6], [3, 1, 7]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 5], [2, 3, 6], [3, 1, 7]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 5], [2, 3, 6], [3, 1, 7]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 5], [2, 3, 6], [3, 1, 7]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 5], [2, 3, 6], [3, 1, 7]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20], [3, 1, 30]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20], [3, 1, 30]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20], [3, 4, 30]])",
        "maximizeTheProfit(N = 3, offers = [[1, 2, 10], [2, 3, 20], [3, 1, 30]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 10], [2, 4, 15]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 10], [2, 4, 15]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 10], [2, 4, 15]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 10], [2, 4, 15]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 10], [2, 4, 15]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 10], [2, 4, 15]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 5], [1, 3, 10], [2, 4, 15]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [0, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [0, 1, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [0, 1, 10]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14, 23, 45], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14, 23, 45], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14, 23, 45], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 8, 9, 10], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 9], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14, 18, 20], target = 10)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,4,5,6,7,8,9])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 5])",
        "countWays(nums = [1, 2, 3, 5, 7])",
        "countWays(nums = [1, 2, 3, 5, 7, 8, 10])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 3])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 3, 5, 8, 13, 21])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 3, 5, 8, 13, 21])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 3, 5, 8, 13, 21])",
        "maxIncreasingGroups(usageLimits = [1, 1, 1, 1])"
    ],
    "sample_173": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 4, 3], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 1)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 3, 5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 3, 5], k = 3)"
    ],
    "sample_170": [
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ap\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ap\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ap\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ap\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ap\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ap\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"aap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"banm\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"banm\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"ban\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = '1101')"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 7], [3, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 7], [3, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 4, 7], [3, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [4, 3, 4], [3, 2, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [4, 3, 4], [3, 2, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [4, 3, 4], [3, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [4, 2, 3], [0, 2, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 3, 4], [3, 5, 6]])",
        "maximizeTheProfit(n = 5, offers = [[2, 5, 3], [3, 4, 4], [1, 3, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 3, 6], [1, 2, 7], [3, 4, 3]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [1, 2, 3, 4, 3, 2, 1])",
        "minimumIndex(nums = [2,2,1,3,2,2,2])",
        "minimumIndex(nums = [2,2,1,3])",
        "minimumIndex(nums = [2,2,1,3])",
        "minimumIndex(nums = [2,2,1,3,2,2,2])",
        "minimumIndex(nums = [2,2,1,3])",
        "minimumIndex(nums = [2,2,1,3])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [7, 8]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [7, 8]])",
        "numberOfPoints(nums = [[1, 3], [2, 4]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\"], separator = \" \")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 10, target = 5)",
        "minimumPossibleSum(n = 10, target = 5)",
        "minimumPossibleSum(n = 10, target = 5)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 5, target = 10)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [2, 4, 5, 3, 6], m = 10, k = 2)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(num = \"0110\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 1], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 1, 3, 2, 1], modulo = 5, k = 2)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1, 2, 3], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 2, 3, 4, 2, 3, 1, 2, 3], K = 2)"
    ],
    "sample_146": [
        "finalString(s = \"inti\")",
        "finalString(s = \"int\")",
        "finalString(s = \"inti\")",
        "finalString(s = \"int\")",
        "finalString(s = \"int\")",
        "finalString(s = \"inti\")",
        "finalString(s = \"bipin\")",
        "finalString(s = \"bipin\")",
        "finalString(s = \"pinter\")",
        "finalString(s = \"pinter\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 10)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4]])",
        "numberOfPoints(nums = [[0, 2], [3, 5], [7, 8]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [3, 4, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [0, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [0, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[2,3,6],[3,4,7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [3, 4, 2], [2, 3, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 1], [3, 4, 2], [2, 3, 4]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"RRRRLLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_LL\")",
        "furthestDistanceFromOrigin(moves
        "furthestDistanceFromOrigin(moves = \"RRRRLLLL_\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLL_\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R_L_R_L_R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLL_\")"
    ],
    "sample_175": [
        "minimumSum(n = 5, k = 15)",
        "minimumSum(n = 5, k = 15)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 15)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 15)",
        "minimumSum(n = 5, k = 15)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[4,8],[10,13]])",
        "numberOfPoints(nums = [[1,3],[4,8],[10,13]])",
        "numberOfPoints(nums = [[1,3],[2,5],[7,9]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,7]])",
        "numberOfPoints(nums = [[1,3],[2,4],[5,7]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1,3],[5,7],[2,8]])",
        "numberOfPoints(nums = [[1,3],[5,7],[2,8]])",
        "numberOfPoints(nums = [[1,3],[4,8],[10,12]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1001\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [2, 2, 1, 3])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_\")",
        "furthestDistanceFromOrigin(moves = \"LR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_LL\")"
    ],
    "sample_161": [
        "maxSum(nums = [12, 34, 11, 9, 3])",
        "maxSum(nums = [12, 34, 11, 9, 3])",
        "maxSum(nums = [12, 34, 11, 9, 3])",
        "maxSum(nums = [12, 34, 11, 9, 3])",
        "maxSum(nums = [12, 11, 23, 34, 45])",
        "maxSum(nums = [18, 35, 12, 7, 24])",
        "maxSum(nums = [1, 2, 3, 4])",
        "maxSum(nums = [12, 17, 25, 37])",
        "maxSum(nums = [12, 10, 15, 30, 20, 50])",
        "maxSum(nums = [12, 16, 17, 20, 22, 23, 25, 26, 27, 28, 29, 30])"
    ],
    "sample_160": [
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one two three\", \"four five six\"], separator = \" \")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 9)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6, 8, 10], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 6], target = 4)"
    ],
    "sample_171": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 10)"
    ],
    "sample_159": [
        "maxSum(nums = [12, 34, 11, 9, 3])",
        "maxSum(nums = [12, 34, 11, 9, 3])",
        "maxSum(nums = [12, 34, 11, 9, 3])",
        "maxSum(nums = [12, 1, 12])",
        "maxSum(nums = [12, 123, 1234, 456])",
        "maxSum(nums = [12, 34, 11, 99, 3])",
        "maxSum(nums = [12, 34, 11, 9, 3])",
        "maxSum(nums = [12, 123, 1234, 456, 789])",
        "maxSum(nums = [12, 15, 17, 20, 25])",
        "maxSum(nums = [12, 15, 17, 18, 20])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 8)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 8)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 8)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [4, 1, 3, 2, 6], m = 10)",
        "canSplitArray(nums = [2, 5, 1, 9, 2], m = 11)",
        "canSplitArray(nums = [4, 2, 3, 6, 7], m = 10)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"apple\", \"banana\", \"cherry\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"banana\", \"apple\", \"cherry\"], separator = \"a\")"
    ],
    "sample_172": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)"
    ],
    "sample_228": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [3, 0, 2, 1])",
        "countWays(nums = [0, 1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3, 5, 7, 8])",
        "countWays(nums = [3, 0, 2, 1, 0, 2])",
        "countWays(nums = [1, 2, 3, 5, 7])",
        "countWays(nums = [1, 2, 3, 5, 7, 8, 10, 12, 14, 15, 17, 18, 20])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"110\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [2, 1, 3, 2])",
        "minimumIndex(nums = [2, 1, 3, 2])",
        "minimumIndex(nums = [2, 1, 3, 2])",
        "minimumIndex(nums = [2, 1, 3, 1, 4])",
        "minimumIndex(nums = [2, 1, 3, 1, 4])",
        "minimumIndex(nums = [2, 1, 3, 1, 4])",
        "minimumIndex(nums = [2, 1, 3, 1, 4])",
        "minimumIndex(nums = [2, 1, 3, 1, 2])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumIndex(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5,6,7,8,9,10], m = 5)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)"
    ],
    "sample_147": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"giraffe\")",
        "finalString(s = \"giraffe\")"
    ],
    "sample_174": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [1,2,3,4,5], m = 7)",
        "canSplitArray(nums = [1,2,3,4,5], m = 7)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2])"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)"
    ],
    "sample_176": [
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 2)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], modulo = 10, k = 2)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11, 15], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_151": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'girls')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'girls')",
        "finalString(s = 'ir')"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 3, 6])",
        "maxIncreasingGroups(usageLimits = [1, 3, 6])"
    ],
    "sample_204": [
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"1100\")",
        "minimumOperations(s = \"001101\")",
        "minimumOperations(s = \"001100\")",
        "minimumOperations(s = \"010101\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 12, 15, 18, 20], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 12, 15, 18], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 12, 14, 15], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 12, 14, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 12, 14, 15], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 5, 14], target = 7)"
    ],
    "sample_148": [
        "finalString(s = \"pointers\")",
        "finalString(s = \"pointers\")",
        "finalString(s = \"pointers\")",
        "finalString(s = \"pointers\")",
        "finalString(s = \"pointers\")",
        "finalString(s = \"pointers\")",
        "finalString(s = \"pointers\")",
        "finalString(s = \"pi\")",
        "finalString(s = \"pi\")",
        "finalString(s = \"bipin\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,5,2,4,3], target = 10)",
        "minOperations(nums = [1,5,2,4,3], target = 10)",
        "minOperations(nums = [1,5,2,4,3], target = 10)",
        "minOperations(nums = [3,1,4,1,5], target = 15)",
        "minOperations(nums = [3,1,4,1,5], target = 15)",
        "minOperations(nums = [1,2,3,4,5], target = 10)",
        "minOperations(nums = [1, 5, 2, 9, 3, 7], target = 6)",
        "minOperations(nums = [2,3,4,5], target = 9)",
        "minOperations(nums = [2,3,4,5], target = 9)",
        "minOperations(nums = [1, 1, 3], target = 6)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '1100')"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"1010\")",
        "maximumOddBinaryNumber(s = \"1100\")"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 3, 4, 5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 5])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 5])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 5])",
        "countWays(nums = [0, 2, 3, 4])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RLRRRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRRRLLLLLL\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 5, target = 9)",
        "minimumPossibleSum(n = 5, target = 7)",
        "minimumPossibleSum(n = 5, target = 10)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 8)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 9)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 8)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 8)",
        "canSplitArray(nums = [2, 3, 5, 7], m = 10)",
        "canSplitArray(nums = [4, 5, 6, 7, 8], m = 15)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)",
        "minOperations(nums = [1, 1, 4, 2, 7], target = 13)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [2, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"bam\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ap\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"bam\")",
        "isAcronym(words = [\"banana\", \"apple\", \"mango\"], s = \"bam\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"ap\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bird\"], s = \"cb\")",
        "isAcronym(words = [\"I\", \"am\", \"a\", \"student\"], s = \"IA\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"a\")",
        "isAcronym(words = [\"banana\", \"apple\"], s = \"aap\")",
        "isAcronym(words = [\"cat\", \"dog\", \"bird\"], s = \"c.d.b\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3, 5, 7, 8, 10])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 5, 7, 8, 10])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 5, 7, 8, 10])",
        "countWays(nums = [1, 2, 3, 5, 7, 8, 10])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 2, 3, 5, 7, 8, 10])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays(nums = [1, 3, 5, 7, 9])"
    ],
    "sample_158": [
        "maxSum(nums = [18, 12, 20, 45, 31])",
        "maxSum(nums = [18, 35, 12, 7])",
        "maxSum(nums = [18, 35, 12, 7, 24, 4])",
        "maxSum(nums = [18, 35, 12, 7, 24, 4])",
        "maxSum(nums = [12, 1, 12])",
        "maxSum(nums = [18, 12, 20, 45, 31])",
        "maxSum(nums = [18, 12, 20, 45, 31])",
        "maxSum(nums = [18, 12, 20, 45, 31])",
        "maxSum(nums = [18, 12, 10, 22])",
        "maxSum(nums = [18, 12, 20, 45, 31])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 3, 3, 5, 6, 7], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 2, 3, 2, 4, 5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1, 1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [2, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [2, 3, 6], [2, 5, 7]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 3, 6], [2, 5, 7], [3, 5, 15]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [2, 3, 7], [1, 2, 10], [3, 4, 15], [2, 4, 20]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6])",
        "maxIncreasingGroups(x = [1, 2, 4, 8, 16])",
        "maxIncreasingGroups(x = [1, 2, 4, 8, 16])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)"
    ],
    "sample_207": [
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"1100000\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LR\")",
        "furthestDistanceFromOrigin(moves = \"LRLL\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"101\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"101000\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"111011\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 4, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 4, 4, 5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 4, 4, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 4, 4, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 4, 4, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5])"
    ],
    "sample_202": [
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"1101\")",
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"1111\")",
        "minimumOperations(num = \"1100\")",
        "minimumOperations(num = \"110\")",
        "minimumOperations(num = \"110\")",
        "minimumOperations(num = \"001011\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"na\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\", \"cherry\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"banana\", \"apple\"], b = \"na\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 11, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1010\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,2,3,4,2,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,4,2,1,1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,4,2,1,1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,3,4,2,1,1,2,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 3, 5], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "longestEqualSubarray(nums = [1,2,2,3,1,4,2,5,1,2,3,2], k = 3)",
        "longestEqualSubarray(nums = [1,2,2,3,1,4,2,5,1,2,3,2,1,2,3,4,5,6,7,8,9,10], k = 3)",
        "longestEqualSubarray(nums = [1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,4,5,6,7,8,7,6,5,4,3,2,1,2,3,4,5], k = 2)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 2, 3, 4, 2, 4, 5], k = 2)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"1101\")",
        "maximumOddBinaryNumber(s = \"001\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"elephant\", \"is\", \"big\"], s = \"ei\")",
        "isAcronym(words = [\"elephant\", \"is\", \"big\"], s = \"ei\")",
        "isAcronym(words = [\"elephant\", \"is\", \"big\"], s = \"eiab\")",
        "isAcronym(words = [\"elephant\", \"is\", \"big\"], s = \"eiab\")",
        "isAcronym(words = [\"elephant\", \"is\", \"big\"], s = \"eiab\")",
        "isAcronym(words = [\"elephant\", \"is\", \"wild\"], s = \"eiwa\")"
    ],
    "sample_163": [
        "maxSum(nums = [12, 34, 11, 9, 3])",
        "maxSum(nums = [12, 1234, 456])",
        "maxSum(nums = [12, 123, 1234])",
        "maxSum(nums = [12, 123, 1234])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum(nums = [12, 123, 1234, 456, 789])",
        "maxSum(nums = [12, 1234, 456])",
        "maxSum(nums = [12, 123, 1234])",
        "maxSum(nums = [12, 15, 17])",
        "maxSum(nums = [12, 18, 22, 17])"
    ]
}