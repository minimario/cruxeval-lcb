{
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [4, 3, 1, 2])",
        "minimumRightShifts(nums = [3, 1, 4, 2])",
        "minimumRightShifts(nums = [2, 4, 6, 8, 10])",
        "minimumRightShifts(nums = [6, 5, 8, 9, 7])",
        "minimumRightShifts(nums = [2, 2, 2, 2])",
        "minimumRightShifts(nums = [3,1,3,2,3])",
        "minimumRightShifts(nums = [2, 1, 1, 1, 2])",
        "minimumRightShifts(nums = [1, 5, 1, 2, 3, 4, 4, 1, 2, 1])"
    ],
    "sample_453": [
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"111000\")",
        "minChanges(s = \"abcbc\")",
        "minChanges(\"ab\")",
        "minChanges(s = \"aabbc\")",
        "minChanges(s = \"121314151617181920\")",
        "minChanges(s = \"bbbabaa\")",
        "minChanges(s = \"caaab\")",
        "minChanges(s = \"1233445\")",
        "minChanges(\"132412\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 1, 9], target = 12)",
        "lengthOfLongestSubsequence(nums = [10, 22, 9, 33, 21, 50, 41, 60, 80], target = 92)",
        "lengthOfLongestSubsequence(nums = [4, 3, 2, 6, 10, 1, 7, 8, 2, 3, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 0, -1, 0, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [3,2,2,4], target = 3)",
        "lengthOfLongestSubsequence(nums = [0,0,1,0,1,1,1,1], target = 2)",
        "lengthOfLongestSubsequence(nums = [0, 1, 2, 3, 3, 3, 4, 7, 7, 8], target = 7)",
        "lengthOfLongestSubsequence(nums = [0, 3, 4, 0], target = 3)",
        "lengthOfLongestSubsequence(nums = [5,4,3,1,4,5,4,3,1,4,5,4,3,1,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [9,9,6,1,3,8,9,5,1], target = 13)"
    ],
    "sample_367": [
        "sortVowels(s = \"lympH\")",
        "sortVowels(s = 'lymph')",
        "sortVowels(s = 'lympH')",
        "sortVowels(\"lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'qYmpH')",
        "sortVowels(s = \"LypH\")",
        "sortVowels(s = \"pYlmQH\")",
        "sortVowels(s = 'pyjwgP')",
        "sortVowels(s = \"mlXYhxgX\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [3, 4, 8, 2], target = 6)",
        "lengthOfLongestSubsequence(nums = [3,5,6,2,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "lengthOfLongestSubsequence(nums = [8, 1, 4], target = 11)",
        "lengthOfLongestSubsequence(nums = [1,2,3,2,1], target = 1)",
        "lengthOfLongestSubsequence(nums = [0, 1, 0, 3, 2, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [5, 2, 4, 3, 1, 6], target = 16)",
        "lengthOfLongestSubsequence(nums = [5, 4, 7, 10, 1, 3, 5, 9], target = 17)",
        "lengthOfLongestSubsequence(nums = [9,3,5,6,4,2], target = 6)",
        "lengthOfLongestSubsequence(nums = [5, 10, 3], target = 14)"
    ],
    "sample_381": [
        "countPairs(nums = [3,5,4,8], t = 7)",
        "countPairs(nums = [1,1,1,1], t = 3)",
        "countPairs(nums = [1, 1, 1, 1], t = 3)",
        "countPairs(nums = [1,5,3,4,7], t = 12)",
        "countPairs(nums = [1,4,5,6], t = 7)",
        "countPairs(nums = [1,5,3,7], t = 12)",
        "countPairs(nums = [1, 1, 3, 3, 3, 4], t = 6)",
        "countPairs(nums=[1,1,2,2,3,3,4,4,5,5],t=3)",
        "countPairs(nums = [3,1,1,2,0,5], t = 6)",
        "countPairs(nums=[1,1,1,2,2,4,7], t=3)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 3, 2, 4])",
        "isGood(nums = [4, 3, 2, 1])",
        "isGood(nums = [2, 3, 4, 0, 1])",
        "isGood(nums = [2, 3, 4, 5, 6, 7])",
        "isGood(nums = [0, 2, 3, 4, 5, 6, 7, 8])",
        "isGood(nums = [0, 3, 3, 4, 5])"
    ],
    "sample_369": [
        "sortVowels(s = 'lYmpH')",
        "sortVowels(s = 'lympH')",
        "sortVowels(\"lYmpH\")",
        "sortVowels(s = \"Python\")",
        "sortVowels(\"lymph\")",
        "sortVowels(s = 'hello')",
        "sortVowels(s = 'Hamel')",
        "sortVowels(s = \"yUmpH\")",
        "sortVowels(s = \"cyda\")",
        "sortVowels(s = \"MiXy\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3,4,2])",
        "minimumRightShifts(nums = [5, 3, 1, 2, 4])",
        "minimumRightShifts(nums = [4, 2, 3])",
        "minimumRightShifts(nums = [1, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 5, 3, 4, 1])",
        "minimumRightShifts(nums = [3, 4, 2, 1])",
        "minimumRightShifts(nums = [2, 4, 3, 1, 2, 3, 4, 4, 5, 7])",
        "minimumRightShifts(nums = [3, 2, 2, 3, 2, 3, 3, 3, 3])"
    ],
    "sample_448": [
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abb\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(\"aba\")",
        "minChanges(s = \"aababbcc\")",
        "minChanges(\"1234567890\")",
        "minChanges(s = \"dbbbab\")",
        "minChanges(\"13244\")",
        "minChanges(s = \"fessuses\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"1234\", s2 = \"2143\")",
        "canBeEqual(s1 = \"0011\", s2 = \"1100\")",
        "canBeEqual(s1 = \"135\", s2 = \"531\")",
        "canBeEqual(s1 = \"ab1\", s2 = \"1ba\")",
        "canBeEqual(s1 = \"1345\", s2 = \"4315\")",
        "canBeEqual(s1 = \"135\", s2 = \"246\")",
        "canBeEqual(s1 = \"aa1\", s2 = \"11a\")",
        "canBeEqual(s1 = \"zc\", s2 = \"cz\")",
        "canBeEqual(s1 = \"0246\", s2 = \"0246\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [7,7,6,7,6,7])",
        "minLengthAfterRemovals(nums = [1,2,2,1,1,2,2,2])",
        "minLengthAfterRemovals(nums = [1,1,1,2,1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [3,1,3,3,3,1])",
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [3,2,2,1,3,3,3,4,2])",
        "minLengthAfterRemovals(nums = [3,2,2,1,3,2,2,3,3])",
        "minLengthAfterRemovals(nums = [4,4,4,2,5,2,2,5,3,5,1,4])"
    ],
    "sample_361": [
        "isGood(a = [1, 1, 2, 3, 3])",
        "isGood(a = [1, 2, 2, 3, 3, 3])",
        "isGood(a = [1, 1, 2, 2, 3, 4])",
        "isGood(a = [1, 2, 3, 2, 3, 2])",
        "isGood(a = [1,2,3,1,2,3])",
        "isGood(a = [0, 1, 0])",
        "isGood(a = [1, 3, 3, 4, 5])",
        "isGood(a = [0, 1, 1, 2, 3, 3, 3, 4, 5])",
        "isGood(a = [1, 2, 2, 2, 2, 2, 4, 5, 1])",
        "isGood([4,1,1,3,2,1])"
    ],
    "sample_419": [
        "minOperations(nums = [3,4,7], k = 10)",
        "minOperations(nums = [4,3,10,9,8], k = 7)",
        "minOperations(nums = [3,4,7], k = 7)",
        "minOperations(nums = [3,4,5,1,2,3], k = 10)",
        "minOperations(nums = [6,2,3,4,5], k = 9)",
        "minOperations(nums = [1,3,6], k = 2)",
        "minOperations(nums = [2,3,5,4,6,8], k = 3)",
        "minOperations(nums = [4, 5, 11, 7], k = 5)",
        "minOperations(nums = [9,5,4,2,1,3], k = 4)",
        "minOperations(nums = [6, 9, 6, 9, 1, 1], k = 4)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength(nums = [1,2,3,4,5])",
        "findMaximumLength(nums = [-2,-3,4,-1,-2,1,5,-3])",
        "findMaximumLength(nums=[1, 2, 3, 4])",
        "findMaximumLength([1,2,3,1])",
        "findMaximumLength(nums = [0, 1, 0])",
        "findMaximumLength(nums = [0,1,0,3,1,0,1,9,2,1,1,0,1,0,1])",
        "findMaximumLength(nums = [1,3,2,2,3,3,4,4,5])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [3,1,4,1,5])",
        "maxSubarrays(nums = [1, 2, 3, 2, 1])",
        "maxSubarrays(nums = [1, 2, 3, 1])",
        "maxSubarrays([1,1,1])",
        "maxSubarrays(nums = [1, 3, 5, 2, -1, 6])",
        "maxSubarrays(nums = [5, 2, 3, 5, 5])",
        "maxSubarrays(nums = [1,1,0,-1,1,-1,1,1,-1,-1])",
        "maxSubarrays(nums = [3, 4, 5, -1, 6, 2, -1, 7, -2, 8])",
        "maxSubarrays([1, 2, 3, -1, 4, -2, 2, -3, 1, 5])",
        "maxSubarrays(nums = [1, 1, 3, 0, 4, 1, 0, 5])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"a\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abx\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"aed\")",
        "canMakeSubsequence(str1 = \"mno\", str2 = \"mno\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"xyaabbb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"dadbc\")",
        "canMakeSubsequence(str1 = \"sfr\", str2 = \"frs\")",
        "canMakeSubsequence(str1 = \"vw\", str2 = \"zzz\")"
    ],
    "sample_402": [
        "maxSum(nums = [1, 1, 1, 2, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 1, k = 2)",
        "maxSum(nums = [4, 2, 4, 5, 6], m = 2, k = 1)",
        "maxSum(nums = [2, 4, 6, 8, 10], m = 2, k = 3)",
        "maxSum(nums = [2,4,5,2], m = 2, k = 1)",
        "maxSum(nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2], m = 3, k = 5)",
        "maxSum(nums = [4, 3, 2, 2, 3, 4, 1, 2, 3, 4], m = 3, k = 2)",
        "maxSum(nums = [0, 0, 1, 0, 0, 1, 0, 1, 1, 1], m = 2, k = 4)",
        "maxSum(nums = [1, 12, -1, 12, 3, 1, 1, 5, -12, 10], m = 2, k = 2)",
        "maxSum(nums = [1,1,2,2,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5], m = 2, k = 3)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], x = \"at\")",
        "findWordsContaining(words = [\"car\", \"bar\", \"food\", \"red\"], x = \"ba\")",
        "findWordsContaining(words = [\"ab\", \"a\", \"abc\", \"bc\"], x = \"a\")",
        "findWordsContaining(words = [\"A\", \"A\"], x = \"A\")",
        "findWordsContaining(words = [\"hello\", \"heaven\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"f\", \"b\", \"abc\", \"ba\", \"bac\"], x = \"b\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\", \"dog\", \"pine\", \"banana\", \"dog\", \"dog\"], x = \"an\")",
        "findWordsContaining(words = [\"peter\", \"piper\", \"mice\", \"microwave\"], x = \"m\")",
        "findWordsContaining(words = [\"aaa\", \"aab\", \"bc\", \"c\", \"ca\", \"cab\", \"abc\", \"a\"], x = \"bc\")",
        "findWordsContaining(words = [\"bannana\", \"nannana\", \"ananas\", \"pannana\", \"nannana\"], x = \"annan\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', '4', 'prev', '3', 'prev', 'prev', '2', 'prev', 'prev', '1'])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"3\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"0\", \"prev\", \"3\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"4\",\"1\",\"5\",\"1\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"prev\",\"prev\",\"2\",\"1\",\"prev\",\"1\",\"prev\",\"prev\",\"2\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"3\",\"2\",\"prev\",\"prev\",\"1\",\"prev\",\"4\",\"prev\",\"2\"])"
    ],
    "sample_422": [
        "minOperations(nums = [4, 3, 1, 1, 3], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3], k = 2)",
        "minOperations(nums = [1, 1, 4, 2, 3], k = 3)",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1], k = 1)",
        "minOperations(nums = [3, 4, 9, 6, 5], k = 5)",
        "minOperations(nums = [2, 1, 2, 2, 1, 2], k = 2)",
        "minOperations(nums = [1,2,1,2,3,3,4,4,5,5], k = 2)",
        "minOperations(nums = [1, 5, 7, 1, 2, 3, 8], k = 5)",
        "minOperations(nums = [1,5,6,1,3,1,1,1,1,1], k = 1)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [4, 2, 1, 3], k = 2)",
        "minOperations(nums = [2, 2, 2, 1, 2, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [3, 4, 8, 2], k = 3)",
        "minOperations(nums = [2, 2, 3, 1], k = 1)",
        "minOperations(nums = [1, 1, 1, 2, 1, 1, 1], k = 4)",
        "minOperations(nums = [3,3,3,3,5,5,5,2,2,7], k = 1)",
        "minOperations(nums = [4, 7, 7, 8], k = 17)",
        "minOperations(nums = [1, 5, 2, 3, 10], k = 2)",
        "minOperations(nums = [1, 1, 3, 5, 5, 6, 6], k = 2)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [1, 3, 1])",
        "minimumSeconds(nums = [9, 3, 9, 3, 9])",
        "minimumSeconds(nums = [9,3,9,3,9,7,9])",
        "minimumSeconds(nums = [3, 3, 3, 3, 5, 4])",
        "minimumSeconds(nums = [2,1,5,6,2,3])",
        "minimumSeconds(nums = [2, 3, 2, 4, 2])",
        "minimumSeconds(nums = [3, 8, 8, 6, 8, 2, 8, 2, 4, 6, 4, 1, 7, 4, 7, 2, 8, 1])",
        "minimumSeconds(nums = [9,4,1,7,8,9,6,4,4,8,9,5,2,7,8,9,5,4,2,7,9,5,1,7,8,9,5,4,1,7,8,9,5,2,7,8,9,5,4,3,7,8,9,5,1,7,8,9,5,4,3,8,9,5,2,7,8,9,5,4,2,7,9,5,1,7,8,9,5,4,3,8,9,5,2,7,8,9,5,4,2,7,9,5,1,7,8,9,5,4,3,8,9,5,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,5,4,1,7,8,9,5,3,2,7,8,9,"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [0, 1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 3, 5, 7], target = 10)",
        "countPairs(nums = [1, 3, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4], target = 2)",
        "countPairs(nums = [1,3,3,5], target = 8)",
        "countPairs(nums = [1,2,1,2,1,2,1], target = 5)",
        "countPairs(nums = [-1, 2, 1, -4], target = 3)",
        "countPairs(nums = [1, 3, 4, 3, 2], target = 8)",
        "countPairs(nums = [-1, 1, 2, -3, 0], target = 2)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"apricot\", \"banana\"], x = \"ap\")",
        "findWordsContaining(words = [\"app\", \"fun\", \"apple\", \"yam\"], x = \"ap\")",
        "findWordsContaining(words = [\"abcd\", \"bc\", \"cd\"], x = \"c\")",
        "findWordsContaining(words = [\"A\", \"B\", \"C\", \"D\"], x = \"A\")",
        "findWordsContaining(words = [\"google\", \"leetcode\", \"youtube\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"hiya\", \"waht\"], x = \"hi\")",
        "findWordsContaining(words = [\"hello\", \"there\", \"baby\", \"hello\"], x = \"o\")",
        "findWordsContaining(words = [\"Apple\", \"Banana\", \"Cucumber\", \"Apple Apple\", \"Banana Banana\"], x = \"App\")",
        "findWordsContaining(words = [\"apple\", \"code\", \"daze\", \"python\"], x = \"az\")",
        "findWordsContaining(words = [\"abcd\", \"zzzz\", \"wewe\", \"qwerty\"], x = \"z\")"
    ],
    "sample_372": [
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"Alien\")",
        "sortVowels(s = \"YzyzZ\")",
        "sortVowels(s = \"Language\")",
        "sortVowels(s = 'almostsicest')",
        "sortVowels(s = \"Techable\")",
        "sortVowels(s = \"baaedce\")",
        "sortVowels(s = \"Lightweight JavaSript with NodeJS\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [4,3,4,6,4,4,2])",
        "minLengthAfterRemovals(nums = [3, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [7, 7, 7, 7, 7, 7, 7])",
        "minLengthAfterRemovals([3, 3, 3, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,3,4,4,5])",
        "minLengthAfterRemovals(nums = [1, 2, 1, 2, 3, 5, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,4,4,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6])",
        "minLengthAfterRemovals(nums = [2,3,5,4,5,4,3,2,2,2,1,5,4])"
    ],
    "sample_452": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"baba\")",
        "minChanges(s = \"1212\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aabbbc\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"2202\")",
        "minChanges(\"123445678\")",
        "minChanges(s = \"12131114412\")"
    ],
    "sample_385": [
        "countPairs(nums = [3,5,4,8], target = 7)",
        "countPairs(nums = [3,5,4,8], target = 7)",
        "countPairs(nums = [2,7,11,15], target = 9)",
        "countPairs(nums = [2,7,11,15], target = 9)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [2,5,2,12], target = 4)",
        "countPairs(nums = [1,2,5,6,7,8], target = 10)",
        "countPairs(nums = [1,1,1,1,1], target = 2)",
        "countPairs(nums = [3, 7, 4, 6, 5], target = 10)",
        "countPairs(nums = [2,1,5,7,5,4,3], target = 6)"
    ],
    "sample_427": [
        "minOperations(nums = [3, 3, 3, 2, 2, 2, 4, 4, 4])",
        "minOperations(nums = [4, 2, 2, 6, 2])",
        "minOperations(nums = [6, 9, 6, 8])",
        "minOperations(nums = [3, 1, 5, 8, 9, 2, 6, 7, 4, 10])",
        "minOperations(nums = [6, 3, 7, 5, 2, 2, 3, 5])",
        "minOperations(nums = [1, 2, 1, 3, 1, 2, 3, 3, 3, 3])",
        "minOperations(nums = [4, 1, 3, 4, 1, 1, 3, 2, 4, 3])",
        "minOperations(nums = [4, 1, 2, 2, 4, 5, 1, 3, 2, 1, 2, 2])",
        "minOperations(nums = [1111111, 1111111, 1111111, 3, 3, 3, 3, 3, 3, 3, 3])",
        "minOperations(nums = [2, 5, 4, 5, 12, 1, 14, 16, 18, 17])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [4,4,4,4,4])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3,1,2,3])",
        "minLengthAfterRemovals(nums = [5, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [4, 3, 1, 1, 3, 3, 2])",
        "minLengthAfterRemovals(nums = [5,1,5,2,2,2,5])",
        "minLengthAfterRemovals(nums = [5,1,5,2,2,2,3,4,2])",
        "minLengthAfterRemovals(nums = [0,1,1,2,4,5,5,5,5,7,7,7,8,8,8,8,8,8,8,8,8,8])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [3, 7, 4, 5, 1])",
        "minimumCoins(prices = [7, 2, 4, 1])",
        "minimumCoins(prices = [1,3,5,7,9])",
        "minimumCoins(prices = [4, 5, 2, 1, 3])",
        "minimumCoins(prices = [1, 3, 4, 5, 7, 10, 11, 12])",
        "minimumCoins(prices = [2, 5, 6, 4, 8, 10])",
        "minimumCoins(prices = [2, 3, 10, 3])",
        "minimumCoins(prices = [1, 3, 2, 10, 12, 4, 11])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"cat\", \"bat\", \"rat\"], x = \"at\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"Hello\", \"World\", \"Hey\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"hello\"], x = \"he\")",
        "findWordsContaining(words = [\"a\", \"ab\", \"abc\", \"abcde\"], x = \"bc\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"harry\", \"helloworld\"], x = \"ell\")",
        "findWordsContaining(words = [\"cat\", \"bar\", \"foo\", \"box\"], x = \"oo\")",
        "findWordsContaining(words = [\"python\", \"java\", \"c\", \"haskell\", \"python\"], x = \"thon\")",
        "findWordsContaining(words = [\"tan\", \"n\", \"nat\"], x = \"at\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"fish\", \"bear\", \"banana\", \"ananas\"], x = \"a\")"
    ],
    "sample_420": [
        "minOperations(nums = [1, 1, 4, 2, 3], k = 7)",
        "minOperations(nums = [6, 3, 8, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 11)",
        "minOperations(nums = [5, 3, 2, 1, 4], k = 7)",
        "minOperations(nums = [3, 6, 9, 12], k = 10)",
        "minOperations(nums = [2, 3, 1, 1, 8], k = 2)",
        "minOperations(nums = [1, 4, 3, 7, 8, 1], k = 3)",
        "minOperations(nums = [3,2,2,1,4,1,1], k = 1)",
        "minOperations(nums = [9,5,8,6,1], k = 5)",
        "minOperations(nums = [2, 3, 4, 5, 10, 8, 15, 20, 1, 25, 17], k = 100)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1])",
        "isGood(nums = [1, 3, 2, 4])",
        "isGood(nums = [])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [2, 3, 4, 5, 1])",
        "isGood(nums = [5, 4, 3, 2, 1])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "isGood(nums = [1, 2, 3, 4, 5, 1])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 0)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 3, 7, 5], target = 12)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "lengthOfLongestSubsequence(nums = [1,2,3,3], target = 6)",
        "lengthOfLongestSubsequence(nums = [0, 1, 1, 0, 0, 0], target = 1)",
        "lengthOfLongestSubsequence(nums = [3, 1, 2, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [3, 8, 4, 9, 5, 1], target = 7)",
        "lengthOfLongestSubsequence(nums = [6,1,3,6,5,5,4,3], target = 10)",
        "lengthOfLongestSubsequence(nums = [5, 2, 6, 3, 9, 12], target = 3)"
    ],
    "sample_365": [
        "isGood(nums = [1])",
        "isGood(nums = [1])",
        "isGood(nums = [1])",
        "isGood(nums = [1])",
        "isGood(nums = [1,1,1])",
        "isGood(nums = [1, 2, 2, 3, 4])",
        "isGood(nums = [1, 3, 2, 4, 5])",
        "isGood(nums = [1, 1, 3, 1, 1, 1])",
        "isGood(nums = [2, 3, 2, 1, 3, 3])",
        "isGood(nums = [1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [3, 1, 4, 1, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [0, 1, 1, 1])",
        "maxSubarrays([0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [1, 2, -1, 2, 1])",
        "maxSubarrays(nums = [0, -1, -2, 0, -1, -2])",
        "maxSubarrays(nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1])",
        "maxSubarrays(nums = [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [4, 3, 2, 6, 1, 4, 2], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 6)",
        "lengthOfLongestSubsequence(nums = [0,1,2,2,3,0,4,2], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,0,5,3,4], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 5, 3, 7, 2], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,1,5,2,2,2,2,3,7], target = 4)",
        "lengthOfLongestSubsequence(nums=[2,1,1,2,1,3,2],target=3)"
    ],
    "sample_450": [
        "minChanges(s = \"aabbcdd\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"aabacbebebe\")",
        "minChanges(s = \"abcdcdc\")",
        "minChanges(s = \"bbbbb\")",
        "minChanges(s = \"geeksforgeeks\")",
        "minChanges(s = \"abaaabbba\")",
        "minChanges(s = \"AABBBAABB\")",
        "minChanges(s = \"112311\")",
        "minChanges(s = \"tshjshf\")"
    ],
    "sample_463": [
        "distributeCandies(n = 13, limit = 2)",
        "distributeCandies(n = 13, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 13, limit = 4)",
        "distributeCandies(n=7, limit=3)",
        "distributeCandies(n=10, limit=2)",
        "distributeCandies(n = 4, limit = 1)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [0, 1, 0, 1, 1])",
        "sumCounts(nums = [1, 3, 2, 6, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 2])",
        "sumCounts(nums = [1, 2, 1, 2, 1])",
        "sumCounts(nums = [1, 2, 3, 3, 2])",
        "sumCounts(nums = [1, 2, 2, 2, 2, 3, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 3, 5, 1, 4])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3, 3, 4, 5, 5, 5])"
    ],
    "sample_449": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"aab\")",
        "minChanges(\"aabb\")",
        "minChanges(s = \"abcde\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"bcbc\")",
        "minChanges(\"banana\")",
        "minChanges(s = \"xyyxy\")",
        "minChanges(s = \"aabbbccc\")"
    ],
    "sample_425": [
        "minOperations(nums = [1,1,1,2,2,2])",
        "minOperations(nums = [1, 3, 1, 5])",
        "minOperations(nums = [3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3])",
        "minOperations(nums = [1,2,1,2,3])",
        "minOperations(nums = [6, 3, 8, 8, 6, 6, 6, 6])",
        "minOperations(nums = [6, 3, 2, 7])",
        "minOperations(nums = [4, 1, 3, 5, 6, 3])",
        "minOperations([1, 3, 1, 4, 1, 1, 1, 1, 1])",
        "minOperations(nums = [3, 2, 2, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])",
        "minOperations([0, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 7, 8])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"bcz\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"yxz\")",
        "canMakeSubsequence(str1 = \"bcda\", str2 = \"aacdb\")",
        "canMakeSubsequence(str1 = \"aabaab\", str2 = \"aabaab\")",
        "canMakeSubsequence(str1 = \"bxz\", str2 = \"abxzy\")",
        "canMakeSubsequence(str1 = \"aabbb\", str2 = \"abcs\")",
        "canMakeSubsequence(str1 = \"cbzb\", str2 = \"abcz\")",
        "canMakeSubsequence(str1 = \"cabazz\", str2 = \"aabaz\")",
        "canMakeSubsequence(str1 = \"adbc\", str2 = \"zbcad\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [3, 4, 2])",
        "minimumSeconds(nums = [3,4,2,1,3])",
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 1, 1, 1])",
        "minimumSeconds(nums=[3, 4, 2])",
        "minimumSeconds(nums = [1, 1, 2, 4, 5, 1])",
        "minimumSeconds(nums = [1, 3, 2, 2, 4])",
        "minimumSeconds(nums = [3,4,4,5,1,1,3,3,3,6,9,10,10])",
        "minimumSeconds(nums = [3, 2, 2, 4, 3, 1, 1, 1, 1, 1])",
        "minimumSeconds([6,5,6,2,4,6,7,8,2,1,5,8])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [2,3,3,4,6,7], target = 7)",
        "lengthOfLongestSubsequence(nums = [0,1,1,1,1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3,1,1], target = 3)",
        "lengthOfLongestSubsequence(nums = [6,6,6,6,6,6,6,6,6], target = 7)",
        "lengthOfLongestSubsequence(nums=[3,2,4,1,4,4,4], target=5)",
        "lengthOfLongestSubsequence(nums = [10, 22, 20, 1, 7, 25, 12, 29], target = 28)"
    ],
    "sample_370": [
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = \"leetcode\")",
        "sortVowels(s = 'leotcede')",
        "sortVowels(s = 'leotcede')",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = 'leetcode')",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(\"hello\")",
        "sortVowels(s = \"World\")",
        "sortVowels(s = \"wrd\")"
    ],
    "sample_421": [
        "minOperations(nums = [4, 3, 1, 1, 3], k = 2)",
        "minOperations(nums = [4, 3, 1, 1, 3], k = 2)",
        "minOperations(nums = [1, 1, 1, 1, 1], k = 2)",
        "minOperations(nums = [4, 3, 1, 1, 9], k = 7)",
        "minOperations(nums = [1,2,3,4,5], k = 7)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6], k = 5)",
        "minOperations(nums = [3, 2, 1, 2, 3], k = 2)",
        "minOperations(nums = [4, 4, 4, 3, 4], k = 2)",
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [2, 3, 4, 5, 7, 1, 2, 1], k = 4)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [3, 1, 4, 1, 5])",
        "maxSubarrays(nums = [3, 1, 4, 1, 5])",
        "maxSubarrays(nums = [3,1,4,1,5])",
        "maxSubarrays(nums = [1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 2, 1])",
        "maxSubarrays(nums = [1, 3, 3, 1, 5])",
        "maxSubarrays(nums = [1, 4, 2, 8, 9])",
        "maxSubarrays(nums = [1, 3, 5, 7, 9, 10, 11])",
        "maxSubarrays(nums = [3, 3, 1, 7])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 1], [1, 1], [1, 1]], k = 1)",
        "countPairs(coordinates = [[0,0],[1,0],[2,1],[2,2],[3,3]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 1]], k = 2)",
        "countPairs(coordinates = [[1, 1], [3, 3]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [4, 5], [6, 8], [7, 7]], k = 3)",
        "countPairs(coordinates = [[1,1],[3,0],[5,1],[4,4],[2,2],[1,0]], k = 2)",
        "countPairs(coordinates = [[1, 0], [1, 1], [2, 2], [2, 3]], k = 1)",
        "countPairs(coordinates = [[2, 2], [2, 1], [2, 3], [3, 2], [3, 1], [3, 3], [1, 2], [1, 1], [1, 3]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 5], [3, 6], [5, 6], [1, 5], [2, 6], [1, 6]], k = 3)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [4, 3, 2, 6, 10, 1, 7, 8, 2, 1, 25], target = 18)",
        "lengthOfLongestSubsequence(nums = [10, 5, 2, 7, 1], target = 9)",
        "lengthOfLongestSubsequence(nums = [4, 3, 2, 6, 1, 1, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [0, 1, 2, 3, 3, 2, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [2,5,6,3,7,4], target = 10)",
        "lengthOfLongestSubsequence(nums = [9, 3, 5, 6, 1, 2, 8, 9, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [8, 1, 5, 7, 6, 3, 2, 4, 10], target = 11)"
    ],
    "sample_445": [
        "sumCounts(nums = [1, 1, 1, 1])",
        "sumCounts(nums = [1,2,2,3,4])",
        "sumCounts(nums = [0, 1, 0, 1, 1])",
        "sumCounts(nums=[1,1,1])",
        "sumCounts(nums = [1,2,1,1,1])",
        "sumCounts(nums = [3, 3, 3, 1, 2, 1, 1, 2, 3, 3, 4])",
        "sumCounts([1,1,1,1,2])",
        "sumCounts(nums = [1,2,3,4,1,1,1])",
        "sumCounts(nums=[2, 1, 2, 1])",
        "sumCounts(nums = [1,1,1,1,2,2,2,2,3,3,4,4,5,5,6,6,7,7])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"abcdefgh\")",
        "minimumBeautifulSubstrings(s = \"aab\")",
        "minimumBeautifulSubstrings(\"abc\")",
        "minimumBeautifulSubstrings(s = \"e\")",
        "minimumBeautifulSubstrings(s = \"cbbd\")",
        "minimumBeautifulSubstrings(s = \"u\")",
        "minimumBeautifulSubstrings(s = \"zzzzzzz\")",
        "minimumBeautifulSubstrings(s = \"abcabcabcabc\")",
        "minimumBeautifulSubstrings(s = \"bbbba\")",
        "minimumBeautifulSubstrings(s = \"bbaababaabab\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 1, 4])",
        "maxSubarrays(nums = [3, 4, 5, 2, 6, -1, 1, 5])",
        "maxSubarrays(nums = [3,1,5,4,6])",
        "maxSubarrays(nums = [3, 1, 5, 7, 8])",
        "maxSubarrays(nums = [10, 11, 12, 13, 14, 15])",
        "maxSubarrays(nums = [5, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [9, 2, 5, 2, 6, 6, 5])",
        "maxSubarrays(nums = [1,3,5,7,9,2,4,6,8,10])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [3, 1, 5, 0, 2, 1, 4, 6, 8])"
    ],
    "sample_401": [
        "maxSum(nums = [2], m = 1, k = 1)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,2,2,3], m = 2, k = 3)",
        "maxSum(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10], m = 2, k = 3)",
        "maxSum(nums = [1,3,-1,-3,5,3,6,7], m = 3, k = 4)",
        "maxSum(nums = [2, 7, 9, 5, 2, 1, 2, 3, 4], m = 3, k = 2)",
        "maxSum(nums = [5, 6, 7, 8], m = 2, k = 2)",
        "maxSum(nums = [4, 3, 4, 4, 5, 3, 1, 3, 5], m = 2, k = 3)",
        "maxSum(nums = [9, 1, 1, 8, 9, 9, 9, 7, 1, 8, 3, 9, 1, 1, 8, 9, 9, 9, 1, 9, 1, 1, 8, 7, 8, 9, 8, 9, 9, 1, 1, 9, 8, 9, 1, 9, 1, 8, 9, 9], m = 4, k = 5)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5], m = 2, k = 2)",
        "maxSum(A = [1, 1, 1, 1, 1], m = 2, k = 1)",
        "maxSum(A = [2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(A = [1,1,1,1], m = 2, k = 3)",
        "maxSum(A = [4, 10, 10, 2], m = 2, k = 2)",
        "maxSum(A = [1, 10, 2, 4, 7], m = 3, k = 2)",
        "maxSum(A = [2, 4, 1, 8, 3, 0], m = 3, k = 2)",
        "maxSum(A = [4, 1, 3, 3, 4], m = 2, k = 1)",
        "maxSum(A = [5, 12, -1, -6, 10], m = 2, k = 3)",
        "maxSum(A = [1, 4, 1, 5, 7, 9, 9, 3, 2, 1, 5, 7, 9, 4], m = 3, k = 4)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1, 2, 2, 3, 3, 3])",
        "isGood(nums = [1,2,3,4,3])",
        "isGood(nums = [1, 2, 3, 1, 2])",
        "isGood(nums = [2,2,3,4])",
        "isGood(nums = [5, 5, 3])",
        "isGood(nums = [1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6])",
        "isGood(nums = [5, 2, 2, 1, 1, 3])",
        "isGood(nums = [1, 3, 3, 3, 5, 5, 5, 2, 2, 2, 2])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [3, 2, 1, 2, 7])",
        "minimumSeconds(nums = [0])",
        "minimumSeconds(nums = [1, 2, 4, 8, 16])",
        "minimumSeconds(nums = [1,1,2,4,5,1])",
        "minimumSeconds([4, 3, 1, 2])",
        "minimumSeconds(nums = [3, 4, 1, 1, 3])",
        "minimumSeconds(nums = [1, 4, 2, 5, 1, 6, 2])",
        "minimumSeconds(nums = [9,10,11,12,13,14,15])",
        "minimumSeconds(nums = [0, 4, 7, 8, 1])",
        "minimumSeconds([7, 9, 5, 8, 8, 9, 7, 5, 6])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [4, 2, 1, 3])",
        "minimumSeconds(nums = [1, 2, 4])",
        "minimumSeconds(nums = [900, 900, 900])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minimumSeconds([1, 1, 1])",
        "minimumSeconds(nums = [3,1,4,1,5])",
        "minimumSeconds(nums = [10, 15, 3, 7])",
        "minimumSeconds(nums = [3,2,1,2,4,3])",
        "minimumSeconds(nums = [1,1,1,2,2,2,5,8])",
        "minimumSeconds(nums = [4, 3, 1, 2, 8, 2, 3, 1])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [4,4,4,4])",
        "minLengthAfterRemovals(nums = [3, 1, 4, 1, 5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minLengthAfterRemovals(nums = [3,2,2,1])",
        "minLengthAfterRemovals(nums = [3, 2, 2, 4, 5])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1000000])",
        "minLengthAfterRemovals(nums = [3, 5, 2, 1])",
        "minLengthAfterRemovals(nums = [1,2,3,2,3,2,3,4,2])",
        "minLengthAfterRemovals(nums = [1,1,1,3,1,3,2,1])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2], m = 1, k = 0)",
        "maxSum(nums = [8, 1, 5, 2, 6], m = 2, k = 1)",
        "maxSum(nums = [3, 2, 1, 5, 6, 4], m = 2, k = 2)",
        "maxSum(nums = [1,1,1,2,2,3], m = 2, k = 3)",
        "maxSum(nums = [1,0,1,1,0], m = 2, k = 2)",
        "maxSum(nums = [2,1,5,6,5,3,4,1], m = 3, k = 2)",
        "maxSum(nums = [9,8,7,5,10,8], m = 3, k = 3)",
        "maxSum(nums = [1, 15, 5, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1,5,2,7,4,3,8,9,0], m = 4, k = 3)",
        "maxSum(nums = [5,4,2,9,4,7,6], m = 4, k = 2)"
    ],
    "sample_397": [
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 4, 1, 5, 7], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,1], m = 1, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1], m = 4, k = 2)",
        "maxSum(nums = [1, 2, 3], m = 2, k = 4)",
        "maxSum(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,0,6,0,0,0,0,0,1], m = 2, k = 3)",
        "maxSum(nums = [9,9,7,9,7], m = 2, k = 2)"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1, 2, 3])",
        "isGood(nums = [1,3,2])",
        "isGood(nums=[1,2,3,4,5])",
        "isGood(nums = [1,3,5,7,9])",
        "isGood(nums = [1,2,4,3,5])",
        "isGood(nums=[4, 1, 3, 2, 5])",
        "isGood(nums = [1,2,3,4,5,6,7,8,10,9])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 1, 2, 1, 2, 1, 2, 1])",
        "minLengthAfterRemovals(nums = [3,3,7,3])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [3,2,3,4,5])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,4,5,5,5,5])",
        "minLengthAfterRemovals(nums = [2, 1, 3, 1, 2, 3, 2, 3])",
        "minLengthAfterRemovals(nums = [9,4,9,8,2,4,3,1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 4, 5, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [6, 4, 3, 6, 3, 4, 4, 4])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"a\", \"aa\", \"aaa\"], x = \"aa\")",
        "findWordsContaining(words = [\"ab\",\"abc\",\"bc\"], x = \"bc\")",
        "findWordsContaining(words = [\"aa\", \"bb\", \"cc\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"apple\", \"carrot\"], x = \"ll\")",
        "findWordsContaining(words = [\"foo\", \"bar\", \"baz\", \"barz\"], x = \"ba\")",
        "findWordsContaining(words = [\"banana\", \"apple\", \"ban\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"test\", \"tester\", \"testers\"], x = \"est\")",
        "findWordsContaining(words = [\"black\", \"white\", \"green\", \"blues\"], x = \"blue\")",
        "findWordsContaining(words = [\"roat\", \"tea\", \"treat\"], x = \"ae\")",
        "findWordsContaining(words = [\"snack\", \"stack\", \"star\", \"skin\", \"puff\"], x = \"ac\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 100])",
        "minimumCoins(prices = [1, 3, 4])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100, 200])",
        "minimumCoins(prices = [3, 1, 4, 5, 7, 8])",
        "minimumCoins(prices = [1, 3, 5, 7, 9, 11])",
        "minimumCoins(prices = [1, 2, 4, 11, 12])",
        "minimumCoins(prices = [3, 4, 6, 8, 9, 10, 13, 15, 17, 19, 20, 24, 27, 28, 32, 33])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abcde\")",
        "minimumBeautifulSubstrings(s = \"abc\")",
        "minimumBeautifulSubstrings(s = \"abcabc\")",
        "minimumBeautifulSubstrings(s = \"cbbd\")",
        "minimumBeautifulSubstrings(s = \"ab\")",
        "minimumBeautifulSubstrings(s = \"abcbef\")",
        "minimumBeautifulSubstrings(s = \"0000\")",
        "minimumBeautifulSubstrings(s = \"xxxx\")",
        "minimumBeautifulSubstrings(s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"aecd\")",
        "canBeEqual(s1 = \"abab\", s2 = \"abba\")",
        "canBeEqual(s1 = \"1122\", s2 = \"1221\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcc\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"ab\", s2 = \"aab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"dbc\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"cdefa\")",
        "canBeEqual(s1 = \"ab\", s2 = \"yx\")",
        "canBeEqual(s1 = \"car\", s2 = \"car\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"axc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azcbobobegghakl\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcd\")",
        "canMakeSubsequence(str1 = \"xy\", str2 = \"yxz\")",
        "canMakeSubsequence(str1 = \"zx\", str2 = \"xz\")",
        "canMakeSubsequence(str1 = \"acb\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"ezpzc\", str2 = \"z\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [4,4,4,2,4])",
        "minLengthAfterRemovals(nums = [1,1,1,2,1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 1])",
        "minLengthAfterRemovals(nums = [4,4,4,2,3,3,3])",
        "minLengthAfterRemovals(nums = [7, 7, 1, 7])",
        "minLengthAfterRemovals(nums = [2, 2, 2, 2, 5, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 4, 5, 2])",
        "minLengthAfterRemovals([1, 2, 2, 1, 1, 2])",
        "minLengthAfterRemovals(nums = [1,2,2,4,4,5,5,7,7])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"12\", s2 = \"21\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"13\", s2 = \"31\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"bdefa\")",
        "canBeEqual(s1 = \"ab\", s2 = \"xby\")",
        "canBeEqual(s1 = \"ab\", s2 = \"ba\")",
        "canBeEqual(s1 = \"a2d4\", s2 = \"a3d4\")"
    ],
    "sample_382": [
        "countPairs(nums = [3,5,4,8], target = 7)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 1, 1, 1], target = 2)",
        "countPairs(nums = [1, 3, 2, 2], target = 4)",
        "countPairs(nums = [3, 4, 5, 2, 1], target = 5)",
        "countPairs(nums = [1, 3, 3, 5], target = 8)",
        "countPairs(nums = [3, 5, 4, 2], target = 7)",
        "countPairs(nums = [1, 2, 4, 3], target = 5)",
        "countPairs(nums = [3, 1, 2, 1], target = 5)",
        "countPairs(nums = [1, 5, 3, 2, 4, 7, 9, 8, 10, 6, 11], target = 13)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"acb\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"azcbobobegghakl\")",
        "canMakeSubsequence(s1 = \"abcde\", s2 = \"adc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"axbxbxc\")",
        "canMakeSubsequence(s1 = \"azbca\", s2 = \"abc\")",
        "canMakeSubsequence(s1 = \"abc\", s2 = \"zxca\")",
        "canMakeSubsequence(s1=\"aabc\", s2=\"aabcc\")",
        "canMakeSubsequence(s1 = \"raa\", s2 = \"zaa\")",
        "canMakeSubsequence(s1=\"asdfgh\", s2=\"adhz\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"2\", \"4\", \"prev\", \"prev\", \"3\", \"1\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"2\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"2\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"prev\",\"1\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = ['0', '1', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['4', 'prev', 'prev', '3', '1', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers([\"4\", \"prev\", \"prev\", \"5\", \"7\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers([\"prev\", \"prev\", \"2\", \"prev\", \"prev\", \"3\", \"1\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"4\", \"prev\", \"10\", \"prev\", \"9\", \"10\", \"prev\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8]], k = 1)",
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]], k = 1)",
        "countPairs(coordinates = [[1, 0], [0, 1], [1, 1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 4], [4, 5], [6, 7], [7, 8]], k = 1)",
        "countPairs(coordinates = [[0, 1], [1, 0]], k = 2)",
        "countPairs(coordinates = [[1,1],[3,1],[5,3],[3,2],[1,2]], k = 2)",
        "countPairs(coordinates = [[2,2],[2,3],[2,4],[2,5]], k = 1)",
        "countPairs(coordinates = [[1, 0], [0, 1], [1, 1], [2, 1], [1, 2], [1, 3]], k = 1)",
        "countPairs(coordinates = [[1, 2], [3, 2], [4, 5], [3, 4]], k = 2)"
    ],
    "sample_451": [
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"bbbaaabb\")",
        "minChanges(s = \"bbbaba\")",
        "minChanges(s = \"baaab\")",
        "minChanges(s = \"0210\")",
        "minChanges(s = \"ggggggg\")",
        "minChanges(s = \"xyzyz\")",
        "minChanges(s = \"201\")",
        "minChanges(s = \"aaaaaaa\")",
        "minChanges(s = \"ggggggg\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 4, limit = 1)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 10, limit = 7)",
        "distributeCandies(n = 20, limit = 2)",
        "distributeCandies(n = 100, limit = 10)",
        "distributeCandies(n = 22, limit = 4)",
        "distributeCandies(n = 16, limit = 5)",
        "distributeCandies(n = 2, limit = 1)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bd\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bab\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aab\")",
        "canBeEqual(s1 = \"baba\", s2 = \"baba\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bba\")",
        "canBeEqual(s1 = \"cdbc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")"
    ],
    "sample_460": [
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 2, limit = 1)",
        "distributeCandies(n = 5, limit = 5)",
        "distributeCandies(n = 2, limit = 1)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 50)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 5)",
        "accountBalanceAfterPurchase(p = 80)",
        "accountBalanceAfterPurchase(p = 21)",
        "accountBalanceAfterPurchase(p = 59)",
        "accountBalanceAfterPurchase(p = 36)",
        "accountBalanceAfterPurchase(p = 52)",
        "accountBalanceAfterPurchase(p = 120)",
        "accountBalanceAfterPurchase(12)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 2, 1])",
        "sumCounts(nums = [1, 2, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 5])",
        "sumCounts(nums = [1, 2, 1, 3, 1, 4, 1, 5])",
        "sumCounts(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "sumCounts(nums = [1, 2, 3, 2, 3, 1, 4, 5, 2])",
        "sumCounts(nums = [1, 2, 3, 3, 4, 5, 6, 7, 7, 9, 10, 12])",
        "sumCounts([2,1,3,4,1,2])",
        "sumCounts(nums = [3, 1, 3, 4, 3, 5, 6, 2])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [1, 1, 1, 1, 1])",
        "minimumSeconds(A = [1, 2, 1])",
        "minimumSeconds(A = [1, 3, 1])",
        "minimumSeconds(A = [1, 5, 3, 3, 7])",
        "minimumSeconds(A = [1,2,2,1,1])",
        "minimumSeconds(A = [3,2,3,4,3,5])",
        "minimumSeconds(A = [1, 10, 1, 10])",
        "minimumSeconds(A = [5, 3, 2, 6])",
        "minimumSeconds(A = [6, 3, 5, 6, 7, 8])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ac\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"xyz\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"acd\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"def\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"axc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1=\"abc\", str2=\"ab\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])",
        "minimumRightShifts(nums = [3, 1, 2, 4])",
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [2, 1, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [2, 5, 3, 6, 4])",
        "minimumRightShifts(nums = [7, 1, 5, 2, 9, 6])",
        "minimumRightShifts(nums = [6, 4, 5, 3, 2, 2, 7, 2, 7])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,2], l = 0, r = 2)",
        "countSubMultisets(nums = [1,1,2,2,2,2], l = 0, r = 3)",
        "countSubMultisets(nums = [1, 1, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [1,2,2,1], l = 2, r = 3)",
        "countSubMultisets(nums = [1,1,1,1,1,1,1], l = 1, r = 2)",
        "countSubMultisets(nums = [1,1,2,2,2,2,2], l = 2, r = 5)",
        "countSubMultisets(nums = [2, 1, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [2, 1, 3, 2, 1, 2], l = 3, r = 3)",
        "countSubMultisets(nums = [1, 2, 3, 4, 3, 3], l = 1, r = 2)",
        "countSubMultisets(nums = [1, 3, 4, 1, 3, 4], l = 3, r = 6)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 4, 5, 2, 6, 7])",
        "minimumCoins(prices = [1, 3, 4, 8])",
        "minimumCoins(prices = [1, 1, 3, 5])",
        "minimumCoins(prices = [3, 7, 4, 5, 1, 8])",
        "minimumCoins([5, 2, 1, 3])",
        "minimumCoins(prices = [1, 4, 5, 11, 15, 16])",
        "minimumCoins(prices = [1, 4, 5, 11, 8, 10])",
        "minimumCoins(prices = [2, 5, 6, 4, 1, 1, 2, 0, 4, 2, 2])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [1, 3, 2, 5])",
        "minimumCoins(prices = [2, 4, 3, 5])",
        "minimumCoins(prices = [3, 1, 4, 2, 1, 1, 3])",
        "minimumCoins(prices = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24])",
        "minimumCoins(prices = [3, 2, 5, 1, 3, 1, 7, 4])",
        "minimumCoins(prices = [2, 4, 8, 15, 32, 65, 89])"
    ],
    "sample_438": [
        "lastVisitedIntegers([\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"3\", \"4\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"3\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"prev\", \"4\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"3\", \"prev\", \"prev\", \"4\", \"5\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"prev\", \"prev\", \"3\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"3\", \"2\", \"prev\", \"1\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"0\", \"prev\", \"1\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"3\", \"1\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\", \"prev\", \"4\", \"prev\", \"prev\", \"5\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"3\", \"1\", \"2\", \"prev\", \"3\", \"2\", \"prev\", \"1\", \"2\", \"prev\", \"2\", \"prev\", \"3\", \"prev\", \"3\", \"prev\"])"
    ],
    "sample_428": [
        "minOperations(nums = [0, 1, 0, 1, 1])",
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1,1,1,2,2,2])",
        "minOperations(nums = [1, 2, 1, 1])",
        "minOperations(nums = [3,3,1,1,1,2,2,2,2,2])",
        "minOperations(nums = [1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4])",
        "minOperations(nums = [0,1,2,2,2,0,1,1,1])",
        "minOperations(nums = [3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5, 1, 2])",
        "minOperations(nums = [5, 1, 1, 99, 10, 20])",
        "minOperations(nums = [1,1,2,3,4,4,4,5,6,7,8,8,8,8,8,9,9])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p0\", \"p2\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p0\", \"p2\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p2\", \"p3\", \"p4\"])",
        "lastVisitedIntegers(words = [\"p0\", \"p1\", \"p2\", \"p3\"])",
        "lastVisitedIntegers(words = [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = ['p0', 'p0', 'p3', 'p0', 'p2', 'p5'])",
        "lastVisitedIntegers([\"go\", \"back\", \"to\", \"the\", \"drawing\"])",
        "lastVisitedIntegers(words = [\"7\", \"p\", \"5\", \"p\", \"3\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"px\", \"p1\", \"p2\", \"px\", \"p3\", \"p4\", \"p5\", \"p6\", \"py\"])",
        "lastVisitedIntegers(words = [\"pwwkew\", \"dsjwlk\", \"lajdlfj\", \"ljwkjfkwt\", \"ljwjklfj\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [3,4,2,1,4,5])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [4, 3, 1, 2])",
        "minimumSeconds(nums = [3, 4, 2, 1, 4])",
        "minimumSeconds(nums = [2, 2, 3, 3, 3, 4])",
        "minimumSeconds(nums = [3, 8, 8, 3, 2, 5, 3, 9])",
        "minimumSeconds(nums = [5,1,5,4,5,1,1,1,1])",
        "minimumSeconds([6, 2, 3, 4, 5, 1])",
        "minimumSeconds([99, 99, 99, 100, 100, 100])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], x = \"at\")",
        "findWordsContaining(words = [\"Apple\", \"Ball\", \"Cat\"], x = \"ll\")",
        "findWordsContaining(words = [\"foo\", \"bar\", \"baz\", \"bazbar\"], x = \"az\")",
        "findWordsContaining(words = [\"apple\", \"cat\", \"banana\", \"dog\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hi\", \"worlds\"], x = \"world\")",
        "findWordsContaining(words = [\"gift\", \"card\", \"receiver\"], x = \"if\")",
        "findWordsContaining(words = [\"ghi\", \"def\", \"abc\", \"ghi\", \"abc\"], x = \"ab\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"a\", \"another\", \"hello\"], x = \"he\")",
        "findWordsContaining(words = [\"ab\", \"b\", \"bb\", \"bbbb\", \"babb\"], x = \"b\")",
        "findWordsContaining(words = [\"mammal\", \"incomprehensibility\", \"minority\", \"platypus\", \"nonsequitor\", \"morpheus\"], x = \"a\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1,0,1,1,0,1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 0, 1])",
        "maxSubarrays([1, 0, 1, 1, 0, 1])",
        "maxSubarrays([1, 1, 0, 1])",
        "maxSubarrays(nums = [0, 1, 0, 0, 0, 0, 1, 0, 1, 0])",
        "maxSubarrays([0,1,0,0,0,0,1,0])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"prev\",\"2\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"3\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"banana\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"1\", \"prev\", \"3\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"12\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers([\"prev\", \"0\", \"prev\", \"0\", \"prev\", \"0\", \"1\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [2,7,11,15], target = 9)",
        "countPairs(nums = [2,7,11,15], target = 9)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,5,3,4,7], target = 9)",
        "countPairs(nums = [2, 7, 11, 15], target = 10)",
        "countPairs(nums = [2,3,4,5,6], target = 7)",
        "countPairs(nums = [1, 7, 4, 9, 3], target = 10)",
        "countPairs(nums = [1, 2, 7, 4, 8], target = 11)",
        "countPairs(nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7], target = 8)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"cba\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abc\")",
        "canBeEqual(s1 = \"abb\", s2 = \"baba\")",
        "canBeEqual(s1 = \"aaaa\", s2 = \"aaa\")",
        "canBeEqual(s1 = \"bbbeeee\", s2 = \"eeeee\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"2\", \"4\", \"prev\", \"prev\", \"3\", \"1\", \"5\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"1\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"prev\",\"prev\",\"2\"])",
        "lastVisitedIntegers([\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"1\",\"prev\",\"2\",\"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"3\",\"2\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers([\"1\", \"2\", \"prev\", \"3\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\",\"3\",\"prev\",\"2\",\"prev\",\"1\",\"4\",\"prev\",\"prev\"])",
        "lastVisitedIntegers([\"prev\",\"1\",\"prev\",\"3\",\"prev\",\"5\",\"prev\",\"7\"])",
        "lastVisitedIntegers(words = [\"last\", \"prev\", \"on\", \"prev\", \"last\", \"on\", \"prev\", \"on\", \"last\", \"on\", \"prev\", \"on\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 9, limit = 4)",
        "distributeCandies(n = 2, limit = 2)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [3, 5, 2, 1, 4])",
        "minimumRightShifts(nums = [4, 3, 1, 2])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [2, 4, 3, 1, 5, 4])",
        "minimumRightShifts(nums = [2, 1, 3, 4, 5])",
        "minimumRightShifts(nums = [3, 2, 3, 4, 2])",
        "minimumRightShifts(nums = [2, 4, 2, 2, 2])",
        "minimumRightShifts(nums = [1, 3, 6, 3, 2, 1])",
        "minimumRightShifts(nums = [3,1,3,5,3,2])",
        "minimumRightShifts(nums = [5, 1, 5, 2, 1, 4, 4, 5])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"bar\", \"baz\", \"foo\", \"qux\"], x = \"uz\")",
        "findWordsContaining(words = [\"apple\", \"bear\", \"cat\"], x = \"a\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"app\"], x = \"pp\")",
        "findWordsContaining(words = [\"happy\", \"hi\", \"hiii\", \"heyyyy\"], x = \"hi\")",
        "findWordsContaining(words = [\"ant\", \"antelope\", \"plant\"], x = \"ant\")",
        "findWordsContaining(words = [\"hi\", \"he\", \"wow\", \"python\"], x = \"hi\")",
        "findWordsContaining(words = [\"ab\", \"aba\", \"ac\", \"a\", \"b\"], x = \"a\")",
        "findWordsContaining(words = [\"happy\",\"bat\",\"bar\",\"cat\",\"fad\"], x = \"ad\")",
        "findWordsContaining(words = [\"hello\", \"hola\", \"hello there\", \"bulls\"], x = \"ell\")"
    ],
    "sample_398": [
        "maxSum(nums = [4, 2, 5, 10, 8], m = 2, k = 1)",
        "maxSum(nums = [1, 2], m = 2, k = 1)",
        "maxSum(nums = [1,1,1,1], m = 2, k = 2)",
        "maxSum(nums = [1,1,1,1], m = 3, k = 2)",
        "maxSum(nums = [4, 3, 10, 9, 8], m = 2, k = 3)",
        "maxSum(nums = [0, 3, 6, 0, 3, 6], m = 2, k = 3)",
        "maxSum(nums = [2, 1, 5, 6, 0, 9, 5, 0, 2, 6], m = 3, k = 4)",
        "maxSum(nums = [0, 3, 2, 4, 5], m = 3, k = 2)",
        "maxSum(nums = [2,3,5,4,5,1], m = 2, k = 3)",
        "maxSum(nums = [7, 2, 4, 10, 8, 1, 12, 11], m = 4, k = 2)"
    ],
    "sample_424": [
        "minOperations(nums = [3,1,4,1,5])",
        "minOperations(nums = [3, 4, 5, 6, 7])",
        "minOperations(nums = [9, 9, 9])",
        "minOperations(nums = [0, 0, 1, 0, 1])",
        "minOperations(nums = [4,6,5,7,1,3])",
        "minOperations(nums = [2,4,1,2,2,1,4,3,2])",
        "minOperations(nums = [2,3,3,1,2,4,2])",
        "minOperations(nums = [2,2,2,2,2,4,4,4,5,6,9,10])",
        "minOperations(nums = [4,4,3,4,4,5,4,5,4])",
        "minOperations(nums = [3,4,5,9,7,3,7,1])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 7)",
        "minOperations(nums = [4, 3, 1, 1, 9], k = 7)",
        "minOperations(nums = [4, 2, 1, 3], k = 7)",
        "minOperations(nums = [1, 2, 1, 3, 4, 1], k = 3)",
        "minOperations(nums = [6, 1, 3, 2, 5, 4], k = 10)",
        "minOperations(nums = [1,3,6,5,2], k = 6)",
        "minOperations(nums = [100, 19, 28, 9, 5], k = 5)",
        "minOperations(nums = [4,5,7,6,3,1,2,3], k = 12)",
        "minOperations(nums = [9,7,5,4,10], k = 4)",
        "minOperations(nums = [231, 123, 211, 111, 121], k = 31)"
    ],
    "sample_371": [
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = \"Python\")",
        "sortVowels(s = \"YlmpH\")",
        "sortVowels(s = \"Hylmp\")",
        "sortVowels(s = \"mlYhP\")",
        "sortVowels(s = \"Zoology\")",
        "sortVowels(s = 'lmno')",
        "sortVowels(s = \"yulIpH\")",
        "sortVowels(s = \"lmpryhti\")",
        "sortVowels(s = \"Hello, world\")"
    ],
    "sample_465": [
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 9, limit = 3)",
        "distributeCandies(n = 6, limit = 4)",
        "distributeCandies(n = 6, limit = 1)",
        "distributeCandies(n = 4, limit = 4)",
        "distributeCandies(n=6, limit=3)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 2, 1])",
        "sumCounts([1, 2, 2, 3])",
        "sumCounts(nums = [2, 3, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 1, 1])",
        "sumCounts(nums = [1, 2, 2, 4, 5, 6, 7, 7, 8, 9, 10])",
        "sumCounts(nums = [2,2,2,4,5,7,7,7])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [0, 1, 1, 1, 1])",
        "maxSubarrays([1, 3, -1, -3, 5, 3, 6, 7])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 2, 3])",
        "maxSubarrays([1, -2, 3, 4])",
        "maxSubarrays(nums = [1, 0, 0, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [1, -1, 2, -1, 3, -1, 4, -1])",
        "maxSubarrays([1, 1, 0, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [2, 2, -1, 2, 2, 2, 2, 2, -1, 2])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 4])",
        "sumCounts(nums = [1, 2, 2])",
        "sumCounts(nums = [2, 3, 4])",
        "sumCounts(nums = [1, 1, 2, 3, 4])",
        "sumCounts(nums = [1, 3, 3, 3, 5, 7, 7])",
        "sumCounts([2, 2, 2, 2])",
        "sumCounts(nums = [2,2,3,3,3,4])",
        "sumCounts(nums = [1, 1, 2, 3, 4, 1, 2, 3, 5])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"aabb\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bac\")",
        "canBeEqual(s1 = \"aaa\", s2 = \"bbb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"abc\")",
        "canBeEqual(s1 = \"aabc\", s2 = \"ccab\")",
        "canBeEqual(s1 = \"1010\", s2 = \"1010\")",
        "canBeEqual(s1 = \"zzz\", s2 = \"xxx\")",
        "canBeEqual(s1 = \"abccdd\", s2 = \"cdcba\")",
        "canBeEqual(s1 = \"AxA\", s2 = \"AbA\")"
    ],
    "sample_380": [
        "countPairs(nums = [3,5,4,8], target = 7)",
        "countPairs(nums = [3,5,4,8], target = 7)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,5,3,4,7], target = 10)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], target = 5)",
        "countPairs(nums = [1,1,3,3,3,4,4,5,5], target = 8)",
        "countPairs(nums = [1,5,3,2,4], target = 5)",
        "countPairs(nums = [1, 2, 7, 1], target = 9)",
        "countPairs(nums = [1,3,2,0,5], target = 6)",
        "countPairs(nums = [1, 2, 5, 2, 4, 6], target = 6)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 3, 2, 1])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts(nums = [4, 4, 4, 4])",
        "sumCounts(nums = [1, 2, 3, 1, 4])",
        "sumCounts(nums = [2, 2, 2, 3])",
        "sumCounts(nums = [3, 3, 3, 3, 3, 3, 3, 3])",
        "sumCounts(nums = [0, 1, 2, 1, 1])",
        "sumCounts(nums = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2])",
        "sumCounts([1, 3, 3, 3])"
    ],
    "sample_368": [
        "sortVowels(s = 'lymph')",
        "sortVowels(\"lYmpH\")",
        "sortVowels(s = \"Ylmph\")",
        "sortVowels(s = \"YmlpH\")",
        "sortVowels(s = 'mlYepH')",
        "sortVowels(s = 'prOgRamming')",
        "sortVowels(\"caber net\")",
        "sortVowels(s = \"mYpHmy\")",
        "sortVowels(s = \"cayenne\")",
        "sortVowels(s = \"vAulg\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 7, limit = 4)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 9, limit = 4)",
        "distributeCandies(n = 8, limit = 5)",
        "distributeCandies(n = 4, limit = 4)",
        "distributeCandies(n = 15, limit = 4)"
    ],
    "sample_474": [
        "minimumCoins(prices = [3, 1, 4, 1, 5])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [3, 1, 4, 5, 6, 2])",
        "minimumCoins([1, 2, 5, 10, 20, 50, 100])",
        "minimumCoins(prices = [1, 2, 4, 5, 6, 10])",
        "minimumCoins(prices = [7, 5, 2, 3, 6])",
        "minimumCoins(prices = [1, 4, 5, 2, 3, 5, 6])",
        "minimumCoins(prices = [5, 3, 7, 2, 4, 3])",
        "minimumCoins(prices = [10, 15, 20, 50, 5, 5, 5, 80, 100])",
        "minimumCoins(prices = [1,2,10,14,25,26])"
    ],
    "sample_426": [
        "minOperations(nums = [4,4,7,6,7])",
        "minOperations(nums = [2, 5, 1, 2, 3, 1, 1, 3])",
        "minOperations([3, 1, 1, 2, 3, 1])",
        "minOperations(nums = [1, 2, 2, 3, 3, 3, 4, 4])",
        "minOperations(nums = [1, 5, 2, 4, 1])",
        "minOperations([5,5,4,4])",
        "minOperations(nums = [4, 2, 4, 2, 2, 4, 2, 2, 2, 4, 2, 2])",
        "minOperations(nums = [5, 4, 8, 5, 11, 7])",
        "minOperations(nums = [1,1,4,2,3,2,2,3,4,2])",
        "minOperations([4, 11, 4, 4, 2])"
    ],
    "sample_423": [
        "minOperations(nums = [1, 2, 3, 4])",
        "minOperations(nums = [1,1,1,1,1,1,1,1])",
        "minOperations(nums = [1,1,1,3])",
        "minOperations(nums = [3, 3, 3, 2, 2, 2, 1, 1])",
        "minOperations(nums = [6, 6, 6, 6, 3, 6])",
        "minOperations(nums = [1,3,1,4,1,3,1])",
        "minOperations(nums = [5,4,7,2,8,1])",
        "minOperations(nums = [4, 4, 5, 2, 4, 4, 4])",
        "minOperations(nums = [1,2,4,5,6,7,8,9])",
        "minOperations(nums = [4,4,4,5,3,2,3,4])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,2,3])",
        "minimumCoins(prices = [1,3,4,5])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [3, 5, 1, 2, 2])",
        "minimumCoins(prices = [1,2,5,10,20,100])",
        "minimumCoins(prices = [2, 2, 1, 2, 2, 3])",
        "minimumCoins(prices = [7,5,8,9,4])",
        "minimumCoins(prices = [4,5,7,1,10,20,25])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 1, 5, 6, 3, 4])",
        "minimumRightShifts(nums = [3, 3, 1, 2, 3])",
        "minimumRightShifts(nums = [3, 1, 5, 2, 4])",
        "minimumRightShifts(nums = [2, 3, 1, 4, 6, 5])",
        "minimumRightShifts(nums = [3, 1, 3, 2, 1])",
        "minimumRightShifts(nums = [3, 1, 5, 3, 2, 4])",
        "minimumRightShifts(nums = [4, 2, 3, 1, 2, 2, 3])",
        "minimumRightShifts(nums = [3, 1, 1, 2, 2, 1])",
        "minimumRightShifts(nums = [1, 5, 8, 9, 5, 2, 3])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [2, 4, 3, 1, 2, 3, 4, 4, 4])",
        "minimumRightShifts(nums = [2, 1, 3, 4])",
        "minimumRightShifts(nums = [2, 4, 3, 1, 2, 3, 4, 4])",
        "minimumRightShifts(nums = [3,4,5,1,2])",
        "minimumRightShifts([1, 2, 3, 4])",
        "minimumRightShifts(nums = [2,3,1,4,2])",
        "minimumRightShifts(nums = [4, 1, 3, 5, 2, 6, 7])",
        "minimumRightShifts(nums = [5, 2, 1])",
        "minimumRightShifts([2, 3, 2, 3, 2])",
        "minimumRightShifts(nums = [5, 9, 3, 14, 14, 14])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"bbb\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"bcdf\")",
        "findMinimumOperations(s1 = \"qwe\", s2 = \"qwe\", s3 = \"qwe\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aab\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcde\", s3 = \"becd\")",
        "findMinimumOperations(s1 = \"qwe\", s2 = \"rst\", s3 = \"rty\")",
        "findMinimumOperations(s1 = \"qqqqq\", s2 = \"qqqq\", s3 = \"q\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abccde\")",
        "longestSemiRepetitiveSubstring(\"ababababab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"bbbbabbbbba\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabaabacbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"thedaily\")",
        "longestSemiRepetitiveSubstring(s = \"deeeeedbbebbbbeeeeccccccc\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"ab\",\"abc\",\"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"mnop\",\"qrs\",\"abcd\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\",\"sdaklfj\",\"asdjf\",\"na\",\"dkffd\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"b\",\"a\",\"c\"])",
        "maximumNumberOfStringPairs(words = [\"ac\",\"ab\",\"aa\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"sdaklfj\", \"asdjf\", \"na\", \"basdj\", \"sdaklfj\", \"asdjf\", \"na\", \"basdj\", \"sdaklfj\", \"asdjf\", \"na\", \"basdj\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abcd\",\"efg\",\"aef\"])",
        "maximumNumberOfStringPairs(words = [\"dc\", \"ab\", \"ca\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"abcdef\", s2 = \"abcdef\", x = 2)",
        "minOperations(s1 = \"abc\", s2 = \"bac\", x = 2)",
        "minOperations(s1 = \"beabeefeab\", s2 = \"bebe\", x = 2)",
        "minOperations(s1 = \"abcdef\", s2 = \"uvwxyz\", x = 4)",
        "minOperations(s1 = \"abcde\", s2 = \"ecba\", x = 3)",
        "minOperations(s1 = \"ece\", s2 = \"ece\", x = 1)",
        "minOperations(s1 = \"AABAA\", s2 = \"ABAAA\", x = 1)",
        "minOperations(s1 = \"aba\", s2 = \"aac\", x = 0)",
        "minOperations(s1 = \"aaaaabbbbb\", s2 = \"aabaabbbb\", x = 2)",
        "minOperations(s1 = \"yabczd\", s2 = \"zzyabczd\", x = 3)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"dea\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"fgh\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"abc\",\"bc\",\"abc\",\"bc\",\"abc\",\"bc\"])",
        "maximumNumberOfStringPairs(words = [\"bca\",\"bha\",\"caa\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abc\",\"efg\",\"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"aab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abcd\", \"def\", \"efg\", \"efhi\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"befc\", \"def\", \"fegb\", \"caf\"])",
        "maximumNumberOfStringPairs(words = [\"seata\", \"ratat\", \"seata\"])",
        "maximumNumberOfStringPairs(words = [\"cc\",\"bbb\",\"cc\",\"bcc\",\"bb\",\"bcccc\",\"bcc\",\"cc\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 0, 1, 0, 1])",
        "minGroupsForValidAssignment(nums = [4,3,4,2,4,1,4,4])",
        "minGroupsForValidAssignment(nums = [4,3,4,3,4,2])",
        "minGroupsForValidAssignment(nums = [2, 3, 4, 2])",
        "minGroupsForValidAssignment(nums = [2, 2, 2, 2, 5, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2, 1, 2, 1, 2])",
        "minGroupsForValidAssignment(nums = [5,1,1,1,5])",
        "minGroupsForValidAssignment(nums = [6, 10, 15, 20, 20, 20, 20, 20])",
        "minGroupsForValidAssignment(nums = [3,3,2,1,3,4,1,1,1])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 6, m = 4)",
        "differenceOfSums(n = 100, m = 17)",
        "differenceOfSums(n = 100, m = 3)",
        "differenceOfSums(n=7, m=2)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"0110\", k = 1)",
        "shortestBeautifulSubstring(s = \"011\", k = 2)",
        "shortestBeautifulSubstring(s = \"01101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1100111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111101\", k = 4)",
        "shortestBeautifulSubstring(s = \"010110\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110101\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111111001\", k = 4)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"bc\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcd\", s3 = \"cd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"ab\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"qwe\", s2 = \"rty\", s3 = \"uio\")",
        "findMinimumOperations(s1 = \"aaaaaaaa\", s2 = \"aaaaaaa\", s3 = \"aaaaaa\")",
        "findMinimumOperations(s1 = \"heh\", s2 = \"he\", s3 = \"hel\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"aba\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabaab\")",
        "longestSemiRepetitiveSubstring(s = \"aabbaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabb\")",
        "longestSemiRepetitiveSubstring(\"abccd\")",
        "longestSemiRepetitiveSubstring(s = \"ababacd\")",
        "longestSemiRepetitiveSubstring(s = \"heyheyheyhey\")",
        "longestSemiRepetitiveSubstring(s = \"asdfghssdfhshkjsh\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2], nums2 = [1, 2, 3])",
        "minSum(nums1 = [0,1,2], nums2 = [3,4,5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 4])",
        "minSum(nums1 = [1, 2], nums2 = [3, 2])",
        "minSum(nums1 = [1], nums2 = [2, 3])",
        "minSum(nums1 = [4, 5, 1], nums2 = [1, 1, 3, 4, 4])",
        "minSum(nums1 = [1, 1, 1, 1], nums2 = [2, 2, 2, 2, 2, 2, 2])",
        "minSum(nums1 = [1, 3, 15, 11, 2], nums2 = [23, 2, 4, 14, 5])",
        "minSum(nums1 = [2, 2, 2, 3], nums2 = [3, 1, 3, 1])",
        "minSum(nums1 = [1,1,2,3,4,4,5,6,7,7,8], nums2 = [2,4,5,5,6,6,7,7,8,8,8])"
    ],
    "sample_289": [
        "minimumSteps(s = \"010\")",
        "minimumSteps(\"101\")",
        "minimumSteps(s = \"1011101\")",
        "minimumSteps(s = \"11011\")",
        "minimumSteps(s = \"100000\")",
        "minimumSteps(s = \"11101\")",
        "minimumSteps(s = \"0111110\")",
        "minimumSteps(s = \"1100101\")",
        "minimumSteps(s = \"10000000000000000\")",
        "minimumSteps(s = \"1010111010\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [0,0,0])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [3, 1, 4, 2])",
        "maximumTripletValue(nums = [1, 0, -1])",
        "maximumTripletValue(nums = [4, 2, 4, 5, 6])",
        "maximumTripletValue(nums = [-1,-2,-3,-4,-5])",
        "maximumTripletValue(nums = [1, 4, 1, 4, 1, 4])",
        "maximumTripletValue(nums = [1, 5, 5, 10, 20, 20, 30])",
        "maximumTripletValue([100, 1, 0])",
        "maximumTripletValue(nums = [-3, 1, 4, 2, -1, 0, 5, 6, -10, -12, 14, -10])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiou\", k = 1)",
        "beautifulSubstrings(s = \"aeou\", k = 2)",
        "beautifulSubstrings(s=\"zzzy\", k=3)",
        "beautifulSubstrings(s = \"yay\", k = 2)",
        "beautifulSubstrings(s = \"gww\", k = 2)",
        "beautifulSubstrings(s=\"aaauaaa\", k=3)",
        "beautifulSubstrings(s = \"lsuvwomqikb\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"bb\")",
        "minimumBeautifulSubstrings(s = \"beautiful\")",
        "minimumBeautifulSubstrings(s = \"bbbb\")",
        "minimumBeautifulSubstrings(s = \"leetcode\")",
        "minimumBeautifulSubstrings(s = \"bbbbbbb\")",
        "minimumBeautifulSubstrings(s = \"dcdb\")",
        "minimumBeautifulSubstrings(s = \"zzbbbbzd\")",
        "minimumBeautifulSubstrings(s = \"tmygv\")",
        "minimumBeautifulSubstrings(\"hcbefbcb\")",
        "minimumBeautifulSubstrings(s = \"asdqqdde\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2], [3, 4], [5, 6]])",
        "matrixSum(a = [[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "matrixSum(a = [[1,2,3],[4,5,6]])",
        "matrixSum(a = [[2, 1], [3, 4], [1, 5]])",
        "matrixSum(a = [[1, 1], [3, 4], [2, 2], [2, 3]])",
        "matrixSum(a = [[2, 3], [4, 1], [5, 2]])",
        "matrixSum(a = [[5, 6, 7], [8, 9, 10]])",
        "matrixSum(a = [[2, 3, 1], [1, 5, 4], [5, 7, 8]])",
        "matrixSum(a = [[2, 5, 7, 11], [3, 8, 12, 16], [4, 9, 17, 22]])",
        "matrixSum(a = [[3,1,4,2],[2,3,1,1],[3,2,5,1]])"
    ],
    "sample_269": [
        "minSum(nums1 = [0, 1, 2, 3, 4], nums2 = [5, 6, 7, 8, 9])",
        "minSum(nums1 = [0, 2, 3], nums2 = [5, 6, 7])",
        "minSum(nums1 = [0,0,0,0,0,1], nums2 = [0,0,0,0,0,1])",
        "minSum(nums1 = [2,2,2], nums2 = [3,3,3])",
        "minSum(nums1 = [4, 8, 15, 23, 42], nums2 = [8, 11, 15, 16])",
        "minSum(nums1 = [5, 8, 6, 7], nums2 = [2, 1, 3, 4])",
        "minSum(nums1 = [1, 1, 2, 1], nums2 = [3, 1, 1, 1])",
        "minSum(nums1 = [2, 4, 5, 6, 8], nums2 = [3, 6, 7, 8, 10])",
        "minSum(nums1 = [3, 3], nums2 = [3, 2, 4])",
        "minSum(nums1 = [1, 5, 4, 5, 2], nums2 = [1, 7, 8, 1, 1])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [5, 6, 7, 8])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 1, 5], nums2 = [2, 7, 9])",
        "minOperations(nums1 = [1, 1, 3], nums2 = [1, 2, 2])",
        "minOperations(nums1 = [1,1,3], nums2 = [2,5,4])",
        "minOperations(nums1 = [1, 1, 0], nums2 = [1, 0, 1])",
        "minOperations(nums1 = [1, 2, 3, 4, 5, 6], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [0, 0, 0, 0, 0, 0, 0, 0, 0], nums2 = [0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "minOperations(nums1 = [2, 4, 5, 7, 11, 8, 10], nums2 = [1, 4, 6, 8, 12, 16, 20])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,1,2,1,1])",
        "alternatingSubarray(nums = [1,2,1,2,3,1,3])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 1, 1, 1, 2, 2])",
        "alternatingSubarray(nums = [1,1,2,2,1,2,3,3,1,1,2,2,1,2,3,3,1,1,2,2,1,2,3,3,1,1,2,2,1,2,3,3])",
        "alternatingSubarray(nums = [4,4,7,7,7,4,4,7])",
        "alternatingSubarray(nums = [1, 2, 1, 3, 1, 4, 2, 3, 5, 4, 2, 1])",
        "alternatingSubarray(nums = [1,1,2,3,4,4,3,3,3,2,1,1])",
        "alternatingSubarray([1, 2, 3, 3, 3, 4, 5, 3, 3])",
        "alternatingSubarray([2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2])",
        "alternatingSubarray(nums = [2,1,1,2,2,3,3,2,2,2,1,2,1,2,3,3,2,3,2,2,3,3,2])"
    ],
    "sample_315": [
        "buyChoco(prices = [1,2,3], money = 4)",
        "buyChoco(prices = [1, 4, 7], money = 5)",
        "buyChoco(prices = [2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [5, 2, 6, 4], money = 7)",
        "buyChoco(prices = [1, 1, 4], money = 3)",
        "buyChoco(prices = [6, 5, 3, 2], money = 2)",
        "buyChoco(prices = [4, 7, 2], money = 20)",
        "buyChoco(prices = [8, 4, 5, 1], money = 10)",
        "buyChoco(prices = [4, 10], money = 12)",
        "buyChoco(prices = [7, 4, 1, 1, 1], money = 10)"
    ],
    "sample_302": [
        "countSeniors(details = [\"Alice|22\", \"Bob|23\", \"Carol|61\", \"David|62\"])",
        "countSeniors(details = [\"Young - 100\", \"Senior - 61\", \"Senior - 62\", \"Senior - 63\"])",
        "countSeniors(details = [\"01-Jan-1910\", \"01-Jan-1920\", \"01-Jan-1940\", \"01-Jan-1945\", \"01-Jan-1960\"])",
        "countSeniors(details = [\"name age id\", \"m 25 1\", \"f 65 2\", \"m 32 3\", \"f 50 4\"])",
        "countSeniors(details = [\"Mary Brown 84 4568\", \"Susan Black 123 5689\", \"Amy Clark 78 4568\"])",
        "countSeniors(details = [\"name: Sam, age: 30\", \"name: Alex, age: 58\", \"name: Jess, age: 45\", \"name: Hunter, age: 70\", \"name: Bill, age: 65\", \"name: George, age: 61\"])",
        "countSeniors(details = [\"ID: 10023451\", \"name: John\", \"age: 20\", \"ID: 10041356\", \"name: Anna\", \"age: 70\", \"ID: 10041358\", \"name: Peter\", \"age: 40\", \"ID: 10041358\", \"name: Peter\", \"age: 40\"])",
        "countSeniors(details = [\"John 10 32 180\", \"Michael 20 42 180\", \"Sarah 30 34 170\", \"Andrew 40 40 180\", \"Zhen 50 55 190\"])",
        "countSeniors(details = [\"123 156 248 65 101 21 156 65 192\", \"123 248 65 101 21 156 65 192\", \"123 248 65 101 21 156 65 192\"])",
        "countSeniors(details = [\"S2598021H50178578\", \"S9450421H51058682\", \"S2598021H60178578\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"cbacdcbc\", k = 3)",
        "beautifulSubstrings(s = \"abcdefg\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeaaai\", k = 3)",
        "beautifulSubstrings(s = \"aeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeaaai\", k = 2)",
        "beautifulSubstrings(s = \"aaaaaaeaa\", k = 2)",
        "beautifulSubstrings(s = \"abooowdeff\", k = 2)",
        "beautifulSubstrings(s = \"aaaaeeeeeiiiiooooouuuuyy\", k = 7)",
        "beautifulSubstrings(s = \"aewjyuqikokp\", k = 23)"
    ],
    "sample_255": [
        "minimumSum(nums = [3,1,2,4])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [10, 2, 5, 1, 8, 20])",
        "minimumSum(nums = [4, 1, 3, 5])",
        "minimumSum(nums = [10, 2, 3, 4, 1])",
        "minimumSum(nums = [1, 2, 3, 4, 10, 11, 12])",
        "minimumSum(nums = [10,1,3,4,7])",
        "minimumSum(nums = [10,3,2,4])",
        "minimumSum(nums = [2, 3, 1])",
        "minimumSum(nums = [10, 1, 11, 4, 5, 12])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment([1,2,3,4,5,6,7,8,9])",
        "minGroupsForValidAssignment(nums = [1,3,6,2,7,4,10,12])",
        "minGroupsForValidAssignment(nums = [2,1,3,4,5])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 2])",
        "minGroupsForValidAssignment([1,2,3,4,4,4,7,7,8])",
        "minGroupsForValidAssignment(nums = [12,3,12,6,6,18])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,2,2,3,1,1])",
        "minGroupsForValidAssignment(nums = [2,2,4,1,1,4,4,5,2,2])",
        "minGroupsForValidAssignment(nums=[10,10,10,9,1,1,7,7,7])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4,5,4,3,2,1])",
        "alternatingSubarray(nums = [1,1,2,2,3,3,4,4])",
        "alternatingSubarray(nums = [3, 4, 1, 2, 3])",
        "alternatingSubarray([1,2,2,1])",
        "alternatingSubarray(nums = [4,3,2,1,1,4])",
        "alternatingSubarray(nums = [1,1,1,1,3,3,4])",
        "alternatingSubarray(nums = [1,2,4,6,1,4,2,3,2])",
        "alternatingSubarray(nums = [4,5,0,4,5,0,1,0,4])",
        "alternatingSubarray(nums = [1, 1, 3, 4, 5, 1, 4, 5, 6, 1, 7, 8, 6, 7, 1, 5, 8])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"101\", k = 1)",
        "shortestBeautifulSubstring(s = '01110', k = 2)",
        "shortestBeautifulSubstring(s = \"111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"111010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"101001101\", k = 3)",
        "shortestBeautifulSubstring(s = \"10101011101\", k = 3)",
        "shortestBeautifulSubstring(s = \"0001111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1010101010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"100110111001111\", k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"0100\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"111000\")",
        "minimumSteps(s = \"011101\")",
        "minimumSteps(s = \"011011\")",
        "minimumSteps(s = \"001101\")",
        "minimumSteps(s = \"000110110\")",
        "minimumSteps(s = \"100000000\")",
        "minimumSteps(s = \"11000001\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aabacbebebe\")",
        "longestSemiRepetitiveSubstring(s = \"ababababababababab\")",
        "longestSemiRepetitiveSubstring(s = \"baaab\")",
        "longestSemiRepetitiveSubstring(s = \"bababababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabaababacaab\")",
        "longestSemiRepetitiveSubstring(s = \"cabba\")",
        "longestSemiRepetitiveSubstring(s = \"wwxxxyyyzzzz\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,4,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums=[3,4,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 3, 3, 3, 3, 2])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [5,5,4,4,3,4,4])",
        "minGroupsForValidAssignment(nums = [3,3,2,1,3,3,2,1,3,3,2,1,3,3,2,1,3,3,2,1,3,3,2,1,3,3,2,1])",
        "minGroupsForValidAssignment(nums = [10, 10, 9, 9, 9, 9])",
        "minGroupsForValidAssignment(nums = [4,6,5,3,4,3,1,4])"
    ],
    "sample_307": [
        "countSeniors(details = [\"0000-00-00\", \"1000-00-00\"])",
        "countSeniors(details = [\"33\", \"22\", \"59\", \"48\"])",
        "countSeniors(details = [\"S007\", \"S458\", \"S907\"])",
        "countSeniors(details = [\"Joe 33\", \"Tom 45\", \"Anna 50\", \"Sara 60\"])",
        "countSeniors(details = [\"1988-12-31\", \"1985-12-31\", \"2005-12-31\"])",
        "countSeniors(details = [\"120 2012\", \"122 2020\", \"124 2000\"])",
        "countSeniors(details = [\"name1:10/10/1950\", \"name2:12/12/1960\", \"name3:10/10/1990\"])",
        "countSeniors(details = [\"51 60\", \"64 44\", \"59 38\"])",
        "countSeniors(details = [\"45 21 31 90 41 22 33 44 12\", \"27 21 19 60 14 24 22 52 14\"])",
        "countSeniors(details = [\"75622\",\"89658\",\"21442\",\"95654\",\"54216\",\"31585\",\"21465\",\"25479\",\"62214\",\"21658\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"01010\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"010110\")",
        "minimumSteps(s = \"010110\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"00111\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(\"00000\")",
        "minimumSteps(s = \"001010\")",
        "minimumSteps(\"001011\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,3,4], moveFrom = [1,3], moveTo = [2,2])",
        "relocateMarbles(nums = [2,4,1,3,5],moveFrom = [1,2],moveTo = [2,1])",
        "relocateMarbles(nums = [2,4,1,4,5], moveFrom = [1, 4], moveTo = [2, 2])",
        "relocateMarbles(nums=[1,2,3,4,5,6],moveFrom=[3,4,5],moveTo=[3,4,5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveFrom = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], moveTo = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20])",
        "relocateMarbles(nums = [2,2,3,1,1,3], moveFrom = [2,3], moveTo = [3,2])",
        "relocateMarbles(nums = [3, 3, 2, 1, 2, 1, 2, 3, 3, 4], moveFrom = [1, 2, 2, 3, 3], moveTo = [3, 3, 1, 1, 2])",
        "relocateMarbles(nums = [4, 2, 5, 3, 1], moveFrom = [2, 4, 5], moveTo = [2, 2, 5])",
        "relocateMarbles(nums = [2,1,2,3,2,1,2,4], moveFrom = [3,5,4,1,2,6,2,3], moveTo = [5,4,3,2,6,1,5,1])",
        "relocateMarbles(nums = [4,4,4,4,4,3,3,3,3], moveFrom = [3,4,5,6,7,0,1,2], moveTo = [2,4,5,7,0,1,6,3,8])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1,1,0,0,1,0,0,1])",
        "alternatingSubarray(nums = [2, 1, 2, 1, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [1,2,1])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [2, 3, 1, 2, 2])",
        "alternatingSubarray(nums = [0, 1, 1, 0, 1, 0, 1, 1, 0])",
        "alternatingSubarray(nums = [2, 1, 1, 1, 2, 2, 2])",
        "alternatingSubarray(nums = [1,1,2,2,3,1,1,3,2,2,2,2])",
        "alternatingSubarray(nums = [1,2,3,1,4,3,2,1,2,1,2,3,4,2,1])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"bca\", k = 2)",
        "beautifulSubstrings(s = \"bdca\", k = 3)",
        "beautifulSubstrings(s = \"aaa\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeaaai\", k = 10)",
        "beautifulSubstrings(s = \"kruthar\", k = 4)",
        "beautifulSubstrings(s = \"dAabaa\", k = 3)",
        "beautifulSubstrings(s = \"dqaccaa\", k = 4)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 0, 0, 0])",
        "maximumTripletValue(nums = [0, 0, 0, 0])",
        "maximumTripletValue(nums = [2,1,4,4,8])",
        "maximumTripletValue(nums = [2,1,-100,3,5,0])",
        "maximumTripletValue(nums = [1, 3, -1, 5, 3, 3, 1, -1])",
        "maximumTripletValue(nums = [1, 4, 3, 2, 4, 6, 5, 2])",
        "maximumTripletValue(nums = [6, 2, 4, 3, 1, 5, 8, 7])",
        "maximumTripletValue(nums = [1,3,5,2,6,8,10,13,11])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"dcba\",\"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\", \"abc\", \"efg\"])",
        "maximumNumberOfStringPairs(words = [\"cc\",\"c\",\"c\"])",
        "maximumNumberOfStringPairs(words = [\"a\",\"a\",\"b\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"baa\", \"bad\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"abde\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ale\", \"ale\", \"aleasdd\", \"ale\", \"ale\"])",
        "maximumNumberOfStringPairs(words = [\"bbb\", \"aba\", \"bb\", \"bab\", \"dd\", \"bbb\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 3, m = 2)",
        "differenceOfSums(n = 15, m = 5)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 5, m = 3)",
        "differenceOfSums(n = 6, m = 4)",
        "differenceOfSums(n = 20, m = 4)",
        "differenceOfSums(n = 11, m = 2)",
        "differenceOfSums(n = 30, m = 7)"
    ],
    "sample_314": [
        "buyChoco(prices = [2, 2], money = 5)",
        "buyChoco(prices = [2,3,1], money = 4)",
        "buyChoco(prices = [1, 7, 4, 11], money = 7)",
        "buyChoco(prices = [10, 20, 30, 40], money = 50)",
        "buyChoco(prices = [3, 2, 5], money = 4)",
        "buyChoco(prices = [2, 5, 10], money = 14)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], money = 30)",
        "buyChoco(prices = [1, 7, 3, 4, 5, 6], money = 12)",
        "buyChoco(prices = [2, 3, 6, 8], money = 5)",
        "buyChoco(prices = [10, 6, 8, 5, 7, 12], money = 20)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"bbb\", \"bab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"deq\",\"mee\",\"ece\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"def\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"deq\",\"mee\",\"etd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"acb\", \"bac\"])",
        "maximumNumberOfStringPairs(words = [\"edcba\", \"baedc\", \"dcba\"])",
        "maximumNumberOfStringPairs([\"abcde\", \"abfde\", \"acde\", \"abcde\"])",
        "maximumNumberOfStringPairs([\"abcde\", \"edcba\", \"abcdc\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abaaabab\")",
        "longestSemiRepetitiveSubstring(s = \"ababababababababababababababababababab\")",
        "longestSemiRepetitiveSubstring(s = \"qwerqwerqwer\")",
        "longestSemiRepetitiveSubstring(s = \"bababababababababababababababababa\")",
        "longestSemiRepetitiveSubstring(s = \"ABCABCB\")",
        "longestSemiRepetitiveSubstring(\"ababcabcab\")",
        "longestSemiRepetitiveSubstring(s = \"baababaabaca\")",
        "longestSemiRepetitiveSubstring(s = \"abbababababba\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"])",
        "minimizeConcatenatedLength([\"abc\",\"de\",\"f\"])",
        "minimizeConcatenatedLength(words = [\"ll\",\"gg\"])",
        "minimizeConcatenatedLength([\"cat\", \"spot\", \"dog\"])",
        "minimizeConcatenatedLength(words = [\"practice\", \"makes\", \"perfect\", \"proper\", \"careful\", \"slow\", \"experts\"])",
        "minimizeConcatenatedLength(words = [\"C\",\"ABCD\",\"EF\",\"ABC\"])",
        "minimizeConcatenatedLength(words = [\"bab\",\"c\",\"bcb\",\"b\",\"ba\",\"c\"])",
        "minimizeConcatenatedLength(words = [\"pqrs\",\"gxy\",\"abcd\"])",
        "minimizeConcatenatedLength([\"these\", \"are\", \"not\", \"the\", \"beans\"])",
        "minimizeConcatenatedLength(words = [\"jd\", \"vw\", \"io\", \"bpy\"])"
    ],
    "sample_323": [
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 3)",
        "isFascinating(n = 5)",
        "isFascinating(n = 6)",
        "isFascinating(n = 20)",
        "isFascinating(n = 14)",
        "isFascinating(n = 21)",
        "isFascinating(n = 135)",
        "isFascinating(n = 1023)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abababababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdaabc\")",
        "longestSemiRepetitiveSubstring(s = \"aabca\")",
        "longestSemiRepetitiveSubstring(s = \"abcbcba\")",
        "longestSemiRepetitiveSubstring(\"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcddabab\")",
        "longestSemiRepetitiveSubstring(s = \"gspat\")"
    ],
    "sample_305": [
        "countSeniors(details = [])",
        "countSeniors(details = [\"1111-11-11\", \"2222-22-22\", \"3333-33-33\"])",
        "countSeniors(details=[\"1234567890123\", \"2345678901234\", \"3456789012345\", \"4567890123456\"])",
        "countSeniors(details = [\"Name: John Age: 30\", \"Name: Kate Age: 25\", \"Name: Mary Age: 60\"])",
        "countSeniors(details = [\"name_18\", \"name_73\", \"name_67\"])",
        "countSeniors(details = [\"D\", \"M\", \"L\", \"A\", \"C\", \"Q\"])",
        "countSeniors(details = [\"ID: 100001, CLASS: A, SENIORITY: 10\", \"ID: 100002, CLASS: A, SENIORITY: 60\", \"ID: 100003, CLASS: A, SENIORITY: 10\", \"ID: 100004, CLASS: A, SENIORITY: 30\"])",
        "countSeniors(details=[\"/data/a/name/19991231\", \"/data/b/name/20101231\", \"/data/c/name/20101231\", \"/data/d/name/19991231\"])",
        "countSeniors(details = [\"2579-2023-9999\", \"2567-2015-9999\", \"2579-1988-9999\"])",
        "countSeniors(details = [\"857-555-0165 x856\", \"857-555-0135 x893\", \"857-555-0154 x768\", \"857-555-0118 x839\", \"857-555-0165 x834\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [3, 4, 3, 3])",
        "minGroupsForValidAssignment(nums = [10, 10])",
        "minGroupsForValidAssignment(nums = [3,4,3,4,4])",
        "minGroupsForValidAssignment(nums = [4, 3, 4, 2, 5])",
        "minGroupsForValidAssignment(nums = [2, 4, 2, 6, 4, 4, 4])",
        "minGroupsForValidAssignment([1, 1, 2, 2, 1])",
        "minGroupsForValidAssignment(nums = [4, 4, 6, 6, 3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment([1,1,1,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [4,3,4,2,2,3,1,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,1,1,3,3,2])"
    ],
    "sample_257": [
        "minimumSum([1, 2, 3, 4, 5])",
        "minimumSum(nums = [4, 2, 3, 1, 1, 2])",
        "minimumSum(nums = [1, 4, 2, 3])",
        "minimumSum([0, 0, 0, 0, 0])",
        "minimumSum([1, 2, 3, 4])",
        "minimumSum(nums = [0,0,0,0])",
        "minimumSum(nums = [2, 7, 4, 9, 7, 6, 7])",
        "minimumSum([1, 1, 1, 3, 1])",
        "minimumSum(nums = [1, 4, 5, 7, 2, 9, 4])",
        "minimumSum([1, 1, 3, 2, 1, 1, 4, 2, 2, 1, 1, 1, 3, 4, 5, 6, 2, 1, 1, 1, 1, 1])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"a\",\"b\",\"a\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"dcba\", \"dcba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"abfde\", \"abcde\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\", \"fea\"])",
        "maximumNumberOfStringPairs([\"abc\", \"ab\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"aba\",\"baa\",\"bab\",\"aaab\",\"aaa\",\"kak\"])",
        "maximumNumberOfStringPairs(words = [\"bar\",\"car\",\"baz\",\"foo\",\"bar\",\"baz\"])",
        "maximumNumberOfStringPairs(words = [\"qwe\",\"qwe\",\"asd\",\"asd\",\"qwe\",\"asd\",\"asd\",\"qwe\"])",
        "maximumNumberOfStringPairs(words = [\"be\",\"eg\",\"er\",\"ee\",\"hi\",\"h\",\"e\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"10101\", k = 2)",
        "shortestBeautifulSubstring(s = \"101001\", k = 2)",
        "shortestBeautifulSubstring(s = '0110111', k = 2)",
        "shortestBeautifulSubstring(s = '110111', k = 3)",
        "shortestBeautifulSubstring(s = \"001110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"10101111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1011011110\", k = 4)",
        "shortestBeautifulSubstring(s = \"021021\", k = 4)",
        "shortestBeautifulSubstring(s = '021310222120', k = 2)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 4, 3, 2, 5], limit = 3)",
        "lexicographicallySmallestArray(nums = [3, 1, 2, 4, 5], limit = 5)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5, 6], limit = 2)",
        "lexicographicallySmallestArray(nums = [4, 3, 1, 9, 5], limit = 4)",
        "lexicographicallySmallestArray(nums = [5, 1, 8, 3, 4, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [8, 1, 3, 6, 5], limit = 2)",
        "lexicographicallySmallestArray(nums = [2, 4, 1, 3, 5, 12], limit = 10)",
        "lexicographicallySmallestArray(nums = [10, 2, 3, 5, 6, 8], limit = 5)",
        "lexicographicallySmallestArray(nums = [10, 1, 2, 2, 2, 3, 3, 4, 5, 5, 6], limit = 2)",
        "lexicographicallySmallestArray(nums = [2, 2, 1, 3, 4, 5, 5, 6, 7, 7], limit = 1)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3], [1, 2, 3], [1, 2, 3]])",
        "matrixSum(a = [[1,2,3,4],[5,6,7,8]])",
        "matrixSum([[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "matrixSum(a = [[-5, -4, -3, -2], [-1, 0, 1, 2]])",
        "matrixSum(a = [[3, 5, 2], [4, 4, 1], [1, 1, 9]])",
        "matrixSum(a = [[4,3,4], [1,2,3], [2,3,4], [3,4,5]])",
        "matrixSum(a = [[3, 6, 1], [2, 8, 7], [3, 3, 3]])",
        "matrixSum(a = [[0, 1, 2, 3], [1, 4, 5, 6], [4, 6, 9, 8]])",
        "matrixSum(a = [[4, 10, 8, 7], [1, 12, 14, 15], [14, 12, 15, 10]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aaeeeeeeooooooo\", k = 2)",
        "beautifulSubstrings(s = \"aaeeeooo\", k = 3)",
        "beautifulSubstrings(s = \"abcdefg\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaeiou\", k = 5)",
        "beautifulSubstrings(s = \"aaeeeiiiiooooo\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooauauou\", k = 3)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs([\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"fguij\", \"axcye\", \"wvxyz\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"abcd\",\"efghi\",\"efgh\"])",
        "maximumNumberOfStringPairs([\"abcde\", \"abcd\", \"cd\", \"def\"])",
        "maximumNumberOfStringPairs(words = [\"bba\", \"dbb\", \"axc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bef\", \"bcd\", \"efg\", \"abc\", \"bcd\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abcd\", \"efgh\", \"efabcd\"])",
        "maximumNumberOfStringPairs(words = [\"apple\", \"app\", \"pple\"])",
        "maximumNumberOfStringPairs(words = [\"bba\", \"d\", \"dff\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"cd\",\"ef\",\"gh\",\"ab\",\"cd\"])",
        "maximumNumberOfStringPairs([\"cc\", \"ll\", \"pp\"])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 123)",
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 3)",
        "isFascinating(n = 123456789)",
        "isFascinating(n = 21)",
        "isFascinating(n = 369)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [5, 5, 10, 25, 1, 2, 3, 7])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 5, 5, 10, 25, 1, 2, 3, 7])",
        "maximumTripletValue(nums = [3, 2, 5, 4])",
        "maximumTripletValue(nums = [1, 3, 5, 1, 4, 2])",
        "maximumTripletValue(nums = [3, 5, 2, 1, 6])",
        "maximumTripletValue(nums = [2, 6, 5, 8, 2, 3, 5])",
        "maximumTripletValue(nums = [10, 100, 200, 400, 1])",
        "maximumTripletValue(nums = [10, 1, 3, 5, 2, 1, 0, 5, 10, 10, 10])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[1,2],[3,4],[5,6]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2],[3,4],[5,6]])",
        "matrixSum(nums = [[3,4],[3,4]])",
        "matrixSum(nums = [[-1,1],[2,3]])",
        "matrixSum([[1, 2, 3],[1, 2, 3],[1, 2, 3]])",
        "matrixSum(nums = [[2, 2, 2], [1, 1, 1], [3, 3, 3]])",
        "matrixSum(nums = [[1, 5, 7, 10], [6, 10, 11], [2, 8, 9]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3], b = [3, 2, 1])",
        "minOperations(a = [1, 2, 3], b = [1, 2, 1])",
        "minOperations(a = [1, 1, 1], b = [0, 1, 1])",
        "minOperations(a = [2, 3, 4, 5], b = [2, 3, 4, 5])",
        "minOperations(a = [0, 1, 1, 0, 1, 0, 0, 1], b = [1, 1, 1, 1, 1, 1, 1, 1])",
        "minOperations(a = [0, 1, 0, 2, 1, 2, 0, 1], b = [1, 2, 0, 0, 1, 2, 1, 2])",
        "minOperations(a = [7, 3, 5, 4, 6], b = [2, 7, 4, 5, 1])",
        "minOperations(a = [1, 3, 4, 6], b = [5, 4, 1, 3])",
        "minOperations(a = [7, 1, 5, 8], b = [6, 5, 7, 2])",
        "minOperations(a = [3, 2, 1, 5, 2, 1, 4], b = [4, 2, 5, 3, 1, 2, 4])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minOperations(nums1 = [1, 2], nums2 = [3, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [2, 2, 2])",
        "minOperations(nums1 = [1, 1, 1, 1], nums2 = [4, 1, 1, 1])",
        "minOperations(nums1 = [1, 2], nums2 = [4, 1])",
        "minOperations(nums1 = [1, 3, 2], nums2 = [1, 2, 4])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [5, 8, 4])",
        "minOperations(nums1 = [2, 4, 1, 3], nums2 = [3, 3, 2, 5])",
        "minOperations(nums1 = [1, 5, 7, 10, 15], nums2 = [10, 5, 2, 1, 7])",
        "minOperations(nums1 = [2, 3, 4, 5, 6], nums2 = [5, 8, 4, 5, 4])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 5, 5, 20])",
        "maximumTripletValue(nums = [1,1,1,1])",
        "maximumTripletValue(nums = [0, 1, 2, 3, 4])",
        "maximumTripletValue(nums = [5, 5, 3, 5])",
        "maximumTripletValue(nums = [2,3,1,4,0])",
        "maximumTripletValue(nums = [0, -1, 2, -2, 3, 0])",
        "maximumTripletValue(nums = [3, 3, 2, 4, 2])",
        "maximumTripletValue([1, -1, -1, -1, -1, 0, 1, 1, 1])",
        "maximumTripletValue([1, 10, 3, 5, 15, 3, 6, 18, 20, 5])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = '010110', k = 2)",
        "shortestBeautifulSubstring(s = \"00111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1010\", k = 4)",
        "shortestBeautifulSubstring(s = '011010', k = 1)",
        "shortestBeautifulSubstring(s = \"0011010\", k = 3)",
        "shortestBeautifulSubstring(s = \"111111111\", k = 2)",
        "shortestBeautifulSubstring(s = '01110111010111', k = 4)",
        "shortestBeautifulSubstring(s = '0100110', k = 1)",
        "shortestBeautifulSubstring(s = \"10010110111101\", k = 3)",
        "shortestBeautifulSubstring(s = '01001001100', k = 2)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 1, 1, 1, 1])",
        "minimumSum(nums = [2, 5, 1, 2, 3, 2])",
        "minimumSum(nums = [3, 1, 2, 1, 4])",
        "minimumSum(nums = [7, 1, 5, 10, 2, 3])",
        "minimumSum(nums = [2, 4, 8, 10, 3])",
        "minimumSum(nums = [1,1,9,1,1,1,1])",
        "minimumSum(nums = [1, 5, 1, 6, 1])",
        "minimumSum(nums = [7, 1, 5, 10, 2, 9, 7])",
        "minimumSum(nums = [1, 5, 10, 12, 10])",
        "minimumSum(nums = [9, 18, 3, 11, 16])"
    ],
    "sample_291": [
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"001\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"11100\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [1, 2], nums2 = [3, 4])",
        "minOperations(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 3])",
        "minOperations(nums1 = [1, 1, 2, 2], nums2 = [1, 2, 2, 1])",
        "minOperations(nums1 = [1,2,3], nums2 = [3,2,1])",
        "minOperations(nums1 = [4, 3, 1, 1, 3], nums2 = [2, 1, 1, 1, 1])",
        "minOperations(nums1 = [1, 1, 3, 2], nums2 = [1, 3, 3, 2])",
        "minOperations(nums1 = [2, 2, 2, 4, 2, 2, 2, 2, 2, 4], nums2 = [4, 2, 2, 2, 4, 2, 2, 2, 2, 4])",
        "minOperations(nums1 = [4, 1, 2, 2, 3, 2, 3, 2], nums2 = [3, 2, 2, 3, 3, 2, 2, 2])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])",
        "findChampion(grid = [[1,0,0,1],[0,1,1,0],[0,1,1,0],[1,0,0,1]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 1, 0], [1, 1, 1, 0]])",
        "findChampion(grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])",
        "findChampion(grid = [[0,0,1,1,1,0,1], [0,0,0,1,0,1,0], [1,1,0,0,1,1,0], [1,1,1,0,1,1,0], [0,1,1,1,1,1,0], [1,1,1,0,1,1,1], [1,1,1,0,1,1,1]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 2)",
        "differenceOfSums(n = 10, m = 5)",
        "differenceOfSums(n = 6, m = 2)",
        "differenceOfSums(n = 100, m = 7)",
        "differenceOfSums(n = 100, m = 7)",
        "differenceOfSums(n = 20, m = 2)",
        "differenceOfSums(n = 13, m = 2)",
        "differenceOfSums(n = 1000, m = 100)"
    ],
    "sample_292": [
        "minimumSteps(s = \"1010\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"011\")",
        "minimumSteps(s = \"1011\")",
        "minimumSteps(s = \"11100\")",
        "minimumSteps(s = \"010110\")",
        "minimumSteps(\"1001\")",
        "minimumSteps(s = \"0100111\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [3, 1, 4, 1, 5])",
        "alternatingSubarray(nums = [1, 1, 0, 1, 0, 1])",
        "alternatingSubarray(nums = [2, 1, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 5, 2, 4, 7])",
        "alternatingSubarray(nums = [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1])",
        "alternatingSubarray(nums = [1,1,3,3,1,1])",
        "alternatingSubarray(nums = [5, 3, 2, 1, 4, 2])",
        "alternatingSubarray(nums = [5, 2, 4, 3, 1, 5, 5])",
        "alternatingSubarray(nums = [4, 8, 11, 3, 10, 12, 14, 9, 5, 14, 15, 12, 6, 3, 11, 9, 7, 4, 12, 8, 9, 6, 4, 9, 8, 5, 2, 12, 14, 13, 12, 10, 11, 10, 8, 6, 11, 8, 4, 7, 4, 10, 10, 5, 8, 10, 6, 10, 12, 5, 14, 10, 8, 6, 14, 9, 12, 14, 7, 11, 12, 11, 7, 6, 9, 8, 5, 12, 9, 6, 11, 13, 11, 12, 14, 14, 8, 11, 7, 5, 11, 11, 5, 7, 9, 12, 5, 12, 9, 10, 11, 12, 10, 5, 11, 9, 11, 6, 9, 10, 14, 11, 7, 7, 11, 6, 11, 5, 11, 11, 5, 7, 7, 11, 6, 9, 12, 5, 14, 9, 12, 14, 7, 11, 12, 11, 7, 6, 9, 8, 5, 12, 9, 6, 11, 13, 11, 12, 14, 14, 8, 11, 7, 5, 11, 11, 5, 7, 9, 12, 5, 12, 9, 10, 11, 12, 10, 5, 11, 9,"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2, 3], moveTo = [2, 3, 1])",
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2], moveTo = [4,5])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 2], moveTo = [4, 5])",
        "relocateMarbles(nums = [1,2,3,4,5,6], moveFrom = [1,3,5], moveTo = [3,4,5])",
        "relocateMarbles(nums = [1, 3, 2, 4, 5], moveFrom = [1, 4], moveTo = [4, 1])",
        "relocateMarbles(nums = [2, 5, 4, 3, 1], moveFrom = [1, 3, 4], moveTo = [4, 3, 2])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 2, 7], moveTo = [2, 3, 4])",
        "relocateMarbles(nums = [4, 3, 9, 8, 2, 1], moveFrom = [1, 2, 3], moveTo = [3, 1, 2])",
        "relocateMarbles(nums = [2, 3, 1, 2, 4, 1], moveFrom = [3, 1, 5], moveTo = [1, 4, 3])",
        "relocateMarbles(nums = [1,1,2,3,3,3,5], moveFrom = [1,2], moveTo = [4,5])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [3, 1, 4, 2])",
        "maximumTripletValue(nums = [4, 2, 3, 1])",
        "maximumTripletValue(nums = [5, 5, 6, 6])",
        "maximumTripletValue(nums = [-1, 3, 5, 7, 0])",
        "maximumTripletValue(nums = [2, 1, 3, 4, 10, 5])",
        "maximumTripletValue([1000, -1000, 4])",
        "maximumTripletValue(nums = [7, 2, 4, 5, 3, 1])",
        "maximumTripletValue(nums = [3, 2, -1, 5, 2, 5])"
    ],
    "sample_273": [
        "findChampion(grid = [[1, 1, 0], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1,1,1],[0,0,0],[1,1,1]])",
        "findChampion(grid = [[1,1,1],[0,0,0],[0,0,0]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]])",
        "findChampion([[0,0,0], [0,1,1], [0,1,1]])",
        "findChampion(grid = [[1,1,0,0,1], [1,1,0,1,1], [0,0,0,0,1], [1,1,0,0,1], [1,1,0,1,1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 0])",
        "minSum(nums1 = [0, 0, 0, 0], nums2 = [0, 0, 0, 0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 3, 3])",
        "minSum(nums1 = [1, 3, 5], nums2 = [2, 6, 9])",
        "minSum(nums1 = [1, 3, 5, 7, 9], nums2 = [1, 3, 5, 7, 9])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 5, 6])",
        "minSum(nums1 = [1, 0], nums2 = [1, 3, 1])",
        "minSum(nums1 = [0, 2, 5, 7], nums2 = [1, 1, 3, 3])",
        "minSum(nums1 = [5, 9, 3, 12, 6], nums2 = [12, 11, 6, 4, 8])",
        "minSum(nums1 = [1, 3, 4, 5, 8, 9, 12, 16], nums2 = [3, 5, 8, 10, 11, 12, 15, 18])"
    ],
    "sample_294": [
        "minimumSteps(s = \"0101\")",
        "minimumSteps(\"101\")",
        "minimumSteps(s = \"10111\")",
        "minimumSteps(s = \"011011\")",
        "minimumSteps(s = \"0101010\")",
        "minimumSteps(s = \"110101\")",
        "minimumSteps(s = \"1011101\")",
        "minimumSteps(\"001011\")",
        "minimumSteps(s = \"1010001\")",
        "minimumSteps(\"111010\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0]])",
        "findChampion(grid = [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0]])",
        "findChampion(grid = [[1,0,0,0],[0,0,0,1],[0,0,1,0],[1,0,0,0]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 1, 0, 1], [0, 1, 0, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0, 0],\n                            [0, 1, 0, 0, 0],\n                            [0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0,0,0,1,0,0,0,0], [0,0,0,1,0,0,0,0], [0,0,1,1,1,0,0,0], [0,1,1,1,1,0,0,0], [1,1,1,1,1,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,3,1,4,1,3,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [1,0,1])",
        "minGroupsForValidAssignment(nums = [1,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [2,2,2,2,5,5,5,5,5,5,5,5,5])",
        "minGroupsForValidAssignment([1,2,3,4,3,4,2,1])",
        "minGroupsForValidAssignment(nums = [5,5,4,3,2,2,2,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [15, 10, 9, 4, 4, 4, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1], nums2 = [2])",
        "minSum(nums1 = [1, 1, 0], nums2 = [1, 1, 1])",
        "minSum(nums1 = [3, 1], nums2 = [2, 2])",
        "minSum(nums1 = [0, 0, 0, 0, 0], nums2 = [0, 0, 0, 0, 0])",
        "minSum(nums1 = [1,2,3], nums2 = [0,2,3])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [0, 4, 5])",
        "minSum(nums1 = [0, 0, 0], nums2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
        "minSum(nums1 = [2,3,4,5], nums2 = [5,6,7,8])",
        "minSum(nums1 = [2, 3, 0, 3], nums2 = [0, 0, 1])"
    ],
    "sample_317": [
        "buyChoco(prices = [1,2,4], money = 6)",
        "buyChoco(prices = [1,2,4], money = 6)",
        "buyChoco(prices = [1, 4, 7], money = 8)",
        "buyChoco(prices = [2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 4, 5], money = 8)",
        "buyChoco(prices = [1, 5, 3, 7], money = 10)",
        "buyChoco(prices = [5, 3, 2, 4, 2], money = 5)",
        "buyChoco(prices = [1,1,5], money = 6)",
        "buyChoco(prices = [3,1,5,6,7], money = 10)",
        "buyChoco(prices = [2,3,3,4,5,6,6,7,7], money = 10)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"beautifulsunset\", k = 4)",
        "beautifulSubstrings(s = \"beautifulsunrise\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooauu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioooauuuaeiou\", k = 3)",
        "beautifulSubstrings(s = \"abcdef\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaioooauuuaaaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"hackerhappy\", k = 5)",
        "beautifulSubstrings(s = \"ttle\", k = 3)",
        "beautifulSubstrings(s = \"kanng\", k = 3)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abcabcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcabc\")",
        "longestSemiRepetitiveSubstring(s = \"aabab\")",
        "longestSemiRepetitiveSubstring(s = \"s\")",
        "longestSemiRepetitiveSubstring(s = \"bbbabcbcb\")",
        "longestSemiRepetitiveSubstring(s = \"abababacdef\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabcab\")",
        "longestSemiRepetitiveSubstring(s = \"adaeae\")",
        "longestSemiRepetitiveSubstring(s = \"baababbaaa\")",
        "longestSemiRepetitiveSubstring(s = \"asdasdasdasdadadas\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 2)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 2, z = 1)",
        "longestString(x = 2, y = 4, z = 6)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 1, y = 3, z = 4)",
        "longestString(x = 1, y = 4, z = 3)",
        "longestString(x = 6, y = 4, z = 3)",
        "longestString(x = 2, y = 2, z = 0)"
    ],
    "sample_271": [
        "minSum(nums1 = [2], nums2 = [3,4])",
        "minSum(nums1 = [1,1,1,1], nums2 = [0,0,0,0])",
        "minSum(nums1 = [1,1,1], nums2 = [2,2,2])",
        "minSum(nums1 = [2,7,11,15], nums2 = [9,2,6,3])",
        "minSum(nums1 = [10, 20, 30], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 1, 4])",
        "minSum(nums1 = [4, 0, 0, 3, 2], nums2 = [4, 5, 0, 0, 3])",
        "minSum(nums1 = [0,3,0,3,0], nums2 = [0,3,0])",
        "minSum(nums1 = [10,10,5,10,10], nums2 = [20,10,10,10,10])",
        "minSum(nums1 = [3,3,3,2,1,1], nums2 = [1,1,2,3,3,3])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 2, y = 4, z = 6)",
        "longestString(x = 3, y = 2, z = 5)",
        "longestString(x = 3, y = 4, z = 3)",
        "longestString(x = 3, y = 4, z = 3)",
        "longestString(x = 3, y = 4, z = 4)",
        "longestString(x = 2, y = 1, z = 6)",
        "longestString(x = 5, y = 7, z = 9)",
        "longestString(x = 5, y = 5, z = 6)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"123456\", k = 3)",
        "shortestBeautifulSubstring(s = \"123456\", k = 3)",
        "shortestBeautifulSubstring(s = \"123456\", k = 3)",
        "shortestBeautifulSubstring(s = \"031204\", k = 5)",
        "shortestBeautifulSubstring(s = '02110', k = 2)",
        "shortestBeautifulSubstring(s = \"999999999\", k = 9)",
        "shortestBeautifulSubstring(s = \"9999999\", k = 1)",
        "shortestBeautifulSubstring(s = \"02102102102102102\", k = 2)",
        "shortestBeautifulSubstring(s = \"101000101\", k = 3)",
        "shortestBeautifulSubstring(s = \"8986786\", k = 8)"
    ],
    "sample_324": [
        "isFascinating(n = 6)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 111)",
        "isFascinating(n = 3)",
        "isFascinating(n = 24)",
        "isFascinating(n = 432)",
        "isFascinating(153)",
        "isFascinating(n = 531)",
        "isFascinating(n = 10203)",
        "isFascinating(136)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [5, 1, 1, 2, 7])",
        "minimumSum(nums = [4, 6, 2, 5])",
        "minimumSum(nums = [4, 6, 2, 2, 7, 8])",
        "minimumSum(nums = [100, 100, 100])",
        "minimumSum(nums = [123, 45, 678])",
        "minimumSum(nums = [8, 9, 7, 10])",
        "minimumSum(nums = [6, 4, 4, 6, 0])",
        "minimumSum(nums = [2, 5, 9, 6, 3, 2])"
    ],
    "sample_268": [
        "minSum(nums1 = [4, 1, 1, 1], nums2 = [4, 1, 1, 2])",
        "minSum(nums1 = [1,2,3], nums2 = [1,5,5])",
        "minSum(nums1 = [4, 9, 2], nums2 = [3, 4, 6])",
        "minSum(nums1 = [1, 2, 0, 0, 0], nums2 = [1, 3, 0, 0, 0])",
        "minSum(nums1 = [5, 3, 6, 7], nums2 = [1, 4, 8])",
        "minSum(nums1 = [0,10,20,30,40,50], nums2 = [1,2,3,4,5,0])",
        "minSum(nums1 = [5, 6, 7, 8], nums2 = [1, 5, 0, 3, 6])",
        "minSum(nums1 = [0,1,1,1,1,0,1,0,0,0,1], nums2 = [1,1,1,0,1,1,1,1,1,1,0])",
        "minSum(nums1 = [0, 1, 3, 3, 4, 0], nums2 = [0, 5, 3, 4, 4, 0])",
        "minSum(nums1 = [1, 5, 6, 0, 0, 0, 1], nums2 = [2, 4, 0, 5, 6, 2, 2])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"123\", s2 = \"123\", s3 = \"123\")",
        "findMinimumOperations(s1 = \"AB\", s2 = \"A\", s3 = \"A\")",
        "findMinimumOperations(s1 = \"cba\", s2 = \"dce\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"abce\", s2 = \"abe\", s3 = \"abec\")",
        "findMinimumOperations(s1 = \"shopping\", s2 = \"shopping\", s3 = \"shopping\")",
        "findMinimumOperations(s1 = \"cce\", s2 = \"cce\", s3 = \"zzcce\")",
        "findMinimumOperations(s1 = \"nano\", s2 = \"coffee\", s3 = \"coder\")",
        "findMinimumOperations(s1 = \"qbskq\", s2 = \"yklkq\", s3 = \"szjkq\")"
    ],
    "sample_321": [
        "maxStrength(nums = [2, 3, -2, 4, -1])",
        "maxStrength(nums = [1,-2,-3,4])",
        "maxStrength(nums = [2, 0, 2, 2, 0])",
        "maxStrength(nums = [2, -3, 4, -5])",
        "maxStrength(nums = [1, 2, -3, -4])",
        "maxStrength(nums = [2, -4, -4, 5, 1])",
        "maxStrength(nums = [3, -1, -2, 2])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6, 7, 8, -2, -2])",
        "maxStrength(nums = [5, 2, 1, 2, 2, -2, 3, 1])",
        "maxStrength(nums = [-10,-10,-10,-10,-10,-10,0,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1,2,3,4,5], moveFrom = [1,2,3], moveTo = [3,4,5])",
        "relocateMarbles(nums = [2, 1], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [2, 5, 4, 3, 1], moveFrom = [1, 2, 2], moveTo = [2, 2, 1])",
        "relocateMarbles(nums = [1,2,1,2], moveFrom = [1,2,1,2], moveTo = [1,2,1,2])",
        "relocateMarbles(nums = [2, 5, 7], moveFrom = [0, 1], moveTo = [0, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [4, 2, 1], moveTo = [2, 4, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8], moveFrom = [1, 2, 3, 4], moveTo = [4, 5, 6, 7])",
        "relocateMarbles(nums = [2, 7, 9, 6], moveFrom = [0, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [3, 5, 6, 2, 1, 8], moveFrom = [0, 1, 1], moveTo = [1, 0, 2])",
        "relocateMarbles(nums = [4,3,1,2,6], moveFrom = [0,1,4], moveTo = [1,2,3])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 1, 3, 4, 2], moveFrom = [1, 3, 2], moveTo = [3, 2, 1])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 6], moveTo = [3, 4, 7])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [5, 6, 8], moveTo = [3, 4, 7])",
        "relocateMarbles(nums = [6,5,9,8], moveFrom = [0,1,2], moveTo = [1,2,3])",
        "relocateMarbles(nums = [6,7,5,4,3,2,1], moveFrom = [7,6], moveTo = [5,6])",
        "relocateMarbles(nums = [3, 9, 6, 8, 5, 10, 2], moveFrom = [10, 5], moveTo = [8, 9])",
        "relocateMarbles(nums = [3, 1, 2, 3, 6, 4, 3, 5, 9, 8], moveFrom = [2, 6, 4], moveTo = [3, 5, 2])",
        "relocateMarbles(nums = [5,5,10,10,10,10,15], moveFrom = [10, 10, 10, 5, 5, 5, 15], moveTo = [5, 6, 8, 9, 10, 11, 12])",
        "relocateMarbles(nums = [8, 4, 6, 6, 5, 2, 1, 5, 9, 9, 5], moveFrom = [6, 2, 3], moveTo = [1, 4, 9])",
        "relocateMarbles(nums = [6,8,6,4,3,2,6,8,6,7], moveFrom = [0,4,2,5], moveTo = [1,3,3,1,3,3,3,3,3,3])"
    ],
    "sample_318": [
        "buyChoco(prices = [1,2,4], money = 4)",
        "buyChoco(prices = [1, 3, 2], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [2, 3, 1, 5], money = 4)",
        "buyChoco(prices = [2, 3, 5], money = 4)",
        "buyChoco(prices = [5, 2, 4, 3], money = 7)",
        "buyChoco(prices = [5, 1, 4], money = 10)",
        "buyChoco(prices = [5, 10, 20], money = 32)",
        "buyChoco(prices = [1, 1, 2, 3, 4, 6, 8, 10], money = 11)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(nums = [[0, 1, 2], [3, 4, 5], [6, 7, 8]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1, 1], [1, 1], [1, 1]])",
        "matrixSum(nums = [[4], [1], [3]])",
        "matrixSum(nums = [[1,3,5,7],[10,11,12,13],[17,18,19,20]])",
        "matrixSum(nums = [[1,2,3,4], [3,3,3,3], [1,2,3,4], [1,1,1,1]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1,2,3], money = 5)",
        "buyChoco(prices = [2, 3, 4, 5], money = 10)",
        "buyChoco(prices = [2,3,5], money = 10)",
        "buyChoco(prices = [1, 3, 2, 5], money = 4)",
        "buyChoco(prices = [2, 3, 10], money = 3)",
        "buyChoco(prices = [6, 6], money = 6)",
        "buyChoco(prices = [20, 40, 15], money = 100)",
        "buyChoco(prices = [1, 5, 8, 10, 100], money = 14)",
        "buyChoco(prices = [5, 4, 10, 4, 5, 3, 15, 13], money = 15)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,1,1,1,1])",
        "minimumSum(nums = [1,1,1,1])",
        "minimumSum(nums = [1, 1, 10, 10])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [10, 20, 20])",
        "minimumSum(nums = [2, 2, 1, 3, 1])",
        "minimumSum(nums = [3,1,5,4,2])",
        "minimumSum(nums = [5,4,3,2,1,2,2,2])",
        "minimumSum([2,2,3,2,2,3,2,2,2])",
        "minimumSum(nums = [6, 6, 3, 1, 1, 5, 6])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [3, 1, 4, 1, 5])",
        "alternatingSubarray(nums = [1,2,3,1,2,3,2,1])",
        "alternatingSubarray(nums = [1,1,2,1,2,1,2,1])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1, 2, 3, 2, 1, 1, 3])",
        "alternatingSubarray(nums = [1, 1, 1, 2, 2, 2, 4, 4, 4])",
        "alternatingSubarray(nums = [1, 2, 4, 1, 3, 5, 3])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 3, 1, 3, 2, 3, 1, 2])",
        "alternatingSubarray(nums = [1,1,1,2,3,3,2,2,2,2,2,2,2,3,3])",
        "alternatingSubarray(nums = [1,2,1,1,2,2,1,2,2,1,2,1,2,1,1,2,2,1,1,2,2,1,2,2,1,1,2,2,1,1,2,2,1,2,1,1,2,1,2,1,2,2,1,1,2,1,2,1,2,2,1,2,1,2,2,1,2,2,1,1,2,2,1,2,2,1,2,1,1,2,2,1,1,2,2,1,1,2,2,1,2,1,2,2,1,1,2,1,1,2,2,1,1,2,2,1,2,1,2,2,1,1,2,2,1,1,2,2,1,2,1,2,1,2,1,1,2,2,1,2,1,2,2,1,2,2,1,2,1,2,2,1,1,2,1,2,1,2,2,1,2,2,1,2,2,1,1,2,1,1,2,2,1,2,1,1,2,1,1,2,1,1,2,1,2,2,1,2,2,1,1,2,2,1,2,2,1,2,2,1,2,1,1,2,2,1,1,2,2,1,2,2,1,2,2,1,2,2,1,2,1,2,2,1,1,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,1,1,2,1,2,2,1,1,2,2,1,2,1,1,2,2,1,1,2,2,1,2,1,2,1,2,2,1,2,2,1,2,1,2,2,1,2,2,1,1,2,1,1,2,1,2,2,1,1,2,2,1,2,1,1,2,1,2,2,1,2,2,"
    ],
    "sample_311": [
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[0, 1, 1], [1, 0, 1]])",
        "matrixSum(nums = [[1, 0, 1], [0, 1, 0], [1, 1, 0]])",
        "matrixSum([[0, 0], [0, 0]])",
        "matrixSum(nums = [[1,1,1],[2,2,2],[3,3,3]])",
        "matrixSum(nums = [[1, 1, 1], [0, 0, 1]])",
        "matrixSum(nums = [[2], [3], [4], [5]])",
        "matrixSum(nums = [[1,1,0],[1,0,1],[0,1,1]])",
        "matrixSum(nums = [[1,0,1,2,1],[2,0,0,2,4],[3,2,1,2,5],[4,2,0,2,3],[5,2,4,3,1]])",
        "matrixSum(nums = [[3,2], [1,3], [2,3]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2], money = 3)",
        "buyChoco(a = [1, 3], money = 4)",
        "buyChoco(a = [1, 2], money = 10)",
        "buyChoco(a = [2, 1], money = 4)",
        "buyChoco(a = [1, 1], money = 1)",
        "buyChoco(a = [1, 2, 3, 4, 5, 6], money = 10)",
        "buyChoco(a = [3, 1], money = 10)",
        "buyChoco(a = [2, 5, 1, 6], money = 9)",
        "buyChoco(a = [3, 5, 7], money = 7)",
        "buyChoco(a = [1, 4, 6, 10], money = 12)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1])",
        "minGroupsForValidAssignment(nums = [4, 3, 4, 1, 2])",
        "minGroupsForValidAssignment(nums = [4,3,3,2,7,1,3,4,7,2])",
        "minGroupsForValidAssignment([3, 6, 4, 5])",
        "minGroupsForValidAssignment(nums = [18, 20, 16, 28, 28, 20, 16, 19])",
        "minGroupsForValidAssignment(nums = [20,30,40,50,60,10,120,125,150,32,35,38,52,55,63,66,69])"
    ],
    "sample_276": [
        "findChampion(grid = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 0, 1], [1, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0]])",
        "findChampion(grid = [[2, 1, 2], [0, 0, 2], [1, 0, 1]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0],\n                    [0, 1, 0, 0],\n                    [0, 0, 0, 1],\n                    [0, 0, 1, 0]])",
        "findChampion(grid = [\n[0, 1, 0, 1, 0],\n[0, 1, 0, 0, 0],\n[0, 0, 1, 0, 0],\n[0, 0, 1, 1, 0],\n[0, 0, 0, 0, 1],\n])",
        "findChampion(grid = [[0, 1, 1, 1, 0, 0, 0],\n                            [0, 1, 0, 1, 0, 0, 0],\n                            [0, 1, 0, 0, 0, 0, 0],\n                            [0, 1, 0, 1, 1, 0, 0],\n                            [0, 1, 0, 1, 0, 0, 0],\n                            [0, 0, 0, 1, 1, 1, 0],\n                            [0, 0, 0, 0, 0, 0, 0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 1, 1, 1])",
        "maxStrength(nums = [2, 4, 7, 1, 5, 8])",
        "maxStrength(nums = [2, 2, 3])",
        "maxStrength(nums = [2, 3, 1, 3, 2])",
        "maxStrength(nums = [8, 6, 1, 3, 4])",
        "maxStrength(nums = [5, 7, 5, 2, 7, 4])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"a\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"zyx\", \"wvu\", \"tsr\", \"qpo\", \"mnk\"])",
        "minimizeConcatenatedLength(words = [\"code\", \"abc\", \"xyz\"])",
        "minimizeConcatenatedLength(words = [\"car\", \"race\", \"care\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"mn\", \"lax\"])",
        "minimizeConcatenatedLength([\"ba\", \"bc\", \"ac\", \"bc\", \"bc\", \"ac\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"babca\", \"bbx\", \"baaxy\"])",
        "minimizeConcatenatedLength(words = [\"motivate\", \"never\", \"say\", \"give\", \"up\"])",
        "minimizeConcatenatedLength(words = [\"ux\", \"fzg\", \"tk\", \"p\", \"qj\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"fghij\", s3 = \"klmno\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"bc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"aba\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"bcdf\", s3 = \"abdg\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bde\", s3 = \"cde\")",
        "findMinimumOperations(s1 = \"abacb\", s2 = \"cbbaca\", s3 = \"bacabc\")",
        "findMinimumOperations(s1 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", s3 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\")",
        "findMinimumOperations(s1 = \"123456\", s2 = \"12444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 1, 2, 1, 1])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 1, 2])",
        "alternatingSubarray(nums = [2, 1, 2, 2, 2])",
        "alternatingSubarray(nums = [1,2,1,1])",
        "alternatingSubarray(nums = [2, 3, 1, 2, 2, 2, 3])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 3, 2, 1, 2, 1])",
        "alternatingSubarray(nums = [2, 2, 1, 2, 1, 1, 2, 1])",
        "alternatingSubarray(nums = [1,2,3,3,2,1,5,4])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 2, 1, 4, 2, 3])",
        "alternatingSubarray(nums = [1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1])"
    ],
    "sample_278": [
        "findChampion(grid = [[0, 1], [1, 0]])",
        "findChampion(grid = [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 1, 1], [0, 0, 1, 1]])",
        "findChampion(grid = [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0], [1, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1]])",
        "findChampion(grid = [[1, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1,0,0,0,0],\n                            [1,1,1,1,0],\n                            [1,0,0,0,0],\n                            [1,1,1,1,1],\n                            [1,1,1,1,1]])",
        "findChampion(grid = [[1, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 1, 0, 1]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"Name: John Doe\", \"Age: 30\", \"Gender: Male\", \"Name: Mary Major\", \"Age: 55\", \"Gender: Female\", \"Name: Richard Miles\", \"Age: 60\", \"Gender: Male\"])",
        "countSeniors(details = [\"14014014\", \"01010101\", \"40404040\"])",
        "countSeniors(details = [\"F 31 Y\", \"M 59 Y\", \"M 70 Y\", \"M 19 Y\"])",
        "countSeniors(details = [\"A1101230101B\", \"B1101230101C\", \"B1101230101D\"])",
        "countSeniors(details = [\"[20, 44, 32]\", \"[32, 22, 19]\", \"[24, 18, 19]\"])",
        "countSeniors(details = [\"Bill Smith 1946-03-22\", \"Irma Jackson 1967-05-02\", \"Beatrice Harris 1983-05-24\"])",
        "countSeniors(details = [\"77-50197 S Us-111 NW, WA, USA\", \"78-50197 S Us-111 NW, WA, USA\", \"80-50197 S Us-111 NW, WA, USA\"])",
        "countSeniors(details = [\"73342026202\",\"73542026202\",\"73272026202\",\"73282026202\"])",
        "countSeniors(details = [\"Paul 12/09/1967\",\"Amy 2/4/1944\",\"Ken 11/6/1950\",\"Susan 1/1/1960\"])",
        "countSeniors(details = [\"MI:67 195 24 120\", \"MC:44 167 25 90\", \"MC:23 185 26 130\", \"MI:58 139 31 180\", \"MI:23 161 26 100\", \"MC:31 152 37 160\", \"MI:64 148 26 190\", \"MC:32 121 26 150\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k = 4)",
        "beautifulSubstrings(s = \"aeiaaioaaaaeiiiiooouuuooaauuaeiu\", k = 1)",
        "beautifulSubstrings(s = \"aaaa\", k = 2)",
        "beautifulSubstrings(s = \"xyaeou\", k = 2)",
        "beautifulSubstrings(s = \"aeiouaeiou\", k = 2)",
        "beautifulSubstrings(s = \"aecodbaefaa\", k = 2)",
        "beautifulSubstrings(s = \"aeciloaaa\", k = 2)",
        "beautifulSubstrings(s = \"aaaaaaeouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouae"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"1010\", k = 2)",
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 1)",
        "shortestBeautifulSubstring(s = \"1110\", k = 1)",
        "shortestBeautifulSubstring(s = \"1111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111\", k = 3)",
        "shortestBeautifulSubstring(s = '011', k = 2)",
        "shortestBeautifulSubstring(s = \"101101\", k = 2)",
        "shortestBeautifulSubstring(s = \"010000\", k = 2)",
        "shortestBeautifulSubstring(s = \"1001011011101001011\", k = 3)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"a\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"hello\", \"world\"])",
        "minimizeConcatenatedLength(words = [\"z\", \"z\", \"z\"])",
        "minimizeConcatenatedLength(words = [\"cab\", \"cab\", \"aaa\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"dog\", \"pig\"])",
        "minimizeConcatenatedLength(words = [\"abcd\", \"cdef\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"abbc\", \"abca\", \"abc\"])",
        "minimizeConcatenatedLength(words = [\"cat\", \"do\", \"god\", \"dog\"])",
        "minimizeConcatenatedLength(words = [\"nla\", \"nuk\", \"ywh\", \"abd\", \"fyh\", \"pkk\", \"uhf\"])"
    ],
    "sample_327": [
        "isFascinating(n = 3)",
        "isFascinating(n = 1)",
        "isFascinating(n = 2)",
        "isFascinating(n = 2)",
        "isFascinating(n = 145)",
        "isFascinating(n = 4)",
        "isFascinating(n = 10)",
        "isFascinating(n = 12)",
        "isFascinating(n = 192)",
        "isFascinating(n = 12345)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1], [2], [3]])",
        "matrixSum(nums = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]])",
        "matrixSum(nums = [[1,2], [3,4], [5,6]])",
        "matrixSum(nums = [[1, 0, 1], [0, 0, 0], [1, 1, 1]])",
        "matrixSum(nums = [[1, 1], [0, 1], [1, 0]])",
        "matrixSum([[1,1],[1,1]])",
        "matrixSum(nums = [[4, 5], [1, 2], [1, 3]])",
        "matrixSum(nums = [[2, 3, 4], [2, 3, 4], [1, 1, 1]])",
        "matrixSum(nums = [[9, 12, 10], [4, 8, 10], [6, 8, 12]])"
    ],
    "sample_326": [
        "isFascinating(n = 145)",
        "isFascinating(n = 1458)",
        "isFascinating(n = 123)",
        "isFascinating(n = 1)",
        "isFascinating(n = 3797)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 121)",
        "isFascinating(370)",
        "isFascinating(n = 555)",
        "isFascinating(n = 12121)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 1, 0], [1, 1, 1], [1, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 0, 0, 0], [0, 1, 1, 0], [1, 1, 0, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 1, 1, 0], [0, 0, 1, 1], [0, 0, 1, 1]])",
        "findChampion(grid = [[2,0,0], [0,1,0], [1,1,1]])",
        "findChampion(grid = [[1, 1, 1, 1, 1], [0, 1, 1, 0, 1], [1, 1, 0, 1, 1], [1, 1, 1, 1, 0], [1, 1, 1, 1, 1]])",
        "findChampion(grid = [[0,0,0,0,1,0,0], [0,1,1,0,1,1,0], [0,1,1,0,1,1,1], [0,1,0,0,1,0,0], [1,1,0,0,1,0,0], [0,1,0,0,1,1,0], [0,1,1,0,0,1,0]])"
    ],
    "sample_260": [
        "minimumSum(nums = [3, 1, 2, 4, 3])",
        "minimumSum(nums = [1, 2, 3])",
        "minimumSum(nums = [3,1,2,4])",
        "minimumSum(nums = [10, 20, 30, 40, 50])",
        "minimumSum(nums = [4, 0, 3, 3, 1, 4])",
        "minimumSum(nums = [3, 2, 1])",
        "minimumSum(nums = [6, 4, 5, 3])",
        "minimumSum(nums = [1, 1, 3, 1])",
        "minimumSum(nums = [10, 20, 15, 4, 5, 13])",
        "minimumSum(nums = [6, 5, 6, 4, 5, 2, 4, 6, 4])"
    ],
    "sample_322": [
        "isFascinating(n = 1)",
        "isFascinating(n = 2)",
        "isFascinating(n = 9)",
        "isFascinating(n = 5)",
        "isFascinating(n = 1458)",
        "isFascinating(n = 1000)",
        "isFascinating(n = 312)",
        "isFascinating(n = 195)",
        "isFascinating(n = 92)",
        "isFascinating(n = 911)"
    ],
    "sample_248": [
        "minOperations(s1 = \"1100\", s2 = \"1010\", x = 3)",
        "minOperations(s1 = \"101\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"111\", x = 2)",
        "minOperations(s1 = \"010\", s2 = \"001\", x = 1)",
        "minOperations(s1 = \"101\", s2 = \"101\", x = 3)",
        "minOperations(s1 = \"1100\", s2 = \"0011\", x = 3)",
        "minOperations(s1 = \"ab\", s2 = \"a\", x = 2)",
        "minOperations(s1 = \"001\", s2 = \"100\", x = 5)",
        "minOperations(s1 = \"00100\", s2 = \"01000\", x = 3)",
        "minOperations(s1 = \"ab\", s2 = \"ac\", x = 100)"
    ],
    "sample_342": [
        "longestString(x = 2, y = 3, z = 4)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 2, y = 2, z = 8)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 1, y = 3, z = 2)",
        "longestString(x = 3, y = 5, z = 1)",
        "longestString(x = 4, y = 3, z = 4)",
        "longestString(x = 10, y = 10, z = 10)",
        "longestString(x = 2, y = 5, z = 10)",
        "longestString(x = 8, y = 9, z = 8)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [0, 1], moveTo = [1, 0])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [1, 2], moveTo = [3, 4])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [2, 3], moveTo = [3, 2])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 1, 2], moveTo = [1, 2, 0])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [0, 1], moveTo = [1, 1])",
        "relocateMarbles(nums = [4, 5, 6, 7], moveFrom = [1, 2], moveTo = [3, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6], moveFrom = [1, 4, 5], moveTo = [3, 2, 2])",
        "relocateMarbles(nums = [4, 8, 7, 5, 3, 9, 2], moveFrom = [0, 2, 5], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [5,6,9,7,8,10], moveFrom = [5,6,9], moveTo = [6,9,8])",
        "relocateMarbles(nums = [9, 1, 6, 6, 8, 3, 5, 7, 4, 2], moveFrom = [1, 2, 3, 4], moveTo = [2, 1, 2, 3])"
    ],
    "sample_306": [
        "countSeniors(details = [\"ID-000000000\", \"ID-000000011\", \"ID-000000111\", \"ID-000000222\"])",
        "countSeniors(details = [\"name=john age=42 sex=m\", \"name=jane age=56 sex=f\", \"name=dave age=70 sex=m\"])",
        "countSeniors(details = [\"Name:Vidya,Age:70,Address:Mumbai\", \"Name:Sam,Age:63,Address:NY\", \"Name:Tom,Age:65,Address:LA\"])",
        "countSeniors(details = [\"ID: 100000,  Name: John Doe, Gender: Male, Age: 32\", \"ID: 100001,  Name: Jane Doe, Gender: Female, Age: 65\", \"ID: 100002,  Name: Jack Doe, Gender: Male, Age: 33\"])",
        "countSeniors(details = [\"Albert Einstein was born on 12/14/1879\", \"Isaac Newton was born on 01/04/1747\", \"The oldest person currently living is 116 years old and is Margaret Hamilton\"])",
        "countSeniors(details = [\"Mary 30 years\", \"John 29 years\", \"Micheal 60 years\", \"Fenil 50 years\", \"Denil 61 years\"])",
        "countSeniors(details = [\"ID#185  first#Bill  last#Billy  street#123  city#NY   state#NY   zip#10010   phone#555-1234  \", \"ID#257  first#Jill  last#Jill  street#456  city#NJ   state#NJ   zip#10010   phone#555-2345  \"])",
        "countSeniors(details = [\"ID 90811120\", \"ID 98222000\", \"ID 58921100\", \"ID 32101001\"])",
        "countSeniors(details = [\"f name lname DOB SS# mdlc pcn drg 50.0 000000 5 62 21 2 0 1 1 0 20180101 1 0 0\", \"f name lname DOB SS# mdlc pcn drg 50.0 000000 5 62 21 2 0 1 1 0 20180101 1 0 0\"])",
        "countSeniors(details = [\"Patty Wilson:333-995-4104:M\", \"Pete Wilson:342-064-0845:M\", \"Wendy Hall:466-265-9901:F\", \"Drew Hall:665-883-9987:F\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"Name: John Doe, Age: 44\", \"Name: John Smith, Age: 65\", \"Name: Jane Doe, Age: 62\"])",
        "countSeniors(details = [\"110012300\", \"120013300\", \"130014300\", \"140015300\", \"150016300\"])",
        "countSeniors(details=[\"CN=John Smith,OU=Users,DC=corp,DC=com\", \"CN=Mary Smith,OU=Users,DC=corp,DC=com\", \"CN=Bob Smith,OU=Users,DC=corp,DC=com\", \"CN=James Smith,OU=Users,DC=corp,DC=com\"])",
        "countSeniors(details = [\"10-12-2012\", \"10-12-2013\", \"10-12-2014\", \"09-12-2012\", \"09-12-2013\", \"09-12-2014\"])",
        "countSeniors(details = ['M65,500', 'F67,900', 'M40,200'])",
        "countSeniors(details = [\"Johnson 74\", \"Walsh 50\", \"Davolio 64\", \"Brown 37\", \"Lewis 59\"])",
        "countSeniors(details = [\"5432214567\", \"6545432167\", \"2543232545\", \"6543232543\", \"5432167654\"])",
        "countSeniors(details = [\"73232\", \"63009\", \"11101\", \"34810\", \"10000\", \"68336\"])",
        "countSeniors(details= [\"DVJ\", \"14\", \"PMB\", \"66\", \"WZC\", \"50\", \"JSR\", \"59\"])",
        "countSeniors(details = [\"90 75 82 51\", \"54 72 67 98\", \"45 51 59 69\", \"36 83 72 66\", \"76 87 46 76\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 7], moveTo = [3, 7, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3], moveTo = [2, 4])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 5, 8], moveTo = [5, 6, 8])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [2, 4, 7], moveTo = [2, 4, 7])",
        "relocateMarbles(nums = [5, 3, 6, 1, 8, 7, 2, 4], moveFrom = [1, 5, 8], moveTo = [4, 7, 3])",
        "relocateMarbles(nums = [5, 1, 6, 1, 9, 4], moveFrom = [1, 4], moveTo = [4, 1])",
        "relocateMarbles(nums = [5, 1, 4, 3, 2, 8, 9], moveFrom = [5, 4], moveTo = [4, 5])",
        "relocateMarbles(nums = [2, 5, 4, 3, 1, 6, 7, 8], moveFrom = [1, 4, 7], moveTo = [4, 7, 1])",
        "relocateMarbles(nums = [5, 2, 3, 8, 4, 6, 7], moveFrom = [0, 5], moveTo = [4, 1])",
        "relocateMarbles(nums = [5, 5, 2, 1, 4, 1, 4, 2, 9], moveFrom = [0, 7], moveTo = [1, 6])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"def\", s3 = \"ghi\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"ade\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"efgh\", s3 = \"ijkl\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bde\", s3 = \"fgh\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"123\", s2 = \"234\", s3 = \"345\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bab\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"abac\", s2 = \"baca\", s3 = \"abac\")",
        "findMinimumOperations(s1=\"ace\", s2=\"bce\", s3=\"cde\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abcde\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abe\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ba\", s3 = \"abba\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"ab\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"mom\", s2 = \"mom\", s3 = \"mom\")",
        "findMinimumOperations(s1 = \"abcc\", s2 = \"dbbca\", s3 = \"aecbca\")",
        "findMinimumOperations(s1 = \"acb\", s2 = \"ddc\", s3 = \"acc\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"bcef\", s3 = \"ccdefe\")"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 4, 2])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [5, 2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [5, 2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])",
        "semiOrderedPermutation(nums = [2, 4, 6, 8, 1, 3, 5, 7])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 1, 3, 4, 1, 5])",
        "continuousSubarrays(a = [1, 2, 1, 3, 4, 1, 5])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 1, 2, 1, 2, 1, 2])",
        "continuousSubarrays(a = [1, 0, 1, 0, 1, 0, 1])",
        "continuousSubarrays(a = [1, 1, 1, 1, 0, 1, 1, 1])",
        "continuousSubarrays(a = [1,1,1,1,0,1,1,1,1])",
        "continuousSubarrays([0, 4, 4, 4, 4])",
        "continuousSubarrays(a = [1,2,1,2,1,2,2,2,1])",
        "continuousSubarrays(a = [3, 2, 2, 2, 5, 4, 5, 1, 2])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [2,2,2,2,2])",
        "continuousSubarrays(nums = [2,2,2,2,2])",
        "continuousSubarrays(nums = [2, 2, 2, 1, 2, 2, 1, 2, 2, 2])",
        "continuousSubarrays(nums = [2, 2, 2, 1, 2, 2, 1, 2, 2, 2])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 4])",
        "continuousSubarrays(nums = [1, 1, 2, 2, 3, 3])",
        "continuousSubarrays(nums = [1, 1, 2, 2, 1, 1])",
        "continuousSubarrays(nums = [1,1,2,2,3,3,4,4])",
        "continuousSubarrays(nums = [5, 5, 4, 4, 3, 3, 3, 2, 2, 1, 1, 1])",
        "continuousSubarrays(nums = [3, 1, 5, 3, 0, 3, 2, 3])"
    ],
    "sample_8": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 4, queries = [[1, 1], [1, 2], [1, 3], [1, 4], [4, 1], [4, 2], [4, 3], [4, 4], [2, 1], [2, 2], [2, 3], [2, 4], [3, 1], [3, 2], [3, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0,0],[4,3],[4,0],[2,1],[3,2],[0,3]])",
        "colorTheArray(n = 5, queries = [[0,0],[0,1],[1,2],[2,1],[3,0],[3,1],[4,0]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 3], [1, 2], [4, 4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [3, 1], [4, 3], [5, 4]])",
        "colorTheArray(n = 5, queries = [[0, 0], [4, 1], [4, 1], [2, 0], [1, 1], [2, 1], [2, 1], [3, 1], [0, 0], [3, 1], [0, 0]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [1, 2], [3, 2], [2, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [3, 2], [4, 3], [1, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 3], [4, 3], [2, 2], [2, 1], [4, 1], [3, 2], [4, 2], [0, 2]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [4,2,3,0,3,1,2], target = 3)",
        "maximumJumps(nums = [10,16,3,7,15], target = 5)",
        "maximumJumps(nums = [1,1,1,1,1,1,1,1,1], target = 3)",
        "maximumJumps(nums = [7,6,7,1,10], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], target = 10)",
        "maximumJumps(nums = [1,2,3,4,5,6,7,8,9,10], target = 8)",
        "maximumJumps(nums = [1,4,3,2,5,2,3,7], target = 0)",
        "maximumJumps(nums = [5,1,1,1,1], target = 2)",
        "maximumJumps(nums = [1,5,6,1,1,0,5,6,1,0,1,1,0,1,1,1], target = 10)",
        "maximumJumps(nums = [2,6,5,4,2,0,1,2], target = 2)"
    ],
    "sample_22": [
        "minLength(s = \"AABCD\")",
        "minLength(s = \"ABACD\")",
        "minLength(s = \"ABBCD\")",
        "minLength(s = \"AAABCD\")",
        "minLength(s = \"AABCDDD\")",
        "minLength(s = \"AACDBCD\")",
        "minLength(s = \"ABAAABBCDCDD\")",
        "minLength(s = \"ABABCDC\")",
        "minLength(\"ABCDABABD\")",
        "minLength(s = \"ABCDABABABBBBCABD\")"
    ],
    "sample_7": [
        "colorTheArray(n = 2, queries = [[1, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [4, 2], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 2], [4, 3]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 4], [2, 4], [1, 1]])",
        "colorTheArray(n = 6, queries = [[3,1],[5,2],[4,3],[5,1],[2,2],[1,2],[2,1],[2,2],[3,2],[1,2]])",
        "colorTheArray(n = 4, queries = [[1, 3], [2, 0], [3, 1], [2, 1], [2, 2], [3, 0], [1, 1], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [3, 2], [4, 1], [4, 3], [1, 3], [2, 2], [3, 1], [2, 1], [2, 3], [4, 2], [5, 1], [5, 2]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 4]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 4], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [3, 3], [3, 3], [4, 3], [4, 3]])",
        "colorTheArray(n = 4, queries = [[0, 1], [2, 0], [0, 1], [2, 0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [3, 4], [4, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1, 3], [4, 3], [2, 1], [2, 2], [2, 2], [4, 1]])",
        "colorTheArray(n = 6, queries = [[0, 3], [3, 4], [2, 5], [2, 2]])",
        "colorTheArray(4, queries = [[2, 0], [3, 1], [2, 2], [3, 0], [2, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [1, 3], [1, 4], [4, 1], [4, 2], [3, 4], [2, 1], [2, 2], [2, 3], [2, 4], [4, 3], [4, 4]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [3,1,2])",
        "semiOrderedPermutation(nums = [1,2,3])",
        "semiOrderedPermutation(nums = [4,3,1,2])",
        "semiOrderedPermutation(nums = [4,1,2])",
        "semiOrderedPermutation(nums = [1,4,2,3,5])",
        "semiOrderedPermutation(nums = [2,3,1,2,3,1])",
        "semiOrderedPermutation(nums = [2,3,1,3,2])",
        "semiOrderedPermutation(nums = [2,3,4,1,2])",
        "semiOrderedPermutation(nums = [1,2,5,4,7,6,8])",
        "semiOrderedPermutation(nums = [3, 1, 1, 3, 3, 4, 5, 1])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 1, 3, 4], threshold = 3)",
        "longestAlternatingSubarray(nums = [1, 1, 1, 1, 1, 1, 1], threshold = 1)",
        "longestAlternatingSubarray(nums = [5, 4, 3, 4, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 1, 2, 1, 1, 2], threshold = 1)",
        "longestAlternatingSubarray(nums = [5, 4, 2, 5, 3, 4, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 4, 6, 8, 1, 5, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 10, 1, 1, 2, 3], threshold = 1)",
        "longestAlternatingSubarray(nums = [4, 2, 4, 6, 8, 6, 2, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [5, 1, 3, 2, 5, 2, 3, 7, 1, 1, 3, 4, 5], threshold = 4)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"0000512301\")",
        "removeTrailingZeros(num = \"0000000000\")",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '1000000')",
        "removeTrailingZeros(num = '1000000000')",
        "removeTrailingZeros(num = '0000000000012345670')",
        "removeTrailingZeros(num = \"10001\")",
        "removeTrailingZeros(num = '10200000000')",
        "removeTrailingZeros(num = \"00000000000000000012301000000000\")",
        "removeTrailingZeros(num = \"20130200\")"
    ],
    "sample_50": [
        "smallestString(s = \"aab\")",
        "smallestString(s = \"aab\")",
        "smallestString(s = \"abba\")",
        "smallestString(s = \"baab\")",
        "smallestString(s = 'abba')",
        "smallestString(\"abaa\")",
        "smallestString(\"baaab\")",
        "smallestString(\"b\")",
        "smallestString(\"aaaa\")",
        "smallestString(\"ababba\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 4, 6, 8, 10])",
        "distinctDifferenceArray([1, 2, 1, 3, 4, 1, 5])",
        "distinctDifferenceArray(nums = [1, 1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 4, 2, 10, 4, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 4, 2, 3])",
        "distinctDifferenceArray(nums = [4, 1, 1, 3, 4])",
        "distinctDifferenceArray(nums = [6, 1, 1, 3, 4, 3, 2, 2, 5, 5])",
        "distinctDifferenceArray(nums = [5, 3, 5, 3, 4, 5, 3, 4])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 1, additionalTank = 10)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 5, additionalTank = 6)",
        "distanceTraveled(mainTank = 2, additionalTank = 10)",
        "distanceTraveled(mainTank = 20, additionalTank = 5)",
        "distanceTraveled(mainTank = 10, additionalTank = 25)",
        "distanceTraveled(mainTank = 50, additionalTank = 100)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 32, additionalTank = 16)"
    ],
    "sample_118": [
        "minimumIndex(nums = [4, 5, 6])",
        "minimumIndex(nums = [4, 5, 1, 2, 3])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex([1, 1, 2, 2, 2, 2])",
        "minimumIndex(nums = [1, 1, 9, 9, 9])",
        "minimumIndex(nums = [1,2,3,1])",
        "minimumIndex(nums = [4, 5, 4, 5, 4, 5, 6])",
        "minimumIndex(nums = [0, 2, 0, 1, 1, 2])",
        "minimumIndex(nums = [5,3,4,5,1,1,3])",
        "minimumIndex(nums = [1, 5, 4, 5, 3, 1, 5, 7, 1, 9, 5])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [26, 42, 30, 37, 45])",
        "countBeautifulPairs(nums = [12, 34, 25, 16, 17])",
        "countBeautifulPairs(nums = [1, 121, 120, 120])",
        "countBeautifulPairs(nums = [15, 28, 30, 16])",
        "countBeautifulPairs(nums = [10, 25, 30, 3])",
        "countBeautifulPairs(nums = [50, 6, 4, 4, 6])",
        "countBeautifulPairs([20, 7, 24, 13])",
        "countBeautifulPairs(nums = [26, 5, 26, 26, 2, 9])",
        "countBeautifulPairs(nums = [18, 19, 29, 11, 15, 20])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"5123001\")",
        "removeTrailingZeros(num = \"5123001\")",
        "removeTrailingZeros(num = '12300')",
        "removeTrailingZeros(num = '510200')",
        "removeTrailingZeros(num = '000000512301')",
        "removeTrailingZeros(num = \"312000\")",
        "removeTrailingZeros(num = '5000001000')",
        "removeTrailingZeros(num = '51000230001')",
        "removeTrailingZeros(num = '510010001000101000')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"aabbbc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"aabbbcccc\")",
        "minimizedStringLength(s = \"aabbbcccc\")",
        "minimizedStringLength(\"abba\")",
        "minimizedStringLength(s = \"abab\")",
        "minimizedStringLength(s = \"eleetcode\")",
        "minimizedStringLength(s = \"aaaa\")",
        "minimizedStringLength(s = \"aabbbcccddde\")",
        "minimizedStringLength(s = \"cbbb\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1,1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 4, 7], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 4, 5], k = 1)",
        "maximumBeauty(nums = [2,3,1,5,4], k = 3)",
        "maximumBeauty(nums = [1,1,2,1,1], k = 1)",
        "maximumBeauty(nums = [1, 2, 1, 2, 1, 3, 2], k = 2)",
        "maximumBeauty(nums = [1, 1, 2, 3, 4, 5, 5], k = 1)",
        "maximumBeauty(nums = [1, 5, 7, 8, 10], k = 3)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 1)",
        "makeTheIntegerZero(num1 = 4, num2 = 5)",
        "makeTheIntegerZero(num1 = 2, num2 = 6)",
        "makeTheIntegerZero(num1 = 15, num2 = 13)",
        "makeTheIntegerZero(num1 = 1000, num2 = 1000)",
        "makeTheIntegerZero(num1 = 62, num2 = 47)",
        "makeTheIntegerZero(num1 = 2015, num2 = 2000)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [3, 4, 1, 2])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 4, 2, 3])",
        "findValueOfPartition(nums = [5, 3, 8, 1])",
        "findValueOfPartition(nums = [2, 3, 1, 4])",
        "findValueOfPartition(nums = [3, 2, 1, 3])",
        "findValueOfPartition(nums = [1, 5, 8, 10, 11])",
        "findValueOfPartition(nums = [1, 2, 2, 3, 4, 4, 5, 6, 7, 7])",
        "findValueOfPartition(nums = [1,1,3,5,7,10])",
        "findValueOfPartition(nums = [2,1,4,10,20,3,1])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 7, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 3)",
        "distanceTraveled(mainTank = 6, additionalTank = 0)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 0, 0])",
        "doesValidArrayExist([0,0,1,0])",
        "doesValidArrayExist(derived = [1,0,0,1,1,0,0,0,1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'aba')",
        "makeSmallestPalindrome(s = \"abaabab\")",
        "makeSmallestPalindrome(s = \"abcdeedcba\")",
        "makeSmallestPalindrome(s = \"eeeee\")",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'kajak')",
        "makeSmallestPalindrome(s = \"aaab\")",
        "makeSmallestPalindrome(s = \"eebcd\")",
        "makeSmallestPalindrome(s = \"eye\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 3)",
        "checkArray(nums = [2, 3, 1, 2, 4, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 1)",
        "checkArray(nums = [1, 3, 2, 6, 1, 2], k = 3)",
        "checkArray(nums = [2,2,1,3,1], k = 2)",
        "checkArray(nums = [10, 1, 3, 4], k = 2)",
        "checkArray(nums = [1,1,2,2,3,3,4,5,5], k = 2)",
        "checkArray(nums = [2, 5, 4, 5], k = 4)",
        "checkArray(nums = [11, 16, 5, 4, 18], k = 3)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [0, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0,1,0])",
        "doesValidArrayExist(derived = [0,1,0,1,1])",
        "doesValidArrayExist(derived = [0,1,0,1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 1, 0])"
    ],
    "sample_54": [
        "smallestString(s = 'aaaa')",
        "smallestString(s = \"abcdza\")",
        "smallestString(s = \"cccaaa\")",
        "smallestString(\"kabddsbncd\")",
        "smallestString(s = \"kkdssbndc\")",
        "smallestString(s = \"aaasddss\")",
        "smallestString(\"asdfghjk\")",
        "smallestString(s = \"kabbaca\")",
        "smallestString(s = 'kfjds')",
        "smallestString(s = \"dddsbdsdsdssddsdcds\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 1, 5])",
        "continuousSubarrays(A = [1, 2, 1, 3, 4, 1, 5])",
        "continuousSubarrays(A = [1,1,2,1,1])",
        "continuousSubarrays(A = [1, 2, 1, 2, 1])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 1])",
        "continuousSubarrays(A = [1,2,1,2,1,2,1,2,1])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 2, 2])",
        "continuousSubarrays(A = [3, 4, 4, 5, 5, 5, 6, 6, 7, 10])",
        "continuousSubarrays(A = [0, 1, 0, 1, 0, 1])",
        "continuousSubarrays(A = [1, 2, 1, 2, 3, 2, 2, 2])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = 'abccba')",
        "makeSmallestPalindrome(s = 'abca')",
        "makeSmallestPalindrome(s = \"aa\")",
        "makeSmallestPalindrome(s = \"abae\")",
        "makeSmallestPalindrome(s = \"abcccba\")",
        "makeSmallestPalindrome(s = \"abac\")",
        "makeSmallestPalindrome(s = \"aba\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 1])",
        "findValueOfPartition(nums = [3, 1, 4, 2])",
        "findValueOfPartition(nums = [5, 8, 1, 3])",
        "findValueOfPartition(nums = [3, 5, 2, 6, 1])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "findValueOfPartition(nums = [5, 8, 6, 2, 3, 1, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 10])",
        "findValueOfPartition(nums = [2, 2, 4, 3, 1])",
        "findValueOfPartition(nums = [2, 1, 4, 9, 7, 6, 3])",
        "findValueOfPartition(nums = [42, 49, 44, 57, 52])"
    ],
    "sample_51": [
        "smallestString(s = 'a')",
        "smallestString(s = 'abc')",
        "smallestString(\"aabcd\")",
        "smallestString(s = \"zba\")",
        "smallestString(s = 'aaaaa')",
        "smallestString('aabca')",
        "smallestString(s = 'zbaabcd')",
        "smallestString(s = 'aaaazbbbb')",
        "smallestString(s = \"ddskdcd\")",
        "smallestString(s = 'kqpvkwvekm')"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 2)",
        "maximumBeauty(nums = [3, 1, 5, 4, 2], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [2, 4, 6, 8], k = 2)",
        "maximumBeauty(nums = [1, 7, 4, 9, 2, 5], k = 3)",
        "maximumBeauty(nums = [3,4,7,2,8], k = 3)",
        "maximumBeauty(nums = [2,1,1,3,1,2,2,3], k = 1)",
        "maximumBeauty(nums = [6, 10, 10, 3, 2, 1, 6, 1], k = 3)",
        "maximumBeauty(nums = [1,3,4,2,7,8,1,4,9,5,2], k = 3)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 2)",
        "checkArray(nums = [1, 2], k = 1)",
        "checkArray(nums = [1, 2, 1], k = 2)",
        "checkArray(nums = [1, 2, 1, 1], k = 2)",
        "checkArray(nums = [1,1,1], k = 2)",
        "checkArray(nums = [1, 0, 1, 0, 1], k = 2)",
        "checkArray(nums = [1, 0], k = 1)",
        "checkArray(nums = [1, 1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [0,0,0,0,0], k = 2)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 3, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 0, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 3, additionalTank = 7)",
        "distanceTraveled(mainTank = 0, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 6)",
        "distanceTraveled(mainTank = 11, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [3, 4, 5, 3, 2, 1])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [4, 3, 1, 2])",
        "distinctDifferenceArray(nums = [0, 1, 2, 3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [1, 2, 2, 4, 5, 2])",
        "distinctDifferenceArray(nums = [3, 4, 5, 2, 2, 2, 3])",
        "distinctDifferenceArray(nums = [5, 1, 3, 1, 4, 6, 3])",
        "distinctDifferenceArray(nums = [4, 5, 6, 2, 3, 6, 4, 3, 0, 3])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,1,2,1,1])",
        "continuousSubarrays(A = [1,1,2,1,1])",
        "continuousSubarrays(A = [1,1,1,1,1,1])",
        "continuousSubarrays(A = [1, 1, 1, 2, 2, 2, 3, 3])",
        "continuousSubarrays(A = [1,1,1,1,3,3,3,3,2,2,2,2])",
        "continuousSubarrays(A = [1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5])",
        "continuousSubarrays(A = [1,1,1,1,3,1,1,1,1,1])",
        "continuousSubarrays(A = [1, 2, 2, 1, 1, 2])",
        "continuousSubarrays(A = [1, 3, 2, 2, 3, 1, 1, 4, 3, 1])",
        "continuousSubarrays(A = [3, 2, 2, 4, 1, 4, 5, 3, 2, 2, 2])"
    ],
    "sample_6": [
        "colorTheArray(n = 1, queries = [[1, 0]])",
        "colorTheArray(n = 5, queries = [[0,0],[1,1],[2,2],[3,0],[3,1],[4,1]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,2],[3,2],[4,2],[1,2],[2,1]])",
        "colorTheArray(n=4, queries = [[0,0], [1,1], [2,0], [3,0]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 1], [3, 2], [3, 1], [4, 1], [4, 3]])",
        "colorTheArray(5, [[0,0],[4,0],[4,1],[2,1],[1,1],[2,0],[3,1],[3,2]])",
        "colorTheArray(n = 5, queries = [[0,0],[0,1],[1,1],[2,1],[2,1],[2,0]])",
        "colorTheArray(n = 5, queries = [[0,1],[0,2],[1,1],[2,1],[0,2],[2,2],[4,2]])",
        "colorTheArray(n = 2, queries = [[0,0], [1,1], [0,0], [0,0], [1,1], [1,1], [1,1], [0,0]])",
        "colorTheArray(n = 6, queries = [[1,1], [1,2], [3,3], [5,4], [2,1], [1,1]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 9, b = 3)",
        "makeTheIntegerZero(a = 10, b = 5)",
        "makeTheIntegerZero(a = 10, b = 7)",
        "makeTheIntegerZero(a = 20, b = 3)",
        "makeTheIntegerZero(a = 25, b = 10)",
        "makeTheIntegerZero(a = 25, b = 6)",
        "makeTheIntegerZero(a = 30, b = 16)",
        "makeTheIntegerZero(a = 60, b = 6)",
        "makeTheIntegerZero(a = 112, b = 7)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [10, 16, 3, 7, 11, 5], target = 2)",
        "maximumJumps(nums = [1,5,6,1,1,1,5,1,6,1], target = 10)",
        "maximumJumps(nums = [1,2,3,4], target = 4)",
        "maximumJumps(nums = [1,2,3,4], target = 2)",
        "maximumJumps(nums = [3,4,2], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
        "maximumJumps(nums = [4, 2, 3, 4, 2, 3, 2, 3, 4, 2], target = 1)",
        "maximumJumps(nums = [7, 6, 10, 4, 9, 1, 9], target = 1)",
        "maximumJumps(nums = [5, 6, 5, 4, 3, 5, 7, 8, 5, 3, 2, 6, 8, 5, 4, 3, 2, 6, 7], target = 3)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [3, 1, 4, 1, 5], threshold = 3)",
        "longestAlternatingSubarray(nums = [4, 2, 4, 6, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [0, 1, 0, 1, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,2,3], threshold = 1)",
        "longestAlternatingSubarray(nums = [1,1,0,1,0], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,1,1,2,2,2,3,3,3], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 1, 2, 3, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,2,2,1,2,2,2,1,2,2], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,1,3,4,4,0], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,2,1,2,3,4,3,4,4,5,6,7,1,1,2,3], threshold = 5)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 4, 5, 2, 3], b = [1, 5, 1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 5], b = [2, 3, 2, 1, 3])",
        "maxNonDecreasingLength(a = [1, 1, 2, 3, 4, 5, 6], b = [1, 1, 2, 3, 4, 5, 6])",
        "maxNonDecreasingLength(a = [8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15], b = [14, 12, 10, 13, 9, 3, 15, 11, 7, 5, 1, 6, 2, 4, 8, 16])",
        "maxNonDecreasingLength(a = [6, 2, 3, 4, 5, 7, 8], b = [1, 3, 2, 4, 5, 7, 8])",
        "maxNonDecreasingLength(a = [4, 5, 1], b = [10, 6, 11])",
        "maxNonDecreasingLength(a = [5, 8, 10, 15], b = [5, 10, 12, 13])",
        "maxNonDecreasingLength(a = [2, 5, 6, 3, 1, 2], b = [2, 3, 3, 2, 6, 2])",
        "maxNonDecreasingLength(a = [6, 5, 2, 8, 5, 9], b = [1, 3, 7, 4, 6, 9])",
        "maxNonDecreasingLength(a = [6, 2, 8, 3, 9, 4, 1, 9, 1, 4], b = [1, 7, 2, 5, 8, 7, 7, 1, 3, 4])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0,1,1,1])",
        "numberOfGoodSubarraySplits([1,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits([0,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 0, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits([1,1,1,0,1,0,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,0,0,1,0,1,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,1,0,1,0,0,0,1,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [3, 1, 4, 1, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,0,1,0,1], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,1,2,1,2,1,2,1,2], threshold = 5)",
        "longestAlternatingSubarray(nums = [1, 3, 2, 2, 4], threshold = 2)",
        "longestAlternatingSubarray(nums = [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0], threshold = 2)",
        "longestAlternatingSubarray(nums = [4, 1, 2, 3, 4, 5, 2, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [10, 5, 2, 4, 1, 7, 8], threshold = 6)",
        "longestAlternatingSubarray(nums = [1, 2, 2, 2, 3, 2, 1, 1, 1, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [4, 2, 1, 6, 3, 4, 5, 1, 3], threshold = 3)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [3, 1, 4, 1, 5])",
        "findValueOfPartition(nums = [1, 1, 2])",
        "findValueOfPartition(nums = [3,2,3,1])",
        "findValueOfPartition(nums = [1, 1, 1])",
        "findValueOfPartition(nums = [3, 1, 5])",
        "findValueOfPartition(nums = [1, 1, 2, 2, 2])",
        "findValueOfPartition(nums = [2, 3, 4, 5, 6, 7])",
        "findValueOfPartition(nums = [2,1,4])",
        "findValueOfPartition(nums = [5, 3, 4, 9, 1])",
        "findValueOfPartition(nums = [3,4,5,8,9])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'aab')",
        "makeSmallestPalindrome(s = \"abac\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = 'abab')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = \"abcccba\")",
        "makeSmallestPalindrome(\"abca\")",
        "makeSmallestPalindrome(\"abab\")",
        "makeSmallestPalindrome(\"ahdbb\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABACD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"AABCDCDAA\")",
        "minLength(s = \"ABBCDABCD\")",
        "minLength(s = \"ABACDABAA\")",
        "minLength(\"ABCDE\")",
        "minLength(s = \"AAAABBBCCD\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [10, 16, 3, 7, 14, 12], target = 6)",
        "maximumJumps(nums = [4, 1, 3, 5, 6], target = 3)",
        "maximumJumps(nums = [3,3,3,3,3], target = 3)",
        "maximumJumps(nums = [10, 16, 8, 12, 9, 14, 17], target = 1)",
        "maximumJumps(nums = [4, 1, 3, 4, 2], target = 3)",
        "maximumJumps(nums = [2,3,1], target = 3)",
        "maximumJumps(nums = [1, 4, 3, 2, 1, 3, 5, 2, 3, 7, 4], target = 4)",
        "maximumJumps(nums = [25, 33, 1, 28, 12], target = 10)",
        "maximumJumps(nums = [15, 11, 14, 12, 11, 11, 10, 13], target = 10)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [4, 5]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [4, 3], [1, 3]])",
        "colorTheArray(n = 5, queries = [[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]])",
        "colorTheArray(n = 5, queries = [[1,2],[2,3],[3,4],[4,5],[5,1]])",
        "colorTheArray(n = 7, queries = [[1, 1], [3, 2], [5, 3], [6, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [3, 4], [2, 4], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [4, 5], [1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 3], [3, 4], [2, 1], [2, 1]])",
        "colorTheArray(n = 5, queries = [[1,2],[3,3],[4,2],[3,1]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank=1, additionalTank=0)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank=1, additionalTank=1)",
        "distanceTraveled(mainTank = 4, additionalTank = 3)",
        "distanceTraveled(mainTank = 6, additionalTank = 4)",
        "distanceTraveled(mainTank = 8, additionalTank = 2)",
        "distanceTraveled(mainTank = 8, additionalTank = 3)",
        "distanceTraveled(mainTank = 30, additionalTank = 10)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [12, 34, 56, 78])",
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [12, 34])",
        "countBeautifulPairs(nums = [3, 5])",
        "countBeautifulPairs(nums = [42, 52, 21, 35])",
        "countBeautifulPairs(nums = [8, 10, 2, 5, 4, 8])",
        "countBeautifulPairs(nums = [25, 33, 22, 48])",
        "countBeautifulPairs(nums = [82, 85, 82, 82, 83, 82, 87, 82])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3, 4], x = 2)",
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5], x = 3)",
        "minCost(A = [1, 2, 3, 4, 5], x = 3)",
        "minCost(A = [10, 1, 2, 4, 7], x = 3)",
        "minCost(A = [10, 1, 2, 4, 7], x = 2)",
        "minCost(A = [1, 2, 3, 4, 5, 6, 7, 8], x = 2)",
        "minCost(A = [9, 29, 24, 57, 4, 21], x = 3)",
        "minCost(A = [3, 2, 7, 4, 5], x = 2)",
        "minCost(A = [2, 3, 10, 2, 3, 1], x = 2)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [10,16,3,7,15], target = 5)",
        "maximumJumps(nums = [3,3,3,3,3], target = 0)",
        "maximumJumps(nums = [10, 16, 8, 12, 14, 28, 32], target = 6)",
        "maximumJumps(nums = [1,1,1,1,1,1,1,1,1,1], target = 1)",
        "maximumJumps(nums = [3, 5, 6, 2, 7], target = 2)",
        "maximumJumps(nums = [1, 1, 2, 3, 6, 1, 7, 5, 2], target = 3)",
        "maximumJumps(nums = [1,3,5,8,10], target = 3)",
        "maximumJumps(nums = [4,-2,3,0,-4,1,2,3,-1,4], target = 2)",
        "maximumJumps(nums = [3, 10, 3, 1, 1, 3, 6, 4, 2, 4, 3, 0], target = 5)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [2, 0, 1, 0, 1, 0])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(nums = [3, 1, 4, 1, 5])",
        "distinctDifferenceArray(nums = [1, 1, 1, 2, 2, 3])",
        "distinctDifferenceArray(nums = [2, 1, 2, 3, 1, 4, 2])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [1, 3, 7, 7, 8])",
        "distinctDifferenceArray(nums = [3, 1, 3, 3, 2, 3, 3, 4, 3, 3])",
        "distinctDifferenceArray(nums = [4, 2, 5, 2, 1, 5, 2, 1])",
        "distinctDifferenceArray(nums = [6, 4, 4, 4, 1, 2, 5, 4, 7, 3, 5, 7, 8, 6, 8, 8, 9, 0, 3, 9, 0])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 34, 56, 78, 90])",
        "countBeautifulPairs(nums = [42, 420, 42120, 42042])",
        "countBeautifulPairs(nums = [26, 42, 30, 37, 45, 48, 50, 56, 60, 63])",
        "countBeautifulPairs(nums = [222, 22, 2222, 222, 22, 22])",
        "countBeautifulPairs(nums = [6, 8, 1, 13, 7])",
        "countBeautifulPairs(nums = [42, 40, 41, 12, 14])",
        "countBeautifulPairs(nums = [3, 16, 9, 11, 11])",
        "countBeautifulPairs(nums = [28, 29, 33, 4, 22, 11, 9])",
        "countBeautifulPairs(nums = [164, 512, 641, 32])",
        "countBeautifulPairs(nums = [26, 3, 5, 26, 2, 27, 27, 3, 2, 1])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abba\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abbccc\")",
        "minimizedStringLength(s = \"ababacd\")",
        "minimizedStringLength(s = \"abcabcabcabc\")",
        "minimizedStringLength(s = \"eleet\")",
        "minimizedStringLength(\"bac\")"
    ],
    "sample_41": [
        "minimumCost(s = \"abba\")",
        "minimumCost(s = \"abcd\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"baba\")",
        "minimumCost(s = \"aabbbc\")",
        "minimumCost(s = \"abca\")",
        "minimumCost(s = \"abcbc\")",
        "minimumCost(s = \"aabcc\")",
        "minimumCost(s = \"baabaa\")",
        "minimumCost(s = \"bbabc\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1,2,2,3,3,3,4,4,4,4])",
        "distinctDifferenceArray(nums = [1,2,2,3])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 3, 3, 3, 4, 5])",
        "distinctDifferenceArray(nums = [0, 0, 1, 1, 2, 2])",
        "distinctDifferenceArray(nums = [5, 1, 5, 2, 5, 4])",
        "distinctDifferenceArray(nums = [2, 1, 3, 4, 2, 3, 3])",
        "distinctDifferenceArray(nums = [4, 3, 1, 2, 1, 2, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3, 2, 3, 4, 3, 4, 5, 4])",
        "distinctDifferenceArray([1, 2, 2, 3, 3, 3, 3, 3, 5])",
        "distinctDifferenceArray([1, 1, 3, 4, 4, 4, 4, 7, 7, 7])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1])",
        "doesValidArrayExist([1, 1, 1, 1])",
        "doesValidArrayExist([1,1,1])",
        "doesValidArrayExist(derived = [1,1,0,1])",
        "doesValidArrayExist(derived = [1, 2, 1, 2])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 0, 0, 0, 1])",
        "doesValidArrayExist([0, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 3, 4, 5, 2, 1, 3])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist([0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 3, 4, 0, 1])"
    ],
    "sample_52": [
        "smallestString(s = 'abcdsbncd')",
        "smallestString('aaaaaa')",
        "smallestString(s = 'aaaz')",
        "smallestString(s = 'aaabbd')",
        "smallestString(s = 'akddsbcd')",
        "smallestString(s = 'bbckddsbaaacdb')",
        "smallestString(s = 'agagdbdzc')",
        "smallestString(s = 'kqdmndqs')",
        "smallestString(s = 'jaykayakdssa')",
        "smallestString(s = 'bddszxbdabddbd')"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"baabaa\")",
        "minimumCost(s = \"baac\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"cbaebabacd\")",
        "minimumCost(s = \"ABAA\")",
        "minimumCost(s = \"xyyxyyyx\")",
        "minimumCost(s = \"bbbacdddaaaad\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabbc\")",
        "minimumCost(s = \"abacbebebe\")",
        "minimumCost(s = \"axxxxybyb\")",
        "minimumCost(s = \"aaabbbbcca\")",
        "minimumCost(s = \"aaaaaaaaaaaaaaaabbbbbcddd\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 1, 5, 2, 3, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 5, 5, 5])",
        "distinctDifferenceArray(nums = [2, 2, 1, 3, 1, 3])",
        "distinctDifferenceArray(nums = [5, 4, 4, 3, 2, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 3, 2, 2, 4])",
        "distinctDifferenceArray(nums = [2, 2, 2, 3, 3, 2, 1, 2])",
        "distinctDifferenceArray(nums = [1, 1, 3, 5, 5, 6, 6, 6, 6, 8, 8])",
        "distinctDifferenceArray(nums = [1,2,3,4,2,1,1,2,2])",
        "distinctDifferenceArray(nums = [4,1,4,5,2,1,4,1,2,5])"
    ],
    "sample_53": [
        "smallestString(s = \"abc\")",
        "smallestString(s = 'cab')",
        "smallestString(s = 'cab')",
        "smallestString(s = \"cababc\")",
        "smallestString(s = \"cbz\")",
        "smallestString(s = 'cbacdcbc')",
        "smallestString(s = 'bbaaac')",
        "smallestString(s = \"baaac\")",
        "smallestString(s = 'cbabcaa')",
        "smallestString(s = \"bbabab\")"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [10, 2, 5, 2], k = 3)",
        "checkArray(nums = [2, 1, 4, 3], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6], k = 5)",
        "checkArray(nums = [10,5,2,20,3,7], k = 1)",
        "checkArray(nums = [5, 5, 10, 5, 15, 10], k = 2)",
        "checkArray(nums = [4, 4, 2, 3, 3], k = 1)",
        "checkArray(nums = [10,2,5,2,3,7,101,12,100], k = 5)",
        "checkArray(nums = [4,5,1,6,2], k = 2)",
        "checkArray(nums = [1, 1, 1, 0, 0, 1], k = 3)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 2)",
        "maximumBeauty(nums = [1,1,1,1,3,3,3,4,6,9], k = 2)",
        "maximumBeauty(nums = [1,7,2,3,8,4], k = 3)",
        "maximumBeauty(nums = [2,3,10,2,7,8,1,12], k = 3)",
        "maximumBeauty(nums = [1,3,2,4,5,2], k = 3)",
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5], k = 1)",
        "maximumBeauty(nums = [1,2,1,1,4,5,6,7,9,10], k = 3)",
        "maximumBeauty(nums = [1, 5, 2, 3, 4, 5], k = 1)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 1, 2, 2, 3, 3])",
        "distinctDifferenceArray(a = [1, 1, 2, 3, 4, 4, 5])",
        "distinctDifferenceArray(a = [1, 1, 1, 1, 1, 1, 1, 1])",
        "distinctDifferenceArray(a = [3, 1, 3, 4, 3])",
        "distinctDifferenceArray(a = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "distinctDifferenceArray(a = [0, 1, 2, 3, 4, 5, 6, 7])",
        "distinctDifferenceArray(a = [5, 3, 1, 1, 2, 3])",
        "distinctDifferenceArray(a = [2, 2, 3, 4, 1, 4, 1, 4])",
        "distinctDifferenceArray(a = [4, 2, 7, 2, 9, 1, 3, 3, 1, 7, 4])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301')",
        "removeTrailingZeros(a = '5123001')",
        "removeTrailingZeros(a = '512300100')",
        "removeTrailingZeros(a = \"512301000\")",
        "removeTrailingZeros(a = '00000512301')",
        "removeTrailingZeros(a = '512300')",
        "removeTrailingZeros(a = '5123000')",
        "removeTrailingZeros(a = '1200')"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(\"even\")",
        "makeSmallestPalindrome(s = 'nnev')",
        "makeSmallestPalindrome(s = \"asd\")",
        "makeSmallestPalindrome(s = \"add\")",
        "makeSmallestPalindrome(s = 'xxabaa')",
        "makeSmallestPalindrome(\"abcdefgh\")"
    ],
    "sample_55": [
        "smallestString(s = 'abcd')",
        "smallestString(\"kddsbncd\")",
        "smallestString(s = 'kddsbncb')",
        "smallestString(\"kddsbncd\")",
        "smallestString(s = \"abcdefgh\")",
        "smallestString(\"asd\")",
        "smallestString(s = \"dxxe\")",
        "smallestString(s = 'mnbckd')",
        "smallestString(s = 'ajfajfajfd')",
        "smallestString(s = 'kdqdcbvfdcg')"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num
        "removeTrailingZeros(num
        "removeTrailingZeros(num = '0000000512301')",
        "removeTrailingZeros(num = \"000000000\")",
        "removeTrailingZeros(num = '5000000')",
        "removeTrailingZeros(num = '00000120')",
        "removeTrailingZeros(num = \"00000000\")",
        "removeTrailingZeros(num = '00010100000001000')"
    ],
    "sample_23": [
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCDCDAB\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABABCDCDCD\")",
        "minLength(s = \"ABCDED\")",
        "minLength(s = \"ABCDEB\")",
        "minLength(s = \"AABCDD\")",
        "minLength(s = \"ABBADCDC\")",
        "minLength(\"ABCDCDAA\")",
        "minLength(s=\"ABCDECBAABCDCDCABAA\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512301')",
        "removeTrailingZeros(num = \"12300\")",
        "removeTrailingZeros(num = \"0000512301\")",
        "removeTrailingZeros(num = \"01000\")",
        "removeTrailingZeros(num = \"5012301\")",
        "removeTrailingZeros(num = \"3100100\")",
        "removeTrailingZeros(num = \"5012003\")",
        "removeTrailingZeros(num = '0010001000')",
        "removeTrailingZeros(num = '100000')"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 12, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 4)",
        "makeTheIntegerZero(num1 = 12, num2 = 6)",
        "makeTheIntegerZero(num1 = 100, num2 = 3)",
        "makeTheIntegerZero(num1 = 2, num2 = 4)",
        "makeTheIntegerZero(num1 = 13, num2 = 7)",
        "makeTheIntegerZero(num1=10, num2=3)",
        "makeTheIntegerZero(num1 = 45, num2 = 3)",
        "makeTheIntegerZero(num1=50, num2=35)"
    ],
    "sample_57": [
        "distanceTraveled(a = 5, b = 5)",
        "distanceTraveled(a = 10, b = 5)",
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 2, b = 2)",
        "distanceTraveled(a = 1, b = 3)",
        "distanceTraveled(a = 6, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 3, b = 1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [3,1,4,1,5], t = 3)",
        "longestAlternatingSubarray(nums = [1,1,2,1,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [3,1,4,1,5,9,2,6,5,3,5,8,9,7,9], t = 4)",
        "longestAlternatingSubarray(nums = [2,1,2,2,2,2,2,3,2,2], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,1,1,2,1,2], t = 3)",
        "longestAlternatingSubarray(nums = [4, 8, 2, 6, 4], t = 6)",
        "longestAlternatingSubarray(nums = [1,1,2,1,1,2,1,1,2,2,1,2,2,1], t = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 2, 4, 3, 4, 5], t = 3)",
        "longestAlternatingSubarray(nums = [4, 2, 4, 2, 4, 2, 3, 1], t = 1)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 6, 7, 8, 2, 1], t=4)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [10, 16, 8, 12, 9, 14, 17], target = 5)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 2)",
        "maximumJumps(nums = [1, 2, 1, 3], target = 1)",
        "maximumJumps(nums = [1, 5, 6, 1, 9, 10, 13, 14, 16], target = 10)",
        "maximumJumps(nums = [1, 4, 2, 3, 2, 3, 7, 1, 2, 4, 2], target = 3)",
        "maximumJumps(nums = [7, 5, 3, 1, 8, 6, 9, 4, 2], target = 3)",
        "maximumJumps(nums = [0,1,6,4,5,3,2,8,7,6,5,3,2,6,3,4,5], target = 3)",
        "maximumJumps(nums = [1,1,3,4,4,4,6,7,9,9,9,10,10,10,11,12,12,12,12,12,13,14,14,15,15,15,16,16,16,16,16,17], target = 1)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(num = '30100')",
        "removeTrailingZeros(num = '512301000000000000')",
        "removeTrailingZeros(num = '123010')",
        "removeTrailingZeros(num = '31200')",
        "removeTrailingZeros(num = '010100100')",
        "removeTrailingZeros(num = '001000')"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 1)",
        "maximumJumps(nums = [10, 16, 3, 7, 15], target = 5)",
        "maximumJumps(nums = [7, 6, 5, 4, 3, 2, 1], target = 0)",
        "maximumJumps(nums = [10, 16, 8, 12, 9, 14, 17, 18], target = 5)",
        "maximumJumps(nums = [10, 16, 8, 12, 9, 14, 17], target = 5)",
        "maximumJumps(nums = [10, 16, 3, 7, 14, 18], target = 6)",
        "maximumJumps(nums = [10, 16, 8, 12, 9, 14, 17, 5], target = 4)",
        "maximumJumps(nums = [7, 2, 4, 10, 8, 13, 9, 6, 1, 5, 14, 12], target = 6)",
        "maximumJumps(nums = [23, 25, 24, 26, 23, 24, 26, 24, 25, 24], target = 3)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 2])",
        "doesValidArrayExist(derived = [0,0,1,0,0])",
        "doesValidArrayExist([2, 2, 2, 2, 2])",
        "doesValidArrayExist([1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 1, 0, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 1, 1, 1, 0, 0])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits([1,1,1,1,0,1,0])",
        "numberOfGoodSubarraySplits([1, 1, 1, 1, 1, 1, 1, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0,0,1,0])"
    ],
    "sample_19": [
        "minLength(s = \"ABC\")",
        "minLength(s = 'ABABCDCD')",
        "minLength(s = \"ABBCDCD\")",
        "minLength(s = \"ABCDABCDABCD\")",
        "minLength(s = \"ABCCD\")",
        "minLength(s = \"ABCDBCA\")",
        "minLength(s = \"ABABCDABCD\")",
        "minLength(s = \"ABBCDABCDABCD\")",
        "minLength(s = \"ABCDCAABCD\")",
        "minLength(\"ABBABABABABABABABCDCDCDCDCDCDCDCDCDCDCD\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = 'never')",
        "makeSmallestPalindrome(s = 'neve')",
        "makeSmallestPalindrome(s = \"aabb\")",
        "makeSmallestPalindrome(s = \"abcdc\")",
        "makeSmallestPalindrome(s = \"pale\")",
        "makeSmallestPalindrome(\"eeaaan\")",
        "makeSmallestPalindrome(s = \"the\" )"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [3, 4, 2, 1])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums=[4, 1, 2, 3])",
        "semiOrderedPermutation(nums=[2,3,5,1,4])",
        "semiOrderedPermutation(nums = [1, 2, 5, 4, 7, 3, 8])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,0,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,1,0])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1, 1, 1, 1, 1], k = 0)",
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2], k = 1)",
        "maximumBeauty(nums = [3,4,2,1,5,6], k = 2)",
        "maximumBeauty(nums = [1, 1, 1, 1, 5, 5, 5], k = 2)",
        "maximumBeauty(nums = [6, 5, 4, 3, 2, 1, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [2, 7, 1, 8, 5], k = 3)",
        "maximumBeauty(nums = [3,5,2,6,4], k = 3)",
        "maximumBeauty(nums = [0,1,3,4,5,6,7,10,15,20], k = 4)",
        "maximumBeauty(nums = [6, 5, 9, 1, 8, 10, 12], k = 2)"
    ],
    "sample_117": [
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4, 2])",
        "minimumIndex(nums = [4, 4, 4, 4])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minimumIndex(nums = [1,2,1,3,1,4])",
        "minimumIndex(nums = [1, 1, 5, 2, 2, 5, 4])",
        "minimumIndex(nums = [4, 5, 5, 3, 3, 4, 4, 4])",
        "minimumIndex([1, 5, 2, 6])",
        "minimumIndex(nums = [5,5,1,1,5,5,5])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 4)",
        "makeTheIntegerZero(num1 = 14, num2 = 2)",
        "makeTheIntegerZero(num1 = 9, num2 = 1)",
        "makeTheIntegerZero(num1 = 12, num2 = 5)",
        "makeTheIntegerZero(num1 = 13, num2 = 1)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [26, 42, 30])",
        "countBeautifulPairs(nums = [2, 8, 6, 4, 1])",
        "countBeautifulPairs(nums = [22, 57, 6, 5, 20])",
        "countBeautifulPairs(nums = [10, 15, 3, 5])",
        "countBeautifulPairs(nums = [3,8,7,2])",
        "countBeautifulPairs([132, 456, 891])",
        "countBeautifulPairs(nums = [2,12,5,9,26])",
        "countBeautifulPairs(nums = [28, 32, 33, 2, 3, 5, 4])",
        "countBeautifulPairs(nums = [22, 21, 33, 34, 41, 44, 53, 54])",
        "countBeautifulPairs(nums = [12, 35, 69, 27, 50, 27, 92, 12])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 5)",
        "makeTheIntegerZero(num1 = 17, num2 = 3)",
        "makeTheIntegerZero(num1 = 17, num2 = 5)",
        "makeTheIntegerZero(num1 = 25, num2 = 4)",
        "makeTheIntegerZero(num1 = 24, num2 = 3)",
        "makeTheIntegerZero(num1 = 18, num2 = 2)",
        "makeTheIntegerZero(num1 = 100, num2 = 64)",
        "makeTheIntegerZero(num1 = 100, num2 = 68)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDCD\")",
        "minLength(\"ABCDABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABACDCD\")",
        "minLength(s = \"ABCBCAB\")",
        "minLength(s = \"ABACDABCD\")",
        "minLength(s = \"AABAACCD\")",
        "minLength(s = \"ABCDEBGC\")",
        "minLength(s = \"ABBACDCDABAB\")",
        "minLength(s = \"AXYBXDAXYCD\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [3, 4, 5, 8], k = 2)",
        "maximumBeauty(nums = [3, 4, 8, 2], k = 2)",
        "maximumBeauty(nums = [1, 1, 1, 2, 2, 2], k = 1)",
        "maximumBeauty(nums = [1, 1, 2, 2, 2], k = 1)",
        "maximumBeauty(nums = [1, 1, 4, 2, 1, 3], k = 3)",
        "maximumBeauty(nums = [3, 1, 2, 4, 3], k = 1)",
        "maximumBeauty(nums = [1, 3, 1, 4, 2], k = 1)",
        "maximumBeauty(nums = [3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [3, 4, 7, 2, 1, 3, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 4, 1, 1, 3, 4, 1, 1, 2], k = 1)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12,24,35])",
        "countBeautifulPairs(nums = [12,24,32])",
        "countBeautifulPairs(nums = [28, 32, 4, 8])",
        "countBeautifulPairs(nums = [18, 19, 20, 21])",
        "countBeautifulPairs(nums = [22, 33, 44, 55, 66])",
        "countBeautifulPairs(nums = [28, 36, 42])",
        "countBeautifulPairs(nums=[1,3,4,5])",
        "countBeautifulPairs(nums = [12, 34, 23, 45, 10, 10])",
        "countBeautifulPairs(nums = [18,10,13,1,13,35])",
        "countBeautifulPairs(nums = [192,156,20,218])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 6, num2 = 3)",
        "makeTheIntegerZero(num1 = 13, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 1)",
        "makeTheIntegerZero(num1 = 2, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 5)",
        "makeTheIntegerZero(num1 = 29, num2 = 3)",
        "makeTheIntegerZero(num1 = 17, num2 = 6)",
        "makeTheIntegerZero(num1 = 45, num2 = 2)",
        "makeTheIntegerZero(num1 = 200, num2 = 24)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s = \"nev\")",
        "makeSmallestPalindrome(s = 'abcd')",
        "makeSmallestPalindrome(s = 'odd')",
        "makeSmallestPalindrome(s = 'abba')",
        "makeSmallestPalindrome(s = \"test\")",
        "makeSmallestPalindrome(s = 'ramon')"
    ],
    "sample_37": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abcde\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"aabac\")",
        "minimumCost(s = \"baaa\")",
        "minimumCost(s = \"aababb\")",
        "minimumCost(s = \"aabc\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,1,1,0,1,1,1,1])"
    ],
    "sample_105": [
        "checkArray(nums = [2, 3, 4], k = 3)",
        "checkArray(nums = [1,1,1,1,1], k = 2)",
        "checkArray(nums = [2, 2, 2], k = 3)",
        "checkArray(nums = [3, 4, 7], k = 3)",
        "checkArray(nums = [3, 2, 1, 4], k = 3)",
        "checkArray(nums = [2, 5, 4, 3, 1], k = 3)",
        "checkArray(nums = [10, 12, 10], k = 3)",
        "checkArray(nums = [10, 5, 2, 7, 12, 1, 3], k = 3)",
        "checkArray(nums = [11,12,13,14], k = 3)",
        "checkArray(nums = [10, 9, 5, 6, 5, 11, 11, 10, 9, 9, 1, 10, 9, 5, 9, 6, 1, 10, 5, 10, 6, 11], k = 1)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [4,1,2,3])",
        "semiOrderedPermutation(nums = [4,3,2,1])",
        "semiOrderedPermutation(nums = [1, 2, 4, 3, 5, 6])",
        "semiOrderedPermutation(nums = [5, 6, 1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [3, 4, 2, 1, 5, 6])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [1, 1, 1], k = 2)",
        "checkArray(nums = [1, 2, 3, 4], k = 3)",
        "checkArray(nums = [2, 3, 1, 2, 5], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9], k = 3)",
        "checkArray(nums = [4,3,5,7,2], k = 3)",
        "checkArray(nums = [2, 3, 5, 3, 6, 8], k = 3)",
        "checkArray(nums = [3, 3, 1, 1, 3, 3, 4, 2], k = 2)",
        "checkArray(nums = [3, 1, 1, 5, 6, 0, 1, 2, 1], k = 3)"
    ],
    "sample_39": [
        "minimumCost(s = \"baba\")",
        "minimumCost(s = \"baaab\")",
        "minimumCost(s = \"aababbab\")",
        "minimumCost(s = \"abcdd\")",
        "minimumCost(s = \"aabaab\")",
        "minimumCost(\"abcd\")",
        "minimumCost(s = \"aabaaabaaa\")",
        "minimumCost(s = \"bb\")",
        "minimumCost(s = \"ababcdc\")",
        "minimumCost(s = \"bbaabbb\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [3, 1, 4, 2])",
        "findValueOfPartition(a = [3, 1, 4, 2])",
        "findValueOfPartition(a = [3, 1, 4, 2])",
        "findValueOfPartition(a = [1, 4, 3, 2])",
        "findValueOfPartition(a = [3, 1, 2, 4])",
        "findValueOfPartition(a = [1, 2, 4, 7])",
        "findValueOfPartition(a = [0, 1, 4, 5, 6])",
        "findValueOfPartition(a = [2, 5, 7, 10])",
        "findValueOfPartition(a = [0, 5, 7, 9, 9, 10])",
        "findValueOfPartition(a = [15, 10, 1, 3, 16])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 12, additionalTank = 3)",
        "distanceTraveled(mainTank = 25, additionalTank = 2)",
        "distanceTraveled(mainTank = 25, additionalTank = 10)",
        "distanceTraveled(mainTank = 15, additionalTank = 6)",
        "distanceTraveled(mainTank = 2, additionalTank = 6)",
        "distanceTraveled(mainTank = 18, additionalTank = 1)",
        "distanceTraveled(mainTank = 21, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 10)",
        "distanceTraveled(mainTank = 8, additionalTank = 2)",
        "distanceTraveled(mainTank = 60, additionalTank = 15)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [3, 4, 5, 2, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 3, 1])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 3])",
        "doesValidArrayExist(derived = [3, 3, 3, 1])",
        "doesValidArrayExist(derived = [1, 1, 2, 3, 4, 5])",
        "doesValidArrayExist(derived = [3, 4, 5, 2, 1, 6])",
        "doesValidArrayExist(derived = [2, 3, 4, 1, 1, 3, 4])",
        "doesValidArrayExist(derived = [1,2,4,3,6,7,0,5])",
        "doesValidArrayExist(derived = [3, 5, 6, 1, 4, 4])"
    ],
    "sample_106": [
        "checkArray(nums = [2, 3, 1, 5], k = 2)",
        "checkArray(nums = [1, 1, 1, 1, 1], k = 2)",
        "checkArray(nums = [2,3,1,2,4,3], k = 2)",
        "checkArray(nums = [2, 3, 1, 5, 4], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [0,0,0,0,0], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 4)",
        "checkArray(nums = [0, 1, 0, 1, 1, 0, 1], k = 2)",
        "checkArray(nums = [2, 3, 2, 3, 3], k = 2)",
        "checkArray(nums = [10,20,20,10,15,35], k = 2)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [3,1,4,1,5], threshold = 4)",
        "longestAlternatingSubarray(nums = [0,1,0,1,1], threshold = 1)",
        "longestAlternatingSubarray(nums = [10, 2, 5, 20], threshold = 15)",
        "longestAlternatingSubarray(nums = [1,1,2,2,3,3,4,4,5,5,6,6], threshold = 4)",
        "longestAlternatingSubarray(nums = [3,1,1,3,3,2,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,3,1,3,2,1,3,2,3], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,3,4,1,3,4,2,5], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 2, 2, 2, 1, 1, 2, 3, 2], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,2,3,2,3,1,2,3,3,3,3,2,2,2,2,3,2,2,2,3,2,2,2,2], threshold = 3)",
        "longestAlternatingSubarray(nums = [1,1,0,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,1,1,0,1,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,0,0,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [1, 2, 3, 4])",
        "countBeautifulPairs(nums = [12, 34, 23, 56])",
        "countBeautifulPairs(nums = [4, 7])",
        "countBeautifulPairs(nums = [12, 32, 24])",
        "countBeautifulPairs(nums = [18, 60, 125])",
        "countBeautifulPairs(nums = [18, 6, 7, 13])",
        "countBeautifulPairs(nums = [55, 60, 63, 61, 70, 57, 72])",
        "countBeautifulPairs([17, 26, 34, 41, 51])",
        "countBeautifulPairs([13, 10, 13, 14, 14, 13, 10])",
        "countBeautifulPairs(nums = [21, 25, 12, 13, 3, 9, 21, 26, 21, 24])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,1,2,3,4,5,2], t = 3)",
        "longestAlternatingSubarray(nums = [5,4,1,2,3,4,5], t = 4)",
        "longestAlternatingSubarray(nums = [2,1,2,2,2,2,2,3,4], t = 3)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 2, 3, 3, 2, 2, 2], t = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 5, 2, 5, 2, 3, 2, 4, 2], t = 4)",
        "longestAlternatingSubarray(nums = [1,5,3,4,2,6,7,7,1], t = 5)",
        "longestAlternatingSubarray(nums = [2,1,2,2,3,2,1,2,2,3,2], t=2)",
        "longestAlternatingSubarray(nums = [5,4,4,2,5,3,3,1], t=3)",
        "longestAlternatingSubarray(nums = [2,5,6,2,3,4,3,4,5], t=4)",
        "longestAlternatingSubarray(nums = [0,2,2,3,3,5,5,7,8], t = 5)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabbc\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"abaa\")",
        "minimumCost(s = \"bbbab\")",
        "minimumCost(\"aabac\")",
        "minimumCost(s = \"baaaab\")",
        "minimumCost(s = \"bb\")",
        "minimumCost(s = \"abbaba\")",
        "minimumCost(s = \"aababbabbaabaabbb\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABACD\")",
        "minLength(s = \"AAABBCDCDDD\")",
        "minLength(s = \"ABCDA\")",
        "minLength(s = \"ABAC\")",
        "minLength(s = \"ABAB\")",
        "minLength(s = \"abcABCDabc\")",
        "minLength(s = \"ABCEDBAFE\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 0, 0, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0"
    ],
    "sample_9": [
        "colorTheArray(n = 5, queries = [[0, 0], [1, 1], [2, 0], [2, 1], [3, 1], [3, 2], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 2], [3, 0], [4, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [4, 1], [1, 1], [2, 0], [3, 1], [0, 0], [3, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [4, 0], [4, 1], [2, 1], [2, 0], [3, 1], [0, 2], [0, 1], [3, 0]])",
        "colorTheArray(5, [[0, 1], [1, 2], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 0], [4, 0], [4, 1], [2, 1], [2, 0], [3, 1], [0, 2], [0, 1], [3, 2], [1, 0]])",
        "colorTheArray(n = 5, queries = [[0, 0], [0, 3], [1, 1], [2, 2], [2, 3], [3, 0], [3, 3], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 1], [2, 2], [3, 2], [4, 3], [1, 3]])",
        "colorTheArray(n = 6, queries = [[0, 1], [1, 1], [2, 1], [2, 1], [4, 1], [5, 0], [3, 0], [4, 0], [5, 1]])",
        "colorTheArray(n = 6, queries = [[0, 1], [2, 1], [2, 2], [0, 0], [4, 1], [3, 1], [2, 0], [2, 2], [2, 1], [0, 2], [3, 2], [0, 1]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [2, 4, 3], nums2 = [1, 2, 3])",
        "maxNonDecreasingLength(nums1 = [2, 4, 6, 8], nums2 = [1, 3, 5, 7])",
        "maxNonDecreasingLength(nums1 = [4, 2, 3], nums2 = [4, 3, 2])",
        "maxNonDecreasingLength(nums1 = [2, 4, 3], nums2 = [2, 2, 2])",
        "maxNonDecreasingLength(nums1 = [1, 5, 1, 1], nums2 = [3, 1, 1, 5])",
        "maxNonDecreasingLength(nums1 = [1, 5, 8, 7], nums2 = [10, 1, 5, 8, 6])",
        "maxNonDecreasingLength(nums1 = [10, 5, 2, 7, 4], nums2 = [4, 6, 8, 1, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 1, 3, 2], nums2 = [1, 2, 2, 2, 3])",
        "maxNonDecreasingLength(nums1 = [1, 5, 4, 1, 2], nums2 = [3, 3, 5])",
        "maxNonDecreasingLength(nums1 = [4, 3, 10, 1, 2], nums2 = [5, 2, 2, 7, 3])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [3, 1, 5, 4, 2], k = 2)",
        "maximumBeauty(nums = [3, 1, 5, 4, 2], k = 3)",
        "maximumBeauty(nums = [3,4,5,8], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1,2,3,4], k = 2)",
        "maximumBeauty(nums = [2,3,1,2,4,3], k = 2)",
        "maximumBeauty(nums = [2, 3, 1, 4, 5, 2], k = 3)",
        "maximumBeauty(nums = [4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [2, 4, 7, 5, 8, 1, 3, 9], k = 3)",
        "maximumBeauty(nums = [9, 8, 10, 1, 7, 3, 2], k = 2)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1, 4, 3, 2])",
        "findValueOfPartition(nums = [4, 2, 2, 5, 1, 5, 8])",
        "findValueOfPartition(nums = [3,4,1,2])",
        "findValueOfPartition(nums = [1, 4, 3, 4, 4, 5])",
        "findValueOfPartition(nums = [5, 1, 2, 7, 4, 5])",
        "findValueOfPartition(nums = [1,4,3,2,1,2,10])",
        "findValueOfPartition(nums = [3,4,2,3,5,1,5])",
        "findValueOfPartition(nums = [3, 5, 0, -2, 8, -10])",
        "findValueOfPartition(nums = [3, 1, 5, 7, 3, 8, 11])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [3, 5, 2, 1])",
        "findValueOfPartition(nums = [3, 2, 3, 1])",
        "findValueOfPartition(nums = [5, 10, 3])",
        "findValueOfPartition(nums = [1,1,2])",
        "findValueOfPartition(nums = [4,5,2,10,8,12])",
        "findValueOfPartition(nums = [2,4,6])",
        "findValueOfPartition(nums = [3,1,4,2,7,10])",
        "findValueOfPartition(nums = [2, 4, 7, 9, 10, 11])",
        "findValueOfPartition(nums = [3, 5, 2, 6, 3, 8])",
        "findValueOfPartition(nums = [3, 3, 2, 3, 4, 2])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1])",
        "semiOrderedPermutation(nums = [1, 4, 3, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5, 4])",
        "semiOrderedPermutation(nums = [5, 2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [3, 2, 1, 2, 3])",
        "semiOrderedPermutation(nums = [5,1,4,2,3])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 1, 2, 2, 2, 3, 2])",
        "semiOrderedPermutation(nums = [4,1,2,3])",
        "semiOrderedPermutation(nums = [3,2,1])",
        "semiOrderedPermutation(nums = [1, 5, 3, 4, 2, 6])",
        "semiOrderedPermutation(nums = [1, 1, 1, 1, 1, 1, 2])",
        "semiOrderedPermutation(nums = [1, 4, 2, 2, 3, 1])",
        "semiOrderedPermutation(nums = [1, 2, 1, 4, 5, 6, 5, 6, 2])"
    ],
    "sample_167": [
        "isAcronym(words = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], s = \"etan\")",
        "isAcronym(words = [\"user\", \"interface\", \"system\"], s = \"UIS\")",
        "isAcronym(words = [\"deferred\", \"immediate\", \"final\", \"executed\"], s = \"D.E.F.\")",
        "isAcronym(words=[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], s = \"eat\")",
        "isAcronym(words = [\"C\", \"i\", \"n\", \"c\", \"e\", \"i\", \"n\"], s = \"cincien\")",
        "isAcronym(words = [\"bark\", \"code\", \"bank\", \"bad\"], s = \"bca\")",
        "isAcronym(words = [\"ball\", \"apple\", \"tea\"], s = \"BALTAPLEA\")",
        "isAcronym(words= [\"asd\", \"qwe\"], s = \"eqa\")",
        "isAcronym(words = [\"w3r\", \"tea\", \"mor\"], s = \"w3rmor\")",
        "isAcronym(words = [\"deltas\", \"bob\", \"sky\", \"apple\"], s = \"SKYbob\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,4,3,2,2,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[1,1,2,1,1], m=2, k=0)",
        "countInterestingSubarrays(nums = [2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,3,3,3], m = 2, k = 2)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1,3],[2,6],[8,10],[15,18]])",
        "numberOfPoints(nums = [[1,3],[2,6],[8,10],[15,18]])",
        "numberOfPoints(nums = [[1, 4], [2, 3], [3, 4]])",
        "numberOfPoints(nums = [[4, 10], [2, 6]])",
        "numberOfPoints(nums = [[1, 1], [1, 2], [3, 4], [1, 3]])",
        "numberOfPoints(nums = [[1, 5], [1, 3], [2, 5]])",
        "numberOfPoints([[3, 10], [5, 24], [12, 27]])",
        "numberOfPoints(nums = [[1,5],[4,7]])",
        "numberOfPoints(nums = [[1,2], [2,2], [2,3]])",
        "numberOfPoints(nums = [[1, 5], [10, 20], [2, 2]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = ['easy_problem'], separator = '_')",
        "splitWordsBySeparator(words = ['easy_problem'], separator = '_')",
        "splitWordsBySeparator(words = [\"easy_problem\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"easy_problem\"], separator = \"_\")",
        "splitWordsBySeparator(words = [\"easy_problem\", \"hard\"], separator = \"_\")",
        "splitWordsBySeparator(words = ['easy-problem'], separator = '-')",
        "splitWordsBySeparator(words = ['easy problem'], separator = ' ')",
        "splitWordsBySeparator(words = ['easy', 'problem'], separator = 'as')",
        "splitWordsBySeparator(words = [\"codeforces\", \"easy\"], separator = \"c\")",
        "splitWordsBySeparator(words = [\"tea;t;eat;sleep;eat\"], separator = \";\")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[0,2],[5,10],[13,23],[24,25]])",
        "numberOfPoints(nums = [[3, 4], [2, 5]])",
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[1, 5], [2, 3]])",
        "numberOfPoints(nums = [[-2, 2], [3, 10]])",
        "numberOfPoints(nums = [[0,2]])",
        "numberOfPoints(nums = [[1, 3], [0, 0], [2, 6]])",
        "numberOfPoints(nums = [[1, 4], [4, 4]])",
        "numberOfPoints(nums = [[3, 4], [2, 4], [2, 4]])",
        "numberOfPoints([[1, 5], [2, 2], [1, 3]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 2, 2])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 2, 2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 2, 2])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 4])",
        "countCompleteSubarrays(nums = [1,1,2,1,2,1])",
        "countCompleteSubarrays(nums = [1,1,2,1,2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 1, 2, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = \" \")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [2, 3, 5, 4])",
        "maxIncreasingGroups(u = [4, 2, 3, 5, 4])",
        "maxIncreasingGroups(u = [3, 4, 6, 7])",
        "maxIncreasingGroups([1, 3, 4, 6, 5])",
        "maxIncreasingGroups(u = [90, 70, 80, 100])",
        "maxIncreasingGroups(u = [2, 1, 3, 2, 1, 2, 1, 3])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 3, 2, 1, 3, 4, 2, 1])",
        "maxIncreasingGroups(u = [2, 5, 5, 1, 1, 2, 2, 3, 3, 3])",
        "maxIncreasingGroups(u = [2, 5, 4, 4, 3, 2, 1, 4])",
        "maxIncreasingGroups([6, 1, 3, 2, 5, 7, 4, 10, 8, 9])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [4, 2, 1, 3], x = 1)",
        "minAbsoluteDifference(nums = [4, 2, 1, 3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,1,3], x = 2)",
        "minAbsoluteDifference(nums = [4,2,3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,3,1], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 1, 3], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 3], x = 1)",
        "minAbsoluteDifference(nums = [4,2,3], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 3], x = 2)",
        "minAbsoluteDifference(nums = [4, 2, 3, 1, 8, 7, 5], x = 3)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [23, 2, 6, 4, 5], modulo = 13, k = 2)",
        "countInterestingSubarrays(nums = [0,1,0,1,1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [2,3,1,4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 0, 1, 1, 0, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 2, 3, 1, 2, 3, 4], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [2, 2, 2, 3], modulo = 2, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,2,5,0,1,2], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,1,2,3,1,2,3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [24,47,8,41,78], modulo = 100, k = 41)",
        "countInterestingSubarrays(nums = [24, 10, 12, -1, 38, 9, -24, 0, 3, -49], modulo = 10, k = 2)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 4)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 4)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 10)",
        "canSplitArray(nums = [1, 5, 11, 5], m = 9)",
        "canSplitArray(nums = [2, 4, 5, 10], m = 7)",
        "canSplitArray(nums = [2, 5, 10, 7], m = 9)",
        "canSplitArray(nums = [1,4,3,2,4,1,1,1,1], m = 3)",
        "canSplitArray(nums = [2, 1, 1, 5, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [1, 1, 3, 1, 4, 1, 3, 2], m = 3)"
    ],
    "sample_169": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBITCARD\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"ATM\")",
        "isAcronym(words = [\"like\", \"sam\", \"sung\"], s = \"LKS\")",
        "isAcronym(words = [\"deferred\", \"execution\", \"ignition\"], s = \"DEFERIGN\")",
        "isAcronym(words = [\"B\", \"A\", \"N\", \"A\"], s = \"BANANA\")",
        "isAcronym(words = [\"debit\", \"card\", \"charge\"], s = \"CDC\")",
        "isAcronym(words = [\"debit\", \"card\", \"expense\"], s = \"DEBCEXP\")",
        "isAcronym(words = [\"dear\", \"students\", \"of\", \"Microsoft\"], s = \"DOSM\")",
        "isAcronym(words = [\"deer\", \"elnk\", \"loud\", \"star\"], s = \"dlns\")",
        "isAcronym(words = [\"dear\", \"bball\", \"fc\"], s = \"DearBallFootball\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [3,4,5,1,2])",
        "minimumIndex(nums = [0, 1, 0, 1, 1])",
        "minimumIndex(nums = [0, 1, 0, 1, 1])",
        "minimumIndex(nums = [3, 1, 2, 3])",
        "minimumIndex(nums = [3, 1, 2, 4])",
        "minimumIndex([4, 5, 6])",
        "minimumIndex(nums = [2, 2, 2, 1, 2, 2, 2, 2, 2])",
        "minimumIndex([5,3,4,5,4])",
        "minimumIndex([1,1,3,5,3,2,1])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 5, offers = [[1, 3, 2], [2, 5, 3], [3, 4, 4], [4, 5, 5]])",
        "maximizeTheProfit(n = 4, offers = [[0, 2, 2], [1, 3, 3], [2, 4, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 3], [1, 3, 1], [2, 4, 2]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 1], [2, 5, 3], [4, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 3, 3]])",
        "maximizeTheProfit(n = 2, offers = [[1, 10, 1], [2, 5, 1]])",
        "maximizeTheProfit(n = 6, offers = [[0, 1, 2], [1, 3, 1]])",
        "maximizeTheProfit(n = 1, offers = [[0, 1, 10], [2, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 3], [4, 5, 4], [1, 5, 1]])",
        "maximizeTheProfit(n = 4, offers = [[2, 5, 10], [1, 3, 10], [3, 1, 15]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [0, 0, 0, 0])",
        "maximumTripletValue(nums = [4, 2, 3, 1])",
        "maximumTripletValue(nums = [1,1,1,0,60])",
        "maximumTripletValue(nums = [2, 1, 3])",
        "maximumTripletValue(nums = [2,3,-2,4])",
        "maximumTripletValue(nums = [5, 6, 8, 1, 4, 2])",
        "maximumTripletValue(nums = [1, 6, 5, 11, -4])",
        "maximumTripletValue(nums = [2, 3, -1, 5, -2])",
        "maximumTripletValue(nums = [2, 4, 2, 5])",
        "maximumTripletValue(nums = [2,1,-1,-1,2,-2,1])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves = \"RLLL\")",
        "furthestDistanceFromOrigin(moves = \"RL\")",
        "furthestDistanceFromOrigin(moves = \"_LR\")",
        "furthestDistanceFromOrigin(moves = \"LLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R\")",
        "furthestDistanceFromOrigin(moves = \"R_RR\")",
        "furthestDistanceFromOrigin(moves = \"RR_LLL\")",
        "furthestDistanceFromOrigin(moves = \"RRL_LRRRLLRRR\")"
    ],
    "sample_149": [
        "finalString(s = \"rtsng\")",
        "finalString(s = 'rtsing')",
        "finalString(s = \"iirtts\")",
        "finalString(s = \"riitt\")",
        "finalString(s = 'frtsng')",
        "finalString(s = \"iitbb\")",
        "finalString(s = 'this is an awesome string')",
        "finalString(s = \"it is not always easy\")",
        "finalString(s = \"beerts\")",
        "finalString(s = 'hiiiiit')"
    ],
    "sample_162": [
        "maxSum(nums = [10, 11, 12, 13, 14, 15, 16])",
        "maxSum(nums = [10, 2, 3, 23])",
        "maxSum(nums = [41, 1, 4, 1, 8, 9])",
        "maxSum(nums = [13, 2, 12, 12, 10])",
        "maxSum(nums = [21, 53, 87, 39])",
        "maxSum(nums = [10, 23, 45, 1, 61, 22, 32])",
        "maxSum(nums = [1,4,40,100,20,50])",
        "maxSum(nums = [23, 57, 7, 72, 23, 27, 69, 39])",
        "maxSum(nums = [9, 74, 26, 37, 6, 18, 79, 48, 71])",
        "maxSum([555, 99, 444, 111, 111, 111, 111, 777, 555, 222, 111, 222, 222, 111, 222, 222])"
    ],
    "sample_230": [
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [2, 7, 11, 15])",
        "countWays(nums = [3, 4, 5, 2])",
        "countWays(nums = [1,1,2,2])",
        "countWays(nums = [2, 3, 5])",
        "countWays(nums = [1,1,1,1,1,1,1,1,1])",
        "countWays(nums = [5, 2, 3, 1])",
        "countWays(nums = [4, 2, 1, 2, 6, 4])",
        "countWays(nums = [3, 1, 2, 3, 4, 1, 2, 1])",
        "countWays(nums = [5, 5, 3, 4, 2, 2, 4])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 4, target = 13)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 3, offers = [[1, 2, 100], [3, 1, 200], [5, 2, 300]])",
        "maximizeTheProfit(N = 4, offers = [[0, 1, 1], [1, 2, 1], [0, 3, 1], [2, 4, 1]])",
        "maximizeTheProfit(N = 2, offers = [[1, 1, 3], [2, 3, 1]])",
        "maximizeTheProfit(N = 3, offers = [[0, 1, 2], [1, 2, 3], [1, 3, 3], [2, 3, 2], [3, 4, 1], [3, 4, 1], [4, 5, 2]])",
        "maximizeTheProfit(N = 10, offers = [[5, 1, 2], [2, 2, 1]])",
        "maximizeTheProfit(N = 4, offers = [[2, 4, 3], [5, 4, 3]])",
        "maximizeTheProfit(N = 10, offers = [[1, 0, 2], [4, 2, 1], [5, 0, 6], [6, 2, 1], [7, 0, 8], [10, 2, 1]])",
        "maximizeTheProfit(N = 3, offers = [[0, 2, 0], [1, 1, 1], [2, 4, 2], [3, 2, 1], [3, 6, 4], [4, 1, 1]])",
        "maximizeTheProfit(N = 10, offers = [[0, 2, 2], [1, 5, 4], [8, 1, 3], [2, 6, 0], [5, 9, 1]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 4], [4, 5, 10], [6, 2, 2], [1, 10, 2], [8, 1, 10], [2, 1, 1], [10, 1, 2]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 6, offers = [[1, 2, 100], [2, 3, 100], [3, 5, 100], [4, 5, 100], [5, 6, 100]])",
        "maximizeTheProfit(n = 3, offers = [[1, 0, 1], [2, 1, 1], [3, 2, 1]])",
        "maximizeTheProfit(n = 4, offers = [[3, 1, 2], [4, 1, 3]])",
        "maximizeTheProfit(n = 1, offers = [[1, 2, 3], [1, 3, 3]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 2], [3, 1, 3], [1, 1, 5]])",
        "maximizeTheProfit(n = 6, offers = [[1, 3, 3], [2, 5, 10], [3, 6, 6], [5, 6, 1]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 4], [0, 3, 1], [1, 2, 1], [2, 1, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 4], [3, 5, 10], [4, 5, 11], [5, 6, 50]])",
        "maximizeTheProfit(n = 3, offers = [[2, 3, 4], [4, 4, 2], [3, 1, 1], [5, 2, 2], [4, 3, 1]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 5], [2, 2, 5], [2, 3, 3], [2, 3, 7], [2, 4, 1], [2, 5, 3], [2, 5, 3], [2, 5, 7], [3, 2, 10], [3, 2, 15], [3, 3, 10], [3, 3, 15], [3, 4, 20], [3, 4, 25], [3, 5, 30], [3, 5, 35], [4, 2, 30], [4, 2, 35], [4, 3, 40], [4, 3, 45], [4, 4, 50], [4, 5, 55], [5, 3, 60], [5, 3, 65], [5, 4, 70], [5, 4, 75], [5, 5, 80], [5, 5, 85]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 40, 40, 40], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 40, 40, 40, 40, 40, 40, 40, 40, 40], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 11, 12], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 1, 3], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 2, 3, 4, 1, 1], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 13, 14, 15], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [5,2,1,4,2,5,6], target = 4)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,1,2,1,1])",
        "countCompleteSubarrays(nums = [1,1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1,1,2,3,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,3,4,4,5])",
        "countCompleteSubarrays(nums = [3, 5, 5, 3, 5, 5, 5])",
        "countCompleteSubarrays(nums = [1, 3, 5, 3, 2, 5, 1])"
    ],
    "sample_229": [
        "countWays(nums = [1, 1, 1])",
        "countWays(nums = [1,1,2])",
        "countWays(nums = [0, 2, 2, 3, 0])",
        "countWays(nums = [3,3,3,4,5])",
        "countWays(nums = [3, 2, 4, 1])",
        "countWays(nums = [5,1,1,2,0,0])",
        "countWays(nums = [1, 5, 6, 6, 7, 10])",
        "countWays(nums = [3, 4, 3, 1, 5])",
        "countWays(nums = [3,1,3,4,3,5])",
        "countWays(nums = [5, 2, 7, 1, 4, 8, 9, 10])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [4, 4, 4, 4, 4])",
        "maxIncreasingGroups(usageLimits = [100, 100, 100, 100, 100, 100])",
        "maxIncreasingGroups(usageLimits = [2, 1, 1, 3, 1, 1])",
        "maxIncreasingGroups(usageLimits = [20, 40, 20, 40])",
        "maxIncreasingGroups(usageLimits = [10,2,5,7,6])",
        "maxIncreasingGroups(usageLimits = [4, 5, 2, 3, 2, 4, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [5, 7, 1, 8, 3, 2, 1, 8])",
        "maxIncreasingGroups(usageLimits = [3,2,2,4,1,1,1,1,5,2,2,2,1,1,1,1,1,1,1,1])",
        "maxIncreasingGroups(usageLimits = [2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,",
        "maxIncreasingGroups(count = [1, 4, 4, 5, 1, 2, 2, 3, 2, 5, 6, 6, 1, 4, 2, 4, 3, 4])"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 4, k = 5)",
        "minimumSum(n = 4, k = 12)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 5, k = 14)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3, 4, 2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,4,3,2,2,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,2,1,2,3,4,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,1,1,1,3,3,4,3,2,4,2], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2,2,2,1,2,1,1,2,2,2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,1,7,1,7,5], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [2, 2, 3, 4, 5], m = 2, k = 3)",
        "countInterestingSubarrays(nums = [1,2,1,2,3,4,2,3,1,1,2,2,3,4,3,1], m = 3, k = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1])",
        "countCompleteSubarrays(nums = [1,1,2,2,3])",
        "countCompleteSubarrays(nums = [1,1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 2, 2, 1])",
        "countCompleteSubarrays(nums = [1,1,2,2,3,1])",
        "countCompleteSubarrays(nums = [1, 3, 2, 1, 4])",
        "countCompleteSubarrays(nums = [2, 2, 1, 2, 1, 2, 2, 2, 2, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 2, 3, 1, 3, 2, 2, 2, 2])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3,1,3,3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], k = 3)"
    ],
    "sample_170": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEF\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEFT\")",
        "isAcronym(words = [\"dear\", \"friend\"], s = \"DF\")",
        "isAcronym(words = [\"Like\", \"Sam\", \"Sung\"], s = \"LSS\")",
        "isAcronym(words = [\"like\", \"sam\", \"sung\"], s = \"ls\")",
        "isAcronym(words = [\"my\", \"name\", \"is\", \"john\"], s = \"MNJ\")",
        "isAcronym(words = [\"tea\", \"meet\", \"earn\", \"treat\"], s = \"EAT\")",
        "isAcronym(words = [\"e\", \"at\", \"aa\"], s = \"eat\")",
        "isAcronym(words = [\"google\", \"microsoft\", \"linkedin\"], s = \"gms\")",
        "isAcronym(words = [\"downtown\", \"ubiquitous\", \"interwar\", \"donut\"], s = \"DUIN\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '00101')",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = \"00111\")",
        "maximumOddBinaryNumber(s = '01110001')",
        "maximumOddBinaryNumber(s = '000011001')",
        "maximumOddBinaryNumber(s = '010010101110')",
        "maximumOddBinaryNumber(s = \"11000110100001010110\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 2, 3])",
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [2, 2, 3, 4])",
        "countWays(nums = [1, 2, 2, 3, 3, 3, 4, 5, 5])",
        "countWays(nums = [1, 2, 3, 2, 3, 1])",
        "countWays(nums = [1,2,1,2])",
        "countWays(nums = [2, 3, 2, 3, 3])",
        "countWays(nums = [1, 1, 3, 3, 5, 5, 7, 8, 9])",
        "countWays(nums = [1, 3, 5, 7, 2])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 5], [2, 3, 3], [3, 1, 1]])",
        "maximizeTheProfit(n = 2, offers = [[1, 1, 3], [2, 2, 4], [3, 3, 5]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 10], [3, 1, 10]])",
        "maximizeTheProfit(n = 6, offers = [[2, 3, 4], [3, 5, 1]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 5, 4], [3, 5, 10]])",
        "maximizeTheProfit(n = 3, offers = [[1, 2, 50], [2, 3, 100], [3, 1, 200]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [2, 5, 10], [3, 2, 30], [4, 1, 40], [5, 2, 50]])",
        "maximizeTheProfit(n = 4, offers = [[2, 1, 2], [2, 2, 4], [3, 2, 6], [4, 1, 8]])",
        "maximizeTheProfit(n = 10, offers = [[2, 2, 7], [4, 3, 15], [5, 5, 5], [1, 10, 100]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 3], [2, 5, 10], [3, 10, 11], [5, 6, 20], [5, 11, 50], [11, 12, 100]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [4,4,7,6,7])",
        "minimumIndex(nums = [1])",
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4, 2])",
        "minimumIndex(nums = [4,4,4,4,4])",
        "minimumIndex(nums = [3,3,3,3,3,1,3])",
        "minimumIndex(nums = [1,1,3,1])",
        "minimumIndex(nums = [4,4,3,3,4,4,2])",
        "minimumIndex(nums = [1,2,2,2,5,2])",
        "minimumIndex(nums = [1,1,1,1,2,2,2,2,3,3,4,4,5,5])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6], [7, 8]])",
        "numberOfPoints(nums = [[1,4],[2,3]])",
        "numberOfPoints(nums = [[1, 2], [2, 4], [3, 6]])",
        "numberOfPoints(nums = [[1, 1], [1, 2], [1, 3], [1, 4], [3, 1]])",
        "numberOfPoints(nums = [[0,100]])",
        "numberOfPoints(nums = [[1,4],[4,4]])",
        "numberOfPoints(nums = [[1,1],[3,4],[1,1]])",
        "numberOfPoints(nums = [[1,100],[5,3],[3,9]])",
        "numberOfPoints([[0,0],[1,1],[2,2],[4,4],[5,5],[5,6],[6,6],[6,7],[7,7],[8,8],[8,9]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \"o\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"abc\", \"def\", \"ghi\"], separator = \"de\")",
        "splitWordsBySeparator(words = [\"ba\", \"na\", \"na\"], separator = \"na\")",
        "splitWordsBySeparator(words = [\"hello\", \"world\", \"hi\", \"mom\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"a,b\", \"a,c\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"a\", \"a/a\", \"a\"], separator = \"/\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\"], separator = \"tw\")",
        "splitWordsBySeparator(words = [\"this\", \"is\", \"my\", \"name\"], separator = \"x\")",
        "splitWordsBySeparator(words = [\"supercalifragilisticexpialidocious\"], separator = \"cal\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 6, target = 9)",
        "minimumPossibleSum(n = 6, target = 9)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 20]])",
        "numberOfPoints(nums = [[1, 3], [2, 6], [8, 10], [15, 20]])",
        "numberOfPoints(nums = [[1,3],[2,6],[3,4],[4,5]])",
        "numberOfPoints(nums = [[1, 5], [2, 4], [3, 3]])",
        "numberOfPoints(nums = [[1, 5], [2, 7], [4, 10]])",
        "numberOfPoints(nums = [[1,2],[1,3]])",
        "numberOfPoints(nums = [[-5, 5], [1, 2]])",
        "numberOfPoints(nums = [[-1, 4], [2, 3]])",
        "numberOfPoints(nums = [[-10, 20], [-10, 12], [-10, 12], [-10, 10]])",
        "numberOfPoints([[3, 4], [2, 3], [5, 6], [7, 8], [10, 12]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1,1,2,1,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 2, 1], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 1, 3, 2], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,1,2,1,2,1], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [1,2,1,1,1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,2,2,1,5,6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 1, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 1, 2, 3, 4, 2, 3, 4, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,1,7,8,3], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [3,1,2,2,7,1], m = 4, k = 2)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 1, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [12,15,100], k = 2)",
        "sumIndicesWithKSetBits(nums = [12,15,10,0], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [12, 13, 15], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 2, 1, 8, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [5,1,12,14,13,5,10,13,13], k = 2)"
    ],
    "sample_203": [
        "minimumOperations(num = \"5\")",
        "minimumOperations(num = \"12345\")",
        "minimumOperations(num = \"125\")",
        "minimumOperations(\"100\")",
        "minimumOperations(num = \"4725\")",
        "minimumOperations(num = \"110011\")",
        "minimumOperations(num = \"75002\")",
        "minimumOperations(\"50250\")",
        "minimumOperations(num = \"220022\")",
        "minimumOperations(num = \"24301\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,3], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 3], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [2, 2, 2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,5,6,2], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,3], modulo = 2, k = 3)",
        "countInterestingSubarrays(nums = [0,1,0], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [4,3,2,7,8,2,3,1], modulo = 6, k = 2)",
        "countInterestingSubarrays(nums = [3,1,2,1,1,2], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [0,0,1,0,0,0,1,0,1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [5,3,4,4], modulo = 1000000007, k = 2)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1, 2, 1, 2, 3], K = 0)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 3], K = 0)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 1, 2, 3, 4], K = 3)",
        "longestEqualSubarray(A = [3,1,4,1,5], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,1,2,3], K = 2)",
        "longestEqualSubarray(A = [1,2,1,1,2,2,2], K = 3)",
        "longestEqualSubarray(A = [1,1,1,2,2,2,3,3,3,4,4,4], K = 2)",
        "longestEqualSubarray(A = [1, 2, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], K = 3)",
        "longestEqualSubarray(A = [1,1,1,1,3,3,3,3,2,2,2,2], K = 1)",
        "longestEqualSubarray(A = [3,2,2,3,2,3,3,3,2,2,2], K = 3)"
    ],
    "sample_146": [
        "finalString(s = 'pinter')",
        "finalString(s = 'ponter')",
        "finalString(s = 'pinter')",
        "finalString(s = 'pint')",
        "finalString(s = 'piniter')",
        "finalString(s = \"pinter\")",
        "finalString(s = \"inter\")",
        "finalString(s = \"nitro\")",
        "finalString(s = \"nieterp\")",
        "finalString(s = 'codewarriors')"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8, 1], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 2, 2, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 10, 40, 20, 50, 30], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [36, 12, 24, 25, 24, 50], target = 24)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 40, 50, 52, 56, 57, 58, 59, 60, 61], target = 45)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 4], [2, 4], [3, 6], [4, 4]])",
        "numberOfPoints(nums = [[1, 4], [2, 3]])",
        "numberOfPoints(nums = [[1,4], [2,3]])",
        "numberOfPoints(nums = [[1,5],[2,3]])",
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,5],[1,2],[6,10]])",
        "numberOfPoints(nums = [[0, 2], [5, 10], [13, 23], [24, 25]])",
        "numberOfPoints(nums = [[1,4],[2,5]])",
        "numberOfPoints(nums = [[0,0],[1,5]])",
        "numberOfPoints(nums = [[1,2],[3,4],[2,5]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 1, 1, 1])",
        "maxIncreasingGroups(A = [0, 1, 0, 3, 2, 3])",
        "maxIncreasingGroups(A = [0, 1, 0, 1, 1])",
        "maxIncreasingGroups([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])",
        "maxIncreasingGroups(A = [4, 5, 6, 3, 4, 3, 2, 5, 4, 1])",
        "maxIncreasingGroups(A = [1, 2, 2, 3, 1, 2, 2, 3, 1])",
        "maxIncreasingGroups(A = [6, 1, 2, 3, 4, 1])",
        "maxIncreasingGroups(A = [6, 3, 2, 2, 3, 5, 5, 10, 5])",
        "maxIncreasingGroups(A = [1,100,3,90,14,5])",
        "maxIncreasingGroups(A = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 12])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 3, offers = [[1,1,2],[2,3,3]])",
        "maximizeTheProfit(n=2, offers = [[1, 1, 2], [2, 2, 3]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 10], [2, 5, 20]])",
        "maximizeTheProfit(n = 4, offers = [[2, 3, 1], [4, 1, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 0, 100], [2, 1, 100], [3, 4, 100]])",
        "maximizeTheProfit(n = 4, offers = [[2,3,3],[4,1,1]])",
        "maximizeTheProfit(n = 6, offers = [[1,2,4],[3,3,1]])",
        "maximizeTheProfit(n = 5, offers = [[2,1,100],[3,2,100],[3,4,100],[4,5,100],[5,1,100]])",
        "maximizeTheProfit(n=4,offers = [[2, 1, 2], [3, 2, 3], [4, 3, 4]])",
        "maximizeTheProfit(n=5, offers = [[2,2,3],[1,2,2],[2,4,5],[3,2,3]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLR_LR\")",
        "furthestDistanceFromOrigin(moves = \"RRLRLRLRL\")",
        "furthestDistanceFromOrigin(moves = 'RRL')",
        "furthestDistanceFromOrigin(moves = 'RLLLL')",
        "furthestDistanceFromOrigin(moves = \"__RL____\")",
        "furthestDistanceFromOrigin(moves = \"RLL_LLL\")",
        "furthestDistanceFromOrigin(moves = \"R_LLL_LLLR_L\")",
        "furthestDistanceFromOrigin(moves = \"___RL_____LR\")",
        "furthestDistanceFromOrigin(moves = \"LRLRLRLRLRLRLRLRLRLRRLLRLRLRLLRLRLRLR\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 9)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 1, k = 3)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 3, k = 1)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[0,0],[3,5]])",
        "numberOfPoints(nums = [[0,2],[5,10],[13,23],[24,25]])",
        "numberOfPoints(nums = [[3,4],[2,3],[1,2]])",
        "numberOfPoints(nums = [[2,7],[3,5]])",
        "numberOfPoints([[0,2],[5,10],[13,23],[24,25]])",
        "numberOfPoints(nums = [[1,3],[1,3],[1,3],[2,5]])",
        "numberOfPoints([[1,5],[2,3],[3,4]])",
        "numberOfPoints(nums=[[1, 5], [2, 7], [3, 10]])",
        "numberOfPoints(nums = [[1, 5], [10, 12], [2, 10], [7, 8]])",
        "numberOfPoints([[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"25000\")",
        "minimumOperations(num = \"2525\")",
        "minimumOperations(num = \"00100\")",
        "minimumOperations(num = \"0250\")",
        "minimumOperations(num = \"1220\")",
        "minimumOperations(num = \"020200\")",
        "minimumOperations(num = \"010100101\")",
        "minimumOperations(num = \"0000002500000000\")",
        "minimumOperations(num = \"2050257522\")",
        "minimumOperations(num = \"3245175\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [4, 4, 3, 3, 4, 4])",
        "minimumIndex(nums = [1, 1, 2, 2, 3])",
        "minimumIndex(nums = [3, 1, 2, 3])",
        "minimumIndex(nums = [4,5,6,7,0,1,2])",
        "minimumIndex([0, 1, 0, 1, 1])",
        "minimumIndex(nums = [4,4,3,3,4,4,2])",
        "minimumIndex([1, 1, 2, 2, 3, 3, 3])",
        "minimumIndex([1, 1, 2, 2, 3, 1, 1, 1, 1, 1])",
        "minimumIndex(nums = [5, 2, 5, 2, 2])",
        "minimumIndex(nums = [5,7,6,5,4,7])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLR\")",
        "furthestDistanceFromOrigin(moves = 'RLR')",
        "furthestDistanceFromOrigin(moves = \"LLRRR_LL\")",
        "furthestDistanceFromOrigin(moves = 'R_L_L_R')",
        "furthestDistanceFromOrigin(moves = \"__LL_L___RRR\")",
        "furthestDistanceFromOrigin(moves = \"L_LL_R_L_R\")",
        "furthestDistanceFromOrigin(moves = \"LLL_RRRR_RRR\")",
        "furthestDistanceFromOrigin(moves = \"LR_LL__L_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_R_L_L_L_L_R_R_R_L_R_R_R_R\")"
    ],
    "sample_161": [
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [2, 4, 6, 8])",
        "maxSum(nums = [1, 1, 1])",
        "maxSum(nums = [1, 3, 6, 10, 15])",
        "maxSum(nums = [2, 2, 3])",
        "maxSum(nums = [11, 12])",
        "maxSum(nums = [1, 5, 2, 4, 8])",
        "maxSum(nums = [2,7,8,9])",
        "maxSum(nums = [20, 31, 12, 3])",
        "maxSum([-4, -1, 10, -6, -3])"
    ],
    "sample_160": [
        "maxSum(nums = [10, 2])",
        "maxSum(nums = [1, 2, 3, 4, 5])",
        "maxSum(nums = [3,4,6,45])",
        "maxSum(nums = [13, 10, 4, 12, 3])",
        "maxSum(nums = [1, 12, 15, 26, 3, 30, 4, 7])",
        "maxSum(nums = [10, 12, 2, 3, 4, 5, 5])",
        "maxSum(nums = [13, 15, 6, 12, 14, 12])",
        "maxSum(nums = [2,8,19,7,5,13,21,9,10])",
        "maxSum(nums = [0,6,0,1,1,5,3,0,9,6])",
        "maxSum(nums = [6,1,3,0,4,11,4,3,7,8])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one|two|three\", \"four|five\", \"six\"], separator = \"|\")",
        "splitWordsBySeparator(words = ['one,two,three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = ['one,two,three', 'four,five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one-two-three-four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = ['one;two;three', 'four', 'five', 'six'], separator = ';')",
        "splitWordsBySeparator(words = ['one|two|three', 'four', 'five', 'six|seven'], separator = '|')",
        "splitWordsBySeparator(words = ['one,two', 'three', 'four,', 'five,six'], separator = ',')",
        "splitWordsBySeparator(words = [\"one;two;three;four;five\", \"six;seven\"], separator = ';')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 40, 55, 20], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 5, 1, 1, 1, 4, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 12, 15], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1,1,3,4,5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [11,10,12,11,12], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3, 4, 1, 2, 3, 4], target=5)",
        "numberOfEmployeesWhoMetTarget(hours = [32, 40, 42, 59, 60], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 8, 5, 2, 3, 2, 7], target = 5)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [40, 40, 40, 40, 40], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4, 4, 4], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10,12,13,14], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [1,1,2,2,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [16,12,14,18,10,17,15], target = 16)"
    ],
    "sample_171": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 3, k = 13)"
    ],
    "sample_159": [
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3,1])",
        "maxSum(nums = [1,1,1,1,1])",
        "maxSum(nums = [6,10,7,4])",
        "maxSum(nums = [26,100,7,83,58,12])",
        "maxSum(nums = [1,6,0,2,3,5])",
        "maxSum(nums = [1,2,2,1,2,2,2,2,1,2])",
        "maxSum(nums = [99, 97, 98, 91, 92, 95])",
        "maxSum(nums = [30,40,27,31,26])",
        "maxSum(nums = [0, 1, 0, 3, 2, 4, 2, 3, 4, 0, 0, 0, 5, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 10)",
        "canSplitArray(nums = [1,4,3,2], m = 3)",
        "canSplitArray(nums = [1,4,3,2], m = 5)",
        "canSplitArray(nums = [2, 7, 9, 1, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 2)",
        "canSplitArray(nums = [1, 4, 5], m = 7)",
        "canSplitArray(nums = [1,2,3,4,5], m = 9)",
        "canSplitArray(nums = [3, 4, 5, 1, 1, 1, 2], m = 1)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"a\"], separator = \"b\")",
        "splitWordsBySeparator(words = [\"1,2\", \"3,4\", \"5,6\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"abc\", \"123\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"john doe\", \"jane doe\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"geek\", \"for\", \"geeks\"], separator = \"geek\")",
        "splitWordsBySeparator(words = [\"hey\", \"hey\", \"hey\"], separator = \"\")",
        "splitWordsBySeparator(words = [\"b,x,q,z\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"stars\", \"sea\", \"see\", \"eat\"], separator = \"s\")",
        "splitWordsBySeparator(words = [\"an\", \"am\", \"a\", \"za\", \"bu\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"Hack/Premium/Users\", \"Hack/Freemium/Users\"], separator = \"/\")"
    ],
    "sample_172": [
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 5, k = 3)",
        "minimumSum(n = 2, k = 7)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n=2, k=1)"
    ],
    "sample_228": [
        "countWays(nums = [0,0,0,0,0])",
        "countWays(nums = [0,0,0,0])",
        "countWays(nums = [0,0,0,0])",
        "countWays(nums = [1, 0, 1, 1, 0])",
        "countWays(nums = [2,0,1,0])",
        "countWays(nums = [1, 1, 2, 3, 4])",
        "countWays(nums = [1,3,4,5])",
        "countWays(nums = [3, 1, 2, 1])",
        "countWays([1,2,3,4,5,6,7,8,9,10])",
        "countWays(nums = [0, 0, 0, 1, 0, 0, 1, 1])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1001\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = '0000')",
        "maximumOddBinaryNumber(s = \"01000\")",
        "maximumOddBinaryNumber(s = \"10010\")",
        "maximumOddBinaryNumber(s = '1010101010')",
        "maximumOddBinaryNumber(s = '11001000')",
        "maximumOddBinaryNumber(s = \"1011100\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [0, 1, 0, 1, 1])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 1])",
        "minimumIndex(nums = [4, 4, 3, 3, 1, 1])",
        "minimumIndex(nums = [3, 1, 2, 3])",
        "minimumIndex(nums = [1, 1, 4, 2, 7, 2, 2, 2, 2])",
        "minimumIndex(nums = [3, 4, 4, 5, 5, 5, 2, 2])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [0, 0, 0, 1, 1])",
        "minimumIndex(nums = [2,3,3,2,2,2,2])",
        "minimumIndex(nums = [2,2,2,3,3,5,6,8,9,10])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,1,1,1,1,1], m = 3)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [2,1,5,6,2,3], m = 3)",
        "canSplitArray(nums = [1,4,1,5], m = 3)",
        "canSplitArray(nums = [1,4,2,5,1,1,1,1], m = 10)",
        "canSplitArray(nums = [2,4,4,4,6,8], m = 10)",
        "canSplitArray(nums = [2,8,12,6,5], m = 10)",
        "canSplitArray(nums = [2,3,4,5,6,7,8,9], m = 12)",
        "canSplitArray(nums = [10,5,20,15,10], m = 10)",
        "canSplitArray(nums = [2,1,3,5,2,3,7,2,1,1,2,1,3,1,4,5,2,1,2,1], m = 12)"
    ],
    "sample_147": [
        "finalString(s = 'string')",
        "finalString(s = \"string\")",
        "finalString(s = 'thisisastring')",
        "finalString(s = \"sting\")",
        "finalString(s = \"ritsi\")",
        "finalString(s = \"iitbba\")",
        "finalString(s = 'strins')",
        "finalString(s = 'itshil')",
        "finalString(s = \"gorgeous\")",
        "finalString(s = \"absiocm\")"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 4, k = 20)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,4,3,2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 4)",
        "canSplitArray(nums = [1,4,3], m = 5)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 7)",
        "canSplitArray(nums = [1,4,3,2,1,1], m = 5)",
        "canSplitArray(nums = [4, 3, 2, 3, 5, 2, 1], m = 9)",
        "canSplitArray(nums = [2, 4, 5, 10], m = 5)",
        "canSplitArray(nums = [1,4,5,8,9,10], m = 7)",
        "canSplitArray(nums = [0, 1, 1, 1], m = 3)",
        "canSplitArray(nums = [0,0,1,1,1,1,1], m = 4)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 3])",
        "countCompleteSubarrays(nums = [1, 1, 3, 3, 3, 6, 9])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 4])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,1,1,3,3,3,3,4,4,4,4])",
        "countCompleteSubarrays(nums = [0, 0, 0, 1, 1, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1,1,2,3,2,2,3,4,3,3])"
    ],
    "sample_150": [
        "finalString(s = 'string')",
        "finalString(s = \"iitss\")",
        "finalString(s = 'inrigst')",
        "finalString(s = 'this is not this')",
        "finalString(s = 'mississippi')",
        "finalString(s = \"git\")",
        "finalString(s = \"iples\")",
        "finalString(s = 'fintstein')",
        "finalString(s = 'abiirgbr')",
        "finalString(s = \"I will take this challenge seriously and will finish this string\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 4, target = 1)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 2, target = 0)"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 12)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,4,2,3,3], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1,1,1,0,1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [23, 2, 6, 2, 2], modulo = 13, k = 2)",
        "countInterestingSubarrays(nums = [2,4,5,7,8], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,3,3,2,4,5], modulo = 3, k = 3)",
        "countInterestingSubarrays(nums = [2,3,3,1,2,5,2,4], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [0, 1, 0, 0, 1], modulo = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,3,5,2], modulo = 4, k = 3)",
        "countInterestingSubarrays(nums = [2,5,6,9,10,11,13], modulo = 13, k = 3)",
        "countInterestingSubarrays(nums = [2,3,5,3,5,4,5,2,3,5,2,3,5,4,5,4,5,5], modulo = 5, k = 4)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [2, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [12,13,15], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 1, 2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [6, 5, 4, 3, 2, 1, 0], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 2, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 5, 2, 0], k = 2)"
    ],
    "sample_151": [
        "finalString(s = 'ring')",
        "finalString(s = 'rtsning')",
        "finalString(s = 'iirs')",
        "finalString(s = 'rat')",
        "finalString(s = 'turnings')",
        "finalString(s = 'blueish')",
        "finalString(s = 'imt')",
        "finalString(s = \"siihrtsng\")",
        "finalString(\"his\")",
        "finalString(s = \"asdifjfiid\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,1,2,1,2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 0, 1, 1, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 17, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [5,17,0], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 1, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [4294578693], k = 3)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 5, 6])",
        "maxIncreasingGroups(usageLimits = [2, 3, 4, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 1, 1, 1, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [6, 4, 3, 4])",
        "maxIncreasingGroups([1, 1, 1, 2, 3, 3])",
        "maxIncreasingGroups(usageLimits = [1, 1, 2, 3, 5, 7, 10])",
        "maxIncreasingGroups(usageLimits = [8, 2, 3, 5, 4, 6, 7])",
        "maxIncreasingGroups(usageLimits = [3, 2, 2, 3, 1, 2, 3, 2, 1])",
        "maxIncreasingGroups(usageLimits = [3,3,2,5,4,3,2,5,4,5,4,5,2,4,3,2,5,3,2,3,2,2,1,2,2,2,3,3,4,4,4,3,2,3,3,3,3,3,3,2,2,3,3,4,5,2,5,2,5,3,2,3,4,3,2,5,2,4,2,5,4,2,3,4,2,5,2,5,5,3,3,4,4,4,3,3,5,4,2,4,2,3,2,2,4,3,3,3,2,4,3,4,4,5,3,2,3,2,4,2,3,2,4,4,2,3,4,2,5,5,4,2,3,2,3,4,2,5,4,2,5,3,5,5,4,4,2,4,4,4,3,2,3,4,3,3,5,4,3,4,3,4,2,4,5,3,3,2,3,4,2,3,2,5,3,4,2,5,2,5,2,4,3,3,3,4,2,2,3,4,4,3,3,2,3,3,3,2,4,5,3,3,3,3,2,3,3,4,5,3,5,3,2,3,2,3,2,3,4,4,2,3,3,4,4,4,5,2,5,5,4,4,4,4,3,4,2,3,3,3,3,2,5,3,2,5,2,4,2,5,3,3,4,5,2,2,2,3,2,4,2,5,5,3,2,3,5,4,5,3,3,4,2,4,5,3,4,3,4,2,2,4,4,2,5,2,5,2,4,3,4,4,"
    ],
    "sample_204": [
        "minimumOperations(s = \"00000\")",
        "minimumOperations(s = \"0000000\")",
        "minimumOperations(s = \"2000\")",
        "minimumOperations(s = \"25000\")",
        "minimumOperations(s = \"00100010\")",
        "minimumOperations(s = \"250025\")",
        "minimumOperations(s = \"100101101\")",
        "minimumOperations(s = \"001101010101\")",
        "minimumOperations(s = \"0025005025007500\")",
        "minimumOperations(s = \"000250502250052200\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 40, 20, 30, 50, 30, 20], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 40, 40, 4], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 4, 6, 8, 10], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5, 6, 7, 8, 6, 5, 4], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 3, 10, 10, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 3, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 10, 15, 20], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13], target = 4)"
    ],
    "sample_148": [
        "finalString(s = 'ponter')",
        "finalString(s = 'potter')",
        "finalString(s = \"pointern\")",
        "finalString(s = 'pinetree')",
        "finalString(s = 'ineter')",
        "finalString(\"piter\")",
        "finalString(s = 'potatoes')",
        "finalString(s = \"nitrop\")",
        "finalString(s = \"silent\")",
        "finalString(s = \"iitemmi\")"
    ],
    "sample_168": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEB\")",
        "isAcronym(words = [\"dear\", \"friend\"], s = \"DF\")",
        "isAcronym(words = [\"USA\", \"FBI\"], s = \"UAFBI\")",
        "isAcronym(words = [\"deer\", \"door\", \"cake\", \"card\"], s = \"ODCA\")",
        "isAcronym(words = [\"debit\", \"card\", \"issued\", \"by\", \"visa\"], s = \"dcbiv\")",
        "isAcronym(words = [\"debauchee\", \"debaucher\", \"debauchery\", \"debauchter\"], s = \"dbr\")",
        "isAcronym(words = ['class', 'meet', 'code'], s = 'cms')",
        "isAcronym(words = [\"H\", \"E\", \"O\", \"P\", \"A\"], s = \"HEOPA\")",
        "isAcronym(words = ['bathroom', 'kitchen', 'laundry room'], s = 'bk')",
        "isAcronym(words = [\"de\", \"la\", \"Ho\", \"telescopi\", \"ed\"], s = \"Help\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,1,1,1,1], target = 3)",
        "minOperations(nums = [1, 3, 5], target = 8)",
        "minOperations(nums = [1, 1, 1], target = 2)",
        "minOperations(nums = [0, 0, 0], target = 0)",
        "minOperations(nums = [2, 3, 10, 5, 7], target = 9)",
        "minOperations(nums = [4,1,4], target = 11)",
        "minOperations(nums = [0,1,2,2,3], target = 5)",
        "minOperations(nums = [2,2,2,2,2,2,2], target = 4)",
        "minOperations(nums = [2, 1, 3, 0], target = 1)",
        "minOperations(nums = [500,1000,3,2], target = 12)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '0101')",
        "maximumOddBinaryNumber(s = '10101')",
        "maximumOddBinaryNumber(s = '101101')",
        "maximumOddBinaryNumber('111')",
        "maximumOddBinaryNumber(s = \"1110000\")",
        "maximumOddBinaryNumber(s = '000111001')",
        "maximumOddBinaryNumber(s = '00110010110111')",
        "maximumOddBinaryNumber(s = \"0000010011010111\")",
        "maximumOddBinaryNumber(s = '1001001010011001100101')"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '1010')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = '10001')",
        "maximumOddBinaryNumber(s = '11110000')",
        "maximumOddBinaryNumber(s = '100010101001010')",
        "maximumOddBinaryNumber(s = \"0010001010110011011\")",
        "maximumOddBinaryNumber(s
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 3, target = 15)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 3, target = 14)",
        "minimumPossibleSum(n = 4, target = 18)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLLLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLLR\")",
        "furthestDistanceFromOrigin(moves = \"LRRRL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LRRLRLLRRRL\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 5, target = 6)",
        "minimumPossibleSum(n = 1, target = 3)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 4, 4, 4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10, 10, 10], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 40, 80, 60], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 14, 5], target = 14)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 2, 4, 2], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 10, 10, 8], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [16, 16, 15, 16, 17, 18], target = 16)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [0, 2])",
        "countWays(nums = [0, 0, 0, 3, 0, 1])",
        "countWays(nums = [0,0,1])",
        "countWays(nums = [2, 0, 1, 3])",
        "countWays(nums = [1, 1, 3, 5, 4])",
        "countWays(nums = [2, 2, 1, 0])",
        "countWays(nums = [0, 1, 2, 0, 4, 5])",
        "countWays(nums = [0, 1, 0, 1, 1, 0, 1])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLR\")",
        "furthestDistanceFromOrigin(\"LLLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRLLLLRRLLRRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRLLRLL_R\")",
        "furthestDistanceFromOrigin(moves = \"RLRRRLLRLLRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLLRLLRRRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRLRLLRRLLRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRLRRRLLRLL_RLLRRLLRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLLLRLRLRLRLRLRLRLRLRLRLLRRLRLRLRLRLRLRLRRRLRLRLL\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 4, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 1, target = 1)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 2, 2, 3])",
        "countCompleteSubarrays(nums = [4, 4, 4, 4])",
        "countCompleteSubarrays(nums = [1, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 3, 3, 4, 5])",
        "countCompleteSubarrays(nums = [1, 1, 2, 2, 2, 2, 3, 3, 3, 3])",
        "countCompleteSubarrays(nums = [3, 2, 3, 2, 3, 2, 3, 2])",
        "countCompleteSubarrays(nums = [0, 0, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 4, 3, 2], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 5)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 5)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 4)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1,4,6,7,10], m = 16)",
        "canSplitArray(nums = [4, 1, 3, 5, 7, 2], m = 11)",
        "canSplitArray(nums = [1, 10, 5, 9], m = 14)"
    ],
    "sample_200": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 100)",
        "minOperations(nums = [1, 2, 3], target = 2)",
        "minOperations(nums = [1, 3, 5], target = 10)",
        "minOperations(nums = [1, 2, 3, 4], target = 6)",
        "minOperations(nums = [1, 3, 5, 7], target = 6)",
        "minOperations(nums = [1, 2, 3, 5], target = 11)",
        "minOperations(nums = [2, 4, 1, 4], target = 10)",
        "minOperations(nums = [1, 5, 2, 3, 1], target = 10)",
        "minOperations(nums = [10, 2, 3, 8, 1, 3], target = 10)",
        "minOperations(nums = [110, 55, 20], target = 155)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1,1,2,1,2], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,1,2,1,2], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 0], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [12, 10, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 3, 4, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [12,13,14], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 5, 7, 4, 2, 4], k = 3)"
    ],
    "sample_165": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"DEBC\")",
        "isAcronym(words = [\"deferred\", \"execution\"], s = \"DEFERRED\")",
        "isAcronym(words = [\"deferred\", \"interface\", \"binder\"], s = \"DIB\")",
        "isAcronym(words = [\"debit\", \"card\", \"apartment\"], s = \"DC\")",
        "isAcronym(words = [\"dear\", \"thanks\", \"best\", \"friend\"], s = \"DTHB\")",
        "isAcronym(words = [\"dear\", \"ic\", \"ea\"], s = \"DEAREIC\")",
        "isAcronym(words = [\"usa\", \"i\", \"am\", \"an\", \"american\"], s = \"IAM\")",
        "isAcronym(words = [\"department\", \"responsible\", \"regulation\"], s = \"DRR\")",
        "isAcronym(words = [\"dept\", \"ai\", \"eggs\"], s = \"DAI\")",
        "isAcronym(words = [\"c\", \"b\", \"b\"], s = \"bac\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 2, 3, 4, 7])",
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [1, 2, 2])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [2, 3, 3, 4, 5, 5])",
        "countWays(nums = [1, 1, 2, 3, 3, 3])",
        "countWays(nums = [4,4,4,5])",
        "countWays(nums = [2, 1, 3, 2, 1, 3, 2, 1])",
        "countWays(nums = [3, 3, 4, 5, 4, 5])",
        "countWays(nums = [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1, 2])"
    ],
    "sample_158": [
        "maxSum(nums = [2, 3])",
        "maxSum(nums = [4, 7, 1, 0])",
        "maxSum(nums = [10, 10, 20, 11])",
        "maxSum([-12, -1, -2])",
        "maxSum(nums = [10, 2, 10, 8, 9])",
        "maxSum(nums = [900, 90, 9, 80, 900])",
        "maxSum([13, 7, 3, 15])",
        "maxSum(nums = [96, 95, 85, 84])",
        "maxSum(nums = [13, 71, 68, 74, 8, 26, 94, 33])",
        "maxSum(nums = [55, 29, 34, 34, 29, 55, 29, 34, 29, 34])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3,3,2,4,2], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4], k = 5)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[1, 0, 3], [2, 1, 1], [4, 4, 2]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 5], [2, 2, 10]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 100]])",
        "maximizeTheProfit(n = 4, offers = [[2, 5, 0], [3, 10, 20], [5, 6, 100], [1, 3, 40]])",
        "maximizeTheProfit(n = 5, offers = [[2, 1, 1], [3, 2, 1]])",
        "maximizeTheProfit(n = 3, offers = [[2, 1, 3], [2, 2, 4]])",
        "maximizeTheProfit(n = 4, offers = [[1, 0, 2], [2, 1, 3], [4, 2, 4], [1, 3, 100], [2, 3, 4]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 10], [2, 2, 10], [0, 4, 20]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 10], [2, 4, 20], [4, 5, 30]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 4], [1, 3, 1], [2, 4, 10], [3, 1, 1], [3, 2, 5]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [5, 4, 3, 2, 1])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15])",
        "maxIncreasingGroups(x = [1, 4, 11, 3, 5, 12, 2, 10, 6])",
        "maxIncreasingGroups(x = [1, 5, 2, 4, 3])",
        "maxIncreasingGroups(x = [3,2,3,1,2,4,5,5])",
        "maxIncreasingGroups(x = [1, 2, 2, 1, 2])",
        "maxIncreasingGroups(x = [1, 5, 2, 3, 4, 5])",
        "maxIncreasingGroups(x = [1,1,1,2,2,2,3,3])",
        "maxIncreasingGroups(x = [10, 9, 2, 5, 3, 4, 12, 8, 8, 7, 1, 12, 3])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [2, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 1)",
        "sumIndicesWithKSetBits(nums = [2,3,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [5, 0, 2], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,0,1,1,1,1], k = 3)"
    ],
    "sample_207": [
        "minimumOperations(num = \"100\")",
        "minimumOperations(num = \"50000\")",
        "minimumOperations(num = \"02002\")",
        "minimumOperations(num = \"00255\")",
        "minimumOperations(num = \"99\")",
        "minimumOperations(num = \"2524\")",
        "minimumOperations(\"250\")",
        "minimumOperations(num = \"00011000\")",
        "minimumOperations(num = \"100000000101001001\")",
        "minimumOperations(num = \"121002125000\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"RLLL\")",
        "furthestDistanceFromOrigin(moves=\"LLLR\")",
        "furthestDistanceFromOrigin(moves = \"LRRLR\")",
        "furthestDistanceFromOrigin(moves = \"RLRRLRRL\")",
        "furthestDistanceFromOrigin(moves = \"RLLRRRRLLR\")",
        "furthestDistanceFromOrigin(moves = \"RRLRLRLRRRL\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"4000\")",
        "minimumOperations(num = \"7502500\")",
        "minimumOperations(num = '7502500')",
        "minimumOperations(num = \"01\")",
        "minimumOperations(num = \"0030\")",
        "minimumOperations(num = '500')",
        "minimumOperations(num = '500025')",
        "minimumOperations(num = \"122002525\")",
        "minimumOperations(num = \"910592050\")"
    ],
    "sample_155": [
        "canSplitArray(nums = [1,4,3,2,5,2], m = 4)",
        "canSplitArray(nums = [1,4,3,2,5,2], m = 4)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 3)",
        "canSplitArray(nums = [1, 4, 3, 2], m = 4)",
        "canSplitArray(nums = [7,2,5,10,8], m = 18)",
        "canSplitArray(nums = [1, 1, 1, 1, 1, 1], m = 2)",
        "canSplitArray(nums = [1,4,3,2,4,3,2,5,2], m = 4)",
        "canSplitArray(nums = [4,2,2,5,1,1,2], m = 3)",
        "canSplitArray(nums = [4, 6], m = 6)",
        "canSplitArray(nums = [4, 1, 2, 2, 5, 1, 4], m = 11)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1, 1, 1, 1, 1, 1, 1])",
        "countCompleteSubarrays(nums = [1,1,1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1,1,2,1,2,1])",
        "countCompleteSubarrays(nums = [1,1,2,1,2])",
        "countCompleteSubarrays(nums = [1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 1, 3, 6, 10, 15])",
        "countCompleteSubarrays(nums = [1,1,1,3])",
        "countCompleteSubarrays(nums = [2, 2, 4, 4, 4])",
        "countCompleteSubarrays(nums = [0, 1, 1, 1, 0, 1, 1, 0, 1])"
    ],
    "sample_202": [
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"25750\")",
        "minimumOperations(num = \"1001\")",
        "minimumOperations(num = \"0025\")",
        "minimumOperations(num = \"01000\")",
        "minimumOperations(num = \"2075\")",
        "minimumOperations(num = \"0100100\")",
        "minimumOperations(\"000000000\")",
        "minimumOperations(\"1050\")",
        "minimumOperations(num = \"0120101\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"\"], b = \"\")",
        "splitWordsBySeparator(a
        "splitWordsBySeparator(a = [\"banana\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"one/two\", \"three/four\", \"five/six\"], b = \"/\")",
        "splitWordsBySeparator(a = [\"foo\"], b = \"\")",
        "splitWordsBySeparator(a = [\"hello|world\", \"foo|bar|baz\"], b = \"|\")",
        "splitWordsBySeparator(a = [\"a/b/c\", \"d//e/f\"], b = \"/\")",
        "splitWordsBySeparator(a = [\"abcd\", \"xx\"], b = \"xx\")",
        "splitWordsBySeparator(a = [\"coffee\", \"coffee\", \"coffee\"], b = \"e\")",
        "splitWordsBySeparator(a = [\"apple\", \"grapes\", \"orange\"], b = \"or\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [12, 17, 22], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 3, 4, 5, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 4, 5, 8], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 0, 1, 0, 0, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 0, 0, 1, 1, 1, 1], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 2, 4, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 7, 6, 7, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 20, 29, 30, 40, 50, 60, 61, 62], k = 2)",
        "sumIndicesWithKSetBits(nums = [10, 5, 2, 10, 11, 11, 13], k = 3)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = \"100\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"0001\")",
        "maximumOddBinaryNumber(s = '00000000')",
        "maximumOddBinaryNumber(s = \"0111\")",
        "maximumOddBinaryNumber(s = \"01010101\")",
        "maximumOddBinaryNumber(s = '11111')",
        "maximumOddBinaryNumber(s = \"10100101\")",
        "maximumOddBinaryNumber(s = '00111011110100011011')"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3,4,5,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3,1,2,3,4,1,2,3,4], k = 3)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3], k = 0)",
        "longestEqualSubarray(nums = [1, 1, 1, 2, 2, 3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,2,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,2,3,1,2,3,4,1,2,3,4], k = 3)",
        "longestEqualSubarray(nums = [1, 2, 1, 2, 3, 1, 3, 4, 1, 4, 2, 3, 1, 1, 3], k = 3)",
        "longestEqualSubarray(nums = [3, 3, 3, 2, 2, 3], k = 1)",
        "longestEqualSubarray(nums = [2, 5, 3, 1, 6, 2], k = 3)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '1001')",
        "maximumOddBinaryNumber(s = \"1100\")",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '001011')",
        "maximumOddBinaryNumber(s = \"110\")",
        "maximumOddBinaryNumber(s = '11100')",
        "maximumOddBinaryNumber(s = \"10001\")",
        "maximumOddBinaryNumber(s = \"10101101011\")",
        "maximumOddBinaryNumber(s = '100100111111')",
        "maximumOddBinaryNumber(\"10100110011\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debitcard\")",
        "isAcronym(words = [\"debit\", \"card\"], s = \"debit card\")",
        "isAcronym(words = [\"a\", \"b\", \"c\"], s = \"abc\")",
        "isAcronym(words = [\"b\", \"a\", \"n\", \"a\"], s = \"baaa\")",
        "isAcronym(words = [\"this\", \"is\", \"a\", \"test\"], s = \"thisisattest\")",
        "isAcronym(words = [\"he\", \"llo\", \"world\"], s = \"hello\")",
        "isAcronym([\"HTML\", \"CSS\", \"XML\"], \"HTMLCSSXML\")",
        "isAcronym(words = [\"Hi\", \"You\"], s = \"HILYou\")",
        "isAcronym(words = [\"we\", \"teach\", \"pack\", \"python\", \"queen\", \"meet\", \"tea\"], s = \"WeTeachPcPt\")"
    ],
    "sample_163": [
        "maxSum(nums = [10, 100])",
        "maxSum(nums = [1, 3, 2, 4])",
        "maxSum([13, 12])",
        "maxSum(nums = [1, 5, 4, 3, 6, 2])",
        "maxSum(nums = [1, 5, 8, 9, 9, 10])",
        "maxSum(nums = [1, 1000, 100, 10, 1000])",
        "maxSum([9, 8, 7, 7, 1])",
        "maxSum(nums = [210, 240, 50, 80, 110])",
        "maxSum(nums = [378, 551, 228, 566, 882])",
        "maxSum(nums = [957,891,442,633,229,831,891,481,174,359])"
    ]
}