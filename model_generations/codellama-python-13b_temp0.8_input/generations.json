{
    "sample_287": [
        "findMinimumOperations(s1 = \"\", s2 = \"\", s3 = \"\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abd\", s3 = \"abd\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"12\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"efgh\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aab\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"car\", s2 = \"bar\", s3 = \"dar\")",
        "findMinimumOperations(s1 = \"qqqqqqqqqqqqqqqqqqqq\", s2 = \"wwwwwwwwwwwwwwwwwwww\", s3 = \"eeeeeeeeeeeeeeeeeeee\")",
        "findMinimumOperations(s1 = \"dum\", s2 = \"dum\", s3 = \"dum\")",
        "findMinimumOperations(s1 = \"qwe\", s2 = \"qwe\", s3 = \"qwe\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"ababbb\")",
        "longestSemiRepetitiveSubstring(s = \"aababbb\")",
        "longestSemiRepetitiveSubstring(s = \"abacaba\")",
        "longestSemiRepetitiveSubstring(s = \"ABABAB\")",
        "longestSemiRepetitiveSubstring(s = \"abbaacdaabb\")",
        "longestSemiRepetitiveSubstring(s = \"xyyyzzzzyyy\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"codewars\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ac\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"xyz\", \"aaa\"])",
        "maximumNumberOfStringPairs(words = [\"tme\", \"eta\", \"exe\"])",
        "maximumNumberOfStringPairs(words = ['', '1', '11'])",
        "maximumNumberOfStringPairs(words = [\"\", \"\", \"\", \"358\"])",
        "maximumNumberOfStringPairs(words = [\"kek\", \"baa\", \"cak\", \"abk\"])",
        "maximumNumberOfStringPairs(words = [\"hello\", \"world\", \"oh\", \"ha\", \"elloh\", \"ho\"])",
        "maximumNumberOfStringPairs(words = [\"fbk\", \"ahy\", \"xqy\", \"qhj\", \"rvq\", \"fyn\", \"zqn\", \"qey\", \"awe\", \"ipy\", \"eyj\", \"fqn\", \"wib\", \"ihi\", \"dle\", \"rvj\", \"bxo\", \"xqm\", \"ezy\", \"xmw\", \"nbo\", \"fyw\", \"xqm\", \"tcv\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"1111\", s2 = \"1221\", x = 2)",
        "minOperations(s1 = \"zzzzzyyyyy\", s2 = \"yyyyyyyyxx\", x = 2)",
        "minOperations(s1 = \"d\", s2 = \"b\", x = 1)",
        "minOperations(s1 = \"edcba\", s2 = \"abcde\", x = 2)",
        "minOperations(s1 = \"ab\", s2 = \"12\", x = 1)",
        "minOperations(s1 = \"cabba\", s2 = \"abbac\", x = 3)",
        "minOperations(s1 = \"zzzz\", s2 = \"yyyy\", x = 1)",
        "minOperations(s1 = \"12\", s2 = \"45\", x = 2)",
        "minOperations(s1 = \"kjr\", s2 = \"jkr\", x = 2)",
        "minOperations(s1 = \"zpzzqx\", s2 = \"zzoyzx\", x = 1)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"bat\", \"tab\", \"cat\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"baba\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"p\", \"q\", \"p\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"ba\", \"adc\"])",
        "maximumNumberOfStringPairs(words = [\"p\", \"a\", \"p\"])",
        "maximumNumberOfStringPairs(words = [\"cba\", \"dcbaabcd\", \"abcdabcd\", \"abcdabcde\", \"abcdeabcde\", \"eabcdeabcde\"])",
        "maximumNumberOfStringPairs(words = [\"n\", \"n\", \"n\", \"n\", \"n\", \"n\", \"n\"])",
        "maximumNumberOfStringPairs(words = [\"cd\", \"cd\", \"def\", \"abc\", \"abcd\", \"ef\", \"cde\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"cba\", \"bab\", \"abac\"])",
        "maximumNumberOfStringPairs(words = [\"aaa\", \"abc\", \"aa\", \"d\", \"bb\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [3, 3, 1, 3, 2])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [4,4,5,5,5,5,6,6,6,6,7,7,7])",
        "minGroupsForValidAssignment(nums = [4, 2, 5, 1, 1])",
        "minGroupsForValidAssignment(nums = [2,3,2,1,3,5])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 4, 5, 7])",
        "minGroupsForValidAssignment(nums = [5, 5, 4, 3, 3, 2, 2, 1, 1, 0, 0])",
        "minGroupsForValidAssignment(nums = [7, 7, 4, 4, 5, 5, 2, 2, 2, 2, 4, 4, 4, 1, 1, 5, 5, 5, 5, 1])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 100, m = 5)",
        "differenceOfSums(n = 5, m = 2)",
        "differenceOfSums(n = 4, m = 3)",
        "differenceOfSums(n = 30, m = 3)",
        "differenceOfSums(n = 2, m = 2)",
        "differenceOfSums(n = 3, m = 10)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"00100111\", k = 3)",
        "shortestBeautifulSubstring(s = \"1112001201\", k = 2)",
        "shortestBeautifulSubstring(s = \"111111111\", k = 9)",
        "shortestBeautifulSubstring(s = \"221112\", k = 3)",
        "shortestBeautifulSubstring(s = \"0011223311\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111122\", k = 1)",
        "shortestBeautifulSubstring(s = \"001111100100\", k = 3)",
        "shortestBeautifulSubstring(s = '121231123', k = 3)",
        "shortestBeautifulSubstring(s = \"00000010000111011\", k = 2)",
        "shortestBeautifulSubstring(s = '111200101100000101100000', k = 3)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ab\", s3 = \"ab\")",
        "findMinimumOperations(s1 = \"banana\", s2 = \"banana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abcde\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaaa\")",
        "findMinimumOperations(s1 = \"123\", s2 = \"123\", s3 = \"12\")",
        "findMinimumOperations(s1 = \"aaaaa\", s2 = \"aaaaa\", s3 = \"aaab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcabc\", s3 = \"bcabc\")",
        "findMinimumOperations(s1 = \"1234\", s2 = \"561234\", s3 = \"567891234\")",
        "findMinimumOperations(s1 = \"xwyxwyx\", s2 = \"ywxwyxx\", s3 = \"yxyxwyx\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abababab\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abaab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbba\")",
        "longestSemiRepetitiveSubstring(s = \"bbcbbd\")",
        "longestSemiRepetitiveSubstring(s = \"qqwertyy\")",
        "longestSemiRepetitiveSubstring(s = \"aabcccddddeeef\")",
        "longestSemiRepetitiveSubstring(s = \"ppcsbprxciq\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3, 0], nums2 = [4, 5, 6, 7])",
        "minSum(nums1 = [0, 0, 1, 1], nums2 = [1, 1, 0, 0])",
        "minSum(nums1 = [1, 1, 0, 1], nums2 = [1, 1, 1, 1])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [4, 5, 6, 0])",
        "minSum(nums1 = [2, 3], nums2 = [0, 1])",
        "minSum(nums1 = [1, 0, 2, 3], nums2 = [4, 5, 0])",
        "minSum(nums1 = [0, 0, 0, 1], nums2 = [0, 1])",
        "minSum(nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9], nums2 = [10, 20, 30, 40, 50, 60, 70, 80, 90])",
        "minSum(nums1 = [3, 2, 4], nums2 = [1, 5, 1])",
        "minSum(nums1 = [3, 2, 4, 6], nums2 = [6, 2, 5, 4])"
    ],
    "sample_289": [
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"111111\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"0000000\")",
        "minimumSteps(s = \"11000\")",
        "minimumSteps(s = \"1000001\")",
        "minimumSteps(s = \"111111111111111111111111\")",
        "minimumSteps(s = \"1001001\")",
        "minimumSteps(s = \"0001110001110100101\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [-3, -2, -1])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [0, 1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [0, 2, 3])",
        "maximumTripletValue(nums = [1, -1, -5])",
        "maximumTripletValue(nums = [-1, -1, -1, 1, 1, 1])",
        "maximumTripletValue(nums = [0, -1, 0, 1, -1, 1])",
        "maximumTripletValue(nums = [3, 3, 3, 3, 3])",
        "maximumTripletValue(nums = [3, -7, -4, -5])",
        "maximumTripletValue(nums = [2, -2, 3, -4, -5, 8, -11])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"ioiioi\", k = 5)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"aeiou\", k = 2)",
        "beautifulSubstrings(s = \"ioiioi\", k = 3)",
        "beautifulSubstrings(s=\"leetcode\", k=5)",
        "beautifulSubstrings(s=\"aeiaaioaaaaeiiiiouuuooaauuaeiu\", k=5)",
        "beautifulSubstrings(s = \"abbcai\", k = 2)",
        "beautifulSubstrings(s=\"aabbb\", k=2)",
        "beautifulSubstrings(s = \"ueioaueioaueioaeoaiu\", k = 2)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"abab\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"101\")",
        "minimumBeautifulSubstrings(s = \"1111\")",
        "minimumBeautifulSubstrings(s = \"10010\")",
        "minimumBeautifulSubstrings(s = \"010100110\")",
        "minimumBeautifulSubstrings(s = \"zxb\")",
        "minimumBeautifulSubstrings(s = \"01010010100\")",
        "minimumBeautifulSubstrings(s = \"acbabc\")",
        "minimumBeautifulSubstrings(s = \"100100000100010101010101100000100100110\")"
    ],
    "sample_313": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]])",
        "matrixSum(a = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])",
        "matrixSum(a = [[2, 1, 3, 4], [2, 1, 3, 4], [2, 1, 3, 4], [2, 1, 3, 4]])",
        "matrixSum(a = [[1, 5], [2, 3], [1, 5]])",
        "matrixSum([[1, 2, 3], [3, 5, 1], [2, 1, 4]])",
        "matrixSum(a = [[1, 2, 3, 4], [2, 5, 6, 7], [3, 6, 9, 11], [4, 7, 10, 12]])",
        "matrixSum(a = [[1, 2, 3, 4, 5], [2, 4, 5, 7, 11], [3, 5, 6, 8, 13], [4, 6, 7, 9, 15]])",
        "matrixSum(a = [[1, 5, 3, 4], [2, 1, 1, 3], [3, 4, 1, 6]])",
        "matrixSum(a = [[5, 1, 3, 1], [2, 1, 1, 1], [3, 1, 4, 1], [4, 1, 1, 1]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 1], nums2 = [1, 1])",
        "minSum(nums1 = [1, 2], nums2 = [2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [1, 1, 1], nums2 = [1, 1, 0])",
        "minSum(nums1 = [1,1], nums2 = [2,2,2,2])",
        "minSum(nums1 = [2, 3, 3], nums2 = [1, 1, 1])",
        "minSum(nums1 = [4,1,2], nums2 = [5,0,3])",
        "minSum(nums1 = [2, 3, 4], nums2 = [3, 4, 0])",
        "minSum(nums1 = [2, 1, 0, 7], nums2 = [2, 0, 1, 9])",
        "minSum(nums1 = [1,2,3,4,0,0,1,1], nums2 = [0,0,0,0,0,0,1,1])"
    ],
    "sample_282": [
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,4])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minOperations(nums1 = [1, 2], nums2 = [1, 2, 2])",
        "minOperations(nums1 = [2,5,3,4], nums2 = [1,7,3,4,8])",
        "minOperations(nums1 = [2, 3, 6], nums2 = [5, 4, 4])",
        "minOperations(nums1 = [1, 1, 4, 2, 1], nums2 = [5, 2, 4, 1, 5])",
        "minOperations(nums1 = [1, 3, 7, 9], nums2 = [3, 5, 10, 11])",
        "minOperations(nums1 = [5, 6, 7, 8, 9], nums2 = [4, 3, 2, 3, 5])",
        "minOperations(nums1 = [5,4,6,3], nums2 = [1,7,3,4])",
        "minOperations(nums1 = [1, 2, 3, 5, 6, 7], nums2 = [1, 3, 2, 3, 5, 6])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,4,4,5])",
        "alternatingSubarray(nums = [1,2,3,4,1,4,1,2,3])",
        "alternatingSubarray(nums = [0,1,2,3,4,5,6,7,7,6,5,4,3,2,1,0])",
        "alternatingSubarray(nums = [2,3,3,2,4,5,5])",
        "alternatingSubarray(nums = [1, 2, 1, 3, 4, 5, 3, 4, 6, 8])",
        "alternatingSubarray(nums = [4,6,3,5,5,7,6,8,10,12,12,11])",
        "alternatingSubarray(nums = [0, 3, 7, 2, 3, 8, 2, 0, 1, 0, 1, 6, 1, 6, 0])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 0)",
        "buyChoco(prices = [1, 2, 3, 4], money = 1)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 5, 10], money = 12)",
        "buyChoco(prices = [1, 2, 3, 100], money = 10)",
        "buyChoco(prices = [1, 10, 20], money = 1)",
        "buyChoco(prices = [10, 11, 12, 13, 14, 15], money = 20)",
        "buyChoco(prices = [20, 20, 30], money = 40)",
        "buyChoco(prices = [10, 2, 10, 7, 1, 9], money = 20)"
    ],
    "sample_302": [
        "countSeniors(details = [\"01012000\", \"01121990\"])",
        "countSeniors(details = [\"00:01:30\", \"00:02:05\", \"00:03:00\", \"00:04:05\"])",
        "countSeniors(details = [\"41234567891234\", \"99999999910000\"])",
        "countSeniors(details = [\"Senior 12\", \"Junior 2\", \"Senior 75\", \"Senior 21\"])",
        "countSeniors(details = [\"1990-11-01T12:00:00Z\", \"1970-11-01T12:00:00Z\", \"1991-11-01T12:00:00Z\"])",
        "countSeniors(details = [\"1999120300010000\", \"2000120300010000\", \"1999110300010000\"])",
        "countSeniors(details = [\"19900408\", \"19910104\", \"19990104\", \"20000414\", \"20010414\"])",
        "countSeniors(details = [\"2109-10-05T21:48:00\", \"2000-11-01T10:30:00\", \"1950-03-01T20:00:00\"])",
        "countSeniors(details = ['7904453223', '4009860596', '0325104767'])",
        "countSeniors(details = [\"ID10092190, 1990-02-21, 319.5\", \"ID10069880, 1995-01-23, 287.4\", \"ID10019880, 1998-04-15, 450.7\", \"ID10095870, 1979-01-15, 197.5\"])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aaiougrt\", k = 3)",
        "beautifulSubstrings(s = \"babyweird\", k = 7)",
        "beautifulSubstrings(s = \"abcbe\", k = 1)",
        "beautifulSubstrings(s = \"dqupo\", k = 0)",
        "beautifulSubstrings(s = \"abzbzbzbzbz\", k = 10)",
        "beautifulSubstrings(s = \"uabiee\", k = 16)",
        "beautifulSubstrings(s = \"yuhuuanjjjjjyuejb\", k = 7)",
        "beautifulSubstrings(s = \"lxywyxefmnnuvf\", k = 1)",
        "beautifulSubstrings(s = \"uiaooioauiaeiouaoaiaaaaaieaoaoao\", k = 5)",
        "beautifulSubstrings(s = \"ybybhazlwvxzmizwlkng\", k = 4)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [2,3,4,1,5])",
        "minimumSum(nums = [6,2,3,4])",
        "minimumSum(nums = [2,2,3,4,1,1])",
        "minimumSum(nums = [5, 7, 9, 6, 3, 12, 1])",
        "minimumSum(nums = [3, 5, 7, 9, 10, 21, 18, 25])",
        "minimumSum(nums = [6, 9, 3, 2, 7, 1, 9, 8, 10, 1])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [7,3,5,1])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,4])",
        "minGroupsForValidAssignment(nums = [3,2,1])",
        "minGroupsForValidAssignment(nums=[3,2,1,2,3])",
        "minGroupsForValidAssignment(nums = [3,2,4,1,4])",
        "minGroupsForValidAssignment([0,1,2,3,4,5,6,7,8])",
        "minGroupsForValidAssignment(nums = [2,4,6,7,8])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1,3,2,2,5,2,3,7])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1,2,2,4,7])",
        "alternatingSubarray(nums = [2,4,6,5,3])",
        "alternatingSubarray(nums = [1,2,2,4,4,4,5,7])",
        "alternatingSubarray(nums = [1,1,1,2,3,3,3,2,1,1,2,3])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = \"1123\", k = 3)",
        "shortestBeautifulSubstring(s = '001010010111', k = 3)",
        "shortestBeautifulSubstring(s = \"0011010011\", k = 3)",
        "shortestBeautifulSubstring(s = \"11101000101\", k = 2)",
        "shortestBeautifulSubstring(s = \"3111111111\", k = 2)",
        "shortestBeautifulSubstring(s = \"111011111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "shortestBeautifulSubstring(s = '00111000010111000', k = 2)",
        "shortestBeautifulSubstring(s = \"110110110000000000\", k = 2)",
        "shortestBeautifulSubstring(s = \"11111111\", k = 1)",
        "shortestBeautifulSubstring(s = '01110110101110000000111101011101110000001110111000000111100000001011101110', k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"0001\")",
        "minimumSteps(s = \"00110011\")",
        "minimumSteps(s = \"1101\")",
        "minimumSteps(s = \"10101010101\")",
        "minimumSteps(s = \"001001001\")",
        "minimumSteps(s = \"0000000000\")",
        "minimumSteps(s = \"0100101001001111\")",
        "minimumSteps(s = \"10000111111\")",
        "minimumSteps(s = \"010101001010010101\")",
        "minimumSteps(s = \"00010000100110110\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbc\")",
        "longestSemiRepetitiveSubstring(s = \"bbbb\")",
        "longestSemiRepetitiveSubstring(s = \"bbab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aaabaa\")",
        "longestSemiRepetitiveSubstring(s = \"abaababb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabbght\")",
        "longestSemiRepetitiveSubstring(s = \"abcdecddeee\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [3,3,2,2,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [2,3,2])",
        "minGroupsForValidAssignment(nums = [2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4])",
        "minGroupsForValidAssignment(nums = [5,5,5,3,3,3,1,1,1])",
        "minGroupsForValidAssignment(nums = [5, 10, 15, 20, 25])",
        "minGroupsForValidAssignment(nums = [1,2,1,3,2,4,2])",
        "minGroupsForValidAssignment(nums = [4,2,1,2,2,3,2])"
    ],
    "sample_307": [
        "countSeniors(details = [\"abc19\", \"abc18\", \"abc17\", \"abc65\", \"abc66\"])",
        "countSeniors(details = [\"19990310\", \"19970713\", \"19930922\"])",
        "countSeniors(details = ['193409', '192903', '193307'])",
        "countSeniors(details = [\"Coleman45\", \"Liu68\", \"Ochoa55\", \"Parker85\"])",
        "countSeniors(details = [\"Ramu-25\", \"Ramu-61\", \"Vel-19\", \"Vel-65\"])",
        "countSeniors(details = [\"1994\", \"1998\", \"2002\", \"2004\", \"1999\", \"2001\", \"1996\", \"1997\", \"2000\", \"2003\"])",
        "countSeniors(details = [\"John Smith 41\", \"Adam Jones 29\", \"Mary Smith 81\", \"Tom Jones 61\"])",
        "countSeniors(details = [\"Joyce1979\", \"Geraldine1968\", \"Geraldine1992\"])",
        "countSeniors(details = [\"983888\", \"199600\", \"200002\"])",
        "countSeniors(details = [\"1979/10/03\", \"1977/11/25\", \"1955/04/20\", \"1964/01/20\"])"
    ],
    "sample_290": [
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = \"0000000000\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"0101001\")",
        "minimumSteps(s = \"01010100\")",
        "minimumSteps(s = \"101010101010\")",
        "minimumSteps(s = \"10100101\")",
        "minimumSteps(s = \"10101101\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,2,2], moveFrom = [2,1], moveTo = [1,2])",
        "relocateMarbles(nums = [1,1,2,2,3], moveFrom = [3], moveTo = [1])",
        "relocateMarbles(nums = [2, 1, 2], moveFrom = [2, 1], moveTo = [1, 2])",
        "relocateMarbles(nums=[1,2,2,3,3,3],moveFrom=[2,3],moveTo=[3,2])",
        "relocateMarbles(nums = [2, 2, 3, 3, 3, 3], moveFrom = [2], moveTo = [3])",
        "relocateMarbles(nums = [1,2,3,2], moveFrom = [2,1,3,1], moveTo = [3,3,2,2])",
        "relocateMarbles(nums=[2,3,2,4,3,1], moveFrom=[1,2], moveTo=[5,3])",
        "relocateMarbles(nums=[2,2,2,2,2,2,3,3,3,3,3,3,3],moveFrom=[0,1,2,3,4,5],moveTo=[6,7,8,9,10,11])",
        "relocateMarbles(nums = [1,2,1,3,2,3,2,2], moveFrom = [3,1,2], moveTo = [1,3,2])",
        "relocateMarbles(nums=[3,3,4,2,2,1,1],moveFrom=[1,2],moveTo=[2,1])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 1, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [1,2,2,4,4])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 4, 4])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 3, 2])",
        "alternatingSubarray(nums = [1,2,2,4,4,7])",
        "alternatingSubarray(nums = [1, 2, 2, 4, 4, 7])",
        "alternatingSubarray(nums = [0, 0, 1, 0, 1])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 4, 4, 5, 5, 6, 6])",
        "alternatingSubarray(nums = [0, 3, 3, 1, 4, 1, 3, 3, 1, 2])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"ioiion\", k = 5)",
        "beautifulSubstrings(s = \"bbbbbbaaeeeaa\", k = 3)",
        "beautifulSubstrings(s = \"bbbbbbba\", k = 3)",
        "beautifulSubstrings(s = 'aeiaaioooaau', k = 3)",
        "beautifulSubstrings(s = \"bbbbbbbbc\", k = 8)",
        "beautifulSubstrings(s = \"bbbcccdddd\", k = 3)",
        "beautifulSubstrings(s = \"dca\", k = 3)",
        "beautifulSubstrings(s = \"luponltponmlgmne\", k = 3)",
        "beautifulSubstrings(s = \"chojjnqnq\", k = 2)",
        "beautifulSubstrings(s = \"gfajwejwakw\", k = 2)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [0, 0, 0, 0])",
        "maximumTripletValue([0, 1, 2])",
        "maximumTripletValue(nums = [1, 1, 2, 2, 4, 4])",
        "maximumTripletValue(nums = [2, -2, 2, 2, 2, 2])",
        "maximumTripletValue(nums = [9, -2, 2, 4, 1])",
        "maximumTripletValue(nums = [1,-10,-5,0,15])",
        "maximumTripletValue([-7, 2, -3, 4, -8])",
        "maximumTripletValue(nums = [-8, -11, -1, 0, 2, 3, -2])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"abc\", \"aba\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"abc\", \"cba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"e\", \"ee\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bcd\", \"dcb\", \"cdb\"])",
        "maximumNumberOfStringPairs(words = [\"hello\",\"hello\",\"world\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"bcd\", \"defg\"])",
        "maximumNumberOfStringPairs(words = [\"abcde\", \"abcde\", \"aaaa\"])",
        "maximumNumberOfStringPairs(words = [\"aaa\", \"bcd\", \"bb\", \"c\", \"bb\", \"c\"])",
        "maximumNumberOfStringPairs(words = ['abba', 'hey', 'meh', 'oh', 'fief'])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 20, m = 2)",
        "differenceOfSums(n = 20, m = 4)",
        "differenceOfSums(n = 12, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 15, m = 2)",
        "differenceOfSums(n = 11, m = 3)",
        "differenceOfSums(n = 7, m = 4)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2], money = 3)",
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 2)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1,2,3,4], money = 5)",
        "buyChoco(prices = [1, 10, 20], money = 25)",
        "buyChoco(prices = [1, 2, 3, 4], money = 1)",
        "buyChoco(prices = [100, 150, 250], money = 175)",
        "buyChoco(prices = [100, 100, 200, 500, 700, 1000], money = 700)",
        "buyChoco(prices = [1, 2], money = 0)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"])",
        "maximumNumberOfStringPairs(words = [\"abcw\", \"baz\", \"foo\", \"bar\", \"xtfn\", \"abcw\"])",
        "maximumNumberOfStringPairs(words = [\"abcw\", \"baz\", \"foo\", \"bar\", \"xtfn\", \"abcw\"])",
        "maximumNumberOfStringPairs(words = [\"aa\",\"aa\",\"aa\",\"aaaa\"])",
        "maximumNumberOfStringPairs(words = [\"abcw\", \"baz\", \"cab\", \"foo\", \"biff\"])",
        "maximumNumberOfStringPairs(words = [\"be\", \"eye\", \"eye\"])",
        "maximumNumberOfStringPairs(words = [\"cat\", \"catenation\", \"mathematics\", \"hello\"])",
        "maximumNumberOfStringPairs(words = [\"d\", \"d\", \"un\"])",
        "maximumNumberOfStringPairs(words = [\"xww\", \"wwe\", \"dsa\", \"sda\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aaba\")",
        "longestSemiRepetitiveSubstring(s = \"aaba\")",
        "longestSemiRepetitiveSubstring(s = \"abbbabbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbbbbbbbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababaaa\")",
        "longestSemiRepetitiveSubstring(s = \"babb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcdcde\")",
        "longestSemiRepetitiveSubstring(s = \"ababbbacbb\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"ba\",\"nan\",\"a\"])",
        "minimizeConcatenatedLength(words = ['cool','lock','cook'])",
        "minimizeConcatenatedLength(words = [\"banana\", \"ananas\", \"split\"])",
        "minimizeConcatenatedLength(words = [\"cc\",\"a\",\"xx\"])",
        "minimizeConcatenatedLength(words = [\"d\", \"na\", \"ban\", \"nana\", \"lol\"])",
        "minimizeConcatenatedLength(words = [\"and\", \"cc\", \"dddd\", \"ii\", \"ooo\"])",
        "minimizeConcatenatedLength(words = [\"xyzw\", \"zxzx\", \"wxyz\", \"wz\", \"zz\"])",
        "minimizeConcatenatedLength(words = [\"todo\", \"pelo\", \"peor\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"b\", \"an\", \"bana\", \"n\", \"na\", \"a\", \"banana\"])",
        "minimizeConcatenatedLength(words = [\"fjekd\", \"ikn\", \"zgou\"])"
    ],
    "sample_323": [
        "isFascinating(n = 3)",
        "isFascinating(n = 5)",
        "isFascinating(n = 7)",
        "isFascinating(n = 12)",
        "isFascinating(n = 12)",
        "isFascinating(5)",
        "isFascinating(133)",
        "isFascinating(n = 102)",
        "isFascinating(n = 160)",
        "isFascinating(n = 4567)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"aaabb\")",
        "longestSemiRepetitiveSubstring(s = \"aababb\")",
        "longestSemiRepetitiveSubstring(s = \"abbbb\")",
        "longestSemiRepetitiveSubstring(s = \"abbaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"bbaabba\")",
        "longestSemiRepetitiveSubstring(s = \"bbbaaaaaaabbb\")",
        "longestSemiRepetitiveSubstring(s = \"cczdshsueh\")",
        "longestSemiRepetitiveSubstring(s = \"cacdfghfgvabhgf\")"
    ],
    "sample_305": [
        "countSeniors(details = [\"01-Jan-1980\", \"01-Jan-1979\"])",
        "countSeniors(details = [\"Jane Doe 1965\", \"John Smith 1970\", \"Peter Gynn 1980\"])",
        "countSeniors(details = [\"ID12345678911999\", \"ID12345678911888\"])",
        "countSeniors(details = [\"MALE1990-08-09\"])",
        "countSeniors(details=['name:ABC,age:23,address:CDE'])",
        "countSeniors(details = ['1999123123456789123456789', '2009123123456789123456789', '2000123123456789123456789'])",
        "countSeniors(details = [\"JohnMiller81Doe1981\", \"JohnDoe1984\", \"JohnMiller80Doe1980\"])",
        "countSeniors(details = [\"1964/01/10\", \"1961/02/28\", \"1960/03/01\", \"1962/03/03\"])",
        "countSeniors(details = [\"1193088321Aabhi\",\"1193088322Aabhi\",\"1193088323Aabhi\",\"1193088324Aabhi\"])",
        "countSeniors(details = [\"BC10311985600\",\"BC11311992602\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [3, 3, 3, 3, 3, 1, 1])",
        "minGroupsForValidAssignment(nums = [2, 2, 3, 4])",
        "minGroupsForValidAssignment(nums = [10, 10, 10, 10, 10, 10, 10])",
        "minGroupsForValidAssignment(nums = [5, 5, 10])",
        "minGroupsForValidAssignment(nums = [0, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [5, 2, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [12, 18, 15])",
        "minGroupsForValidAssignment(nums = [1, 3, 4, 1, 2, 3, 1])",
        "minGroupsForValidAssignment(nums = [8, 24, 12, 16, 32, 2, 5, 8, 32, 5, 32])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [3, 1, 2, 4])",
        "minimumSum(nums = [1, 2, 3, 10])",
        "minimumSum(nums = [7, 6, 9, 8, 9, 7, 2, 5, 1])",
        "minimumSum(nums = [2])",
        "minimumSum(nums = [7, 6, 9, 8, 1, 3])",
        "minimumSum(nums = [5,4,1,1,3,5,1,3,4])",
        "minimumSum(nums = [15, 2, 7, 8, 4, 5, 6, 9, 12])"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"o\", \"ll\", \"ll\"])",
        "maximumNumberOfStringPairs(words = [\"abc\", \"cba\", \"bac\", \"acb\", \"bca\"])",
        "maximumNumberOfStringPairs(words = [\"cba\", \"dcbaabcd\", \"abcdabcd\", \"abcdbcda\"])",
        "maximumNumberOfStringPairs(words = [\"abcw\", \"zw\", \"ab\", \"abcw\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"aa\", \"bb\", \"baa\"])",
        "maximumNumberOfStringPairs(words = [\"abcw\", \"bcda\", \"cdab\", \"dabc\"])",
        "maximumNumberOfStringPairs(words = [\"aba\", \"p\", \"q\"])",
        "maximumNumberOfStringPairs(words = [\"ana\", \"pan\", \"an\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"acer\", \"ecar\", \"caer\"])",
        "maximumNumberOfStringPairs(words = [\"ec\", \"tc\", \"at\", \"am\", \"an\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0011101011\", k = 3)",
        "shortestBeautifulSubstring(s = \"111000111\", k = 3)",
        "shortestBeautifulSubstring(s = \"110\", k = 2)",
        "shortestBeautifulSubstring(s = \"111211\", k = 3)",
        "shortestBeautifulSubstring(s = \"0101001111\", k = 3)",
        "shortestBeautifulSubstring(s = \"000001111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"001100110111\", k = 3)",
        "shortestBeautifulSubstring(s = '0011001100110011001100110011001100110011001100110011001100110011001100110011001100110011', k = 3)",
        "shortestBeautifulSubstring(s = \"00000000011110000000000000000011111111111110000000000000000000000000000000111111111111111111110000000000000000000000000\", k = 4)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [1, 3, 8, 5, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 2, 3, 4, 5], limit = 4)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 7, 8, 9, 10], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 5, 3, 1, 9, 7, 4, 2, 6], limit = 6)",
        "lexicographicallySmallestArray(nums = [2, 1, 5, 3, 8, 4, 9], limit = 5)",
        "lexicographicallySmallestArray(nums = [5, 8, 2, 1, 9, 3, 4, 5], limit = 4)",
        "lexicographicallySmallestArray(nums = [5, 3, 5, 4, 4, 4], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 1, 9, 1, 4, 2, 8], limit = 4)",
        "lexicographicallySmallestArray(nums = [3, 1, 2, 3, 10, 4, 5], limit = 4)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1, 2], [3, 4]])",
        "matrixSum(a = [[1, 2, 3], [4, 5, 6]])",
        "matrixSum(a = [[1,2],[3,4]])",
        "matrixSum([[1], [2], [3]])",
        "matrixSum(a = [[0, 1, 3], [1, 2, 5], [3, 5, 6]])",
        "matrixSum(a = [[1,2,3,5],[1,2,3,6],[1,2,3,7],[1,2,3,8]])",
        "matrixSum(a = [[1, 5, 12], [3, 7, 15], [2, 6, 10]])",
        "matrixSum(a = [[5, 1, 3, 1], [8, 6, 9, 3], [2, 4, 3, 10]])",
        "matrixSum(a = [[1, 5, 2, 6, 3, 7], [7, 7, 1, 1, 7, 2], [8, 2, 2, 2, 2, 3], [2, 9, 3, 1, 2, 2], [3, 1, 3, 5, 9, 3], [4, 8, 7, 8, 6, 5]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"ioiioi\", k = 3)",
        "beautifulSubstrings(s = \"ioiion\", k = 3)",
        "beautifulSubstrings(s = \"ioiion\", k = 3)",
        "beautifulSubstrings(s = \"ioiion\", k = 3)",
        "beautifulSubstrings(s = \"ioihiio\", k = 1)",
        "beautifulSubstrings(s = \"aeeouio\", k = 2)",
        "beautifulSubstrings(s = \"baaanana\", k = 7)",
        "beautifulSubstrings(s = \"ihooeedidppdk\", k = 3)",
        "beautifulSubstrings(s = \"iosxdiosx\", k = 2)",
        "beautifulSubstrings(s = \"ioteifmiaoie\", k = 2)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"b\"])",
        "maximumNumberOfStringPairs(words = [\"race\", \"oroce\"])",
        "maximumNumberOfStringPairs(words = [\"codewars\", \"cwarsod\", \"wordsco\", \"warsocd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"cba\", \"bcab\", \"abcd\", \"cdba\", \"abcde\"])",
        "maximumNumberOfStringPairs(words = [\"d\", \"ca\", \"e\", \"ae\", \"e\", \"a\", \"a\"])",
        "maximumNumberOfStringPairs(words = [\"xwyu\", \"pzyh\", \"naft\"])"
    ],
    "sample_325": [
        "isFascinating(n = 123)",
        "isFascinating(123)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 1234)",
        "isFascinating(n = 12)",
        "isFascinating(n = 123456789)",
        "isFascinating(123456789)",
        "isFascinating(12345)",
        "isFascinating(n = 36)",
        "isFascinating(n = 55)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3, 4])",
        "maximumTripletValue(nums = [-1, -2, -3])",
        "maximumTripletValue(nums = [-1, -1, -1])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [3, 2, 1])",
        "maximumTripletValue(nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10])",
        "maximumTripletValue(nums = [-7,-3,-2,3,11])",
        "maximumTripletValue(nums = [-100, -200, -300, -400, -500, -10000])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1, 1], [2, 2]])",
        "matrixSum(nums = [[2,1],[3,4]])",
        "matrixSum(nums = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]])",
        "matrixSum(nums = [[10, 11, 12], [2, 3, 4]])",
        "matrixSum(nums = [[2,1],[1,3]])",
        "matrixSum(nums = [[1, 4, 7, 11, 15],[2, 5, 8, 12, 19],[3, 6, 9, 16, 22],[10, 13, 14, 17, 24],[18, 21, 23, 26, 30]])",
        "matrixSum(nums = [[0,5],[2,7],[3,9]])",
        "matrixSum(nums = [[3, 4, 3], [2, 1, 4], [3, 4, 3]])",
        "matrixSum(nums = [[1,5,2], [2,4,1], [4,5,3]])",
        "matrixSum(nums = [[9,15,10],[9,15,10]])"
    ],
    "sample_281": [
        "minOperations(a = [1, 2, 3, 4, 5], b = [3, 4, 5, 1, 2])",
        "minOperations(a = [1, 2, 3], b = [1, 2, 3])",
        "minOperations(a = [1, 2, 3, 4], b = [2, 1, 4, 3])",
        "minOperations(a = [1, 3, 5, 7], b = [2, 4, 6, 8])",
        "minOperations(a = [1,2,3], b = [2,3,1])",
        "minOperations(a = [2, 1, 2, 1], b = [1, 1, 1, 1])",
        "minOperations(a = [1, 1, 1, 1, 1], b = [2, 10, 20, 100, 1000])",
        "minOperations(a = [2, 3, 1, 0, 2, 4, 2, 4], b = [0, 2, 3, 1, 1, 4, 4, 2])",
        "minOperations(a = [3, 7, 5, 6, 9], b = [2, 9, 8, 5, 3])",
        "minOperations(a = [1, 3, 5, 12, 12, 15], b = [9, 10, 1, 9, 8, 10])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,4])",
        "minOperations(nums1 = [2,4,7], nums2 = [2,5,8])",
        "minOperations(nums1 = [5, 6, 7, 8, 9], nums2 = [1, 2, 3, 4, 5])",
        "minOperations(nums1 = [2,4,8], nums2 = [2,2,2])",
        "minOperations(nums1 = [3, 2, 2, 4, 5], nums2 = [3, 2, 1, 2, 9])",
        "minOperations(nums1 = [1, 2, 3, 3], nums2 = [1, 2, 1, 2])",
        "minOperations(nums1 = [1,1,3], nums2 = [2,1,2])",
        "minOperations(nums1 = [4,5,6], nums2 = [3,5,10])",
        "minOperations(nums1 = [1,3,5,10,9,2], nums2 = [1,2,3,4,5,8])",
        "minOperations(nums1 = [1, 2, 3, 2, 4, 2, 5], nums2 = [3, 2, 1, 2, 2, 2, 4])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue(nums = [0,0,0])",
        "maximumTripletValue(nums = [1, 2, -3, 4])",
        "maximumTripletValue(nums = [0, 2, 0, 1])",
        "maximumTripletValue(nums = [0, 1, -1, 2, 3])",
        "maximumTripletValue(nums = [-5, -1, -1, 0, 2, 3])",
        "maximumTripletValue(nums = [0, 2, 3, 3])",
        "maximumTripletValue(nums = [-1, -5, 0, -1, -2])",
        "maximumTripletValue(nums = [1, -3, -5, 2, -9, 4])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s=\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "shortestBeautifulSubstring(s = \"000101000\", k = 2)",
        "shortestBeautifulSubstring(s = \"011010010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"01100010111\", k = 3)",
        "shortestBeautifulSubstring(s = \"001110000111\", k = 3)",
        "shortestBeautifulSubstring(s=\"0110001011\", k=3)",
        "shortestBeautifulSubstring(s = \"2001111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "shortestBeautifulSubstring(s = \"00010101\", k = 2)",
        "shortestBeautifulSubstring(s = \"0101010001\", k = 4)"
    ],
    "sample_256": [
        "minimumSum(nums = [1, 2, 3, 4])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumSum(nums = [1, 4, 2, 3])",
        "minimumSum(nums = [3,2,2,3])",
        "minimumSum(nums = [2, 3, 5, 6, 8])",
        "minimumSum(nums = [1, 3, 4, 2, 10, 9])",
        "minimumSum(nums = [1, 3, 2, 5, 3, 9, 7])",
        "minimumSum(nums = [3, 4, 2, 1, 7, 6, 5, 7, 8])",
        "minimumSum(nums = [3, 4, 5, 9, 7, 6, 10, 2])",
        "minimumSum(nums = [1, 3, 4, 2, 3, 5, 7, 1, 5, 9, 2, 7, 3, 9, 1, 5, 5, 2, 9, 1, 2, 1, 1, 5, 1, 3])"
    ],
    "sample_291": [
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"1\")",
        "minimumSteps(s = \"0\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"00\")",
        "minimumSteps(s = '0')",
        "minimumSteps(s = \"11\")",
        "minimumSteps(s = \"01010101\")",
        "minimumSteps(s = \"01101100111\")",
        "minimumSteps(s = '1110111011111')"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,3,5,7], nums2 = [2,4,6,8])",
        "minOperations(nums1 = [1,2,3,5,0], nums2 = [1,0,3,4,7])",
        "minOperations(nums1 = [1, 3, 5, 2, 1], nums2 = [2, 1, 3, 2, 1])",
        "minOperations(nums1 = [1,3,5,2,4,6], nums2 = [1,2,4,5,3,6])",
        "minOperations(nums1 = [1,2,3,5,0], nums2 = [2,4,1,5,3])",
        "minOperations(nums1 = [1,3,5,2,4,7], nums2 = [1,2,4,6,5,8])",
        "minOperations(nums1 = [1,3,5,2,4,7], nums2 = [4,2,1,3,6,8])",
        "minOperations(nums1 = [1,2,3,5,0], nums2 = [3,4,2,1,0])",
        "minOperations(nums1 = [4, 3, 2, 1, 0], nums2 = [3, 3, 3, 3, 3])",
        "minOperations(nums1 = [3, 5, 2, 1, 4], nums2 = [2, 4, 1, 5, 3])"
    ],
    "sample_277": [
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 1], [0, 0]])",
        "findChampion(grid = [[1,0],[0,1]])",
        "findChampion(grid = [[0,1,0,0], [0,1,0,0], [0,1,0,0], [0,1,0,0]])",
        "findChampion([[1,0,1,0],[0,1,0,1],[1,0,1,0],[0,1,0,1]])",
        "findChampion(grid = [[1,1,1,1], [0,0,0,0], [0,0,0,0], [0,0,0,0]])",
        "findChampion([[1, 0, 0, 1], [0, 1, 1, 0], [0, 0, 1, 0], [1, 0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1, 0], [0, 0, 1, 1], [1, 1, 0, 1], [1, 0, 0, 0]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 20, m = 3)",
        "differenceOfSums(n = 20, m = 2)",
        "differenceOfSums(n = 20, m = 2)",
        "differenceOfSums(n = 9, m = 2)",
        "differenceOfSums(n = 12, m = 4)",
        "differenceOfSums(n = 20, m = 10)",
        "differenceOfSums(n = 2, m = 1)",
        "differenceOfSums(n = 30, m = 12)",
        "differenceOfSums(n = 13, m = 12)"
    ],
    "sample_292": [
        "minimumSteps(s = \"00100\")",
        "minimumSteps(s = \"001010\")",
        "minimumSteps(s = \"11001\")",
        "minimumSteps(s = \"001011\")",
        "minimumSteps(s = \"0101010101\")",
        "minimumSteps(s = \"00010111\")",
        "minimumSteps(s = \"000110100\")",
        "minimumSteps(s = \"100101101\")",
        "minimumSteps(s = \"0000100111\")",
        "minimumSteps(s = \"01000101001010000111\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 2, 2])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 3])",
        "alternatingSubarray(nums = [1,1,2,2,1])",
        "alternatingSubarray(nums = [1,2,1,2,1,2,1,3])",
        "alternatingSubarray(nums = [1,1,2,2,2,2,2,3,3,3])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4])",
        "alternatingSubarray(nums = [1,2,3,4,4,5])",
        "alternatingSubarray(nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9])",
        "alternatingSubarray(nums = [2,2,2,1,2,2,2,2,1,2,2,2,2])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [3], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [3, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [2, 1, 2, 2, 2, 1], moveFrom = [1, 2, 3], moveTo = [5, 4, 6])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [3,2,2], moveTo = [1,2,1])",
        "relocateMarbles(nums=[1, 1, 1, 2], moveFrom=[3, 3, 3], moveTo=[0, 0, 0])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,1,1])",
        "maximumTripletValue(nums = [0, 0, 0, 0])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "maximumTripletValue(nums = [-1, -1, -1, -1])",
        "maximumTripletValue(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])",
        "maximumTripletValue(nums = [1, 4, 12])",
        "maximumTripletValue(nums = [-2, -5, 1, 1, 5])",
        "maximumTripletValue(nums = [3, 2, 4, 1, 7, 10])"
    ],
    "sample_273": [
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 1, 1], [0, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0], [1, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 1, 1], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1, 0], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 0]])",
        "findChampion(grid = [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 0]])",
        "findChampion([[0,1],[0,1]])"
    ],
    "sample_267": [
        "minSum(nums1 = [0], nums2 = [-1, 1])",
        "minSum(nums1 = [0, 2, 3], nums2 = [2, 5, 7])",
        "minSum(nums1 = [-1, -1, 0], nums2 = [-1, 0, 1])",
        "minSum(nums1 = [-2, 0], nums2 = [-3, 1])",
        "minSum(nums1 = [0, 2, 2], nums2 = [1, 3])",
        "minSum(nums1 = [1, 1, 0, 1, 1], nums2 = [1, 1, 0, 1, 1])",
        "minSum(nums1 = [1,1,1], nums2 = [3,3,3])",
        "minSum(nums1 = [-2, 3], nums2 = [1, -2])",
        "minSum(nums1 = [4, 2, 3, 0], nums2 = [2, 5])",
        "minSum(nums1 = [1,2,4,5], nums2 = [1,2,3])"
    ],
    "sample_294": [
        "minimumSteps(s = \"00111\")",
        "minimumSteps(s = \"00010101\")",
        "minimumSteps(s = '1')",
        "minimumSteps(s = \"11111110\")",
        "minimumSteps(s = '101010')",
        "minimumSteps(s = \"00011101011\")",
        "minimumSteps(s = '11111110')",
        "minimumSteps(s = \"00110010110110\")",
        "minimumSteps(s = '0010100010')",
        "minimumSteps(s = \"000100010010010010\")"
    ],
    "sample_274": [
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 1], [1, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
        "findChampion([[0, 1, 0], [0, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[0, 2, 0], [2, 0, 0], [0, 0, 1]])",
        "findChampion([[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]])",
        "findChampion(grid = [[0, 2, 1, 1], [1, 0, 0, 1], [3, 3, 2, 1]])",
        "findChampion(grid = [[1, 1, 0, 0, 1],\n                            [0, 0, 0, 0, 1],\n                            [0, 1, 0, 0, 1],\n                            [0, 0, 0, 0, 1],\n                            [0, 0, 1, 1, 1]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [8,2,2,3])",
        "minGroupsForValidAssignment(nums = [1,2,2,4,4,8,8])",
        "minGroupsForValidAssignment(nums = [15,15,15,15,15,15])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,4,4,5,5,5])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,4,4,5,5,6])",
        "minGroupsForValidAssignment(nums = [2,1,4,6])",
        "minGroupsForValidAssignment(nums = [4,2,2,1,1,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,8])"
    ],
    "sample_270": [
        "minSum(nums1 = [0, 2, 4], nums2 = [1, 3, 5])",
        "minSum(nums1 = [0, 2, 3], nums2 = [2, 5])",
        "minSum(nums1 = [0, 2], nums2 = [0, 3])",
        "minSum(nums1 = [2,4,5], nums2 = [2,4,5])",
        "minSum(nums1 = [2,3,5,7], nums2 = [2,5,10])",
        "minSum(nums1 = [0, 2, 4, 5], nums2 = [2, 3, 0, 10])",
        "minSum(nums1=[0, 2, 3], nums2=[2, 0, 3, 0, 5])",
        "minSum(nums1 = [1, 0, 0, 2, 3], nums2 = [1, 0, 2, 0, 0])",
        "minSum(nums1 = [0,0,0,0,1,1], nums2 = [1,1,2,2,2,2])",
        "minSum(nums1=[2,4,18,1,3], nums2=[4,1,19,100,200])"
    ],
    "sample_317": [
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [2, 4, 10, 4], money = 7)",
        "buyChoco(prices = [2, 3, 4], money = 10)",
        "buyChoco(prices = [1, 1, 2], money = 3)",
        "buyChoco(prices = [1, 2, 3, 4, 10], money = 10)",
        "buyChoco(prices = [2, 4, 10, 12], money = 20)",
        "buyChoco(prices = [4, 9, 2], money = 10)",
        "buyChoco(prices = [2,3,4,10], money = 12)",
        "buyChoco(prices = [3, 5, 2, 9], money = 10)",
        "buyChoco(prices = [12, 10, 5, 2, 6], money = 10)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"ioiion\", k = 3)",
        "beautifulSubstrings(s = \"cab\", k = 2)",
        "beautifulSubstrings(s = 'bbbbb', k = 2)",
        "beautifulSubstrings(s = \"saeou\", k = 4)",
        "beautifulSubstrings(s = \"shivank\", k = 2)",
        "beautifulSubstrings(s = \"yhtyeie\", k = 3)",
        "beautifulSubstrings(s = \"bbbbaeaeaeaoaabaaaea\", k = 2)",
        "beautifulSubstrings(s = \"bobaeeooaaa\", k = 2)",
        "beautifulSubstrings(s = \"ynefni\", k = 8)",
        "beautifulSubstrings(s = \"odgjknqbf\", k = 3)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"banana\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"aaaabb\")",
        "longestSemiRepetitiveSubstring(s = \"abbbb\")",
        "longestSemiRepetitiveSubstring(s = \"bbba\")",
        "longestSemiRepetitiveSubstring(s = \"abac\")",
        "longestSemiRepetitiveSubstring(s = \"aaab\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaaab\")",
        "longestSemiRepetitiveSubstring(s = \"agbccd\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 1, y = 2, z = 10)",
        "longestString(x = 1, y = 2, z = 5)",
        "longestString(x = 3, y = 2, z = 5)",
        "longestString(x = 5, y = 3, z = 2)",
        "longestString(x = 5, y = 2, z = 1)",
        "longestString(x = 3, y = 6, z = 9)",
        "longestString(x = 12, y = 7, z = 16)"
    ],
    "sample_271": [
        "minSum(nums1 = [1, 2, 3, 2], nums2 = [3, 4])",
        "minSum(nums1 = [0,0,0,0,0], nums2 = [0,1,2])",
        "minSum(nums1 = [2,3,4,5], nums2 = [1,2,3,4])",
        "minSum(nums1 = [1, 1, 0, 1, 1], nums2 = [1, 1, 1, 1, 0])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [2,3,5,7,11])",
        "minSum(nums1 = [3,4], nums2 = [0,1])",
        "minSum(nums1 = [0,0,0,0,0,0,0,1,1,1,1], nums2 = [1,1,1,1,1,1,1,0,0,0,0])",
        "minSum(nums1 = [1,2,3,0,1,0], nums2 = [4,5,6,0,1,0])",
        "minSum(nums1 = [2,3,7,1,9], nums2 = [1,1,1,9,3])",
        "minSum(nums1=[9,2,3,3,2,1,0], nums2=[10,2,2,2,1,1,1])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 3, y = 4, z = 5)",
        "longestString(x = 1, y = 1, z = 2)",
        "longestString(x = 1, y = 2, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 4, y = 5, z = 6)",
        "longestString(x = 5, y = 4, z = 3)",
        "longestString(x = 1, y = 4, z = 3)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"0123456789\", k = 3)",
        "shortestBeautifulSubstring(s = '0110111', k = 3)",
        "shortestBeautifulSubstring(s = \"101010\", k = 2)",
        "shortestBeautifulSubstring(s = \"0123456789\", k = 0)",
        "shortestBeautifulSubstring(s = \"123435\", k = 1)",
        "shortestBeautifulSubstring(s = '00110110', k = 4)",
        "shortestBeautifulSubstring(s = '100011100101', k = 9)",
        "shortestBeautifulSubstring(s = \"00011100111\", k = 0)",
        "shortestBeautifulSubstring(s = \"1110011100101110010111\", k = 4)",
        "shortestBeautifulSubstring(s = \"111132243000321253\", k = 3)"
    ],
    "sample_324": [
        "isFascinating(n = 123)",
        "isFascinating(123456789)",
        "isFascinating(333)",
        "isFascinating(42)",
        "isFascinating(12)",
        "isFascinating(50)",
        "isFascinating(43210)",
        "isFascinating(n = 10111)",
        "isFascinating(593)",
        "isFascinating(n = 3938)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [2, 1, 3, 4, 1])",
        "minimumSum(nums = [2, 3, 4, 1, 2])",
        "minimumSum(nums = [4, 2, 3, 1])",
        "minimumSum(nums = [1, 3, 5, 10, 2])",
        "minimumSum(nums = [3, 5, 7, 8, 6, 4, 10, 50])"
    ],
    "sample_268": [
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 0])",
        "minSum(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "minSum(nums1 = [0, 1, 0], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 1, 0, 1, 1], nums2 = [1, 0, 1, 1, 1])",
        "minSum(nums1 = [0, 1, 0, 1], nums2 = [1, 1, 1, 0])",
        "minSum(nums1 = [1, 2, 0], nums2 = [2, 1, 1])",
        "minSum(nums1 = [1,1,0,1,1,1], nums2 = [1,0,1,1,1,1])",
        "minSum(nums1 = [1,2], nums2 = [2,1,0,4])",
        "minSum(nums1 = [0, 1, 2, 3, 0, 5, 6], nums2 = [0, 0, 0, 7])",
        "minSum(nums1 = [0, 1, 1, 1, 2], nums2 = [0, 1, 2, 3, 3, 3, 4])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abcde\", s2 = \"abcde\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"a\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1 = \"12345\", s2 = \"12345\", s3 = \"12345\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"baaaa\")",
        "findMinimumOperations(s1 = \"d\", s2 = \"de\", s3 = \"d\")",
        "findMinimumOperations(s1 = \"pqrstuvwxyz\", s2 = \"xyzabcdefgh\", s3 = \"tuvwxyzabc\")",
        "findMinimumOperations(s1 = \"zzabcbz\", s2 = \"zzbcczz\", s3 = \"zzcabzz\")",
        "findMinimumOperations(s1 = \"axxxxyz\", s2 = \"xxbxxyz\", s3 = \"xxxyxxz\")"
    ],
    "sample_321": [
        "maxStrength(nums = [-2, -3, 4, 5])",
        "maxStrength(nums = [-2, -3, 4, -5])",
        "maxStrength(nums = [-2, -3, 3, 4])",
        "maxStrength(nums = [-2, 4, 7])",
        "maxStrength(nums = [2, 3, 1, -1, 4])",
        "maxStrength(nums = [1, 2, 3, 4, 5, 6, -7, -8, -9, -10])",
        "maxStrength(nums = [1, -2, -5, 0])",
        "maxStrength(nums = [-10, -10, 1, 2, 3, 4, 5, -10])",
        "maxStrength(nums = [-1, 1, 0, -2, 2, 0, 1, -1, 1])",
        "maxStrength(nums = [-2, -3, 1, 2, -5, 3, -4, 5, -5, 6])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1,2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [3])",
        "relocateMarbles(nums = [2], moveFrom = [0], moveTo = [1])",
        "relocateMarbles(nums = [2], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 3, 2], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2, 1, 2, 2, 2, 3], moveFrom = [1, 2], moveTo = [2, 3])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8], moveFrom = [4, 3], moveTo = [3, 4])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [5, 9])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [5, 8], moveTo = [6, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [1, 2], moveTo = [7, 8])",
        "relocateMarbles(nums = [5, 5, 6, 8, 9], moveFrom = [6, 8], moveTo = [8, 6])",
        "relocateMarbles(nums = [1, 2, 3, 4, 5], moveFrom = [1, 4], moveTo = [5, 8])",
        "relocateMarbles(nums = [1,2,3,4,5,6,7,8,9], moveFrom = [1, 2], moveTo = [4, 5])",
        "relocateMarbles(nums = [1, 5, 5, 6, 7, 8, 9], moveFrom = [1, 6], moveTo = [8, 9])",
        "relocateMarbles(nums=[8, 9, 5, 9, 6, 8], moveFrom=[8, 6], moveTo=[9, 5])",
        "relocateMarbles(nums = [1, 3, 5, 7, 9], moveFrom = [1, 3, 5], moveTo = [2, 6, 8])",
        "relocateMarbles(nums = [5, 5, 8, 6, 5, 7, 8, 10, 2, 4], moveFrom = [5, 2, 10, 8], moveTo = [2, 10, 8, 5])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4], money = 5)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 7)",
        "buyChoco(prices = [1, 2, 3, 4, 5], money = 12)",
        "buyChoco(prices = [1, 2, 3, 5], money = 8)",
        "buyChoco(prices = [1, 2, 3, 4, 5, 6], money = 20)",
        "buyChoco(prices = [5, 10, 3, 12, 100], money = 10)",
        "buyChoco(prices = [5, 3, 11, 6, 7, 1, 9], money = 10)",
        "buyChoco(prices = [12, 10, 10, 6, 10, 10, 6, 6, 4, 4, 10, 6], money = 50)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1, 1, 1], [2, 2, 2], [3, 3, 3]])",
        "matrixSum(nums = [[1, 2, 3], [3, 2, 1], [2, 1, 3]])",
        "matrixSum(nums = [[1, 2], [4, 3], [5, 6]])",
        "matrixSum(nums = [[3, 2, 1], [2, 2, 2], [1, 3, 3]])",
        "matrixSum(nums = [[1, 5], [3, 4], [1, 4]])",
        "matrixSum(nums = [[1, 1, 3, 6], [1, 1, 3, 6], [2, 2, 5, 7]])",
        "matrixSum(nums = [[4,1,3], [8,9,1], [2,6,10]])",
        "matrixSum([[3, 0, 1, 1], [2, 5, 2, 0], [4, 4, 4, 4], [2, 1, 0, 1]])",
        "matrixSum(nums = [[1, 3, 4, 5], [2, 6, 7, 8], [3, 4, 6, 9], [1, 1, 2, 8]])",
        "matrixSum(nums = [[4, 5, 3, 1], [5, 5, 6, 2], [5, 5, 10, 2], [5, 10, 10, 7]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2], money = 1)",
        "buyChoco(prices = [1, 2, 3], money = 3)",
        "buyChoco(prices = [2, 3, 5], money = 6)",
        "buyChoco(prices = [1,2,3,4,5], money = 10)",
        "buyChoco(prices = [4, 2], money = 10)",
        "buyChoco(prices = [4, 10, 12], money = 11)",
        "buyChoco(prices = [1, 2, 4, 5, 100], money = 10)",
        "buyChoco(prices = [5, 3, 4, 2], money = 2)",
        "buyChoco(prices = [10, 3, 2, 6], money = 14)",
        "buyChoco(prices = [100, 200, 5], money = 120)"
    ],
    "sample_259": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSum(nums = [1,2,3])",
        "minimumSum(nums = [1,1,1,1,1,1])",
        "minimumSum(nums = [4,1,3,2,5])",
        "minimumSum(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3])",
        "minimumSum(nums = [0,1,2,4,6,5])",
        "minimumSum(nums = [2, 3, 7, 8, 4, 6, 8])",
        "minimumSum(nums = [2,3,6,9,36,20,3])"
    ],
    "sample_351": [
        "alternatingSubarray(nums = [1,2,3,4])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 3, 2, 1])",
        "alternatingSubarray(nums = [1,3,2,4,5])",
        "alternatingSubarray(nums = [0, 3, 2, 3, 2, 0, 1])",
        "alternatingSubarray(nums = [1,3,2,2,3,2,2,1])",
        "alternatingSubarray(nums = [-3, 1, 2, -2, 4])",
        "alternatingSubarray(nums = [0, 3, 8, 4, 1, 9, 5, 7, 10, 2, 11])",
        "alternatingSubarray(nums = [5, 4, 6, 2, 6, 3, 7, 3, 5])",
        "alternatingSubarray(nums = [2,2,3,3,2,2,2,3,3,5,5,4,1,1,5,5,2,1,1])",
        "alternatingSubarray(nums = [2, 3, 3, 3, 4, 5, 2, 2, 4, 2, 5, 5, 5, 2, 3, 4, 5, 2, 4, 3, 1, 5, 4, 5, 3])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])",
        "matrixSum(nums = [[9, 9, 4], [6, 6, 8], [2, 1, 1]])",
        "matrixSum(nums = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "matrixSum(nums = [[1, 2, 3], [3, 4, 5]])",
        "matrixSum(nums = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]])",
        "matrixSum(nums = [[0, 1, 1, 2], [0, 5, 0, 0], [2, 0, 3, 3]])",
        "matrixSum(nums = [[3, 4], [2, 1]])",
        "matrixSum(nums = [[2, 7, 9], [5, 5, 5], [1, 5, 8]])",
        "matrixSum(nums = [[-8, -1, -8, -1], [-3, -3, -7, 6]])"
    ],
    "sample_316": [
        "buyChoco(a = [2, 2], money = 3)",
        "buyChoco(a = [2, 4], money = 3)",
        "buyChoco(a = [1, 2, 3, 4, 5, 10], money = 10)",
        "buyChoco(a = [3, 2, 3], money = 10)",
        "buyChoco(a = [5, 5, 2], money = 7)",
        "buyChoco(a = [1, 2, 3, 4], money = 13)",
        "buyChoco(a = [5, 3], money = 5)",
        "buyChoco(a = [3, 4, 5, 6], money = 11)",
        "buyChoco(a = [10,10], money = 11)",
        "buyChoco(a = [5, 15, 15], money = 5)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [1, 2, 3])",
        "minGroupsForValidAssignment(nums = [3, 3, 2, 2, 1, 1])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 4, 5, 6])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minGroupsForValidAssignment(nums = [3, 5, 1, 4, 2])",
        "minGroupsForValidAssignment(nums = [2, 4, 3])",
        "minGroupsForValidAssignment(nums = [3, 5, 12, 11])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 1, 1, 1, 2])",
        "minGroupsForValidAssignment(nums = [3, 2, 3, 3, 3, 2])",
        "minGroupsForValidAssignment(nums = [4, 6, 4, 5, 4, 4, 5, 2, 1, 3, 4])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 1], [1, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [1, 0, 1]])",
        "findChampion(grid = [[1, 1, 1], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 1], [1, 0, 1, 0]])",
        "findChampion(grid = [[1, 2, 3], [3, 4, 5], [2, 3, 1]])",
        "findChampion(grid = [[0, 0, 0, 0], [1, 1, 1, 1], [1, 0, 1, 1], [0, 0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0, 1],\n                            [0, 1, 0, 0],\n                            [0, 0, 0, 0],\n                            [0, 0, 1, 0]])",
        "findChampion([[1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1]])"
    ],
    "sample_320": [
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1, 2, 3, 4])",
        "maxStrength(nums = [1,2,3,4,5])",
        "maxStrength(nums = [1,2,3,4,5])",
        "maxStrength(nums = [1, 2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 6])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"banana\", \"ananas\", \"nan\"])",
        "minimizeConcatenatedLength(words = [\"hello\", \"beautiful\", \"world\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"cba\", \"bac\", \"cab\"])",
        "minimizeConcatenatedLength(words = [\"sp\", \"py\", \"fun\"])",
        "minimizeConcatenatedLength(words = [\"dog\", \"hi\", \"n\"])",
        "minimizeConcatenatedLength(words = [\"fire\", \"cross\", \"player\", \"base\"])",
        "minimizeConcatenatedLength(words = [\"coconut\", \"firm\", \"pianoforte\", \"gum\"])",
        "minimizeConcatenatedLength(words = [\"mli\", \"zf\", \"isg\", \"ybe\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"banana\", \"dssd\", \"sdsdgdg\", \"sdsdfdsfsd\"])",
        "minimizeConcatenatedLength(words = [\"tqrjw\", \"khwl\", \"weovrq\", \"vn\", \"qlms\", \"e\", \"wocgrs\", \"k\", \"w\", \"qeo\", \"pw\", \"a\", \"r\", \"wln\", \"zvib\", \"d\", \"ozqtx\", \"b\", \"wsmk\", \"txfwe\", \"ldm\", \"vj\", \"t\", \"e\", \"k\", \"j\", \"d\", \"x\", \"qs\", \"e\", \"b\", \"l\"])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"a\", s2 = \"a\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"s\", s2 = \"s\", s3 = \"s\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"baa\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"baba\", s2 = \"baba\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"dabc\", s2 = \"abcde\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"123\", s2 = \"123\", s3 = \"12345678\")",
        "findMinimumOperations(s1=\"33333\", s2=\"33333\", s3=\"22222\")",
        "findMinimumOperations(s1 = \"abxababx\", s2 = \"ababxabx\", s3 = \"abababxabx\")",
        "findMinimumOperations(s1 = \"xr\", s2 = \"rry\", s3 = \"rryx\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 1])",
        "alternatingSubarray(nums = [0,1,2,3,4,5,6,7,8,9])",
        "alternatingSubarray(nums = [1, 2, 1, 2, 1, 2, 1, 3])",
        "alternatingSubarray(nums = [2, 4, 6, 8, 12, 10, 8, 6, 4, 2])",
        "alternatingSubarray(nums = [1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4])",
        "alternatingSubarray(nums = [1, 4, 1, 2, 5, 3, 2, 1, 3, 5])",
        "alternatingSubarray(nums = [1, 4, 3, 7, 5, 3, 2, 8, 6, 8])",
        "alternatingSubarray(nums = [4,3,2,5,4,5,3,2])",
        "alternatingSubarray(nums = [0,3,3,0,1,1,0,1,4,4,0,0,1,0,1,1,0,3,4,1,4,1])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [1, 1, 1], [0, 0, 0]])",
        "findChampion(grid = [[1, 0, 0, 1], [0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 0, 1]])",
        "findChampion(grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0]])",
        "findChampion(grid = [[1, 0, 1, 1], [0, 1, 0, 0], [0, 0, 1, 1], [1, 0, 1, 0]])",
        "findChampion(grid = [[1, 0, 1, 0], [1, 1, 0, 0], [0, 1, 0, 1], [0, 1, 1, 1]])",
        "findChampion(grid = [[0, 0, 1, 0, 0, 0],\n                            [0, 0, 1, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0],\n                            [0, 0, 0, 0, 0, 0]])"
    ],
    "sample_304": [
        "countSeniors(details = [\"1999-01-01 19:00\", \"1999-01-01 20:00\", \"1999-01-01 21:00\", \"1999-01-01 22:00\"])",
        "countSeniors(details = [\"Person 1 - Age: 20\", \"Person 2 - Age: 59\", \"Person 3 - Age: 82\", \"Person 4 - Age: 12\"])",
        "countSeniors(details = [\"Age of Alice is 22\", \"Age of Bob is 33\", \"Age of Charlie is 60\", \"Age of Diana is 101\"])",
        "countSeniors(details = ['id01,name,female,30', 'id02,name,male,40', 'id03,name,female,70'])",
        "countSeniors(details = [\"01-06-1950\", \"23-06-1982\", \"02-06-1969\"])",
        "countSeniors(details = [\"8101901022\", \"8101902122\", \"8101903123\"])",
        "countSeniors(details = [\"193409131234567\", \"198811091234567\"])",
        "countSeniors(details = [\"18901234ABCD18\", \"0901234ABCD18\", \"18901234ABCD70\", \"0901234ABCD70\"])",
        "countSeniors(details = [\"400112121212\", \"200414141414\", \"600414141414\", \"300515151515\"])",
        "countSeniors(details = [\"ID0994970828, 21 years old, 1956\", \"ID1037887758, 18 years old, 1997\", \"ID0721480188, 26 years old, 1988\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"uglyisbeautiful\", k = 3)",
        "beautifulSubstrings(s = \"banana\", k = 3)",
        "beautifulSubstrings(s = \"ioiisoue\", k = 3)",
        "beautifulSubstrings(s = \"yatinyany\", k = 2)",
        "beautifulSubstrings(s = \"bbbbbb\", k = 3)",
        "beautifulSubstrings(s = \"aeeeioooauu\", k = 3)",
        "beautifulSubstrings(s = \"bcaeuw\", k = 2)",
        "beautifulSubstrings(s = \"uuooxrrhytf\", k = 5)",
        "beautifulSubstrings(s = \"yuyuoyuyooyyuy\", k = 2)",
        "beautifulSubstrings(s = \"decpfubvhbwrgxevy\", k = 2)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111111111111\", k = 3)",
        "shortestBeautifulSubstring(s = \"111001011\", k = 2)",
        "shortestBeautifulSubstring(s = '0011121111', k = 3)",
        "shortestBeautifulSubstring(s = \"00111112222\", k = 3)",
        "shortestBeautifulSubstring(s = '12131', k = 3)",
        "shortestBeautifulSubstring(s = \"10111111100000000000\", k = 1)",
        "shortestBeautifulSubstring(s = '0100100011010100', k = 3)",
        "shortestBeautifulSubstring(s = \"111000100011101101011000110000101110010000001\", k = 2)",
        "shortestBeautifulSubstring(s = \"1100010110001101010111111010000010101110010111011\", k = 3)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"abc\", \"zba\"])",
        "minimizeConcatenatedLength(words = [\"pap\", \"ple\", \"pie\"])",
        "minimizeConcatenatedLength(words = [\"d\", \"cc\", \"f\"])",
        "minimizeConcatenatedLength(words = [\"aabbcc\", \"aabbcc\", \"aabbcc\", \"abccaa\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"adf\", \"fec\"])",
        "minimizeConcatenatedLength(words = [\"banana\", \"mmxb\", \"azq\"])",
        "minimizeConcatenatedLength(words = [\"adb\", \"bcc\", \"acd\", \"b\", \"c\"])",
        "minimizeConcatenatedLength(words = [\"xjoh\", \"xahy\", \"yxol\", \"yuxb\"])",
        "minimizeConcatenatedLength(words = [\"moxeeuf\", \"o\", \"qe\", \"ueez\"])",
        "minimizeConcatenatedLength(words = [\"vouad\", \"kaq\", \"qwq\", \"vui\", \"qdvh\"])"
    ],
    "sample_327": [
        "isFascinating(n = 1234)",
        "isFascinating(n = 123456)",
        "isFascinating(n = 9)",
        "isFascinating(n = 1234567)",
        "isFascinating(1)",
        "isFascinating(n = 124)",
        "isFascinating(n = 60)",
        "isFascinating(24)",
        "isFascinating(n = 813)",
        "isFascinating(1224341)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[1, 3], [2, 4]])",
        "matrixSum(nums = [[1, 2], [1, 2]])",
        "matrixSum(nums = [[2, 1], [1, 2]])",
        "matrixSum(nums = [[5, 2], [1, 4], [2, 3]])",
        "matrixSum(nums = [[1, 1, 2], [3, 2, 1]])",
        "matrixSum(nums = [[2,2], [1,4], [3,2]])",
        "matrixSum([[10, 1, 10, 1, 10], [10, 10, 1, 10, 1]])"
    ],
    "sample_326": [
        "isFascinating(123)",
        "isFascinating(123)",
        "isFascinating(n = 210)",
        "isFascinating(42)",
        "isFascinating(333)",
        "isFascinating(1234)",
        "isFascinating(n = 333)",
        "isFascinating(n = 967)",
        "isFascinating(555)",
        "isFascinating(n = 913123113)"
    ],
    "sample_275": [
        "findChampion(grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]])",
        "findChampion(grid = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 1], [0, 0, 0, 0]])",
        "findChampion(grid = [[0,1,1,0], [1,1,1,1], [1,1,1,1], [0,1,1,0]])",
        "findChampion(grid = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1]])",
        "findChampion(grid = [[1, 1, 0, 0], [0, 0, 1, 1], [1, 0, 1, 0], [0, 1, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 0, 0], [1, 0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0, 0],\n                            [1, 1, 1, 0],\n                            [0, 1, 0, 1],\n                            [1, 0, 0, 0]])",
        "findChampion(grid = [[0,1,1,0], [1,0,0,0], [1,0,0,0], [0,0,1,0]])",
        "findChampion(grid = [[1,1,0,0],[1,0,1,0],[0,0,0,1],[1,1,0,1]])",
        "findChampion(grid = [[0, 1, 1, 1, 1, 0],\n                            [0, 1, 1, 1, 1, 0],\n                            [0, 1, 1, 1, 0, 0],\n                            [0, 1, 0, 1, 0, 0],\n                            [0, 1, 0, 1, 1, 0],\n                            [0, 0, 0, 0, 0, 0]])"
    ],
    "sample_260": [
        "minimumSum([1, 2, 3, 4, 5, 6, 7])",
        "minimumSum(nums = [4, 6, 7, 9])",
        "minimumSum(nums = [3, 5, 7, 10, 1])",
        "minimumSum(nums = [5, 3, 7, 4, 6, 2])",
        "minimumSum(nums = [3,1,5,2,4])",
        "minimumSum(nums = [3, 4, 7, 1, 9, 5])",
        "minimumSum(nums = [2, 5, 4, 6, 7, 3])",
        "minimumSum(nums = [3, 5, 7, 9, 11, 12, 13, 14])",
        "minimumSum(nums = [3, 4, 7, 1, 2, 8])",
        "minimumSum(nums = [4, 8, 12, 3, 10, 2, 7, 9, 6])"
    ],
    "sample_322": [
        "isFascinating(2)",
        "isFascinating(12345)",
        "isFascinating(n = 333)",
        "isFascinating(n = 13)",
        "isFascinating(n = 23)",
        "isFascinating(210)",
        "isFascinating(200)",
        "isFascinating(n = 111111111)",
        "isFascinating(410)",
        "isFascinating(n = 970)"
    ],
    "sample_248": [
        "minOperations(s1 = \"0100\", s2 = \"1110\", x = 2)",
        "minOperations(s1 = \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "minOperations(s1 = \"100\", s2 = \"111\", x = 3)",
        "minOperations(s1 = \"0011\", s2 = \"1111\", x = 2)",
        "minOperations(s1 = \"000\", s2 = \"010\", x = 1)",
        "minOperations(s1 = \"0011\", s2 = \"0111\", x = 2)",
        "minOperations(s1 = \"101\", s2 = \"101\", x = 5)",
        "minOperations(s1 = \"000100\", s2 = \"010101\", x = 2)",
        "minOperations(s1 = \"00011101111000\", s2 = \"10101010101110\", x = 3)",
        "minOperations(s1 = \"0000000001010101101101100000000000000000000000000000000000000000\", s2 = \"0000000001010101110110110000000000000000000000000000000000000000\", x = 2)"
    ],
    "sample_342": [
        "longestString(x = 4, y = 4, z = 4)",
        "longestString(x = 2, y = 2, z = 3)",
        "longestString(x = 3, y = 3, z = 4)",
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 6, y = 6, z = 4)",
        "longestString(x = 6, y = 6, z = 1)",
        "longestString(x = 1, y = 3, z = 4)",
        "longestString(x = 10, y = 3, z = 1)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [8, 9], moveTo = [6, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [4, 7], moveTo = [6, 8])",
        "relocateMarbles(nums = [1, 2, 5, 6, 8, 9], moveFrom = [2, 4], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 8, 9], moveFrom = [8, 6], moveTo = [9, 5])",
        "relocateMarbles(nums = [1, 5, 6, 8, 9], moveFrom = [4, 3], moveTo = [2, 7])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [4, 6], moveTo = [1, 7])",
        "relocateMarbles(nums = [5, 8, 9, 1], moveFrom = [1, 8, 9], moveTo = [6, 6, 6])",
        "relocateMarbles(nums = [1, 2, 3, 5, 6, 8, 9], moveFrom = [3, 5, 9], moveTo = [6, 8, 3])",
        "relocateMarbles(nums = [1, 2, 3, 5, 8], moveFrom = [3], moveTo = [8])",
        "relocateMarbles(nums=[4, 8, 1, 10, 15, 19, 2, 11], moveFrom=[2, 6], moveTo=[1, 10])"
    ],
    "sample_306": [
        "countSeniors(details = [\"\", \"\", \"\", \"\"])",
        "countSeniors(details = [\"name100yrs\", \"name50yrs\", \"name80yrs\"])",
        "countSeniors(details = [\"age: 17\", \"age: 22\", \"age: 61\", \"age: 78\"])",
        "countSeniors(details = [\"age 22\", \"age 35\", \"age 19\", \"age 61\", \"age 89\"])",
        "countSeniors(details = [\"Name: Joe Blogs, Date of Birth: 11/09/1957\"])",
        "countSeniors(details = [\"ID: 131213123\", \"ID: 123213123\"])",
        "countSeniors(details = [\"Name-11:22\", \"Name-30:01\", \"Name-61:02\", \"Name-40:01\", \"Name-60:02\"])",
        "countSeniors(details = [\"C1075123456,19461231\", \"C1075223456,19461231\"])",
        "countSeniors(details = [\"John Doe 20-30\", \"Jane Doe 25-35\", \"Alan Smith 50-60\", \"Gordon Ross 45-55\"])",
        "countSeniors(details = [\"ID2963473\", \"ID0029874\", \"ID1172051\", \"ID4238133\"])"
    ],
    "sample_303": [
        "countSeniors(details = ['John65','Mary37','Peter42'])",
        "countSeniors(details = [\"Hazel25\", \"Samantha31\", \"Vicky68\", \"Dave21\"])",
        "countSeniors(details = [\"John Smith,1937\", \"Jane Doe,2010\", \"Peter Gynn,1962\", \"Mary Lou,1975\"])",
        "countSeniors(details = [\"John(28)\", \"Billy(12)\", \"John(65)\", \"Billy(12)\"])",
        "countSeniors(details = [\"susan,si,50,b\", \"peter,p,90,a\", \"ana,a,10,c\", \"lucas,l,40,a\"])",
        "countSeniors(details = [\"Kate_Bell_65\", \"Felicity_Door_28\", \"Sean_Baker_59\", \"Marie_Curie_100\"])",
        "countSeniors(details = [\"Jonathan:70\", \"Bill:85\", \"Doris:63\", \"Mike:22\", \"Violet:96\"])",
        "countSeniors(details = [\"Peter,Smith,52,76\",\"Bill,Gates,46,75\",\"Jeff,Bezos,55,79\",\"Ruth,Jobs,25,66\"])",
        "countSeniors(details = [\"Ru0Ku00E,19830115\", \"Vu0Lv00E,19850505\", \"Wu0Nw00E,19990815\"])",
        "countSeniors(details = ['996326402XM, 22, 1962', '9678529410L, 23, 1960', '914785298XK, 67, 1940', '985295212XK, 62, 1950', '9512126352XJ, 60, 1950'])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 8], moveTo = [9, 5])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [5, 9])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7, 9], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7], moveTo = [6])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [5, 8], moveTo = [6, 7])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [2, 4], moveTo = [0, 3])",
        "relocateMarbles(nums = [5, 7, 8, 9], moveFrom = [7, 8], moveTo = [6, 6])",
        "relocateMarbles(nums = [3, 5, 6, 7, 8, 9], moveFrom = [3, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [1, 2, 4], moveTo = [5, 6, 8])",
        "relocateMarbles(nums=[6, 8, 9], moveFrom=[5, 5, 5], moveTo=[5, 6, 8])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"bbb\", s3 = \"ccc\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"nana\", s3 = \"banana\")",
        "findMinimumOperations(s1=\"abc\", s2=\"adc\", s3=\"abd\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"ac\", s3 = \"aa\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"nan\")",
        "findMinimumOperations(s1 = \"b\", s2 = \"a\", s3 = \"n\")",
        "findMinimumOperations(s1 = \"ababa\", s2 = \"bcbc\", s3 = \"abcabc\")",
        "findMinimumOperations(s1 = \"bab\", s2 = \"bob\", s3 = \"cob\")",
        "findMinimumOperations(s1 = \"fedd\", s2 = \"bcd\", s3 = \"afed\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aba\", s2 = \"bcb\", s3 = \"aba\")",
        "findMinimumOperations(s1 = \"baa\", s2 = \"bab\", s3 = \"bac\")",
        "findMinimumOperations(s1 = \"bac\", s2 = \"bac\", s3 = \"baa\")",
        "findMinimumOperations(s1 = \"babcc\", s2 = \"bacbc\", s3 = \"bcbca\")",
        "findMinimumOperations(s1 = \"pumpkin\", s2 = \"eggplant\", s3 = \"grapes\")",
        "findMinimumOperations(s1 = \"1000\", s2 = \"0010\", s3 = \"0001\")",
        "findMinimumOperations(s1 = \"zzab\", s2 = \"zzxb\", s3 = \"zzrb\")",
        "findMinimumOperations(s1 = \"kaetvnuqfy\", s2 = \"kasvgqcetfn\", s3 = \"katvnufqysg\")"
    ],
    "sample_407": [
        "minimumRightShifts(nums = [1,2,3,4,5,6,7])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7,8])",
        "minimumRightShifts(nums = [2, 2, 2, 2])",
        "minimumRightShifts(nums = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minimumRightShifts(nums = [3, 1, 4, 2, 5])",
        "minimumRightShifts(nums = [3, 1, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minimumRightShifts(nums = [2, 1, 6, 7, 2, 9, 3, 13])"
    ],
    "sample_453": [
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"aabbc\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"abcb\")",
        "minChanges(s = \"aaabbbaaa\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"bcda\")",
        "minChanges(s = \"caabbc\")",
        "minChanges(s = \"4321\")",
        "minChanges(s = \"aabbbccccccccccc\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 2, 4, 3], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 3, 1, 2, 4, 3], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 1, 4, 2, 1], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 3, 1, 4, 2, 5, 3, 6], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 4, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [2,3,3,5], target = 6)",
        "lengthOfLongestSubsequence(nums = [4, 1, 3], target = 12)",
        "lengthOfLongestSubsequence(nums = [1,1,3,2,4,5,6,6,2], target = 9)"
    ],
    "sample_367": [
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = 'Lymph')",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = 'lYmPh')",
        "sortVowels(s = 'lYmPh')",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'yLYmpH')",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = 'Levy')",
        "sortVowels(s = 'WKMJLpH')"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2], target = 2)",
        "lengthOfLongestSubsequence(nums = [2,3,11,5], target = 7)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 5)",
        "lengthOfLongestSubsequence(nums = [2,1,5,2,3,2], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 1], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 1, 2, 2, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1,2,3,5,5], target = 9)"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3,4], t = 7)",
        "countPairs(nums = [1,2,3], t = 7)",
        "countPairs(nums = [1, 2, 3], t = 4)",
        "countPairs(nums = [1,1,1,1], t = 3)",
        "countPairs(nums = [1, 2, 3, 4], t = 10)",
        "countPairs(nums = [2,7,11,15], t = 9)",
        "countPairs(nums=[1,4,3,5,7], t=12)",
        "countPairs(nums=[-1, 3, 5, 7, 9, 11], t=15)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 3, 2, 4, 5])",
        "isGood([1, 2, 3, 4])",
        "isGood(nums = [1, 3, 4, 5])",
        "isGood(nums = [1, 3, 5, 6])",
        "isGood(nums = [5, 4, 3, 2, 1, 0])",
        "isGood(nums = [1, 1, 2, 2, 3, 3])",
        "isGood(nums = [5, 6, 7, 8, 9])",
        "isGood(nums = [5, 3, 6, 2, 4, 1])",
        "isGood(nums = [5, 7, 3, 2, 1, 0, 6, 4])"
    ],
    "sample_369": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"LympH\")",
        "sortVowels(s = \"LYmph\")",
        "sortVowels(s = \"yYmpL\")",
        "sortVowels(s = \"hEYli\")",
        "sortVowels(s = \"hydrOgen\")",
        "sortVowels(s = 'HmnyLy')",
        "sortVowels(s = \"HeLLo\")",
        "sortVowels(s = 'bheem')"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minimumRightShifts(nums = [5, 4, 3, 2, 1])",
        "minimumRightShifts(nums = [2, 1, 0, 2, 1, 0])",
        "minimumRightShifts(nums = [3, 1, 0, 2, 4])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [4, 5, 7, 6, 8])",
        "minimumRightShifts(nums = [2, 2, 1, 1, 1, 2, 2, 2])",
        "minimumRightShifts(nums = [2, 5, 6, 8, 0])",
        "minimumRightShifts(nums = [7, 10, 12, 15])",
        "minimumRightShifts(nums = [2, 0, 1, 2, 0, 1, 0])"
    ],
    "sample_448": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"abcdef\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(\"abcdd\")",
        "minChanges(s = \"caba\")",
        "minChanges(s = \"xxxyyyzzzz\")",
        "minChanges(\"cab\")",
        "minChanges(s = \"baaab\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abdc\", s2 = \"cdab\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bacd\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bab\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"adcbe\")",
        "canBeEqual(s1 = \"baab\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"acb1\", s2 = \"a1cb\")",
        "canBeEqual(s1 = \"4559\", s2 = \"5945\")",
        "canBeEqual(s1 = \"8265\", s2 = \"6238\")",
        "canBeEqual(s1 = \"46389\", s2 = \"98463\")",
        "canBeEqual(s1 = \"258a\", s2 = \"438b\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1,1,3,3,7,2,2,2,2])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7])",
        "minLengthAfterRemovals(nums = [3, 3, 3, 3, 5, 5, 5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [3,1,3,3,3,1,1])",
        "minLengthAfterRemovals(nums = [4,4,4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 1, 1])",
        "minLengthAfterRemovals(nums = [3,3,2,2,2,4,4,4,4])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 3])",
        "isGood(a = [1, 1, 2, 2, 3])",
        "isGood(a = [0, 1, 2, 2, 3])",
        "isGood(a = [1, 2, 3, 3, 5])",
        "isGood(a = [1, 1, 1, 1, 1, 1])",
        "isGood(a = [0,0,1,2,2])",
        "isGood(a = [0, 3, 2, 1, 2, 1])",
        "isGood(a = [4, 2, 3, 1, 2, 2, 1])",
        "isGood([1, 3, 3, 3, 3, 5, 5, 5, 6, 6])",
        "isGood(a = [1, 2, 3, 4, 4, 4, 5, 1, 1, 5, 5, 5])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4,5,6,7,8], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 9)",
        "minOperations(nums = [1,2,3,4], k = 2)",
        "minOperations(nums = [10,9,4,1], k = 2)",
        "minOperations(nums = [3,2,2,4,2], k = 4)",
        "minOperations(nums = [0,2,4,1,3], k = 3)",
        "minOperations(nums = [2,1,3,3,1], k = 2)",
        "minOperations(nums=[9,5,3,9,5,7,3], k=5)",
        "minOperations(nums = [1,5,1,5,4,1,4,4,4,4,4], k = 5)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength(nums = [1,2,3,4])",
        "findMaximumLength(nums = [1, 4, 4])",
        "findMaximumLength(nums = [1,3,1,4,1,5,2])",
        "findMaximumLength(nums = [4, 2, 2, 1, 5])",
        "findMaximumLength(nums = [1,2,3,3,2,1,2])",
        "findMaximumLength(nums = [1, 3, 2, 4, 3, 5, 7, 2, 2, 1])",
        "findMaximumLength(nums = [-1,-2,-3,-4,2,0,4,1,-1,5])",
        "findMaximumLength([10, 15, 13, 16, 14, 15, 13])",
        "findMaximumLength(nums
    ],
    "sample_433": [
        "maxSubarrays(nums = [1,2,3,4])",
        "maxSubarrays(nums = [1,2,3])",
        "maxSubarrays(nums = [1,2,3])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays(nums = [0, 1, 1])",
        "maxSubarrays(nums = [0, 2, 5, 6])",
        "maxSubarrays(nums = [0, 1, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1,1,0,1,1,0,1,1])",
        "maxSubarrays(nums = [1, 2, 2, 0, 4, 2, 1])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"zzz\", str2 = \"abab\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"abcz\")",
        "canMakeSubsequence(str1 = \"zzz\", str2 = \"ababab\")",
        "canMakeSubsequence(str1 = \"zazbz\", str2 = \"azcbazcbazcba\")",
        "canMakeSubsequence(str1 = \"bac\", str2 = \"cbca\")",
        "canMakeSubsequence(str1 = 'aaaa', str2 = 'abcd')",
        "canMakeSubsequence(str1 = \"yv\", str2 = \"ivy\")",
        "canMakeSubsequence(str1 = \"abcdz\", str2 = \"za\")",
        "canMakeSubsequence(str1 = 'zbb', str2 = 'abc')",
        "canMakeSubsequence(str1 = 'zqw', str2 = 'zxwq')"
    ],
    "sample_402": [
        "maxSum(nums = [1,2], m = 1, k = 2)",
        "maxSum(nums = [1,1,1,1,1,1,1,1], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1], m = 3, k = 2)",
        "maxSum(nums = [1, 1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1], m = 3, k = 4)",
        "maxSum(nums = [1, 3, 4, 2], m = 3, k = 1)",
        "maxSum(nums = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6], m = 2, k = 3)",
        "maxSum(nums = [1,3,5,9,4,2], m = 2, k = 1)",
        "maxSum(nums = [95, 55, 45, 85, 60, 65, 95], m = 3, k = 3)",
        "maxSum(nums = [5, 2, 6, 1, 5, 5, 4, 4, 1, 1, 1], m = 3, k = 10)"
    ],
    "sample_470": [
        "findWordsContaining(words = [], x = \"\")",
        "findWordsContaining(words = [], x = \"ba\")",
        "findWordsContaining(words = [\"one\", \"two\", \"three\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"w\")",
        "findWordsContaining(words = [\"hello\", \"hola\", \"aloha\"], x = \"a\")",
        "findWordsContaining(words = [\"sunset\", \"sun\", \"run\"], x = \"un\")",
        "findWordsContaining(words = [\"ninja\", \"noob\", \"ninja\", \"samurai\", \"noob\"], x = \"noob\")",
        "findWordsContaining(words = [\"pypy\", \"python\", \"pyramid\", \"duck\"], x = \"py\")",
        "findWordsContaining(words = [\"happy\", \"may\", \"is\", \"happy\"], x = \"n\")",
        "findWordsContaining(words = [\"apple\", \"bob\", \"banana\", \"abc\"], x = \"ban\")"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"next\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', 'prev', 'prev', '1', '2'])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"prev\", \"4\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"1\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = ['prev', 'prev', 'prev', '4', '5', 'prev', 'prev', '7'])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"1\", \"prev\", \"1\", \"prev\", \"2\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = ['3', '1', 'prev', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'next', '4', 'next', '3', 'next', 'prev', 'prev', 'prev'])"
    ],
    "sample_422": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "minOperations(nums = [2,2,2,2,2], k = 3)",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1], k = 3)",
        "minOperations(nums = [2, 7, 9, 2, 4, 5], k = 3)",
        "minOperations(nums = [3, 4, 5, 6, 7, 8], k = 4)",
        "minOperations(nums = [5,6,2,4,2], k = 4)",
        "minOperations(nums = [1,2,2,3,4,1], k = 4)",
        "minOperations(nums = [2,6,9,9], k = 3)",
        "minOperations(nums = [3, 4, 5, 9, 2, 1], k = 6)",
        "minOperations(nums = [2, 6, 4, 5, 3, 4, 5], k = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [2, 2, 2, 2, 2], k = 2)",
        "minOperations(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10], k = 9)",
        "minOperations(nums = [2, 7, 4, 1, 8, 1], k = 3)",
        "minOperations(nums = [4, 2, 3], k = 1)",
        "minOperations(nums = [3, 1, 3, 4, 3], k = 2)",
        "minOperations(nums = [2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [3, 3, 5], k = 2)",
        "minOperations(nums = [2,3,1,5,2,4,5], k = 2)",
        "minOperations(nums = [2, 7, 4, 1, 2, 6, 9, 3, 11], k = 9)",
        "minOperations(nums = [2, 3, 1, 3, 1, 4], k = 5)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1,1,2,2])",
        "minimumSeconds(nums = [3, 3, 1, 3, 2])",
        "minimumSeconds(nums = [1, 3, 2, 4, 2, 3, 7])",
        "minimumSeconds(nums = [1,3,4])",
        "minimumSeconds(nums = [1,3,2,4,5,12,13])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 10)",
        "countPairs(nums = [1, 2, 3], target = 5)",
        "countPairs(nums = [1,3,4,5], target = 2)",
        "countPairs(nums = [1, 2, 3, 4, 5, 6], target = 6)",
        "countPairs(nums = [1, 1, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,3,4,2,3,5], target = 6)",
        "countPairs(nums = [5, 6, 7, 1, 2, 3], target = 10)",
        "countPairs(nums = [3, 5, 2, 1, 7, 5, 3, 4], target = 10)",
        "countPairs(nums = [12, 24, 36, 24, 20], target = 40)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\", \"java\"], x = \"o\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"], x = \"the\")",
        "findWordsContaining(words = [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\"], x = \"u\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\"], x = \"a\")",
        "findWordsContaining(words = [\"abc\", \"xyz\", \"123\"], x = \"z\")",
        "findWordsContaining(words = ['abc', 'def', 'ghi'], x = 'd')",
        "findWordsContaining(words = [\"eggs\", \"milk\", \"cheese\"], x = \"e\")",
        "findWordsContaining(words = [\"dog\", \"cat\", \"plane\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"hahaha\", \"hahahb\"], x = \"ha\")",
        "findWordsContaining(words = [\"elephant\", \"truck\", \"snake\"], x = \"r\")"
    ],
    "sample_372": [
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = 'elephant')",
        "sortVowels(s = \"elephant\")",
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = 'etcede')",
        "sortVowels(s = \"leeetcede\")",
        "sortVowels(s = \"element\")",
        "sortVowels(s = \"codeEeTedlOte\")",
        "sortVowels(s = \"hello world\")"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1,1,3,3,5,5,7,7])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5,2,2,7])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 3, 5, 5, 7, 7])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4,5])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,2])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 5])",
        "minLengthAfterRemovals(nums = [0, 3, 4, 3, 1, 1, 5, 1, 1])"
    ],
    "sample_452": [
        "minChanges(s = \"abc\")",
        "minChanges(s = \"aab\")",
        "minChanges(s = \"xxxyyy\")",
        "minChanges(s = \"abcdefg\")",
        "minChanges(s = \"aabba\")",
        "minChanges(s = \"loveleetcode\")",
        "minChanges(s = \"fcrxzwscanml\")",
        "minChanges(s = \"0000\")",
        "minChanges(s = \"jvvve\")",
        "minChanges(s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")"
    ],
    "sample_385": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [2,7,11,15], target = 9)",
        "countPairs(nums = [2,7,11,15], target = 9)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,3,4,5,6], target = 7)",
        "countPairs(nums = [1, 3, 5], target = 10)",
        "countPairs(nums = [1,1,3,2,2,4], target = 5)",
        "countPairs(nums = [1,3,4,5,6], target = 12)",
        "countPairs(nums = [2,5,5,1,2], target = 12)"
    ],
    "sample_427": [
        "minOperations(nums = [3,2,2,4,2])",
        "minOperations(nums = [3,2,2,4,2])",
        "minOperations(nums = [1,1,1,2,2,2,3])",
        "minOperations(nums = [1,1,1,2,2,2])",
        "minOperations(nums = [2, 6, 4, 8, 10])",
        "minOperations(nums = [3, 4, 6, 8])",
        "minOperations(nums = [4,3,2,6,4,4,2,2])",
        "minOperations(nums = [1,2,2,2,3,3,3])",
        "minOperations(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4])",
        "minOperations(nums = [2, 5, 4, 4, 5, 2, 2, 2, 5, 5, 2, 2])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [3,3,2,2,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,3])",
        "minLengthAfterRemovals(nums = [3,3,3,3,5,5,5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4,11,11])",
        "minLengthAfterRemovals(nums = [2,2,3,3,4,4,6,6,7,7])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])",
        "minLengthAfterRemovals(nums = [5,1,3,3,5,1,3,3,5,1,3,3,5,1,3,3])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [2, 4, 1, 3, 5, 9])",
        "minimumCoins(prices = [1, 3, 6, 8, 10, 2])",
        "minimumCoins(prices = [2, 4, 7, 1, 14])",
        "minimumCoins(prices = [5, 6, 3, 1, 6, 7])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"hello\", \"world\", \"python\"], x = \"o\")",
        "findWordsContaining(words = [\"one\", \"two\", \"three\"], x = \"o\")",
        "findWordsContaining(words = [\"the\", \"sky\", \"is\", \"blue\"], x = \"s\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\", \"hello world\"], x = \"l\")",
        "findWordsContaining(words = [\"python\", \"python3\", \"py\"], x = \"th\")",
        "findWordsContaining(words = [\"a\", \"cat\", \"t\", \"hat\"], x = \"at\")",
        "findWordsContaining(words = [\"python\", \"banana\", \"plant\", \"anaconda\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"words\", \"python\", \"java\"], x = \"or\")",
        "findWordsContaining(words = [\"blond\", \"dumb\", \"green\"], x = \"u\")",
        "findWordsContaining(words = [\"Emergency\", \"Dictionary\", \"Word\", \"Bank\"], x = \"r\")"
    ],
    "sample_420": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], k = 9)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 9)",
        "minOperations(nums = [1,2,3,4,5,6,1], k = 3)",
        "minOperations(nums = [2, 2, 2, 2, 2], k = 3)",
        "minOperations(nums = [2,5,6], k = 3)",
        "minOperations(nums = [2, 6, 3, 4, 5], k = 4)",
        "minOperations(nums = [4, 5, 6, 2, 6, 4, 5], k = 3)",
        "minOperations(nums = [2, 8, 4, 3, 3, 1, 5], k = 4)",
        "minOperations(nums = [2,5,3,4,5,4,5,2,3,4,3,4,5,2], k = 1)",
        "minOperations(nums = [2,4,1,7,8,1,4,1,1,4,2,2,1], k = 3)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 6])",
        "isGood(nums = [1,2,3,4,6])",
        "isGood(nums = [1,2,3,4,6])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,5])",
        "isGood(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "isGood(nums = [2, 3, 1])",
        "isGood(nums = [2, 3, 1, 0])",
        "isGood(nums = [1,2,3,4,5,6,7,8,10,11,12,13])",
        "isGood(nums = [1,3,5,2,4])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5], target = 4)",
        "lengthOfLongestSubsequence(nums = [2,4,6,8,10], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 2, 2], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 4, 5, 6], target = 8)",
        "lengthOfLongestSubsequence(nums = [5,4,3,1,2], target = 3)",
        "lengthOfLongestSubsequence(nums = [2,3,2,2,1], target = 7)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,3])",
        "isGood(nums = [1,2,3,5])",
        "isGood(nums = [2, 3, 4])",
        "isGood(nums = [1, 3, 4, 5])",
        "isGood(nums = [2, 3, 4, 5])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [0,1,2,3,5])",
        "isGood(nums = [1, 2, 3, 5, 5, 6, 7])",
        "isGood(nums = [3, 2, 2, 1])",
        "isGood(nums = [0, 1, 1, 2, 3, 3, 5])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [0, 1, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 2, 3, 0])",
        "maxSubarrays(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1, 1, 0, 0])",
        "maxSubarrays(nums = [0, 1, 1, 1, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0])",
        "maxSubarrays(nums = [2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])",
        "maxSubarrays(nums = [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [2, 3, 7, 5], target = 12)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1,2,3,2,4], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 2, 2, 4], target = 8)",
        "lengthOfLongestSubsequence(nums = [4, 6, 1, 1, 4, 1], target = 4)"
    ],
    "sample_450": [
        "minChanges(s = \"aab\")",
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"aaba\")",
        "minChanges(s = \"aaabbbc\")",
        "minChanges(s = \"aaabbbaaa\")",
        "minChanges(s = \"aaabbbaaa\")",
        "minChanges(s = \"baab\")",
        "minChanges(s = \"beabeefeab\")",
        "minChanges(s = \"2020202020\")",
        "minChanges(s = \"cbccbbacacbb\")"
    ],
    "sample_463": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 3, limit = 1)",
        "distributeCandies(n = 20, limit = 3)",
        "distributeCandies(n = 20, limit = 10)",
        "distributeCandies(n=8, limit=3)",
        "distributeCandies(n=8, limit=3)",
        "distributeCandies(n=20, limit=5)",
        "distributeCandies(n = 12, limit = 10)"
    ],
    "sample_443": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,2,3,3,3,4,4,4,4])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 4, 5, 6])",
        "sumCounts(nums = [1, 1, 1, 1, 1, 2, 2])",
        "sumCounts(nums = [3, 2, 2])",
        "sumCounts(nums = [3, 3, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 3, 4, 5, 1, 1, 3])"
    ],
    "sample_449": [
        "minChanges(s = \"abba\")",
        "minChanges(s = \"abba\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"aaa\")",
        "minChanges(s = \"abcd\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"ababa\")",
        "minChanges(s = \"aaabbbccc\")",
        "minChanges(s = \"1111\")",
        "minChanges(s = \"book\")"
    ],
    "sample_425": [
        "minOperations(nums = [1, 1, 1])",
        "minOperations(nums = [1,1,1])",
        "minOperations(nums = [1,1,1,2,2,2,3])",
        "minOperations(nums = [2, 2, 2, 4, 2])",
        "minOperations(nums = [1, 1, 1, 1])",
        "minOperations(nums = [3, 3, 3, 3, 2, 2, 2])",
        "minOperations(nums = [2,2,2,2,2,2,2,2,2,2,2,2])",
        "minOperations(nums = [2,3,6,6,5])",
        "minOperations(nums = [1, 2, 3, 4, 3, 3, 2, 4, 2, 1])",
        "minOperations(nums = [1,3,2,2,2,2,3,4,2,1,1,1,1,1,2,2])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"bcd\")",
        "canMakeSubsequence(str1 = \"agc\", str2 = \"cba\")",
        "canMakeSubsequence(str1 = \"bc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"zzzzz\", str2 = \"aaa\")",
        "canMakeSubsequence(str1 = \"azzzzyyy\", str2 = \"zy\")",
        "canMakeSubsequence(str1 = \"aaaaz\", str2 = \"aaaa\")",
        "canMakeSubsequence(str1 = \"zzzzzzzzzzz\", str2 = \"zaaaaaaaaaaz\")",
        "canMakeSubsequence(str1 = \"aaaaaaaaaab\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"xxyyzz\", str2 = \"aabac\")",
        "canMakeSubsequence(str1 = \"zzyzva\", str2 = \"zzvaszz\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1])",
        "minimumSeconds([1,1])",
        "minimumSeconds(nums = [1, 1, 1, 1, 1, 1, 1])",
        "minimumSeconds(nums = [1,3,2,1])",
        "minimumSeconds(nums = [1,3,2,4,2,1,2,2,4])",
        "minimumSeconds(nums = [8, 15, 3, 7])",
        "minimumSeconds(nums = [0,1,2,3,4])",
        "minimumSeconds(nums = [10, 12, 5, 12, 15])",
        "minimumSeconds(nums = [1,3,2,4,3,2,5,4,6,7,8,9,10,9,8,7,6,5,4,3,2,3,4,2,1,2,3,4,5,6,7,8,9,10])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [10,1,2,7,6,1,5], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2], target = 3)",
        "lengthOfLongestSubsequence(nums = [1,2,3], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 2, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 4, 1, 3, 5], target = 6)"
    ],
    "sample_370": [
        "sortVowels(s = \"leotcede\")",
        "sortVowels(s = \"tEOdcede\")",
        "sortVowels(s = \"eotcedl\")",
        "sortVowels(s = 'eleodee')",
        "sortVowels(s = 'eEdE')",
        "sortVowels(s = \"toEdeCeled\")",
        "sortVowels(s = \"hello\")",
        "sortVowels(s = \"Leetcode\")",
        "sortVowels(s = \"tEoeTedL\")",
        "sortVowels(s = 'EdvEDdEd')"
    ],
    "sample_421": [
        "minOperations(nums = [2,3,4,5,6,7,8,9,10], k = 9)",
        "minOperations(nums = [2,7,4,1,8,1], k = 3)",
        "minOperations(nums = [0,1,2], k = 3)",
        "minOperations(nums = [10, 2, 10, 5, 10], k = 2)",
        "minOperations(nums = [0, 1, 2], k = 1)",
        "minOperations(nums = [2, 7, 4], k = 10)",
        "minOperations(nums = [4, 3, 2, 6, 5], k = 3)",
        "minOperations(nums = [2, 5, 10, 2, 10], k = 10)",
        "minOperations(nums = [0, 1, 11, 10, 13, 2, 12, 11, 1, 3, 14, 7, 8, 12, 2, 11, 11], k = 12)",
        "minOperations(nums = [0,2,3,5,6,7,9,11,12,19,45,46,48,49,58,59,61,63,65,66,67,69,71,72,73,75,76,77,78,79,81,82,83,84,86,87,88,89,91,92,93,94,95,96,97,98,99], k = 98)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 3, 4])",
        "maxSubarrays(nums = [1,2,3,4])",
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "maxSubarrays(nums = [1, 2, 3, 2])",
        "maxSubarrays(nums = [1, 2, 3, 4, 6])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 3, 1, 4, 5, 7, 2])",
        "maxSubarrays(nums = [1, 2, 3, 4, 2, 1, 1, 2, 3, 1, 1, 0, 3, 3, 2, 1, 1, 2, 2])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[1, 2], [2, 1]], k = 2)",
        "countPairs(coordinates = [[1, 2], [2, 2], [2, 3], [3, 4], [4, 4], [5, 5]], k = 4)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 2]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 0]], k = 1)",
        "countPairs(coordinates = [[1, 1], [2, 2], [2, 3], [3, 1], [3, 2], [4, 4]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,1],[1,0]], k = 1)",
        "countPairs(coordinates = [[1,1],[2,2],[3,3]], k = 6)",
        "countPairs(coordinates = [[1, 3], [2, 3], [1, 1]], k = 1)",
        "countPairs(coordinates = [[-1, -1], [-1, 0], [-1, 1], [1, -1], [1, 0], [1, 1]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4]], k = 3)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1], target = 2)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 4, 2, 1], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 4, 2, 1, 4, 2, 3, 4], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 2, 2, 2, 3], target = 1)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 10, 11, 23, 35], target = 8)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5, 5, 2], target = 6)",
        "lengthOfLongestSubsequence(nums = [1, 3, 2, 2, 4, 4, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 1, 1, 1, 2, 2, 2, 3], target = 7)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,2,3,3,3,4,4,4,4])",
        "sumCounts(nums = [1,2,2,3])",
        "sumCounts(nums = [1,2,2,3,3,3])",
        "sumCounts(nums = [1, 2, 2, 3])",
        "sumCounts(nums = [1,2,3,2])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 3])",
        "sumCounts(nums = [1,2,2,1,1,3])",
        "sumCounts(nums = [1,2,3,3,4,5,5,6,7])",
        "sumCounts(nums = [4, 3, 1, 1, 2, 1, 1])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"01\")",
        "minimumBeautifulSubstrings(s = \"1\")",
        "minimumBeautifulSubstrings(s = \"12345\")",
        "minimumBeautifulSubstrings(\"01\")",
        "minimumBeautifulSubstrings(s = \"0011011\")",
        "minimumBeautifulSubstrings(s = \"0123\")",
        "minimumBeautifulSubstrings(s = \"1011\")",
        "minimumBeautifulSubstrings(s = \"123456789012345678901234567890\")",
        "minimumBeautifulSubstrings(s = \"01101011011\")",
        "minimumBeautifulSubstrings(\"1234567890\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1,1,0,1])",
        "maxSubarrays(nums = [1,1,0,1])",
        "maxSubarrays(nums = [0,1,0,1,1,1,0])",
        "maxSubarrays(nums = [0,1,0,1,1,1,0])",
        "maxSubarrays(nums = [0, 1, 1, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 3, 1, 4, 5])",
        "maxSubarrays(nums = [1,0,1,1,1,1,1,1])",
        "maxSubarrays(nums = [1, 1, 1, 0, 1, 0, 1, 0, 0, 1])",
        "maxSubarrays(nums = [0,1,0,-1,0,-1])",
        "maxSubarrays(nums = [1,0,1,1,0,0,1,1,0,1,1,0,1,1])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 1, 2], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 1, 2], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 3, k = 2)",
        "maxSum(nums = [4, 2, 1, 6], m = 1, k = 2)",
        "maxSum(nums = [9, 8, 7, 6, 7, 8, 9, 6, 7], m = 2, k = 3)",
        "maxSum(nums = [5, 9, 10, 2, 5, 5, 10, 10, 2], m = 3, k = 4)",
        "maxSum(nums = [2, 3, 4, 1, 9, 5, 2, 4, 1, 2, 7, 4, 1, 8], m = 4, k = 4)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(A = [2, 1, 4, 3], m = 2, k = 2)",
        "maxSum(A = [1, 2, 1, 2], m = 2, k = 2)",
        "maxSum(A = [1, 2, 1, 2, 6, 7, 5], m = 2, k = 3)",
        "maxSum(A = [1, 2, 1, 2, 1, 2, 1, 2], m = 2, k = 3)",
        "maxSum(A = [5, 5, 5, 3, 10], m = 3, k = 1)",
        "maxSum(A = [1,1,2,2,3,4,5,6,6], m = 4, k = 2)",
        "maxSum(A = [6, 9, 4, 8, 9, 5, 9, 9, 1, 0, 1, 4], m = 5, k = 5)",
        "maxSum(A = [1, 2, 3, 4, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9], m = 9, k = 3)",
        "maxSum(A = [1, 1, 2, 2, 2, 1, 2, 4, 5, 6], m = 2, k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 1, 2, 1])",
        "isGood(nums = [1, 3, 4, 2, 3])",
        "isGood(nums = [1, 2, 1, 1, 3, 2, 2, 2])",
        "isGood(nums = [1, 1, 1, 2, 2, 2, 3, 4])",
        "isGood(nums = [1, 2, 2, 1, 3, 4])",
        "isGood(nums = [1, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5])",
        "isGood(nums = [1,1,2,2,3,3,4,4,4,4,5,5])",
        "isGood(nums = [2,1,1,1,2,3])",
        "isGood(nums = [2, 2, 1, 3, 3, 1, 4, 4, 1])",
        "isGood(nums = [2, 3, 2, 2, 3, 1, 2])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [1, 2, 3, 4])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [1, 2, 1])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minimumSeconds(nums = [1, 2, 2, 1])",
        "minimumSeconds(nums = [4, 2, 3, 1])",
        "minimumSeconds(nums = [3, 1, 1, 1])",
        "minimumSeconds(nums = [1, 1, 1, 2, 2, 2, 1, 1, 1, 1])",
        "minimumSeconds(nums = [10, 3, 10, 6])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1, 1, 1])",
        "minimumSeconds(nums = [2, 1, 3])",
        "minimumSeconds(nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9])",
        "minimumSeconds(nums = [100,0,100,0,100,0,100,0,100,0])",
        "minimumSeconds([1, 1, 2, 2])",
        "minimumSeconds(nums = [0, 1, 2, 2, 3, 4, 5, 5, 6, 6])",
        "minimumSeconds(nums = [3, 1, 10, 4, 3, 1])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,5,5,5,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5])",
        "minLengthAfterRemovals(nums = [2, 2, 3, 3, 3, 4, 4, 4])",
        "minLengthAfterRemovals(nums = [4,3,2,3,4,5,6,1])",
        "minLengthAfterRemovals(nums = [2, 1, 2, 2, 2, 2, 2, 1, 2, 2])",
        "minLengthAfterRemovals(nums = [4,4,3,1,1,3,4,4])",
        "minLengthAfterRemovals(nums = [2,1,2,2,3,1,2,2,3,3,4,4,5,1,2,3,4,2,2,2,2,4,2,4,4,4,2,2,4,2,4])",
        "minLengthAfterRemovals(nums = [0,2,3,0,1,0,1,1,0,2,3,1,0,2,3,1,1,2,0,2,3,1,1,0,2,3,1,0,2,3,1,1,0,2,3,1,1,0,2,3,1,1,0,2,3,1,1,0,2,3,1,1])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2,6,7,5,1], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [5,5,5], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1, 1], m = 10, k = 1)",
        "maxSum(nums = [0,1,0,1,0,1,0,1], m = 3, k = 4)",
        "maxSum(nums = [2,4,5,3,4], m = 1, k = 1)",
        "maxSum(nums = [2,6,15,6,9,3,0,1], m = 3, k = 3)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 1, 2, 6, 7, 5, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2,1,2], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,1,1,1,1,1,1,1,1], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,1,1,1,1,1], m = 1, k = 3)",
        "maxSum(nums = [3, 1, 3, 1], m = 2, k = 2)",
        "maxSum(nums = [1,2,1,2,6,7,8,1,2,1,1,1,2,1], m = 3, k = 3)",
        "maxSum(nums = [3, 1, 5, 1, 7, 6], m = 4, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 4, 3, 2, 1, 1, 3, 4, 4, 2], m = 1, k = 5)",
        "maxSum(nums = [1, 1, 1, 1, 2, 2, 2], m = 2, k = 3)"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood(nums = [1,2,3,4,5,6,7])",
        "isGood(nums = [1,2,3,4,5,6,7,8,9,10])",
        "isGood(nums = [4, 1, 2, 3])",
        "isGood(nums = [1,3,2,5,4,6])",
        "isGood(nums = [0, 1, 3, 4])",
        "isGood(nums = [1, 2, 5, 10])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1])",
        "minLengthAfterRemovals(nums = [1])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1,1,1,2,3])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,6,1,2,3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3])",
        "minLengthAfterRemovals(nums = [2,2,3,3,2,2,2,2])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"carrot\"], x = \"a\")",
        "findWordsContaining(words = [\"hi\", \"bye\", \"goodbye\"], x = \"bye\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"what\", \"is\", \"up\"], x = \"u\")",
        "findWordsContaining(words = [\"Dog\", \"Cat\", \"Bat\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"apple\", \"world\"], x = \"pp\")",
        "findWordsContaining(words = [\"hello\", \"banana\", \"apple\"], x = \"n\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"bongo\"], x = \"o\")",
        "findWordsContaining(words = [\"hello\", \"hello there\", \"to be or not to be\"], x = \"hello\")",
        "findWordsContaining(words = [\"i\", \"am\", \"an\", \"egg\", \"sam\"], x = \"e\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50, 100, 200])",
        "minimumCoins(prices = [1, 4, 8, 9, 10, 20, 40, 80, 90, 100])",
        "minimumCoins(prices = [2, 1, 2, 1, 1])",
        "minimumCoins(prices = [2, 3, 5, 5])",
        "minimumCoins(prices = [3, 4, 2, 9, 11, 1])",
        "minimumCoins(prices = [2, 4, 5, 9, 100])",
        "minimumCoins(prices = [1, 2, 7, 2, 1, 2, 4, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 7, 4, 5, 6, 3, 2, 5, 7])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"01\")",
        "minimumBeautifulSubstrings(s = \"0110\")",
        "minimumBeautifulSubstrings(s = \"001\")",
        "minimumBeautifulSubstrings(s = \"0000000001\")",
        "minimumBeautifulSubstrings(s = \"bba\")",
        "minimumBeautifulSubstrings(s = \"01101011011\")",
        "minimumBeautifulSubstrings(\"aaba\")",
        "minimumBeautifulSubstrings(s
        "minimumBeautifulSubstrings(s = \"011110101011100\")",
        "minimumBeautifulSubstrings(\"bbbaaaaab\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"abc\", s2 = \"acb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"egg\", s2 = \"add\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cdaa\")",
        "canBeEqual(s1 = \"abc\", s2 = \"zzz\")",
        "canBeEqual(s1 = \"cat\", s2 = \"car\")",
        "canBeEqual(s1 = \"abb\", s2 = \"abc\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"aa\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"abz\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"b\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"azcbobobegghakl\", str2 = \"beggh\")",
        "canMakeSubsequence(str1 = \"ahz\", str2 = \"azb\")",
        "canMakeSubsequence(str1 = \"zzzz\", str2 = \"zzzzzzz\")",
        "canMakeSubsequence(str1 = 'xy', str2 = 'zabcd')",
        "canMakeSubsequence(str1 = \"caaab\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"pqrs\", str2 = \"pqrrrs\")",
        "canMakeSubsequence(str1 = 'bacab', str2 = 'bbbacaaa')"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [3, 3, 2, 2, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7])",
        "minLengthAfterRemovals(nums = [1, 1, 3, 2, 1, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [2, 3, 2, 1, 3, 5, 2])",
        "minLengthAfterRemovals(nums = [2,2,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acdb\")",
        "canBeEqual(s1 = \"a1b2\", s2 = \"a2b1\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"tee\", s2 = \"eet\")",
        "canBeEqual(s1 = \"geek\", s2 = \"eegk\")",
        "canBeEqual(s1 = \"xyzzx\", s2 = \"wzwxx\")",
        "canBeEqual(s1 = \"code\", s2 = \"door\")",
        "canBeEqual(s1 = \"qsp\", s2 = \"qps\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 5)",
        "countPairs(nums = [1, 2, 3, 4], target = 4)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4], target = 6)",
        "countPairs(nums = [1, 3, 2, 0], target = 4)",
        "countPairs(nums = [1, 3, 5, 7], target = 8)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"ab\", s2 = \"bb\")",
        "canMakeSubsequence(s1 = \"abd\", s2 = \"bac\")",
        "canMakeSubsequence(s1 = \"cab\", s2 = \"abcd\")",
        "canMakeSubsequence(s1 = \"bacd\", s2 = \"bdac\")",
        "canMakeSubsequence(s1 = \"baby\", s2 = \"zaby\")",
        "canMakeSubsequence(s1 = \"bb\", s2 = \"bbb\")",
        "canMakeSubsequence(s1 = \"aba\", s2 = \"czabz\")",
        "canMakeSubsequence(s1 = \"c\", s2 = \"abzac\")",
        "canMakeSubsequence(s1 = \"zbza\", s2 = \"bzbzb\")",
        "canMakeSubsequence(s1=\"bab\", s2=\"aegzba\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"3\", \"4\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['next', '3', 'prev', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\", \"1\"])",
        "lastVisitedIntegers(words = ['1', 'prev', 'prev', 'prev', '4', '5', 'prev'])",
        "lastVisitedIntegers(words = ['1', 'prev', '2', 'next', '2', 'prev', 'prev', '3', 'next', 'prev'])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"prev\", \"3\", \"next\", \"4\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"bravo\", \"4\", \"prev\", \"prev\", \"echo\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"next\", \"2\", \"next\", \"2\", \"next\", \"prev\", \"2\", \"prev\", \"prev\", \"2\", \"next\", \"prev\", \"1\", \"prev\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 0]], k = 1)",
        "countPairs(coordinates = [[0, 0], [1, 0], [2, 0]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 1]], k = 1)",
        "countPairs(coordinates = [[1,1],[2,2],[2,3]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 4]], k = 2)",
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 3], [1, 4]], k = 6)",
        "countPairs(coordinates = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6]], k = 2)",
        "countPairs(coordinates = [[-1, 0], [-1, 0], [0, 1], [0, 1]], k = 1)",
        "countPairs(coordinates = [[3, 5], [3, 3], [3, 4], [1, 1], [1, 3], [2, 2], [2, 3], [1, 4], [1, 2], [2, 4]], k = 4)"
    ],
    "sample_451": [
        "minChanges(s = \"aaabb\")",
        "minChanges(s = \"aabbc\")",
        "minChanges(s = \"xxxyyy\")",
        "minChanges(s = \"abbab\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabaa\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"aabbbaaa\")",
        "minChanges(s = \"bc\")"
    ],
    "sample_461": [
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 15, limit = 3)",
        "distributeCandies(n = 11, limit = 2)",
        "distributeCandies(n = 100, limit = 30)",
        "distributeCandies(n = 24, limit = 4)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"cbda\")",
        "canBeEqual(s1 = \"anana\", s2 = \"nana\")",
        "canBeEqual(s1 = \"acb\", s2 = \"bac\")",
        "canBeEqual(s1 = \"twow\", s2 = \"wotw\")",
        "canBeEqual(s1 = \"blue\", s2 = \"eubl\")",
        "canBeEqual(s1 = \"white\", s2 = \"ehlw\")",
        "canBeEqual(s1 = \"csba\", s2 = \"csab\")",
        "canBeEqual(s1 = \"2581\", s2 = \"5821\")"
    ],
    "sample_460": [
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 2, limit = 3)",
        "distributeCandies(n = 1, limit = 2)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 8, limit = 5)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 10)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 25)",
        "accountBalanceAfterPurchase(p = 40)",
        "accountBalanceAfterPurchase(p = 52)",
        "accountBalanceAfterPurchase(p = 21)",
        "accountBalanceAfterPurchase(p = 65)",
        "accountBalanceAfterPurchase(p = 68)",
        "accountBalanceAfterPurchase(p = 6)"
    ],
    "sample_444": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1, 1, 2])",
        "sumCounts(nums = [1,2,3,1])",
        "sumCounts(nums = [1, 2, 3, 2, 1, 3])",
        "sumCounts(nums = [1,2,2,3,3,4,4,5,5])",
        "sumCounts(nums = [1,1,1,1,1,2])",
        "sumCounts(nums = [1,1,2,2,3,4,4])",
        "sumCounts(nums = [1,2,3,2,1,4,5,4])",
        "sumCounts(nums = [1,1,1,3,3,4,4,5,5,6,7,7,9,9,9])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1,2,3])",
        "minimumSeconds(A = [1,1,1,1])",
        "minimumSeconds(A = [1,2,1,2,1,2,1,2])",
        "minimumSeconds(A = [3, 2, 1, 2, 1, 1, 3])",
        "minimumSeconds(A = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])",
        "minimumSeconds(A = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
        "minimumSeconds(A = [1000,1000,1000])",
        "minimumSeconds(A = [5, 5, 5, 0, 0, 0, 0, 5, 5, 5])",
        "minimumSeconds(A = [0,1,3,1,2,3,2,3])",
        "minimumSeconds(A = [9, 4, 4, 2, 1, 4, 9])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"azc\")",
        "canMakeSubsequence(str1 = \"ba\", str2 = \"nana\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"bc\")",
        "canMakeSubsequence(str1 = \"aa\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"za\")",
        "canMakeSubsequence(str1 = \"zebra\", str2 = \"ar\")",
        "canMakeSubsequence(str1 = \"zb\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"xy\", str2 = \"ab\")",
        "canMakeSubsequence(str1 = \"aab\", str2 = \"bac\")",
        "canMakeSubsequence(str1 = \"ab\", str2 = \"abzcd\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumRightShifts(nums = [4, 5, 6, 7, 0, 1, 2])",
        "minimumRightShifts(nums = [2, 3, 1, 2, 4, 3])",
        "minimumRightShifts(nums = [2, 3, 1, 0, 2, 5, 3])",
        "minimumRightShifts(nums = [5,4,3,2,1])",
        "minimumRightShifts(nums = [1,2,3,4,5,7,8,9,10,11,12])",
        "minimumRightShifts(nums = [3, 2, 1, 0, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5,21,22,23,24,25])",
        "minimumRightShifts(nums = [4, 5, 1, 9])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1, 2, 2, 3], l = 3, r = 3)",
        "countSubMultisets(nums = [1,1,2,2,2], l = 2, r = 6)",
        "countSubMultisets(nums = [1,2,2], l = 0, r = 3)",
        "countSubMultisets(nums = [1, 1, 2, 2, 2], l = 0, r = 3)",
        "countSubMultisets(nums = [1, 2, 2, 3, 4, 4], l = 2, r = 6)",
        "countSubMultisets(nums = [2, 3, 3], l = 1, r = 4)",
        "countSubMultisets(nums = [1,2,2,3], l = 4, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,4,5], l = 2, r = 4)",
        "countSubMultisets(nums = [1, 2, 2, 3, 4, 4, 3, 5], l = 2, r = 10)",
        "countSubMultisets(nums = [4,2,3,6,5,7,8], l = 3, r = 7)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 5, 10, 20, 50])",
        "minimumCoins(prices = [2, 1, 1, 4])",
        "minimumCoins(prices = [1, 2, 1, 2, 1, 3])",
        "minimumCoins(prices = [2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minimumCoins(prices = [3, 4, 1, 1, 3, 1, 2])",
        "minimumCoins(prices = [10, 1, 5, 25, 10, 1, 2])",
        "minimumCoins(prices = [1, 3, 7, 5, 10, 9, 3, 2])",
        "minimumCoins(prices = [2, 3, 5, 7, 11, 2, 2, 2, 10, 100])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumCoins(prices = [1, 2, 1, 1])",
        "minimumCoins(prices = [1, 2, 1, 5])",
        "minimumCoins(prices = [1, 1, 5, 5, 10, 20])",
        "minimumCoins(prices = [4, 3, 5, 7, 2, 8, 3])",
        "minimumCoins(prices = [1, 3, 1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 3])",
        "minimumCoins(prices = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 1, 5, 1, 5, 8, 9, 8])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"1\", \"2\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"2\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"prev\", \"1\", \"3\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"prev\", \"1\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"next\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"3\", \"prev\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"4\", \"prev\", \"prev\", \"3\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"prev\",\"1\",\"2\",\"prev\",\"3\"])"
    ],
    "sample_428": [
        "minOperations(nums = [2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [0, 1, 1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [0, 1, 0, 2, 3])",
        "minOperations(nums = [3, 1, 3, 3, 2])",
        "minOperations(nums = [0, 1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minOperations(nums = [1, 1, 2, 1])",
        "minOperations(nums = [2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4])",
        "minOperations(nums = [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [2,1,2,2,2,1,1,1,1,2])",
        "minOperations(nums = [2,3,1,2,1,1,1,2,3,2])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"p6\", \"p7\", \"p8\", \"p9\", \"p10\", \"p11\", \"p12\", \"p13\", \"p14\", \"p15\", \"p16\", \"p17\", \"p18\", \"p19\", \"p20\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"])",
        "lastVisitedIntegers(words = ['p1', 'p2', 'p3'])",
        "lastVisitedIntegers(words = [\"add\", \"visit\", \"visit\", \"visit\"])",
        "lastVisitedIntegers(words = ['pone', 'two', 'pthree', 'four'])",
        "lastVisitedIntegers(words = [\"banana\", \"taro\", \"p\", \"p\"])",
        "lastVisitedIntegers(words = [\"p\", \"7\", \"p\", \"4\", \"3\"])",
        "lastVisitedIntegers(words = ['1', 'p1', 'p2', '2', '3'])",
        "lastVisitedIntegers(words = [\"banana\", \"apples\", \"orange\", \"oranges\", \"banana\", \"banana\", \"banana\", \"banana\", \"apples\", \"banana\"])",
        "lastVisitedIntegers(words = [\"paraparaparadise\", \"paragraph\", \"sudoku\", \"cobweb\"])",
        "lastVisitedIntegers(words = [\"pwee\", \"pwow\", \"pwoah\", \"pwee\", \"pwoah\", \"pwoah\", \"pwee\", \"pwoah\", \"pwee\", \"pwee\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [1, 2, 1, 2, 1, 2, 1])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "minimumSeconds(nums = [1, 5, 5, 10, 11, 15])",
        "minimumSeconds(nums = [2,1,2,2,2,3,3,3,3,4,4,4,4,5])",
        "minimumSeconds(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2])",
        "minimumSeconds(nums = [6, 0, 3, 2, 2, 0])",
        "minimumSeconds(nums = [10,2,10,1,10,3])",
        "minimumSeconds(nums = [1, 2, 2, 2, 3, 4, 3, 2, 2])",
        "minimumSeconds(nums = [1, 2, 4, 16, 64, 4, 2, 1])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"ll\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"howdy\"], x = \"h\")",
        "findWordsContaining(words = [\"hello\", \"hi\", \"goodbye\", \"bye\"], x = \"hi\")",
        "findWordsContaining(words = [\"a\", \"banana\", \"an\"], x = \"an\")",
        "findWordsContaining(words = [\"abcd\", \"qwer\", \"ab\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"or\", \"not\"], x = \"or\")",
        "findWordsContaining(words = [\"hello\", \"I'm\", \"Python\"], x = 'o')",
        "findWordsContaining(words = [\"super\", \"good\", \"girl\"], x = \"u\")",
        "findWordsContaining(words = [\"Hello\", \"banana\", \"World\"], x = \"ban\")",
        "findWordsContaining(words = [\"at\", \"clubs\", \"in\", \"alice\"], x = \"cl\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 1, 0, 1])",
        "maxSubarrays(nums = [1,2,3,4])",
        "maxSubarrays(nums = [1,0,1,0,1,0,1])",
        "maxSubarrays(nums = [0, 2, 4, 0, 0])",
        "maxSubarrays(nums = [1, 1, 1, 0, 0, 1, 1, 1, 1, 0])",
        "maxSubarrays(nums = [1, 2, 0, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [1, 1, 0, 1, 0, 1, 1, 0, 0, 1])",
        "maxSubarrays(nums = [1, 2, 3, 0, 4, 0, 1, 2, 3])",
        "maxSubarrays(nums = [1, 3, 0, 1, 2, 3])",
        "maxSubarrays(nums = [3, 2, 1, 4, -1, 5, -1])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"next\", \"prev\", \"next\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"prev\", \"prev\", \"next\", \"next\"])",
        "lastVisitedIntegers(words = [\"next\",\"next\",\"prev\",\"prev\",\"prev\",\"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\", \"3\", \"4\"])",
        "lastVisitedIntegers(words = [\"yogurt\", \"threat\", \"threat\", \"prev\", \"prev\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [2, 7, 11, 15], target = 9)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3], target = 4)",
        "countPairs(nums = [1, 2, 3], target = 6)",
        "countPairs(nums = [1, 2, 3, 4], target = 12)",
        "countPairs(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], target = 6)",
        "countPairs(nums = [3, 7, 9, 11], target = 15)",
        "countPairs(nums = [2, 5, 6, 7, 8], target = 9)",
        "countPairs(nums = [1, 3, 4, 6, 7, 8, 10], target = 10)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"egg\", s2 = \"add\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"ab\", s2 = \"a\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dabc\")",
        "canBeEqual(s1 = \"abcde\", s2 = \"adbec\")",
        "canBeEqual(s1 = \"eggs\", s2 = \"pog\")",
        "canBeEqual(s1 = \"egofoho\", s2 = \"goofyhoo\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"3\", \"prev\", \"prev\", \"prev\", \"4\", \"5\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"next\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"1\", \"prev\", \"prev\", \"4\"])",
        "lastVisitedIntegers(words = [\"next\", \"next\", \"prev\", \"prev\", \"prev\", \"next\", \"next\", \"prev\", \"next\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"next\", \"1\", \"next\", \"2\", \"next\", \"3\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"prev\", \"10\", \"100\", \"prev\", \"next\", \"next\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n = 4, limit = 3)",
        "distributeCandies(n=2, limit=2)",
        "distributeCandies(n = 15, limit = 3)",
        "distributeCandies(n = 4, limit = 10)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 7, 8])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5, 6])",
        "minimumRightShifts(nums = [1, 2, 3])",
        "minimumRightShifts(nums = [3, 2, 1])",
        "minimumRightShifts(nums = [1, 3, 5, 2, 4, 6])",
        "minimumRightShifts(nums = [5, 1, 3])",
        "minimumRightShifts(nums = [0, 1, 2, 7, 2, 3, 1])",
        "minimumRightShifts(nums = [2, 3, 2, 1])",
        "minimumRightShifts(nums = [2, 5, 6, 1, 4, 3])",
        "minimumRightShifts(nums = [0, 0, 1, 0, 1, 0, 1, 1, 0, 1])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"hello\", \"world\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\", \"dog\"], x = \"an\")",
        "findWordsContaining(words = [\"a\", \"b\", \"a\"], x = \"a\")",
        "findWordsContaining(words = [\"spam\", \"eggs\", \"banana\"], x = \"am\")",
        "findWordsContaining(words = [\"hello\", \"these\", \"are\", \"words\"], x = \"e\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"foobar\"], x = \"l\")",
        "findWordsContaining(words = [\"string\", \"stringer\", \"strung\"], x = \"str\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"hi\", \"dear\"], x = \"o\")",
        "findWordsContaining(words = [\"apple\", \"watermelon\", \"grapes\"], x = \"e\")",
        "findWordsContaining(words = [\"test\", \"crummy\", \"tryme\"], x = \"e\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 1], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 2, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [1,2], m = 1, k = 1)",
        "maxSum(nums = [1,2,1,2,4,2,2,1], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], m = 9, k = 10)",
        "maxSum(nums = [3, 2, -2, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 1, 2, 2, 2, 1, 3, 6, 7], m = 3, k = 4)",
        "maxSum(nums = [1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,5,5,5,6,6,6,7,7,8,8,8,9,9,9], m = 4, k = 5)",
        "maxSum(nums = [2,3,4,1,7,8,9,3,9,5], m = 2, k = 4)"
    ],
    "sample_424": [
        "minOperations(nums = [3,2,2,4,2])",
        "minOperations(nums = [1,1,2,2,2,3])",
        "minOperations(nums = [2,2,2,2,2])",
        "minOperations(nums = [1,1,2,2,2,2])",
        "minOperations(nums = [1,1,1,1,1,1,1,1,1,1])",
        "minOperations(nums = [2,1,2,1,1,2,2,1])",
        "minOperations(nums = [1,1,2,1,1])",
        "minOperations(nums = [1,1,2,4,2,1])",
        "minOperations(nums = [1,1,2,2,4,4,8,8,16,16])",
        "minOperations(nums = [1,2,2,2,2,3,3,4,5])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [1,2,3,4], k = 5)",
        "minOperations(nums = [3,1,3,4,3], k = 3)",
        "minOperations(nums = [1, 3, 4], k = 1)",
        "minOperations(nums = [1,2,2,3,4,5], k = 4)",
        "minOperations(nums = [2, 7, 4, 1, 2, 2, 1], k = 3)",
        "minOperations(nums = [1,1,2,3], k = 2)",
        "minOperations(nums = [3, 2, 4, 5, 6, 7, 8, 9, 10], k = 10)",
        "minOperations(nums = [4, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1], k = 5)",
        "minOperations(nums = [5,2,4,7,11,3,2,9,1,12,4], k = 6)"
    ],
    "sample_371": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"LyMpH\")",
        "sortVowels(s = \"yLmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"yMpHl\")",
        "sortVowels(s = 'MypHlym')",
        "sortVowels(s = \"Hi!\")",
        "sortVowels(s = \"gyzrLmH\")",
        "sortVowels(s = \"HIgHlYmpH\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 4, limit = 5)",
        "distributeCandies(n=2, limit=3)",
        "distributeCandies(n = 7, limit = 1)",
        "distributeCandies(n=5, limit=2)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1, 2, 2, 1, 1, 3])",
        "sumCounts(nums = [1, 2, 2, 3, 3])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "sumCounts(nums = [2, 1, 2, 1, 2])",
        "sumCounts(nums = [1, 1, 2, 2, 3, 4, 4, 5])",
        "sumCounts(nums = [1,2,3,4,4])",
        "sumCounts(nums = [1, 2, 2, 3, 1, 4, 2])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [0, 2, 2, 2, 0])",
        "maxSubarrays(nums = [1, 2, 3, 4, 0, 1, 2, 3, 4])",
        "maxSubarrays(nums = [1, 2, 0, 1, 0])",
        "maxSubarrays(nums = [0, 1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 0, 1, 1, 1, 0, 1, 1, 1])",
        "maxSubarrays(nums = [0, 1, 1, 0, 1, 0, 0, 1])",
        "maxSubarrays(nums = [0, 1, 1, 1, 0, 1, 1, 0, 1, 1])",
        "maxSubarrays(nums = [0,0,1,1,1,1,0,1])",
        "maxSubarrays(nums = [-1, -3, 1, 0, -2, 2, 0, -2])",
        "maxSubarrays(nums = [2,1,3,2,1,2,2,1,0])"
    ],
    "sample_446": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 1, 1])",
        "sumCounts(nums = [0, 1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 1, 2, 3])",
        "sumCounts(nums = [1, 1, 1, 1, 2])",
        "sumCounts(nums = [1, 2, 3, 4, 1, 2])",
        "sumCounts(nums = [2, 2, 1])",
        "sumCounts(nums = [1, 1, 1, 2, 2, 2, 3, 4, 5])",
        "sumCounts(nums = [3,2,2,3,4,5])",
        "sumCounts(nums = [1, 2, 1, 2, 3, 1, 4, 1, 2, 1, 5])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"eggs\", s2 = \"bacon\")",
        "canBeEqual(s1 = \"abac\", s2 = \"baca\")",
        "canBeEqual(s1 = \"abac\", s2 = \"baca\")",
        "canBeEqual(s1 = \"eggs\", s2 = \"cook\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dbca\")",
        "canBeEqual(s1 = \"aba\", s2 = \"bba\")",
        "canBeEqual(s1 = \"123\", s2 = \"321\")",
        "canBeEqual(s1 = \"acbac\", s2 = \"abaca\")",
        "canBeEqual(s1 = \"eggy\", s2 = \"bgye\")",
        "canBeEqual(s1 = \"eggyhbghx\", s2 = \"byhgxbyhy\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [1,3,5,7,9], target = 10)",
        "countPairs(nums = [1,2,3,4], target = 4)",
        "countPairs(nums = [1,2,3,4,5], target = 10)",
        "countPairs(nums = [1,1,1,1], target = 2)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,3,5,7,9], target = 12)",
        "countPairs(nums = [1,1,2,2,3,3,4,4,5,5], target = 10)",
        "countPairs(nums = [4,5,6,7], target = 9)",
        "countPairs(nums = [2,4,8,12,16], target = 30)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1, 2, 3, 4, 5])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts(nums = [0, 1, 2])",
        "sumCounts(nums = [1, 1, 1, 1, 2])",
        "sumCounts(nums = [1,1,2,2,3,3])",
        "sumCounts(nums = [0, 1, 2, 2])",
        "sumCounts(nums = [1, 2, 3, 2, 1, 2, 2, 3])",
        "sumCounts(nums = [1,2,3,2,3,1,4,5,6,7,5,4,3,2,1])"
    ],
    "sample_368": [
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"LyMpH\")",
        "sortVowels(s = 'LyMpH')",
        "sortVowels(s = \"lymph\")",
        "sortVowels(s = 'hYmLp')",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = 'PYTHON')",
        "sortVowels(s = \"IYYMH\")",
        "sortVowels(s = 'nHMpL')",
        "sortVowels(s = \"QmPgh\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 4)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n = 11, limit = 3)",
        "distributeCandies(n = 10, limit = 10)",
        "distributeCandies(n = 13, limit = 5)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4, 5])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7])",
        "minimumCoins(prices = [1, 2, 3, 4, 5, 6, 7])",
        "minimumCoins(prices = [1, 2, 3, 4, 1, 2, 3])",
        "minimumCoins(prices = [5, 2, 4, 1, 3])",
        "minimumCoins(prices = [10, 1, 2, 1, 7, 1, 5, 1])",
        "minimumCoins(prices = [3, 4, 2, 6, 1, 2, 4, 1])",
        "minimumCoins(prices = [1, 4, 10, 20, 25, 35, 50])",
        "minimumCoins(prices = [5, 1, 2, 4, 2, 3, 3])",
        "minimumCoins(prices = [1, 2, 5, 10, 11, 30, 25])"
    ],
    "sample_426": [
        "minOperations(nums = [3, 2, 2, 4, 2])",
        "minOperations(nums = [1,1,1,3,3,2,2,2])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 2, 2])",
        "minOperations(nums = [1,3,4,2,1,1])",
        "minOperations(nums = [1, 2, 4, 4, 4, 5, 6, 6, 6, 7, 8, 10])",
        "minOperations(nums = [3, 1, 2, 2, 1])",
        "minOperations(nums = [1,1,1,2,2,2,3,3,3,4,4,5])",
        "minOperations(nums = [1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3])",
        "minOperations(nums = [1,1,2,2,2,3,3,4,5,5,6,7,7,7,7])",
        "minOperations(nums = [1,2,4,4,4,5,5,5,7,7,7,7,7,8,8,8,8,8,10,10,10,10,10,10])"
    ],
    "sample_423": [
        "minOperations(nums = [1,1,1,3,3,2,2,2])",
        "minOperations(nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5])",
        "minOperations(nums = [1, 1, 1, 3, 3, 2, 2, 2, 4, 4])",
        "minOperations(nums = [2,3,1,1,1,2,4,5])",
        "minOperations(nums = [2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4])",
        "minOperations(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4])",
        "minOperations(nums = [3, 3, 3, 2, 2, 4, 4, 2])",
        "minOperations(nums = [1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1])",
        "minOperations(nums = [1, 5, 6, 7])",
        "minOperations(nums = [3, 4, 4, 4, 5, 6, 7, 2, 2, 2])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1,2,3,4,5,6,7,8,9,10])",
        "minimumCoins(prices = [5, 2, 1])",
        "minimumCoins(prices = [1, 3, 4, 5])",
        "minimumCoins(prices = [1,3,4,5,7])",
        "minimumCoins(prices = [1,3,4,5,7,10])",
        "minimumCoins(prices = [1,2,3,4,7,100])",
        "minimumCoins(prices = [2, 5, 10, 1])",
        "minimumCoins(prices = [5, 2, 1, 10])",
        "minimumCoins(prices = [5, 10, 12, 15, 15])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [2, 1, 2, 1, 2, 2, 1])",
        "minimumRightShifts(nums = [3, 8, 2, 6, 4, 9, 1])",
        "minimumRightShifts(nums = [1,2,3,4,5,6])",
        "minimumRightShifts(nums = [1, 3, 5, 7, 2, 4, 6, 8])",
        "minimumRightShifts(nums = [1, 2, 7, 2, 8, 2])",
        "minimumRightShifts(nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5])",
        "minimumRightShifts(nums = [2, 2, 2, 1, 2, 2, 2, 2, 2, 2])",
        "minimumRightShifts(nums = [0, 1, 5, 12, 11, 12, 11])",
        "minimumRightShifts(nums = [0, 1, 3, 7, 11, 10])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4,5,6,7])",
        "minimumRightShifts(nums = [1, 2, 7, 4])",
        "minimumRightShifts(nums = [3, 8, 2, 6, 1, 4])",
        "minimumRightShifts(nums = [2, 4, 5, 1, 3, 6])",
        "minimumRightShifts(nums = [1, 1, 0, 2, 0, 1, 2, 1, 2, 1])",
        "minimumRightShifts(nums = [3, 5, 9, 7, 8])",
        "minimumRightShifts(nums = [0, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2])"
    ],
    "sample_167": [
        "isAcronym(words = [\"Portable\", \"Network\", \"Graphics\"], s = \"PNG\")",
        "isAcronym(words = [\"Portable\", \"Network\", \"Graphics\"], s = \"PNG\")",
        "isAcronym(words = [\"universal\", \"serial\", \"bus\"], s = \"usb\")",
        "isAcronym(words = [\"wow\", \"we\", \"are\", \"amazed\"], s = \"wam\")",
        "isAcronym(words = [\"portable\", \"network\", \"graphics\", \"2\"], s = \"png\")",
        "isAcronym(words = ['C', 'A', 'R'], s = 'CA')",
        "isAcronym(words=[\"universal\", \"serial\", \"bus\"], s = \"usbus\")",
        "isAcronym(words = [\"cool\", \"to\", \"hang\", \"out\"], s = \"CHTO\")",
        "isAcronym(words = [\"ball\", \"is\", \"life\", \"here\"], s = \"bil\")",
        "isAcronym(words=[\"as\", \"sd\", \"o\", \"d\"], s=\"asd\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [1,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,1,3], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [6, 0, 3], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [6, 1, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [6, 1, 2, 4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [6, 0, 0, 7], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [6, 4, 7, 5, 3, 3], m = 3, k = 2)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[1, 3], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [2, 5]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 5]])",
        "numberOfPoints(nums = [[10,100], [150,200]])",
        "numberOfPoints(nums = [[0, 3], [4, 7], [2, 5]])",
        "numberOfPoints(nums = [[3, 9], [15, 15], [19, 20]])",
        "numberOfPoints(nums = [[0,0],[1,3],[6,7]])",
        "numberOfPoints(nums = [[4,20],[5,21],[15,23],[16,23],[18,23],[1,20]])",
        "numberOfPoints(nums = [[-1, 15], [-3, 10], [-5, 15], [-7, 0]])",
        "numberOfPoints(nums = [[1,5], [2,3], [5,7], [10,11], [12,19], [13,17]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = ['easy,problem'], separator = ',')",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"easy,problem\"], separator = \",\")",
        "splitWordsBySeparator(words = ['easy;problem'], separator = ';')",
        "splitWordsBySeparator(words = ['easy|problem'], separator = '|')",
        "splitWordsBySeparator(words = ['easy,problem'], separator = \",\")",
        "splitWordsBySeparator(words = ['easy problem'], separator = ' ')",
        "splitWordsBySeparator(words = [\"easyproblem\"], separator = \"\")",
        "splitWordsBySeparator(words=['easypythonproblem'], separator='p')",
        "splitWordsBySeparator(words = ['teaching'], separator = ',')"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1, 3], [2, 6]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 4], [4, 6]])",
        "numberOfPoints(nums = [[2, 3], [5, 7]])",
        "numberOfPoints(nums = [[-2, 2], [1, 2]])",
        "numberOfPoints(nums = [[2, 2], [3, 3], [3, 5]])",
        "numberOfPoints(nums = [[1, 5], [1, 2], [1, 3]])",
        "numberOfPoints(nums = [[-1, 0], [2, 5], [10, 12]])",
        "numberOfPoints(nums = [[-4, -1], [2, 3], [1, 2]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 4], [4, 5], [2, 5], [1, 6], [1, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 2], [1, 2], [2, 2], [2, 3], [2, 3]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1,2,1,3,2,5])",
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 3, 2])",
        "countCompleteSubarrays(nums = [1, 1, 3, 3, 5])",
        "countCompleteSubarrays(nums = [1, 1, 1, 2, 2])",
        "countCompleteSubarrays(nums = [0,0,0,1])",
        "countCompleteSubarrays(nums = [0, 1, 2, 2, 3, 0, 4, 2])",
        "countCompleteSubarrays(nums = [1, 2, 2, 2, 1, 2, 2])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '-')",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = ':')",
        "splitWordsBySeparator(words = ['one', 'two', 'three', 'four', 'five', 'six'], separator = '+')",
        "splitWordsBySeparator(words=['one', 'two', 'three', 'four', 'five', 'six'], separator='-')",
        "splitWordsBySeparator(words = [\"one two\", \"three\", \"four\", \"five\", \"six\"], separator = \" \")"
    ],
    "sample_129": [
        "maxIncreasingGroups(u = [1, 3, 6, 7])",
        "maxIncreasingGroups(u = [1, 2, 4, 5, 7, 8])",
        "maxIncreasingGroups(u = [1, 3, 2, 3, 5])",
        "maxIncreasingGroups(u = [10, 1, 15, 24, 5, 19])",
        "maxIncreasingGroups(u = [1, 5, 10, 20, 20, 30])",
        "maxIncreasingGroups(u = [1, 5, 2, 1, 2])",
        "maxIncreasingGroups(u = [4, 2, 3, 7, 6, 1, 5])",
        "maxIncreasingGroups(u = [1, 2, 3, 4, 5, 1, 2, 3, 7, 9, 10])",
        "maxIncreasingGroups(u = [1, 4, 8, 12, 15, 22, 26])",
        "maxIncreasingGroups(u = [4, 4, 6, 7, 8, 7, 5, 6, 7, 8, 9, 9, 10, 11, 11, 12, 13])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,8], x = 3)",
        "minAbsoluteDifference(nums = [3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,3,8,10,15], x = 3)",
        "minAbsoluteDifference(nums = [2,-3,4], x = 2)",
        "minAbsoluteDifference(nums = [1,3,4,8,10,11], x = 2)",
        "minAbsoluteDifference(nums = [1,3,5,9,11,13,15], x = 3)",
        "minAbsoluteDifference(nums = [3, 5, -1, -5], x = 2)",
        "minAbsoluteDifference(nums = [1,3,11,3,4,7], x = 2)",
        "minAbsoluteDifference(nums = [1,10,19,2,22,3,4,5,6,7,8,9], x = 3)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [4, 5, 0, 0], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [6, 5, 2, 6, 3, 7, 8], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 4, k = 0)",
        "countInterestingSubarrays(nums = [6, 5, 2, 6, 3, 7, 8, 10], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [4,2,3,4], modulo = 5, k = 1)",
        "countInterestingSubarrays(nums = [6, 4, 2, 8], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [6, 4, 7, 6], modulo = 4, k = 0)"
    ],
    "sample_152": [
        "canSplitArray(nums = [1, 2, 3], m = 1)",
        "canSplitArray(nums = [2, 1, 2, 4, 3], m = 5)",
        "canSplitArray(nums = [1, 2, 5, 10, 13], m = 10)",
        "canSplitArray(nums = [5, 2, 6], m = 4)",
        "canSplitArray(nums = [35, 19, 3], m = 38)",
        "canSplitArray(nums = [25, 10, 20, 1, 25], m = 50)",
        "canSplitArray(nums = [2, 1, 4, 1, 3, 2], m = 5)",
        "canSplitArray(nums = [5, 10, 20, 2, 3], m = 13)",
        "canSplitArray(nums = [4, 2, 1, 9, 1, 3], m = 5)",
        "canSplitArray(nums = [20, 20, 30, 40, 50], m = 12)"
    ],
    "sample_169": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"portable\", \"operating\", \"system\"], s = \"pos\")",
        "isAcronym(words = [\"port\", \"as\", \"neat\"], s = \"pan\")",
        "isAcronym(words = [\"air\", \"forces\"], s = \"aiff\")",
        "isAcronym(words = [\"good\", \"isn't\", \"great\"], s = 'gig')",
        "isAcronym(words = [\"this\", \"is\", \"banana\"], s = \"banana\")",
        "isAcronym(words = [\"he\", \"is\", \"a\", \"good\", \"boy\"], s = \"higobar\")",
        "isAcronym(words = [\"classic\", \"fashion\", \"music\"], s = \"cfm\")",
        "isAcronym(words = [\"Eat\", \"a\", \"candy\"], s = \"EaCa\")",
        "isAcronym(words = [\"an\", \"ar\", \"or\", \"ge\"], s = \"anger\")"
    ],
    "sample_121": [
        "minimumIndex(nums = [1,2,3,1,1,3])",
        "minimumIndex(nums = [1,2,3,1,1,4,2,3])",
        "minimumIndex(nums = [0, 1, 2, 3, 3, 3])",
        "minimumIndex(nums = [0, 1, 2, 3, 0, 1, 4, 2])",
        "minimumIndex(nums = [0, 1, 0, 2, 3, 1, 1])",
        "minimumIndex(nums = [0, 1, 2, 3, 0, 4, 0, 6])",
        "minimumIndex(nums = [2, 2, 2, 3, 3, 1, 1, 1, 0])",
        "minimumIndex(nums = [2,1,2,1,2,2,3,2,2,2,2,1])",
        "minimumIndex(nums = [0,1,3,1,1,1,0,0,2,2,2])",
        "minimumIndex(nums = [2, 1, 2, 5, 3, 2, 7, 5, 3, 1, 9, 10, 1, 2])"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 3, offers = [[0,2,5],[1,5,6]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [2, 3, 200], [2, 5, 100], [3, 4, 300]])",
        "maximizeTheProfit(n = 3, offers = [[1,2,3], [2,3,4], [3,4,5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [2, 3, 11], [2, 4, 12]])",
        "maximizeTheProfit(n = 3, offers = [[2, 5, 3], [1, 3, 4], [3, 5, 5]])",
        "maximizeTheProfit(n = 4, offers = [[0, 2, 5], [0, 3, 7], [1, 2, 10], [2, 3, 15]])",
        "maximizeTheProfit(n=3, offers=[(0, 1, 3), (1, 2, 6), (2, 3, 10)])",
        "maximizeTheProfit(n = 3, offers = [ [1,2,10], [2,3,11], [1,1,20] ])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5], [2,3,8], [3,4,7], [4,5,6], [5,5,4]])",
        "maximizeTheProfit(n = 10, offers = [[1,3,5],[5,7,2],[3,11,2]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [0, 0, 0])",
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [-1, 0, 1])",
        "maximumTripletValue(nums = [1, 1, 0, -1, -1])",
        "maximumTripletValue(nums = [0, 1, 0, 1, 0, 1, 0, 1])",
        "maximumTripletValue(nums = [5, 1, 2, 4, 3])",
        "maximumTripletValue(nums = [5,-3,-1,0])",
        "maximumTripletValue(nums = [3, 0, 1, 5, 1, 6, 5])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LRR_\")",
        "furthestDistanceFromOrigin(moves = \"RL\")",
        "furthestDistanceFromOrigin(moves = \"RRR_LLL\")",
        "furthestDistanceFromOrigin(moves = \"LR__\")",
        "furthestDistanceFromOrigin(moves = \"RRLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLR\")",
        "furthestDistanceFromOrigin(moves = \"LRLLRL\")",
        "furthestDistanceFromOrigin(\"RR_LL\")",
        "furthestDistanceFromOrigin(moves = \"RRLLRRR\")",
        "furthestDistanceFromOrigin(moves = 'RLRLL')"
    ],
    "sample_149": [
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'rtsng')",
        "finalString(s = \"strang\")",
        "finalString(s = \"thisisrtsng\")",
        "finalString(s = \"hats\")",
        "finalString(s = 'there')",
        "finalString(s = \"function\")",
        "finalString(s = \"ing\")",
        "finalString(s = \"bartend\")"
    ],
    "sample_162": [
        "maxSum(nums = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,",
        "maxSum(nums = [5, 11, 12, 22])",
        "maxSum(nums = [12, 321, 412, 521])",
        "maxSum(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10, 15, 100])",
        "maxSum(nums
        "maxSum(nums = [17, 24, 26, 30, 38, 57, 59, 76, 93, 97])",
        "maxSum(nums = [88, 91, 90, 72, 71, 69, 66, 65, 64, 63])",
        "maxSum(nums = [10000, 19999999, 123, 88, 99999, 999999999])",
        "maxSum(nums = [42, 17, 19, 88, 85, 85, 88, 85, 42, 19, 17])",
        "maxSum(nums = [42, 11, 40, 3, 3, 39, 4, 37, 40, 30, 34, 32, 11, 29, 44, 19, 3, 1, 11, 32])"
    ],
    "sample_230": [
        "countWays(nums = [1, 1, 1, 1])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays(nums = [1,1,1])",
        "countWays(nums = [0, 0, 1])",
        "countWays(nums = [2,2,2,5])",
        "countWays(nums = [2,3,3,3,4,4,5])",
        "countWays(nums = [3, 2, 1, 4, 1])",
        "countWays(nums = [2, 4, 8, 2, 4])",
        "countWays(nums = [0, 2, 3, 3, 10])",
        "countWays(nums = [1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,5])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 5, target = 3)",
        "minimumPossibleSum(n = 10, target = 1000)",
        "minimumPossibleSum(n = 4, target = 15)",
        "minimumPossibleSum(n = 100, target = 1000)",
        "minimumPossibleSum(n = 2, target = 11)",
        "minimumPossibleSum(n = 1, target = 1000)",
        "minimumPossibleSum(n = 5, target = 14)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 2, offers = [[1, 2, 3]])",
        "maximizeTheProfit(N = 4, offers = [[1, 2, 10], [2, 3, 11]])",
        "maximizeTheProfit(N = 6, offers = [[1, 1, 10], [2, 1, 10], [3, 2, 15]])",
        "maximizeTheProfit(N = 5, offers = [[3, 2, 100], [2, 2, 100]])",
        "maximizeTheProfit(N = 6, offers = [[2,3,2],[2,4,4],[2,5,6]])",
        "maximizeTheProfit(N = 5, offers = [[4, 2, 3], [2, 4, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1,2,1], [1,3,2], [3,2,3]])",
        "maximizeTheProfit(N = 6, offers = [[3,2,1],[2,3,2],[6,3,4]])",
        "maximizeTheProfit(N = 5, offers = [[1, 1, 2], [2, 2, 3], [3, 3, 1], [4, 4, 5]])",
        "maximizeTheProfit(N = 10, offers = [[2, 2, 2], [2, 4, 3], [3, 5, 5]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 3], [2, 3, 5]])",
        "maximizeTheProfit(n = 4, offers = [[1, 2, 10], [1, 1, 5]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [2, 3, 4]])",
        "maximizeTheProfit(n = 6, offers = [[1, 1, 10], [1, 5, 20], [2, 3, 30]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 3, 4], [3, 5, 5]])",
        "maximizeTheProfit(n = 3, offers = [[2, 2, 10], [1, 1, 25], [3, 0, 20]])",
        "maximizeTheProfit(n = 3, offers = [[2, 3, 100], [1, 2, 100], [2, 3, 200]])",
        "maximizeTheProfit(n = 6, offers = [[3, 5, 10], [1, 2, 5], [6, 2, 30]])",
        "maximizeTheProfit(n = 5, offers = [[3, 5, 10], [2, 5, 3], [3, 4, 17], [2, 3, 14]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 10000], [2, 3, 10000], [3, 4, 10000], [1, 1, 5000], [3, 3, 5000]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [1], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [0,0,1,1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [0,0,1,1,1,1], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 2], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0, 1, 0, 1], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 7, 9, 3], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [0,0,0,0,0,0], target = 32)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 5, 15, 2, 1], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 7, 9, 7, 11, 7, 6, 9, 1, 11, 1, 2, 4, 8, 9, 10], target = 7)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,1,1,1,1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1,1,1,1,1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1,1,2,1,2,3])",
        "countCompleteSubarrays(nums = [1,1,3,3,5,7])",
        "countCompleteSubarrays(nums = [1,1,1,2,1,1,3,5])",
        "countCompleteSubarrays(nums = [1,2,2,3,4])",
        "countCompleteSubarrays(nums = [0,1,2,3,4,5,6,7,8,9,1,2,3,4,5])"
    ],
    "sample_229": [
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3,4])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6])",
        "countWays(nums = [2, 3, 4, 5, 6])",
        "countWays(nums = [2, 4, 5, 6, 8, 9])",
        "countWays(nums = [1,2,3,4,5,1])",
        "countWays(nums = [3, 1, 1, 4, 2, 3])",
        "countWays(nums = [2, 5, 1, 1, 2, 2, 1])"
    ],
    "sample_132": [
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 4])",
        "maxIncreasingGroups(usageLimits = [10, 11, 12, 13])",
        "maxIncreasingGroups(usageLimits = [3, 3, 3, 1, 1])",
        "maxIncreasingGroups(usageLimits = [4, 3, 2, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [50, 1, 1, 1, 1])",
        "maxIncreasingGroups(usageLimits = [5, 7, 11])",
        "maxIncreasingGroups(usageLimits = [60, 30, 15, 70])",
        "maxIncreasingGroups(usageLimits = [6, 7, 4, 6, 5])",
        "maxIncreasingGroups(usageLimits = [4, 2, 4, 6, 2, 6, 6, 3])"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 3, k = 7)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 5, k = 1)",
        "minimumSum(n = 5, k = 6)",
        "minimumSum(n = 10, k = 2)",
        "minimumSum(n = 6, k = 12)",
        "minimumSum(n = 6, k = 14)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [1, 2, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1, 2, 3, 1], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,2,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [6, 1, 2, 4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4], m = 5, k = 0)",
        "countInterestingSubarrays(nums = [6, 2, 3, 4], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [6, 2, 7, 7, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 2, 2, 2, 3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [6, 4, 8, 7], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [6, 4, 5, 2, 7, 4, 8], m = 3, k = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,1,2,2,2,2])",
        "countCompleteSubarrays(nums = [0, 1, 2, 2, 3, 5])",
        "countCompleteSubarrays(nums = [1,2,1,2,1,2,1,2,1,2])",
        "countCompleteSubarrays(nums = [1,1,2,1,2,3,2,3,4])",
        "countCompleteSubarrays(nums = [6, 0, 8, 2, 1, 3])",
        "countCompleteSubarrays(nums = [1,1,2,2,2,3,3,4,4])",
        "countCompleteSubarrays(nums = [1,1,1,2,2,2,2,2,2,3])",
        "countCompleteSubarrays(nums = [1, 3, 1, 1, 2, 3, 2, 1, 2, 1, 1, 1])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,1,3,2,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [1,2,1,3,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,2,3,2,2], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,3,2,1,1,5,1], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 5], k = 4)",
        "longestEqualSubarray(nums = [4,4,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,1,1,1,1,3,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,1,2,1,1,3,5,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,2,1,4,5,1,6], k = 5)"
    ],
    "sample_170": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hww\")",
        "isAcronym(words = ['hello', 'world'], s = 'hw')",
        "isAcronym(words = [\"happy\", \"birthday\", \"to\", \"me\"], s = \"hbdty\")",
        "isAcronym(words = [\"us\", \"east\", \"coast\"], s = \"USEC\")",
        "isAcronym(words = [\"hello\", \"world\", \"steve\"], s = \"hw\")",
        "isAcronym(words = [\"Dolphins\", \"are\", \"smart\"], s = \"DISA\")",
        "isAcronym(words = [\"initial\", \"investment\", \"in\"], s = \"iii\")",
        "isAcronym(words = [\"environment\", \"computing\", \"is\", \"cool\"], s = \"ECIsC\")",
        "isAcronym(words = [\"S\", \"E\", \"R\", \"A\", \"C\", \"O\", \"D\"], s = \"SERACODE\")",
        "isAcronym(words = ['much', 'revered', 'sweet'], s = \"mrs\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '00100')",
        "maximumOddBinaryNumber(s = '11100')",
        "maximumOddBinaryNumber(s = '110001')",
        "maximumOddBinaryNumber(s = \"0100\")",
        "maximumOddBinaryNumber(s = '00001011')",
        "maximumOddBinaryNumber(s = \"0010110\")",
        "maximumOddBinaryNumber(s = '1011111')",
        "maximumOddBinaryNumber(s = '111101011')"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 2, 2, 3])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [3, 2, 2, 1])",
        "countWays(nums = [1, 4, 5, 7])",
        "countWays(nums = [1, 1, 3, 4, 4, 5])",
        "countWays(nums = [1, 1, 1, 3, 3, 4, 4, 5])",
        "countWays(nums = [4, 1, 1, 1, 3, 3, 3, 2, 2, 2])",
        "countWays(nums = [1, 1, 3, 4, 4, 4, 5, 8, 8, 8, 10])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 15]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 100], [2, 2, 100], [3, 3, 100]])",
        "maximizeTheProfit(n = 8, offers = [[3, 2, 10], [5, 5, 20], [6, 1, 15]])",
        "maximizeTheProfit(n = 2, offers = [[1, 1, 10], [2, 1, 10], [2, 3, 20]])",
        "maximizeTheProfit(n = 4, offers = [[1,1,10], [2,2,19], [3,3,20], [4,4,21]])",
        "maximizeTheProfit(n = 6, offers = [[4, 2, 3], [2, 2, 4], [2, 3, 3]])",
        "maximizeTheProfit(n = 5, offers = [[2, 0, 5], [2, 2, 10], [2, 4, 15], [1, 2, 1]])",
        "maximizeTheProfit(n = 7, offers = [[1, 3, 15], [1, 4, 20], [2, 5, 10], [3, 0, 7]])",
        "maximizeTheProfit(n = 13, offers = [[4, 2, 200], [2, 3, 100], [3, 2, 150]])",
        "maximizeTheProfit(n = 10, offers = [[1, 3, 3], [5, 3, 5], [4, 6, 10]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minimumIndex(nums = [0,1,2,0])",
        "minimumIndex([0,0,1,0,1,1])",
        "minimumIndex(nums = [2,2,3,4,4,5,6])",
        "minimumIndex(nums = [3, 4, 3, 2, 6, 3, 5, 5])",
        "minimumIndex(nums = [1,2,3,3,5,5,5,6,7,7])",
        "minimumIndex(nums = [2,0,2,1,3])",
        "minimumIndex(nums = [1,2,3,1,1,1,1,5,1])",
        "minimumIndex(nums = [0, 1, 2, 3, 3, 1, 3, 0, 1, 2])",
        "minimumIndex(nums = [1,1,1,1,1,1,1,2,2,2,2,3,3,3,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[1, 3], [2, 3], [2, 4]])",
        "numberOfPoints(nums = [[1,100]])",
        "numberOfPoints(nums = [[1, 2], [3, 5]])",
        "numberOfPoints(nums = [[1,1],[2,2],[8,8],[3,8]])",
        "numberOfPoints(nums = [[1, 1], [2, 2], [8, 8], [3, 3]])",
        "numberOfPoints(nums = [[1,5],[2,3],[4,7]])",
        "numberOfPoints(nums = [[1, 5], [3, 4], [3, 6]])",
        "numberOfPoints(nums = [[1,10], [10, 100]])",
        "numberOfPoints(nums = [[0, 2], [3, 7], [5, 7], [9, 10]])",
        "numberOfPoints(nums = [[3, 5], [4, 7], [1, 3], [3, 4], [1, 5], [4, 8]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\", \"g,h,i\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"\"], separator = \";\")",
        "splitWordsBySeparator(words = [\"/a/b/c/\", \"/d/e/f/\"], separator = \"/\")",
        "splitWordsBySeparator(words=[\"1 2 3\", \"4 5 6\"], separator=\" \")",
        "splitWordsBySeparator(words = [\"a.b,c\", \"d;e:f\"], separator = \"[,.;:]\")",
        "splitWordsBySeparator(words = [\"!$!!\"], separator = \"!$\")",
        "splitWordsBySeparator(words = [\"The+quick+brown+fox\", \"jumps+over+the+lazy+dog\"], separator = \"+\")",
        "splitWordsBySeparator(words = [\"Python, Python3\"], separator = \", \")",
        "splitWordsBySeparator(words = [\"This, is, a, sentence\", \"with a comma\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"mango#bob#mango\", \"banana#mango\"], separator = \"#\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 2, target = 2)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n = 10, target = 1)",
        "minimumPossibleSum(n = 100, target = 1)",
        "minimumPossibleSum(n = 7, target = 5)",
        "minimumPossibleSum(n = 5, target = 13)",
        "minimumPossibleSum(n = 7, target = 15)"
    ],
    "sample_219": [
        "numberOfPoints(nums = [[1, 5], [1, 5], [1, 5]])",
        "numberOfPoints(nums = [[1,3],[6,7]])",
        "numberOfPoints(nums = [[1, 3], [5, 9]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 4], [1, 5]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 4], [1, 2]])",
        "numberOfPoints(nums = [[1, 2], [5, 8], [4, 7]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 4], [1, 5], [2, 5]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [4, 5], [5, 6]])",
        "numberOfPoints(nums = [[3, 3], [2, 6], [6, 8]])",
        "numberOfPoints(nums = [[1,3], [2,4], [2,4], [1,2]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 2, 2], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [6, 1, 2], m = 3, k = 0)",
        "countInterestingSubarrays(nums = [6, 2, 3, 4], m = 4, k = 2)",
        "countInterestingSubarrays(nums = [1, 4, 2, 2, 2], m = 2, k = 0)",
        "countInterestingSubarrays(nums = [6, 2, 7, 6, 1], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 4, 1, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [6, 5, 2, 9], m = 9, k = 3)",
        "countInterestingSubarrays(nums = [6, 5, 2, 3, 2, 1, 2, 2, 2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [6,2,6,8,1,4,9,4,5,1,3,3,3,1,1,4,7,2,2,4,5,3,7,7], m = 5, k = 3)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 13], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,3,5,13], k = 1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,3,5,6,8,8], k = 1)"
    ],
    "sample_203": [
        "minimumOperations(num = \"99\")",
        "minimumOperations(num = \"011\")",
        "minimumOperations(num = \"98\")",
        "minimumOperations(num = \"245\")",
        "minimumOperations(num = \"989\")",
        "minimumOperations(num = \"800\")",
        "minimumOperations(num = \"12021\")",
        "minimumOperations(num = \"5024\")",
        "minimumOperations(num = \"5032\")",
        "minimumOperations(num = \"000555777\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [4,2,3,1], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 4, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 2, 1, 2, 3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [6,2,2,1], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [2,4,5,3,2,6,4,3,1], modulo = 10, k = 7)",
        "countInterestingSubarrays(nums = [1,1,2,2,2,2,2,3,3,4,5,5,6,7,7,8,8], modulo = 10, k = 2)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,1,3,2,3,3], K = 0)",
        "longestEqualSubarray(A = [1, 2, 1, 3, 5, 3], K = 0)",
        "longestEqualSubarray(A = [1,2,3,3,3,2,2,2], K = 2)",
        "longestEqualSubarray(A = [10,5,0,10,10], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 1, 1, 3, 3, 2], K = 2)",
        "longestEqualSubarray(A = [10,20,20,30,30,30,30,40,40,40,40], K = 2)",
        "longestEqualSubarray(A = [0,0,0,0,0,0], K = 2)",
        "longestEqualSubarray(A = [4,3,4,3,2,4,4], K = 1)",
        "longestEqualSubarray(A = [4,2,1,3,4], K = 3)",
        "longestEqualSubarray(A = [4,3,5,5,2,4,6,3,4,3,5,6,3], K = 0)"
    ],
    "sample_146": [
        "finalString(s = \"pinto\")",
        "finalString(s = \"potinter\")",
        "finalString(s = 'pointer')",
        "finalString(s = 'iponter')",
        "finalString(s = 'pinto')",
        "finalString(s = 'petter')",
        "finalString(s=\"pinto\")",
        "finalString(s = 'hitter')",
        "finalString(s = \"iiponter\")",
        "finalString(s = \"codater\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [4, 4, 1, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [3,4,4,1,5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3,4,5,6,7,8,9,10,11], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 8, 8, 8, 8], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 9, 8, 8, 7], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [8,8,9,9,10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [2,2,2,3,3,3,4,4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4, 5, 5, 4, 3, 2, 1], target = 5)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 2]])",
        "numberOfPoints(nums = [[1, 3], [1, 4], [2, 4]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [1, 4], [5, 6], [3, 5]])",
        "numberOfPoints(nums = [[-2, 2], [0, 8], [5, 10]])",
        "numberOfPoints(nums = [[1,3], [2,3], [2,4]])",
        "numberOfPoints(nums = [[-2, 0], [1, 1]])",
        "numberOfPoints(nums = [[0, 10], [5, 10], [1, 5]])",
        "numberOfPoints(nums = [[2, 5], [4, 7], [6, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [3, 4], [4, 4], [2, 4], [1, 5], [1, 2]])",
        "numberOfPoints(nums = [[-2,2], [-1,2], [-1, 2], [-1,2], [-2,2]])"
    ],
    "sample_130": [
        "maxIncreasingGroups(A = [1, 2, 3, 4])",
        "maxIncreasingGroups(A = [1, 2, 4, 5])",
        "maxIncreasingGroups(A = [1, 1, 2, 2, 2])",
        "maxIncreasingGroups(A = [3, 3, 3, 3, 4])",
        "maxIncreasingGroups(A = [1, 3, 5, 10])",
        "maxIncreasingGroups(A = [2,2,2,2])",
        "maxIncreasingGroups(A = [5, 1, 4, 3, 2])",
        "maxIncreasingGroups(A = [2, 2, 2, 3, 3, 3, 4, 4, 4])",
        "maxIncreasingGroups(A = [1, 2, 3, 4, 5, 7, 8, 12, 13, 14, 15, 16])",
        "maxIncreasingGroups(A = [10, 1, 12, 2, 14])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 100], [2, 2, 190]])",
        "maximizeTheProfit(n = 5, offers = [[2,1,100],[1,1,50],[3,2,150]])",
        "maximizeTheProfit(n = 6, offers = [[1, 1, 10], [2, 2, 19]])",
        "maximizeTheProfit(n = 4, offers = [[2,1,100],[1,1,50],[3,2,100]])",
        "maximizeTheProfit(n = 5, offers = [[1,1,2],[2,2,4],[3,3,6]])",
        "maximizeTheProfit(n = 3, offers = [[3, 2, 10], [1, 2, 5], [3, 3, 7]])",
        "maximizeTheProfit(n = 3, offers = [[2,1,3],[2,0,3]])",
        "maximizeTheProfit(n=2, offers=[[1, 2, 3], [2, 3, 4], [2, 2, 5]])",
        "maximizeTheProfit(n = 6, offers = [[3, 1, 3], [3, 0, 5], [2, 0, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,3], [2,4,3], [3,2,1], [4,5,2]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"L_R_R\")",
        "furthestDistanceFromOrigin(moves = \"__R_L_\")",
        "furthestDistanceFromOrigin(moves = \"LR__RRRLLL\")",
        "furthestDistanceFromOrigin(moves = \"LL_L_R\")",
        "furthestDistanceFromOrigin(moves = \"R_L_R__R_\")",
        "furthestDistanceFromOrigin(moves = \"LLR__RRRLR\")",
        "furthestDistanceFromOrigin(\"_RL__L_\")",
        "furthestDistanceFromOrigin(moves = 'LLLLRR_L')",
        "furthestDistanceFromOrigin(\"R_L_R_L_L_\")",
        "furthestDistanceFromOrigin(moves = \"RR__R_RL_RRR_RRL\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 4, k = 12)",
        "minimumSum(n = 3, k = 8)",
        "minimumSum(n = 3, k = 12)",
        "minimumSum(n = 3, k = 11)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 10, k = 30)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,3],[6,7]])",
        "numberOfPoints(nums = [[1,3],[6,7]])",
        "numberOfPoints(nums = [[3, 4], [2, 3], [1, 2]])",
        "numberOfPoints(nums = [[2, 8], [1, 4], [2, 3]])",
        "numberOfPoints(nums = [[1,3],[2,4],[4,6],[7,9]])",
        "numberOfPoints(nums = [[-9,0],[3,9]])",
        "numberOfPoints(nums = [[1, 3], [2, 3], [2, 4], [5, 8], [6, 8], [9, 10]])",
        "numberOfPoints(nums = [[1,1], [2,2], [1,100], [10,12]])",
        "numberOfPoints(nums=[(1,2),(1,3),(1,4),(2,4),(2,3)])",
        "numberOfPoints(nums = [[-1, 0], [0, 1], [1, 2], [-1, 3], [2, 3], [-2, -1], [2, 3], [-3, -1]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"0100\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(num = \"75\")",
        "minimumOperations(num = \"122500\")",
        "minimumOperations(num = \"1000\")",
        "minimumOperations(num = \"7000\")",
        "minimumOperations(num = \"1230250\")",
        "minimumOperations(num = \"1000101000\")",
        "minimumOperations(num = \"1234000500\")",
        "minimumOperations(num = \"025025025025025025025\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [2, 2, 3, 4, 2])",
        "minimumIndex(nums = [1,2,3,2,1])",
        "minimumIndex(nums = [0, 1, 0, 1, 0, 0, 1, 0])",
        "minimumIndex(nums = [1, 1, 1, 2, 3, 4, 4])",
        "minimumIndex(nums = [0, 1, 2, 3, 3, 3, 4, 5, 5])",
        "minimumIndex(nums = [1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4])",
        "minimumIndex(nums = [0, 1, 2, 0, 1, 2, 3, 3, 3, 3, 4, 4, 4])",
        "minimumIndex(nums = [2,3,1,0,1,0])",
        "minimumIndex(nums = [5, 2, 5, 5, 5, 4, 3, 5])",
        "minimumIndex(nums = [2,3,5,5,7,12,2,7,15,2,2,5,7,15,19,10,7])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LLLL_RRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL_\")",
        "furthestDistanceFromOrigin(moves = \"L_R__RR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRR___RRLR\")",
        "furthestDistanceFromOrigin(moves = \"RLLL_RRL\")",
        "furthestDistanceFromOrigin(\"RL_\")",
        "furthestDistanceFromOrigin(moves = \"L__L__RR\")",
        "furthestDistanceFromOrigin(\"_LRRRRL\")",
        "furthestDistanceFromOrigin(moves = \"_LR_RLL_LLL_RRR_\")"
    ],
    "sample_161": [
        "maxSum(nums = [])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1, 1, 1, 1, 1, 1])",
        "maxSum(nums = [-1,-2,-3])",
        "maxSum(nums = [1234, 1234])",
        "maxSum(nums = [1, 1, 0, 2])",
        "maxSum(nums = [2, 3, 5, 1, 2])",
        "maxSum(nums = [999, 999, 1001, 999])",
        "maxSum(nums = [15, 10, 20, 20, 21])",
        "maxSum(nums = [13, 31, 3, 6, 15, 22, 54, 73, 12, 19, 49, 33, 32, 12, 34, 74, 43, 71, 44, 35, 69, 12, 10, 65, 81, 18, 27, 33, 39, 39, 13, 71, 33, 19, 82, 15, 34, 50, 51, 35, 18, 50, 22, 61, 7, 23, 51, 15, 12, 21, 61, 48, 80, 70, 76, 54, 27, 1, 61, 75, 53, 44, 6, 1, 27, 73, 17, 67, 11, 27, 10, 60, 53, 30, 62, 14, 21, 16, 38, 37, 63, 75, 10, 48, 17, 48, 59, 33, 55, 69, 51, 38, 14, 16, 2, 28, 18, 5, 50, 14, 21, 69, 77, 46, 24, 49, 3, 25, 71, 45, 23, 21, 40, 35, 60, 20, 12, 5, 51, 15, 74, 54, 78, 71, 72, 71, 78, 59, 61, 22, 20, 39, 45, 5, 47, 73, 19, 1, 11, 67, 54, 39, 27, 71, 33, 23, 22, 51, 28, 22, 26, 11,"
    ],
    "sample_160": [
        "maxSum(nums = [2, 1, 2])",
        "maxSum(nums = [37, 1, 4, 42])",
        "maxSum(nums = [2, 21, 43, 3, 54, 2, 21])",
        "maxSum(nums = [1, 10, 5, 2, 7])",
        "maxSum(nums = [3, 9, 333, 1333, 10000])",
        "maxSum(nums = [24, 13, 9, 11, 19, 6])",
        "maxSum(nums = [100, 90, 31, 121])",
        "maxSum(nums = [15, 13, 13, 12, 5, 11, 12, 13, 13, 15])",
        "maxSum(nums = [17, 39, 15, 10, 11, 9, 7, 13, 15, 18, 16, 15])",
        "maxSum(nums = [110, -12, 2, 7, 1, 0, 11, -2, -1, 3, 111])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = ['one:two:three', 'four:five:six'], separator = ':')",
        "splitWordsBySeparator(words = ['one-two', 'three-four', 'five-six'], separator = '-')",
        "splitWordsBySeparator(words = ['one|two|three', 'four|five|six'], separator = '|')",
        "splitWordsBySeparator(words = \"one#two#three#four#five#six\", separator = '#')",
        "splitWordsBySeparator(words = [\"one:two\", \"three:four\", \"five:six\"], separator = ':')",
        "splitWordsBySeparator(words = [\"one,two\",\"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one,two', 'three,,four', 'five;six'], separator = \",\")",
        "splitWordsBySeparator(words = \"one#two##three#four\", separator = \"#\")",
        "splitWordsBySeparator(words = ['1|2|3', '4|5|6', '7|8|9'], separator = '|')",
        "splitWordsBySeparator(words = ['one.two', 'three-four', 'five:six'], separator = '.:-:')"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 1, 3], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [0,0,1,3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3,5,7], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 2, 2, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10,2,3], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [3,3,3,3,4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10,11,12,13,14], target = 14)",
        "numberOfEmployeesWhoMetTarget(hours = [2,4,3,1,5], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 5, 15, 11, 15], target = 5)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [4,5,6], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [4,4,4], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [0,1,2], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [0,0,0,1,0,1,1,1,1], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [2,2,2,2,3,4,3,5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [4, 8, 5, 9, 1], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 4, 3, 3, 3, 2, 3, 3, 4], target = 12)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 4, k = 1)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 5, k = 1)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 6, k = 10)",
        "minimumSum(n = 4, k = 13)"
    ],
    "sample_159": [
        "maxSum(nums = [])",
        "maxSum(nums = [1,2,3,4,5])",
        "maxSum(nums = [1,2,3])",
        "maxSum(nums = [1, 2, 3, 4, 5, 6])",
        "maxSum(nums = [-5,-5])",
        "maxSum(nums = [2, 99, 100, 101])",
        "maxSum(nums = [153,370,371,100,150,154,374,372])",
        "maxSum(nums = [7, 9, 2, 1, 3, 6, 6, 5, 2])",
        "maxSum(nums = [42, -67, 34, -99, 12])",
        "maxSum(nums = [23,25,43,32,93,17,20,21])"
    ],
    "sample_157": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [1, 2, 2, 3], m = 3)",
        "canSplitArray(nums = [2, 3, 4, 5, 6], m = 7)",
        "canSplitArray(nums = [1, 1, 2, 2, 3], m = 4)",
        "canSplitArray(nums = [2,2,2,5], m = 4)",
        "canSplitArray(nums = [3, 4, 5, 2, 8], m = 10)",
        "canSplitArray(nums = [3, 2, 3, 5, 2, 1], m = 5)",
        "canSplitArray(nums = [5, 2, 4, 3, 1, 2], m = 10)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"hello,world\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one,two,three\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"1,2,3\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"1 2\", \"3 4\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"one#two\", \"three\"], separator = \"#\")",
        "splitWordsBySeparator(words = [\"apple:banana\"], separator = \":\")",
        "splitWordsBySeparator(words = [\"I love Python\", \"I hate Java\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"qwerty\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"hello.world.string\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"bana.na\", \"hello.\", \"world!\"], separator = '.')"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 1)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 4, k = 3)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 4, k = 1)",
        "minimumSum(n = 1, k = 2)",
        "minimumSum(n = 5, k = 1)",
        "minimumSum(n = 1, k = 5)"
    ],
    "sample_228": [
        "countWays(nums = [0,1,2,3])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [0,0,1,1,1,2])",
        "countWays(nums = [1,2,3,4,5])",
        "countWays(nums = [1, 2, 3, 4])",
        "countWays(nums = [0,2,3,4,5])",
        "countWays(nums = [2,3,4,5])",
        "countWays(nums = [2,3,6,7])",
        "countWays(nums = [4,1,6,4,4,1])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '00101')",
        "maximumOddBinaryNumber(s = '1000')",
        "maximumOddBinaryNumber(s = \"101\")",
        "maximumOddBinaryNumber(s = '10110')",
        "maximumOddBinaryNumber(\"1111\")",
        "maximumOddBinaryNumber(s = '00110101')"
    ],
    "sample_119": [
        "minimumIndex(nums = [7, 7, 9, 11, 11])",
        "minimumIndex(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 3])",
        "minimumIndex([1, 2, 3, 1, 1, 3])",
        "minimumIndex(nums = [2, 3, 2, 2, 3, 2])",
        "minimumIndex(nums = [4, 4, 5, 5, 5, 1, 2, 3])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 3, 3, 3])",
        "minimumIndex(nums = [1, 3, 9, 3, 0, 9, 7, 3])",
        "minimumIndex(nums = [1, 1, 2, 3, 1, 1, 3, 1, 1])",
        "minimumIndex(nums = [4, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4])",
        "minimumIndex(nums = [5,5,2,1,2,3,5,4,5,4,5,5,5,5,5,5,5,5,5,5])"
    ],
    "sample_153": [
        "canSplitArray(nums = [7,2,5,10,8], m = 3)",
        "canSplitArray(nums = [7,2,5,10,8], m = 3)",
        "canSplitArray(nums = [7,2,5,10,8], m = 12)",
        "canSplitArray(nums = [7,2,5,10,8], m = 12)",
        "canSplitArray(nums = [2, -1, 2, 4, -2, 3], m = 3)",
        "canSplitArray(nums = [7,2,5,10,8], m = 15)",
        "canSplitArray(nums = [7, 2, 5, 10, 8], m = 15)",
        "canSplitArray(nums = [1,2,3,4,5], m = 2)",
        "canSplitArray(nums = [1, 2, 3, 4, 4], m = 6)",
        "canSplitArray(nums = [1,2,5,1,6,7,5,1,2], m = 3)"
    ],
    "sample_147": [
        "finalString(s = 'string')",
        "finalString(s = \"interviewbit\")",
        "finalString(s = 'strang')",
        "finalString(s = \"banana\")",
        "finalString(s = \"trying\")",
        "finalString(s = \"thisisawesome\")",
        "finalString(s = \"thisisasingleword\")",
        "finalString(s = \"abac\")",
        "finalString(s = 'spng')",
        "finalString(s = \"csrts\")"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 2, k = 1)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 5, k = 10)",
        "minimumSum(n = 5, k = 1)",
        "minimumSum(n = 5, k = 4)",
        "minimumSum(n = 4, k = 12)",
        "minimumSum(n = 4, k = 16)",
        "minimumSum(n = 1, k = 5)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1,2,7,2,5], m = 9)",
        "canSplitArray(nums = [1,2,7,2,5], m = 11)",
        "canSplitArray(nums = [1,2,2,1], m = 3)",
        "canSplitArray(nums = [1,1,2,2,3], m = 4)",
        "canSplitArray(nums = [3,2,1,2,7], m = 5)",
        "canSplitArray(nums=[2,5,6], m=6)",
        "canSplitArray(nums=[2,4,5,6,7], m = 10)",
        "canSplitArray(nums=[2, 3, 2, 3, 3], m=5)",
        "canSplitArray(nums = [4,5,5,10,4,6], m = 1)",
        "canSplitArray(nums=[3, 2, 1], m=4)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,2,1,3,2,5])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1])",
        "countCompleteSubarrays(nums = [1,2,3,1])",
        "countCompleteSubarrays(nums = [1,1,3,3,4,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1, 2, 1, 2])",
        "countCompleteSubarrays(nums = [1,2,2,2])",
        "countCompleteSubarrays(nums = [1,2,2,2,2])",
        "countCompleteSubarrays(nums = [1,5,2,1,4,0])"
    ],
    "sample_150": [
        "finalString(s = 'string')",
        "finalString(s = 'interviewbit')",
        "finalString(s = \"interesting\")",
        "finalString(s = \"this is a string\")",
        "finalString(s = \"testing\")",
        "finalString(s = \"This is an interesting example!\")",
        "finalString(s = \"coding\")",
        "finalString(s = 'innings')",
        "finalString(s = 'ignored')",
        "finalString(s = \"switching\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 3, target = 1)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n = 5, target = 8)",
        "minimumPossibleSum(n = 6, target = 3)",
        "minimumPossibleSum(n = 6, target = 2)",
        "minimumPossibleSum(n = 100, target = 10000)"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 3, k = 10)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 4, k = 10)",
        "minimumSum(n = 2, k = 6)",
        "minimumSum(n = 4, k = 2)",
        "minimumSum(n = 5, k = 2)",
        "minimumSum(n = 4, k = 4)",
        "minimumSum(n = 3, k = 18)",
        "minimumSum(n = 10, k = 20)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1,2,3,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,6], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,6], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 2, k = 0)",
        "countInterestingSubarrays(nums = [1,2,3,6], modulo = 4, k = 1)",
        "countInterestingSubarrays(nums = [2,2,4,3,7], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,4,5,6,7,8,9], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [8,4,1,1], modulo = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,4,7], modulo = 3, k = 0)",
        "countInterestingSubarrays(nums = [6,5,7,8,5,2], modulo = 9, k = 3)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 13], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 7, 9, 11], k = 3)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1, 1], k = 0)",
        "sumIndicesWithKSetBits(nums = [2,3,5], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 9, 4, 6, 4], k = 1)"
    ],
    "sample_151": [
        "finalString(s = \"reverse this string\")",
        "finalString(s = \"interviewbit\")",
        "finalString(s = \"happy\")",
        "finalString(s = \"reverseThis\")",
        "finalString(\"strings\")",
        "finalString(s = \"innings\")",
        "finalString(s = 'itstring')",
        "finalString(s = 'firing')",
        "finalString(s = \"nitongbri\")",
        "finalString(s = \"hixqrtsni\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 0)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 0)",
        "sumIndicesWithKSetBits(nums = [1, 3], k = 1)",
        "sumIndicesWithKSetBits(nums=[1, 2, 3, 4], k=1)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1, 2, 3], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 5], k = 0)",
        "sumIndicesWithKSetBits(nums=[1, 1, 1, 1, 1, 1, 1], k=3)"
    ],
    "sample_133": [
        "maxIncreasingGroups(usageLimits = [2, 4, 7, 1, 5])",
        "maxIncreasingGroups(usageLimits = [2, 4, 7])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3])",
        "maxIncreasingGroups(usageLimits = [1, 3, 5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 5])",
        "maxIncreasingGroups(usageLimits = [5, 3, 2])",
        "maxIncreasingGroups(usageLimits = [2,3,5])",
        "maxIncreasingGroups(usageLimits = [1, 2, 3, 6, 9, 15])",
        "maxIncreasingGroups(usageLimits = [5, 1, 3, 1, 4, 1, 1])",
        "maxIncreasingGroups(usageLimits = [100, 10, 10, 9, 9, 9, 5, 5])"
    ],
    "sample_204": [
        "minimumOperations(s = \"0000\")",
        "minimumOperations(s = \"000000\")",
        "minimumOperations(s = \"500075\")",
        "minimumOperations(s = \"002500250025\")",
        "minimumOperations(s = \"0000010000000\")",
        "minimumOperations(s = \"00000010000000000\")",
        "minimumOperations(s = \"101001101\")",
        "minimumOperations(s = \"757500757500\")",
        "minimumOperations(s = \"0010001100110\")",
        "minimumOperations(s = '00000025000000000000000')"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 3, 3, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 8, 7, 7], target = 9)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 13, 15, 16, 17], target = 14)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,4,3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 4, 3, 0], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 6, 7, 8, 5, 6, 7, 8], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [2,3,2,1,3], target = 2)",
        "numberOfEmployeesWhoMetTarget(hours = [3,4,3,7,1,10,1], target = 5)"
    ],
    "sample_148": [
        "finalString(s = \"interesting\")",
        "finalString(s = \"interesting\")",
        "finalString(s = 'interesting')",
        "finalString(s = \"interesting\")",
        "finalString(s = \"hunter\")",
        "finalString(s = \"function\")",
        "finalString(s = \"pintel\")",
        "finalString(s = \"planter\")",
        "finalString(s = 'hi')",
        "finalString(s = 'questionnaire')"
    ],
    "sample_168": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"happy\", \"new\", \"year\"], s = \"hn\")",
        "isAcronym(words = [\"Comet\", \"is\", \"a\", \"celestial\", \"body\"], s = \"CIA\")",
        "isAcronym(words = [\"classic\", \"intuitive\", \"interface\"], s = \"cil\")",
        "isAcronym(words=[\"hey\", \"you\", \"are\", \"awesome\"], s=\"hryaa\")",
        "isAcronym(words = ['conference', 'is', 'an', 'abbreviation'], s = 'CIA')",
        "isAcronym(words = ['e','l','e','d'], s = \"ele\")",
        "isAcronym(words = ['electric', 'regulator', 'or', 'reeducation'], s = 'err')",
        "isAcronym(words = [\"but\", \"n\", \"e\", \"s\", \"t\"], s = \"best\")",
        "isAcronym(words = [\"electric\", \"truth\", \"join\", \"me\"], s = \"let's\")"
    ],
    "sample_201": [
        "minOperations(nums = [1, 2, 3], target = 10)",
        "minOperations(nums = [2, 2], target = 4)",
        "minOperations(nums = [1, 3, 2, 2, 1], target = 6)",
        "minOperations(nums = [3, 3, 3, 3, 5, 5, 5, 2, 2, 7], target = 10)",
        "minOperations(nums = [1,3,5,6], target = 8)",
        "minOperations(nums = [2,2,2,2,2,2,2,2,2], target = 14)",
        "minOperations(nums = [1, 3, 2, 2, 1, 3, 5, 4], target = 9)",
        "minOperations(nums = [5, 6, 9, 3, 6, 4, 3], target = 60)",
        "minOperations(nums = [9, 4, 8, 2, 4, 4, 5, 0], target = 95)",
        "minOperations(nums = [94,72,58,30,96,93,27,53,79,39,76,42,45,62,85,66,6], target = 141)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = \"10\")",
        "maximumOddBinaryNumber(s = '11111')",
        "maximumOddBinaryNumber(s = \"00110\")",
        "maximumOddBinaryNumber(s = \"11110\")",
        "maximumOddBinaryNumber(s = \"111010101\")",
        "maximumOddBinaryNumber(s = '0101010101010101')",
        "maximumOddBinaryNumber(s = '1101110111')",
        "maximumOddBinaryNumber(s = '0010101101')",
        "maximumOddBinaryNumber(s = \"0100011001\")",
        "maximumOddBinaryNumber(s = \"1010010011001\")"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '1110')",
        "maximumOddBinaryNumber(s = \"1011\")",
        "maximumOddBinaryNumber(s = '111111111')",
        "maximumOddBinaryNumber(s = '1101001')",
        "maximumOddBinaryNumber(\"1111\")",
        "maximumOddBinaryNumber(s = '100000111')",
        "maximumOddBinaryNumber(s = '000001010011')",
        "maximumOddBinaryNumber(s = '01011000111')",
        "maximumOddBinaryNumber(s = '1010101110010101111')",
        "maximumOddBinaryNumber(s = '000110011100110100111001100')"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 2, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 10, target = 100)",
        "minimumPossibleSum(n = 5, target = 11)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 4, target = 6)",
        "minimumPossibleSum(n = 8, target = 6)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LRRLA\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRRL\")",
        "furthestDistanceFromOrigin(\"LRL\")",
        "furthestDistanceFromOrigin(moves = 'LRLRLRL')",
        "furthestDistanceFromOrigin(\"LRRLRLL\")",
        "furthestDistanceFromOrigin(moves = 'LLRL')",
        "furthestDistanceFromOrigin(moves = \"LRLRRRLR\")",
        "furthestDistanceFromOrigin(moves = \"LLALRRRL\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 10)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 1, target = 3)",
        "minimumPossibleSum(n = 10, target = 10)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 3, target = 8)",
        "minimumPossibleSum(n = 6, target = 10)",
        "minimumPossibleSum(n=3, target=10)",
        "minimumPossibleSum(n = 1, target = 100000000)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [0, 0, 0], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [1,2,3], target = 0)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 9, 8], target = 8)",
        "numberOfEmployeesWhoMetTarget(hours = [100, 95, 90], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [0, 2, 3], target = 1)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 3, 3, 3, 4, 4], target = 3.5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 3, 2, 2, 2], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 8, 5, 7, 11], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 5, 6, 2, 3], target = 6)"
    ],
    "sample_231": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [0,1,2,3])",
        "countWays(nums = [1,2,3])",
        "countWays(nums = [0,1,2])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8])",
        "countWays(nums = [0,2,3,4])",
        "countWays(nums = [4, 7, 9])",
        "countWays(nums = [1, 2, 3, 5, 0])",
        "countWays(nums = [0, 3, 5, 7, 8, 9])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"R_R_R_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLLL_RRRR\")",
        "furthestDistanceFromOrigin(moves = \"______RRR__LLL\")",
        "furthestDistanceFromOrigin(\"_R_L_L_R\")",
        "furthestDistanceFromOrigin(moves = 'RRRRRLLLLLL')",
        "furthestDistanceFromOrigin(moves = \"RRLLLULULULUL\")",
        "furthestDistanceFromOrigin(moves = 'RRR__L')",
        "furthestDistanceFromOrigin(moves = \"RR_LLL_RRR_LLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LR_R_RRL_RRR_\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 6)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 2, target = 6)",
        "minimumPossibleSum(n = 1, target = 5)",
        "minimumPossibleSum(n = 4, target = 3)",
        "minimumPossibleSum(n = 5, target = 4)",
        "minimumPossibleSum(n = 3, target = 15)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1,1,2,2,3,3,4,4,5,5])",
        "countCompleteSubarrays(nums = [1,1,1,1,1,1,1,1,1,1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4])",
        "countCompleteSubarrays(nums = [3, 5, 1, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 3, 3, 4, 4, 5, 5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,4,1,5])",
        "countCompleteSubarrays(nums = [1,2,3,3,4,4,5,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 3, 5, 5, 7, 7, 11, 11])",
        "countCompleteSubarrays(nums = [1,1,1,2,1,2,2,3,1,2])"
    ],
    "sample_156": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 7)",
        "canSplitArray(nums = [1, 2, 3, 4], m = 1)",
        "canSplitArray(nums = [2, 3, 4], m = 6)",
        "canSplitArray(nums = [2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 9)",
        "canSplitArray(nums = [1, 2, 1, 2, 1, 2, 1, 2], m = 4)",
        "canSplitArray(nums = [1,2,2,3,4], m = 3)",
        "canSplitArray(nums = [2, 3, 1, 1], m = 6)",
        "canSplitArray(nums = [4, 2, 3, 4], m = 6)",
        "canSplitArray(nums = [1,2,1,2,4,2], m = 3)"
    ],
    "sample_200": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10], target = 50)",
        "minOperations(nums = [3], target = 2)",
        "minOperations(nums = [1,2,3,4,5], target = 5)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 100)",
        "minOperations(nums = [4,2,8], target = 24)",
        "minOperations(nums = [2,3,4,5], target = 22)",
        "minOperations(nums = [7, 5, 1], target = 100)",
        "minOperations(nums = [5, 5], target = 10000)",
        "minOperations(nums = [2,3,2,3,2,2], target = 12)",
        "minOperations(nums = [100, 3, 1, 2, 5, 10], target = 94)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 13], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5], k = 0)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 1, 1, 1], k = 4)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 6, 8, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 5, 1, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 4, 5, 9, 12, 25], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 1, 2, 3, 2, 3, 4, 2, 2, 2, 10, 7], k = 2)"
    ],
    "sample_165": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"portable\", \"network\", \"graphics\"], s = \"png\")",
        "isAcronym(words = [\"portable\", \"operating\", \"system\"], s = \"pos\")",
        "isAcronym(words = [\"This\", \"is\", \"a\", \"test\"], s = \"TISA\")",
        "isAcronym(words = [\"radar\", \"radii\", \"radios\"], s = \"radar\")",
        "isAcronym(words = ['hey', 'what', 'is', 'up', 'doc'], s = 'HWISU')",
        "isAcronym(words = [\"electric\", \"gas\", \"iron\"], s = \"EFIG\")",
        "isAcronym(words = [\"happy\", \"birthday\", \"hydrate\"], s = \"HBH\")",
        "isAcronym(words = [\"earth\", \"is\", \"out\", \"of\", \"order\"], s = \"oeea\")",
        "isAcronym(words = [\"jelly\", \"eater\"], s = \"jey\")"
    ],
    "sample_227": [
        "countWays(nums = [-1, 0, 1])",
        "countWays(nums = [1, 2, 3, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays(nums = [1, 1, 3, 4, 5])",
        "countWays(nums = [1,2,4])",
        "countWays(nums = [2,3,4,5,6,7])",
        "countWays(nums = [3,4,5,6,7,8,9,10])",
        "countWays(nums = [-5, 0, 5, -3, 0])",
        "countWays(nums = [-4, -3, -1, 1, 2, 3])",
        "countWays(nums = [2, 3, 4, 5, 6, 8, 10, 12, 14, 16])"
    ],
    "sample_158": [
        "maxSum(nums = [1, 1, 1])",
        "maxSum(nums = [1, 2, 1, 2])",
        "maxSum(nums = [4, 2, 1])",
        "maxSum(nums = [10000, 1000, 100, 10])",
        "maxSum(nums = [5, 6, 1, 2, 3, 4, 7, 8, 9, 10])",
        "maxSum(nums = [22, 36, 45, 67])",
        "maxSum(nums = [9, 8, 7, 2, 1, 4, 6])",
        "maxSum(nums = [5, 5, 5, 4, 4, 4, 4, 3, 3, 2, 2])",
        "maxSum(nums = [123, 1001, 3141])",
        "maxSum(nums = [22, 33, 33, 11, 11, 55, 22, 44])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,1,3,2,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,4,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,1,3,2,2,2,3], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,4,5], k = 3)",
        "longestEqualSubarray(nums = [2,2,2,3,3,3], k = 2)",
        "longestEqualSubarray(nums = [1,1,1,1,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,4,2], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,1,2,3,4,5], k = 5)",
        "longestEqualSubarray(nums = [1,2,3,2,2,1,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,3,2,1,1,1,3,4,5,6,7], k = 2)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 3, offers = [[1, 2, 10], [2, 3, 11], [3, 4, 12]])",
        "maximizeTheProfit(n = 3, offers = [[1, 1, 5], [2, 2, 10]])",
        "maximizeTheProfit(n = 3, offers = [[2, 5, 3], [1, 2, 2], [3, 2, 6]])",
        "maximizeTheProfit(n = 7, offers = [[1, 2, 10], [2, 3, 11], [4, 2, 12]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 100], [2, 3, 200], [3, 4, 300], [5, 5, 100]])",
        "maximizeTheProfit(n=6, offers=[[2, 3, 4], [4, 2, 5], [3, 3, 6]])",
        "maximizeTheProfit(n=5, offers=[(2, 2, 10), (1, 1, 2)])",
        "maximizeTheProfit(n=6, offers=[[2, 1, 10], [2, 1, 10], [2, 1, 10], [2, 1, 10], [2, 1, 10], [2, 1, 10], [2, 1, 10]])",
        "maximizeTheProfit(n = 6, offers = [[4, 2, 12], [2, 5, 10], [1, 1, 1], [3, 3, 15]])",
        "maximizeTheProfit(n = 2, offers = [[1,2,20],[1,3,25],[1,5,40]])"
    ],
    "sample_131": [
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 6, 7, 8])",
        "maxIncreasingGroups(x = [1, 2, 3, 4, 5, 10])",
        "maxIncreasingGroups(x = [1, 3, 6, 10])",
        "maxIncreasingGroups(x = [2, 3, 5, 6])",
        "maxIncreasingGroups(x = [1, 3, 4, 5])",
        "maxIncreasingGroups(x = [1, 2, 2, 3, 4, 5, 6, 7])",
        "maxIncreasingGroups(x = [1, 10, 2, 4, 5])",
        "maxIncreasingGroups(x = [2, 3, 5, 6, 9, 12, 15])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 13], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 3)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 4, 1, 5, 9, 2, 6], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 1, 2, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 7], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 8, 5, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [0,1,1,2,0,1,2,0,1], k = 1)",
        "sumIndicesWithKSetBits(nums = [3, 9, 6, 5, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 7, 8, 4], k = 2)"
    ],
    "sample_207": [
        "minimumOperations(num = \"125\")",
        "minimumOperations(num = \"4050\")",
        "minimumOperations(num = '500')",
        "minimumOperations(num = \"40000\")",
        "minimumOperations(num = '0001')",
        "minimumOperations(num = \"1502\")",
        "minimumOperations(num = '50005')",
        "minimumOperations(num = '99999999999')",
        "minimumOperations(num = '01220')",
        "minimumOperations(num = \"5204\")"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"RRL\")",
        "furthestDistanceFromOrigin(moves=\"RRRL\")",
        "furthestDistanceFromOrigin(moves = \"LRLRL\")",
        "furthestDistanceFromOrigin(moves = \"RLRR\")",
        "furthestDistanceFromOrigin(moves=\"RLL\")",
        "furthestDistanceFromOrigin(moves = \"LLLLL\")",
        "furthestDistanceFromOrigin(\"RR\")",
        "furthestDistanceFromOrigin(\"LLRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRL\")",
        "furthestDistanceFromOrigin(moves = \"RRRLRLLL\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"23\")",
        "minimumOperations(num = \"15\")",
        "minimumOperations(num = \"02\")",
        "minimumOperations(num = \"10000\")",
        "minimumOperations(num = '5000')",
        "minimumOperations(num = \"50220\")",
        "minimumOperations(num = \"2121212\")",
        "minimumOperations(num = \"3333333333333333333333333333333333333333\")",
        "minimumOperations(num = '00255007550')",
        "minimumOperations(num = '222585')"
    ],
    "sample_155": [
        "canSplitArray(nums = [1, 2, 2], m = 3)",
        "canSplitArray(nums = [1,2,2,4], m = 3)",
        "canSplitArray(nums = [1,2,5,9], m = 10)",
        "canSplitArray(nums = [1, 2, 7, 1, 2, 2, 1], m = 3)",
        "canSplitArray(nums = [4, 2, 3, 1], m = 2)",
        "canSplitArray(nums
        "canSplitArray(nums = [4, 2, 3, 2], m = 4)",
        "canSplitArray(nums = [75, 1, 2, 2], m = 11)",
        "canSplitArray(nums = [1,2,2,5,2,5,2,2,5], m = 10)",
        "canSplitArray(nums = [75, 100, 90, 80, 60, 85, 40, 25, 35, 30, 5], m = 160)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,5])",
        "countCompleteSubarrays(nums = [1,2,2,2])",
        "countCompleteSubarrays(nums = [1,1,3,3,3,5,7])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8])",
        "countCompleteSubarrays(nums = [1,1,2,2,2,2,2,2,3,3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,4,1,5,5])",
        "countCompleteSubarrays(nums = [2, 2, 3, 4, 1, 2])",
        "countCompleteSubarrays(nums = [6, 6, 4, 5, 4, 6, 5, 2, 0, 6])",
        "countCompleteSubarrays(nums = [2, 1, 3, 2, 2, 2, 1, 2, 3, 1, 3, 1, 1])"
    ],
    "sample_202": [
        "minimumOperations(num = \"111111\")",
        "minimumOperations(num
        "minimumOperations(num = \"0150\")",
        "minimumOperations(num = \"2525250000\")",
        "minimumOperations(num = \"1230001\")",
        "minimumOperations(num = \"7225\")",
        "minimumOperations(num = \"099288\")",
        "minimumOperations(num = \"001001001000100\")",
        "minimumOperations(num = \"12123232\")",
        "minimumOperations(num = \"00001101011010\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"a b\", \"c d\"], b = \" \")",
        "splitWordsBySeparator(a = [\"ab\", \"cd\"], b = \"cd\")",
        "splitWordsBySeparator(a = [\"apple\",\"banana\",\"cucumber\"], b = \"a\")",
        "splitWordsBySeparator(a = [\"cats\", \"are\", \"awesome\"], b = \"s\")",
        "splitWordsBySeparator(a = [\"ab,cd\", \"ef,gh\", \"ij\"], b = \",\")",
        "splitWordsBySeparator(a = [\"dog\", \"cat\"], b = \"t\")",
        "splitWordsBySeparator(a = [\"/usr/bin/spam\", \"/usr/bin/eggs\"], b = \"/\")",
        "splitWordsBySeparator(a = [\"b,o,o,k\"], b = \",\")",
        "splitWordsBySeparator(a = [\"ba-nana\", \"banana\", \"\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"asdf\", \"dsa\"], b = 's')"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [1,2,3], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 4, 5, 8, 10], k = 1)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 5, 8, 13], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 1, 3, 3, 4, 2, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 7, 8, 6, 9, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 5, 9, 13, 14, 15], k = 3)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s = '1111')",
        "maximumOddBinaryNumber(s = '1101')",
        "maximumOddBinaryNumber(s = '110')",
        "maximumOddBinaryNumber(s = '0111')",
        "maximumOddBinaryNumber(s = '111111')",
        "maximumOddBinaryNumber(s = '11111000000')",
        "maximumOddBinaryNumber(s = '1111110001111')",
        "maximumOddBinaryNumber(s = \"000000001001\")",
        "maximumOddBinaryNumber(s = '1111100010001110')"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,4,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,2,3,2,2], k = 3)",
        "longestEqualSubarray(nums = [1,2,4,5,5,2,2,1,2,4,5,5,2,2,1,2,4,5,5,2,2,1,2,4,5,5,2,2,1], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,3,2,1,1,5,5,5,1,1,5,5,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,1,3,3,3,5,1,2,2,2,2,2,2], k = 5)",
        "longestEqualSubarray(nums = [2, 4, 3, 3, 2, 3, 3, 1, 1, 4], k = 4)",
        "longestEqualSubarray(nums = [2,2,2,2,3,4,7,5], k = 3)",
        "longestEqualSubarray(nums = [1,2,4,5,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,10], k = 1)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,3,3,2,1,1,5,5,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [6, 3, 3, 1, 0, 2], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,3,2,1,2,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,3,3,2,1,1,1,1,3,3,2,4,5], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 3, 3, 3, 2, 1, 1, 3], k = 1)",
        "longestEqualSubarray(nums = [10,2,2,1,3,2,1,2,10], k = 3)",
        "longestEqualSubarray(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], k = 4)",
        "longestEqualSubarray(nums = [0,1,2,3,3,3,3,4,4,4,4,4,4,5,5,5,6,6,7,7,7,7,7,8,9,9,10], k = 3)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = '00101')",
        "maximumOddBinaryNumber(s = \"0000\")",
        "maximumOddBinaryNumber(s = \"11101\")",
        "maximumOddBinaryNumber(s = '0011100')",
        "maximumOddBinaryNumber(s = '01100110')",
        "maximumOddBinaryNumber(s = \"11101011\")",
        "maximumOddBinaryNumber(s = '111011111')",
        "maximumOddBinaryNumber(s = '01111110001')",
        "maximumOddBinaryNumber(s = \"010100100010110011\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hw\")",
        "isAcronym(words = [\"hello\", \"world\"], s = \"hwr\")",
        "isAcronym(words = [\"he\", \"is\", \"my\", \"brother\"], s = \"hismb\")",
        "isAcronym(words = [\"purple\", \"monty\", \"python\"], s = \"pym\")",
        "isAcronym(words = [\"port\",\"airport\",\"runtway\"], s = \"port\")",
        "isAcronym(words = [\"multi\", \"dimensional\", \"array\"], s = \"mda\")",
        "isAcronym(words = ['first', 'second'], s = 'FIS')",
        "isAcronym(words = [\"hi\", \"there\", \"always\"], s = \"hita\")",
        "isAcronym(words = [\"it\", \"is\", \"a\", \"gap\"], s = \"iags\")"
    ],
    "sample_163": [
        "maxSum(nums = [-1, -2])",
        "maxSum(nums = [1, 3, 2])",
        "maxSum(nums = [-2, -3, 4, -1])",
        "maxSum(nums = [12, 2, 2, 1])",
        "maxSum(nums = [9999999, 9999999])",
        "maxSum(nums = [15, 1, 2, 2, 3])",
        "maxSum(nums = [4, 4, 8, 8, 12])",
        "maxSum(nums = [100000, 9999999, 9999, 999])",
        "maxSum(nums = [7, 15, 10, 20, 15, 15, 15, 15, 15, 15, 15])",
        "maxSum(nums = [42, 53, 98, 86, 22, 35, 30, 14, 12, 76])"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 4, 3, 1])",
        "semiOrderedPermutation(nums = [4, 3, 1, 2])",
        "semiOrderedPermutation(nums = [5, 3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [5, 2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [2, 4, 6, 1, 3, 5])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1, 1, 2, 2, 2, 3, 3])",
        "continuousSubarrays(a = [1, 2, 3, 3, 3, 2, 1, 1])",
        "continuousSubarrays(a = [1,3,1,5,4,3])",
        "continuousSubarrays([1, 2, 1, 2, 1, 2, 2])",
        "continuousSubarrays([1,1,1,2,2,2,2,3,3,3,3])",
        "continuousSubarrays([3,4,2,5,6,7,8,10])",
        "continuousSubarrays(a = [2,3,5,3,5,4,2,5,4,4,2])",
        "continuousSubarrays(a = [3,5,1,3,4,7,3,4,8,1,7,9])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1,1,1,2,2,2])",
        "continuousSubarrays(nums = [2, 1, 4, 3])",
        "continuousSubarrays(nums = [2,1,4,3])",
        "continuousSubarrays(nums = [1,1,1,1,1,1,1,1])",
        "continuousSubarrays(nums = [2,3,1,2,4,3])",
        "continuousSubarrays(nums = [1,2,3,4,1,5])",
        "continuousSubarrays(nums = [0,1,2,3,4,5])",
        "continuousSubarrays(nums = [1,3,1,2,1,2,1])",
        "continuousSubarrays(nums = [2, 4, 6, 8, 10, 12, 14])",
        "continuousSubarrays(nums = [1,2,2,3,3,3,3,4,4,4,4,4,4,5,5,5,6])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n=1, queries=[[0, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[2, 1], [1, 2]])",
        "colorTheArray(n = 3, queries = [[2, 1], [0, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [1, 2], [1, 2], [1, 1], [1, 2]])",
        "colorTheArray(n = 3, queries = [[1, 2], [2, 3], [3, 1], [2, 2], [2, 2], [1, 1]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1,1,1,1,1], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1,1,1,1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 3)",
        "maximumJumps(nums = [5, 1, 3, 4, 2], target = 3)",
        "maximumJumps(nums = [-1,-1,2,-1,-2,2], target = 3)",
        "maximumJumps(nums = [1,1,1,1,1,1,1,1,1,1,0], target = -9)",
        "maximumJumps(nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 5, 5, 5, 5], target = 0)",
        "maximumJumps(nums = [-2,-5,1,-2,4, -1,-5,-4], target = -2)"
    ],
    "sample_22": [
        "minLength(s = \"ABCD\")",
        "minLength(\"ABCD\")",
        "minLength(s = \"CDCBA\")",
        "minLength(s = \"ACB\")",
        "minLength(s = \"AAABCD\")",
        "minLength(s = \"CDCDABCD\")",
        "minLength(s = \"ACBC\")",
        "minLength(s = \"ADBAB\")",
        "minLength(s = \"BBCCCDA\")",
        "minLength(\"BDCAB\")"
    ],
    "sample_7": [
        "colorTheArray(n = 2, queries = [[1, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [2, 2]])",
        "colorTheArray(n = 2, queries = [[0, 1], [0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1], [0, 2], [0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2], [0, 1]])",
        "colorTheArray(n = 2, queries = [[1, 1], [2, 2], [1, 1]])",
        "colorTheArray(n = 2, queries = [[1,2],[1,2],[1,2],[1,2]])",
        "colorTheArray(n=2, queries = [[1, 1], [1, 1]])",
        "colorTheArray(n = 2, queries = [[1,2],[2,1],[1,1]])",
        "colorTheArray(n=5, queries=[[2, 3], [2, 3]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 3]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 1], [4, 1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 3], [3, 4], [4, 2], [1, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [2, 1], [3, 2], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 3], [4, 3]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[1,1], [2,2], [3,2], [4,1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [1, 2], [1, 1], [3, 2], [3, 1]])",
        "colorTheArray(n = 5, queries = [[2, 1], [2, 2], [1, 2], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [2, 1], [3, 2], [4, 2], [3, 1]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6])",
        "semiOrderedPermutation(nums = [1,3,2,4])",
        "semiOrderedPermutation(nums = [3,2,1,4])",
        "semiOrderedPermutation(nums = [5,1,2,4,3])",
        "semiOrderedPermutation(nums = [1, 2, 5, 3, 4])",
        "semiOrderedPermutation(nums = [2,3,1,4,5,6])",
        "semiOrderedPermutation(nums = [1,3,2,6,5,4])",
        "semiOrderedPermutation(nums = [1,5,6,2,4,3])",
        "semiOrderedPermutation(nums = [6, 3, 1, 5, 2, 4])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [1, 2, 2, 3], threshold = 0)",
        "longestAlternatingSubarray(nums = [1,1,2,2,3], threshold = 0)",
        "longestAlternatingSubarray(nums = [2,2,3,3,2,2,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 2, 3, 3, 3], threshold = 0)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 3], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,1,1,2,2,2,3,3,3], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 4, 2, 1], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 6, 4, 8, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 5, 7, 10, 2, 2, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 4, 1, 1, 3, 1, 1, 1], threshold = 2)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230010')",
        "removeTrailingZeros(num = \"51230000001\")",
        "removeTrailingZeros(num = \"51230000000001\")",
        "removeTrailingZeros(\"512301\")",
        "removeTrailingZeros(\"5123010000000\")",
        "removeTrailingZeros
        "removeTrailingZeros(num = '5123000000010100000')"
    ],
    "sample_50": [
        "smallestString(s = 'zabaab')",
        "smallestString(s = \"zaaaab\")",
        "smallestString(s = 'babaa')",
        "smallestString(\"baaab\")",
        "smallestString(s = 'baba')",
        "smallestString(s = 'aaabaaa')",
        "smallestString(s = 'azab')",
        "smallestString(s = \"zaaab\")",
        "smallestString(s = \"zaaa\")",
        "smallestString(\"zaaaaaz\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 1])",
        "distinctDifferenceArray(nums = [3, 5, 1, 4, 3])",
        "distinctDifferenceArray(nums = [1, 3, 2, 3, 5, 3])",
        "distinctDifferenceArray(nums = [2, 3, 1, 5, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 1, 3, 5, 7, 5])",
        "distinctDifferenceArray(nums = [-1, -1, 0, 2, 3, 5, 0])",
        "distinctDifferenceArray(nums = [0, 0, 3, 4, 2, 1])",
        "distinctDifferenceArray(nums = [1, 1, 2, 3, 3, 4, 3, 4])",
        "distinctDifferenceArray(nums = [1, 1, 2, 2, 5, 3, 5, 5])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 10)",
        "distanceTraveled(mainTank = 1, additionalTank = 10)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 3, additionalTank = 4)",
        "distanceTraveled(mainTank = 3, additionalTank = 10)",
        "distanceTraveled(mainTank = 7, additionalTank = 0)"
    ],
    "sample_118": [
        "minimumIndex(nums = [1, 3, 5, 5, 1, 2, 3, 7])",
        "minimumIndex(nums = [2, 3, 1, 2, 2, 3, 1])",
        "minimumIndex(nums = [1, 1, 1, 0, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 1, 2, 3, 3])",
        "minimumIndex(nums = [5, 3, 1, 5, 4])",
        "minimumIndex(nums = [1,1,1,3,3,4,4,4,4])",
        "minimumIndex(nums = [1, 2, 2, 3, 4, 1, 1, 2, 2, 4, 2])",
        "minimumIndex(nums = [1,1,3,1,1,5,3,3])",
        "minimumIndex(nums = [7, 8, 5, 12, 5, 21, 21])",
        "minimumIndex(nums = [5, 3, 7, 10, 1, 10, 4, 8])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12,21,34,43])",
        "countBeautifulPairs(nums = [12, 24, 36, 48])",
        "countBeautifulPairs(nums = [12, 24, 15, 36, 8])",
        "countBeautifulPairs(nums = [12, 21, 23, 25])",
        "countBeautifulPairs(nums = [12,21,34,30])",
        "countBeautifulPairs(nums = [12, 24, 36, 24, 19])",
        "countBeautifulPairs(nums = [2, 2, 0, 1])",
        "countBeautifulPairs(nums = [20, 30, 4, 50, 9, 34])",
        "countBeautifulPairs(nums = [12, 91, 80, 43, 1, 2, 5])",
        "countBeautifulPairs(nums = [48, 45, 7, 26, 31, 91, 36, 20, 95, 59])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '5123000001')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512301000000000')",
        "removeTrailingZeros(num = '512300001')",
        "removeTrailingZeros(num
        "removeTrailingZeros(num = '512300001000')",
        "removeTrailingZeros(num = '51230001000000')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"aaabbc\")",
        "minimizedStringLength(s = \"abccd\")",
        "minimizedStringLength(s = \"aaabccc\")",
        "minimizedStringLength(s = \"abccddee\")",
        "minimizedStringLength(s = \"acac\")",
        "minimizedStringLength(s = \"cabcd\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,10,11], k = 2)",
        "maximumBeauty(nums = [1, 2, 4, 8, 16], k = 3)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7], k = 2)",
        "maximumBeauty(nums = [1, 4, 7, 10, 2, 5, 13, 14], k = 4)",
        "maximumBeauty(nums = [1,2,3,4,5,10,10], k = 1)",
        "maximumBeauty(nums = [1, 4, 4, 5, 8, 10], k = 5)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 1, num2 = 2)",
        "makeTheIntegerZero(num1 = 1, num2 = 1)",
        "makeTheIntegerZero(num1 = 3, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 0, num2 = 3)",
        "makeTheIntegerZero(num1 = 1000, num2 = 100)",
        "makeTheIntegerZero(num1 = 100, num2 = 12)",
        "makeTheIntegerZero(num1 = 122, num2 = 14)",
        "makeTheIntegerZero(num1 = 72, num2 = 23)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [10, 20, 30])",
        "findValueOfPartition(nums = [1, 3, 10])",
        "findValueOfPartition(nums = [2, 8, 3, 4])",
        "findValueOfPartition(nums = [2, 8, 3, 4])",
        "findValueOfPartition(nums = [3,5,2,4])",
        "findValueOfPartition(nums = [10, 4, 6, 12, 2, 1, 11])",
        "findValueOfPartition(nums = [0, 1, 0, 0, 3])",
        "findValueOfPartition(nums = [2, 0, 1, 3, -1])",
        "findValueOfPartition(nums = [1, 4, 1, 2, 7, 3, 1, 3, 1, 4])",
        "findValueOfPartition(nums = [36, 7, 58, 83, 47, 41, 67, 38])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 4)",
        "distanceTraveled(mainTank=10, additionalTank=1)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1,0,1])",
        "doesValidArrayExist(derived = [0,0,1,1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 0, 0])",
        "doesValidArrayExist([1,0])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"test\")",
        "makeSmallestPalindrome(s = 'noon')",
        "makeSmallestPalindrome(s = \"hello\")",
        "makeSmallestPalindrome(s = \"abac\")",
        "makeSmallestPalindrome(s = \"abcdc\")",
        "makeSmallestPalindrome(s = \"albert\")"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3], k = 1)",
        "checkArray(nums = [1, -1, 0, 1], k = 2)",
        "checkArray(nums = [1, 0, 2, 0, 0, 0], k = 3)",
        "checkArray(nums = [1, 1, 0, 0, 0, 1, 1], k = 3)",
        "checkArray(nums = [2, 3, 4, 5, 6], k = 1)",
        "checkArray(nums = [0, 1, 1, 0, 0, 0, 1, 1], k = 4)",
        "checkArray(nums = [4, 3, 5, 6, 7, 2], k = 3)",
        "checkArray(nums = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], k = 5)",
        "checkArray(nums = [2, 3, 3, 3, 3, 3, 3, 3, 3, 2], k = 3)",
        "checkArray(nums = [6, 5, -4, 4, 5, 4, -5, 5, -3, -4], k = 4)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [1,0,0,1,1,1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1, 0, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0])",
        "doesValidArrayExist(derived = [0,1,0,1,0,1,1,0,0,1,1,1,1,0,0])"
    ],
    "sample_54": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'ddsbncd')",
        "smallestString(s = 'addsbncd')",
        "smallestString(s = \"kkkkddsbncd\")",
        "smallestString(s = 'abcddsbncd')",
        "smallestString(s = \"dkcddsbncd\")",
        "smallestString(\"ddskbncc\")",
        "smallestString(s = \"bbbdda\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1,1,1,2,2,2])",
        "continuousSubarrays(A = [1,3,1,2,1])",
        "continuousSubarrays(A = [1,2,1,2,3,1,2])",
        "continuousSubarrays(A = [2,3,1,2,3,3])",
        "continuousSubarrays(A = [1, 1, 1, 3, 4, 4])",
        "continuousSubarrays(A = [1, 2, 3, 4, 1, 2, 3, 3, 2, 1, 1])",
        "continuousSubarrays(A = [2, 1, 3, 3, 2, 1, 3])",
        "continuousSubarrays([2, 1, 1, 2, 1, 2, 2, 1, 2, 1])",
        "continuousSubarrays([1, 2, 3, 4, 4, 4, 4, 3, 2, 1])",
        "continuousSubarrays(A = [1,1,2,1,2,2,2,1,1,2,1,2,2,1,2,1,1,2,1,1,2,2,1,1,2,2])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = 'ab')",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abab\")",
        "makeSmallestPalindrome(s = \"abb\")",
        "makeSmallestPalindrome(s = \"bab\")",
        "makeSmallestPalindrome(s = \"aab\")",
        "makeSmallestPalindrome(s = 'baab')",
        "makeSmallestPalindrome(s = 'abcba')",
        "makeSmallestPalindrome(s = \"abbba\")"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 4, 10, 20, 50])",
        "findValueOfPartition(nums = [1, 10, 100])",
        "findValueOfPartition(nums = [2, 4, 6, 8, 10])",
        "findValueOfPartition(nums = [10, 20, 30, 40, 50])",
        "findValueOfPartition(nums = [10, 100])",
        "findValueOfPartition(nums = [1,2,3,4,10,100])",
        "findValueOfPartition(nums = [3, 5, 1, 2, 10])",
        "findValueOfPartition(nums = [1,5,10,3])",
        "findValueOfPartition(nums = [10, 11, 100, 105])",
        "findValueOfPartition(nums = [3, 1, 10, 2, 4, 5])"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = \"kddsbndcd\")",
        "smallestString(s = \"kddsbcnd\")",
        "smallestString(s = 'cddsbncd')",
        "smallestString(s = \"kdkdcd\")",
        "smallestString(s = \"kddsbncds\")",
        "smallestString(s = 'cdsdbncd')",
        "smallestString(\"kddsbcd\")",
        "smallestString(s = \"kkddsbnds\")",
        "smallestString(s = \"ddbssdsncd\")"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7, 7, 7, 8], k = 3)",
        "maximumBeauty(nums = [2,2,2,2,2,2], k = 2)",
        "maximumBeauty(nums = [1, 3, 4, 5, 7, 10, 2, 11], k = 1)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "checkArray(nums = [1,2,1,2,1], k = 3)",
        "checkArray(nums = [1,2,3,4], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 4)",
        "checkArray(nums = [1, 2, 3, 1, 2, 3], k = 2)",
        "checkArray(nums = [1,2,1,3,4,3], k = 3)",
        "checkArray(nums = [1, 1, 0, 0, 1, 1], k = 2)",
        "checkArray(nums = [5, 1, 1, 2, 1, 1], k = 3)",
        "checkArray(nums = [1,2,1,2,1,1,3,4], k = 3)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 1)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 10, additionalTank = 2)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank=5, additionalTank=5)",
        "distanceTraveled(mainTank = 7, additionalTank = 4)",
        "distanceTraveled(mainTank = 15, additionalTank = 7)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 2, 3])",
        "distinctDifferenceArray(nums = [2, 1, 1, 2, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1,2,3,4,3,2,1])",
        "distinctDifferenceArray(nums = [1,2,3,2,5])",
        "distinctDifferenceArray(nums = [1, 3, 2, 3, 4, 1])",
        "distinctDifferenceArray(nums = [5, 5, 1, 1, 2, 2, 5, 5, 2, 2, 5, 5, 2, 2, 5, 5, 2, 2])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,3,4])",
        "continuousSubarrays(A = [1,1,3,3,2])",
        "continuousSubarrays(A = [1,1,2,2,3,1,1,3])",
        "continuousSubarrays(A = [1, 2, 3, 1, 2, 1, 1, 1])",
        "continuousSubarrays(A = [1,2,3,4,3,3,2,1])",
        "continuousSubarrays(A = [1,1,2,3,2,2,1])",
        "continuousSubarrays(A = [2, 1, 1, 2, 1, 1, 1])",
        "continuousSubarrays(A = [1,1,1,2,1,3,1])",
        "continuousSubarrays(A = [1,1,2,1,2,1,3,2,2,1])",
        "continuousSubarrays(A = [1,1,3,1,2,1,1,3,1,2,1,1,3,1,2,1,1,3,1,2,1,1,3,1,2])"
    ],
    "sample_6": [
        "colorTheArray(n = 3, queries = [[0, 1], [1, 0], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 0]])",
        "colorTheArray(n = 2, queries = [[0,0],[1,0]])",
        "colorTheArray(n = 2, queries = [[1, 1], [0, 1]])",
        "colorTheArray(n = 3, queries = [[1,1],[2,2],[2,2]])",
        "colorTheArray(n = 5, queries = [[1, 2], [2, 2], [3, 2], [4, 2]])",
        "colorTheArray(n = 3, queries = [[1, 0], [1, 0], [1, 0]])",
        "colorTheArray(n = 4, queries = [[1,2],[2,3],[2,2]])",
        "colorTheArray(n = 6, queries = [[3,2],[2,3],[4,2],[5,3],[1,2],[1,1]])",
        "colorTheArray(n=10, queries = [[1,1],[5,1],[7,1],[3,1],[2,1],[1,2],[3,2],[3,1]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 4, b = 2)",
        "makeTheIntegerZero(a = 6, b = 3)",
        "makeTheIntegerZero(a = 1000, b = 1)",
        "makeTheIntegerZero(a = 9, b = 2)",
        "makeTheIntegerZero(a = 42, b = 10)",
        "makeTheIntegerZero(a = 1023, b = 1023)",
        "makeTheIntegerZero(a = 2000, b = 2)",
        "makeTheIntegerZero(a = 73, b = 11)",
        "makeTheIntegerZero(a = 21123, b = 1)",
        "makeTheIntegerZero(a = 1743105, b = 52)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [1,2,3,4], target = 1)",
        "maximumJumps(nums = [10,2,5,11], target = 5)",
        "maximumJumps(nums = [5, 1, 1, 5, 3, 2, 4], target = 4)",
        "maximumJumps(nums = [100, -23, -42, 100, 19, 33], target = 10)",
        "maximumJumps(nums = [10, 10, 5, 10, 3, 10, 10], target = 1)",
        "maximumJumps(nums = [100, 4, 13, 2, 76, 31, 76, 64, 17, 30, 80, 100], target = 4)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [1,1,2,2,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,2,2,2,2,3], threshold = 0)",
        "longestAlternatingSubarray(nums = [4,2,3,3,2,2,2,1], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,4,2,0,4,4,4,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [2,2,2,4,4], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 3, 3, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 1, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,4,1,5,7,3,11], threshold = 4)",
        "longestAlternatingSubarray(nums = [4, 5, 4, 5, 4], threshold = 4)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [3, 4, 5, 3, 5], b = [2, 2, 2, 1, 2])",
        "maxNonDecreasingLength(a = [1, 3, 6, 5, 7], b = [9, 8, 7, 3, 10])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4, 4, 5], b = [1, 3, 2, 4, 4, 4])",
        "maxNonDecreasingLength(a = [0, 2, 1, 3, 5, 4], b = [1, 2, 0, 3, 4, 5])",
        "maxNonDecreasingLength(a = [4, 1, 5, 2, 6], b = [4, 3, 6, 1, 2])",
        "maxNonDecreasingLength(a = [1, 4, 5, 7, 1], b = [1, 3, 8, 9, 7])",
        "maxNonDecreasingLength(a = [1, 3, 2, 1, 5, 1, 3], b = [2, 1, 1, 2, 3, 4, 5])",
        "maxNonDecreasingLength(a = [1, 10, 3, 12, 8, 11], b = [10, 2, 3, 11, 13, 2])",
        "maxNonDecreasingLength(a = [0, 1, 1, 1, 5, 7, 8, 8, 9], b = [1, 3, 3, 5, 5, 5, 6, 6, 7])",
        "maxNonDecreasingLength(a = [1, 4, 6, 7, 8, 12, 17, 18, 21, 22], b = [6, 8, 10, 11, 13, 17, 18, 19, 20, 22])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [1,1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [1,0,0,0,1,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,1,1,0,0,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,1,0,0,1,0,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,0,1,1,1,0,0,0,1,0,0])"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 4, 2, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [4, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,1,2,2,3], threshold = 1)",
        "longestAlternatingSubarray(nums = [3, 3, 3, 3], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26], threshold = 2)",
        "longestAlternatingSubarray(nums = [2,4,3,5,3,2,6,7], threshold = 4)",
        "longestAlternatingSubarray(nums = [6, 2, 8, 7, 1], threshold = 3)",
        "longestAlternatingSubarray(nums = [10,1,11,2,22,1,111,3,3,12,11], threshold = 10)",
        "longestAlternatingSubarray(nums = [4, 2, 3, 3, 2, 2, 1, 0, 2, 3, 1, 1, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [3, 4, 4, 3, 1, 3, 1, 3, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2], threshold = 2)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5])",
        "findValueOfPartition(nums = [1,2,3,4,5])",
        "findValueOfPartition(nums = [1, 10, 100])",
        "findValueOfPartition(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "findValueOfPartition(nums = [1, 1, 1, 1, 1, 1, 1, 1, 2])",
        "findValueOfPartition(nums = [5, 10, 15, 1, 2])",
        "findValueOfPartition(nums = [1,2,3,3,3,3,3,3,4])",
        "findValueOfPartition(nums = [3,2,1,0,-1,-2,-3])",
        "findValueOfPartition(nums = [3,4,7,1,2,10])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"ab\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"abba\")",
        "makeSmallestPalindrome(s = \"a\")",
        "makeSmallestPalindrome(s = \"aab\")",
        "makeSmallestPalindrome(s = \"abcba\")",
        "makeSmallestPalindrome(s = 'aabb')",
        "makeSmallestPalindrome(s = \"racecar\")",
        "makeSmallestPalindrome(s = \"cba\")"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABCDCD\")",
        "minLength(s = \"ABCDDCD\")",
        "minLength(s = \"ABCDCDCDAB\")",
        "minLength(s = \"ABABABCDCDCDCDCD\")",
        "minLength(s = \"ABCCCD\")",
        "minLength(\"ACBDCABDCD\")",
        "minLength(s = \"ABCDCDCDACDACDCABDC\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1,1,1,1,1], target = 0)",
        "maximumJumps(nums = [5, 1, 3, 4, 2], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [0, 0, 1, 1, 1, 0], target = 0)",
        "maximumJumps(nums = [10, 1, 2, 0, 10], target = 4)",
        "maximumJumps(nums = [5, 10, 100, 2, 3], target = 4)"
    ],
    "sample_11": [
        "colorTheArray(n = 4, queries = [[1, 1], [2, 1], [1, 2], [2, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [1, 2], [1, 3], [2, 1]])",
        "colorTheArray(n = 4, queries = [[1,1],[2,2],[2,3],[1,1]])",
        "colorTheArray(n = 5, queries = [[1, 2], [1, 3], [1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n=4, queries=[[1, 1], [2, 1], [3, 1], [4, 2]])",
        "colorTheArray(n = 4, queries = [[1,1], [2,2], [1,3], [2,1]])",
        "colorTheArray(n = 4, queries = [[2, 3], [1, 2], [2, 3], [2, 4]])",
        "colorTheArray(n = 3, queries = [[2, 1], [1, 2], [2, 1], [2, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 1], [1, 1], [2, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[2, 2], [1, 2], [2, 1], [1, 1], [2, 1]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank=2, additionalTank=1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 5, additionalTank = 2)",
        "distanceTraveled(mainTank=5, additionalTank=2)",
        "distanceTraveled(mainTank = 7, additionalTank = 3)",
        "distanceTraveled(mainTank=5, additionalTank=4)",
        "distanceTraveled(mainTank=0, additionalTank=3)",
        "distanceTraveled(mainTank = 100, additionalTank = 2)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 24, 36, 48])",
        "countBeautifulPairs(nums = [6, 2, 8])",
        "countBeautifulPairs(nums = [12, 24, 15, 36, 8])",
        "countBeautifulPairs(nums = [21, 4, 7, 5])",
        "countBeautifulPairs(nums = [12,20,50,150])",
        "countBeautifulPairs(nums = [3, 6, 7, 5, 6, 3, 8, 8])",
        "countBeautifulPairs(nums = [12, 23, 34, 34, 56, 56, 56, 78, 78])",
        "countBeautifulPairs(nums = [3, 5, 7, 11, 12, 13, 17, 19, 23, 31, 43])"
    ],
    "sample_56": [
        "minCost(A = [1,2,3,4], x = 2)",
        "minCost(A = [2, 3, 5, 4, 6, 7], x = 3)",
        "minCost(A = [4, 1, 2], x = 3)",
        "minCost(A = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8], x = 3)",
        "minCost(A = [4, 3, 7, 4], x = 2)",
        "minCost(A = [3, 4, 6, 2, 7], x = 2)",
        "minCost(A = [2, 4, 2, 4, 2], x = 3)",
        "minCost(A = [2, 3, 5, 3, 2, 7, 5, 4, 3, 7], x = 3)",
        "minCost(A = [2, 3, 5, 2, 5, 7, 2, 8], x = 4)",
        "minCost(A = [2,3,4,2,4,4,2,5,1,3], x = 3)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1,1,1,1,1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [1,1,1,1,1], target = 2)",
        "maximumJumps(nums = [2, 1, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [35, 40, 20, 35, 30, 25, 20, 25, 20], target = 3)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits(nums = [1, -2, -3, 4])",
        "numberOfGoodSubarraySplits(nums = [2, -1, 2, 3, 3])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [2, 0, 2])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 1, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [2, 3, 3, 0, 5, 1, 3])",
        "numberOfGoodSubarraySplits(nums = [2,3,0,7,2,1,1])",
        "numberOfGoodSubarraySplits(nums = [2,1,2,2,2,1,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2])",
        "numberOfGoodSubarraySplits(nums = [2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,4,1,2,2,1,1,1,1,3])"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 5])",
        "distinctDifferenceArray(nums = [2, 3, 5, 7, 8])",
        "distinctDifferenceArray(nums = [-5, -2, 1, 2, 4])",
        "distinctDifferenceArray(nums = [0, 1, 1, 1])",
        "distinctDifferenceArray(nums = [1,1,2,2,3,4,4,5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [3, 2, 5, 5, 1, 2, 4])",
        "distinctDifferenceArray(nums = [-1, 1, 1, 3, 3, 6])",
        "distinctDifferenceArray(nums = [-1, 1, -2, 2, -3, 3, 5, 6, 7, 8, 9])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 21, 24, 5])",
        "countBeautifulPairs(nums = [2, 4, 6, 8, 10])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 72])",
        "countBeautifulPairs(nums = [12, 18, 24, 36, 42])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56])",
        "countBeautifulPairs(nums = [12, 21, 23, 31, 36])",
        "countBeautifulPairs(nums = [3, 2, 6, 4, 3])",
        "countBeautifulPairs(nums = [22, 22, 22, 11, 11, 11])",
        "countBeautifulPairs(nums = [12, 24, 15, 28, 11, 20])",
        "countBeautifulPairs(nums = [2, 30, 55, 66, 91, 99])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abcabc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"aaabbc\")",
        "minimizedStringLength(s = \"aaabbc\")",
        "minimizedStringLength(s = \"aabcc\")",
        "minimizedStringLength(s = \"abab\")",
        "minimizedStringLength(s = \"aaabbcddeeef\")",
        "minimizedStringLength(s = \"Aabb\")",
        "minimizedStringLength(s = \"aabbaacdaa\")",
        "minimizedStringLength(s = \"adbacb\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"aabbc\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1,2,2,3,3,3,4,4,4,4])",
        "distinctDifferenceArray(nums = [1,2,2,3,3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1,1,1,2,2,3])",
        "distinctDifferenceArray(nums = [2, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [0, 2, 1, 2, 3])",
        "distinctDifferenceArray(nums = [5, 7, 7, 8, 8, 9, 9, 9, 9])",
        "distinctDifferenceArray(nums = [5, 4, 5, 4])",
        "distinctDifferenceArray(nums = [2, 1, 2, 1, 3, 1, 3, 1])",
        "distinctDifferenceArray(nums = [1, 2, 2, 2, 3, 4, 3, 1])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0,1,0,1,0])",
        "doesValidArrayExist(derived = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])",
        "doesValidArrayExist(derived = [1,1,1,1,1,0,0,0,0,0])",
        "doesValidArrayExist(derived = [0,1,0,1,1,1,0])",
        "doesValidArrayExist(derived = [1,2,3,1,3,2])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0])",
        "doesValidArrayExist(derived = [0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 3])",
        "doesValidArrayExist(derived = [0, 2, 2, 0])",
        "doesValidArrayExist(derived = [0, 2, 3])",
        "doesValidArrayExist(derived = [0, 2, 3, 0, 4, 0])",
        "doesValidArrayExist(derived = [1, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4, 5, 6, 7, 8])",
        "doesValidArrayExist(derived = [0, 1, 1, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0,0,0,1,1,1])"
    ],
    "sample_52": [
        "smallestString(s = \"kddsbncd\")",
        "smallestString(\"kddsbndcd\")",
        "smallestString(s = \"abbbcd\")",
        "smallestString(s = \"addbsbncd\")",
        "smallestString(s = \"dddkddd\")",
        "smallestString(s = \"abaddabc\")",
        "smallestString(s = \"aaaddbcm\")",
        "smallestString(s = \"akkkddsbbnnccd\")",
        "smallestString(\"ddssssssaaaaaaaab\")",
        "smallestString(s = \"dzfbdhdg\")"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaaba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"abaacaba\")",
        "minimumCost(s = \"abaacab\")",
        "minimumCost(s = \"aaabbb\")",
        "minimumCost(s = \"aabcb\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abaacd\")",
        "minimumCost(s = \"abaacaba\")",
        "minimumCost(s = \"abccba\")",
        "minimumCost(\"abaacd\")",
        "minimumCost(s = \"abaacaaadaa\")",
        "minimumCost(s = \"bcab\")",
        "minimumCost(\"mmpp\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1, 2, 1, 3, 3, 2])",
        "distinctDifferenceArray(nums = [2, 1, 2, 1, 2])",
        "distinctDifferenceArray(nums = [2, 2, 3, 3, 1])",
        "distinctDifferenceArray(nums = [-4, -2, 2, 4, 8])",
        "distinctDifferenceArray(nums = [3, 3, 3, 2, 5, 2])",
        "distinctDifferenceArray(nums = [-1, -1, 1, 1, 3, 2, 2, 4])"
    ],
    "sample_53": [
        "smallestString(s = 'abc')",
        "smallestString(s = 'zzzzzz')",
        "smallestString(s = \"bac\")",
        "smallestString(s = 'baaca')",
        "smallestString(s = \"cbaab\")",
        "smallestString(s = \"aaabc\")",
        "smallestString(s = 'czba')",
        "smallestString(s = 'abccba')",
        "smallestString(s = \"czzzzzzzzzzzzz\")",
        "smallestString(\"zxyva\")"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3], k = 2)",
        "checkArray(nums = [1,2,3,4,5,4,3,2,1], k = 3)",
        "checkArray(nums = [1,2,0,0,1], k = 3)",
        "checkArray(nums = [5, 1, 1], k = 2)",
        "checkArray(nums = [1, 10, 5, 1, 1, 5, 5, 1], k = 3)",
        "checkArray(nums = [2, 4, 0, 8, 0], k = 2)",
        "checkArray(nums = [10,20,30,40], k = 5)",
        "checkArray(nums = [2, 4, 1, 2, 7, 8, 9, 1, 3, 5], k = 3)",
        "checkArray(nums = [2, 3, 2, 1, 2, 3, 5, 2], k = 2)",
        "checkArray(nums = [0,10,0,2,0,5,0,3,4], k = 4)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1,2,3,4,5,10,11], k = 2)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,10,11,12], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 8, 9], k = 3)",
        "maximumBeauty(nums = [1, 1, 1, 1], k = 0)",
        "maximumBeauty(nums = [4, 2, 3, 1], k = 1)",
        "maximumBeauty(nums=[4,3,2,1,5,6], k=1)",
        "maximumBeauty(nums = [3, 3, 4, 5, 5, 6, 7, 7], k = 3)",
        "maximumBeauty(nums = [3,4,6,8,8,9], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(a = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(a = [1, 1, 2, 3, 3, 4])",
        "distinctDifferenceArray(a = [1, 2, 1, 4, 1])",
        "distinctDifferenceArray(a = [-1, -1, 0, 3, 5])",
        "distinctDifferenceArray(a = [-1, 1, 2, 4, 4])",
        "distinctDifferenceArray(a = [-2, 0, 1, 4, 2, 0])",
        "distinctDifferenceArray(a = [-5, -4, 0, 4, 5, 4, -4])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '5123010000')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a = '51230000001')",
        "removeTrailingZeros(a = '512301000000000')",
        "removeTrailingZeros('512301000000')",
        "removeTrailingZeros(\"512300\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"noon\")",
        "makeSmallestPalindrome(s = \"evil\")",
        "makeSmallestPalindrome(s = 'test')",
        "makeSmallestPalindrome(s = \"nevven\")",
        "makeSmallestPalindrome(s = 'teen')",
        "makeSmallestPalindrome(s = \"odd\")",
        "makeSmallestPalindrome(s = 'potato')",
        "makeSmallestPalindrome(s = \"nannie\")"
    ],
    "sample_55": [
        "smallestString(s = \"kkddsbncd\")",
        "smallestString(s = \"kddsbncde\")",
        "smallestString(s = \"kdsdncd\")",
        "smallestString(s = \"ddssbncd\")",
        "smallestString(s = \"ddssbncd\")",
        "smallestString(s = \"kddsbncda\")",
        "smallestString(s = \"kddscbc\")",
        "smallestString(s = 'kkdkdbcdn')",
        "smallestString(s = \"ddsnkndsb\")",
        "smallestString(s = 'ddnskdnskcd')"
    ],
    "sample_35": [
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = '512301000000')",
        "removeTrailingZeros('5123010')",
        "removeTrailingZeros(num = \"512301\")",
        "removeTrailingZeros(\"5123010000\")",
        "removeTrailingZeros(num = '0000051230100000000')"
    ],
    "sample_23": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"CDABA\")",
        "minLength(\"ABCD\")",
        "minLength(s = \"CDABCDAB\")",
        "minLength(s = \"CDABCDABCDABCDABCDAB\")",
        "minLength(s = \"CDABAABCDA\")",
        "minLength(\"ABCDCDCDABCD\")",
        "minLength(s = \"CDCDABABCDCDABCD\")",
        "minLength(\"ABCDACDCDCDCD\")",
        "minLength(s = \"ABCBABABABCD\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230010')",
        "removeTrailingZeros(num = \"51230001\")",
        "removeTrailingZeros(num = '5123001000')",
        "removeTrailingZeros(num = \"51230000\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 12, num2 = 6)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 3, num2 = 4)",
        "makeTheIntegerZero(num1 = 13, num2 = 3)",
        "makeTheIntegerZero(num1 = 27, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 6)",
        "makeTheIntegerZero(num1 = 18, num2 = 6)",
        "makeTheIntegerZero(num1 = 48, num2 = 10)",
        "makeTheIntegerZero(num1 = 1010, num2 = 3)",
        "makeTheIntegerZero(num1 = 360, num2 = 8)"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 3, b = 1)",
        "distanceTraveled(a = 3, b = 2)",
        "distanceTraveled(a = 4, b = 1)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a = 5, b = 2)",
        "distanceTraveled(a=1, b=1)",
        "distanceTraveled(a = 1, b = 5)",
        "distanceTraveled(a = 7, b = 2)",
        "distanceTraveled(a = 4, b = 3)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1,2,3,4], t = 4)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], t = 4)",
        "longestAlternatingSubarray(nums = [6,2,3,4], t = 4)",
        "longestAlternatingSubarray(nums = [1,1,1,2,2,2,3,3,3,4,4,4], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,2,1,2], t = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,2,3,3], t = 4)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 5, 6, 7], t = 6)",
        "longestAlternatingSubarray(nums = [2, 1, 4, 1, 3, 3], t = 4)",
        "longestAlternatingSubarray(nums = [1,5,7,100], t = 7)",
        "longestAlternatingSubarray(nums = [2,5,8,4,7,1], t = 5)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2,3,1,1,4], target = 3)",
        "maximumJumps(nums = [1, 1, 1, 1, 1, 0], target = 0)",
        "maximumJumps(nums = [1, 3, 2, 1, 0, 1], target = 4)",
        "maximumJumps(nums = [1,10,2,20,21,30,22,220], target = 5)",
        "maximumJumps(nums = [32, 23, 12, 52, 32, 13, 32, 1, 10, 23], target = 3)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230001')",
        "removeTrailingZeros(num = '512300')",
        "removeTrailingZeros(num = '512300000001')",
        "removeTrailingZeros(num = '512300000000001')",
        "removeTrailingZeros(num = '51230000000')",
        "removeTrailingZeros(\"5123010000\")"
    ],
    "sample_101": [
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [1, 1, 1, 1, 1], target = 0)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 3)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2, 3, 1, 1, 4], target = 2)",
        "maximumJumps(nums = [2,3,1,1,4], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [1, 1, 1, 1, 1, 1, 1], target = 0)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 0, 0, 1, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [2, 1, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [2, 1, 2, 1, 1, 2, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,2])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,4,5,1,2,3,4,5])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 0, 0, 1, 0, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,0,1,1,1,1,1,1,0])",
        "numberOfGoodSubarraySplits(nums = [2, 3, 1, 5, 1, 3])",
        "numberOfGoodSubarraySplits(nums = [2,2,2,1,1,1,2,2,2,2,1,1,1,2,2,2,2,1,1,1])"
    ],
    "sample_19": [
        "minLength(s = \"ABCDCDA\")",
        "minLength(s = \"ABABACCD\")",
        "minLength(s = \"ABCDCDC\")",
        "minLength(s = 'ABCD')",
        "minLength(s = \"ABABACADCD\")",
        "minLength(s = \"ABABACADCD\")",
        "minLength(s = \"ABABDCDCD\")",
        "minLength(s = \"ACDBBDACDC\")",
        "minLength(s = \"ABABCDABCDCDCDABCDABCD\")",
        "minLength(s = \"ABCDCDCDEABCDB\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'evne')",
        "makeSmallestPalindrome(s = \"tactcoal\")",
        "makeSmallestPalindrome(s = 'racecar')",
        "makeSmallestPalindrome(s = 'strange')",
        "makeSmallestPalindrome(s = 'abccba')",
        "makeSmallestPalindrome(s = \"cars\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 3, 4, 2])",
        "semiOrderedPermutation(nums = [2,3,1,4])",
        "semiOrderedPermutation(nums = [2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4, 5])",
        "semiOrderedPermutation(nums=[1, 2, 4, 3])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [2,1,2,2,2,1,2,2,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,1,4,5])",
        "numberOfGoodSubarraySplits(nums = [1,2,3,1,1,4])",
        "numberOfGoodSubarraySplits(nums = [1, 1, 1, 1, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,0,0,1,1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [2,2,3,1,1,3])",
        "numberOfGoodSubarraySplits(nums = [2, 3, 5, 4, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [4,3,2,1,2,3,4,3,2,1,0])"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,10,11], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 2)",
        "maximumBeauty(nums = [1,2,2,3,3,4,7,7,8], k = 1)",
        "maximumBeauty(nums = [1,2,2,2,3], k = 0)",
        "maximumBeauty(nums = [1, 2, 4, 7, 11], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [1,3,7,7,7,8,9,9], k = 6)",
        "maximumBeauty(nums = [2, 1, 5, 1, 2, 3, 4], k = 1)"
    ],
    "sample_117": [
        "minimumIndex(nums = [1,2,2,3,3,3,4,4,4,4])",
        "minimumIndex(nums = [7, 7, 7, 7, 7, 7, 7])",
        "minimumIndex([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0])",
        "minimumIndex([4, 4, 1, 4, 4])",
        "minimumIndex(nums = [0, 0, 1, 2, 2, 2, 2, 3, 3])",
        "minimumIndex(nums = [2, 1, 2, 2, 2, 3, 3, 5, 5, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5])",
        "minimumIndex(nums = [1,3,4,5,2,6,8,9])",
        "minimumIndex(nums = [0,1,1,1,1,2,4,4,4,5,5,5])",
        "minimumIndex([1,2,2,3,3,4,4,4,4,4,5,6,7,8,8,8,9,10])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 12, num2 = 4)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 14, num2 = 3)",
        "makeTheIntegerZero(num1 = 64, num2 = 8)",
        "makeTheIntegerZero(num1 = 13, num2 = 10)",
        "makeTheIntegerZero(num1 = 112, num2 = 10)",
        "makeTheIntegerZero(num1 = 34, num2 = 14)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 18, 24])",
        "countBeautifulPairs(nums = [12,21,34])",
        "countBeautifulPairs(nums = [4,5,7,8])",
        "countBeautifulPairs(nums = [25, 14])",
        "countBeautifulPairs(nums = [6, 2, 1, 5])",
        "countBeautifulPairs(nums = [40, 400, 4000])",
        "countBeautifulPairs(nums = [42, 56, 69])",
        "countBeautifulPairs(nums = [2,1,4,3,6,5,7,8,10,9])",
        "countBeautifulPairs(nums = [12, 910, 654, 234, 486])",
        "countBeautifulPairs(nums = [42, 17, 19, 23, 49, 99, 22, 33, 17, 24])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 2, num2 = 1)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 4, num2 = 3)",
        "makeTheIntegerZero(num1 = 30, num2 = 10)",
        "makeTheIntegerZero(num1 = 31, num2 = 5)",
        "makeTheIntegerZero(num1 = 300, num2 = 100)",
        "makeTheIntegerZero(num1 = 33, num2 = 22)",
        "makeTheIntegerZero(num1 = 255, num2 = 150)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDCBA\")",
        "minLength(s = \"CDABA\")",
        "minLength(s = \"ABABABCD\")",
        "minLength(s = \"ABCABCD\")",
        "minLength(s = \"CDCDABA\")",
        "minLength(s = \"CABCDC\")",
        "minLength(s = \"CABCDCACD\")",
        "minLength(s = \"ABCDBDAA\")",
        "minLength(s = \"ACBDCDDA\")",
        "minLength(s = \"ABABACDCDACDCD\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 10, 11], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 3)",
        "maximumBeauty(nums = [1, 2, 3, 4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,10,11], k = 1)",
        "maximumBeauty(nums = [1, 2, 4, 8, 10], k = 3)",
        "maximumBeauty(nums = [1, 3, 5, 10, 2], k = 2)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [2, 5, 3, 7])",
        "countBeautifulPairs(nums = [12, 91])",
        "countBeautifulPairs(nums = [2,4,7,8])",
        "countBeautifulPairs(nums = [2,3,3,4,5])",
        "countBeautifulPairs(nums = [12, 24, 15, 20, 21])",
        "countBeautifulPairs(nums = [12, 28, 49, 57, 99])",
        "countBeautifulPairs(nums = [3,5,2,2,4,1])",
        "countBeautifulPairs(nums = [36, 54, 12, 23, 45])",
        "countBeautifulPairs(nums = [2, 4, 6, 8, 10, 15, 16, 18, 20, 22])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 30, num2 = 5)",
        "makeTheIntegerZero(num1 = 24, num2 = 3)",
        "makeTheIntegerZero(num1 = 19, num2 = 3)",
        "makeTheIntegerZero(num1 = 31, num2 = 13)",
        "makeTheIntegerZero(num1 = 1, num2 = 4)",
        "makeTheIntegerZero(num1 = 71, num2 = 3)",
        "makeTheIntegerZero(num1 = 144, num2 = 3)",
        "makeTheIntegerZero(num1 = 40, num2 = 30)",
        "makeTheIntegerZero(num1 = 288, num2 = 10)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"niven\")",
        "makeSmallestPalindrome(s = \"niven\")",
        "makeSmallestPalindrome(s = \"test\")",
        "makeSmallestPalindrome(s = \"ev\")",
        "makeSmallestPalindrome(s = \"peven\")",
        "makeSmallestPalindrome(s = \"leetcode\")",
        "makeSmallestPalindrome(s = 'nine')",
        "makeSmallestPalindrome(s = \"pine\")",
        "makeSmallestPalindrome(s = \"op\")"
    ],
    "sample_37": [
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(\"abaab\")",
        "minimumCost(s = \"leetcode\")",
        "minimumCost(s = \"abacbc\")",
        "minimumCost(s = \"ababababab\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"aaabbbc\")",
        "minimumCost(s = \"nyny\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [2,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1])",
        "numberOfGoodSubarraySplits(nums = [2,1,2,1])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [1,2,3])",
        "numberOfGoodSubarraySplits(nums = [1,1,1,1,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [1,2,1,2,1,2,1,2,1,2])",
        "numberOfGoodSubarraySplits(nums=[0,0,0,0,0,1,1,1])",
        "numberOfGoodSubarraySplits(nums = [2,0,0,0,2,2,1,2,0])",
        "numberOfGoodSubarraySplits([94,29,77,68,26,19,86,79,71,4,10,24,41,3,69,66,56,45,9,52,88,95,44,21,67,48,33,36,91,98,72,70,98,9,46,83,45,78,39,83,20,17,27,92,73,30,19,80,72,62,10,8,4,1,67,58,22,84,54,52,28,95,21,63,88,37,2,70,43,42,58,87,68,79,96,61,84,68,8,49,30,21,87,56,66,35,51,68,1,12,7,77,70,65,95,98,51,67,56,95,81,51,64,94,97,19,60,63,75,43,96,62,42,43,62,52,44,26,28,76,36,27,76,44,14,22,75,93,88,19,27,93,16,31,47,51,75,61,30,72,10,89,92,18,81,85,94,16,6,92,84,30,22,69,76,51,55,97,12,75,12,9,80,7,54,81,10,64,78,87,40,83,12,64,11,46,40,74,42,86,43,40,67,73,84,49,56,71,82,5,"
    ],
    "sample_105": [
        "checkArray(nums = [10, 5, 2, 7, 1, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 0], k = 3)",
        "checkArray(nums = [2, 2, 2, 2, 2], k = 2)",
        "checkArray(nums = [0, 0], k = 1)",
        "checkArray(nums = [2, 1, 1, 1], k = 1)",
        "checkArray(nums = [1, 0, 1, 0, 1, 1, 0], k = 3)",
        "checkArray(nums = [1, 0, 1, 1], k = 1)",
        "checkArray(nums = [2, 4, 4, 3, 1, 1, 1], k = 3)",
        "checkArray(nums = [6, 3, 8, 7, 6, 5, 12], k = 3)",
        "checkArray(nums = [25, 4, 12, 26, 4, 12], k = 2)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4])",
        "semiOrderedPermutation(nums = [1, 5, 3, 2])",
        "semiOrderedPermutation(nums = [1,2,3,4,5,6,7,8,9])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4, 6, 5])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 0, 5, 6], k = 3)",
        "checkArray(nums = [2, 2, 2, 2], k = 2)",
        "checkArray(nums = [1, 1, 1, 2, 2, 2], k = 2)",
        "checkArray(nums = [1, -2, 0, 5, -2, 1], k = 3)",
        "checkArray(nums = [1,2,3,2,1,2,1], k = 3)",
        "checkArray(nums = [1,2,3,4,5,6,1,2,3,4,5,6], k = 6)",
        "checkArray(nums = [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], k = 3)",
        "checkArray(nums = [2, 4, 1, 1, 1, 1, 0, 0, 0], k = 4)",
        "checkArray(nums = [0, 1, 3, 4, 2, 2, 1, 4, 3], k = 7)"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abccaba\")",
        "minimumCost(s = \"abcb\")",
        "minimumCost(\"abcd\")",
        "minimumCost(s = \"abcbca\")",
        "minimumCost(\"bcba\")",
        "minimumCost(s = \"ccbccbbcbabaa\")",
        "minimumCost(s = \"000111000111\")",
        "minimumCost(s = \"pppzpppppppppppzp\")"
    ],
    "sample_65": [
        "findValueOfPartition(a = [1, 3, 5, 7, 9])",
        "findValueOfPartition(a = [5, 1, 2, 3, 4])",
        "findValueOfPartition(a = [1, 1, 1, 1])",
        "findValueOfPartition(a = [1, 1, 1, 4])",
        "findValueOfPartition(a = [1, 1, 2, 2, 3])",
        "findValueOfPartition(a = [1,1,1,1,1,1,1,1,1])",
        "findValueOfPartition(a = [10, 5, 4, 2, 1])",
        "findValueOfPartition(a = [5, 1, 6, 7, 2])",
        "findValueOfPartition([1, 4, 7, 9, 13])",
        "findValueOfPartition(a = [7, 3, 5, 8, 9, 2, 4, 6, 10, 1, 2, 5])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 2)",
        "distanceTraveled(mainTank = 5, additionalTank = 5)",
        "distanceTraveled(mainTank = 2, additionalTank = 3)",
        "distanceTraveled(mainTank = 10, additionalTank = 4)",
        "distanceTraveled(mainTank = 0, additionalTank = 0)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 2, 3, 3])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 2, 3, 4])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 0, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0,1,1,3])",
        "doesValidArrayExist(derived = [0,1,0,1,1,0,1,1])",
        "doesValidArrayExist(derived = [0, 1, 1, 2, 3, 0, 4, 5, 2])",
        "doesValidArrayExist(derived = [0, 0, 1, 0, 1, 0, 0, 1, 1])"
    ],
    "sample_106": [
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "checkArray(nums = [1, 2, 2, 3], k = 3)",
        "checkArray(nums = [1, 2, 1, 3], k = 3)",
        "checkArray(nums = [1, 1, 2, 3, 2], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 4)",
        "checkArray(nums = [1, 2, 3, 3, 2, 1, 1], k = 2)",
        "checkArray(nums = [10,1,2,3,4,5,2,1], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 1, 1, 3, 3, 1, 3, 2, 1], k = 4)",
        "checkArray(nums = [1,2,3,4,0,0,1,2,3,4], k = 6)",
        "checkArray(nums = [1, 11, 10, 3, 9, 4, 9, 10, 2, 11, 10], k = 4)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,1,2,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4], threshold = 1)",
        "longestAlternatingSubarray(nums = [1, 1, 2, 2, 2], threshold = 2)",
        "longestAlternatingSubarray(nums = [1,1,2,2,2], threshold = 1)",
        "longestAlternatingSubarray(nums = [3, 4, 5, 2, 1], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 4, 5, 5, 2, 3], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,4,2,6,4,4,4,6,2], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,4,5,1], threshold = 1)"
    ],
    "sample_70": [
        "countBeautifulPairs(nums = [12, 24, 26, 20])",
        "countBeautifulPairs(nums = [12, 72])",
        "countBeautifulPairs(nums = [12, 18, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 99, 33])",
        "countBeautifulPairs(nums = [12, 20, 11, 12])",
        "countBeautifulPairs(nums = [1, 3, 5, 7, 9, 10, 2])",
        "countBeautifulPairs(nums = [2, 1, 2, 2, 1, 2, 1])",
        "countBeautifulPairs(nums = [20, 12, 11, 30])",
        "countBeautifulPairs(nums = [12, 20, 7, 8, 1])",
        "countBeautifulPairs(nums = [12, 33, 48, 19, 24])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], t = 4)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10], t = 5)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10], t = 100)",
        "longestAlternatingSubarray(nums = [1,4,2,4], t = 4)",
        "longestAlternatingSubarray(nums = [2,4,6,1,8,9,10], t = 4)",
        "longestAlternatingSubarray(nums = [1,3,2,5,1,4], t = 2)",
        "longestAlternatingSubarray(nums = [1,2,3,4,3,1,5,4], t = 4)",
        "longestAlternatingSubarray(nums = [2, 6, 5, 3, 4, 7, 4, 5, 1, 5], t = 3)",
        "longestAlternatingSubarray(nums = [5, 1, 0, 0, 1, 2, 5, 1, 2], t = 1)",
        "longestAlternatingSubarray(nums = [6,3,5,7,9,8,12,11,20,15,10,18,15,5,4,5,18,16], t = 8)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"abaac\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"abccad\")",
        "minimumCost(s = \"bbab\")",
        "minimumCost(s = \"abaababa\")",
        "minimumCost(s = \"zzzz\")",
        "minimumCost(\"aaabbbb\")"
    ],
    "sample_21": [
        "minLength(s = \"ABABCDCD\")",
        "minLength(s = \"ABCCDDBA\")",
        "minLength(s = \"ADCB\")",
        "minLength(s = \"ABCDABCDCD\")",
        "minLength(\"CDABA\")",
        "minLength(s = \"ABCDCDDCD\")",
        "minLength(\"ABCDABCDABCDABCD\")",
        "minLength(\"AABCDDCD\")",
        "minLength(s = \"ABCCDAAAABCD\")",
        "minLength(s = \"CABCDDCDABAB\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0,0,1,1,0,1,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0, 2, 0, 0, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [2, 0, 1, 0, 2, 0, 0, 2])",
        "numberOfGoodSubarraySplits(nums = [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [2, 0, 2, 1, 0, 2, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [3, 2, 2, 4, 2, 1])",
        "numberOfGoodSubarraySplits(nums = [3, 1, 1, 0, 1, 0, 0, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1])",
        "numberOfGoodSubarraySplits(nums = [2, 3, 2, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1])"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 1, queries = [[0, 0]])",
        "colorTheArray(n = 2, queries = [[1, 2], [1, 1]])",
        "colorTheArray(n = 3, queries = [[1, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [1, 1]])",
        "colorTheArray(n = 2, queries = [[1, 100], [1, 100], [1, 100]])",
        "colorTheArray(n = 3, queries = [[0, 2], [1, 1], [1, 2]])",
        "colorTheArray(3, [[1, 1], [2, 2], [1, 2]])",
        "colorTheArray(n = 4, queries = [[0, 2], [2, 2], [1, 2]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1,3,5,7], nums2 = [2,4,6,8])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2], nums2 = [2, 1, 3])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 5, 6, 7], nums2 = [8, 9, 10, 11, 12, 13])",
        "maxNonDecreasingLength(nums1 = [1, 3, 4, 5], nums2 = [3, 5, 6, 7])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 12], nums2 = [2, 7, 11, 15])",
        "maxNonDecreasingLength(nums1 = [1, 3, 2, 3, 2, 1], nums2 = [2, 1, 3, 2, 3, 1])",
        "maxNonDecreasingLength(nums1 = [3, 5, 6, 4, 2], nums2 = [1, 3, 5, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 2, 2, 1, 2, 1, 0], nums2 = [3, 4, 5, 6, 7, 8, 9])",
        "maxNonDecreasingLength(nums1 = [11, 11, 20, 25, 26, 27, 30], nums2 = [1, 11, 20, 24, 26, 27, 31])",
        "maxNonDecreasingLength(nums1 = [4, 8, 1, 5, 1, 23, 1, 12], nums2 = [1, 8, 2, 5, 1, 3, 10, 1])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1,2,3,4,5], k = 1)",
        "maximumBeauty(nums = [2, 4, 6, 3], k = 1)",
        "maximumBeauty(nums = [2, 4, 6, 8, 10], k = 5)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8], k = 3)",
        "maximumBeauty(nums = [2,2,2,2,2], k = 2)",
        "maximumBeauty(nums = [4, 3, 2, 1], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 10], k = 3)",
        "maximumBeauty(nums = [2,2,2,2,2,2,2,2,2], k = 4)",
        "maximumBeauty(nums = [1, 2, 2, 3, 3, 3, 4, 7, 9, 9, 11], k = 3)",
        "maximumBeauty(nums = [10, 12, 15, 10, 14, 15], k = 3)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 3, 10, 11, 12])",
        "findValueOfPartition(nums = [3,5,1])",
        "findValueOfPartition(nums = [3, 5, 7, 10, 15])",
        "findValueOfPartition(nums = [1,3,4,8,9])",
        "findValueOfPartition(nums = [1,2,3,3,4,5,6,7,8,9])",
        "findValueOfPartition(nums = [2,10,4,5])",
        "findValueOfPartition(nums = [3,1,5,1])",
        "findValueOfPartition(nums = [10, 4, 1, 9, 6, 3])",
        "findValueOfPartition(nums = [10, 12, 33, 45, 60])",
        "findValueOfPartition(nums = [3,4,12,5,2,5,13,14,8,4])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [1,2,3,4])",
        "findValueOfPartition(nums = [2,4,6,8,10])",
        "findValueOfPartition(nums = [2, 4, 6, 8, 10])",
        "findValueOfPartition(nums = [1, 5, 3, 10, 7])",
        "findValueOfPartition(nums = [3,5,1,1])",
        "findValueOfPartition(nums = [2,3,4,5,8,10])",
        "findValueOfPartition(nums = [1,4,9,10,20])",
        "findValueOfPartition(nums = [1,5,3,10,15,14,15])",
        "findValueOfPartition(nums = [2, 3, 4, 8, 11, 13, 17, 20, 22, 37])",
        "findValueOfPartition(nums = [0,1,4,10,13,19,29,42])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation(nums = [1,2,3,4,5])",
        "semiOrderedPermutation(nums = [3, 2, 1, 4])",
        "semiOrderedPermutation(nums = [1, 3, 2])",
        "semiOrderedPermutation(nums = [2,3,1,4,5])",
        "semiOrderedPermutation(nums = [1, 1, 2, 3, 4])",
        "semiOrderedPermutation([4, 2, 1, 3])",
        "semiOrderedPermutation(nums = [1, 1, 1, 1, 1, 1])",
        "semiOrderedPermutation([1, 4, 5, 2, 3, 6])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [1, 3, 2, 4])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5, 6, 7])",
        "semiOrderedPermutation(nums = [3, 4, 1, 2])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 3, 4, 5, 1])",
        "semiOrderedPermutation(nums = [2, 5, 1, 4, 3])",
        "semiOrderedPermutation(nums = [1, 1, 3, 2, 4, 2])",
        "semiOrderedPermutation(nums = [1, 2, 3, 4, 5])",
        "semiOrderedPermutation([1, 2, 3, 4, 5, 6])"
    ]
}