{
    "sample_407": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1, 2, 3, 4])",
        "minimumRightShifts(nums = [1,2,3,4])",
        "minimumRightShifts(nums = [2, 3, 1])",
        "minimumRightShifts(nums = [3,4,5,1,2])"
    ],
    "sample_453": [
        "minChanges(s = \"0110\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"01101\")",
        "minChanges(s = \"aabbb\")",
        "minChanges(s = \"01001\")",
        "minChanges(s = \"01001\")",
        "minChanges(s = \"111001\")",
        "minChanges(s = \"ab\")",
        "minChanges(s = \"YNXXNY\")",
        "minChanges(\"abba\")"
    ],
    "sample_454": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 5, -7, 8, 5], target = 12)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7, 13, 17], target = 10)",
        "lengthOfLongestSubsequence(nums = [5, 2, 3], target = 8)",
        "lengthOfLongestSubsequence(nums = [3, 5, 10, 20, 25, 30], target = 20)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7, 11], target = 13)",
        "lengthOfLongestSubsequence(nums = [2,3,5,7,8,3,2], target = 10)",
        "lengthOfLongestSubsequence(nums = [3,4,5,7,8,10,2,6,9], target = 21)"
    ],
    "sample_367": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"MyPh\")",
        "sortVowels(s = \"Lymph\")",
        "sortVowels(s = \"mYphV\")",
        "sortVowels(s=\"lYmpH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s = \"HYpL\")"
    ],
    "sample_456": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [2,3,5,10], target = 15)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5], target = 7)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 1], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [5, 2, 1, 4, 3, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [5,10,15,20], target = 15)"
    ],
    "sample_381": [
        "countPairs(nums = [1,2,3,4,5], t = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], t = 7)",
        "countPairs(nums = [1,2,3,4,5], t = 6)",
        "countPairs(nums = [1,2,3,4,5,6], t = 7)",
        "countPairs(nums = [1, 5, 3, 2, 4], t = 8)",
        "countPairs(nums = [1,2,3,4,5,6,7,8,9], t = 10)",
        "countPairs(nums = [1,5,3,2,4], t = 6)",
        "countPairs(nums = [2,4,6,8], t = 10)",
        "countPairs(nums=[1, 3, 5, 2, 4, 6], t=8)",
        "countPairs(nums=[1, 3, 5, 2, 4, 6], t=8)"
    ],
    "sample_366": [
        "isGood(nums = [1, 2, 3, 4, 5])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [2, 1, 0])",
        "isGood(nums = [0, 2, 3, 4, 5])",
        "isGood(nums = [2, 1, 0, 3])",
        "isGood(nums = [0, 1, 2, 3, 4])",
        "isGood(nums = [1, 2, 0, 3])",
        "isGood(nums = [2, 3, 4, 1])",
        "isGood(nums = [0, 3, 4, 2, 5])"
    ],
    "sample_369": [
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"MyPh\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s='YmplH')",
        "sortVowels(s = \"mPhL\")",
        "sortVowels(s = \"HlmP\")",
        "sortVowels(s = \"Morph\")"
    ],
    "sample_404": [
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 5, 1, 2])",
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts([3, 4, 5, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [3, 4, 1, 2])",
        "minimumRightShifts(nums = [5, 1, 2, 3, 4])",
        "minimumRightShifts(nums = [4, 3, 1, 2])",
        "minimumRightShifts(nums = [3,9,3])"
    ],
    "sample_448": [
        "minChanges(s = \"0110\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"ba\")",
        "minChanges(s = \"0101\")",
        "minChanges(s = \"00110\")",
        "minChanges(s = \"010101\")",
        "minChanges(s = \"ababab\")",
        "minChanges(s = \"aaaabbb\")"
    ],
    "sample_392": [
        "canBeEqual(s1 = \"abcd\", s2 = \"adcb\")",
        "canBeEqual(s1 = \"1324\", s2 = \"1325\")",
        "canBeEqual(s1 = \"1345\", s2 = \"2453\")",
        "canBeEqual(s1 = \"1345\", s2 = \"4512\")",
        "canBeEqual(s1 = \"14px\", s2 = \"14zy\")",
        "canBeEqual(s1 = \"2p3q\", s2 = \"2q3p\")",
        "canBeEqual(s1 = \"54321\", s2 = \"54321\")",
        "canBeEqual(s1 = \"3541\", s2 = \"5314\")",
        "canBeEqual(s1 = \"3521\", s2 = \"5421\")",
        "canBeEqual(s1 = \"3b4c\", s2 = \"1a2c\")"
    ],
    "sample_409": [
        "minLengthAfterRemovals(nums = [1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9])",
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1,2,2,1,3,4,4])",
        "minLengthAfterRemovals(nums = [0,1,2,1,0,1,1,0,0,0])"
    ],
    "sample_361": [
        "isGood(a = [1, 2, 3, 4, 5])",
        "isGood(a = [1, 2, 3, 4, 5, 2])",
        "isGood(a = [1, 2, 3, 2, 4])",
        "isGood([1, 2, 1, 4])",
        "isGood([1, 2, 2, 3, 4, 1])",
        "isGood(a = [2, 3, 1, 4, 4])",
        "isGood([3, 1, 2, 2, 1, 3])",
        "isGood([1, 1, 3, 3, 3])",
        "isGood([3,1,2,4,5,6])",
        "isGood([2,1,3,4,4,5,6,7,7,8])"
    ],
    "sample_419": [
        "minOperations(nums = [1,2,3,4,5], k = 3)",
        "minOperations(nums = [1,2,3,4], k = 3)",
        "minOperations(nums = [1, 2, 3, 5], k = 3)",
        "minOperations(nums = [4, 2, 3, 5, 1], k = 3)",
        "minOperations(nums = [1, 2, 1, 2], k = 2)",
        "minOperations(nums = [1, 2, 3, 5], k = 4)",
        "minOperations(nums = [2,4,5,1], k = 2)",
        "minOperations(nums = [2, 3, 1, 2, 3, 1], k = 2)",
        "minOperations(nums = [2,3,3,4,4,5,6], k = 3)",
        "minOperations(nums = [2, 2, 2, 1, 1, 1, 1, 1, 1, 3], k = 2)"
    ],
    "sample_478": [
        "findMaximumLength(nums = [1, 2, 3])",
        "findMaximumLength(nums = [1,2,3])",
        "findMaximumLength(nums = [1, 2, 3, 1])",
        "findMaximumLength(nums = [1,2,3,1])",
        "findMaximumLength(nums = [1,2,3,1])",
        "findMaximumLength(nums = [1,2,3,4,5,6])",
        "findMaximumLength([1,2,3,2,1])",
        "findMaximumLength(nums = [0,1,0,1,0,1,0,1,0])",
        "findMaximumLength(nums = [1, 5, 2, 3, 7])",
        "findMaximumLength([1,1,2,2,3,3,3,4,4,4,4])"
    ],
    "sample_433": [
        "maxSubarrays(nums = [2, 3, 1, 4])",
        "maxSubarrays([1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [3,3,3,3])",
        "maxSubarrays(nums = [1,2,3,5,6])",
        "maxSubarrays(nums = [1, 3, 6, 2, 4, 5])",
        "maxSubarrays([2, 3, 2, 3])",
        "maxSubarrays(nums = [4, 1, 3, 2, 4, 3])",
        "maxSubarrays([12, 1, 12, 3, 10, 1, 10, 1, 12, 3, 10])",
        "maxSubarrays(nums = [2, 3, 4, 1, 1, 1, 3, 4])",
        "maxSubarrays([5, 6, 7, 5, 7, 7])"
    ],
    "sample_389": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azced\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azced\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"azced\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"ad\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adc\")",
        "canMakeSubsequence(str1 = \"az\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"abc\", str2 = \"adg\")"
    ],
    "sample_402": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 3, k = 5)",
        "maxSum(nums = [1, 2, 3, 1, 2, 3], m = 2, k = 3)",
        "maxSum(nums = [1,1,1,7,8,9], m = 1, k = 3)",
        "maxSum(nums = [1, 2, 3, 2, 3, 4, 2], m = 3, k = 3)",
        "maxSum(nums = [1, 1, 1, 7, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7], m=4, k=3)",
        "maxSum(nums=[1, 2, 1, 2, 1], m=3, k=2)",
        "maxSum(nums=[2,1,1,1,1,1,1,1,1,1,1,1], m=2, k=5)",
        "maxSum(nums = [3,2,2,5,1,4,4,4], m = 2, k = 5)"
    ],
    "sample_470": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"foo\", \"bar\"], x = \"or\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"grape\"], x = \"or\")",
        "findWordsContaining(words = [\"apple\", \"berry\", \"cherry\"], x = \"cher\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"cherry\"], x=\"a\")",
        "findWordsContaining(words = [\"aaa\", \"bbb\", \"ccc\"], x = \"bb\")",
        "findWordsContaining(words = [\"apple\", \"berry\", \"cherry\"], x = \"c\")",
        "findWordsContaining(words = [\"apple\", \"pear\", \"grape\"], x = \"p\")",
        "findWordsContaining(words=['apple', 'banana', 'cherry'], x='a')"
    ],
    "sample_435": [
        "lastVisitedIntegers(words = ['prev', '2', 'prev', 'prev', '1'])",
        "lastVisitedIntegers(words = ['prev', '2', 'prev', 'prev', '1'])",
        "lastVisitedIntegers(words = ['prev', '1', 'prev', 'prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', '2', 'prev', '1', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'prev', '2', 'prev', '1'])",
        "lastVisitedIntegers(words = ['prev', '5', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', '4', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\",\"1\",\"prev\",\"prev\",\"2\",\"prev\",\"prev\",\"prev\"])"
    ],
    "sample_422": [
        "minOperations(nums = [5,2,3,1,4], k = 2)",
        "minOperations(nums = [1, 2, 3, 4], k = 3)",
        "minOperations(nums = [3,2,4,1,5], k = 2)",
        "minOperations(nums = [3,2,1,2,3], k = 4)",
        "minOperations(nums=[3, 2, 1, 4, 5], k=3)",
        "minOperations(nums = [3, 2, 1, 5, 4, 6], k = 3)",
        "minOperations(nums = [5, 5, 4, 3, 2, 1], k = 2)",
        "minOperations(nums = [2, 3, 4, 1, 2, 3], k = 3)",
        "minOperations(nums = [2, 2, 1, 1, 1], k = 2)",
        "minOperations(nums = [1, 1, 2, 1], k = 3)"
    ],
    "sample_418": [
        "minOperations(nums = [1, 2, 3, 5, 6, 7], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7], k = 4)",
        "minOperations(nums=[1, 2, 3, 4, 5, 6, 7], k=3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "minOperations(nums = [1,2,3,5,6,7], k = 4)",
        "minOperations(nums = [1, 3, 5, 2, 4], k = 2)",
        "minOperations(nums=[3, 2, 1, 5, 4], k=2)",
        "minOperations(nums = [2, 1, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "minOperations(nums = [2,3,1,4,1,3,2,1,4], k = 3)",
        "minOperations(nums = [2, 1, 3, 5, 4, 6, 7, 8, 9], k = 1)"
    ],
    "sample_375": [
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds([1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds(nums = [2,1,4,3,5])",
        "minimumSeconds(nums = [2, 3, 2, 1, 4, 2])",
        "minimumSeconds(nums = [0,1,0,3,2,1,0,2,1,0])",
        "minimumSeconds([1, 1, 2, 3, 4, 2, 2, 1, 1])",
        "minimumSeconds(nums = [1, 2, 2, 4, 3, 3, 1, 0, 0, 4])",
        "minimumSeconds([0,2,3,3,3,0,2,1])",
        "minimumSeconds(nums = [0,1,1,3,2,2,7,4,4,5,6])",
        "minimumSeconds(nums = [5,6,7,1,3,3,3,3])"
    ],
    "sample_383": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 8)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 10)",
        "countPairs(nums = [1, 2, 3, 4], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 8)",
        "countPairs(nums = [1, 1, 2, 2], target = 3)",
        "countPairs(nums = [2, 4, 6, 1], target = 8)",
        "countPairs(nums=[2, 4, 3, 1, 2, 3], target=5)"
    ],
    "sample_469": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"berry\", \"cherry\"], x = \"erry\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"a\")",
        "findWordsContaining(words=[\"apple\", \"banana\", \"cherry\"], x=\"a\")",
        "findWordsContaining(words = [\"apple\", \"berry\", \"cherry\"], x = \"erry\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"b\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"berry\"], x = \"or\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cat\"], x = \"a\")",
        "findWordsContaining(words=[\"apple\", \"cherry\", \"banana\"], x=\"a\")"
    ],
    "sample_372": [
        "sortVowels(s = \"lEOtced\")",
        "sortVowels(s = \"lEOcTeD\")",
        "sortVowels(s = \"eLoCated\")",
        "sortVowels('lEOtcede')",
        "sortVowels(s = \"example\")",
        "sortVowels(s = 'lEOtced')",
        "sortVowels(s = \"lEOcVdes\")",
        "sortVowels(s = 'OeElcted')",
        "sortVowels(s = \"eLCoated\")",
        "sortVowels('EcOmpTed')"
    ],
    "sample_413": [
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4,5,5])",
        "minLengthAfterRemovals(nums = [1,2,3,4,5,5,5])",
        "minLengthAfterRemovals(nums = [1,2,2,1,1])",
        "minLengthAfterRemovals(nums = [2, 2, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3,4,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,3,3,3,4,4,4,4,4])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 2, 2, 3, 1, 2, 1, 1, 1, 1])"
    ],
    "sample_452": [
        "minChanges(s = \"0110\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"011010\")",
        "minChanges(s = \"011001\")",
        "minChanges(s = \"111000\")",
        "minChanges(s = \"abcba\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"yxxyy\")"
    ],
    "sample_385": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums=[1,2,3,4,5], target=6)",
        "countPairs(nums=[1,2,3,4,5], target=6)",
        "countPairs(nums = [2, 3, 4, 1], target = 5)",
        "countPairs(nums = [2,3,4,5,6], target = 10)"
    ],
    "sample_427": [
        "minOperations([2, 2, 3, 3, 2, 4, 4, 4])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations([2,2,2,3,3,3])",
        "minOperations([2,2,2,3,3,3])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minOperations([2, 2, 3, 3, 3])",
        "minOperations(nums = [1,1,1,2,2,2,3,3])",
        "minOperations(nums = [1,1,1,1,2,2,2,2,2])",
        "minOperations(nums = [1,3,2,3,1,2,2,1,1,3,3,2,2])"
    ],
    "sample_410": [
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 3, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 1, 2, 2, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1,1,2,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [0,1,2,3,4,5])",
        "minLengthAfterRemovals(nums = [3,3,3,2,2,2])",
        "minLengthAfterRemovals(nums = [1,1,2,2,3,3,4,4,4,4,5,5,5,5,6,6,6,7,7,8,8,9,9,10])"
    ],
    "sample_472": [
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 2])",
        "minimumCoins(prices = [1, 1])",
        "minimumCoins(prices = [1, 1])",
        "minimumCoins([1, 2])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1,1,1,1,2,2,2,2])"
    ],
    "sample_466": [
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"ban\")",
        "findWordsContaining(words=[\"apple\", \"orange\", \"banana\"], x=\"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"pineapple\"], x = \"ap\")",
        "findWordsContaining(words = ['apple', 'pineapple', 'orange'], x = 'apple')",
        "findWordsContaining(words = [\"apple\", \"berry\", \"cherry\"], x = \"cher\")",
        "findWordsContaining(words= [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"bear\", \"tree\", \"car\"], x = \"e\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"cherry\", \"apricot\"], x = \"apple\")"
    ],
    "sample_420": [
        "minOperations(nums = [5, 4, 3, 2, 1], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 5)",
        "minOperations(nums = [5, 4, 1, 2, 3], k = 3)",
        "minOperations(nums = [2, 3, 3, 4, 5], k = 3)",
        "minOperations(nums = [5, 5, 2, 3, 1], k = 2)",
        "minOperations(nums = [1,2,2,2,2], k = 2)",
        "minOperations(nums = [10, 20, 30, 50, 50, 10], k = 3)",
        "minOperations(nums = [5, 4, 5, 4, 5, 4, 5, 2, 1], k = 3)",
        "minOperations(nums = [10, 5, 7, 10, 10, 10, 3], k = 4)",
        "minOperations(nums = [5,2,1,6,1,2,4,5,3,1,1,1,1], k = 4)"
    ],
    "sample_362": [
        "isGood(nums = [1, 2, 3, 4, 6, 5])",
        "isGood([1,2,3,5,4])",
        "isGood(nums = [1,2,3,4,5,0])",
        "isGood(nums = [1,2,4,3])",
        "isGood(nums = [1,2,3,4,6,5,7])",
        "isGood([1, 2, 3, 4, 6, 7])",
        "isGood(nums = [1,2,3,4,5,7,6])",
        "isGood(nums = [3, 2, 1, 5, 4, 6])",
        "isGood(nums = [2, 3, 4, 1, 6, 5, 7])",
        "isGood([4, 2, 1, 5, 3])"
    ],
    "sample_455": [
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 5)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4], target = 4)",
        "lengthOfLongestSubsequence(nums = [4, 2, 3, 1, 5], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 6, 7, 9], target = 12)",
        "lengthOfLongestSubsequence(nums = [2,3,5,1,3], target = 7)",
        "lengthOfLongestSubsequence(nums = [3, 4, 2, 7, 6, 1], target = 10)",
        "lengthOfLongestSubsequence(nums = [3, 10, 2, 11, 2, 10, 4], target = 15)"
    ],
    "sample_365": [
        "isGood(nums = [1,2,2,4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums = [1,2,2,3])",
        "isGood([1, 2, 2, 4])",
        "isGood(nums = [3,3,2,1])",
        "isGood(nums = [1, 1, 2, 3, 4, 5])",
        "isGood(nums = [3, 2, 1, 4, 5])",
        "isGood(nums = [1, 3, 2, 1])",
        "isGood([2, 3, 1, 5, 4])"
    ],
    "sample_434": [
        "maxSubarrays(nums = [2, 4, 8])",
        "maxSubarrays([1, 2, 1, 2, 1, 2])",
        "maxSubarrays(nums = [1,2,3,0,4,5,0])",
        "maxSubarrays(nums = [2, 4, 6, 1, 3])",
        "maxSubarrays([10, 10, 10, 10, 10])",
        "maxSubarrays([5, 4, 3, 2, 1, 0])",
        "maxSubarrays(nums = [3,2,4,5,6,7,8])",
        "maxSubarrays(nums = [10, 2, 3, 6, 8, 20])",
        "maxSubarrays(nums = [7, 1, 6, 2, 3, 5, 4])",
        "maxSubarrays(nums = [5, 7, 1, 2, 4, 5, 6, 1, 2, 3])"
    ],
    "sample_459": [
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,5,7], target = 18)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5], target = 10)",
        "lengthOfLongestSubsequence(nums = [1,2,5,10], target = 14)",
        "lengthOfLongestSubsequence(nums = [2,3,5,7], target = 10)",
        "lengthOfLongestSubsequence(nums = [2,3,5,7], target = 23)",
        "lengthOfLongestSubsequence(nums = [1,1,1,1,2,2,2,2], target = 5)",
        "lengthOfLongestSubsequence(nums=[2,3,5,7,9,11], target=15)",
        "lengthOfLongestSubsequence(nums=[1,2,3,7], target=9)",
        "lengthOfLongestSubsequence(nums = [5,3,1,10,4,7,7,2,8,10], target = 15)"
    ],
    "sample_450": [
        "minChanges(s = \"011010\")",
        "minChanges(s = \"baaab\")",
        "minChanges(s = \"101010\")",
        "minChanges(s = \"abcda\")",
        "minChanges(s = \"bbaaa\")",
        "minChanges(s = \"110110\")",
        "minChanges(s = \"000111\")",
        "minChanges(\"abbccd\")",
        "minChanges(\"11100\")",
        "minChanges(s = \"0100100101\")"
    ],
    "sample_463": [
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 7, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 6, limit = 2)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 8, limit = 3)",
        "distributeCandies(n=9, limit=3)"
    ],
    "sample_443": [
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1,2,3])",
        "sumCounts([1, 1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 2])",
        "sumCounts([1, 1, 2])",
        "sumCounts([1, 1, 2, 2, 3])",
        "sumCounts(nums = [1, 1, 2, 3])",
        "sumCounts([1,2,1,3,3])"
    ],
    "sample_449": [
        "minChanges(s = \"abab\")",
        "minChanges(s = \"0110\")",
        "minChanges(s = \"1100\")",
        "minChanges(s = \"1010\")",
        "minChanges(s = \"aabb\")",
        "minChanges(s = \"011001\")",
        "minChanges(s = \"aaabbb\")",
        "minChanges(\"abab\")",
        "minChanges(s = \"121212\")",
        "minChanges(s = \"bbb\")"
    ],
    "sample_425": [
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations([1, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1,2,3,4,5,6])",
        "minOperations([1,2,2,3,3,3])",
        "minOperations(nums = [2,1,2,2,2])",
        "minOperations(nums=[2, 2, 3, 3, 3])",
        "minOperations([2,2,2,2,3,3])",
        "minOperations([3,1,3,2,4,3,4,1,2,3,4])",
        "minOperations([1,1,2,2,2,2,3,3,3,4])"
    ],
    "sample_386": [
        "canMakeSubsequence(str1 = \"abc\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
        "canMakeSubsequence(str1 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"xyz\", str2 = \"xya\")",
        "canMakeSubsequence(str1 = \"azcbobobza\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"adczb\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"mzxn\", str2 = \"azz\")",
        "canMakeSubsequence(str1 = \"zxh\", str2 = \"ah\")",
        "canMakeSubsequence(str1 = \"zzbzzzzz\", str2 = \"b\")"
    ],
    "sample_377": [
        "minimumSeconds(nums = [1,2,3,4,5])",
        "minimumSeconds(nums = [3,2,1,2,1,7])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 3, 2, 1])",
        "minimumSeconds(nums = [0, 1, 2, 3])",
        "minimumSeconds(nums = [3,4,2,3,2,4])",
        "minimumSeconds(nums = [1,2,3,5,6])",
        "minimumSeconds(nums = [2,1,3,3,3,2,2,1])",
        "minimumSeconds(nums = [0, 2, 2])",
        "minimumSeconds(nums = [1,3,6,9,10,10,12])"
    ],
    "sample_458": [
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [2,3,7,8,10], target = 15)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 15)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3, 4, 5], target=10)",
        "lengthOfLongestSubsequence(nums = [1,2,3,4,5,6,7,8,9,10], target = 20)",
        "lengthOfLongestSubsequence(nums = [1, 2, 7, 18], target = 15)",
        "lengthOfLongestSubsequence(nums = [3, 1, 2, 7, 4, 5, 6], target = 10)",
        "lengthOfLongestSubsequence(nums = [2, 5, 6, 8], target = 15)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 6, 7, 8, 9, 10], target = 13)"
    ],
    "sample_370": [
        "sortVowels(s = \"lEotcede\")",
        "sortVowels(s = 'lEOtcedE')",
        "sortVowels(s = \"lEOcEd\")",
        "sortVowels(s = \"lEOtced\")",
        "sortVowels(s = 'lEOtcede')",
        "sortVowels(s = \"Example\")",
        "sortVowels(s = \"ElEOcTeD\")",
        "sortVowels(s = \"ElephantCalede\")",
        "sortVowels(s='eLecteD')",
        "sortVowels(s='OoEcltde')"
    ],
    "sample_421": [
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5], k = 3)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [1, 2, 3, 4], k = 2)",
        "minOperations(nums = [1, 2, 3, 5, 6, 7], k = 5)",
        "minOperations(nums = [1, 2, 3, 5, 6], k = 4)",
        "minOperations(nums = [3, 2, 1, 4, 5], k = 3)",
        "minOperations(nums = [5,2,3,6,6,6,2,1], k = 4)",
        "minOperations(nums = [5, 6, 2, 5, 2, 1, 5], k = 3)",
        "minOperations(nums = [2, 4, 6, 2, 6, 2, 8, 10], k = 4)"
    ],
    "sample_430": [
        "maxSubarrays(nums = [1, 2, 4, 0])",
        "maxSubarrays(nums = [1, 1, 1, 1])",
        "maxSubarrays([8, 7, 6])",
        "maxSubarrays(nums = [1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3])",
        "maxSubarrays([8,16,24])",
        "maxSubarrays(nums = [1, 3, 5, 0, 7])",
        "maxSubarrays(nums = [1, 2, 0, 4, 0, 4])",
        "maxSubarrays([4, 5, 1, 0])",
        "maxSubarrays(nums = [0, 5, 15])",
        "maxSubarrays(nums = [3, 4, 5, 3, 2, 3])"
    ],
    "sample_415": [
        "countPairs(coordinates = [[0,0],[0,1],[1,0],[1,2],[2,1],[1,1]], k = 1)",
        "countPairs(coordinates = [[0,0],[0,1],[1,0],[1,2],[2,1],[1,1]], k = 1)",
        "countPairs(coordinates = [[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [8, 7], [9, 10], [10, 9]], k = 2)",
        "countPairs(coordinates = [[0, 0], [0, 1], [1, 0], [1, 2], [2, 1], [2, 2]], k = 1)",
        "countPairs(coordinates = [[1,2],[3,4],[5,6],[7,8],[9,10]], k = 2)",
        "countPairs(coordinates = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], k = 2)",
        "countPairs(coordinates = [[1,2], [2,1], [3,4], [4,3], [5,6], [6,5]], k = 2)",
        "countPairs(coordinates = [[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], k = 2)",
        "countPairs(coordinates = [[0, 1], [1, 0], [0, 2], [2, 0], [1, 2], [2, 1], [3, 0], [0, 3], [3, 3]], k = 1)",
        "countPairs(coordinates = [[2, 1], [2, 2], [3, 2], [4, 1], [5, 0], [5, 2]], k = 2)"
    ],
    "sample_457": [
        "lengthOfLongestSubsequence(nums = [3, 34, 4, 12, 5, 2], target = 9)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4], target = 4)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3], target = 3)",
        "lengthOfLongestSubsequence(nums = [1, 2, 3, 4, 5], target = 9)",
        "lengthOfLongestSubsequence(nums = [3, 2, 5], target = 8)",
        "lengthOfLongestSubsequence(nums = [2, 3, 5, 7, 11], target = 15)",
        "lengthOfLongestSubsequence(nums=[1, 2, 3], target=2)",
        "lengthOfLongestSubsequence(nums = [1, 3, 5, 2], target = 5)",
        "lengthOfLongestSubsequence(nums = [3, 2, 1, 5, 6], target = 9)",
        "lengthOfLongestSubsequence(nums = [5, 2, 3, 1, 4], target = 12)"
    ],
    "sample_445": [
        "sumCounts(nums = [1,1,1,1])",
        "sumCounts(nums = [1,2,1,2,3])",
        "sumCounts(nums = [1,2,1,2,3])",
        "sumCounts(nums = [1,2,1,2,1])",
        "sumCounts([1,2,1,2,1])",
        "sumCounts([1,1,2,2,3])",
        "sumCounts(nums = [1,1,2,3])",
        "sumCounts([1, 2, 1, 2, 3])",
        "sumCounts([1, 1, 2, 3])",
        "sumCounts([1,1,1,2,2,2])"
    ],
    "sample_360": [
        "minimumBeautifulSubstrings(s = \"1010101\")",
        "minimumBeautifulSubstrings(s = \"10110110110110110110110110110110\")",
        "minimumBeautifulSubstrings(s = \"10011001\")",
        "minimumBeautifulSubstrings(s = \"0101101\")",
        "minimumBeautifulSubstrings(s = \"11011001101100110\")",
        "minimumBeautifulSubstrings(s = \"10110110110101011011010\")",
        "minimumBeautifulSubstrings(s = \"11100000000000000000000\")",
        "minimumBeautifulSubstrings(s = \"11011001011111100010\")",
        "minimumBeautifulSubstrings(s = \"11001010101011101011010110110101010111011\")",
        "minimumBeautifulSubstrings(s = \"10111100110100101110110100100000110010110000000000\")"
    ],
    "sample_432": [
        "maxSubarrays(nums = [1, 2, 3, 0, 5])",
        "maxSubarrays([1, 2, 3, 0, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5, 6, 7])",
        "maxSubarrays(nums = [1,0,1,0,1])",
        "maxSubarrays([1, 0, 2, 1, 3, 0, 2, 0])",
        "maxSubarrays([1, 0, 3, 2, 5])",
        "maxSubarrays(nums = [1,2,3,1,2,3])",
        "maxSubarrays(nums = [2,1,3,1,2,1])",
        "maxSubarrays([1, 3, 1, 1])",
        "maxSubarrays(nums = [0x0f, 0x7f, 0xff])"
    ],
    "sample_401": [
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 4)",
        "maxSum(nums = [4, 1, 1, 1, 2, 3, 5], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 2, k = 4)",
        "maxSum(nums = [1,2,1,4,5], m = 2, k = 3)",
        "maxSum(nums=[5, 1, 2, 3, 4], m=2, k=3)",
        "maxSum(nums = [1, 2, 3, 2, 1, 2, 3, 1, 2, 3], m = 3, k = 3)",
        "maxSum(nums = [1, 3, 1, 5, 1, 4, 1, 2, 1, 3], m = 2, k = 3)",
        "maxSum(nums = [2,2,2,5,5,5,5,2,2,2], m = 2, k = 3)",
        "maxSum(nums = [0, 2, 1, 3, 4], m = 2, k = 3)"
    ],
    "sample_400": [
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6, 7], m = 3, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5, 6], m = 2, k = 3)",
        "maxSum(A = [1, 2, 3, 4, 5], m = 1, k = 3)",
        "maxSum(A = [1, 2, 1, 2, 1, 2], m = 2, k = 3)",
        "maxSum(A=[1, 2, 3, 4, 5, 6], m=3, k=2)",
        "maxSum(A=[1, 2, 3, 4, 5, 6, 7, 8, 9], m=2, k=3)",
        "maxSum(A = [2, 1, 1, 1, 2, 3, 1, 2, 3, 2], m = 3, k = 3)",
        "maxSum(A = [2, 1, 5, 2, 6, 1, 7], m = 2, k = 3)",
        "maxSum(A = [5,3,1,2,6,4,3], m = 3, k = 3)"
    ],
    "sample_363": [
        "isGood(nums = [1, 2, 2, 3, 4])",
        "isGood([1, 2, 2, 3, 4])",
        "isGood(nums = [1, 2, 2, 3, 4, 5])",
        "isGood([3, 1, 2, 2, 1])",
        "isGood(nums = [1, 3, 2, 4, 5, 2])",
        "isGood(nums = [2,2,1,3,1])",
        "isGood(nums = [3,2,1,4,5,6,7])",
        "isGood(nums = [1,2,2,3,3,3,4])",
        "isGood([4, 2, 1, 1, 1, 1])",
        "isGood([2,2,2,2,3,3])"
    ],
    "sample_374": [
        "minimumSeconds(nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [1, 2, 3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 0])",
        "minimumSeconds(nums = [0,1,2,3,4,0,1,2,3,4])",
        "minimumSeconds(nums = [1,2,3])",
        "minimumSeconds(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minimumSeconds(nums = [1, 1, 2, 2])",
        "minimumSeconds(nums = [0,3,7,11,15])"
    ],
    "sample_376": [
        "minimumSeconds(nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1])",
        "minimumSeconds(nums = [1, 2, 3, 2, 1])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "minimumSeconds(nums = [0,1,2,3,4,5,6,7,8,9,10])",
        "minimumSeconds([1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(nums = [2, 3, 1, 5, 4])",
        "minimumSeconds([1, 2, 3, 1, 2, 3])",
        "minimumSeconds(nums = [0, 3, 2, 1, 4, 5])",
        "minimumSeconds(nums = [0,3,7,15])"
    ],
    "sample_411": [
        "minLengthAfterRemovals(nums = [1,1,1])",
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums=[1,2,3,4,5])",
        "minLengthAfterRemovals(nums=[1,1,1,1,1])",
        "minLengthAfterRemovals(nums=[2,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [4, 2, 2, 2, 2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,2,2,2,2,3,3,3,4])"
    ],
    "sample_399": [
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,4,5], m = 3, k = 3)",
        "maxSum(nums = [3,-2,2,-3], m = 2, k = 2)",
        "maxSum(nums = [1, 1, 2, 2, 2, 1], m = 2, k = 3)",
        "maxSum(nums = [2, 1, 2, 1, 2, 1], m = 2, k = 2)",
        "maxSum(nums = [1,2,3,2,1,1,2,2,1,1], m = 2, k = 3)",
        "maxSum(nums = [1, 3, 1, 5, 3, 1], m = 2, k = 2)",
        "maxSum(nums = [2,1,3,3,4,3,1,2,4,3], m = 3, k = 2)",
        "maxSum(nums = [2,3,-3,1,1,1,2,3,4], m = 2, k = 3)"
    ],
    "sample_397": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 2, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8], m = 3, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7], m = 3, k = 3)",
        "maxSum(nums = [2, 5, 3, 1, 5, 3], m = 3, k = 2)",
        "maxSum(nums = [5, 2, 3, 0, 1, 2], m = 2, k = 3)",
        "maxSum(nums = [1, 4, 2, 3, 2, 5], m = 2, k = 3)",
        "maxSum(nums = [4,2,3,1,4,5,6], m = 2, k = 3)",
        "maxSum(nums = [2,1,4,6,5,3,4,2,3], m = 3, k = 3)"
    ],
    "sample_364": [
        "isGood(nums = [1,2,3,4,5])",
        "isGood(nums = [1,2,3,5,4])",
        "isGood(nums = [1,2,3,4,5,6])",
        "isGood(nums = [1,2,3,4,5,6,7])",
        "isGood(nums = [1, 2, 3, 4])",
        "isGood(nums=[1,2,3,4,5])",
        "isGood(nums = [4,1,3,2])",
        "isGood(nums=[2,1,3,4,5])",
        "isGood(nums=[1,2,4,3,5])",
        "isGood(nums=[2,4,3,5,1])"
    ],
    "sample_412": [
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "minLengthAfterRemovals(nums = [2,2,2,2,2,2,2])",
        "minLengthAfterRemovals(nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])",
        "minLengthAfterRemovals(nums = [2,3,3,4,4,5])"
    ],
    "sample_468": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"abc\", \"def\", \"ghi\"], x = \"de\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"banana\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"berry\", \"cherry\"], x = \"erry\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"foo\"], x = \"lo\")",
        "findWordsContaining(words = [\"apple\", \"grape\", \"banana\"], x = \"a\")",
        "findWordsContaining(words = [\"apple\", \"anaconda\", \"banana\"], x = \"ana\")",
        "findWordsContaining(words = [\"apple\", \"bat\", \"cat\"], x = \"at\")"
    ],
    "sample_473": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins([1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 3, 2])",
        "minimumCoins(prices = [1, 2, 1, 1, 1])",
        "minimumCoins([1, 2, 4, 1])",
        "minimumCoins(prices = [2, 1, 0, 3, 2])"
    ],
    "sample_359": [
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101\")",
        "minimumBeautifulSubstrings(s = \"1010101\")",
        "minimumBeautifulSubstrings(s = \"1010101\")",
        "minimumBeautifulSubstrings(s = \"1010101\")",
        "minimumBeautifulSubstrings(s = \"10110110\")",
        "minimumBeautifulSubstrings(s = \"101011\")",
        "minimumBeautifulSubstrings(s = \"101011\")",
        "minimumBeautifulSubstrings(s = \"1010010101\")",
        "minimumBeautifulSubstrings(s = \"101011110010001\")"
    ],
    "sample_393": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"efgh\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bcd\")",
        "canBeEqual(s1 = \"ABCD\", s2 = \"EFGH\")",
        "canBeEqual(s1 = \"abc\", s2 = \"bca\")",
        "canBeEqual(s1 = \"bad\", s2 = \"cab\")",
        "canBeEqual(s1 = \"aba\", s2 = \"aab\")",
        "canBeEqual(s1 = \"badb\", s2 = \"dbaa\")",
        "canBeEqual(s1 = \"pqrs\", s2 = \"stuv\")",
        "canBeEqual(s1 = \"eac\", s2 = \"bad\")"
    ],
    "sample_387": [
        "canMakeSubsequence(str1 = \"az\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"azb\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"abcde\", str2 = \"az\")",
        "canMakeSubsequence(str1 = \"apple\", str2 = \"aple\")",
        "canMakeSubsequence(str1 = \"abcz\", str2 = \"ahbgdc\")",
        "canMakeSubsequence(str1 = \"ace\", str2 = \"abc\")",
        "canMakeSubsequence(str1 = \"bd\", str2 = \"yz\")",
        "canMakeSubsequence(str1 = \"apple\", str2 = \"apza\")",
        "canMakeSubsequence(str1 = \"bcd\", str2 = \"abzz\")"
    ],
    "sample_414": [
        "minLengthAfterRemovals(nums = [1,2,2,3,3,3])",
        "minLengthAfterRemovals(nums = [1,2,2,2,3,3,4,4])",
        "minLengthAfterRemovals(nums = [1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [1, 2, 2, 2, 3, 3])",
        "minLengthAfterRemovals(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minLengthAfterRemovals(nums = [1,1,1,2,2,2,3,3,3,4,4])",
        "minLengthAfterRemovals(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4])",
        "minLengthAfterRemovals(nums = [1,2,3,3,3,4,4,4,4])",
        "minLengthAfterRemovals(nums = [2,2,1,1,1,2,2,3,3])",
        "minLengthAfterRemovals(nums = [2,3,2,2,2,2,3,3,3,4])"
    ],
    "sample_394": [
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"adcb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"dcb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"aecb\")",
        "canBeEqual(s1 = \"acbd\", s2 = \"bdac\")",
        "canBeEqual(s1 = \"dogt\", s2 = \"godt\")",
        "canBeEqual(s1 = \"d3c1\", s2 = \"c1d3\")",
        "canBeEqual(s1 = \"sewc\", s2 = \"wsce\")",
        "canBeEqual(s1 = \"apfu\", s2 = \"hklm\")"
    ],
    "sample_382": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4,5,6], target = 10)"
    ],
    "sample_390": [
        "canMakeSubsequence(s1 = \"abc\", s2 = \"adc\")",
        "canMakeSubsequence(s1 = \"azb\", s2 = \"bz\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"ban\")",
        "canMakeSubsequence(s1 = \"banana\", s2 = \"bzananan\")",
        "canMakeSubsequence(s1 = \"bz\", s2 = \"ab\")",
        "canMakeSubsequence(s1 = \"banan\", s2 = \"baa\")",
        "canMakeSubsequence(s1 = \"abcdef\", s2 = \"adcf\")",
        "canMakeSubsequence(s1 = \"bzn\", s2 = \"azn\")",
        "canMakeSubsequence(s1 = \"mzjawxu\", s2 = \"azju\")",
        "canMakeSubsequence(s1 = \"bzab\", s2 = \"zba\")"
    ],
    "sample_437": [
        "lastVisitedIntegers(words = ['prev', '1', 'prev', '2', 'prev'])",
        "lastVisitedIntegers(words = ['prev', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'prev', '1', '2', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"1\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = ['prev', 'next', 'prev', '1', 'next', '2', 'prev', 'prev'])",
        "lastVisitedIntegers(words = ['prev', 'prev', '4', 'prev'])",
        "lastVisitedIntegers(words = ['next', 'prev', 'next', '2', 'prev'])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])"
    ],
    "sample_416": [
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], k = 2)",
        "countPairs(coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], k = 2)",
        "countPairs(coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]], k = 2)",
        "countPairs(coordinates = [[0,0],[0,1],[1,0],[1,2],[2,1],[1,1],[2,2],[2,0],[0,2],[2,3]], k = 1)",
        "countPairs(coordinates = [[0, 1], [0, 2], [2, 1], [2, 0], [1, 2], [1, 0]], k = 2)",
        "countPairs(coordinates = [[1, 1], [2, 2], [1, 2], [2, 1], [3, 3], [4, 4]], k = 1)",
        "countPairs(coordinates = [[0,1],[1,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]], k = 2)",
        "countPairs(coordinates = [[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3],[3,4],[4,4],[4,5]], k = 2)",
        "countPairs(coordinates = [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]], k = 3)",
        "countPairs(coordinates = [[2, 1], [1, 2], [1, 1], [0, 0], [1, 0], [0, 1], [2, 2], [2, 0], [0, 2], [0, 0]], k = 1)"
    ],
    "sample_451": [
        "minChanges(s = \"0110\")",
        "minChanges(s = \"abab\")",
        "minChanges(s = \"10101\")",
        "minChanges(s = \"011001\")",
        "minChanges(s = \"011000\")",
        "minChanges(s = \"011000\")",
        "minChanges(s = \"aba\")",
        "minChanges(s = \"abababab\")",
        "minChanges(s = \"001101\")",
        "minChanges(s = \"bbaab\")"
    ],
    "sample_461": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 8, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 10, limit = 5)",
        "distributeCandies(n = 9, limit = 2)"
    ],
    "sample_391": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcab\")",
        "canBeEqual(s1 = \"word\", s2 = \"wrdo\")",
        "canBeEqual(s1 = \"acdf\", s2 = \"cdfa\")"
    ],
    "sample_460": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 4, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n=3, limit=2)",
        "distributeCandies(n=10, limit=4)"
    ],
    "sample_373": [
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 90)",
        "accountBalanceAfterPurchase(p = 100)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 20)",
        "accountBalanceAfterPurchase(p = 85)",
        "accountBalanceAfterPurchase(p = 85)"
    ],
    "sample_444": [
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 1])",
        "sumCounts(nums = [1,1,2,2])",
        "sumCounts(nums = [1,2,3,4,5])",
        "sumCounts([1, 2, 1])",
        "sumCounts(nums = [1,2,1,3])",
        "sumCounts(nums = [1,1,2,2,3])",
        "sumCounts([1,2,3,4])",
        "sumCounts(nums = [1, 1, 1, 2, 2])",
        "sumCounts([1,2,3,1,2,1])"
    ],
    "sample_378": [
        "minimumSeconds(A = [1, 2, 3, 4, 5])",
        "minimumSeconds(A = [0, 1, 2, 3, 4])",
        "minimumSeconds(A = [1, 5, 4, 2, 6, 3])",
        "minimumSeconds(A = [0, 3, 2, 5, 4, 1])",
        "minimumSeconds(A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "minimumSeconds(A = [0, 2, 3, 5, 6, 7])",
        "minimumSeconds([1, 3, 2, 0])",
        "minimumSeconds(A = [4,1,2,2,3])",
        "minimumSeconds([2,0,2,2,2,1,1,1,0,0])",
        "minimumSeconds([0, 2, 2, 1, 4, 4, 3, 1, 0])"
    ],
    "sample_388": [
        "canMakeSubsequence(str1 = \"azx\", str2 = \"ba\")",
        "canMakeSubsequence(str1 = \"ace\", str2 = \"bdf\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"ad\")",
        "canMakeSubsequence(str1 = \"abzc\", str2 = \"ad\")",
        "canMakeSubsequence(str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"bz\")",
        "canMakeSubsequence(str1 = \"adc\", str2 = \"adz\")",
        "canMakeSubsequence(str1 = \"b\", str2 = \"b\")",
        "canMakeSubsequence(str1 = \"abcd\", str2 = \"a\")",
        "canMakeSubsequence(str1 = \"hmn\", str2 = \"ahk\")",
        "canMakeSubsequence(str1 = \"dfezfzfzazfzfz\", str2 = \"ba\")"
    ],
    "sample_408": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4])"
    ],
    "sample_441": [
        "countSubMultisets(nums = [1,2,3,4,5], l = 1, r = 10)",
        "countSubMultisets(nums = [1,2,3,4,5], l = 3, r = 10)",
        "countSubMultisets(nums = [2,3,6], l = 2, r = 8)",
        "countSubMultisets(nums = [2,3,6], l = 1, r = 5)",
        "countSubMultisets(nums = [1,2,3], l = 3, r = 10)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 2, r = 6)",
        "countSubMultisets(nums = [0, 1, 2, 3], l = 1, r = 3)",
        "countSubMultisets(nums = [0,1,2,3,4,5], l = 2, r = 5)",
        "countSubMultisets(nums = [1, 2, 3, 4, 5], l = 6, r = 12)",
        "countSubMultisets(nums = [2,4,5], l = 10, r = 20)"
    ],
    "sample_475": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins([1, 2, 3, 4])",
        "minimumCoins([1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [1, 2, 3, 0])",
        "minimumCoins([2, 1, 2, 1])",
        "minimumCoins(prices = [2, 1, 1])",
        "minimumCoins(prices = [1, 1, 2, 1])",
        "minimumCoins(prices = [1, 3, 1, 4, 2])",
        "minimumCoins(prices = [2, 4, 6, 2, 5, 7])"
    ],
    "sample_477": [
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 5, 10])",
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 1, 1, 1])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 1, 2, 4])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [2, 5, 6, 1])",
        "minimumCoins(prices = [1, 3, 2])",
        "minimumCoins(prices = [1, 1, 1, 2, 3])"
    ],
    "sample_438": [
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"2\", \"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"4\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"2\", \"prev\", \"prev\"])"
    ],
    "sample_428": [
        "minOperations([1, 2, 3, 4, 5, 6, 7, 8])",
        "minOperations([1, 1, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [1, 2, 2, 2, 2, 2])",
        "minOperations([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4])",
        "minOperations(nums = [1,1,1,1,2,2,2,3,3,3])",
        "minOperations([3, 1, 3, 1, 3, 1, 3, 1])",
        "minOperations([3,1,3,2,4,2,2])",
        "minOperations([1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5])",
        "minOperations(nums=[1,2,3,4,5,6,7,8,9,10,11,12])",
        "minOperations([1, 1, 1, 2, 3, 3, 3, 3, 4])"
    ],
    "sample_439": [
        "lastVisitedIntegers(words = [\"push\", \"push\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"3\", \"push\", \"2\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\",\"1\",\"push\",\"2\",\"pop\",\"push\",\"3\",\"push\",\"push\",\"pop\",\"pop\"])",
        "lastVisitedIntegers(words = ['push', '1', 'push', '2', 'pop'])",
        "lastVisitedIntegers(words = [\"push\", \"2\", \"pop\", \"push\", \"1\"])",
        "lastVisitedIntegers(words = ['push', '1', 'push', '2', 'pop', 'push', '3', 'push', 'push', 'pop'])",
        "lastVisitedIntegers(words = ['push', '4', 'push', '2', 'pop', 'push', '1', 'pop'])",
        "lastVisitedIntegers(words = [\"push\", \"10\", \"push\", \"20\", \"pop\", \"push\", \"30\", \"pop\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"10\", \"push\", \"20\", \"pop\", \"push\", \"30\", \"pop\"])",
        "lastVisitedIntegers(words = [\"push\", \"2\", \"pop\", \"push\", \"1\", \"push\", \"3\", \"push\", \"p\", \"push\", \"4\", \"pop\", \"p\"])"
    ],
    "sample_379": [
        "minimumSeconds(nums = [1, 2, 3, 4, 5])",
        "minimumSeconds(nums = [3,2,1,2,3])",
        "minimumSeconds(nums = [2, 1, 4, 3, 6])",
        "minimumSeconds(nums = [2,3,1,2,3,1])",
        "minimumSeconds(nums = [2,3,1,2,1,4,2,1,3,4])",
        "minimumSeconds(nums = [2,1,3,1,2,1,2,3,1])",
        "minimumSeconds(nums = [4,2,1,3,2,1,3,4,2,1])",
        "minimumSeconds(nums = [1,3,4,1,4,3,1,4])",
        "minimumSeconds(nums = [1, 5, 6, 1, 1, 1, 5])",
        "minimumSeconds(nums = [1,3,4,1,4,3,2,5,1,2])"
    ],
    "sample_471": [
        "findWordsContaining(words = [\"apple\", \"banana\", \"cherry\", \"date\"], x = \"an\")",
        "findWordsContaining(words = [\"hello\", \"world\", \"goodbye\"], x = \"or\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"banana\"], x = \"ap\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"banana\"], x = \"ap\")",
        "findWordsContaining(words = [\"apple\", \"banana\", \"grape\"], x = \"an\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"pineapple\"], x = \"apple\")",
        "findWordsContaining(words = [\"apple\", \"orange\", \"cherry\", \"apple\"], x = \"apple\")",
        "findWordsContaining(words=[\"apple\", \"mango\", \"cherry\"], x=\"er\")",
        "findWordsContaining(words = [\"apple\", \"tree\", \"watermelon\", \"lemon\"], x = \"e\")",
        "findWordsContaining(words = [\"apple\", \"tree\", \"appletree\", \"grape\", \"carrot\"], x = \"apple\")"
    ],
    "sample_431": [
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [1, 2, 3, 4, 5])",
        "maxSubarrays(nums = [0, 1, 2, 3, 4, 5])",
        "maxSubarrays([1, 0, 1, 1, 0, 1])",
        "maxSubarrays(nums = [0,1,2,3,4])",
        "maxSubarrays(nums = [2, 1, 4, 3, 6])",
        "maxSubarrays(nums = [1, 2, 3, 1])",
        "maxSubarrays(nums = [1, 0, 1, 0, 1, 0, 0])",
        "maxSubarrays([1,2,3,0,2,5,1])",
        "maxSubarrays([10, 18, 2, 3, 14, 18, 5])"
    ],
    "sample_436": [
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\", \"1\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"3\", \"prev\", \"prev\", \"2\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"5\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\", \"2\", \"prev\", \"prev\"])"
    ],
    "sample_384": [
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 5)",
        "countPairs(nums = [2, 3, 4, 1], target = 5)"
    ],
    "sample_396": [
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dcba\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"ba\", s2 = \"nana\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"dbca\")",
        "canBeEqual(s1 = \"abab\", s2 = \"bbaa\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"adcb\")",
        "canBeEqual(s1 = \"hello\", s2 = \"world\")"
    ],
    "sample_440": [
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"2\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"2\", \"prev\", \"prev\", \"1\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"1\", \"prev\", \"prev\"])",
        "lastVisitedIntegers(words = [\"prev\", \"prev\", \"2\", \"prev\", \"prev\"])"
    ],
    "sample_464": [
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n=10, limit=2)",
        "distributeCandies(n=10, limit=2)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 20, limit = 3)",
        "distributeCandies(n=20, limit=2)",
        "distributeCandies(n = 20, limit = 4)"
    ],
    "sample_405": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [4,5,6,1,2,3])",
        "minimumRightShifts(nums = [5, 1, 2, 3, 4])"
    ],
    "sample_467": [
        "findWordsContaining(words = [\"apple\", \"berry\", \"cherry\"], x = \"erry\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"banana\"], x = \"apple\")",
        "findWordsContaining(words = [\"apple\", \"pineapple\", \"banana\"], x = \"app\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\"], x = \"b\")",
        "findWordsContaining(words = [\"cat\", \"dog\", \"bat\"], x = \"at\")",
        "findWordsContaining(words = [\"apple\", \"berry\", \"cherry\"], x = \"ber\")",
        "findWordsContaining(words = [\"hello\", \"world\"], x = \"or\")",
        "findWordsContaining(words = [\"apple\", \"orange\"], x = \"ange\")",
        "findWordsContaining(words = [\"ab\", \"bc\", \"cd\"], x = \"b\")",
        "findWordsContaining(words = [\"cat\", \"hat\", \"mat\"], x = \"at\")"
    ],
    "sample_398": [
        "maxSum(nums = [1, 2, 3, 4, 5], m = 2, k = 3)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6], m = 3, k = 2)",
        "maxSum(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m = 3, k = 3)",
        "maxSum(nums = [1, 2, 3, 4], m = 1, k = 2)",
        "maxSum(nums = [1, 2, 3, 4], m = 1, k = 2)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9], m = 2, k = 3)",
        "maxSum(nums = [1,2,3,4,5,6,7,8,9,10], m = 1, k = 5)",
        "maxSum(nums=[1, 2, 3, 4, 5, 6, 7], m=2, k=2)",
        "maxSum(nums = [4, 3, 1, 2, 3, 2, 2], m = 3, k = 3)",
        "maxSum(nums = [4,3,2,2,1,1,1,2,3,4,4,4,4,4,4,4,4], m = 4, k = 3)"
    ],
    "sample_424": [
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [2,2,2,3,3])",
        "minOperations(nums = [2,2,3,3,3])",
        "minOperations(nums = [1,1,1,1,1])",
        "minOperations([2,2,2,3,3,3])",
        "minOperations(nums=[1,2,3,4,5,6,7,8,9,10])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8])",
        "minOperations(nums = [1, 2, 2, 2, 3, 3])",
        "minOperations([2,2,2,3,3,3,4,4])",
        "minOperations(nums = [1,1,2,3,2,2])"
    ],
    "sample_417": [
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5)",
        "minOperations(nums = [3,2,4,1,5], k = 2)",
        "minOperations(nums = [1, 2, 3, 4, 5, 6, 7, 8], k = 4)",
        "minOperations(nums = [2, 3, 4, 5, 6, 7, 8], k = 3)",
        "minOperations(nums = [2, 1, 1, 3, 2, 1, 1, 3], k = 3)",
        "minOperations(nums = [5, 4, 8, 2, 1, 6, 7, 3, 9], k = 2)",
        "minOperations(nums = [5, 1, 3, 4, 2, 6, 7], k = 3)",
        "minOperations(nums = [1, 2, 3, 2, 3, 4, 5, 2, 1, 6], k = 4)",
        "minOperations(nums = [8, 2, 10, 7, 1, 9, 8, 4, 5, 6], k = 3)",
        "minOperations(nums = [8, 2, 11, 9, 10, 1, 7, 11, 10, 4, 8, 9, 10], k = 6)"
    ],
    "sample_371": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"HymlP\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"HYmpl\")",
        "sortVowels(s = \"lYmPh\")",
        "sortVowels(s=\"Hyml\")"
    ],
    "sample_465": [
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 3, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 2)",
        "distributeCandies(n = 5, limit = 3)",
        "distributeCandies(n = 7, limit = 2)",
        "distributeCandies(n = 7, limit = 4)"
    ],
    "sample_447": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 1, 3])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1, 2, 1, 2])",
        "sumCounts([1, 1, 2, 2, 3])",
        "sumCounts([1, 1, 2, 2, 3])",
        "sumCounts([2, 2, 2, 2])"
    ],
    "sample_429": [
        "maxSubarrays(nums = [1,2,3,4,5,6])",
        "maxSubarrays(nums = [1, 1, 1, 1])",
        "maxSubarrays(nums = [1, 0, 2, 0, 3, 0])",
        "maxSubarrays(nums = [1, 2, 3, 0, 3, 2, 1])",
        "maxSubarrays(nums = [1, 0, 2, 1, 3, 0])",
        "maxSubarrays(nums = [3,2,1,5,6,7,8,9])",
        "maxSubarrays(nums = [4,8,16])",
        "maxSubarrays(nums = [2,4,16,8,32,64])",
        "maxSubarrays(nums = [5, 2, 7, 8, 6, 3, 4, 1])",
        "maxSubarrays(nums = [1, 3, 0, 3, 5, 0, 4, 3, 0, 1, 5, 0, 4, 3, 0, 5, 0, 0, 5, 2, 0, 4, 3, 0, 2, 3, 2])"
    ],
    "sample_446": [
        "sumCounts([1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 2, 1])",
        "sumCounts([2, 1, 3])",
        "sumCounts([1, 2, 2, 3])",
        "sumCounts(nums = [1, 2, 2, 1])",
        "sumCounts(nums = [1, 1, 2, 3, 4])",
        "sumCounts(nums = [1,1,2,3,4])"
    ],
    "sample_395": [
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"def\")",
        "canBeEqual(s1 = \"abc\", s2 = \"cba\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"bcda\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"adcb\")",
        "canBeEqual(s1 = \"abcd\", s2 = \"acbd\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"aa\", s2 = \"bb\")",
        "canBeEqual(s1 = \"abc\", s2 = \"dbe\")",
        "canBeEqual(s1 = \"apple\", s2 = \"papel\")"
    ],
    "sample_380": [
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 6)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums = [1,2,3,4,5], target = 7)",
        "countPairs(nums=[1,2,3,4,5], target=6)",
        "countPairs(nums = [1, 2, 3, 4, 5], target = 7)",
        "countPairs(nums = [1,2,3,4], target = 5)",
        "countPairs(nums = [2,7,11,15], target = 18)"
    ],
    "sample_442": [
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts(nums = [1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts([1, 2, 3])",
        "sumCounts([1, 2, 1, 3])",
        "sumCounts(nums = [1, 1, 3])",
        "sumCounts(nums = [1,1,2,2,3,3])",
        "sumCounts([1, 2, 1, 4])",
        "sumCounts([1,2,1,2,1])",
        "sumCounts(nums = [1, 2, 1, 3, 2, 2])"
    ],
    "sample_368": [
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"lYmpH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmplH\")",
        "sortVowels(s = \"YmpH\")",
        "sortVowels(s=\"MyPhl\")",
        "sortVowels(s=\"lYmpH\")",
        "sortVowels(s = \"MyPhl\")",
        "sortVowels(s=\"HlMy\")"
    ],
    "sample_462": [
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 3)",
        "distributeCandies(n = 10, limit = 2)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n=10, limit=3)",
        "distributeCandies(n = 15, limit = 3)",
        "distributeCandies(n = 15, limit = 3)"
    ],
    "sample_474": [
        "minimumCoins(prices = [1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1, 2, 3, 1])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins([1, 2, 3, 4])",
        "minimumCoins(prices = [1, 2, 3, 2])",
        "minimumCoins(prices = [2, 2, 2, 2])"
    ],
    "sample_426": [
        "minOperations(nums = [1, 2, 3, 4, 5])",
        "minOperations(nums = [1,2,3,4,5])",
        "minOperations([1, 2, 3, 4, 5, 6])",
        "minOperations([1, 2, 3, 5])",
        "minOperations(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minOperations([2, 2, 3, 3, 2, 2])",
        "minOperations(nums = [2,2,3,3,3,4,4,4,5,5])",
        "minOperations(nums = [3,3,3,4,4,4,5,5,5])",
        "minOperations(nums = [2,3,2,2,2])",
        "minOperations(nums = [1,2,2,2,2,2,2,2])"
    ],
    "sample_423": [
        "minOperations([1, 2, 3, 4, 5, 6])",
        "minOperations([1, 1, 1, 2, 2, 2])",
        "minOperations(nums = [1, 2, 3, 4, 5, 6])",
        "minOperations([3,1,3,2,4,2,1,1,2,3,3,4])",
        "minOperations([1,2,2,2])",
        "minOperations([1,2,2,2])",
        "minOperations([1, 2, 2, 2, 2, 3, 3, 3])",
        "minOperations(nums = [3,3,3,1,1,1,2,2,2])",
        "minOperations([3,3,3,3,4,4,4,5,5])",
        "minOperations([1,2,1,1,3,3,3])"
    ],
    "sample_476": [
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,5])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1,2,3,4])",
        "minimumCoins(prices = [1, 2, 5])",
        "minimumCoins(prices = [1,2,3,4,5])",
        "minimumCoins(prices = [2,2])",
        "minimumCoins(prices = [1,2,1,2,1,2])",
        "minimumCoins(prices = [1,2,5,8])",
        "minimumCoins(prices = [1,3,4,5])"
    ],
    "sample_406": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts([1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [2,1,3,4,5])",
        "minimumRightShifts(nums = [2,1,3,4,5])",
        "minimumRightShifts(nums = [2, 1, 3, 4, 5])",
        "minimumRightShifts(nums = [4, 1, 2, 3])"
    ],
    "sample_403": [
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1, 2, 3, 4, 5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [1,2,3,4,5])",
        "minimumRightShifts(nums = [4, 3, 2, 1])",
        "minimumRightShifts(nums = [2, 1, 3, 5, 4])",
        "minimumRightShifts(nums = [2, 1, 3, 5, 4])",
        "minimumRightShifts(nums = [2, 2, 1, 1, 1])"
    ],
    "sample_287": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcde\")",
        "findMinimumOperations(s1 = \"ab\", s2 = \"cd\", s3 = \"ef\")",
        "findMinimumOperations(s1 = \"xabc\", s2 = \"yabc\", s3 = \"zabc\")",
        "findMinimumOperations(s1 = \"tapioca\", s2 = \"tapioca\", s3 = \"tapioca\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"adc\", s3 = \"aac\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"aab\", s3 = \"aab\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"bcd\", s3 = \"cdf\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"adc\", s3 = \"a\")"
    ],
    "sample_333": [
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"abba\")",
        "longestSemiRepetitiveSubstring(s = \"abbc\")",
        "longestSemiRepetitiveSubstring(s = \"aaaa\")",
        "longestSemiRepetitiveSubstring(s = \"aabbbccd\")",
        "longestSemiRepetitiveSubstring(s = \"aaaaa\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbe\")"
    ],
    "sample_334": [
        "maximumNumberOfStringPairs([\"aa\", \"bb\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\"])",
        "maximumNumberOfStringPairs([\"ab\", \"cd\", \"ef\", \"gh\"])",
        "maximumNumberOfStringPairs([\"abc\", \"cba\", \"xyz\", \"zyx\"])",
        "maximumNumberOfStringPairs([\"ab\", \"cd\", \"ba\", \"dc\"])",
        "maximumNumberOfStringPairs(words=['ab', 'ba', 'cd'])",
        "maximumNumberOfStringPairs(words=[\"abc\", \"cba\", \"def\"])"
    ],
    "sample_247": [
        "minOperations(s1 = \"abc\", s2 = \"bcd\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"acbd\", x = 2)",
        "minOperations(s1 = \"aaaa\", s2 = \"bbbb\", x = 2)",
        "minOperations(s1 = \"aaaa\", s2 = \"bbbb\", x = 1)",
        "minOperations(s1 = \"bbb\", s2 = \"aaa\", x = 2)",
        "minOperations(s1 = \"abcd\", s2 = \"bcdf\", x = 3)",
        "minOperations(s1 = \"101\", s2 = \"100\", x = 2)",
        "minOperations(s1 = \"qwe\", s2 = \"wqe\", x = 1)",
        "minOperations(s1 = \"110011\", s2 = \"100011\", x = 1)",
        "minOperations(s1 = \"sels\", s2 = \"kels\", x = 1)"
    ],
    "sample_336": [
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"aa\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"abc\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\"])"
    ],
    "sample_261": [
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,4])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 1, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,2,2,1,1,1])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3,3,4,4,4,5,5,5])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5])"
    ],
    "sample_246": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n=10, m=3)",
        "differenceOfSums(n = 7, m = 2)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 15, m = 3)"
    ],
    "sample_249": [
        "shortestBeautifulSubstring(s = \"0110\", k = 2)",
        "shortestBeautifulSubstring(s = '1110111', k = 2)",
        "shortestBeautifulSubstring(s = '111101101', k = 2)",
        "shortestBeautifulSubstring(s = \"10110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"1111000011\", k = 2)",
        "shortestBeautifulSubstring(s = '111001111', k = 2)",
        "shortestBeautifulSubstring(s = \"110111101101\", k = 2)",
        "shortestBeautifulSubstring(s = '101101110111101', k = 3)",
        "shortestBeautifulSubstring(s = '110001111100111', k = 3)",
        "shortestBeautifulSubstring(s=\"00110011\", k=2)"
    ],
    "sample_284": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcd\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"ban\", s2 = \"ban\", s3 = \"ban\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"ba\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"he\", s2 = \"she\", s3 = \"hers\")",
        "findMinimumOperations(s1 = \"bbbb\", s2 = \"bbbb\", s3 = \"bbbb\")",
        "findMinimumOperations(s1 = \"be\", s2 = \"ce\", s3 = \"de\")"
    ],
    "sample_328": [
        "longestSemiRepetitiveSubstring(s = \"abcdb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdba\")",
        "longestSemiRepetitiveSubstring(s = \"abcdba\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbb\")",
        "longestSemiRepetitiveSubstring(s = \"abca\")",
        "longestSemiRepetitiveSubstring(s = \"abcddcba\")",
        "longestSemiRepetitiveSubstring(s = \"aabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"aabb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcaa\")"
    ],
    "sample_272": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minSum(nums1 = [3, 2, 4], nums2 = [1, 2, 3])",
        "minSum(nums1 = [3, 2, 5], nums2 = [1, 0, 4])",
        "minSum(nums1 = [3,5,2,3], nums2 = [3,4,2,3])",
        "minSum(nums1 = [3, 1, 0, 0], nums2 = [4, 2, 0, 0])",
        "minSum(nums1 = [2, 4, 6], nums2 = [0, 1, 3])",
        "minSum(nums1 = [1, 0, 0], nums2 = [2, 3, 5])",
        "minSum(nums1 = [1,2,3,0,3,4], nums2 = [2,3,4,1,2,1])",
        "minSum(nums1 = [2, 1, 0, 0, 1], nums2 = [1, 0, 0, 0, 0])"
    ],
    "sample_289": [
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"1100\")",
        "minimumSteps(s = \"111\")"
    ],
    "sample_241": [
        "maximumTripletValue(nums = [1,2,3])",
        "maximumTripletValue([1, 2, 3, 4, 5])",
        "maximumTripletValue([1,2,3,4,5])",
        "maximumTripletValue(nums = [4, 7, 2, 1])",
        "maximumTripletValue(nums = [2, 5, 3, 1, 4])",
        "maximumTripletValue(nums = [3,6,1,3,4,3])",
        "maximumTripletValue(nums = [100, -90, -80])",
        "maximumTripletValue([-10, 9, 2, 5, 7, 8])",
        "maximumTripletValue(nums = [2, 1, 2, 0, 2, 1, 0])",
        "maximumTripletValue(nums = [5, -3, 4, 2, 6, 1])"
    ],
    "sample_299": [
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"aaaa\", k = 2)",
        "beautifulSubstrings(s = \"aaaa\", k = 2)",
        "beautifulSubstrings(s = \"aaa\", k = 2)",
        "beautifulSubstrings(s = \"nice\", k = 2)",
        "beautifulSubstrings(s = \"geeksforgeeks\", k = 2)",
        "beautifulSubstrings(s = \"beauty\", k = 1)",
        "beautifulSubstrings(s = \"fawaghat\", k = 2)",
        "beautifulSubstrings(s = \"qerqwewqaqasdzxccqwe\", k = 4)"
    ],
    "sample_358": [
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"101101101\")",
        "minimumBeautifulSubstrings(s = \"10101\")",
        "minimumBeautifulSubstrings(s = \"1101\")",
        "minimumBeautifulSubstrings(s = \"1010\")",
        "minimumBeautifulSubstrings(s = \"1010\")",
        "minimumBeautifulSubstrings(s = \"10101100\")"
    ],
    "sample_313": [
        "matrixSum([[1, 2, 3], [4, 5, 1], [7, 8, 9]])",
        "matrixSum([[1, 2, 3], [0, 1, 2], [3, 2, 1]])",
        "matrixSum(a = [[0, 1], [0, 0], [1, 0]])",
        "matrixSum(a = [[1, 1, 0], [0, 1, 1], [1, 1, 0]])",
        "matrixSum(a=[[1, 2, 3], [2, 3, 4], [3, 4, 5]])",
        "matrixSum(a = [[1, 2, 3], [0, 3, 4]])",
        "matrixSum(a = [[1,2,3], [0,5,4], [6,0,3]])",
        "matrixSum([[3,1,2],[6,5,4],[7,8,9]])",
        "matrixSum(a=[[2, 3, 1], [4, 5, 2]])",
        "matrixSum(a = [[3, 1, 2], [3, 0, 2], [5, 3, 1]])"
    ],
    "sample_269": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10])",
        "minSum(nums1 = [1, 1, 1], nums2 = [2, 2, 2])",
        "minSum(nums1 = [0,1,2,3], nums2 = [4,5,6,7])",
        "minSum(nums1 = [3, 3, 1], nums2 = [2, 2, 2])",
        "minSum(nums1 = [2, 2, 1, 0, 3], nums2 = [1, 2, 0, 3, 0])",
        "minSum(nums1 = [1, 2, 3, 0, 5], nums2 = [3, 1, 2, 0, 4])",
        "minSum(nums1 = [0, 4, 3, 2], nums2 = [3, 5, 1, 0])"
    ],
    "sample_282": [
        "minOperations(nums1 = [2,3,2,3,2], nums2 = [1,2,2,2,1])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minOperations(nums1 = [2, 1, 2], nums2 = [1, 2, 2])",
        "minOperations(nums1 = [1, 2, 3], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minOperations(nums1 = [2, 3, 2, 3], nums2 = [1, 2, 1, 2])",
        "minOperations(nums1 = [1, 2, 5], nums2 = [2, 3, 4])",
        "minOperations(nums1 = [2,3,1,2], nums2 = [1,2,3,2])",
        "minOperations(nums1 = [1,2,1,2], nums2 = [2,2,1,1])",
        "minOperations(nums1 = [3, 2, 4, 1], nums2 = [2, 4, 1, 3])"
    ],
    "sample_350": [
        "alternatingSubarray(nums = [1,2,3,5,6,7,8])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10])",
        "alternatingSubarray([1, 2, 3, 3, 4, 5, 5, 5, 6])",
        "alternatingSubarray(nums = [1,2,3,4,5,6,7,8,9,10,11])",
        "alternatingSubarray([1, 2, 3, 4, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray([1, 2, 3, 4, 2, 5, 6, 2, 7, 8])",
        "alternatingSubarray([0, 1, 2, 2, 3, 4, 5, 5, 5, 6])",
        "alternatingSubarray([2, 3, 4, 3, 2, 2, 2, 4, 4, 4])",
        "alternatingSubarray(nums = [1, 3, 2, 2, 4, 5, 6, 4, 8])",
        "alternatingSubarray([1, 2, 3, 4, 2, 1, 3, 4, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    ],
    "sample_315": [
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1, 1, 2, 3], money = 4)",
        "buyChoco(prices = [5, 1, 2, 6], money = 10)",
        "buyChoco(prices = [2, 3, 1], money = 8)",
        "buyChoco(prices = [3, 2, 3], money = 6)",
        "buyChoco(prices = [2, 3, 1], money = 7)",
        "buyChoco(prices = [3,2,3], money = 7)",
        "buyChoco(prices = [2,3,1], money = 5)",
        "buyChoco(prices=[5, 1, 2], money=10)",
        "buyChoco(prices = [2,3,4,1], money = 5)"
    ],
    "sample_302": [
        "countSeniors(details = [\"123456789012\", \"987654321098\", \"123456789013\", \"987654321097\"])",
        "countSeniors(details = [\"John Doe, M, 25\", \"Jane Doe, F, 62\", \"Peter Parker, M, 65\"])",
        "countSeniors([\"John Doe, 22 years old\", \"Jacob Depp, 62 years old\", \"Jingleheimer Schmidt, 50 years old\", \"Jack Bauer, 20 years old\"])",
        "countSeniors([\"John Doe 1982\", \"Michael Johnson 1967\", \"Jane Doe 1960\", \"Jim Doe 1961\"])",
        "countSeniors(details = [\"John Doe 1990-01-01\", \"Jane Smith 1965-05-15\", \"Alice Johnson 1992-07-20\", \"Bob Brown 1960-11-15\"])",
        "countSeniors(details = [\"John Doe, 1982\", \"Jack Daniels, 1967\", \"Michael Jordan, 1980\", \"Lebron James, 2002\"])",
        "countSeniors(details = [\"A1234567890\", \"B5632189045\", \"C7890563214\", \"D6549873210\"])",
        "countSeniors(details = [\"John Doe 1981-08-13\", \"Michael Jordan 1985-12-13\", \"Robert Downey Jr 1988-06-18\"])",
        "countSeniors([\"John Doe, 32\", \"Sarah Jane, 65\", \"David Beckham, 58\", \"Sandra Bullock, 62\"])",
        "countSeniors(details = ['851-JK-6512', '789-GH-5126', '951-BN-6523', '987-TY-5214', '745-GH-6218'])"
    ],
    "sample_298": [
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"aeiob\", k = 2)",
        "beautifulSubstrings(s = \"banana\", k = 2)",
        "beautifulSubstrings(s = \"bac\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 4)",
        "beautifulSubstrings(s = \"aeiaeio\", k = 3)",
        "beautifulSubstrings(s = \"bbea\", k = 3)",
        "beautifulSubstrings(s = \"bnnn\", k = 3)",
        "beautifulSubstrings(s = \"rve\", k = 2)",
        "beautifulSubstrings(s = \"bzppzmmxzd\", k = 4)"
    ],
    "sample_255": [
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [1,3,5,2,9])",
        "minimumSum(nums = [1,2,1,3,2])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [3,2,5,6,1,4])",
        "minimumSum(nums = [1,2,4,6,9])",
        "minimumSum(nums = [1,2,1,4,7])",
        "minimumSum(nums = [1,5,9,2,6])",
        "minimumSum(nums = [1,2,4,7,3,5,6])",
        "minimumSum(nums=[1,1,1,2,3,4,5])"
    ],
    "sample_263": [
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,3,3,3,4])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,2,2,2,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [2, 1, 1, 1, 2, 2, 1, 1])"
    ],
    "sample_349": [
        "alternatingSubarray(nums = [1,2,3,5,6,7])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 6, 7])",
        "alternatingSubarray(nums = [1,2,3,3,4])",
        "alternatingSubarray([1, 2, 3, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 4])",
        "alternatingSubarray([10, 11, 12, 10, 11])",
        "alternatingSubarray([1, 2, 3, 5, 6, 7, 9])",
        "alternatingSubarray(nums = [2,3,4,5,7])",
        "alternatingSubarray([2, 2, 3, 3, 4])",
        "alternatingSubarray(nums = [1,2,3,5,6,7,8,11,12])"
    ],
    "sample_252": [
        "shortestBeautifulSubstring(s = '10110111', k = 2)",
        "shortestBeautifulSubstring(s = \"11011111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11110011\", k = 2)",
        "shortestBeautifulSubstring(s = '11110011', k = 2)",
        "shortestBeautifulSubstring(s = \"1111111\", k = 1)",
        "shortestBeautifulSubstring(s = '11111111111', k = 2)",
        "shortestBeautifulSubstring(s = '111111111100000000', k = 3)",
        "shortestBeautifulSubstring(s = '111100001100', k = 3)",
        "shortestBeautifulSubstring(s=\"101101110\", k=2)",
        "shortestBeautifulSubstring(s = \"11111111110111\", k = 3)"
    ],
    "sample_293": [
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"0110\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"01\")",
        "minimumSteps(s = \"01010\")"
    ],
    "sample_332": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abcdcba\")",
        "longestSemiRepetitiveSubstring(s = \"babba\")",
        "longestSemiRepetitiveSubstring(s = \"babcb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbd\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbaddb\")",
        "longestSemiRepetitiveSubstring(s = \"abcdbdabcd\")",
        "longestSemiRepetitiveSubstring(s = \"bbcccbbaa\")"
    ],
    "sample_265": [
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,3,3,3,4,4])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6,7,8,9,10])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5,6])",
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,2,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,3,4,4,4,4])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2,2,2,3,3,3])"
    ],
    "sample_307": [
        "countSeniors(details = [\"John68\", \"Alex72\", \"Sam45\", \"Eve56\"])",
        "countSeniors(details = [\"John1990\", \"Mary62\", \"Steve1965\", \"Harry65\"])",
        "countSeniors(details = [\"John18\", \"Senior20\", \"Mike65\", \"Jason62\"])",
        "countSeniors([\"JohnDoe67\", \"JaneDoe60\", \"SaraDoe55\", \"BobDoe62\"])",
        "countSeniors(details = [\"John68\", \"Alex80\", \"Derek55\", \"Yu62\", \"Tom80\"])",
        "countSeniors(details = [\"John56\", \"Jake45\", \"Jill48\", \"Foo56\", \"Bar60\"])",
        "countSeniors(details = [\"John Doe 69\",\"Jane Doe 35\",\"Mary Johnson 62\",\"James Smith 60\"])",
        "countSeniors(details = ['John Doe, Male, 61', 'John Smith, Male, 65', 'Lisa Brown, Female, 60', 'Sophie Johnson, Female, 70'])",
        "countSeniors(details = [\"John56789\", \"Bob98765\", \"Amy123456\", \"Dave654321\", \"Jessica23456\", \"Eva987654\"])",
        "countSeniors(details = ['70010145601', '68091234562', '80012356789'])"
    ],
    "sample_290": [
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"00101\")",
        "minimumSteps(s = \"000\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"10101\")",
        "minimumSteps(s = \"101010\")",
        "minimumSteps(s = \"0010\")",
        "minimumSteps(s = \"010101\")"
    ],
    "sample_352": [
        "relocateMarbles(nums = [1,1,2,3], moveFrom = [1,1], moveTo = [2,3])",
        "relocateMarbles(nums = [1, 1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [2,2,2], moveFrom = [2], moveTo = [3])",
        "relocateMarbles(nums = [1,2,2,3,3,3], moveFrom = [2,3], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,2,3,4], moveFrom = [1,2], moveTo = [3,2])",
        "relocateMarbles(nums = [1, 2, 2, 3, 4], moveFrom = [2, 2], moveTo = [1, 3])",
        "relocateMarbles(nums = [1,2,2,3,4], moveFrom = [2,2], moveTo = [3,4])",
        "relocateMarbles(nums = [1, 2, 2, 3], moveFrom = [2], moveTo = [1])",
        "relocateMarbles(nums = [1, 1, 2, 3], moveFrom = [1, 2], moveTo = [3, 2])",
        "relocateMarbles(nums = [1,2,2,3,4,4,5], moveFrom = [2,4], moveTo = [1,3])"
    ],
    "sample_346": [
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 4])",
        "alternatingSubarray(nums = [1, 2, 3, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 5])",
        "alternatingSubarray([1, 2, 3, 5])",
        "alternatingSubarray(nums = [2,2,3,4])",
        "alternatingSubarray(nums = [2,2,3,4])",
        "alternatingSubarray(nums = [2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [2, 4, 2, 6, 4, 7])"
    ],
    "sample_300": [
        "beautifulSubstrings(s = \"aei\", k = 3)",
        "beautifulSubstrings(s = \"aaa\", k = 3)",
        "beautifulSubstrings(s = \"awesome\", k = 10)",
        "beautifulSubstrings(s = \"aeio\", k = 4)",
        "beautifulSubstrings(s = \"aei\", k = 12)",
        "beautifulSubstrings(s = \"aeiou\", k = 5)",
        "beautifulSubstrings(s = \"aaa\", k = 2)",
        "beautifulSubstrings(s = \"aa\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 28)",
        "beautifulSubstrings(s = \"aeia\", k = 20)"
    ],
    "sample_242": [
        "maximumTripletValue(nums = [0, -1, 2])",
        "maximumTripletValue(nums = [1, 2, 6, 5])",
        "maximumTripletValue(nums = [1,3,5,7,9])",
        "maximumTripletValue([1,2,3])",
        "maximumTripletValue(nums = [5, 3, 2, 4])",
        "maximumTripletValue(nums = [0, -1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3,0,4])",
        "maximumTripletValue(nums = [1,4,2,5,3,2])",
        "maximumTripletValue([3, 4, 1, 6])",
        "maximumTripletValue(nums = [3,6,12,14,8,3])"
    ],
    "sample_335": [
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"cc\", \"dd\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"cc\", \"cd\", \"dc\", \"ca\"])",
        "maximumNumberOfStringPairs(words = [\"aa\", \"bb\", \"ab\", \"ba\", \"aa\", \"bb\"])",
        "maximumNumberOfStringPairs([\"aa\", \"bb\", \"bb\", \"aa\", \"cc\"])",
        "maximumNumberOfStringPairs(words = ['cd','ab','ba','dc','aa'])",
        "maximumNumberOfStringPairs(words = [\"ba\", \"ba\", \"zx\", \"zx\", \"mn\", \"mn\", \"op\", \"op\"])"
    ],
    "sample_245": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n=15, m=3)",
        "differenceOfSums(n=15, m=3)"
    ],
    "sample_314": [
        "buyChoco(prices = [1, 2, 3], money = 7)",
        "buyChoco(prices = [3,2,3], money = 8)",
        "buyChoco(prices = [2, 3, 1], money = 7)",
        "buyChoco(prices = [2,2,1,3], money = 4)",
        "buyChoco(prices = [5,1,20,10,3], money = 19)",
        "buyChoco(prices = [2,7,1,15], money = 20)",
        "buyChoco(prices = [10, 15, 20], money = 15)",
        "buyChoco(prices = [10,20,15,5,25], money = 20)",
        "buyChoco(prices = [10,15,5,20], money = 30)",
        "buyChoco(prices = [10, 2, 5, 8, 3], money = 18)"
    ],
    "sample_339": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\"])",
        "maximumNumberOfStringPairs([\"ab\",\"ba\",\"aa\"])",
        "maximumNumberOfStringPairs([\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"aa\",\"bb\",\"cd\",\"dc\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"baba\", \"foof\"])",
        "maximumNumberOfStringPairs(words = [\"abba\",\"cd\",\"ef\",\"baab\",\"dc\",\"fe\"])",
        "maximumNumberOfStringPairs([\"yo\", \"y\", \"o\"])"
    ],
    "sample_330": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabb\")",
        "longestSemiRepetitiveSubstring(s = \"abcda\")",
        "longestSemiRepetitiveSubstring(s = \"abbab\")",
        "longestSemiRepetitiveSubstring(s = \"ababab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabc\")",
        "longestSemiRepetitiveSubstring(s = \"babb\")",
        "longestSemiRepetitiveSubstring(s = \"bbccb\")"
    ],
    "sample_343": [
        "minimizeConcatenatedLength(words = [\"abc\",\"bca\",\"cab\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bca\",\"cab\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bca\", \"cab\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bca\", \"cab\"])",
        "minimizeConcatenatedLength([\"abc\",\"bca\",\"cab\"])",
        "minimizeConcatenatedLength([\"ab\",\"cd\",\"ef\"])",
        "minimizeConcatenatedLength(words = [\"ab\",\"cd\",\"ef\",\"gh\"])",
        "minimizeConcatenatedLength(words = [\"apple\", \"pleas\", \"ase\", \"se\"])",
        "minimizeConcatenatedLength(words = [\"aaa\", \"aaa\", \"aaa\"])",
        "minimizeConcatenatedLength(words=[\"apple\", \"grape\", \"blue\"])"
    ],
    "sample_323": [
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(79)"
    ],
    "sample_329": [
        "longestSemiRepetitiveSubstring(s = \"abcdb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"aabbcc\")",
        "longestSemiRepetitiveSubstring(s = \"abcba\")",
        "longestSemiRepetitiveSubstring(s = \"abab\")",
        "longestSemiRepetitiveSubstring(s = \"abbc\")",
        "longestSemiRepetitiveSubstring(s = \"abcabb\")",
        "longestSemiRepetitiveSubstring(s=\"ababa\")",
        "longestSemiRepetitiveSubstring(s=\"abca\")"
    ],
    "sample_305": [
        "countSeniors([\"John Doe, M, 40\", \"Jane Doe, F, 55\", \"Sam White, M, 61\", \"Lucy Black, F, 65\"])",
        "countSeniors([\"John Doe, 22, Male\", \"Tom Smith, 65, Male\", \"Jill Johnson, 60, Female\"])",
        "countSeniors([\"John Doe 24\", \"Smith Jane 56\", \"Will Turner 67\", \"Lisa Bonet 61\"])",
        "countSeniors([\"John Doe 1967\", \"Lisa Ann 23\", \"Bob Martin 60\"])",
        "countSeniors(details = ['M23', 'M45', 'F34', 'M67', 'F56', 'F78', 'M40'])",
        "countSeniors([\"John Doe 19900722\",\"Michael Jordan 19920615\", \"Roger Federer 19910808\", \"Brad Pitt 19921204\"])",
        "countSeniors([\"John Doe 12 22 1990\", \"Jane Smith 22 4 1995\", \"Peter Johnson 11 2 1960\", \"Michael Brown 12 8 1965\"])",
        "countSeniors([\"John Doe\", \"250199856782\", \"Jane Smith\", \"201219901234\", \"Average Dude\", \"150819871234\"])",
        "countSeniors(details = [\"John Doe 1981-06-29\",\"Sam Smith 1998-02-28\",\"Rose Johnson 1979-11-12\",\"Anne Smith 2002-07-07\"])",
        "countSeniors([\"John Doe 19901010\",\"Frank Smith 19850921\",\"Anna Johnson 19970615\",\"Lucy Brown 19670218\",\"Chris Moore 19700919\",\"Sophia Taylor 19750723\",\"Emma Davis 19620514\",\"Michael King 19680810\",\"Jennifer White 19550411\",\"Lily Green 19590116\"])"
    ],
    "sample_266": [
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,4,5])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 2, 2, 3, 3, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,2,3,1,2,3,1,2,3,5])",
        "minGroupsForValidAssignment(nums = [1,2,2,3,3,4,4,4,5,5,5,5,5])",
        "minGroupsForValidAssignment(nums = [1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10])",
        "minGroupsForValidAssignment(nums = [1, 2, 3, 3, 2, 3, 1])"
    ],
    "sample_257": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum([1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [2,1,6,4,3])",
        "minimumSum(nums = [5,4,3,2,1])",
        "minimumSum(nums = [3, 1, 2, 2])",
        "minimumSum(nums = [3, 2, 4, 5, 7])",
        "minimumSum(nums = [1,1,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"
    ],
    "sample_338": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"cd\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cc\"])"
    ],
    "sample_250": [
        "shortestBeautifulSubstring(s = \"110110110\", k = 3)",
        "shortestBeautifulSubstring(s = \"11011111\", k = 2)",
        "shortestBeautifulSubstring(s = '01101110', k = 2)",
        "shortestBeautifulSubstring(s = \"11111011\", k = 2)",
        "shortestBeautifulSubstring(s = '110110111', k = 3)",
        "shortestBeautifulSubstring(s = \"111110111\", k = 2)",
        "shortestBeautifulSubstring(s = \"11011110111011\", k = 3)",
        "shortestBeautifulSubstring(s = '11011111101', k = 3)",
        "shortestBeautifulSubstring(s = \"1101101101101110\", k = 2)",
        "shortestBeautifulSubstring(s = '11111011111101', k = 2)"
    ],
    "sample_301": [
        "lexicographicallySmallestArray(nums = [8, 1, 5, 3, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [9, 1, 3, 5, 8], limit = 2)",
        "lexicographicallySmallestArray(nums = [3, 1, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [1, 3, 5, 8, 9], limit = 3)",
        "lexicographicallySmallestArray(nums = [8, 1, 2, 2, 3, 5, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [5, 3, 1, 8, 9], limit = 4)",
        "lexicographicallySmallestArray(nums = [3, 5, 1, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [2, 3, 1, 5, 8, 9], limit = 2)",
        "lexicographicallySmallestArray(nums = [2, 1, 4, 3, 6], limit = 2)",
        "lexicographicallySmallestArray(nums = [8, 3, 1, 9, 5, 5, 5, 5, 5, 5], limit = 2)"
    ],
    "sample_310": [
        "matrixSum(a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(a = [[1]])",
        "matrixSum(a = [[1, 3], [2, 4]])",
        "matrixSum(a = [[2, 2, 1], [2, 2, 1], [2, 2, 1]])",
        "matrixSum(a = [[1, 0], [0, 1], [1, 0]])",
        "matrixSum([[2,1,3],[3,1,2],[1,3,2]])",
        "matrixSum(a = [[3,2,1], [4,5,6]])",
        "matrixSum(a = [[0, 2, 5], [1, 3, 2], [3, 3, 4]])",
        "matrixSum(a=[[1, 1, 1], [0, 1, 1], [1, 1, 1]])",
        "matrixSum(a = [[2, 5], [1, 5], [6, 7]])"
    ],
    "sample_295": [
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"aeiobaeiob\", k = 2)",
        "beautifulSubstrings(s = \"aeiobu\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaiooaeiouuaeiou\", k = 3)",
        "beautifulSubstrings(s = \"aeaeae\", k = 2)",
        "beautifulSubstrings(s = \"beautifulstrings\", k = 2)",
        "beautifulSubstrings(s = \"aeiea\", k = 2)",
        "beautifulSubstrings(s=\"aeaeae\", k=2)",
        "beautifulSubstrings(s = \"aeious\", k = 2)",
        "beautifulSubstrings(s = \"bnaanei\", k = 2)"
    ],
    "sample_337": [
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"aa\", \"bb\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs(words = [\"ab\", \"ba\", \"cd\", \"dc\", \"ef\", \"fe\", \"gh\", \"hg\"])",
        "maximumNumberOfStringPairs(words = [\"ab\",\"ba\",\"cd\",\"dc\"])",
        "maximumNumberOfStringPairs(words=[\"ab\", \"ba\", \"aa\", \"bb\", \"cd\", \"dc\"])",
        "maximumNumberOfStringPairs([\"abc\", \"cba\", \"aaa\", \"bbb\", \"ccc\", \"bbc\"])",
        "maximumNumberOfStringPairs(words = [\"abc\",\"cba\",\"a\",\"b\",\"ba\",\"abc\",\"cbaa\",\"ab\",\"ba\"])",
        "maximumNumberOfStringPairs([\"abba\", \"baba\", \"aba\", \"aaa\", \"nana\"])",
        "maximumNumberOfStringPairs(words = [\"abba\", \"baba\", \"bbaa\", \"cdcd\", \"dcba\", \"bbcc\", \"abcd\", \"baab\"])"
    ],
    "sample_325": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)"
    ],
    "sample_240": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1,2,3,4,5])",
        "maximumTripletValue(nums = [3, 2, 1, 5, 6])",
        "maximumTripletValue(nums = [1, 2, 3, 0, 6, 4])",
        "maximumTripletValue(nums = [5, 3, 1, 6])",
        "maximumTripletValue([3, 4, 5, 1, 2])",
        "maximumTripletValue(nums = [2,3,1,4,6,9])",
        "maximumTripletValue(nums = [2, -4, 0, 3, -1])",
        "maximumTripletValue(nums = [4, 4, 5, 0])"
    ],
    "sample_312": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum([[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,1]])",
        "matrixSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "matrixSum(nums = [[1,2],[3,4]])",
        "matrixSum(nums = [[2,1,3],[3,1,2],[1,3,2]])",
        "matrixSum(nums = [[1, 2, 3], [3, 4, 5], [5, 6, 7]])",
        "matrixSum(nums = [[2,1],[1,0]])",
        "matrixSum(nums = [[2,1,3],[3,1,2],[1,2,3]])",
        "matrixSum(nums = [[0, 3], [5, 2], [4, 1]])"
    ],
    "sample_281": [
        "minOperations(a = [1,2,5], b = [4,1,2])",
        "minOperations(a = [3,2,5], b = [1,2,6])",
        "minOperations(a = [1, 2, 3, 5, 4], b = [1, 2, 3, 4, 5])",
        "minOperations(a = [2,3,4,5,1], b = [1,5,4,3,2])",
        "minOperations(a = [2, 5, 3], b = [4, 6, 3])",
        "minOperations(a = [4, 3, 2, 5], b = [1, 3, 2, 3])",
        "minOperations(a = [2,5,3,8,4], b = [5,6,4,8,2])",
        "minOperations(a = [2,1,3,5,4], b = [5,2,3,1,4])",
        "minOperations(a = [2, 5, 3, 8], b = [4, 7, 6, 3])",
        "minOperations(a = [5, 4, 1, 9], b = [6, 4, 8, 7])"
    ],
    "sample_280": [
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minOperations(nums1 = [1,2,3], nums2 = [1,2,3])",
        "minOperations(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "minOperations(nums1 = [1,2,3,4,5,6], nums2 = [1,2,3,4,5,6])",
        "minOperations(nums1 = [2,2,2], nums2 = [1,1,1])",
        "minOperations(nums1 = [1,2,3], nums2 = [2,3,4])",
        "minOperations(nums1 = [2,1,3], nums2 = [2,1,3])",
        "minOperations(nums1 = [2,3,2,4,1], nums2 = [3,2,4,1,2])",
        "minOperations(nums1 = [2,3,1,2,2], nums2 = [2,3,1,2,2])"
    ],
    "sample_243": [
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [2, 3, 1, 4])",
        "maximumTripletValue(nums = [1, 2, 3, 0, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 0, 2, 1])",
        "maximumTripletValue(nums = [2, -1, -1])",
        "maximumTripletValue(nums = [2, 3, 4, 1, 3, 2])",
        "maximumTripletValue(nums = [1, 0, 2, 3, 0])",
        "maximumTripletValue(nums = [4, 5, 3, 2])",
        "maximumTripletValue(nums = [5, 1, 6, 1, 7, 8])",
        "maximumTripletValue(nums = [4, 3, 5, 0, 8, 7])"
    ],
    "sample_254": [
        "shortestBeautifulSubstring(s = '0110', k = 2)",
        "shortestBeautifulSubstring(s = \"00110110\", k = 2)",
        "shortestBeautifulSubstring(s=\"0110\", k=2)",
        "shortestBeautifulSubstring(s = \"00000000\", k = 2)",
        "shortestBeautifulSubstring(s = \"1110001111000\", k = 3)",
        "shortestBeautifulSubstring(s = \"11111011111\", k = 2)",
        "shortestBeautifulSubstring(s = \"0100101011\", k = 3)",
        "shortestBeautifulSubstring(s = \"01010011010\", k = 3)",
        "shortestBeautifulSubstring(s = \"1110111111011110001110111\", k = 3)",
        "shortestBeautifulSubstring(s = '1010110111110111', k = 4)"
    ],
    "sample_256": [
        "minimumSum(nums = [1,2,3,4,5])",
        "minimumSum(nums = [1,2,3,2,1])",
        "minimumSum(nums = [5,3,2,4,1,6])",
        "minimumSum(nums = [3,2,4,5,1])",
        "minimumSum(nums = [2,3,5,6,1])",
        "minimumSum(nums = [2, 3, 5, 4, 1])",
        "minimumSum(nums = [5,2,3,4,1])",
        "minimumSum(nums = [4,3,2,5,7])",
        "minimumSum([3, 2, 1, 5, 2, 4, 6])",
        "minimumSum([4,3,2,6,7,8,5,2,1,9])"
    ],
    "sample_291": [
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"1111\")",
        "minimumSteps(s = \"11111\")",
        "minimumSteps(s = \"0000\")",
        "minimumSteps(s = \"00000\")",
        "minimumSteps(s = \"1000\")",
        "minimumSteps(\"11111\")",
        "minimumSteps(s = \"111111111\")",
        "minimumSteps(s = \"111111111\")",
        "minimumSteps(s = \"01110\")"
    ],
    "sample_279": [
        "minOperations(nums1 = [1,2,4,3], nums2 = [1,3,2,3])",
        "minOperations(nums1 = [1,2,5,4,3], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [1,2,5,4,3], nums2 = [1,2,3,4,5])",
        "minOperations(nums1 = [5, 6, 4], nums2 = [3, 2, 1])",
        "minOperations(nums1 = [3,3,4,4,1,1], nums2 = [4,4,3,3,2,2])",
        "minOperations([1,2,3,4], [2,3,4,1])",
        "minOperations(nums1 = [1,2,4,4,1], nums2 = [2,2,1,1,1])",
        "minOperations(nums1 = [2, 4, 2], nums2 = [5, 1, 2])",
        "minOperations(nums1 = [1,1,1,2,3,3,1], nums2 = [2,2,2,1,3,1,1])",
        "minOperations(nums1 = [2,1,2,3,1,2,3,3,1,2], nums2 = [3,2,1,2,3,3,2,1,2,2])"
    ],
    "sample_277": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0,1,0],[1,0,0],[0,0,1]])",
        "findChampion(grid = [[0, 0, 1], [1, 0, 0], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 1, 0], [1, 0, 0]])",
        "findChampion(grid = [[1,1,0],[0,1,0],[0,1,1]])",
        "findChampion(grid = [[1,1,0],[0,1,0],[0,1,1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 0], [1, 1, 0]])"
    ],
    "sample_244": [
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 10, m = 3)",
        "differenceOfSums(n = 8, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 7, m = 3)",
        "differenceOfSums(n = 15, m = 3)",
        "differenceOfSums(n = 7, m = 2)"
    ],
    "sample_292": [
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"0101\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"0011\")"
    ],
    "sample_348": [
        "alternatingSubarray(nums = [1, 2, 3, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2])",
        "alternatingSubarray(nums = [1,2,3,3,2])",
        "alternatingSubarray([1, 2, 3, 3, 2])",
        "alternatingSubarray(nums = [1, 2, 3, 3, 2, 1])",
        "alternatingSubarray(nums = [1,2,3,3,4,5])",
        "alternatingSubarray([1, 2, 3, 5, 6])",
        "alternatingSubarray(nums = [2, 4, 6, 8])",
        "alternatingSubarray(nums = [1,2,3,5])",
        "alternatingSubarray(nums = [0, 2, 1, 3])"
    ],
    "sample_353": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [1, 2])",
        "relocateMarbles(nums = [1, 2, 2], moveFrom = [2, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 2, 3], moveFrom = [2, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 2, 3], moveFrom = [2, 2], moveTo = [2, 1])",
        "relocateMarbles(nums = [1, 2, 2], moveFrom = [2, 2], moveTo = [1, 2])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3, 4], moveFrom = [1, 2], moveTo = [3, 1])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [2, 1], moveTo = [1, 2])",
        "relocateMarbles(nums = [1,1,2,2,2,3,3,3,4,4,4,4], moveFrom = [1,2,3,4], moveTo = [2,3,4,1])"
    ],
    "sample_239": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 0])",
        "maximumTripletValue(nums = [2, 5, 3, 1, 4])",
        "maximumTripletValue(nums = [2, 5, 3, 1])",
        "maximumTripletValue(nums = [1, 2, 3, 1])",
        "maximumTripletValue(nums = [2, 4, 1, 9, 7])",
        "maximumTripletValue(nums = [2, 5, 3, 7, 1])",
        "maximumTripletValue(nums = [2, -1, 1, 3])",
        "maximumTripletValue(nums = [1, 2, 4, 3])",
        "maximumTripletValue([2, 0, 2, 2])"
    ],
    "sample_273": [
        "findChampion(grid = [[1,0,0],[1,0,0],[1,0,0]])",
        "findChampion(grid = [[0,1,1],[1,0,1],[1,1,0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0,0,1],[0,1,0],[1,0,0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 0, 1], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0,1,0],[1,0,1],[1,0,0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 0], [0, 0, 0]])",
        "findChampion(grid = [[0, 0, 0, 0], [1, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 0]])"
    ],
    "sample_267": [
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, -1, -2])",
        "minSum(nums1 = [2, 2, 2], nums2 = [2, 2, 2])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5])",
        "minSum(nums1 = [-1, -1, -1], nums2 = [-1, -1, -1])",
        "minSum(nums1 = [0, 0], nums2 = [1, 1])",
        "minSum(nums1 = [2, -1, 0], nums2 = [1, -1, 1])",
        "minSum(nums1 = [1,1,2,2], nums2 = [1,1,2,2])",
        "minSum(nums1 = [2, 1, 0], nums2 = [0, 0, 0])",
        "minSum(nums1 = [1, -1, 1], nums2 = [1, 2, 3])"
    ],
    "sample_294": [
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"101\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"10\")",
        "minimumSteps(s = \"110\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"00110\")",
        "minimumSteps(s = \"1001\")",
        "minimumSteps(s = \"001\")"
    ],
    "sample_274": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0,1,0],[1,0,0],[0,0,1]])",
        "findChampion(grid = [[1, 1, 0], [1, 0, 1], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 0], [1, 1, 1], [1, 0, 0]])",
        "findChampion(grid = [[1, 1, 0], [0, 1, 1], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid=[[0, 1, 1], [1, 0, 0], [1, 1, 0]])",
        "findChampion(grid = [[1,0,1],[0,0,0],[1,0,1]])",
        "findChampion(grid=[[1, 1, 0], [1, 0, 0], [1, 0, 0]])",
        "findChampion(grid=[[0, 1], [0, 0], [0, 0], [0, 0]])"
    ],
    "sample_262": [
        "minGroupsForValidAssignment(nums = [1,1,1,2,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,3,3,3,3,4])",
        "minGroupsForValidAssignment(nums = [2,2,2,3,3,3,4,4,4,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,2,1,2,2,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,2,2,2,2,2,1,1,1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,2,2,2,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1, 2, 2, 2, 3, 3, 4])",
        "minGroupsForValidAssignment(nums = [1,2,2,1,1,1,1,2,2,2,3,3,3,3,2])",
        "minGroupsForValidAssignment(nums = [2,1,2,1,3,1,2,3,3,2,2,2,1,1,1,3,3,3,1,1,2,2])"
    ],
    "sample_270": [
        "minSum(nums1 = [1, 2, 3], nums2 = [4, 5, 6])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 4, 5])",
        "minSum(nums1 = [1, 2, 3], nums2 = [0, 5, 6])",
        "minSum(nums1=[1,2,3], nums2=[0,0,0])",
        "minSum(nums1 = [1, 2, 3], nums2 = [1, 2, 3])",
        "minSum(nums1 = [3,5,2,3], nums2 = [0,1,2,3])",
        "minSum(nums1=[1, 1, 1], nums2=[1, 0, 1])",
        "minSum(nums1 = [1, 1, 2, 3], nums2 = [1, 0, 2, 3])",
        "minSum(nums1=[3, 5, 2, 3], nums2=[0, 0, 0, 0])"
    ],
    "sample_317": [
        "buyChoco(prices = [3,2,3], money = 4)",
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices = [3, 2, 3], money = 4)",
        "buyChoco(prices = [3,2,3], money = 10)",
        "buyChoco(prices = [3, 1, 2], money = 4)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [1,1,2,3], money = 4)",
        "buyChoco(prices = [4,3,2,1], money = 10)",
        "buyChoco(prices = [3,1,2], money = 10)",
        "buyChoco(prices = [5,1,10,100,50,25,25], money = 50)"
    ],
    "sample_296": [
        "beautifulSubstrings(s = \"aei\", k = 2)",
        "beautifulSubstrings(s = \"aei\", k = 3)",
        "beautifulSubstrings(s = \"aeio\", k = 2)",
        "beautifulSubstrings(s = \"aaa\", k = 3)",
        "beautifulSubstrings(s = \"aaaaaaa\", k = 2)",
        "beautifulSubstrings(s = \"rhythm\", k = 2)",
        "beautifulSubstrings(s = \"aeioub\", k = 2)",
        "beautifulSubstrings(s = \"ae\", k = 1)",
        "beautifulSubstrings(s = \"iaiai\", k = 2)",
        "beautifulSubstrings(s = \"aeiobuioeuaeiou\", k = 5)"
    ],
    "sample_331": [
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcd\")",
        "longestSemiRepetitiveSubstring(s = \"abcdb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"abcabcbb\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"ababa\")",
        "longestSemiRepetitiveSubstring(s = \"abcdab\")",
        "longestSemiRepetitiveSubstring(s = \"abcabb\")"
    ],
    "sample_341": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 2, y = 3, z = 1)",
        "longestString(x = 3, y = 2, z = 2)",
        "longestString(x = 2, y = 4, z = 2)",
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 1, y = 4, z = 2)",
        "longestString(x = 1, y = 4, z = 2)",
        "longestString(x = 4, y = 2, z = 3)",
        "longestString(x = 1, y = 4, z = 3)"
    ],
    "sample_271": [
        "minSum(nums1 = [1,7,1], nums2 = [2,3,10])",
        "minSum(nums1 = [1, 1, 1], nums2 = [2, 2, 2])",
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1=[1,2,3,0,0], nums2=[4,5,6])",
        "minSum(nums1 = [4,2,5,1], nums2 = [1,2,3,4])",
        "minSum(nums1 = [1,1,3], nums2 = [4,3,2])",
        "minSum(nums1 = [0,0,0,0], nums2 = [2,3,4,1])",
        "minSum(nums1 = [3,4,5,6,7], nums2 = [3,2,1,0,0])",
        "minSum(nums1 = [1,1,0,0,0,0,0,0,0,1,1], nums2 = [1,1,1,1,1,0,0,0,0,0])",
        "minSum(nums1 = [1,3,2,5,0,1], nums2 = [0,2,1,1,0,1])"
    ],
    "sample_340": [
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 2, y = 3, z = 2)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 3, y = 4, z = 1)",
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 4, y = 3, z = 2)",
        "longestString(x = 3, y = 2, z = 3)",
        "longestString(x = 1, y = 2, z = 2)",
        "longestString(x = 2, y = 4, z = 0)",
        "longestString(x = 2, y = 2, z = 3)"
    ],
    "sample_253": [
        "shortestBeautifulSubstring(s = \"11\", k = 2)",
        "shortestBeautifulSubstring(s = '11', k = 2)",
        "shortestBeautifulSubstring(s = \"111\", k = 3)",
        "shortestBeautifulSubstring(s = \"31415926535\", k = 9)",
        "shortestBeautifulSubstring(s = '112233445566', k = 12)",
        "shortestBeautifulSubstring(s = \"123456789\", k = 7)",
        "shortestBeautifulSubstring(s = \"1231121\", k = 6)",
        "shortestBeautifulSubstring(s = '12345678910111213141516171819202', k = 15)",
        "shortestBeautifulSubstring(s = \"3512700\", k = 11)",
        "shortestBeautifulSubstring(s = '245711', k = 5)"
    ],
    "sample_324": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)",
        "isFascinating(n = 192)"
    ],
    "sample_258": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [3, 4, 6, 7, 2])",
        "minimumSum(nums = [2, 3, 4, 6, 7])",
        "minimumSum(nums = [1, 2, 3, 5, 9])",
        "minimumSum([2, 3, 4, 6, 9])",
        "minimumSum(nums = [3, 6, 1, 3, 5, 6])",
        "minimumSum(nums = [2, 9, 5, 3, 1, 8])",
        "minimumSum([2, 6, 4, 8])",
        "minimumSum(nums = [2, 7, 4, 9, 1, 5])",
        "minimumSum(nums = [2, 7, 11, 4, 8, 1])"
    ],
    "sample_268": [
        "minSum(nums1 = [1,2,3], nums2 = [4,5,6])",
        "minSum(nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,0])",
        "minSum(nums1 = [4, 2, 1], nums2 = [1, 2, 3])",
        "minSum(nums1 = [2, 1, 2], nums2 = [1, 2, 1])",
        "minSum(nums1 = [1, 2, 0, 0, 0], nums2 = [5, 6, 1])",
        "minSum(nums1 = [5,1,2], nums2 = [0,2,0])",
        "minSum(nums1 = [7,2,0,0], nums2 = [5,5,1,0])",
        "minSum(nums1 = [3, 2, 1, 0, 4], nums2 = [0, 1, 6, 5, 0])",
        "minSum(nums1 = [3,4,5,0,2], nums2 = [1,3,5,2,0])",
        "minSum(nums1 = [2, 5, 3, 0], nums2 = [1, 5, 4, 3])"
    ],
    "sample_288": [
        "findMinimumOperations(s1 = \"abcabcabc\", s2 = \"abcabcabc\", s3 = \"abcabcabc\")",
        "findMinimumOperations(s1 = \"abcabcabc\", s2 = \"abcabcabc\", s3 = \"abcabcabc\")",
        "findMinimumOperations(s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"abcabcabc\", s2 = \"abcabcabc\", s3 = \"abcabcabc\")",
        "findMinimumOperations(s1 = \"bana\", s2 = \"nana\", s3 = \"nana\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"na\")",
        "findMinimumOperations(s1 = \"ban\", s2 = \"nan\", s3 = \"ana\")",
        "findMinimumOperations(s1 = \"lovelace\", s2 = \"lovelace\", s3 = \"lovelace\")",
        "findMinimumOperations(s1 = \"mqt\", s2 = \"px\", s3 = \"zy\")"
    ],
    "sample_321": [
        "maxStrength(nums = [2, -3, 4, -5])",
        "maxStrength(nums = [2, 3, 4])",
        "maxStrength(nums = [2, -4, 5, 3])",
        "maxStrength(nums = [2, -4, 6, 8, -10])",
        "maxStrength(nums = [2, -1, 3, 4, -1, -2, 5])",
        "maxStrength([5, 2, -3, -4, -5])",
        "maxStrength(nums = [3, -2, -1, 5, 6])",
        "maxStrength(nums = [10, 2, -4, 5, 6])",
        "maxStrength([1, -2, -3, 5])",
        "maxStrength([5, -2, 3, -4, 10, -100, 20])"
    ],
    "sample_355": [
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1], moveTo = [2])",
        "relocateMarbles(nums = [1, 2, 3], moveFrom = [1, 3], moveTo = [2, 1])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,3], moveTo = [2,3])",
        "relocateMarbles(nums = [1,2,3], moveFrom = [1,2], moveTo = [2,1])",
        "relocateMarbles(nums = [1,2,2,3,4], moveFrom = [2,2], moveTo = [5,5])",
        "relocateMarbles(nums=[1, 2, 2, 3], moveFrom=[2, 2], moveTo=[1, 3])",
        "relocateMarbles(nums=[1,2,2,3], moveFrom=[2,2], moveTo=[2,1])"
    ],
    "sample_357": [
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [6, 8], moveTo = [7, 10])",
        "relocateMarbles(nums = [4, 5, 6, 8, 9], moveFrom = [4, 5], moveTo = [6, 7])",
        "relocateMarbles(nums = [8,5,9,6], moveFrom = [8,5], moveTo = [6,5])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9, 10], moveFrom = [6, 7], moveTo = [6, 9])",
        "relocateMarbles(nums=[5, 5, 6, 5, 8, 9], moveFrom=[6, 5], moveTo=[7, 5])",
        "relocateMarbles(nums = [8,5,9,6,6,7], moveFrom = [6,7], moveTo = [5,8])",
        "relocateMarbles(nums = [5,6,7,8,9,6,7,8,9], moveFrom = [6,7,8], moveTo = [7,8,9])",
        "relocateMarbles(nums = [5, 5, 5, 5, 8, 9, 9, 6], moveFrom = [5, 9], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 2, 9, 6, 1, 8], moveFrom = [5, 2, 9], moveTo = [8, 5, 6])",
        "relocateMarbles(nums = [5, 1, 2, 6, 3, 8, 4, 7, 9], moveFrom = [1, 4, 7], moveTo = [6, 9, 5])"
    ],
    "sample_318": [
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [1, 2, 2], money = 3)",
        "buyChoco(prices = [5, 1, 2], money = 10)",
        "buyChoco(prices = [1, 2, 2, 1], money = 5)",
        "buyChoco(prices = [2, 3, 1, 5], money = 10)",
        "buyChoco(prices = [1, 1, 1], money = 3)",
        "buyChoco(prices = [2,3,4], money = 5)",
        "buyChoco(prices = [10, 20, 30, 40], money = 60)",
        "buyChoco(prices=[1, 2, 5], money=10)",
        "buyChoco(prices = [50, 100, 70], money = 150)"
    ],
    "sample_308": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "matrixSum([[3,2,1],[4,5,6]])",
        "matrixSum(nums = [[3,2,1], [6,5,4], [9,8,7]])",
        "matrixSum([[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "matrixSum(nums = [[1, 2, 3], [2, 2, 3]])",
        "matrixSum(nums = [[3, 2, 1, 3], [3, 2, 1, 3]])",
        "matrixSum(nums = [[1, 2, 3], [0, 3, 2], [4, 1, 1]])",
        "matrixSum(nums = [[1, 0, 0], [2, 3, 0]])",
        "matrixSum([[1,2,3,4],[0,1,2,4],[0,1,0,0]])"
    ],
    "sample_319": [
        "buyChoco(prices = [1, 2, 3], money = 5)",
        "buyChoco(prices = [2, 1, 3], money = 7)",
        "buyChoco(prices = [1, 2, 3], money = 4)",
        "buyChoco(prices = [5, 1, 2], money = 10)",
        "buyChoco(prices = [2,3], money = 5)",
        "buyChoco(prices = [2, 1, 3], money = 6)",
        "buyChoco(prices = [1,1,1,1], money = 4)",
        "buyChoco(prices = [1,2,3], money = 5)",
        "buyChoco(prices = [5,1,10], money = 10)",
        "buyChoco(prices = [2, 3, 1, 10], money = 15)"
    ],
    "sample_259": [
        "minimumSum(nums = [2,1,5,4,3])",
        "minimumSum([2, 1, 5, 4, 3])",
        "minimumSum(nums = [4,2,3,5,1])",
        "minimumSum(nums = [2,5,3,1,4])",
        "minimumSum([4,2,3,5,1,6])",
        "minimumSum(nums = [4,2,3,1,5])",
        "minimumSum([1,1,1,1,1,1])",
        "minimumSum(nums = [1,5,6,8,3,9,2])",
        "minimumSum(nums = [5,2,4,7,6,1])",
        "minimumSum([1,2,4,5,7,0])"
    ],
    "sample_351": [
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray([1, 2, 3, 4, 5, 6])",
        "alternatingSubarray([1, 2, 3, 5, 6, 7])",
        "alternatingSubarray([1, 2, 3, 5, 6, 7, 8])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 7, 9])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 7])",
        "alternatingSubarray([1, 3, 5, 6, 4, 2])",
        "alternatingSubarray(nums = [5, 4, 2, 2, 1, 10, 10, 10])"
    ],
    "sample_311": [
        "matrixSum(nums = [[1,2,3],[4,5,6],[7,8,9]])",
        "matrixSum(nums = [[2, 1], [1, 2]])",
        "matrixSum(nums = [[2, 1, 1], [1, 2, 1], [1, 1, 2]])",
        "matrixSum(nums = [[1,2,3],[0,5,4]])",
        "matrixSum(nums = [[7, 2, 1], [5, 3, 6]])",
        "matrixSum(nums = [[2, 2], [1, 3], [0, 0]])",
        "matrixSum(nums = [[1,2,3],[4,5,1],[7,1,2]])",
        "matrixSum(nums = [[7,2,1],[5,4,9]])",
        "matrixSum(nums = [[2,1,3],[0,4,5],[0,0,0]])",
        "matrixSum([[7,5,1], [8,9,4]])"
    ],
    "sample_316": [
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [1, 2, 3], money = 5)",
        "buyChoco(a = [2, 3], money = 5)",
        "buyChoco(a = [3, 1, 2], money = 8)",
        "buyChoco(a = [30, 10, 20], money = 100)",
        "buyChoco(a=[1, 2, 3, 4], money=6)",
        "buyChoco(a = [10, 20, 30, 40, 50], money = 60)",
        "buyChoco(a=[1, 1, 3], money=3)",
        "buyChoco(a = [10, 15, 20, 5], money = 19)"
    ],
    "sample_264": [
        "minGroupsForValidAssignment(nums = [3,3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [3,3,3,3,3])",
        "minGroupsForValidAssignment(nums = [1,1,2,2,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,1,1])",
        "minGroupsForValidAssignment(nums = [1,1,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums = [1, 1, 2, 2, 3, 3])",
        "minGroupsForValidAssignment(nums = [1, 1, 1, 2, 2, 2, 2])",
        "minGroupsForValidAssignment(nums = [2,2,1,1,1,2,2])",
        "minGroupsForValidAssignment(nums = [1,1,2,1,2,1,1,2,2,2])",
        "minGroupsForValidAssignment(nums=[1, 1, 1, 2, 2, 2, 2])"
    ],
    "sample_276": [
        "findChampion(grid = [[0, 1, 0], [0, 0, 1], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0,1,0],[0,0,1],[1,0,0]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[0,1,0], [1,0,0], [0,0,1]])",
        "findChampion(grid = [[0,1,0],[1,0,0],[0,0,1]])",
        "findChampion(grid = [[0,1,0],[1,0,1],[0,1,0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 0, 1], [1, 1, 0, 0], [0, 0, 1, 0]])",
        "findChampion([[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0,1,0,0], [0,0,0,1], [1,0,0,0], [0,1,1,0]])"
    ],
    "sample_320": [
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 5])",
        "maxStrength(nums = [2, 3, 4])",
        "maxStrength(nums = [2, 4, 5])",
        "maxStrength(nums = [2, 3, 4, 2])",
        "maxStrength(nums = [2, 2, 4])",
        "maxStrength(nums = [2, 3, 1, 4])",
        "maxStrength(nums = [2, 5, 6])",
        "maxStrength(nums = [2, 2, 5, 4])"
    ],
    "sample_344": [
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"de\", \"f\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"de\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"de\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"ba\"])",
        "minimizeConcatenatedLength([\"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bcd\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"def\",\"ghi\"])",
        "minimizeConcatenatedLength(words = ['abc', 'def'])"
    ],
    "sample_285": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"abcdef\", s2 = \"abcdef\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"abab\", s2 = \"abab\", s3 = \"abab\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"na\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"abcd\", s3 = \"abcdef\")",
        "findMinimumOperations(s1 = \"bbabba\", s2 = \"bbabba\", s3 = \"bbabba\")",
        "findMinimumOperations(s1 = \"ba\", s2 = \"na\", s3 = \"ba\")",
        "findMinimumOperations(s1 = \"bba\", s2 = \"bbc\", s3 = \"bbd\")",
        "findMinimumOperations(s1 = \"aaaaaa\", s2 = \"bbbbbb\", s3 = \"ccc\")"
    ],
    "sample_347": [
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 7, 9, 11])",
        "alternatingSubarray(nums = [1, 2, 3, 5, 7, 9, 11])",
        "alternatingSubarray(nums = [1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7])",
        "alternatingSubarray(nums = [1,2,3,5,7,9])",
        "alternatingSubarray([1,2,3,4,5,6])",
        "alternatingSubarray(nums = [1,2,3,5,7,9,11,13])"
    ],
    "sample_278": [
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[0, 1, 0], [1, 0, 1], [0, 1, 0]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 0], [1, 0, 0]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[0,1,0], [1,0,0], [0,0,1]])",
        "findChampion(grid = [[0, 0, 1], [0, 0, 0], [0, 1, 0]])"
    ],
    "sample_304": [
        "countSeniors([\"John Doe, M, 40\", \"Jane Smith, S, 62\", \"Sam Johnson, M, 65\"])",
        "countSeniors(details=[\"John Doe M 22 NY 1995\", \"John Doe M 22 NY 1967\", \"John Doe M 22 NY 1960\", \"John Doe M 22 NY 1995\"])",
        "countSeniors(details = [\"John Doe,56\", \"Jack Smith,62\", \"Jill Brown,68\", \"Jim White,66\"])",
        "countSeniors(details=[\"John Doe, 1990-06-20\", \"Michael Jordan, 1988-06-15\", \"Jimmy Fallon, 1963-08-16\"])",
        "countSeniors(details = [\"A123456789ABCD1990\", \"B987654321YXCV9234\", \"A123456789ABCD1960\"])",
        "countSeniors(details = [\"Jack /08/2003\", \"John /12/1961\", \"Doe /10/1960\"])",
        "countSeniors([\"Mike Male 22 170\",\"John Female 27 180\",\"Anna Male 62 165\",\"Laura Female 58 170\"])",
        "countSeniors(details = [\"John Doe 1990-01-01\", \"Michael Jordan 1988-06-17\", \"Jimmy Durante 1960-04-10\", \"Shaquille O'Neal 1967-03-06\"])",
        "countSeniors([\"S115\",\"S211\",\"S130\",\"S201\"])",
        "countSeniors(details = [\"770321123456\",\"600512889012\",\"800921777777\"])"
    ],
    "sample_297": [
        "beautifulSubstrings(s = \"awesome\", k = 2)",
        "beautifulSubstrings(s = \"awesome\", k = 2)",
        "beautifulSubstrings(s = \"awesome\", k = 2)",
        "beautifulSubstrings(s = \"awesome\", k = 2)",
        "beautifulSubstrings(s = \"awesome\", k = 2)",
        "beautifulSubstrings(s = \"awesome\", k = 2)",
        "beautifulSubstrings(s = \"beautiful\", k = 2)",
        "beautifulSubstrings(s = \"aeiaaioooaauuaei\", k = 3)",
        "beautifulSubstrings(s = \"aeiaaiooiaaaeiou\", k = 4)",
        "beautifulSubstrings(s=\"aea\", k=2)"
    ],
    "sample_251": [
        "shortestBeautifulSubstring(s = \"110110110\", k = 2)",
        "shortestBeautifulSubstring(s
        "shortestBeautifulSubstring(s = \"1101111001\", k = 2)",
        "shortestBeautifulSubstring(s = '111111111', k = 2)",
        "shortestBeautifulSubstring(s = '11110000', k = 2)",
        "shortestBeautifulSubstring(s = \"11111011110\", k = 2)",
        "shortestBeautifulSubstring(s = \"1101101101101101101\", k = 3)",
        "shortestBeautifulSubstring(s = '01011011', k = 2)",
        "shortestBeautifulSubstring(s = \"11111000110001\", k = 3)",
        "shortestBeautifulSubstring(s = \"111001111100001110001111\", k = 3)"
    ],
    "sample_345": [
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"bc\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ab\", \"cd\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"ba\", \"nana\"])",
        "minimizeConcatenatedLength(words = [\"abc\", \"bcd\"])",
        "minimizeConcatenatedLength(words = [\"abc\",\"bcd\"])"
    ],
    "sample_327": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(n = 192)"
    ],
    "sample_309": [
        "matrixSum(nums = [[1]])",
        "matrixSum(nums = [[1, 2], [3, 4]])",
        "matrixSum(nums = [[3,1,2],[4,5,6],[7,8,9]])",
        "matrixSum(nums=[[5, 1, 3], [2, 9, 6], [8, 4, 7]])",
        "matrixSum(nums = [[2,1],[0,2]])",
        "matrixSum([[1, 2, 3], [0, 5, 4]])",
        "matrixSum(nums = [[2,1,3],[0,1,2],[4,1,0]])",
        "matrixSum(nums = [[3, 1, 2], [4, 1, 4], [5, 2, 1]])",
        "matrixSum(nums = [[5, 1, 2], [1, 0, 2], [0, 1, 1]])",
        "matrixSum(nums = [[7,5,3,1],[6,4,2,0],[9,8,10,11]])"
    ],
    "sample_326": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_275": [
        "findChampion(grid = [[1, 1, 0], [0, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[0, 1, 1], [1, 0, 1], [1, 1, 0]])",
        "findChampion(grid = [[1,0,0],[0,1,0],[0,0,1]])",
        "findChampion(grid = [[1, 0, 1], [1, 1, 0], [0, 1, 1]])",
        "findChampion(grid = [[1, 0, 1], [1, 0, 1], [0, 0, 1]])",
        "findChampion(grid = [[0,1,0,0,1], [1,0,1,0,0], [0,1,0,1,0], [0,0,1,0,1], [1,0,0,1,0]])",
        "findChampion(grid = [[1, 0, 1], [0, 0, 0], [1, 0, 1]])",
        "findChampion(grid = [[0,1,0,0],[1,0,1,0],[1,0,0,1],[0,1,0,0]])",
        "findChampion(grid = [[0, 1, 0, 0], [0, 0, 1, 0], [1, 1, 0, 0], [0, 0, 0, 1]])",
        "findChampion(grid = [[1,0,0,1,0], [0,1,1,1,1], [0,0,1,0,1], [0,1,0,0,0], [1,1,1,0,1]])"
    ],
    "sample_260": [
        "minimumSum(nums = [1, 2, 3, 4, 5])",
        "minimumSum(nums = [1, 2, 3, 4, 5, 6])",
        "minimumSum(nums = [1,2,3,4,5,6])",
        "minimumSum(nums = [5, 2, 6, 1, 12])",
        "minimumSum(nums = [3, 1, 5, 2, 7])",
        "minimumSum(nums = [3, 5, 2, 8, 1, 6])",
        "minimumSum(nums = [1, 7, 3, 4, 9])",
        "minimumSum(nums = [1, 5, 7, 3, 2, 4])",
        "minimumSum(nums = [2, 9, 5, 3, 1, 8, 7])",
        "minimumSum(nums = [1,2,1,2,1,3,2,3,1,2,3])"
    ],
    "sample_322": [
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)",
        "isFascinating(192)"
    ],
    "sample_248": [
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 2)",
        "minOperations(s1 = \"010\", s2 = \"011\", x = 2)",
        "minOperations(s1 = \"1001\", s2 = \"1100\", x = 2)",
        "minOperations(s1 = \"00\", s2 = \"00\", x = 2)",
        "minOperations(s1 = \"1010\", s2 = \"0101\", x = 100)",
        "minOperations(s1 = \"110\", s2 = \"110\", x = 4)",
        "minOperations(s1 = \"0101\", s2 = \"0110\", x = 1)",
        "minOperations(s1 = \"011\", s2 = \"100\", x = 5)",
        "minOperations(s1 = \"0101\", s2 = \"0100\", x = 3)",
        "minOperations(s1 = \"10110\", s2 = \"10101\", x = 3)"
    ],
    "sample_342": [
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 3, y = 3, z = 3)",
        "longestString(x = 1, y = 2, z = 3)",
        "longestString(x = 3, y = 3, z = 2)",
        "longestString(x = 5, y = 5, z = 2)",
        "longestString(x = 2, y = 2, z = 2)",
        "longestString(x = 5, y = 6, z = 2)",
        "longestString(x=5, y=4, z=3)",
        "longestString(x=2, y=4, z=2)"
    ],
    "sample_354": [
        "relocateMarbles(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], moveFrom = [1, 3, 5], moveTo = [6, 8, 9])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 5], moveTo = [6, 8])",
        "relocateMarbles(nums = [5, 3, 9, 6, 8], moveFrom = [3, 9], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 6], moveTo = [7, 9])",
        "relocateMarbles(nums = [6, 5, 8, 9], moveFrom = [6], moveTo = [7])",
        "relocateMarbles(nums = [5, 3, 9, 6, 8, 7], moveFrom = [3, 9], moveTo = [7, 4])",
        "relocateMarbles(nums = [3, 5, 6, 8], moveFrom = [5, 6], moveTo = [9, 8])",
        "relocateMarbles(nums = [5, 4, 1, 2, 3], moveFrom = [1, 3, 5], moveTo = [2, 4, 6])",
        "relocateMarbles(nums = [3, 3, 5, 6, 8], moveFrom = [3, 5], moveTo = [5, 3])",
        "relocateMarbles(nums = [4, 7, 5, 9, 6, 8], moveFrom = [7, 4], moveTo = [2, 3])"
    ],
    "sample_306": [
        "countSeniors(details = [\"John Doe, 40\", \"Jane Doe, 62\", \"Jim Doe, 70\"])",
        "countSeniors(details = [\"John Doe, M, 40\", \"Jane Doe, F, 55\", \"Peter Parker, M, 62\", \"Clark Kent, M, 23\"])",
        "countSeniors(details = [\"John Doe, M, 40\", \"Smith, M, 61\", \"Jane Doe, F, 55\"])",
        "countSeniors(details = ['John Doe, 40', 'Jane Doe, 55', 'John Smith, 70', 'Jane Smith, 65'])",
        "countSeniors(details = [\"John Doe, M, 40\", \"William Smith, M, 55\", \"Jane Doe, F, 60\", \"Emma Johnson, F, 65\"])",
        "countSeniors(details = [\"John Doe, M, 40\", \"William Smith, M, 65\", \"Sophia Johnson, F, 50\", \"Mike Brown, M, 62\"])",
        "countSeniors(details = [\"John Doe, M, 34\", \"Jane Doe, F, 48\", \"Peter Smith, M, 63\", \"Linda Johnson, F, 67\"])",
        "countSeniors(details = ['John Doe, Male, 62', 'Jane Doe, Female, 65', 'Peter Parker, Male, 70', 'Clark Kent, Male, 58'])",
        "countSeniors(details = [\"John Doe, 40\", \"Jane Doe, 62\", \"Alice Johnson, 70\", \"Bob Smith, 64\"])",
        "countSeniors(details = [\"John Doe 1981-02-12\", \"Michael Jordan 1984-11-28\", \"Jimmy Carter 1961-05-17\", \"Abba Abbasi 1996-04-02\"])"
    ],
    "sample_303": [
        "countSeniors(details = [\"John Doe, 65\", \"Jane Doe, 63\", \"John Smith, 60\", \"Jane Smith, 62\"])",
        "countSeniors(details = [\"John Doe 1981\", \"Michael Jordan 1963\", \"Will Smith 1968\", \"Serena Williams 1981\"])",
        "countSeniors(details = [\"John Smith 34\", \"John Doe 56\", \"Will Turner 67\", \"Anna Johnson 64\"])",
        "countSeniors([\"John Doe, 32\", \"Jack Smith, 47\", \"Jill Brown, 65\", \"Lisa White, 72\"])",
        "countSeniors(details = [\"John, 12\", \"Sarah, 65\", \"Jane, 62\", \"Tom, 58\"])",
        "countSeniors([\"Amy2010\", \"John68\", \"Sara56\", \"Mark1993\", \"Steve63\", \"Sophie60\"])",
        "countSeniors([\"John Smith, 69\", \"Jackie Jackson, 47\", \"Lisa Simpson, 59\", \"Maggie Simpson, 54\"])",
        "countSeniors([\"Paul,23\", \"Adam,60\", \"Lisa,88\", \"John,70\", \"Ryan,65\"])",
        "countSeniors(details = [\"John,40\",\"Dan,55\",\"Mike,61\",\"Steve,60\",\"Lisa,70\"])",
        "countSeniors(details = [\"John Doe, 1982\", \"Martin Johnson, 1991\", \"Michaela Yohan, 61\", \"Jane O firm, 62\"])"
    ],
    "sample_356": [
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [6, 7], moveTo = [6, 7])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [7, 6], moveTo = [7, 5])",
        "relocateMarbles(nums=[5, 6, 8, 9], moveFrom=[6, 8], moveTo=[7, 10])",
        "relocateMarbles(nums = [6, 7, 8, 9, 10], moveFrom = [7, 8], moveTo = [5, 6])",
        "relocateMarbles(nums = [5, 6, 9], moveFrom = [9], moveTo = [8])",
        "relocateMarbles(nums = [5, 6, 8, 9], moveFrom = [5, 8], moveTo = [7, 10])",
        "relocateMarbles(nums = [5, 6, 7, 8, 9], moveFrom = [5, 7], moveTo = [6, 7])",
        "relocateMarbles(nums=[5, 3, 9, 6, 8, 7], moveFrom=[3, 7], moveTo=[6, 5])",
        "relocateMarbles(nums = [8, 6, 5, 9], moveFrom = [6, 5], moveTo = [9, 7])",
        "relocateMarbles(nums = [6, 7, 8, 9, 10, 5, 6], moveFrom = [7, 10], moveTo = [5, 6])"
    ],
    "sample_286": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"xxx\", s2 = \"yyy\", s3 = \"zzz\")",
        "findMinimumOperations(s1 = \"aab\", s2 = \"abc\", s3 = \"aac\")",
        "findMinimumOperations(s1 = \"aabc\", s2 = \"aabc\", s3 = \"aabc\")",
        "findMinimumOperations(s1 = \"bbb\", s2 = \"b\", s3 = \"bbb\")",
        "findMinimumOperations(s1 = \"xxz\", s2 = \"xzx\", s3 = \"zzx\")"
    ],
    "sample_283": [
        "findMinimumOperations(s1 = \"abc\", s2 = \"abc\", s3 = \"abc\")",
        "findMinimumOperations(s1 = \"apple\", s2 = \"apple\", s3 = \"apple\")",
        "findMinimumOperations(s1 = \"aaa\", s2 = \"aaa\", s3 = \"aaa\")",
        "findMinimumOperations(s1 = \"table\", s2 = \"tarp\", s3 = \"tar\")",
        "findMinimumOperations(s1 = \"table\", s2 = \"tarp\", s3 = \"tar\")",
        "findMinimumOperations(s1 = \"abcd\", s2 = \"adc\", s3 = \"ac\")",
        "findMinimumOperations(s1 = \"ban\", s2 = \"ana\", s3 = \"app\")",
        "findMinimumOperations(s1 = \"hell\", s2 = \"hello\", s3 = \"hell\")",
        "findMinimumOperations(s1 = \"cde\", s2 = \"dbe\", s3 = \"deb\")",
        "findMinimumOperations(s1 = \"brr\", s2 = \"baa\", s3 = \"b\")"
    ],
    "sample_48": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 6])",
        "semiOrderedPermutation(nums = [2, 1, 3, 5, 4])",
        "semiOrderedPermutation(nums=[3, 1, 2])",
        "semiOrderedPermutation([3, 2, 1, 4])",
        "semiOrderedPermutation([2, 1, 4, 3])",
        "semiOrderedPermutation(nums=[3, 2, 1, 4])"
    ],
    "sample_94": [
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [1,2,3,4,5,6])",
        "continuousSubarrays(a = [0, 1, 2, 3, 4, 5])",
        "continuousSubarrays(a = [1, 2, 3, 4, 2, 3, 4, 3, 4])"
    ],
    "sample_95": [
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1,2,3,4,5,6])",
        "continuousSubarrays(nums = [1,2,3,4,5,6,7])",
        "continuousSubarrays(nums = [1,2,3,4,5,6,7])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(nums = [1,2,3,4,5,6,7,8,9])"
    ],
    "sample_8": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 3, queries = [[0,1], [1,2], [2,1]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [2,3], [3,4], [4,1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [3, 1], [2, 1], [1, 0]])",
        "colorTheArray(n = 4, queries = [[1, 2], [2, 3], [3, 2], [1, 1]])",
        "colorTheArray(n=5, queries=[[0,1],[1,2],[2,3],[3,1],[4,0]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,1],[4,2],[1,1],[2,2]])"
    ],
    "sample_97": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 3)",
        "maximumJumps(nums=[1, 2, 3, 4, 5], target=1)",
        "maximumJumps(nums = [7, 1, 7, 1, 7, 1], target = 2)",
        "maximumJumps(nums = [1,1,1,1,1], target = 0)",
        "maximumJumps(nums = [0,1,2,3,4], target = 1)",
        "maximumJumps(nums=[7, 1, 7, 1, 7, 1], target=2)",
        "maximumJumps(nums = [-1, -1, -1, -1, -1, -1], target = 1)",
        "maximumJumps(nums = [3,1,2,5,8,6], target = 2)",
        "maximumJumps(nums = [4,0,0,0,4,7,7,7,5,7], target = 2)"
    ],
    "sample_22": [
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ACBDAB\")",
        "minLength(s = \"ACBDAB\")",
        "minLength(s = \"ACBDAB\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")",
        "minLength(s = \"ABABCD\")"
    ],
    "sample_7": [
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,2]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [3, 4]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])",
        "colorTheArray(n=5, queries=[[0, 1], [1, 2], [2, 3], [3, 4], [4, 1]])",
        "colorTheArray(n=3, queries=[[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [2,3], [3,1], [4,2]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [3, 1], [2, 1]])"
    ],
    "sample_10": [
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 2], [4, 1]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 3], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [2, 1], [3, 1], [4, 2]])",
        "colorTheArray(n = 5, queries = [[0, 1], [1, 2], [1, 3], [3, 4], [2, 2]])",
        "colorTheArray(n=5, queries=[[0,1],[1,2],[2,1],[3,2],[4,1]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [1,3], [2,2], [3,4]])",
        "colorTheArray(n=5, queries=[[0, 1], [1, 2], [1, 3], [0, 2], [1, 1]])"
    ],
    "sample_45": [
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [4,2,3,1])",
        "semiOrderedPermutation(nums = [4,2,3,1,5])",
        "semiOrderedPermutation(nums = [4,2,3,1,5])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [4,2,5,1,3])",
        "semiOrderedPermutation(nums = [4,3,2,1])",
        "semiOrderedPermutation(nums = [4,3,2,1])"
    ],
    "sample_89": [
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12, 14], threshold = 14)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,4,6,8], threshold = 8)",
        "longestAlternatingSubarray(nums = [2,4,6,8], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 4, 6, 8, 10, 12], threshold = 11)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,12,14], threshold = 12)",
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,4,6,8,10,2], threshold = 4)",
        "longestAlternatingSubarray(nums = [1, 3, 5, 7, 9, 5], threshold = 7)"
    ],
    "sample_33": [
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num='512301000')",
        "removeTrailingZeros(num='512301000')"
    ],
    "sample_50": [
        "smallestString(s = \"baab\")",
        "smallestString(s = \"aabaa\")",
        "smallestString(s=\"baab\")",
        "smallestString(s=\"baab\")",
        "smallestString(s = \"baaz\")",
        "smallestString(s=\"aaabaa\")",
        "smallestString(s=\"baaba\")",
        "smallestString(s = \"bzz\")",
        "smallestString(s = \"aaaabbba\")",
        "smallestString(s = \"bbbbaaa\")"
    ],
    "sample_2": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 6])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 6])",
        "distinctDifferenceArray(nums = [3, 2, 3, 6, 3])",
        "distinctDifferenceArray(nums = [1, 2, 3, 2, 1])",
        "distinctDifferenceArray(nums = [3, 4, 5, 3, 2, 1])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [3, 2, 3, 5, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4, 4, 4, 5, 6])"
    ],
    "sample_60": [
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 4, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 3)",
        "distanceTraveled(mainTank = 8, additionalTank = 3)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 8, additionalTank = 4)"
    ],
    "sample_118": [
        "minimumIndex([1, 2, 3, 2, 2])",
        "minimumIndex(nums = [1, 2, 3, 2, 2, 2])",
        "minimumIndex(nums = [2,1,1,3,1,2,2])",
        "minimumIndex(nums = [1,2,3,1,2,1])",
        "minimumIndex([0, 1, 2, 3, 2, 1, 2])",
        "minimumIndex(nums = [1, 2, 2, 3, 3, 3, 4])",
        "minimumIndex(nums = [0,1,2,2,2,3])",
        "minimumIndex(nums = [2,1,1,1,3,1,1,1,3])",
        "minimumIndex(nums = [1,1,2,3,2,1])",
        "minimumIndex(nums = [2,1,1,3,1,1,1,2,3,3,2,2,2,3,1])"
    ],
    "sample_74": [
        "countBeautifulPairs(nums = [12, 56, 23, 78, 96])",
        "countBeautifulPairs(nums = [12, 21, 123, 321])",
        "countBeautifulPairs(nums = [12, 21, 28, 82])",
        "countBeautifulPairs([12, 34, 56])",
        "countBeautifulPairs(nums = [12, 56, 23, 78, 99])",
        "countBeautifulPairs([12, 56, 34, 78, 90, 10])",
        "countBeautifulPairs(nums = [12, 21, 26, 37, 48, 59])",
        "countBeautifulPairs(nums = [12, 56, 23, 48, 76, 34, 21, 65])",
        "countBeautifulPairs(nums = [12, 21, 27, 48, 59])",
        "countBeautifulPairs(nums = [12, 34, 21, 56])"
    ],
    "sample_30": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '512301000000')"
    ],
    "sample_43": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"ban\")",
        "minimizedStringLength(s = \"aba\")",
        "minimizedStringLength(s = \"aab\")"
    ],
    "sample_111": [
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 5, 3, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 2], k = 1)"
    ],
    "sample_76": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 11, num2 = 3)",
        "makeTheIntegerZero(num1 = 5, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 3)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1=6, num2=4)",
        "makeTheIntegerZero(num1 = 34, num2 = 4)"
    ],
    "sample_63": [
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 3, 6])",
        "findValueOfPartition(nums = [1, 3, 6])",
        "findValueOfPartition(nums = [1, 3, 6, 8, 10])",
        "findValueOfPartition([1, 3, 6, 8, 10])",
        "findValueOfPartition([1, 8, 10])"
    ],
    "sample_59": [
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 2)"
    ],
    "sample_16": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 1, 0])",
        "doesValidArrayExist([0,0,0,0])",
        "doesValidArrayExist([0, 1, 1, 0, 0, 1, 1])",
        "doesValidArrayExist([0,1,1,0,0,0,1,1])"
    ],
    "sample_24": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s='never')"
    ],
    "sample_110": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1,2,3,4,5,6,7,8,9,10], k = 3)",
        "checkArray(nums = [1, 0, 1, 2], k = 2)",
        "checkArray(nums = [0, 5, 1, 2, 3, 4], k = 3)",
        "checkArray(nums = [1, 3, 0, 1, 0, 1], k = 2)",
        "checkArray(nums = [1, 3, 0, 0, 0, 2, 1], k = 3)",
        "checkArray(nums = [1, 3, 0, 2, 5, 0], k = 3)",
        "checkArray(nums = [3, 3, 0, 1], k = 2)",
        "checkArray(nums = [3, 1, 3, 0, 2, 0, 3], k = 2)",
        "checkArray(nums = [0, 2, 1, 3, 0, 0, 2], k = 4)"
    ],
    "sample_13": [
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1])",
        "doesValidArrayExist(derived = [1, 1, 1, 0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1, 0, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0, 0, 1, 0])"
    ],
    "sample_54": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbnaa\")",
        "smallestString(s = 'ajddsbncd')",
        "smallestString(s = \"kddsbnd\")",
        "smallestString(s = \"aabbbccddd\")",
        "smallestString(s = 'bddsaobcd')",
        "smallestString(s = 'jjjaa')",
        "smallestString(s = \"kjbsncd\")",
        "smallestString(s=\"kdcvbncd\")"
    ],
    "sample_93": [
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1,2,3,4,5,6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 4, 5, 6])",
        "continuousSubarrays([1,2,3,4,5,6])",
        "continuousSubarrays([1,2,3,4,5,6])",
        "continuousSubarrays([1,2,3,4,5,6])",
        "continuousSubarrays(A = [1,2,3,4,5,6,7,8,9])",
        "continuousSubarrays([1,2,3,4,5,6,2,2,2])"
    ],
    "sample_26": [
        "makeSmallestPalindrome(s = \"aba\")",
        "makeSmallestPalindrome(s = 'aba')",
        "makeSmallestPalindrome(s = 'abc')",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"abc\")",
        "makeSmallestPalindrome(s = \"bba\")",
        "makeSmallestPalindrome(s = 'aab')"
    ],
    "sample_68": [
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8, 10])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3, 4])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [1, 3, 5, 7])",
        "findValueOfPartition(nums = [1, 8, 4, 3])",
        "findValueOfPartition(nums = [1, 8, 4, 5])"
    ],
    "sample_51": [
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = 'kddsbncd')",
        "smallestString(s = \"kddsbncd\")",
        "smallestString(s = 'kddsbncda')",
        "smallestString(s = 'jddsaabd')",
        "smallestString(s = 'jddsamb')",
        "smallestString(s = 'abcdfghjrstvwxyz')",
        "smallestString(s='lkjddsbncd')",
        "smallestString(s = 'fexxxkzkz')"
    ],
    "sample_113": [
        "maximumBeauty(nums = [1,3,5,7,9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], k = 1)",
        "maximumBeauty(nums = [1,3,5,7,9,10,12,14,16], k = 2)",
        "maximumBeauty(nums = [1, 3, 2, 5, 2, 2, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 2, 7, 8, 6, 4], k = 1)"
    ],
    "sample_107": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 3, 4, 5], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 3)",
        "checkArray(nums = [1, 2, 3, 3, 4], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "checkArray(nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], k = 5)",
        "checkArray(nums = [1, 2, 1, 4, 2, 1], k = 3)",
        "checkArray(nums = [1,2,2,2,2,2], k = 4)"
    ],
    "sample_61": [
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 1)",
        "distanceTraveled(mainTank = 5, additionalTank = 0)",
        "distanceTraveled(mainTank = 10, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 3, additionalTank = 2)",
        "distanceTraveled(mainTank = 6, additionalTank = 1)",
        "distanceTraveled(mainTank = 15, additionalTank = 0)"
    ],
    "sample_3": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [2, 3, 3, 2, 1])",
        "distinctDifferenceArray(nums = [2, 3, 3, 1, 2])",
        "distinctDifferenceArray(nums = [2, 3, 4, 1, 2])",
        "distinctDifferenceArray(nums = [3, 3, 3, 3, 3])",
        "distinctDifferenceArray(nums = [4, 2, 3, 4, 1])",
        "distinctDifferenceArray(nums = [4, 2, 3, 5, 2])",
        "distinctDifferenceArray(nums = [2,3,1,2,3,4])",
        "distinctDifferenceArray(nums = [4, 3, 2, 7, 9])"
    ],
    "sample_96": [
        "continuousSubarrays(A = [1,2,3,1,2,3,1,2,3])",
        "continuousSubarrays([1, 2, 3, 4, 5, 6])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 1])",
        "continuousSubarrays(A = [1, 2, 3, 2, 3, 1])",
        "continuousSubarrays(A = [1,2,3,2,1,2,3,2,1,2])",
        "continuousSubarrays([2, 1, 3, 1, 2, 1])",
        "continuousSubarrays(A = [1,2,3,2,3,1,1,2,3])",
        "continuousSubarrays([1,2,2,3,3,3,4,4,4,4,5,5,5,5,5])",
        "continuousSubarrays(A = [1,2,3,4,2,3,4,5,6,7])",
        "continuousSubarrays(A = [1,2,3,1,2,3,3,4,1,2,3,4,4,3,2,1,1,2,3,4,4])"
    ],
    "sample_6": [
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,1]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,1]])",
        "colorTheArray(n = 5, queries = [[0,1],[1,2],[2,3],[3,4],[4,1]])",
        "colorTheArray(n = 5, queries = [[0,1], [1,2], [2,3], [3,4]])",
        "colorTheArray(n = 3, queries = [[0,1],[1,2],[2,1]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 0], [2, 1], [3, 0]])",
        "colorTheArray(n = 4, queries = [[0,1],[1,2],[2,3],[3,1],[1,2]])",
        "colorTheArray(n = 10, queries = [[2, 1], [1, 2], [2, 0], [3, 1]])"
    ],
    "sample_75": [
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 5, b = 2)",
        "makeTheIntegerZero(a = 7, b = 2)",
        "makeTheIntegerZero(a = 7, b = 2)",
        "makeTheIntegerZero(a=7, b=2)",
        "makeTheIntegerZero(a=7, b=2)",
        "makeTheIntegerZero(a = 10, b = 3)",
        "makeTheIntegerZero(a = 6, b = 2)",
        "makeTheIntegerZero(a = 4, b = 1)",
        "makeTheIntegerZero(a = 8, b = 3)"
    ],
    "sample_100": [
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 7, 10, 13], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 7, 8, 12], target = 2)",
        "maximumJumps(nums = [1, 3, 5, 7, 9, 11], target = 2)",
        "maximumJumps(nums = [1, 4, 7, 2, 9, 3], target = 2)",
        "maximumJumps(nums = [10, 20, 30, 40, 70, 100], target = 20)",
        "maximumJumps(nums = [1, 2, 3, 4, 7, 8, 12, 14, 15], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 7, 5, 9, 10, 13, 14, 15], target = 2)"
    ],
    "sample_91": [
        "longestAlternatingSubarray(nums = [2,4,6,8,10,12], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,4,6,8], threshold = 8)",
        "longestAlternatingSubarray(nums = [2,7,15,9,10,11], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 3, 4, 3, 2, 4], threshold = 3)",
        "longestAlternatingSubarray(nums = [2, 7, 10, 9, 8, 9], threshold = 7)",
        "longestAlternatingSubarray(nums = [2,3,4,3,4,6,7,8,9], threshold = 7)",
        "longestAlternatingSubarray(nums = [2,4,6,7,9,11,12,14,16,18], threshold = 12)",
        "longestAlternatingSubarray(nums = [2,7,12,5,10,23,18,5], threshold = 10)",
        "longestAlternatingSubarray(nums = [2,5,3,9,6,4,8,3], threshold = 6)",
        "longestAlternatingSubarray(nums = [2, 7, 12, 1, 8, 3, 4, 7, 3], threshold = 4)"
    ],
    "sample_104": [
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [0, 1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 2, 3, 4], b = [0, 1, 2, 3])",
        "maxNonDecreasingLength(a = [1, 2, 5, 3], b = [1, 2, 3, 4])",
        "maxNonDecreasingLength(a = [10, 20, 30, 40, 50], b = [10, 20, 30, 40, 50])",
        "maxNonDecreasingLength(a = [10, 20, 30, 40], b = [5, 15, 30, 50])",
        "maxNonDecreasingLength(a = [10, 22, 9, 33, 4], b = [1, 22, 9, 3, 44])",
        "maxNonDecreasingLength(a = [10, 20, 10, 30, 40, 50], b = [10, 20, 10, 30, 40, 50])"
    ],
    "sample_84": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,0,1,0,0])",
        "numberOfGoodSubarraySplits([0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "numberOfGoodSubarraySplits([0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,1,0,1,0,1,1,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,1,0,0,1,0,1,0,0,1,0,0,1,1,0,0,1,0,0,0,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,1,1,1,1,0,1,1,0,0,1,1,1,0,0,1,0,1,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,0,1,1,1,1,0,1,0,0,1,1,0,0,1,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0"
    ],
    "sample_90": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5], threshold = 4)",
        "longestAlternatingSubarray(nums = [2, 8, 5, 3, 9, 6], threshold = 4)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], threshold = 2)",
        "longestAlternatingSubarray(nums = [3,2,5,4,7,6], threshold = 5)",
        "longestAlternatingSubarray(nums = [10, 2, 5, 6, 7, 8], threshold = 5)",
        "longestAlternatingSubarray(nums = [34, 2, 7, 11, 3], threshold = 10)",
        "longestAlternatingSubarray(nums = [2, 7, 15, 21, 31], threshold = 25)",
        "longestAlternatingSubarray(nums = [2, 5, 4, 6, 8, 12, 15], threshold = 12)",
        "longestAlternatingSubarray(nums = [3, 5, 10, 2, 6, 4], threshold = 7)",
        "longestAlternatingSubarray(nums = [14, 3, 15, 2, 16, 16, 13, 14], threshold = 15)"
    ],
    "sample_66": [
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2, 4])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition(nums = [1, 3, 6, 8, 10])",
        "findValueOfPartition(nums = [1, 3, 5, 7, 9])",
        "findValueOfPartition(nums = [1, 3, 7, 2, 4])"
    ],
    "sample_27": [
        "makeSmallestPalindrome(s = 'bab')",
        "makeSmallestPalindrome(s='abc')",
        "makeSmallestPalindrome(s='abc')",
        "makeSmallestPalindrome(s = 'aab')",
        "makeSmallestPalindrome(s = 'bbaa')",
        "makeSmallestPalindrome(s = 'madam')",
        "makeSmallestPalindrome(s = 'abcdcba')",
        "makeSmallestPalindrome(s='bbaa')",
        "makeSmallestPalindrome(s = 'mama')",
        "makeSmallestPalindrome(s='bab')"
    ],
    "sample_18": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCCD\")",
        "minLength(s = \"ABCDBCD\")",
        "minLength(s = \"ABCDEFGH\")"
    ],
    "sample_99": [
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [0,1,2,3,4,5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 2)",
        "maximumJumps(nums = [10, 20, 30, 40], target = 10)",
        "maximumJumps(nums = [3,5,7,9,11], target = 2)",
        "maximumJumps(nums = [10, 20, 30, 15], target = 10)",
        "maximumJumps(nums = [7,1,3,10,4,6], target = 3)",
        "maximumJumps(nums = [42,100,33,84,60,26,76,50,25,43,77,16,51,61,73,93,74,78,52,40,34,72,29], target = 44)"
    ],
    "sample_11": [
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 2], [4, 1], [5, 2]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 1], [4, 2]])",
        "colorTheArray(n=5, queries=[[1, 1], [2, 2], [3, 1], [4, 2], [5, 1]])",
        "colorTheArray(n = 5, queries = [[1, 1], [2, 2], [3, 1], [4, 2], [5, 2]])",
        "colorTheArray(n = 4, queries = [[1, 1], [2, 2], [3, 2], [2, 1], [3, 1]])",
        "colorTheArray(n = 5, queries = [[2, 1], [1, 2], [2, 2], [3, 1], [1, 1]])"
    ],
    "sample_62": [
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 2, additionalTank = 1)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 3, additionalTank = 1)"
    ],
    "sample_71": [
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(nums = [12, 21, 23, 32])",
        "countBeautifulPairs(nums = [12, 21, 24, 41])",
        "countBeautifulPairs(nums = [12, 21, 25, 31])",
        "countBeautifulPairs(nums = [12, 21, 123, 231])",
        "countBeautifulPairs(nums = [26, 5, 35, 15])",
        "countBeautifulPairs(nums = [51, 22, 28, 41, 40, 71])",
        "countBeautifulPairs(nums = [23, 34, 56, 12, 29, 39])",
        "countBeautifulPairs(nums = [23,45,12,36,78,95])",
        "countBeautifulPairs(nums = [51, 26, 38, 76, 48, 16])"
    ],
    "sample_56": [
        "minCost(A = [1, 2, 3], x = 2)",
        "minCost(A = [1, 2, 3, 2], x = 2)",
        "minCost(A = [1, 3, 2], x = 2)",
        "minCost(A = [4,3,2,5,6], x = 2)",
        "minCost(A = [2, 2, 1], x = 3)",
        "minCost(A = [5,2,4,6,7], x = 2)",
        "minCost(A = [3,2,1,2,3,3], x = 2)",
        "minCost(A = [1,5,7,3,2], x = 2)",
        "minCost(A = [2,3,1,14,10,20,5], x = 3)",
        "minCost(A = [3,2,3,5,2], x = 2)"
    ],
    "sample_98": [
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 6], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 5, 7], target = 2)",
        "maximumJumps(nums = [1,2,3,4,6,7,8,10], target = 2)",
        "maximumJumps(nums = [1, 2, 1, 4, 5, 6], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 5, 6], target = 2)",
        "maximumJumps(nums=[3, 1, 5, 2, 6], target=2)",
        "maximumJumps(nums = [2, 3, 4, 1, 2, 3], target = 1)",
        "maximumJumps(nums = [3, 1, 5, 6, 2], target = 2)"
    ],
    "sample_86": [
        "numberOfGoodSubarraySplits([0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,1,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,0,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,1,1,1,1,0,1,1,1,0,0,0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1"
    ],
    "sample_1": [
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [5, 3, 1, 2, 4])",
        "distinctDifferenceArray(nums = [5, 1, 3, 2, 4])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [3, 2, 1, 4, 5])",
        "distinctDifferenceArray(nums = [5, 1, 3, 5, 2])",
        "distinctDifferenceArray(nums = [5, 3, 1, 3, 2])",
        "distinctDifferenceArray(nums = [5, 5, 1, 1, 2])",
        "distinctDifferenceArray(nums = [3, -3, 5, -1, 5])"
    ],
    "sample_73": [
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 90])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 72, 84])",
        "countBeautifulPairs(nums = [12, 23, 34, 45, 56, 67, 78, 89, 91])",
        "countBeautifulPairs(nums = [12, 24, 36, 48, 60, 72, 84, 96])",
        "countBeautifulPairs(nums = [12, 21, 24, 42, 45, 52])",
        "countBeautifulPairs(nums = [12, 45, 23, 78, 35])",
        "countBeautifulPairs(nums = [12, 21, 123, 321, 231, 1234])",
        "countBeautifulPairs(nums = [12, 21, 13, 31, 22, 24, 33, 42, 34, 43, 44, 45, 54, 55])",
        "countBeautifulPairs(nums = [12, 45, 23, 678, 345, 1234, 100])"
    ],
    "sample_42": [
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"abc\")",
        "minimizedStringLength(s = \"bana\")",
        "minimizedStringLength(s = \"abcabcabc\")",
        "minimizedStringLength(s = \"bna\")",
        "minimizedStringLength(s = \"bar\")",
        "minimizedStringLength(s = \"baa\")"
    ],
    "sample_41": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"0100\")",
        "minimumCost(s = \"0100\")",
        "minimumCost(s = \"0100\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aab\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"abcdc\")"
    ],
    "sample_4": [
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 2])",
        "distinctDifferenceArray(nums = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [2,3,3,2,2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 3])",
        "distinctDifferenceArray(nums = [1,2,3,4,5])",
        "distinctDifferenceArray(nums = [5, 5, 5, 6, 6])",
        "distinctDifferenceArray(nums = [3, 2, 1, 4, 2])",
        "distinctDifferenceArray(nums = [4, 2, 1, 3, 1])",
        "distinctDifferenceArray(nums = [3,2,1,2,3,3])"
    ],
    "sample_15": [
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 2, 3])",
        "doesValidArrayExist(derived = [1, 0, 1, 0])",
        "doesValidArrayExist(derived = [1,1,1,1])",
        "doesValidArrayExist(derived = [2,2,2,2])",
        "doesValidArrayExist(derived = [1,0,1,1,0,1])",
        "doesValidArrayExist(derived = [2,1,2,1,2,1])",
        "doesValidArrayExist(derived = [2, 3, 1, 5, 4, 7, 6, 9, 8])"
    ],
    "sample_17": [
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [0])",
        "doesValidArrayExist(derived = [1, 2, 3, 6])",
        "doesValidArrayExist(derived = [0, 0, 0])",
        "doesValidArrayExist(derived = [0,1,1,0])",
        "doesValidArrayExist(derived = [1, 1, 0])",
        "doesValidArrayExist(derived = [0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 2, 2, 0])",
        "doesValidArrayExist(derived = [1, 0, 1, 1])"
    ],
    "sample_52": [
        "smallestString(s = 'kddsbnaa')",
        "smallestString(s = 'kddsbncc')",
        "smallestString(s = 'kddsaabcd')",
        "smallestString(s = 'jddqbncq')",
        "smallestString(s = 'kdduvwxy')",
        "smallestString(s = \"kddujncd\")",
        "smallestString(s = \"kddsbmbc\")",
        "smallestString(s = \"kdvtbncd\")",
        "smallestString(s = 'kjtttbcd')",
        "smallestString(s = \"bcdsbnad\")"
    ],
    "sample_40": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"baa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"01010\")",
        "minimumCost(s = \"baaab\")"
    ],
    "sample_38": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aaaabbb\")",
        "minimumCost(s = \"aaaabbb\")",
        "minimumCost(s = \"abc\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"ababa\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"aaaabbbb\")",
        "minimumCost(s = \"ab\")"
    ],
    "sample_5": [
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 4])",
        "distinctDifferenceArray(nums = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(nums = [3, 4, 5, 6, 2])",
        "distinctDifferenceArray(nums = [2, 3, 3, 2, 1])",
        "distinctDifferenceArray(nums = [2, 3, 3, 2, 2])",
        "distinctDifferenceArray(nums = [1, 2, 3, 3, 5])",
        "distinctDifferenceArray(nums = [3, 3, 3, 3, 3])",
        "distinctDifferenceArray(nums = [4, 1, 2, 3, 5])",
        "distinctDifferenceArray(nums = [4, 2, 2, 8, 1])"
    ],
    "sample_53": [
        "smallestString(s = 'baabc')",
        "smallestString(s = 'bzzc')",
        "smallestString(s = 'baabb')",
        "smallestString(s = 'baaaa')",
        "smallestString(s = 'bczza')",
        "smallestString(s = \"baazc\")",
        "smallestString(s = 'baabx')",
        "smallestString(s = 'bbbbc')",
        "smallestString(s = 'cbaad')",
        "smallestString(s = \"bbbbb\")"
    ],
    "sample_109": [
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [1,2,3,6], k = 2)",
        "checkArray(nums = [1, 2, 3], k = 2)",
        "checkArray(nums = [3, 2, 4, 1, 2], k = 1)"
    ],
    "sample_114": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9,11,13], k = 2)",
        "maximumBeauty(nums = [1,2,3,4,5,6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 5, 6], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9], k = 2)",
        "maximumBeauty(nums = [1,2,4,5], k = 2)"
    ],
    "sample_0": [
        "distinctDifferenceArray(a = [1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [3, 4, 5, 6, 7])",
        "distinctDifferenceArray(a=[1, 2, 3, 4, 5])",
        "distinctDifferenceArray(a = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(a = [5, 5, 5, 5, 5])",
        "distinctDifferenceArray(a = [3, 3, 3, 3, 3])",
        "distinctDifferenceArray(a = [1, 2, 3, 3, 6, 5])",
        "distinctDifferenceArray(a=[3, 3, 3, 2, 2])",
        "distinctDifferenceArray(a=[3, 4, 4, 2, 3])",
        "distinctDifferenceArray(a = [2, 1, 2, 1, 2, 3, 1])"
    ],
    "sample_34": [
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '51230100')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '512301000')",
        "removeTrailingZeros(a = '51230100000')",
        "removeTrailingZeros(a='51230100')",
        "removeTrailingZeros(a='51230100')",
        "removeTrailingZeros(a = \"5123010000\")",
        "removeTrailingZeros(a = \"51230100000\")"
    ],
    "sample_28": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'nice')",
        "makeSmallestPalindrome(s = \"nine\")"
    ],
    "sample_55": [
        "smallestString(s = 'jddqbncd')",
        "smallestString(s = 'jddqbmbc')",
        "smallestString(s = 'jddqmbncb')",
        "smallestString(s='jddqbncb')",
        "smallestString(s = \"kddsbncg\")",
        "smallestString(s='kdcabncd')",
        "smallestString(s = 'jdccbma')",
        "smallestString(s = \"jddqnbcd\")",
        "smallestString(s=\"kddsbncj\")",
        "smallestString(s = 'kdftzncd')"
    ],
    "sample_35": [
        "removeTrailingZeros(num = \"5123010000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100000\")",
        "removeTrailingZeros(num = \"512301000000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num='5123010000000')",
        "removeTrailingZeros(num = \"51230100000000\")"
    ],
    "sample_23": [
        "minLength(s = \"ACBDAB\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCDBCA\")",
        "minLength(s = \"ABCDDCBA\")",
        "minLength(s = \"ABCDECDAB\")",
        "minLength(s = \"BACDABABCD\")",
        "minLength(s = \"ACBADCDAB\")"
    ],
    "sample_31": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = \"512301000\")",
        "removeTrailingZeros(num = \"51230100\")",
        "removeTrailingZeros(num = \"51230100\")"
    ],
    "sample_78": [
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 2)",
        "makeTheIntegerZero(num1 = 17, num2 = 4)",
        "makeTheIntegerZero(num1 = 17, num2 = 4)",
        "makeTheIntegerZero(num1=10, num2=3)",
        "makeTheIntegerZero(num1 = 20, num2 = 3)"
    ],
    "sample_57": [
        "distanceTraveled(a = 1, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a = 2, b = 1)",
        "distanceTraveled(a=1, b=1)",
        "distanceTraveled(a=1, b=1)",
        "distanceTraveled(a=1, b=1)",
        "distanceTraveled(a = 1, b = 2)",
        "distanceTraveled(a=2, b=1)"
    ],
    "sample_92": [
        "longestAlternatingSubarray(nums = [1, 2, 3, 4, 5, 6, 7], t = 7)",
        "longestAlternatingSubarray(nums = [2,7,15,9,6], t = 7)",
        "longestAlternatingSubarray(nums = [2,7,15,9,10,12,8], t = 10)",
        "longestAlternatingSubarray(nums = [1,2,3,2,5,6], t = 5)",
        "longestAlternatingSubarray(nums = [2,3,4,5,6,7,8,9,10,11], t = 10)",
        "longestAlternatingSubarray(nums = [2,7,15,9,6,4,10,2], t = 10)",
        "longestAlternatingSubarray(nums = [2,7,15,9,10,12,8,16,5,10], t = 10)",
        "longestAlternatingSubarray(nums = [2,7,15,22,33,40], t = 40)",
        "longestAlternatingSubarray(nums = [3,5,6,11,11,2,7,8], t = 10)",
        "longestAlternatingSubarray(nums = [2,7,9,8,6,4,3,8,2,1], t = 9)"
    ],
    "sample_102": [
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4], target = 1)",
        "maximumJumps(nums = [5, 10, 15, 20, 25], target = 5)",
        "maximumJumps(nums = [1, 2, 3, 4, 5], target = 1)",
        "maximumJumps(nums = [1, 2, 4, 6, 8], target = 2)",
        "maximumJumps(nums=[0, 1, 2, 3, 4], target=1)",
        "maximumJumps(nums = [1, 5, 6, 8], target = 3)",
        "maximumJumps(nums = [10, 20, 30, 40, 50, 100], target = 50)",
        "maximumJumps(nums = [5,3,1,2,6,7,8,9], target = 2)",
        "maximumJumps(nums = [4,0,4,3,5,4,4,4,0,3,5,2,0,4,4,4,4,4,4,5,3,4,4,4,4,4], target = 2)"
    ],
    "sample_32": [
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '512301000')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '51230100')",
        "removeTrailingZeros(num = '5123010000')",
        "removeTrailingZeros(num = '51230100000')",
        "removeTrailingZeros(num = '51230100000')"
    ],
    "sample_101": [
        "maximumJumps(nums = [1,2,3,4,5], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 2)",
        "maximumJumps(nums = [1, 2, 3, 4, 7], target = 1)",
        "maximumJumps(nums = [1, 2, 3, 4, 5, 10], target = 2)",
        "maximumJumps(nums = [2, 0, 1, 5, 6, 7], target = 2)",
        "maximumJumps(nums = [1,3,5,10,15], target = 2)",
        "maximumJumps(nums = [2, 4, 6, 10, 12, 14], target = 2)",
        "maximumJumps(nums = [2, 5, 3, 7, 8, 6], target = 4)",
        "maximumJumps(nums = [1, 2, 1, 0, 2, 1], target = 2)",
        "maximumJumps(nums = [0, 1, 3, 7, 9, 10, 15], target = 4)"
    ],
    "sample_14": [
        "doesValidArrayExist(derived = [0, 1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [0, 0, 0, 0])",
        "doesValidArrayExist(derived = [0, 0, 1, 1])",
        "doesValidArrayExist(derived = [1, 0, 0, 0, 1, 0])",
        "doesValidArrayExist(derived = [1,0,0,1,1,0])",
        "doesValidArrayExist(derived = [0,0,0,0,1,1,1,1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0,1,0,0,1,0,1,1])",
        "doesValidArrayExist(derived = [0, 1, 0, 1, 1, 0, 1, 1])",
        "doesValidArrayExist(derived = [0,1,0,0,1,0,1,0,0,0,1,0,1,0,1,1,1,0,0,0,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,1,1,1,0,1,0,1,1,0,0,0,0,0])"
    ],
    "sample_85": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([0, 1, 0, 0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits([0,1,1,0,0,1,0,1,0,1,1])",
        "numberOfGoodSubarraySplits([0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "numberOfGoodSubarraySplits([0,1,1,0,1,0,1,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,1,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,1,0,0,1,1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,1,0,0,0,0,1,0,1,1,1,0,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,1,1"
    ],
    "sample_19": [
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCCD\")",
        "minLength(s = \"AABCCD\")",
        "minLength(s = \"ACDAB\")",
        "minLength(s = \"ABCDEF\")"
    ],
    "sample_29": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s=\"never\")",
        "makeSmallestPalindrome(s=\"nice\")",
        "makeSmallestPalindrome(s = \"nice\")"
    ],
    "sample_49": [
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [2,1,4,3])",
        "semiOrderedPermutation(nums = [3,2,1,4,5])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation([2,1,4,3])",
        "semiOrderedPermutation([2,3,4,1,5])"
    ],
    "sample_82": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,1,0,0,0,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,1,1,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,"
    ],
    "sample_116": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 7], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7], k = 1)",
        "maximumBeauty(nums = [1,2,3,4,5,6,7,8,9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 1)",
        "maximumBeauty(nums = [1,3,5,7,9,11,13], k = 1)"
    ],
    "sample_117": [
        "minimumIndex(nums = [2, 2, 1, 1, 1, 2, 2])",
        "minimumIndex(nums = [2, 2, 1, 1, 1])",
        "minimumIndex([1, 2, 2, 3, 3, 4, 4])",
        "minimumIndex(nums = [2, 3, 2, 4, 1, 4, 4])",
        "minimumIndex(nums = [1,2,2,2,3,4,5])",
        "minimumIndex(nums = [3,4,5,3,7,3])",
        "minimumIndex(nums = [2,2,2,2,3,1])",
        "minimumIndex(nums = [2,2,1,2,2,2,2,1,1,1])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7, 3, 2, 1, 2])",
        "minimumIndex(nums = [1,2,2,2,1,3,1,2,1,2,3,2,2,1,1])"
    ],
    "sample_79": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 14, num2 = 2)",
        "makeTheIntegerZero(num1 = 6, num2 = 2)",
        "makeTheIntegerZero(num1 = 7, num2 = 3)",
        "makeTheIntegerZero(num1=7, num2=3)"
    ],
    "sample_69": [
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs(nums = [12, 56, 23, 48])",
        "countBeautifulPairs(nums = [12, 23, 14])",
        "countBeautifulPairs(nums = [12,56,23,18,14,76])",
        "countBeautifulPairs(nums = [23, 14, 65, 78])",
        "countBeautifulPairs(nums = [12, 21, 123, 31, 204, 402])",
        "countBeautifulPairs(nums = [21, 7, 42, 2, 6, 13])",
        "countBeautifulPairs(nums = [23,45,12,89,98,34,75])"
    ],
    "sample_80": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 8, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 14, num2 = 3)",
        "makeTheIntegerZero(num1=10, num2=2)"
    ],
    "sample_20": [
        "minLength(s = \"ABCDEF\")",
        "minLength(s = \"ABCDE\")",
        "minLength(s = \"ABCDAB\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"ABCD\")",
        "minLength(s = \"AACDBB\")",
        "minLength(s = \"ACABDBCD\")",
        "minLength(s = \"ABCDEABCDE\")",
        "minLength(s = \"ABACABAD\")"
    ],
    "sample_112": [
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5], k = 1)",
        "maximumBeauty(nums = [1,3,5,7,9,11,13], k = 2)",
        "maximumBeauty(nums = [1,3,5,7,9], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 2)"
    ],
    "sample_72": [
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs([12, 24, 36])",
        "countBeautifulPairs(nums = [12, 21, 23, 32])",
        "countBeautifulPairs(nums = [12, 21, 26, 35])",
        "countBeautifulPairs(nums = [12, 24, 16])",
        "countBeautifulPairs(nums = [22, 33, 44])",
        "countBeautifulPairs(nums = [26, 5, 32, 5])",
        "countBeautifulPairs(nums = [21, 25, 27, 30])",
        "countBeautifulPairs(nums = [22,44,31,15])",
        "countBeautifulPairs(nums = [26, 2, 16, 48, 10, 4, 28, 18])"
    ],
    "sample_77": [
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 2)",
        "makeTheIntegerZero(num1 = 10, num2 = 3)",
        "makeTheIntegerZero(num1 = 11, num2 = 2)",
        "makeTheIntegerZero(num1 = 13, num2 = 2)",
        "makeTheIntegerZero(num1 = 14, num2 = 2)",
        "makeTheIntegerZero(num1 = 15, num2 = 4)",
        "makeTheIntegerZero(num1 = 9, num2 = 3)",
        "makeTheIntegerZero(num1 = 23, num2 = 5)"
    ],
    "sample_25": [
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = 'even')",
        "makeSmallestPalindrome(s = \"never\")",
        "makeSmallestPalindrome(s='never')",
        "makeSmallestPalindrome(s = \"nevn\")",
        "makeSmallestPalindrome(s = \"even\")",
        "makeSmallestPalindrome(s = \"niven\")",
        "makeSmallestPalindrome(s = \"nenve\")"
    ],
    "sample_37": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"aaab\")",
        "minimumCost(s = \"aaa\")",
        "minimumCost(s = \"ab\")",
        "minimumCost(s = \"aaaabbb\")",
        "minimumCost(s = \"bccab\")"
    ],
    "sample_81": [
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,1,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0,0,0,0,1,0])",
        "numberOfGoodSubarraySplits(nums = [1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1])",
        "numberOfGoodSubarraySplits(nums = [0,1,0,0,1,0,1,0,0,0,0,0,0,1,1])",
        "numberOfGoodSubarraySplits([0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0,1,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,0,0,1,1,1,1,0,1,0,1,1,0,0,0,1,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1"
    ],
    "sample_105": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "checkArray(nums = [3, 2, 1, 1, 0], k = 3)",
        "checkArray(nums = [1,2,2,1,0], k = 3)",
        "checkArray(nums = [20, 30, 10], k = 2)",
        "checkArray(nums = [3,2,1,5,4,0,0,0,0], k = 3)",
        "checkArray(nums = [8, 10, 15, 11, 12, 13], k = 3)",
        "checkArray(nums = [5,3,0,2,0,0,2,0,2,0,2,0,2,0,2], k = 3)"
    ],
    "sample_46": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 6])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation([4, 3, 2, 1])",
        "semiOrderedPermutation(nums=[2, 1, 3])",
        "semiOrderedPermutation(nums = [2, 1, 3, 4])",
        "semiOrderedPermutation([3, 1, 2, 4])"
    ],
    "sample_108": [
        "checkArray(nums = [1, 2, 3, 4, 5], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [1,2,3,4,5], k = 2)",
        "checkArray(nums = [2, 2, 3, 3, 4, 4], k = 2)",
        "checkArray(nums = [2, 2, 2, 2, 2, 2], k = 2)",
        "checkArray(nums = [1, 2, 0, 1], k = 2)",
        "checkArray(nums = [3, 2, 3, 2], k = 2)",
        "checkArray(nums = [2, 3, 2, 2, 1], k = 3)",
        "checkArray(nums = [4, 2, 3, 3, 4], k = 2)",
        "checkArray(nums = [5, 4, 0, 2, 1], k = 2)"
    ],
    "sample_39": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aabb\")",
        "minimumCost(s = \"0100\")",
        "minimumCost(s = \"0100\")",
        "minimumCost(s = \"abb\")",
        "minimumCost(s = \"10101\")"
    ],
    "sample_65": [
        "findValueOfPartition([1, 3, 6, 10])",
        "findValueOfPartition([1, 2, 3, 4, 5])",
        "findValueOfPartition([1, 3, 5, 7, 9])",
        "findValueOfPartition(a = [1, 2, 3, 4, 5])",
        "findValueOfPartition([1, 3, 8, 10, 15])",
        "findValueOfPartition([2, 4, 6, 1, 3])",
        "findValueOfPartition([1, 3, 5])",
        "findValueOfPartition([1, 3, 6, 8])",
        "findValueOfPartition([1, 5, 7])",
        "findValueOfPartition([2, 8, 6, 1, 8])"
    ],
    "sample_58": [
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 1, additionalTank = 0)",
        "distanceTraveled(mainTank = 2, additionalTank = 0)"
    ],
    "sample_12": [
        "doesValidArrayExist(derived = [1, 0, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1, 1, 0, 1])",
        "doesValidArrayExist(derived = [1,0,1,0,1])",
        "doesValidArrayExist(derived = [0, 1, 1, 0])",
        "doesValidArrayExist(derived = [1,0,1,0,1,0])",
        "doesValidArrayExist(derived = [1, 1, 0, 0, 0, 1])",
        "doesValidArrayExist(derived = [0, 1, 0, 0, 1])",
        "doesValidArrayExist(derived = [1,0,0,0,1])",
        "doesValidArrayExist(derived = [0,1,0,1,1,0,0,1])"
    ],
    "sample_106": [
        "checkArray(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "checkArray(nums = [3, 2, 3, 2, 3], k = 2)",
        "checkArray(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "checkArray(nums = [1, 3, 5], k = 2)",
        "checkArray(nums = [1,1,2,3,1], k = 3)",
        "checkArray(nums = [1, 5, 3, 2], k = 3)",
        "checkArray(nums = [2, 3, 4, 5, 6, 7], k = 2)",
        "checkArray(nums = [1, 5, 3, 0, 0], k = 2)",
        "checkArray(nums = [0, 5, 3, 0], k = 2)",
        "checkArray(nums = [2, 3, 1, 3, 2, 3, 1], k = 2)"
    ],
    "sample_88": [
        "longestAlternatingSubarray(nums = [2,3,5,7,11,13,17], threshold = 17)",
        "longestAlternatingSubarray(nums = [2,2,2,2,2,2], threshold = 2)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 4, 9], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 3, 5, 4], threshold = 4)",
        "longestAlternatingSubarray(nums = [3, 2, 5, 4], threshold = 5)",
        "longestAlternatingSubarray(nums = [2,7,15,9], threshold = 3)",
        "longestAlternatingSubarray(nums = [2,3,4,6,7,8,9], threshold = 5)",
        "longestAlternatingSubarray(nums = [2, 7, 12, 9, 10, 21], threshold = 12)",
        "longestAlternatingSubarray(nums = [2,3,4,3,2,4,2,1,4,3,2], threshold = 3)",
        "longestAlternatingSubarray(nums=[2, 3, 4, 7], threshold=5)"
    ],
    "sample_70": [
        "countBeautifulPairs([12, 24, 36])",
        "countBeautifulPairs([12, 24, 36])",
        "countBeautifulPairs([12, 24, 36])",
        "countBeautifulPairs(nums = [12, 24, 36])",
        "countBeautifulPairs([12, 24, 36, 48, 60])",
        "countBeautifulPairs(nums = [12, 34, 56])",
        "countBeautifulPairs(nums = [12, 21, 25, 36])",
        "countBeautifulPairs(nums = [12, 56, 34, 21, 32, 45])",
        "countBeautifulPairs(nums = [31, 24, 75])",
        "countBeautifulPairs(nums = [12, 3, 456, 23, 1234])"
    ],
    "sample_87": [
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,4,5], t = 5)",
        "longestAlternatingSubarray(nums = [1,2,3,5,7], t = 7)",
        "longestAlternatingSubarray(nums = [1,2,3,5,4,7,9], t = 7)",
        "longestAlternatingSubarray(nums = [1,2,3,5,7,9,11], t = 11)",
        "longestAlternatingSubarray(nums = [1,2,3,5,6,7,8,9,10], t = 10)",
        "longestAlternatingSubarray(nums = [5,4,2,3,10,12], t = 12)",
        "longestAlternatingSubarray(nums = [3,5,7,3,5,7,2], t = 3)",
        "longestAlternatingSubarray(nums = [2, 1, 2, 1, 2], t = 3)"
    ],
    "sample_36": [
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"aba\")",
        "minimumCost(s = \"ba\")",
        "minimumCost(s = \"abab\")",
        "minimumCost(s = \"bba\")",
        "minimumCost(s = \"bba\")",
        "minimumCost(s = \"01001\")",
        "minimumCost(s = \"bab\")",
        "minimumCost(s = \"abcba\")",
        "minimumCost(s = \"01010101\")"
    ],
    "sample_21": [
        "minLength(s = \"ABCDEFGH\")",
        "minLength(s = \"ABCDEFGHIJK\")",
        "minLength(s = \"ACDAB\")",
        "minLength(s = \"ACDAB\")",
        "minLength(s = \"ABCDEFGHIJKL\")",
        "minLength(s = \"ABCDEFCDAB\")",
        "minLength(s = \"ABCABCDABCD\")",
        "minLength(s = \"ACDABABCD\")",
        "minLength(s = \"ABCDECDABAB\")",
        "minLength(s = \"BBBBACDCDAB\")"
    ],
    "sample_83": [
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,1,0,0,0,0,0])",
        "numberOfGoodSubarraySplits([0,0,1,0,0,0,1,0,1,0,0])",
        "numberOfGoodSubarraySplits(nums = [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1])",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,0,0,1,0,0,1,0,0,0])",
        "numberOfGoodSubarraySplits([0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0])",
        "numberOfGoodSubarraySplits(nums = [0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "numberOfGoodSubarraySplits(nums = [0,0,1,0,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1])"
    ],
    "sample_9": [
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 1, queries = [[0, 1]])",
        "colorTheArray(n = 2, queries = [[0, 1], [1, 2]])",
        "colorTheArray(n = 3, queries = [[0, 1], [1, 2], [2, 3]])",
        "colorTheArray(n = 2, queries = [[0,1],[1,2]])",
        "colorTheArray(n=3, queries=[[0, 1], [1, 2], [2, 3]])",
        "colorTheArray(n=3, queries=[[0, 1], [1, 2], [2, 3]])",
        "colorTheArray(n = 4, queries = [[0, 1], [1, 2], [2, 3], [3, 2], [2, 1], [1, 0]])"
    ],
    "sample_103": [
        "maxNonDecreasingLength(nums1 = [1, 2, 3], nums2 = [2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5], nums2 = [2, 4, 6])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [1, 2, 3, 4])",
        "maxNonDecreasingLength(nums1 = [1, 3, 5, 4], nums2 = [1, 2, 3, 7])",
        "maxNonDecreasingLength(nums1 = [1, 2, 3, 4], nums2 = [2, 3, 4, 1])",
        "maxNonDecreasingLength(nums1 = [1, 2], nums2 = [2, 3])",
        "maxNonDecreasingLength(nums1 = [1,2,3,4], nums2 = [1,2,3,4])",
        "maxNonDecreasingLength(nums1 = [10, 20], nums2 = [15, 20])",
        "maxNonDecreasingLength(nums1 = [2,3], nums2 = [3,2])",
        "maxNonDecreasingLength(nums1 = [10,20,30], nums2 = [15,10,10])"
    ],
    "sample_115": [
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "maximumBeauty(nums = [1, 3, 5, 7, 9, 11], k = 2)",
        "maximumBeauty(nums = [1,2,3,4], k = 1)",
        "maximumBeauty(nums = [1, 2, 3, 4, 5, 6, 7], k = 1)",
        "maximumBeauty(nums = [2, 3, 4, 5, 6], k = 2)",
        "maximumBeauty(nums = [2, 4, 3, 2, 1, 3], k = 1)",
        "maximumBeauty(nums = [1, 3, 5, 2, 1, 5, 2], k = 2)",
        "maximumBeauty(nums = [3,3,3,2,2,2,1,1,1,1], k = 1)",
        "maximumBeauty(nums = [2, 1, 3, 3, 4, 4, 5, 6], k = 2)"
    ],
    "sample_67": [
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1,3,6,8])",
        "findValueOfPartition(nums = [1,3,6,8])",
        "findValueOfPartition(nums = [1,3,6,8])",
        "findValueOfPartition(nums = [1, 3, 6, 8, 10])",
        "findValueOfPartition([1, 3, 6, 8, 10])",
        "findValueOfPartition([1, 3, 6, 8, 10])",
        "findValueOfPartition(nums = [1, 3, 2])",
        "findValueOfPartition([1, 3, 6, 8])"
    ],
    "sample_64": [
        "findValueOfPartition(nums = [3,1,2])",
        "findValueOfPartition(nums = [3,1,2])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8])",
        "findValueOfPartition(nums = [1, 3, 6, 8, 10])",
        "findValueOfPartition(nums = [2, 1, 4, 3])",
        "findValueOfPartition(nums = [1, 2, 3])",
        "findValueOfPartition(nums = [2, 4, 3, 5, 7])"
    ],
    "sample_47": [
        "semiOrderedPermutation(nums = [4,2,3,1,5])",
        "semiOrderedPermutation(nums = [4,2,3,1,5])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [4, 2, 3, 1, 5])",
        "semiOrderedPermutation(nums = [4,1,2,3,5])",
        "semiOrderedPermutation(nums = [4,3,2,1,5])",
        "semiOrderedPermutation(nums = [4,2,3,5,1])",
        "semiOrderedPermutation(nums = [4, 3, 2, 1, 6, 5])",
        "semiOrderedPermutation(nums = [3, 1, 2, 4])",
        "semiOrderedPermutation(nums = [4, 1, 2, 3, 5])"
    ],
    "sample_44": [
        "semiOrderedPermutation(nums = [2, 1, 4, 3, 6])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [2, 1, 4, 3])",
        "semiOrderedPermutation(nums = [3, 1, 2])",
        "semiOrderedPermutation(nums = [2, 3, 1, 4, 5])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums = [3,1,2,4])",
        "semiOrderedPermutation(nums = [2, 3, 4, 1, 5])"
    ],
    "sample_167": [
        "isAcronym(words = [\"H\", \"a\", \"p\", \"p\", \"y\"], s = \"HH\")",
        "isAcronym(words = [\"H\", \"e\", \"ll\", \"o\"], s = \"HH\")",
        "isAcronym(words = [\"B\", \"a\", \"n\", \"a\", \"n\", \"a\"], s = \"Banana\")",
        "isAcronym(words=[\"New\",\"World\",\"Order\"], s = \"NWO\")",
        "isAcronym(words = [\"He\", \"llo\", \"Wor\", \"ld\"], s = \"HHW\")",
        "isAcronym(words = [\"J\", \"A\", \"V\", \"A\"], s = \"JAVA\")",
        "isAcronym(words = [\"every\", \"good\", \"boy\", \"deserves\", \"fudge\"], s = \"EGFDB\")",
        "isAcronym(words=[\"Data\", \"Analytics\"], s=\"DA\")",
        "isAcronym(words = [\"Prof\", \"John\", \"Doe\"], s = \"PJD\")",
        "isAcronym(words=[\"Big\",\"Red\",\"Hat\"], s = \"BRH\")"
    ],
    "sample_213": [
        "countInterestingSubarrays(nums = [2,3,1,4,5,6,7], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,4,5,6,7], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,4,1,2], m = 2, k = 2)",
        "countInterestingSubarrays(nums = [0,1,2,3,4,5,6,7,8,9,10], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,2,2,3,1,2], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [4,1,3,2,4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [0,1,2,1,0], m = 2, k = 1)",
        "countInterestingSubarrays(nums=[1,2,3,4,5], m=3, k=1)",
        "countInterestingSubarrays(nums = [0,2,1,2,1,0], m = 2, k = 1)"
    ],
    "sample_214": [
        "numberOfPoints(nums = [[10,20],[30,40],[50,60]])",
        "numberOfPoints(nums = [[10,20],[25,30],[35,40]])",
        "numberOfPoints(nums = [[2,3], [4,6], [5,7]])",
        "numberOfPoints(nums = [[1,4], [3,6], [5,8]])",
        "numberOfPoints(nums = [[1,4], [2,3], [1,2]])",
        "numberOfPoints(nums = [[5,6],[7,8],[10,11]])",
        "numberOfPoints(nums = [[1, 5], [3, 6], [7, 8], [10, 12], [13, 15], [16, 17], [18, 19]])",
        "numberOfPoints([[10,12], [12,15], [17,19], [20,22], [23,25], [26,28], [30,32]])",
        "numberOfPoints([[1,2],[3,6],[4,5],[6,7],[7,8],[8,9],[10,12]])",
        "numberOfPoints(nums = [[5,7], [1,3], [2,4], [4,8], [2,7]])"
    ],
    "sample_127": [
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"easy-problem\"], separator = \"-\")",
        "splitWordsBySeparator(words=[\"easy-problem\"], separator=\"-\")",
        "splitWordsBySeparator(words=[\"easy-problem\"], separator=\"-\")",
        "splitWordsBySeparator(words = [\"easy*problem\"], separator = \"*\")",
        "splitWordsBySeparator(words = [\"easy*problem\"], separator = \"*\")",
        "splitWordsBySeparator(words=[\"eas\", \"ypro\", \"blem\"], separator=\"\")",
        "splitWordsBySeparator(words=[\"This is a easy; problem\"], separator=\";\")"
    ],
    "sample_216": [
        "numberOfPoints(nums = [[1,3],[3,5],[5,7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [1, 2]])",
        "numberOfPoints(nums = [[1,3],[2,4],[2,5]])",
        "numberOfPoints(nums = [[2, 4], [3, 6]])",
        "numberOfPoints(nums = [[1,3],[2,4],[4,6]])",
        "numberOfPoints(nums = [[0, 2], [1, 2], [2, 3]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [2, 3]])",
        "numberOfPoints(nums = [[3,4], [2,3], [1,2]])",
        "numberOfPoints(nums = [[1, 3], [3, 5], [6, 6]])",
        "numberOfPoints(nums= [[1, 5], [2, 4], [2, 2]])"
    ],
    "sample_141": [
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,2,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,1,3,2,2,1,0])"
    ],
    "sample_126": [
        "splitWordsBySeparator(words = [\"one\", \"\", \"two\", \"three\", \"\", \"four\", \"five\", \"six\"], separator = \"\")",
        "splitWordsBySeparator(words=[\"one\", \"\", \"two\", \"three\", \"\", \"four\", \"five\", \"six\"], separator=\" \")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"one\", \"two\", \"three,four,five\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two', 'three four', 'five', 'six'], separator = ' ')",
        "splitWordsBySeparator(words=[\"one\", \"\", \"two\", \"three\", \"\", \"four\", \"five\", \"\", \"six\"], separator=\" \")",
        "splitWordsBySeparator(words = ['one', 'two', 'three four', 'five six'], separator = \" \")",
        "splitWordsBySeparator(words=[\"one\", \"\", \"two\", \"three\", \"\", \"four\", \"five\", \"\", \"six\"], separator = \",\")",
        "splitWordsBySeparator(words = ['one', 'two','] ['three', 'four', 'five', 'six'], separator = \"] [\")"
    ],
    "sample_129": [
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2])",
        "maxIncreasingGroups([1, 2])",
        "maxIncreasingGroups([1, 2])",
        "maxIncreasingGroups([1, 2, 5])",
        "maxIncreasingGroups(u = [1, 2, 3])",
        "maxIncreasingGroups([1, 2, 2])",
        "maxIncreasingGroups([1, 2, 2, 3, 3, 3])",
        "maxIncreasingGroups(u = [2, 1, 1])"
    ],
    "sample_164": [
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 2)",
        "minAbsoluteDifference(nums = [1,2,3,4,5], x = 3)",
        "minAbsoluteDifference(nums = [4,5,2,3,1], x = 2)",
        "minAbsoluteDifference(nums = [1, 2, 3, 4, 5], x = 2)",
        "minAbsoluteDifference(nums = [5,3,2,4,1,2], x = 3)",
        "minAbsoluteDifference(nums = [4,5,3,1,2], x = 2)",
        "minAbsoluteDifference(nums = [3,2,1,5,6], x = 2)",
        "minAbsoluteDifference(nums = [4,2,3,5,2,3,6], x = 3)",
        "minAbsoluteDifference(nums = [1,2,3,4,5,6,7,8,9], x = 5)",
        "minAbsoluteDifference(nums = [4, 5, 3, 1, 2], x = 2)"
    ],
    "sample_208": [
        "countInterestingSubarrays(nums = [2,3,1,4,5], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [2, 4, 6, 8, 10], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5, 6], modulo = 7, k = 2)",
        "countInterestingSubarrays(nums = [2,4,6,8,10], modulo = 5, k = 0)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], modulo = 6, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,1,3,1,2], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5, 6, 7, 8], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [0,1,2,3,4,5], modulo = 7, k = 3)"
    ],
    "sample_152": [
        "canSplitArray(nums = [2, 3, 3, 2], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [10, 20, 30, 40], m = 35)",
        "canSplitArray(nums = [2, 4, 1, 3], m = 5)",
        "canSplitArray(nums = [2, 2, 1, 2], m = 5)",
        "canSplitArray(nums = [2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [2, 2, 3, 1, 4], m = 6)",
        "canSplitArray(nums = [2, 1, 3, 5, 6, 7, 8], m = 15)",
        "canSplitArray(nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], m = 12)",
        "canSplitArray(nums = [15, 5, 2, 7, 9], m = 12)"
    ],
    "sample_169": [
        "isAcronym(words = [\"make\", \"any\", \"difference\"], s = \"mad\")",
        "isAcronym(words = [\"My\", \"name\", \"is\", \"John\"], s = \"MniJ\")",
        "isAcronym(words = [\"B\", \"r\", \"a\", \"v\", \"o\"], s = \"B\")",
        "isAcronym(words = [\"Massachusetts\", \"University\", \"of\", \"Technology\"], s = \"MU\")",
        "isAcronym(words = [\"B\", \"r\", \"o\", \"w\", \"s\", \"e\", \"y\"], s = \"B\")",
        "isAcronym(words = [\"many\", \"mild\", \"modern\"], s = \"m\")",
        "isAcronym(words = [\"hE\", \"bE\", \"sO\"], s = \"HEBS\")",
        "isAcronym(words = [\"m\", \"a\", \"g\", \"i\", \"c\", \"a\", \"l\"], s = \"MAGICA\")",
        "isAcronym(words = [\"Mass\", \"Action\", \"Cyber\", \"Kinetics\"], s = \"MACK\")",
        "isAcronym(words = [\"word\", \"process\", \"manage\"], s = \"wpm\")"
    ],
    "sample_121": [
        "minimumIndex([2, 3, 1, 1, 4])",
        "minimumIndex(nums = [2,2,1,1,1,2,2])",
        "minimumIndex([1, 2, 3, 4, 5, 6, 7])",
        "minimumIndex(nums = [1, 2, 2, 1, 1, 1])",
        "minimumIndex(nums = [2, 3, 4, 5, 6])",
        "minimumIndex(nums = [1, 2, 3, 2, 2, 2, 2, 1])",
        "minimumIndex(nums = [3,1,3,2,2,2,2,2])",
        "minimumIndex(nums = [3,3,3,2,2,2,2,4])",
        "minimumIndex(nums = [2,1,2,2,1,2,2,3,3,3])",
        "minimumIndex([2,2,1,3,1,2,2,1,3,1,1,2,2,2,2,1,2,1,2,1,2,1,3,1,2,2,2,2,3,1,3,1,3,2,3,1,1,2,2,2,3,1,3,1,3,1,2,2,2,1,2,2,1,2,2,2,1,3,1,2,2,2,2,3,1,2,2,1,1,2,2,2,2,1,2,1,2,2,2,1,2,2,2,1,1,2,2,2,2,1,2,2,2,2,1,3,1,2,1,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2,2,2,1,2,2,2,2,2,1,2,2,1,2,2,1,2,2,2,1,2,1,2,2,2,1,2,1,2,2,2,1,2,2,2,2,1,2,2,1,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    ],
    "sample_179": [
        "maximizeTheProfit(n = 10, offers = [[1,3,3],[2,5,2],[4,7,4],[6,9,5],[8,10,6]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5],[2,3,4],[1,4,10]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,5], [0,3,6], [1,4,10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 3, 5], [1, 2, 3], [3, 4, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [0, 3, 3], [2, 4, 3], [0, 2, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 5], [1, 3, 3], [3, 4, 2], [2, 5, 3], [3, 5, 5]])",
        "maximizeTheProfit(n = 4, offers = [[0, 1, 5], [1, 2, 3], [1, 3, 3], [2, 4, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 3], [1, 3, 1], [2, 4, 1], [3, 5, 1], [3, 5, 10]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 4], [1, 3, 2], [3, 4, 2], [2, 5, 3], [2, 6, 4]])",
        "maximizeTheProfit(n = 10, offers = [[4,5,10],[1,2,4],[5,6,8],[3,5,1]])"
    ],
    "sample_238": [
        "maximumTripletValue(nums = [1, 2, 3, 4, 5])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 3])",
        "maximumTripletValue(nums = [1, 2, 6, 5])",
        "maximumTripletValue(nums = [1, 2, 3, 4, 5, 6])",
        "maximumTripletValue([4, 2, 3])",
        "maximumTripletValue([2, 8, 1, 5, 7])",
        "maximumTripletValue([5, 3, 1, 6, 7])",
        "maximumTripletValue([1, 2, 3, 0, 4, 5])",
        "maximumTripletValue(nums = [2, -3, 0, 2, 2])"
    ],
    "sample_193": [
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR\")",
        "furthestDistanceFromOrigin(moves = \"L__R\")",
        "furthestDistanceFromOrigin(moves = \"__L\")",
        "furthestDistanceFromOrigin(moves = \"__LLR\")",
        "furthestDistanceFromOrigin(moves = \"__LLR\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"LLR_R\")",
        "furthestDistanceFromOrigin(moves = \"__LRR\")",
        "furthestDistanceFromOrigin(moves = \"LL_LR\")"
    ],
    "sample_149": [
        "finalString(s = \"string\")",
        "finalString(s = 'gfedcba')",
        "finalString(s = 'rtsnig')",
        "finalString(s = \"sightseeing\")",
        "finalString(s = \"sing\")",
        "finalString(s = 'gntisr')",
        "finalString(s = 'gngirt')",
        "finalString(s = \"qwertyuiop\")",
        "finalString(s = \"sit\")",
        "finalString(s=\"hgfrtsng\")"
    ],
    "sample_162": [
        "maxSum(nums = [51,22,103,44,88])",
        "maxSum(nums = [51, 32, 43, 14, 25])",
        "maxSum(nums = [51,22,103,44,55])",
        "maxSum(nums = [51, 22, 94, 37])",
        "maxSum([45, 23, 89, 56])",
        "maxSum(nums = [12,23,45,67,89])",
        "maxSum(nums = [51, 22, 88, 33, 91, 100])",
        "maxSum(nums = [15, 30, 25, 66, 108, 90])",
        "maxSum([15, 56, 89, 345, 678, 1234, 99])",
        "maxSum(nums = [51, 22, 101, 102, 104])"
    ],
    "sample_230": [
        "countWays([3, 2, 1])",
        "countWays([5, 4, 3, 2, 1])",
        "countWays([4, 3, 2, 1])",
        "countWays([4, 3, 2, 1])",
        "countWays([5, 3, 1])",
        "countWays(nums = [4, 2, 1])",
        "countWays([1, 2, 1])",
        "countWays([5, 5, 2])",
        "countWays(nums = [3, 3, 3, 3])",
        "countWays(nums = [1, 1, 1, 2, 2])"
    ],
    "sample_195": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n = 2, target = 5)",
        "minimumPossibleSum(n=2, target=2)",
        "minimumPossibleSum(n=2, target=5)",
        "minimumPossibleSum(n=3, target=6)"
    ],
    "sample_182": [
        "maximizeTheProfit(N = 5, offers = [[1, 3, 2], [2, 4, 1], [3, 5, 3]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 2], [2, 5, 3], [1, 4, 1]])",
        "maximizeTheProfit(N = 5, offers = [[0, 1, 1], [0, 2, 2], [1, 3, 2]])",
        "maximizeTheProfit(N = 5, offers = [[1, 3, 2], [1, 2, 1], [3, 5, 2]])",
        "maximizeTheProfit(N = 5, offers = [[0, 2, 2], [1, 3, 1], [3, 4, 1]])",
        "maximizeTheProfit(N = 6, offers = [[1, 3, 3], [2, 5, 2], [4, 6, 1]])",
        "maximizeTheProfit(N = 4, offers = [[2, 3, 1], [1, 2, 2], [4, 4, 2]])",
        "maximizeTheProfit(N = 6, offers = [[1, 5, 3], [2, 5, 2], [3, 4, 2]])",
        "maximizeTheProfit(N = 7, offers = [[1,3,1], [3,5,2], [2,7,2], [6,8,1]])",
        "maximizeTheProfit(N = 10, offers = [[4,9,5], [1,3,2], [6,8,6], [1,8,4], [6,9,5], [5,8,4], [7,9,2], [4,6,1], [10,10,7]])"
    ],
    "sample_178": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 6], [0, 3, 5], [2, 4, 4]])",
        "maximizeTheProfit(n = 7, offers = [[1, 6, 5], [2, 3, 2], [3, 5, 3], [4, 6, 2], [5, 6, 3], [6, 7, 2]])",
        "maximizeTheProfit(n = 5, offers = [[1, 4, 3], [0, 1, 3], [1, 2, 5], [2, 3, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1,2,8],[0,2,4],[2,3,1],[1,4,2]])",
        "maximizeTheProfit(n = 5, offers = [[1,1,6], [1,2,7], [1,3,5], [2,4,6], [3,4,4]])",
        "maximizeTheProfit(n = 5, offers = [[1,1,6],[1,2,7],[1,3,1],[3,4,9],[2,4,6]])",
        "maximizeTheProfit(n = 6, offers = [[1, 2, 5], [0, 3, 2], [2, 5, 3], [0, 5, 1], [1, 6, 6], [0, 4, 4]])",
        "maximizeTheProfit(n = 10, offers = [[0,6,6],[0,9,5],[1,5,4],[3,7,7],[5,8,6],[7,9,5],[8,9,4]])",
        "maximizeTheProfit(n = 7, offers = [[0,2,3], [0,1,5], [1,2,1], [3,4,9], [4,5,2], [5,6,4]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 8], [3, 6, 5], [2, 4, 3], [4, 7, 10]])"
    ],
    "sample_135": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 60, 70], target = 80)",
        "numberOfEmployeesWhoMetTarget(hours = [2, 3, 4], target = 6)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 70, 80, 90, 100], target = 100)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 6, 6, 6], target = 10)"
    ],
    "sample_143": [
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,4,1,2,3,4])",
        "countCompleteSubarrays(nums = [2, 1, 4, 3, 2, 1, 4, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,2,2,1,1])",
        "countCompleteSubarrays(nums = [2,1,4,1,2,3,4,1,2])"
    ],
    "sample_229": [
        "countWays([1, 2, 3, 4, 5])",
        "countWays([2, 0, 1, 3])",
        "countWays([0, 2, 1])",
        "countWays([0, 3, 2, 1])",
        "countWays(nums = [1,2,3,4])",
        "countWays([1, 3, 0, 2])",
        "countWays([0, 0, 1, 2])",
        "countWays([3,2,1,4])",
        "countWays([2, 1, 3, 0, 0, 0])",
        "countWays([1,1,2,2,2])"
    ],
    "sample_132": [
        "maxIncreasingGroups([3, 2, 1])",
        "maxIncreasingGroups([5,4,3,2,1])",
        "maxIncreasingGroups([3, 2, 2, 1, 1])",
        "maxIncreasingGroups(usageLimits = [1,2,3,4,5])",
        "maxIncreasingGroups([2, 1, 1, 2])",
        "maxIncreasingGroups([5,5,5,5,5])",
        "maxIncreasingGroups([2, 5, 3, 1])",
        "maxIncreasingGroups([2, 1, 0, 2])",
        "maxIncreasingGroups([3, 5, 2])",
        "maxIncreasingGroups([5, 4, 2, 6, 1])"
    ],
    "sample_173": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n=3, k=6)"
    ],
    "sample_212": [
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,4,5], m = 5, k = 2)",
        "countInterestingSubarrays(nums = [3,1,4,1,5], m = 2, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,4,1,6], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,4,1,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 1, 2], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,3,1,4,3,2,1,4], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [4, 1, 3, 2, 4, 1, 2], m = 3, k = 2)"
    ],
    "sample_145": [
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,4,1,2,3,4])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays([1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 4, 2, 1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,1,2,3,4,1,2,3,1,2,3,4,1,2,3])"
    ],
    "sample_187": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,10], k = 4)",
        "longestEqualSubarray(nums = [1,3,1,2,2,3,1], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 1, 2, 2, 3, 1], k = 2)"
    ],
    "sample_170": [
        "isAcronym(words = [\"Hi\", \"There\"], s = \"HT\")",
        "isAcronym(words = [\"Marvel\", \"Universes\"], s = \"MU\")",
        "isAcronym(words = [\"It\", \"Is\", \"Over\"], s = \"IIO\")",
        "isAcronym(words = [\"mass\", \"action\", \"kinetics\"], s = \"MAK\")",
        "isAcronym(words = [\"For\", \"Your\", \"Informations\"], s = \"FYI\")",
        "isAcronym(words = [\"From\", \"Mission\"], s = \"FMM\")",
        "isAcronym(words = [\"Something\", \"Completely\", \"Different\"], s = \"SC\")",
        "isAcronym(words = [\"Big\",\"Red\",\"Hat\"], s = \"BRH\")",
        "isAcronym(words = [\"T\", \"H\", \"R\", \"E\", \"E\"], s = \"THREE\")",
        "isAcronym(words = [\"word\", \"text\", \"bubble\"], s = \"WTB\")"
    ],
    "sample_232": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s='000')",
        "maximumOddBinaryNumber(s='000')",
        "maximumOddBinaryNumber(s='000')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = \"1100\")"
    ],
    "sample_226": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1,2,3])",
        "countWays([1, 2, 3, 4])",
        "countWays([2, 1, 3])",
        "countWays([1,2,3,5])",
        "countWays([3,1,2])",
        "countWays(nums = [1,2,3,4,5,6])",
        "countWays([3, 2, 1])",
        "countWays(nums = [3, 1, 2, 4])"
    ],
    "sample_180": [
        "maximizeTheProfit(n = 5, offers = [[1,3,3],[2,4,4],[3,5,5],[1,2,1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 1], [1, 2, 5], [3, 4, 10]])",
        "maximizeTheProfit(n = 10, offers = [[1, 2, 5], [3, 7, 10], [5, 8, 12]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 8], [0, 3, 5], [1, 4, 6]])",
        "maximizeTheProfit(n = 5, offers = [[2, 3, 2], [0, 1, 1]])",
        "maximizeTheProfit(n = 5, offers = [[0, 1, 6], [0, 2, 7], [1, 3, 10], [2, 5, 3]])",
        "maximizeTheProfit(n = 10, offers = [[2, 5, 2], [1, 4, 3], [5, 9, 4]])",
        "maximizeTheProfit(n = 5, offers = [[1,3,5], [2,4,1], [3,5,3], [2,5,2], [5,6,4]])",
        "maximizeTheProfit(n = 6, offers = [[0, 3, 3], [1, 4, 4], [2, 5, 5], [0, 1, 10], [2, 3, 1], [0, 5, 5]])",
        "maximizeTheProfit(n=10, offers=[[3,6,5],[2,6,3],[4,7,5],[2,4,2],[1,4,3],[3,5,2],[2,3,2],[4,6,4],[1,5,3],[3,7,1],[2,5,3],[4,7,2],[1,6,5]])"
    ],
    "sample_122": [
        "minimumIndex(nums = [2,1,1,1,1,2,2,2])",
        "minimumIndex(nums = [3,3,3,2,2,2])",
        "minimumIndex([1, 2, 2, 3, 3, 3, 4, 4])",
        "minimumIndex(nums = [1,2,2,2,2,2,2,3,4,5])",
        "minimumIndex(nums = [2,2,2,1,1,1])",
        "minimumIndex(nums = [1,2,3,2,2,2,2,5,6,7])",
        "minimumIndex(nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5])",
        "minimumIndex(nums = [2,4,3,2,3,1,2])",
        "minimumIndex([1,2,3,2,2,3,4,1,2,3,2])",
        "minimumIndex(nums = [3,1,2,3,3,2,3,1,2,2,2,2,2,3,3,3,3,2,2])"
    ],
    "sample_215": [
        "numberOfPoints(nums = [[2,4], [3,6], [5,7]])",
        "numberOfPoints(nums = [[2,5],[4,7],[6,9]])",
        "numberOfPoints(nums = [[10,15],[20,25],[30,35]])",
        "numberOfPoints(nums = [[1, 5], [2, 3], [4, 7]])",
        "numberOfPoints(nums = [[2, 4], [3, 6], [5, 7]])",
        "numberOfPoints([[1,3],[3,5],[5,7]])",
        "numberOfPoints(nums = [[5,8],[3,6],[1,2],[9,10]])",
        "numberOfPoints(nums = [[5,6],[8,9],[3,4],[1,2],[7,8],[10,10],[6,7]])",
        "numberOfPoints(nums = [[5,7],[3,5],[1,2],[5,6],[2,4],[0,3],[4,7]])",
        "numberOfPoints(nums = [[2,3],[2,4],[4,5],[6,7],[6,8],[7,8],[7,9]])"
    ],
    "sample_125": [
        "splitWordsBySeparator(words = [\"hello\", \"world\"], separator = \" \")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"bana\", \"na\"], separator = \"a\")",
        "splitWordsBySeparator(words = [\"ba\", \"nana\"], separator = \"\")",
        "splitWordsBySeparator(words=[\"bana\", \"na\"], separator=\"a\")",
        "splitWordsBySeparator(words=[\"apple,orange,banana\"], separator=\",\")",
        "splitWordsBySeparator(words=[\"bana\", \"na\"], separator=\"\")",
        "splitWordsBySeparator(words=[\"apple\", \"pie\"], separator=\"p\")",
        "splitWordsBySeparator(words=[\"a\", \"b\", \"c\"], separator=\"b\")",
        "splitWordsBySeparator(words = [\"hello-world\", \"apple-orange-banana\"], separator = \"-\")"
    ],
    "sample_194": [
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 1, target = 2)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 5, target = 10)",
        "minimumPossibleSum(n = 4, target = 3)"
    ],
    "sample_219": [
        "numberOfPoints([[1, 3], [2, 5], [3, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 5], [3, 7]])",
        "numberOfPoints(nums = [[1, 3], [2, 4], [3, 5]])",
        "numberOfPoints(nums = [[1, 2], [2, 3], [3, 4]])",
        "numberOfPoints([[0, 3], [2, 5]])",
        "numberOfPoints(nums = [[1, 2], [3, 4], [5, 6]])",
        "numberOfPoints([[0,2],[1,3],[1,1]])",
        "numberOfPoints([[2, 5], [4, 7], [6, 9]])",
        "numberOfPoints(nums = [[2,5],[4,6],[2,4]])",
        "numberOfPoints([[2, 3], [4, 5], [3, 6]])"
    ],
    "sample_210": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [1, 2, 3, 4], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2,1,3,2,1,3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,1,3,2,1,3], m = 3, k = 2)",
        "countInterestingSubarrays(nums = [2,1,4,3,6], m = 3, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 3, 4, 2], m = 5, k = 1)",
        "countInterestingSubarrays(nums = [4, 4, 1, 4], m = 4, k = 1)",
        "countInterestingSubarrays(nums = [2, 1, 3, 4, 5, 6], m = 4, k = 1)"
    ],
    "sample_223": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8, 10, 12, 14], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3)",
        "sumIndicesWithKSetBits(nums = [5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 2, 4, 1, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 2, 2, 2, 3, 4], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,2,3,1,2,1,1,0,1], k = 3)"
    ],
    "sample_203": [
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"25\")",
        "minimumOperations(num = \"2500\")",
        "minimumOperations(\"12\")",
        "minimumOperations(num = \"15\")",
        "minimumOperations(num = \"025\")",
        "minimumOperations(\"15\")",
        "minimumOperations(num = \"0123\")",
        "minimumOperations(num = \"33\")",
        "minimumOperations(\"875\")"
    ],
    "sample_209": [
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 6, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9,10], modulo = 10, k = 5)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 10, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 7, k = 2)",
        "countInterestingSubarrays(nums = [2, 3, 1, 4, 5], modulo = 6, k = 3)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 6, k = 4)",
        "countInterestingSubarrays(nums = [2,1,3,2,1,3], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=6, k=2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5,6,7,8,9], modulo = 10, k = 2)",
        "countInterestingSubarrays(nums = [2,3,1,2,3,1,2], modulo = 7, k = 3)"
    ],
    "sample_185": [
        "longestEqualSubarray(A = [1,2,3,4,1,2,3,4,1,2,3,4], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,1,2,3,4,1,2,3,4], K = 2)",
        "longestEqualSubarray(A = [1,2,3,4,1,2,3,4], K = 2)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 1, 2, 3, 4], K = 2)",
        "longestEqualSubarray(A = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], K = 3)",
        "longestEqualSubarray(A = [1,2,3,4,1,2,3,4], K = 3)",
        "longestEqualSubarray(A = [1, 2, 3, 4, 5, 5, 5, 5, 6, 7], K = 2)",
        "longestEqualSubarray(A = [3,2,1,4,5,6,7,8,9,10], K = 2)",
        "longestEqualSubarray(A = [1,2,1,2,1,3,1,2,1,2,1], K = 2)",
        "longestEqualSubarray(A = [3,3,3,1,2,2,2,1,1,1,3,3,3,1,1,1,2,2,2], K = 2)"
    ],
    "sample_146": [
        "finalString(s = \"inter\")",
        "finalString(s = \"inter\")",
        "finalString(s = \"ponti\")",
        "finalString(s = \"pointeri\")",
        "finalString(s = \"iter\")",
        "finalString(s = \"pnioter\")",
        "finalString(s = \"pnioter\")",
        "finalString(s = 'pntir')",
        "finalString(s = 'epiinr')",
        "finalString(s = \"lintcode\")"
    ],
    "sample_137": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 35)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 4)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 34, 56, 78, 90], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [11, 22, 33, 44], target = 22)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 34, 56, 78], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 25], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 15, 18, 20, 14], target = 15)",
        "numberOfEmployeesWhoMetTarget(hours = [30, 50, 80, 90], target = 60)"
    ],
    "sample_218": [
        "numberOfPoints(nums = [[1, 3], [2, 4], [2, 2]])",
        "numberOfPoints(nums = [[2, 5], [4, 6], [2, 4]])",
        "numberOfPoints([[1, 3], [2, 4], [5, 7]])",
        "numberOfPoints([[0,1], [1,2], [2,3]])",
        "numberOfPoints([[1, 5], [3, 3], [2, 2]])",
        "numberOfPoints([[2,3],[1,2],[4,5]])",
        "numberOfPoints([[1, 2], [2, 4], [1, 3]])",
        "numberOfPoints([[1, 4], [3, 6]])",
        "numberOfPoints(nums=[[1, 4], [3, 5], [2, 2]])",
        "numberOfPoints(nums = [[0, 3], [1, 4], [2, 2]])"
    ],
    "sample_130": [
        "maxIncreasingGroups([1, 2, 5])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3, 4, 5])",
        "maxIncreasingGroups([1,2,5])",
        "maxIncreasingGroups([1,2,5])",
        "maxIncreasingGroups([1,2,5])",
        "maxIncreasingGroups([1, 1, 1, 1, 1])",
        "maxIncreasingGroups([1,2,3,4])",
        "maxIncreasingGroups([1, 2, 5, 6])",
        "maxIncreasingGroups([1,1,1,1,1,1,1,1])"
    ],
    "sample_181": [
        "maximizeTheProfit(n = 4, offers = [[0,1,1],[1,2,2],[2,3,3]])",
        "maximizeTheProfit(n = 3, offers = [[1,1,1],[2,2,1],[2,3,2]])",
        "maximizeTheProfit(n = 4, offers = [[1,2,2],[1,3,2],[2,4,1]])",
        "maximizeTheProfit(n=5, offers=[[1, 2, 2], [3, 4, 3]])",
        "maximizeTheProfit(n=4, offers=[[1,1,2],[2,3,1],[3,4,2]])",
        "maximizeTheProfit(n = 6, offers = [[2, 3, 1], [1, 2, 2], [4, 5, 1]])",
        "maximizeTheProfit(n=5, offers=[[1,2,2],[3,4,2],[0,4,3]])",
        "maximizeTheProfit(n = 5, offers = [[0,2,2],[1,3,1],[1,4,3],[2,5,1]])",
        "maximizeTheProfit(n = 4, offers = [[0,1,1], [1,2,1], [3,4,2]])",
        "maximizeTheProfit(n = 5, offers = [[2,4,1], [3,4,2], [1,4,2]])"
    ],
    "sample_190": [
        "furthestDistanceFromOrigin(moves = \"LLR_RR_\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_LR\")",
        "furthestDistanceFromOrigin(moves = \"L_LRRL\")",
        "furthestDistanceFromOrigin(moves = \"RL_LRRL\")",
        "furthestDistanceFromOrigin(moves = \"L_RR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RR_L\")",
        "furthestDistanceFromOrigin(moves = \"LLLRR_RRR\")",
        "furthestDistanceFromOrigin(moves = \"L__LR_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_R_R_L_\")",
        "furthestDistanceFromOrigin(moves = \"RLLL_RR\")"
    ],
    "sample_175": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n=3, k=4)",
        "minimumSum(n=3, k=5)"
    ],
    "sample_217": [
        "numberOfPoints(nums = [[1,2],[3,4],[5,6]])",
        "numberOfPoints(nums = [[1,3],[2,4],[3,6]])",
        "numberOfPoints(nums = [[1,3],[3,5],[5,7],[7,9],[9,11],[11,13],[13,15]])",
        "numberOfPoints(nums = [[1,3],[2,5],[4,6]])",
        "numberOfPoints(nums=[[1,2],[3,5],[4,7]])",
        "numberOfPoints(nums = [[1,5],[3,7],[2,4]])",
        "numberOfPoints(nums = [[2,5],[4,6],[7,8],[1,2],[3,4],[5,6],[7,8]])",
        "numberOfPoints(nums = [[1,3],[2,4],[1,2],[3,5],[2,3],[1,1],[4,6]])",
        "numberOfPoints([[2,5],[3,4],[5,6],[9,10]])",
        "numberOfPoints(nums = [[2,5],[3,4],[5,7],[7,8],[1,4],[2,6],[4,8]])"
    ],
    "sample_205": [
        "minimumOperations(num = \"0123\")",
        "minimumOperations(num = \"225\")",
        "minimumOperations(\"1234\")",
        "minimumOperations(num = \"123\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(\"00000\")",
        "minimumOperations(num = \"123456\")",
        "minimumOperations(num = \"11111\")",
        "minimumOperations(\"0100\")",
        "minimumOperations(num = \"1330\")"
    ],
    "sample_120": [
        "minimumIndex(nums = [2,1,2,5,3,2])",
        "minimumIndex(nums = [1, 2, 2, 1])",
        "minimumIndex(nums = [1,2,2,2,3,3])",
        "minimumIndex(nums = [1,2,2,2,3,3,4])",
        "minimumIndex(nums = [0, 0, 1, 1, 2])",
        "minimumIndex(nums = [0,1,2,2,2,2])",
        "minimumIndex(nums = [1,1,1,2,2,2,2,2,3,3,3,3,3,3,3])",
        "minimumIndex(nums = [0,1,2,3,2,0,1])",
        "minimumIndex(nums = [0, 1, 2, 3, 3, 3, 4, 5, 3])",
        "minimumIndex(nums = [0, 1, 1, 2, 3, 1, 2, 1, 2, 0])"
    ],
    "sample_192": [
        "furthestDistanceFromOrigin(moves = \"LLL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"LLL_RRR\")",
        "furthestDistanceFromOrigin(moves = \"LRR_LR_\")",
        "furthestDistanceFromOrigin(moves = \"LL_RRR_LL\")",
        "furthestDistanceFromOrigin(moves = \"LLLR_R_R\")",
        "furthestDistanceFromOrigin(moves = \"L_R_L_R_L_R_\")",
        "furthestDistanceFromOrigin(moves = \"LLLL_R_R\")",
        "furthestDistanceFromOrigin(moves = 'L__L_RR')",
        "furthestDistanceFromOrigin(moves = \"LRR_L_LR_\")",
        "furthestDistanceFromOrigin(moves = \"L_R_R_L_R_L_L_\")"
    ],
    "sample_161": [
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [51, 32, 43])",
        "maxSum(nums = [55, 9])",
        "maxSum(nums = [1, 2, 3])",
        "maxSum(nums = [11, 12, 13])",
        "maxSum(nums=[1, 2, 3, 4, 5])",
        "maxSum(nums = [5, 50, 4, 2])",
        "maxSum(nums = [5, 50, 6, 45])",
        "maxSum(nums = [54, 76, 12, 34, 45, 66])",
        "maxSum(nums = [5, 11, 2, 9, 8, 17, 16])"
    ],
    "sample_160": [
        "maxSum([15, 30, 25, 66, 55])",
        "maxSum([15, 30, 25, 60, 75])",
        "maxSum([15, 30, 45, 60])",
        "maxSum(nums = [10, 11, 12, 13, 14])",
        "maxSum(nums = [5, 5, 5, 5, 5])",
        "maxSum(nums = [51, 52, 53, 54])",
        "maxSum(nums = [12, 23, 34, 45, 56])",
        "maxSum(nums = [512, 321, 320, 10])",
        "maxSum(nums = [51, 51, 33, 33])",
        "maxSum(nums = [12, 122, 548, 168, 232, 231, 15])"
    ],
    "sample_123": [
        "splitWordsBySeparator(words = [\"one-two-three\", \"four-five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three-four-five\", \"six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three-four\", \"five-six\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one-two\", \"three four\", \"five six\"], separator = \"-\")",
        "splitWordsBySeparator(words=['one,two,three', 'four,five,six'], separator=',')",
        "splitWordsBySeparator(words = [\"one-two\", \"three-four,five\", \"six\"], separator = \"-,\")",
        "splitWordsBySeparator(words=[\"one-two\", \"three--four\", \"five six\"], separator=\"-\")",
        "splitWordsBySeparator(words=['one', 'two-three-four', 'five-six'], separator='-')",
        "splitWordsBySeparator(words=[\"one,two\", \"three,four,five\"], separator=\",\")",
        "splitWordsBySeparator(words=['one', 'two','three-four-five','six'], separator=\"-\")"
    ],
    "sample_134": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 45)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [10,10,10,10,10], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 12, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours=[10,11,12], target=15)",
        "numberOfEmployeesWhoMetTarget(hours = [150, 200, 180, 220, 170], target = 200)",
        "numberOfEmployeesWhoMetTarget(hours=[20, 30, 40], target=35)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 15, 20, 18, 22], target = 21)"
    ],
    "sample_136": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [8, 9, 10], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 10, 10, 10, 10], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [12, 25, 36, 47, 58], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours=[10,10,10,10], target=12)",
        "numberOfEmployeesWhoMetTarget(hours = [10,11,12,13,14,15,16,17,18,19,20], target = 21)",
        "numberOfEmployeesWhoMetTarget(hours=[8, 12, 20], target=15)",
        "numberOfEmployeesWhoMetTarget(hours = [7, 4, 9, 2, 9], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 8, 23, 14, 5], target = 20)"
    ],
    "sample_171": [
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 6)"
    ],
    "sample_159": [
        "maxSum(nums=[55,9])",
        "maxSum(nums=[55,9])",
        "maxSum(nums = [51,23,76,48,12])",
        "maxSum(nums = [15, 56, 14])",
        "maxSum([55, 23, 32, 67, 12])",
        "maxSum([55, 23, 45, 67, 12])",
        "maxSum([15, 56, 12, 11, 112])",
        "maxSum(nums = [12,10,23,5])",
        "maxSum([15, 56, 89, 34, 66, 67])",
        "maxSum(nums = [10, 12, 15, 9, 6])"
    ],
    "sample_157": [
        "canSplitArray(nums = [2, 3, 3, 2], m = 6)",
        "canSplitArray(nums = [2,3,3,2], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [5, 10, 15, 20], m = 25)",
        "canSplitArray(nums = [10, 20, 30, 40, 50], m = 55)",
        "canSplitArray(nums = [2, 2, 3, 2], m = 6)",
        "canSplitArray(nums = [2, 5, 8, 4], m = 10)",
        "canSplitArray(nums = [5, 2, 4, 1, 3], m = 6)",
        "canSplitArray(nums = [2, 5, 3, 1], m = 5)",
        "canSplitArray(nums = [2,5,1,3,6], m = 8)"
    ],
    "sample_124": [
        "splitWordsBySeparator(words = [\"a,b,c\", \"d,e,f\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"apple-orange-banana\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"one\", \"two-three\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"bana-na\", \"ma-na\"], separator = \"-\")",
        "splitWordsBySeparator(words = [\"ab,cd\", \"ef,gh\"], separator = \",\")",
        "splitWordsBySeparator(words = [\"hello_world\", \"program_python\"], separator = \"_\")",
        "splitWordsBySeparator(words=[\"hello,world\", \"apple\"], separator=\",\")",
        "splitWordsBySeparator(words=[\"apple,orange,\", \"pear\", \",grape\"], separator=\",\")",
        "splitWordsBySeparator(words = [\"I.am.happy\", \"yes,I.am\"], separator = \".\")",
        "splitWordsBySeparator(words = [\"a\", \"b\", \"c\"], separator = \"-\")"
    ],
    "sample_172": [
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 2, k = 3)",
        "minimumSum(n = 3, k = 3)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 2)",
        "minimumSum(n = 2, k = 4)",
        "minimumSum(n = 2, k = 5)",
        "minimumSum(n=3, k=5)"
    ],
    "sample_228": [
        "countWays([0, 1, 2])",
        "countWays(nums = [1,2,3,0])",
        "countWays([2, 0, 1])",
        "countWays([1, 2, 0, 3, 4])",
        "countWays([0,0,2])",
        "countWays([1,2,0,4,5])",
        "countWays(nums = [1, 2, 0, 4])",
        "countWays(nums = [1,2,3,0,0,0])",
        "countWays([2, 1, 0, 1, 2])",
        "countWays([1,1,1,1,1])"
    ],
    "sample_233": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s='000')",
        "maximumOddBinaryNumber(s='001')",
        "maximumOddBinaryNumber(s= '000')",
        "maximumOddBinaryNumber(s = '0110')",
        "maximumOddBinaryNumber(s = \"0110\")"
    ],
    "sample_119": [
        "minimumIndex(nums = [2,1,2,1,2,1,2])",
        "minimumIndex([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])",
        "minimumIndex(nums = [1, 2, 2, 3, 1, 4, 2])",
        "minimumIndex(nums = [2,1,2,1,2,1,2,1])",
        "minimumIndex(nums = [2,1,2,1,2,1,2,1,2,1,2])",
        "minimumIndex(nums = [2,1,2,3,2,4,2,5,2])",
        "minimumIndex(nums = [0,1,2,1,2,1])",
        "minimumIndex(nums = [2, 1, 2, 1, 2, 1, 1, 1, 1])",
        "minimumIndex(nums = [1, 2, 2, 2, 3, 4, 4])",
        "minimumIndex(nums = [1, 0, 0, 0, 1, 0, 0])"
    ],
    "sample_153": [
        "canSplitArray(nums = [1,2,3,4,5], m = 6)",
        "canSplitArray(nums = [1,2,3,4,5], m = 2)",
        "canSplitArray(nums = [1,2,3,4,5], m = 10)",
        "canSplitArray(nums = [2,3,3,2,1], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 5)",
        "canSplitArray(nums = [2,2,2,2], m = 4)",
        "canSplitArray(nums = [2,2,2,2,2,2,2], m = 4)",
        "canSplitArray(nums = [2,2,3,3,4,4], m = 6)",
        "canSplitArray(nums = [5, 4, 6, 9], m = 8)",
        "canSplitArray(nums = [1,1,2,2,2,1], m = 4)"
    ],
    "sample_147": [
        "finalString(s = 'ring')",
        "finalString(s = \"stringi\")",
        "finalString(s = \"sring\")",
        "finalString(s='rtsni')",
        "finalString(s = \"gngitsr\")",
        "finalString(s=\"string\")",
        "finalString(s = \"tringis\")",
        "finalString(s = 'iartsi')",
        "finalString(s = \"ittrsng\")",
        "finalString(s=\"grtsiugsng\")"
    ],
    "sample_174": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 2)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n=3, k=5)",
        "minimumSum(n = 3, k = 1)"
    ],
    "sample_154": [
        "canSplitArray(nums = [1, 2, 3, 4, 5], m = 10)",
        "canSplitArray(nums = [3,2,3], m = 6)",
        "canSplitArray(nums = [1, 2, 3, 4, 5, 6], m = 10)",
        "canSplitArray(nums = [1, 5, 6], m = 7)",
        "canSplitArray(nums = [2, 2, 3, 1], m = 5)",
        "canSplitArray(nums = [2, 4, 5, 1], m = 7)",
        "canSplitArray(nums = [3, 2, 4, 1], m = 4)",
        "canSplitArray(nums = [4, 2, 3, 3, 2, 4], m = 9)",
        "canSplitArray(nums = [2, 2, 3, 2, 3, 4], m = 9)",
        "canSplitArray(nums = [1,4,3,2,6,8], m = 10)"
    ],
    "sample_142": [
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 2])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 3, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 2, 1, 1, 1, 2])"
    ],
    "sample_150": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = 'string')",
        "finalString(s = \"This is a string\")",
        "finalString(s = \"rtsni\")"
    ],
    "sample_197": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n=1, target=1)",
        "minimumPossibleSum(n = 2, target = 1)"
    ],
    "sample_176": [
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 5)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 4)",
        "minimumSum(n = 3, k = 6)",
        "minimumSum(n = 3, k = 1)"
    ],
    "sample_211": [
        "countInterestingSubarrays(nums = [1, 2, 3, 4, 5], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [1,2,3,4,5], modulo = 4, k = 2)",
        "countInterestingSubarrays(nums = [2,1,3,1,2,1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums=[1, 2, 3, 4, 5], modulo=3, k=2)",
        "countInterestingSubarrays(nums = [2, 1, 3, 2, 1], modulo = 3, k = 2)",
        "countInterestingSubarrays(nums = [4,2,1,2,2], modulo = 5, k = 2)",
        "countInterestingSubarrays(nums = [3,5,1,2,3,1,2], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums = [1,2,1,2,3,4], modulo = 5, k = 3)",
        "countInterestingSubarrays(nums=[2, 4, 2, 7, 1], modulo=8, k=3)",
        "countInterestingSubarrays(nums = [0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0], modulo = 3, k = 2)"
    ],
    "sample_221": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 3)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7], k = 3)",
        "sumIndicesWithKSetBits(nums = [3, 2, 4, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2,4,6,8,10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 1, 1, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 7, 3, 8], k = 3)",
        "sumIndicesWithKSetBits(nums = [4, 2, 7, 1, 12, 6, 3], k = 1)"
    ],
    "sample_151": [
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"string\")",
        "finalString(s = \"sting\")",
        "finalString(s = 'ritsni')",
        "finalString(s = \"sirgng\")"
    ],
    "sample_220": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,0,1,0,1], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 0, 1, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 1, 4, 3, 6], k = 2)"
    ],
    "sample_133": [
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 5])",
        "maxIncreasingGroups([1, 2, 5])",
        "maxIncreasingGroups([1, 2, 5])",
        "maxIncreasingGroups([1, 2, 3, 4])",
        "maxIncreasingGroups([2, 2, 3])",
        "maxIncreasingGroups([1,2,3,4,5])",
        "maxIncreasingGroups([2,3,4,5])"
    ],
    "sample_204": [
        "minimumOperations(\"0110\")",
        "minimumOperations(\"025\")",
        "minimumOperations(s = \"02550\")",
        "minimumOperations(s = \"0255\")",
        "minimumOperations(s = \"1050\")",
        "minimumOperations(\"0011\")",
        "minimumOperations(s = \"011\")",
        "minimumOperations(s = \"1057\")",
        "minimumOperations(s = \"001122\")",
        "minimumOperations(s = \"1011\")"
    ],
    "sample_138": [
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 25)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 3)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 11, 12, 13, 14, 15], target = 12)",
        "numberOfEmployeesWhoMetTarget(hours = [15, 20, 18, 25, 30], target = 20)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 30, 40, 20, 50], target = 40)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 11, 9, 12, 12], target = 11)",
        "numberOfEmployeesWhoMetTarget(hours = [20, 30, 40, 15, 30], target = 30)",
        "numberOfEmployeesWhoMetTarget(hours = [80, 100, 120, 140, 150], target = 120)"
    ],
    "sample_148": [
        "finalString(s = 'inter')",
        "finalString(s = 'inter')",
        "finalString(s = \"pinter\")",
        "finalString(s = 'inpeter')",
        "finalString(s = \"pontir\")",
        "finalString(s = 'reinter')",
        "finalString(s = \"iceman\")",
        "finalString(s = \"rntepo\")",
        "finalString(s=\"nitiner\")",
        "finalString(s = 'bapronteri')"
    ],
    "sample_168": [
        "isAcronym(words = [\"Hi\", \"There\"], s = \"HT\")",
        "isAcronym(words = [\"Mass\", \"Action\", \"Lab\"], s = \"MAL\")",
        "isAcronym(words = [\"Your\", \"Mother\"], s = \"YM\")",
        "isAcronym(words = [\"Every\",\"Good\",\"Boy\"], s = \"EGB\")",
        "isAcronym(words=[\"hello\", \"world\"], s=\"hw\")",
        "isAcronym(words = [\"Fruit\", \"Banana\"], s = \"FB\")",
        "isAcronym(words = [\"Big\", \"Bang\", \"Broadcast\"], s = \"BBB\")",
        "isAcronym(words = ['H', 'y', 'p', 'e'], s = \"HYP\")",
        "isAcronym(words = ['T', 'e', 's', 't'], s = 'Tes')",
        "isAcronym(words=[\"C\", \"B\", \"A\"], s=\"CB\")"
    ],
    "sample_201": [
        "minOperations(nums = [1,2,4,8], target = 15)",
        "minOperations(nums = [1,2,4,8], target = 15)",
        "minOperations(nums = [1,2,3], target = 4)",
        "minOperations(nums = [1,2,3], target = 4)",
        "minOperations(nums = [1,2,4,8], target = 5)",
        "minOperations(nums = [1,2,4,8,16], target = 15)",
        "minOperations(nums = [1, 3, 5], target = 10)",
        "minOperations(nums=[2,3,2,3], target=10)",
        "minOperations(nums = [8,16,32,64], target = 5)",
        "minOperations(nums = [1000000000,1000000000,1000000000], target = 2000000000)"
    ],
    "sample_235": [
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '011')",
        "maximumOddBinaryNumber(s = '100')",
        "maximumOddBinaryNumber(s = '101')",
        "maximumOddBinaryNumber(s='010')",
        "maximumOddBinaryNumber(s='011')",
        "maximumOddBinaryNumber(s='101')"
    ],
    "sample_237": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s = '010')",
        "maximumOddBinaryNumber(s='010')",
        "maximumOddBinaryNumber(s='010')",
        "maximumOddBinaryNumber(s='001')"
    ],
    "sample_198": [
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 5)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 7)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 4, target = 8)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n=3, target=6)",
        "minimumPossibleSum(n = 3, target = 10)",
        "minimumPossibleSum(n = 3, target = 10)"
    ],
    "sample_188": [
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LAR\")",
        "furthestDistanceFromOrigin(moves = \"LRAR\")",
        "furthestDistanceFromOrigin(moves = \"LRAR\")",
        "furthestDistanceFromOrigin(moves = \"LLAR\")",
        "furthestDistanceFromOrigin(moves = \"LLAR\")",
        "furthestDistanceFromOrigin(moves = \"LLAR\")",
        "furthestDistanceFromOrigin(moves = \"LRARL\")"
    ],
    "sample_199": [
        "minimumPossibleSum(n = 1, target = 1)",
        "minimumPossibleSum(n = 3, target = 2)",
        "minimumPossibleSum(n = 1, target = 0)",
        "minimumPossibleSum(n = 2, target = 4)",
        "minimumPossibleSum(n = 5, target = 5)",
        "minimumPossibleSum(n = 4, target = 3)",
        "minimumPossibleSum(n = 4, target = 2)",
        "minimumPossibleSum(n = 4, target = 2)",
        "minimumPossibleSum(n = 1, target = 10)",
        "minimumPossibleSum(n = 3, target = 6)"
    ],
    "sample_139": [
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40, 50], target = 60)",
        "numberOfEmployeesWhoMetTarget(hours = [1, 2, 3, 4, 5], target = 5)",
        "numberOfEmployeesWhoMetTarget(hours=[1, 2, 3, 4, 5], target=6)",
        "numberOfEmployeesWhoMetTarget(hours = [10, 20, 30, 40], target = 50)",
        "numberOfEmployeesWhoMetTarget(hours = [50, 60, 70, 80], target = 90)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 12, 10, 4], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [5, 5, 8, 10, 12], target = 7)",
        "numberOfEmployeesWhoMetTarget(hours = [3, 5, 1, 9, 2], target = 10)",
        "numberOfEmployeesWhoMetTarget(hours = [6, 2, 7, 3, 9, 1], target = 4)"
    ],
    "sample_231": [
        "countWays([0, 1, 2, 3])",
        "countWays([0, 2, 3])",
        "countWays([0, 2, 3, 1, 4])",
        "countWays([0, 3, 1, 2])",
        "countWays(nums = [0, 1, 2, 3])",
        "countWays([1, 3, 2, 0])",
        "countWays([1, 0, 1])",
        "countWays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "countWays([0,1,2,3,4,5,6,7,8,9])",
        "countWays(nums = [0, 1, 3, 5])"
    ],
    "sample_191": [
        "furthestDistanceFromOrigin(moves = \"LLLLRRRR__\")",
        "furthestDistanceFromOrigin(moves = \"LLRRRL_\")",
        "furthestDistanceFromOrigin(moves = \"LLLRRR_RRR\")",
        "furthestDistanceFromOrigin(moves = \"LLRR_LL\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR_RR\")",
        "furthestDistanceFromOrigin(moves = \"LLR_RRR_LL_\")",
        "furthestDistanceFromOrigin(moves = \"LLLLRRR_LRRR\")",
        "furthestDistanceFromOrigin(moves = \"LLLLR_R_L\")",
        "furthestDistanceFromOrigin(moves = \"LLRRR_LLLLLL\")",
        "furthestDistanceFromOrigin(moves = \"LLR_LRR_LR_L\")"
    ],
    "sample_196": [
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 3, target = 4)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 2, target = 3)",
        "minimumPossibleSum(n = 4, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 3, target = 3)",
        "minimumPossibleSum(n = 4, target = 4)"
    ],
    "sample_144": [
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,1,2,3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,4,1,2,3,4])",
        "countCompleteSubarrays(nums = [1, 2, 3, 1, 2, 3, 2, 1, 2, 3])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 1, 2, 3, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,1,2,3,2,1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 1, 2, 3, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,4,1,2,3,1,2,3,1,2,3,4])"
    ],
    "sample_156": [
        "canSplitArray(nums = [2, 3, 3, 2], m = 6)",
        "canSplitArray(nums = [1, 4, 2, 3], m = 5)",
        "canSplitArray(nums = [1, 4, 2, 3], m = 6)",
        "canSplitArray(nums = [2, 1, 3, 5, 6], m = 4)",
        "canSplitArray(nums = [2, 5, 8, 11], m = 10)",
        "canSplitArray(nums = [2, 5, 7, 10, 15], m = 12)",
        "canSplitArray(nums = [2, 3, 1, 5, 7], m = 8)",
        "canSplitArray(nums = [2, 3, 4, 2], m = 8)",
        "canSplitArray(nums = [3, 2, 1, 6, 5], m = 8)",
        "canSplitArray(nums = [2, 4, 6, 10, 20, 40], m = 12)"
    ],
    "sample_200": [
        "minOperations(nums = [1,1,2,3], target = 3)",
        "minOperations(nums = [1,1,2,3], target = 4)",
        "minOperations(nums = [1, 1, 1, 1, 1], target = 5)",
        "minOperations(nums = [1, 1, 2, 3], target = 4)",
        "minOperations(nums = [1, 1, 1, 1], target = 2)",
        "minOperations(nums = [1, 1, 1, 2], target = 3)",
        "minOperations(nums = [1, 1, 3], target = 3)",
        "minOperations(nums = [1, 1, 1, 2, 2], target = 5)",
        "minOperations(nums = [1, 1, 2, 4, 8], target = 16)",
        "minOperations(nums = [1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,8,8,9,9,9,10,10], target = 24)"
    ],
    "sample_224": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 8, 10, 12], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 2, 4, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 1, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 3, 0, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 4, 6, 7, 3], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 5, 2, 1], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 6, 1, 1, 1, 1], k = 3)"
    ],
    "sample_165": [
        "isAcronym(words = [\"For\", \"Your\", \"Information\"], s = \"FYI\")",
        "isAcronym(words = [\"Hi\", \"There\"], s = \"HT\")",
        "isAcronym(words = [\"Hi\", \"There\"], s = \"HT\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hey\", \"Jude\"], s = \"HJ\")",
        "isAcronym(words = [\"For\", \"All\", \"Mankind\"], s = \"FAM\")",
        "isAcronym(words = [\"Your\", \"World\", \"New\"], s = \"YWN\")",
        "isAcronym(words = [\"Hey\", \"there\"], s = \"HT\")",
        "isAcronym(words = [\"Bat\", \"Man\"], s = \"BMA\")",
        "isAcronym(words = [\"It\", \"Works\", \"For\", \"Me\"], s = \"IWF\")"
    ],
    "sample_227": [
        "countWays(nums = [1, 2, 3])",
        "countWays(nums = [1, 2, 3])",
        "countWays([-1, 0, 1])",
        "countWays(nums = [1, 2, 3, 5, 6])",
        "countWays([1, 3, 5, 7, 9])",
        "countWays(nums = [1, 2, 3, 4, 5, 6])",
        "countWays([3, 2, 1, 4, 5])",
        "countWays(nums = [0, 1, 2, 3, 5])",
        "countWays(nums = [1,3,5])",
        "countWays([-1, 0, 1, 3, 5, 10])"
    ],
    "sample_158": [
        "maxSum(nums = [55, 23, 34, 12, 11])",
        "maxSum(nums = [10, 20, 30, 40, 50])",
        "maxSum(nums = [12, 34, 56, 78, 90])",
        "maxSum([10, 20, 30, 40, 50])",
        "maxSum(nums = [55, 23, 445, 89])",
        "maxSum(nums = [55, 23, 34, 97, 12])",
        "maxSum(nums = [5, 5, 5, 5, 5])",
        "maxSum([15, 20, 11, 50])",
        "maxSum(nums = [55, 12, 9, 33, 55])",
        "maxSum([55, 23, 445, 6, 7, 8, 99, 100])"
    ],
    "sample_184": [
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,1], k = 1)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,3,3,3,2,2,2,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4,1,2,3,4], k = 3)",
        "longestEqualSubarray(nums = [1,2,3,2,1,2,3,2,1,2,3,4,5,6,7,8,9,10], k = 5)",
        "longestEqualSubarray(nums = [1, 3, 3, 3, 2, 2, 2, 1, 1, 1, 3, 3, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 1, 2, 3, 1, 2, 1, 2, 3, 1, 2, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [1,3,3,2,3,1,1,1,2,2,3,3,4,1,1,1,2,2,2,3,3,3,4,4,4], k = 1)"
    ],
    "sample_177": [
        "maximizeTheProfit(n = 5, offers = [[0, 1, 2], [0, 2, 3], [1, 2, 1], [2, 3, 2], [2, 4, 2]])",
        "maximizeTheProfit(n = 5, offers = [[0, 2, 3], [1, 3, 4], [2, 4, 2], [3, 5, 10]])",
        "maximizeTheProfit(n = 10, offers = [[2, 3, 5], [3, 5, 10], [4, 7, 15]])",
        "maximizeTheProfit(n=5, offers=[[0, 1, 3], [2, 3, 4], [1, 2, 5], [3, 4, 6]])",
        "maximizeTheProfit(n=5, offers=[[0, 2, 3], [2, 4, 3], [3, 4, 2], [1, 3, 2], [1, 2, 1]])",
        "maximizeTheProfit(n = 5, offers = [[1, 2, 2], [3, 4, 5], [0, 2, 1], [1, 3, 4], [2, 4, 5]])",
        "maximizeTheProfit(n=10, offers=[[1, 2, 5], [3, 5, 7], [2, 5, 6], [4, 7, 10], [2, 4, 5]])",
        "maximizeTheProfit(n=7, offers=[[0, 6, 6], [1, 4, 5], [2, 5, 3], [3, 7, 4], [4, 6, 10], [5, 7, 8], [6, 8, 5]])",
        "maximizeTheProfit(n = 8, offers = [[1, 4, 2], [2, 4, 5], [3, 6, 4], [2, 5, 7], [4, 7, 8]])",
        "maximizeTheProfit(n = 10, offers = [[1, 5, 3], [2, 7, 5], [4, 8, 6], [1, 6, 4], [3, 7, 4], [4, 9, 7], [6, 10, 5], [8, 10, 8]])"
    ],
    "sample_131": [
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3])",
        "maxIncreasingGroups(x = [1, 2, 3])",
        "maxIncreasingGroups([1, 2, 3, 6])",
        "maxIncreasingGroups([1, 2, 3, 5])",
        "maxIncreasingGroups([1, 2, 5, 6])",
        "maxIncreasingGroups([1, 2, 3, 6, 8, 12])",
        "maxIncreasingGroups([2, 2, 3, 4])",
        "maxIncreasingGroups(x = [1, 2, 2, 3, 3, 4])"
    ],
    "sample_225": [
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 7, 9, 11], k = 2)",
        "sumIndicesWithKSetBits(nums = [3, 2, 4, 1, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 7, 1, 3], k = 1)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [3,2,4,6,6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k=2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 5, 1, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 3, 5, 2, 7, 4], k = 2)"
    ],
    "sample_207": [
        "minimumOperations(num = \"2500\")",
        "minimumOperations(\"120\")",
        "minimumOperations(num = \"750\")",
        "minimumOperations(\"001\")",
        "minimumOperations(num = \"25000\")",
        "minimumOperations(num = \"125750\")",
        "minimumOperations(num = \"12575\")",
        "minimumOperations('2750')",
        "minimumOperations(num = \"50000\")",
        "minimumOperations('4025')"
    ],
    "sample_189": [
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LLR\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"LRR\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"RLL\")",
        "furthestDistanceFromOrigin(moves = \"LMRU\")",
        "furthestDistanceFromOrigin(moves = \"LMRU\")",
        "furthestDistanceFromOrigin(moves = \"RR?\")",
        "furthestDistanceFromOrigin(moves = \"URR\")"
    ],
    "sample_206": [
        "minimumOperations(num = \"2500\")",
        "minimumOperations(num = \"205\")",
        "minimumOperations(num = \"2550\")",
        "minimumOperations(num = \"250250\")",
        "minimumOperations(num = \"250250\")",
        "minimumOperations(\"0040\")",
        "minimumOperations(\"2550\")",
        "minimumOperations(\"2050\")",
        "minimumOperations(\"050\")",
        "minimumOperations(num = '15250')"
    ],
    "sample_155": [
        "canSplitArray(nums = [2, 5, 1, 3], m = 4)",
        "canSplitArray(nums = [1, 4, 2, 3], m = 5)",
        "canSplitArray(nums = [2,4,1,3], m = 4)",
        "canSplitArray(nums = [15, 5, 20, 10, 35], m = 40)",
        "canSplitArray(nums = [2, 5, 1, 3, 5, 6], m = 4)",
        "canSplitArray(nums = [2,3,5,7], m = 10)",
        "canSplitArray(nums = [2, 4, 3, 6], m = 7)",
        "canSplitArray(nums = [2, 5, 9, 1, 3], m = 8)",
        "canSplitArray(nums = [1, 10, 1, 20], m = 21)",
        "canSplitArray(nums = [2, 5, 2, 5, 5, 2], m = 10)"
    ],
    "sample_140": [
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10])",
        "countCompleteSubarrays(nums = [1,2,3,2,1,2,3,2,1,2,3])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 2, 1, 3, 4, 2, 1])",
        "countCompleteSubarrays(nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5])",
        "countCompleteSubarrays(nums = [1, 2, 3, 2, 2, 3, 1, 1])",
        "countCompleteSubarrays(nums = [1, 2, 3, 4, 1, 2, 3, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 1, 2, 3, 1, 2, 1, 2, 1])",
        "countCompleteSubarrays(nums = [1, 2, 1, 3, 2, 3, 2, 1, 3, 2, 2, 2])"
    ],
    "sample_202": [
        "minimumOperations(num = \"2025\")",
        "minimumOperations(num = \"000\")",
        "minimumOperations(num = \"1250\")",
        "minimumOperations(num = \"1000\")",
        "minimumOperations(\"1250\")",
        "minimumOperations(\"2025\")",
        "minimumOperations(num = \"1025\")",
        "minimumOperations(num = \"27\")",
        "minimumOperations(\"750\")",
        "minimumOperations(num = \"120257\")"
    ],
    "sample_128": [
        "splitWordsBySeparator(a = [\"apple,orange\", \"banana\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apple-orange-banana\", \"grape-kiwi-melon\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"apple--banana--cherry\", \"--date--\"], b = \"--\")",
        "splitWordsBySeparator(a = [\"apple-orange-banana\", \"cherry\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"hello-world\", \"good-day-everyone\"], b = \"-\")",
        "splitWordsBySeparator(a = [\"eat,sleep,code\", \"repeat\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apple,orange,banana\", \"grape,cherry,melon\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apples,oranges,pineapples\", \"grapes,berries\"], b = \",\")",
        "splitWordsBySeparator(a = [\"apple banana kiwi\", \"grape orange melon\"], b = \" \")",
        "splitWordsBySeparator(a = [\"apple-pie\", \"cake-loaf\"], b = \"-\")"
    ],
    "sample_222": [
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "sumIndicesWithKSetBits(nums = [1,2,3,4,5,6,7,8,9,10], k = 2)",
        "sumIndicesWithKSetBits(nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [2, 3, 4, 5, 6, 7], k = 2)",
        "sumIndicesWithKSetBits(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 2)",
        "sumIndicesWithKSetBits(nums = [4, 2, 1, 3, 0, 5], k = 2)"
    ],
    "sample_234": [
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '001')",
        "maximumOddBinaryNumber(s = '0100')",
        "maximumOddBinaryNumber(s = \"0110\")",
        "maximumOddBinaryNumber(s = '0010')",
        "maximumOddBinaryNumber(s = \"011\")",
        "maximumOddBinaryNumber(s = \"111\")",
        "maximumOddBinaryNumber(s='010')",
        "maximumOddBinaryNumber(s='0100')",
        "maximumOddBinaryNumber(s = \"0111\")"
    ],
    "sample_186": [
        "longestEqualSubarray(nums = [1,3,1,3,1,3], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,1,2,3,4,1,2,3,4], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,2,1,1,2,3,2,1], k = 2)",
        "longestEqualSubarray(nums = [1,3,1,3,1,3,1,3,1], k = 2)",
        "longestEqualSubarray(nums = [1,3,3,1,1,3,3,2,2,2,1,1,1], k = 2)",
        "longestEqualSubarray(nums = [2,2,2,1,1,1,2,2,2], k = 1)",
        "longestEqualSubarray(nums = [2,2,1,1,1,1,2,2], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,1,2,3,1,2,3,4,5], k = 1)",
        "longestEqualSubarray(nums = [2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2",
        "longestEqualSubarray(nums = [1, 3, 3, 1, 1, 1, 3, 3, 3, 2, 2, 2], k=1)"
    ],
    "sample_183": [
        "longestEqualSubarray(nums = [1,2,3,1,2,3,1,2,3,1,2,3], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 5, 3, 1, 3, 1, 3], k = 2)",
        "longestEqualSubarray(nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 5, 3, 1, 3, 3, 3, 1, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,1,2,3,4,5], k = 2)",
        "longestEqualSubarray(nums = [1, 3, 5, 3, 1, 3, 1, 3, 1, 3, 1], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,7,8,9,1,2,3,4], k = 4)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,1,2,3,4,5,6], k = 2)",
        "longestEqualSubarray(nums = [1,2,3,4,5,6,1,2,3,4,1,2,3,4,5,1,2,3,4,5,6], k = 3)",
        "longestEqualSubarray(nums = [3,3,3,3,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3], k = 2)"
    ],
    "sample_236": [
        "maximumOddBinaryNumber(s = \"000\")",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = '000')",
        "maximumOddBinaryNumber(s = \"00\")",
        "maximumOddBinaryNumber(s = \"00\")",
        "maximumOddBinaryNumber(s = '00')",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"001\")",
        "maximumOddBinaryNumber(s = \"000\")"
    ],
    "sample_166": [
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"Hello\", \"World\"], s = \"HW\")",
        "isAcronym(words = [\"I\", \"Love\", \"Python\", \"Programming\"], s = \"ILPP\")",
        "isAcronym(words = [\"mass\", \"action\", \"kinetics\"], s = \"MAK\")",
        "isAcronym(words = [\"New\", \"York\"], s = \"NY\")",
        "isAcronym(words = [\"He\", \"llo\"], s = \"Hll\")",
        "isAcronym(words = [\"What\", \"a\", \"wonderful\", \"day\"], s = \"WAD\")",
        "isAcronym(words = [\"for\", \"All\", \"Mankind\"], s = \"fAM\")",
        "isAcronym(words = [\"word\", \"libel\", \"sarcasm\"], s = \"WLS\")",
        "isAcronym(words=[\"fruit\", \"acid\", \"bomb\"], s=\"fab\")"
    ],
    "sample_163": [
        "maxSum(nums = [55,9])",
        "maxSum(nums = [55, 33, 22])",
        "maxSum(nums = [51,32,43])",
        "maxSum(nums = [55, 23, 10])",
        "maxSum(nums = [55, 23, 34, 12])",
        "maxSum(nums = [55, 33, 22, 77])",
        "maxSum(nums = [10,21])",
        "maxSum(nums = [55, 23, 5678, 98, 123456])",
        "maxSum(nums=[15, 51, 20, 31])",
        "maxSum(nums = [51,23,25,90,45,19])"
    ]
}